/**
* DevExpress Dashboard (_collection-editor-viewmodel.js)
* Version:  20.1.6
* Build date: Jul 17, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var data_source_1 = require("devextreme/data/data_source");
var $ = require("jquery");
var ko = require("knockout");
var _default_1 = require("../../../data/localization/_default");
var _collection_editor_viewmodel_base_1 = require("./_collection-editor-viewmodel-base");
var CollectionEditorViewModel = (function (_super) {
    __extends(CollectionEditorViewModel, _super);
    function CollectionEditorViewModel(params, dataSource) {
        var _this = _super.call(this, params) || this;
        _this.add = function () {
            var newItem = ko.observable(_this.createNewItemHandler());
            if (!!newItem) {
                var addToDataSource = function () {
                    if (_this.dataSource.indexOf(newItem()) === -1) {
                        _this.dataSource.push(newItem());
                    }
                    _this._setListSelection(newItem());
                };
                if (_this.editItemHandler) {
                    var args = new CollectionEditorEditItemArguments();
                    _this.editItemHandler(newItem(), args, newItem);
                    if (args.createImmediately) {
                        addToDataSource();
                    }
                    else {
                        args.requestRecalculation.add(addToDataSource);
                    }
                }
                else {
                    addToDataSource();
                }
            }
        };
        _this.edit = function () { return _this.editItemHandler && _this.editItemHandler(_this.selectedValue, new CollectionEditorEditItemArguments(), ko.observable(_this.selectedValue)); };
        _this.remove = function () { return _this.removeEnabled() && _this.removeItemHandler && _this.removeItemHandler(_this.selectedValue); };
        _this.up = function () {
            var selection = _this.selectedValue;
            !!_this.reorderItemsHandler ? _this.reorderItemsHandler(selection, 'up') : _this._moveSelectedGridRow('up');
            _this._setListSelection(selection);
        };
        _this.down = function () {
            var selection = _this.selectedValue;
            !!_this.reorderItemsHandler ? _this.reorderItemsHandler(selection, 'down') : _this._moveSelectedGridRow('down');
            _this._setListSelection(selection);
        };
        _this.dataField = params.propertyName;
        _this.dataSource = dataSource;
        _this.isToolbarVisible = params.isToolbarVisible === undefined || params.isToolbarVisible;
        _this.allowAddItem = params.allowAddItem === undefined || params.allowAddItem;
        _this.allowReorderItem = params.allowReorderItem === undefined || params.allowReorderItem;
        _this.allowRemoveItem = params.allowRemoveItem === undefined || params.allowRemoveItem;
        _this.createNewItemHandler = params.createNewItemHandler;
        _this.editItemHandler = params.editItemHandler;
        _this.reorderItemsHandler = params.reorderItemsHandler;
        _this.customToolbarItems = params.customToolbarItems;
        _this.visibleItemsFilter = params.visibleItemsFilter || (function (_) { return true; });
        _this.customTemplate = params.customTemplate;
        _this.removeItemHandler = params.removeItemHandler || (function (item) { return _this.dataSource.remove(item); });
        _this.enableRemoveItem = params.enableRemoveItem || (function (_) { return true; });
        _this.addEnabled = ko.observable(true);
        _this.subscriptions = [_this.dataSource.subscribe(function () { return _this._safeReloadDataSource(); })];
        params.forceRefreshCallback && params.forceRefreshCallback.subscribe(function () { return _this._safeReloadDataSource(); });
        return _this;
    }
    CollectionEditorViewModel.prototype.getListOptions = function () {
        var _this = this;
        return __assign({}, _super.prototype.getListOptions.call(this), { dataSource: new data_source_1.default({ load: function () { return ko.unwrap(_this.dataSource).filter(_this.visibleItemsFilter); } }) });
    };
    CollectionEditorViewModel.prototype._itemTemplate = function (itemData, itemIndex, itemElement) {
        this.customTemplate ? this.customTemplate(itemData, itemIndex, itemElement) : _super.prototype._itemTemplate.call(this, itemData, itemIndex, itemElement);
    };
    CollectionEditorViewModel.prototype._getDisplayText = function (itemData) {
        return _default_1.getLocalizationById(ko.unwrap(itemData[this.dataField]));
    };
    CollectionEditorViewModel.prototype._moveSelectedGridRow = function (direction) {
        var selectedValue = this.selectedValue;
        if (!selectedValue)
            return;
        this.listInstance.beginUpdate();
        var index = this.dataSource().indexOf(selectedValue);
        this.dataSource.splice(index, 1);
        this.dataSource.splice(direction === 'up' ? index - 1 : index + 1, 0, selectedValue);
        this.listInstance.endUpdate();
    };
    CollectionEditorViewModel.prototype._updateActionsState = function () {
        var selection = this.selectedValue;
        this.removeEnabled(!!selection && this.enableRemoveItem(selection));
        this.editEnabled(!!this.enableEditItem ? this.enableEditItem(selection) : !!selection);
        var selectedRowIndex = this.dataSource.indexOf(selection);
        this.upEnabled(!!selection && selectedRowIndex > 0);
        this.downEnabled(!!selection && selectedRowIndex < this.dataSource().length - 1);
    };
    CollectionEditorViewModel.prototype._safeReloadDataSource = function () {
        var _this = this;
        var selection = this.dataSource().some(function (v) { return v === _this.selectedValue; }) ? this.selectedValue : undefined;
        if (this.listInstance) {
            this.listInstance.reload();
            selection && this._setListSelection(selection);
        }
    };
    CollectionEditorViewModel.prototype.dispose = function () {
        this.subscriptions && this.subscriptions.forEach(function (s) { return s.dispose(); });
        _super.prototype.dispose.call(this);
    };
    return CollectionEditorViewModel;
}(_collection_editor_viewmodel_base_1.CollectionEditorViewModelBase));
exports.CollectionEditorViewModel = CollectionEditorViewModel;
var CollectionEditorEditItemArguments = (function () {
    function CollectionEditorEditItemArguments() {
        this.requestRecalculation = $.Callbacks();
        this.createImmediately = true;
    }
    return CollectionEditorEditItemArguments;
}());
exports.CollectionEditorEditItemArguments = CollectionEditorEditItemArguments;
