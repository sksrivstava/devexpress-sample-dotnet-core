/**
* DevExpress Dashboard (_inline-edit-collection-editor-viewmodel.js)
* Version:  20.1.6
* Build date: Jul 17, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var data_source_1 = require("devextreme/data/data_source");
var $ = require("jquery");
var ko = require("knockout");
var _default_1 = require("../../../data/localization/_default");
var GridDataSourceMapper = (function () {
    function GridDataSourceMapper(dataFields) {
        this.dataFields = dataFields;
        this.gridDataSourceKeyCache = [];
    }
    GridDataSourceMapper.prototype.mapDataSource = function (srcData) {
        var _this = this;
        var updatedCache = [];
        var latestCacheItemKey = this.gridDataSourceKeyCache
            .reduce(function (acc, item) {
            return item && item.key > acc ? item.key : acc;
        }, 0);
        var data = ko.unwrap(srcData)
            .map(function (dataSourceItem) {
            var cacheItem = _this.gridDataSourceKeyCache
                .filter(function (cacheItem) { return cacheItem.objRef === dataSourceItem; })[0];
            if (!cacheItem) {
                cacheItem = {
                    key: ++latestCacheItemKey,
                    objRef: dataSourceItem,
                };
            }
            updatedCache.push(cacheItem);
            return _this.dataFields.reduce(function (acc, field) {
                acc[field] = cacheItem.objRef && ko.unwrap(cacheItem.objRef[field]);
                return acc;
            }, { keyField: cacheItem.key });
        });
        this.gridDataSourceKeyCache = updatedCache;
        return data;
    };
    GridDataSourceMapper.prototype.updateDataSourceItem = function (key, newValues) {
        var cacheItem = this.gridDataSourceKeyCache
            .filter(function (cacheItem) { return cacheItem.key === key; })[0];
        var container = cacheItem && cacheItem.objRef;
        if (container) {
            this.dataFields.forEach(function (field) {
                newValues.hasOwnProperty(field) && ko.isWritableObservable(container[field]) && container[field](newValues[field]);
            });
        }
    };
    GridDataSourceMapper.prototype.getObjectByKey = function (key) {
        var cacheItem = this.gridDataSourceKeyCache
            .filter(function (item) { return item.key === key; })[0];
        return cacheItem && cacheItem.objRef;
    };
    GridDataSourceMapper.prototype.getKeyByObject = function (obj) {
        var cacheItem = this.gridDataSourceKeyCache
            .filter(function (item) { return item.objRef === obj; })[0];
        return cacheItem && cacheItem.key;
    };
    return GridDataSourceMapper;
}());
var InlineEditCollectionEditorViewModel = (function () {
    function InlineEditCollectionEditorViewModel(params, dataSource) {
        var _this = this;
        this.add = function () { return _this._addNewItemRow(); };
        this.remove = function () { return _this.dataSource.remove(_this.selectedValue); };
        this.down = function () { return _this.downEnabled() && _this._moveSelectedGridRow('down'); };
        this.up = function () { return _this.upEnabled() && _this._moveSelectedGridRow('up'); };
        this.dataFields = params.dataFields;
        this.dataSource = dataSource;
        this.noDataText = _default_1.getLocalizationById(params.noDataText);
        this.gridColumns = params.gridColumns;
        this.createNewItemHandler = params.createNewItemHandler;
        this.customizeInlineEditor = params.customizeInlineEditor;
        this.customizeCell = params.customizeCell;
        this.enableAddItem = params.enableAddItem;
        this.enableRemoveItem = params.enableRemoveItem;
        this.enableEditItem = params.enableEditItem;
        this.isToolbarVisible = params.isToolbarVisible === undefined || params.isToolbarVisible;
        this.allowAddItem = params.allowAddItem === undefined || params.allowAddItem;
        this.allowRemoveItem = params.allowRemoveItem === undefined || params.allowRemoveItem;
        this.allowReorderItem = params.allowReorderItem === undefined || params.allowReorderItem;
        this.addEnabled = ko.observable(true);
        this.removeEnabled = ko.observable(false);
        this.upEnabled = ko.observable(false);
        this.downEnabled = ko.observable(false);
        this.dataSourceMapper = new GridDataSourceMapper(this.dataFields);
        params.forceRefreshCallback && params.forceRefreshCallback.subscribe(function () { return _this.gridInstance && _this.gridInstance.refresh(); });
    }
    InlineEditCollectionEditorViewModel.prototype.getGridOptions = function () {
        var _this = this;
        var gridDataSource = new data_source_1.default({
            loadMode: 'raw',
            key: 'keyField',
            load: function () {
                return _this.dataSourceMapper.mapDataSource(_this.dataSource);
            },
            update: function (key, values) {
                _this.dataSourceMapper.updateDataSourceItem(key, values);
                return $.Deferred().resolve().promise();
            },
            insert: function (newRow) {
                var newDataSourceItem = _this.createNewItemHandler();
                if (newDataSourceItem) {
                    _this.dataFields.forEach(function (field) { return newDataSourceItem[field](ko.unwrap(newRow[field])); });
                    _this.dataSource.push(newDataSourceItem);
                }
                return $.Deferred().resolve(newDataSourceItem).promise();
            },
        });
        this.dataSourceSubscription = this.dataSource.subscribe(function () { return _this.gridInstance.refresh(); });
        var dataGridOptions = {
            onInitialized: function (e) { return _this.gridInstance = e.component; },
            dataSource: gridDataSource,
            remoteOperations: false,
            showColumnHeaders: false,
            noDataText: this.noDataText,
            showColumnLines: false,
            showRowLines: true,
            loadPanel: {
                enabled: false,
            },
            paging: {
                enabled: false
            },
            selection: {
                mode: 'single'
            },
            columns: !!this.gridColumns ? this.gridColumns : this.dataFields,
            editing: {
                allowUpdating: true,
                mode: 'cell',
                startEditAction: 'dblClick',
            },
            onCellClick: function (e) {
                if (e.row && e.row.isSelected) {
                    _this.gridInstance.editCell(e.rowIndex, e.columnIndex);
                }
            },
            onCellPrepared: this.customizeCell,
            onEditingStart: function (e) { return e.cancel = _this.enableEditItem && !_this.enableEditItem(_this.selectedValue, e); },
            onSelectionChanged: function (e) { return _this._updateActionsState(); },
            onContentReady: function (e) { return _this._updateActionsState(); },
            onEditorPreparing: function (e) { return _this.customizeInlineEditor && _this.customizeInlineEditor(e); },
        };
        return dataGridOptions;
    };
    Object.defineProperty(InlineEditCollectionEditorViewModel.prototype, "selectedValue", {
        get: function () {
            var selectedKey = this.gridInstance && this.gridInstance.getSelectedRowKeys()[0];
            return this.dataSourceMapper.getObjectByKey(selectedKey);
        },
        enumerable: true,
        configurable: true
    });
    InlineEditCollectionEditorViewModel.prototype.dispose = function () {
        this.dataSourceSubscription && this.dataSourceSubscription.dispose();
    };
    InlineEditCollectionEditorViewModel.prototype._addNewItemRow = function () {
        var _this = this;
        var insertedObject;
        if (this.gridInstance.hasEditData())
            this.gridInstance.saveEditData();
        this.gridInstance.beginUpdate();
        var newObject = this.createNewItemHandler();
        this.gridInstance
            .getDataSource()
            .store()
            .insert(this.dataFields
            .reduce(function (acc, field) {
            acc[field] = newObject[field];
            return acc;
        }, {}))
            .then(function (obj) { return insertedObject = obj; });
        this.gridInstance.endUpdate();
        this.gridInstance.refresh().then(function () {
            setTimeout(function () {
                var rowKey = _this.dataSourceMapper.getKeyByObject(insertedObject);
                if (rowKey) {
                    var rowIndex = _this.gridInstance.getRowIndexByKey(rowKey);
                    _this.gridInstance.focus(_this.gridInstance.getCellElement(rowIndex, 0));
                    _this.gridInstance.editCell(rowIndex, 0);
                }
            }, 1);
        });
    };
    InlineEditCollectionEditorViewModel.prototype._moveSelectedGridRow = function (direction) {
        var selectedValue = this.selectedValue;
        if (!selectedValue)
            return;
        this.gridInstance.beginUpdate();
        var index = this.dataSource().indexOf(selectedValue);
        this.dataSource.splice(index, 1);
        this.dataSource.splice(direction === 'up' ? index - 1 : index + 1, 0, selectedValue);
        this.gridInstance.endUpdate();
    };
    InlineEditCollectionEditorViewModel.prototype._updateActionsState = function () {
        this.addEnabled(!!this.enableAddItem ? this.enableAddItem(this.selectedValue) : true);
        this.removeEnabled(!!this.enableRemoveItem ? this.enableRemoveItem(this.selectedValue) : !!this.selectedValue);
        var selectedRowIndex = this.dataSource.indexOf(this.selectedValue);
        this.upEnabled(this.selectedValue && selectedRowIndex > 0);
        this.downEnabled(this.selectedValue && selectedRowIndex < this.gridInstance.getDataSource().totalCount() - 1);
    };
    return InlineEditCollectionEditorViewModel;
}());
exports.InlineEditCollectionEditorViewModel = InlineEditCollectionEditorViewModel;
