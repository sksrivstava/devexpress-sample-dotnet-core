/**
* DevExpress Dashboard (_editable-list-editor-viewmodel.js)
* Version:  20.1.6
* Build date: Jul 17, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var _default_1 = require("../../../data/localization/_default");
var _collection_editor_viewmodel_base_1 = require("./_collection-editor-viewmodel-base");
var EditableListEditorViewModel = (function (_super) {
    __extends(EditableListEditorViewModel, _super);
    function EditableListEditorViewModel(params, selectedItem) {
        var _this = _super.call(this, params) || this;
        _this.edit = function () { return _this.editItemHandler && _this.editItemHandler(_this.selectedValue); };
        _this.dataField = params.propertyName;
        _this.dataSource = params.dataSource;
        _this.getDisplayText = params.getDisplayText;
        _this.enableEditItem = params.enableEditItem;
        _this.editItemHandler = params.editItemHandler;
        _this.selectedItem = selectedItem;
        _this.onSelectionChanged = params.onSelectionChanged;
        _this.isToolbarVisible = true;
        _this.allowEditItem = true;
        return _this;
    }
    EditableListEditorViewModel.prototype.getListOptions = function () {
        this._innerSelection = ko.unwrap(this.selectedItem);
        return __assign({}, _super.prototype.getListOptions.call(this), { dataSource: this.dataSource, selectedItems: [this._innerSelection] });
    };
    EditableListEditorViewModel.prototype._getDisplayText = function (itemData) {
        return this.getDisplayText ? this.getDisplayText(itemData) : _default_1.getLocalizationById(ko.unwrap(itemData[this.dataField]));
    };
    EditableListEditorViewModel.prototype._listSelectionChanged = function () {
        this.selectedItem && this.selectedItem(this.selectedValue);
        this.onSelectionChanged && this.onSelectionChanged(this.selectedValue);
    };
    EditableListEditorViewModel.prototype._updateActionsState = function () {
        var selection = this.selectedValue;
        this.editEnabled(!!this.enableEditItem ? this.enableEditItem(selection) : !!selection);
    };
    return EditableListEditorViewModel;
}(_collection_editor_viewmodel_base_1.CollectionEditorViewModelBase));
exports.EditableListEditorViewModel = EditableListEditorViewModel;
