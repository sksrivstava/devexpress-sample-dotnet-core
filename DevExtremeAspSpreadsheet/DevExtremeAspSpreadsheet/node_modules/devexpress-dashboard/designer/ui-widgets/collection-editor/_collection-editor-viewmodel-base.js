/**
* DevExpress Dashboard (_collection-editor-viewmodel-base.js)
* Version:  20.1.6
* Build date: Jul 17, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var _default_1 = require("../../../data/localization/_default");
var _utils_1 = require("../../../data/_utils");
var CollectionEditorViewModelBase = (function () {
    function CollectionEditorViewModelBase(params) {
        this.noDataText = params.noDataText || 'DashboardWebStringId.CollectionEditor.NoItems';
        this.customToolbarItems = params.customToolbarItems;
        this.isToolbarVisible = true;
        this.allowAddItem = false;
        this.allowEditItem = true;
        this.allowReorderItem = false;
        this.allowRemoveItem = false;
        this.addEnabled = ko.observable(false);
        this.editEnabled = ko.observable(false);
        this.upEnabled = ko.observable(false);
        this.downEnabled = ko.observable(false);
        this.removeEnabled = ko.observable(false);
    }
    CollectionEditorViewModelBase.prototype.getListOptions = function () {
        var _this = this;
        return {
            activeStateEnabled: false,
            itemTemplate: function (itemData, itemIndex, itemElement) { return _this._itemTemplate(itemData, itemIndex, _utils_1.$unwrap(itemElement)); },
            noDataText: _default_1.getLocalizationById(this.noDataText),
            onContentReady: function () { return _this._updateActionsState(); },
            onInitialized: function (e) { return _this.listInstance = e.component; },
            onItemClick: function () { return _this._itemClickHandler(); },
            selectionMode: 'single',
        };
    };
    Object.defineProperty(CollectionEditorViewModelBase.prototype, "selectedValue", {
        get: function () {
            return this.listInstance && this.listInstance.option('selectedItems')[0];
        },
        enumerable: true,
        configurable: true
    });
    CollectionEditorViewModelBase.prototype.dispose = function () { };
    CollectionEditorViewModelBase.prototype._itemTemplate = function (itemData, itemIndex, itemElement) {
        var div = document.createElement('div');
        div.innerText = this._getDisplayText(itemData);
        itemElement.appendChild(div);
    };
    CollectionEditorViewModelBase.prototype._getDisplayText = function (itemData) {
        return '';
    };
    CollectionEditorViewModelBase.prototype._itemClickHandler = function () {
        if (this._innerSelection !== this.selectedValue) {
            this._onSelectionChanged();
        }
        else {
            if (this.isToolbarVisible && this.allowEditItem && this.editEnabled()) {
                this.edit();
            }
        }
    };
    CollectionEditorViewModelBase.prototype._listSelectionChanged = function () { };
    CollectionEditorViewModelBase.prototype._updateActionsState = function () { };
    CollectionEditorViewModelBase.prototype._onSelectionChanged = function () {
        this._innerSelection = this.selectedValue;
        this._listSelectionChanged();
        this._updateActionsState();
    };
    CollectionEditorViewModelBase.prototype._setListSelection = function (selectedItem) {
        this.listInstance.option('selectedItems', selectedItem !== undefined ? [selectedItem] : []);
        this._onSelectionChanged();
    };
    return CollectionEditorViewModelBase;
}());
exports.CollectionEditorViewModelBase = CollectionEditorViewModelBase;
var CollectionEditorRefreshCallback = (function () {
    function CollectionEditorRefreshCallback() {
        var _this = this;
        this.callbacks = [];
        this.refresh = function () { return _this.callbacks.forEach(function (fn) { return fn(); }); };
        this.subscribe = function (fn) { return _this.callbacks.push(fn); };
    }
    return CollectionEditorRefreshCallback;
}());
exports.CollectionEditorRefreshCallback = CollectionEditorRefreshCallback;
