/**
* DevExpress Dashboard (_lookup-values-editors.js)
* Version:  20.1.6
* Build date: Jul 17, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var custom_store_1 = require("devextreme/data/custom_store");
var data_source_1 = require("devextreme/data/data_source");
var tag_box_1 = require("devextreme/ui/tag_box");
var $ = require("jquery");
var ko = require("knockout");
var _default_1 = require("../../data/localization/_default");
var look_up_value_1 = require("../../model/parameters/look-up-value");
exports.singleLookupValueEditor = function (options) { return function (context) {
    return {
        editorType: 'dxSelectBox',
        editorOptions: getLookupValueEditorOptions(options.parameter, options.dataSourceBrowser, context.widgetContainer)
    };
}; };
exports.multipleLookupValueEditor = function (options) { return function (context) {
    return {
        template: function (args) {
            var div = document.createElement('div');
            new tag_box_1.default(div, __assign({}, args.editorOptions, getLookupValuesEditorOptions(options.parameter, options.dataSourceBrowser, context.widgetContainer)));
            return div;
        }
    };
}; };
function getLookupValueEditorOptions(parameter, dataSourceBrowser, container) {
    var disposables = [];
    var parameterValues;
    var items = ko.observable([]);
    disposables.push(ko.computed(function () {
        if (!!parameter.staticListLookUpSettings()) {
            items(parameter.staticListLookUpSettings().values().filter(function (lookUpValue) { return !!lookUpValue.value(); }).map(function (lookUpValue) { return { Value: lookUpValue.value(), DisplayText: lookUpValue.value() }; }));
        }
        else if (!!parameter.dynamicListLookUpSettings()) {
            parameterValues = dataSourceBrowser.getParameterValues(parameter.type(), parameter.dynamicListLookUpSettings());
            if (parameterValues().length === 0) {
                parameterValues.subscribe(function (newValues) { return items(newValues); });
            }
            else {
                items(parameterValues());
            }
        }
    }));
    var dataSource = new data_source_1.default({
        store: getSortableCustomStorage(items, 'DisplayText'),
        paginate: true,
        pageSize: 100
    });
    disposables.push(items.subscribe(function (newItems) {
        dataSource.reload();
    }));
    return {
        dataSource: dataSource,
        searchEnabled: true,
        valueExpr: 'Value',
        searchExpr: ['Value', 'DisplayText'],
        displayExpr: 'DisplayText',
        noDataText: _default_1.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'),
        placeholder: _default_1.getLocalizationById('DashboardStringId.ParametersSelectorText'),
        showClearButton: true,
        multiline: false,
        showSelectionControls: true,
        dropDownOptions: {
            container: container
        },
        onDisposing: function (e) {
            disposables.forEach(function (d) { return d.dispose(); });
            disposables = [];
        }
    };
}
function getLookupValuesEditorOptions(parameter, dataSourceBrowser, container) {
    return __assign({}, getLookupValueEditorOptions(parameter, dataSourceBrowser, container), { value: parameter._valuesOfDefaultValues.peek(), onValueChanged: function (e) {
            parameter.defaultValues((e.value || []).map(function (val) {
                var lookUpValue = new look_up_value_1.LookUpValue();
                lookUpValue.value(val);
                return lookUpValue;
            }));
        } });
}
function getSortableCustomStorage(getItems, sortPropertyName) {
    return new custom_store_1.default({
        load: function (options) {
            var result = [].concat(_sortItems(getItems(), sortPropertyName));
            if (options.take)
                result = result.splice(options.skip, options.take);
            return $.Deferred().resolve(result).promise();
        },
        loadMode: 'raw'
    });
}
function _sortItems(items, sortPropertyName) {
    return items.sort(function (a, b) {
        var propA = ko.unwrap(a[sortPropertyName]), propB = ko.unwrap(b[sortPropertyName]);
        if (propA && propB) {
            var diff = propA - propB;
            if (!isNaN(diff))
                return diff;
            propA = propA.toLowerCase ? propA.toLowerCase() : propA;
            propB = propB.toLowerCase ? propB.toLowerCase() : propB;
            return (propA < propB) ? -1 : (propA > propB) ? 1 : 0;
        }
    });
}
