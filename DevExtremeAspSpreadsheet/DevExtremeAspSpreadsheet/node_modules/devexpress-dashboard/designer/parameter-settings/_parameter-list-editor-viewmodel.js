/**
* DevExpress Dashboard (_parameter-list-editor-viewmodel.js)
* Version:  20.1.6
* Build date: Jul 17, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var _default_1 = require("../../data/localization/_default");
var disposable_object_1 = require("../../model/disposable-object");
var _helper_classes_1 = require("../../model/internal/_helper-classes");
var parameter_1 = require("../../model/parameters/parameter");
var _parameter_editor_viewmodel_1 = require("./_parameter-editor-viewmodel");
var ParameterListEditorViewModel = (function (_super) {
    __extends(ParameterListEditorViewModel, _super);
    function ParameterListEditorViewModel(dashboard, _dataSourceBrowserGetter) {
        var _this = _super.call(this) || this;
        _this.dashboard = dashboard;
        _this._dataSourceBrowserGetter = _dataSourceBrowserGetter;
        _this.selectedParameters = ko.observable([]);
        _this.selectedParameter = ko.computed(function () {
            return _this.selectedParameters()[0];
        });
        _this.parameterEditorViewModel = ko.observable(null);
        _this.allowReordering = ko.observable(false);
        _this.toggleReordering = function () {
            _this.allowReordering(!_this.allowReordering());
        };
        _this.addParameter = function () {
            var name = _helper_classes_1.NameGenerator.generateName(_default_1.getLocalizationById('DashboardStringId.NewParameterNamePrefix'), _this.dashboard().parameters(), 'name', 1), param = new parameter_1.Parameter({ '@Name': name });
            _this.dashboard().parameters.push(param);
            _this.selectedParameters([param]);
        };
        _this.removeParameter = function () {
            _this.dashboard().parameters.remove(_this.selectedParameter());
            _this.selectedParameters([_this.dashboard().parameters()[0]]);
        };
        _this.reorderParameters = function (e) {
            var reorder = function (array, from, to) {
                var innerArray = array();
                innerArray.splice(to, 0, innerArray.splice(from, 1)[0]);
                array(innerArray);
            };
            reorder(_this.dashboard().parameters, e.fromIndex, e.toIndex);
            _this.selectedParameters([_this.dashboard().parameters()[e.toIndex]]);
        };
        _this.selectedParameter.subscribe(function (sp) {
            if (sp) {
                var isNameValid = function (name) {
                    return _this.dashboard().parameters().filter(function (p) { return p !== sp && p.name() === name; }).length === 0;
                };
                _this.parameterEditorViewModel(new _parameter_editor_viewmodel_1.ParameterEditorViewModel(sp, _dataSourceBrowserGetter, isNameValid));
            }
            else {
                _this.parameterEditorViewModel(undefined);
            }
        });
        _this.toDispose(_this.selectedParameter);
        return _this;
    }
    ParameterListEditorViewModel.prototype.initialize = function () {
        var _this = this;
        var setDefaultSelectedParameter = function (dashboard) {
            if (dashboard && dashboard.parameters.peek().length > 0) {
                _this.selectedParameters([dashboard.parameters.peek()[0]]);
            }
            else {
                _this.selectedParameters([]);
            }
        };
        this.toDispose(this.dashboard.subscribe(setDefaultSelectedParameter));
        setDefaultSelectedParameter(this.dashboard.peek());
    };
    return ParameterListEditorViewModel;
}(disposable_object_1.DisposableObject));
exports.ParameterListEditorViewModel = ParameterListEditorViewModel;
