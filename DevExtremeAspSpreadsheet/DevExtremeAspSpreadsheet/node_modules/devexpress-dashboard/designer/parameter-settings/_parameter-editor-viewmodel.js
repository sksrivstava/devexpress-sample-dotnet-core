/**
* DevExpress Dashboard (_parameter-editor-viewmodel.js)
* Version:  20.1.6
* Build date: Jul 17, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var _data_source_browser_1 = require("../../common/_data-source-browser");
var _default_1 = require("../../data/localization/_default");
var _utils_1 = require("../../data/_utils");
var disposable_object_1 = require("../../model/disposable-object");
var index_internal_1 = require("../../model/index.internal");
var look_up_value_1 = require("../../model/parameters/look-up-value");
var _dynamic_list_lookup_settings_1 = require("../../model/parameters/metadata/_dynamic-list-lookup-settings");
var _parameter_1 = require("../../model/parameters/metadata/_parameter");
var _static_list_lookup_settings_1 = require("../../model/parameters/metadata/_static-list-lookup-settings");
var _parameters_helper_1 = require("../../model/parameters/_parameters-helper");
var _form_adapter_editors_1 = require("../form-adapter/_form-adapter-editors");
var _object_properties_wrapper_1 = require("../form-adapter/_object-properties-wrapper");
var _field_picker_1 = require("./_field-picker");
var _lookup_values_editors_1 = require("./_lookup-values-editors");
var ParameterEditorViewModel = (function (_super) {
    __extends(ParameterEditorViewModel, _super);
    function ParameterEditorViewModel(parameter, _dataSourceBrowserGetter, isNameValid) {
        var _this = _super.call(this) || this;
        _this.parameter = parameter;
        _this._dataSourceBrowserGetter = _dataSourceBrowserGetter;
        _this.commonParameterSettings = _this._getCommonParameterSettingsWrapper(parameter, isNameValid);
        _this.lookUpParameterType = new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: parameter,
            properties: [__assign({}, _parameter_1.lookUpSourceType, { simpleFormAdapterItem: 'selectBoxEditor' })]
        });
        _this.staticListLookUpSettings = index_internal_1.safeComputed({ staticListLookUpSettings: parameter.staticListLookUpSettings, type: _this.parameter.type }, function (args) {
            if (args.staticListLookUpSettings) {
                return _this._getStaticListLookUpSettingsWrapper(args.staticListLookUpSettings, args.type);
            }
            return null;
        });
        _this.dynamicListLookUpSettings = index_internal_1.safeComputed({ dynamicListLookUpSettings: parameter.dynamicListLookUpSettings }, function (args) {
            if (args.dynamicListLookUpSettings) {
                return _this._getDynamicListLookUpSettingsWrapper(args.dynamicListLookUpSettings);
            }
            return null;
        });
        return _this;
    }
    Object.defineProperty(ParameterEditorViewModel.prototype, "dataSourceBrowser", {
        get: function () {
            return this._dataSourceBrowserGetter ? this._dataSourceBrowserGetter() : undefined;
        },
        enumerable: true,
        configurable: true
    });
    ParameterEditorViewModel.prototype._getStaticListLookUpSettingsWrapper = function (staticListLookUpSettings, parameterType) {
        var editorOptions = {
            dataFields: [_static_list_lookup_settings_1.lookUpValue.propertyName],
            noDataText: 'DashboardWebStringId.CollectionEditor.Parameters.NoItems',
            gridColumns: [__assign({ dataField: _static_list_lookup_settings_1.lookUpValue.propertyName }, getGridEditorSettings(parameterType))],
            createNewItemHandler: function () {
                var newLookUpValue = new look_up_value_1.LookUpValue({});
                newLookUpValue.valueType(parameterType);
                return newLookUpValue;
            },
        };
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: staticListLookUpSettings,
            properties: [__assign({}, _static_list_lookup_settings_1.lookUpvalues, { formAdapterItem: _form_adapter_editors_1.inlineEditCollectionEditor(editorOptions) })]
        });
    };
    ParameterEditorViewModel.prototype._getDynamicListLookUpSettingsWrapper = function (dynamicListLookUpSettings) {
        var _this = this;
        var _a;
        var isDataSourceAndDataMemberSet = function (model) {
            if (model) {
                var isDataSourceSet = !!model.dataSource();
                var dataMemberSupported = _this.dataSourceBrowser.dataMembersSupported(model);
                var isDataMemberSet = true;
                if (dataMemberSupported) {
                    isDataMemberSet = !!model.dataMember();
                }
                return isDataSourceSet && isDataMemberSet;
            }
            return false;
        };
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: dynamicListLookUpSettings,
            properties: [
                __assign({}, _dynamic_list_lookup_settings_1._dataSourceNameSerialization, { formAdapterItem: dataSourceChooserEditor(this.dataSourceBrowser) }),
                __assign({}, _dynamic_list_lookup_settings_1._dataMemberSerialization, { formAdapterItem: dataMemberChooserEditor({ dataSourceBrowser: this.dataSourceBrowser, dynamicListLookUpSettings: dynamicListLookUpSettings }) }),
                __assign({}, _dynamic_list_lookup_settings_1.valueMemberSerialization, { formAdapterItem: fieldChooserEditor({ dataSourceBrowser: this.dataSourceBrowser, dynamicListLookUpSettings: dynamicListLookUpSettings }) }),
                __assign({}, _dynamic_list_lookup_settings_1.displayMemberSerialization, { formAdapterItem: fieldChooserEditor({ dataSourceBrowser: this.dataSourceBrowser, dynamicListLookUpSettings: dynamicListLookUpSettings }) }),
                __assign({}, _dynamic_list_lookup_settings_1.sortByMember, { formAdapterItem: fieldChooserEditor({ dataSourceBrowser: this.dataSourceBrowser, dynamicListLookUpSettings: dynamicListLookUpSettings }) }),
                _dynamic_list_lookup_settings_1.sortOrder
            ],
            disabledFilterRules: (_a = {},
                _a[_dynamic_list_lookup_settings_1._dataMemberSerialization.propertyName] = function () { return !_this.dataSourceBrowser.dataMembersSupported(dynamicListLookUpSettings); },
                _a[_dynamic_list_lookup_settings_1.valueMemberSerialization.propertyName] = function () { return !isDataSourceAndDataMemberSet(dynamicListLookUpSettings); },
                _a[_dynamic_list_lookup_settings_1.displayMemberSerialization.propertyName] = function () { return !isDataSourceAndDataMemberSet(dynamicListLookUpSettings); },
                _a[_dynamic_list_lookup_settings_1.sortByMember.propertyName] = function () { return !isDataSourceAndDataMemberSet(dynamicListLookUpSettings); },
                _a)
        });
    };
    ParameterEditorViewModel.prototype._getCommonParameterSettingsWrapper = function (parameter, isNameValid) {
        var _this = this;
        var _a, _b, _c;
        var propertyInfos = [
            __assign({}, _parameter_1.parameterName, { validateBeforeSet: true, validationRules: [
                    {
                        type: 'custom',
                        validationCallback: function (options) { return isNameValid(options.value); },
                        message: _default_1.getLocalizationById('DashboardWebStringId.Parameters.ParameterNameShouldBeUnique')
                    }
                ].concat(_parameter_1.parameterName.validationRules) }),
            _parameter_1.description,
            _parameter_1.parameterVisible,
            _parameter_1.allowNull,
            _parameter_1.allowMultiselect,
            _parameter_1.parameterTypePropertyGrid,
            _parameter_1.defaultValue,
            __assign({}, _parameter_1.defaultValues, { validateBeforeSet: true, formAdapterItem: _lookup_values_editors_1.multipleLookupValueEditor({ parameter: parameter, dataSourceBrowser: this.dataSourceBrowser }) }),
            _parameter_1.selectAllValues,
            _parameter_1.lookUpSourceType
        ];
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: parameter,
            properties: propertyInfos,
            visibilityFilterRules: (_a = {},
                _a[_parameter_1.defaultValue.propertyName] = function (model) { return !model.allowMultiselect(); },
                _a[_parameter_1.defaultValues.propertyName] = function (model) { return !!model.allowMultiselect(); },
                _a[_parameter_1.selectAllValues.propertyName] = function (model) { return !!model.allowMultiselect(); },
                _a),
            disabledFilterRules: (_b = {},
                _b[_parameter_1.allowMultiselect.propertyName] = ['lookUpSourceType', '=', 'None'],
                _b[_parameter_1.defaultValues.propertyName] = function (model) { return !!model.selectAllValues(); },
                _b),
            dynamicEditorRules: (_c = {},
                _c[_parameter_1.defaultValue.propertyName] = function (model) {
                    if (model.lookUpSourceType() !== 'None') {
                        return { formAdapterItem: _lookup_values_editors_1.singleLookupValueEditor({ parameter: parameter, dataSourceBrowser: _this.dataSourceBrowser }) };
                    }
                    else {
                        return { simpleFormAdapterItem: _parameters_helper_1.ParameterHelper.getEditorType(model.type()) };
                    }
                },
                _c)
        });
    };
    return ParameterEditorViewModel;
}(disposable_object_1.DisposableObject));
exports.ParameterEditorViewModel = ParameterEditorViewModel;
var dataSourceChooserEditor = function (dataSourceBrowser) { return function (context) {
    var _a = index_internal_1.createObservableDataSource({
        dashboardDataSources: dataSourceBrowser._dataSources
    }, function (args) {
        return args.dashboardDataSources.map(function (ds) {
            return {
                name: ds.componentName(),
                displayName: ds.name()
            };
        });
    }), dataSource = _a.dataSource, dispose = _a.dispose;
    return {
        editorType: 'dxSelectBox',
        editorOptions: __assign({ dataSource: dataSource, displayExpr: 'displayName', valueExpr: 'name', displayCustomValue: true, placeholder: _default_1.getLocalizationById('DashboardStringId.ParametersSelectorText'), noDataText: _default_1.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'), onDisposing: function (e) {
                dispose();
            } }, { dropDownOptions: { container: context.widgetContainer } })
    };
}; };
var dataMemberChooserEditor = function (options) { return function (context) {
    var _a = index_internal_1.createObservableDataSource({
        dashboardDataSources: options.dataSourceBrowser._dataSources,
        selectedDashboardDataSource: options.dynamicListLookUpSettings.dataSource,
    }, function (args) {
        var dataSource = args.dashboardDataSources.filter(function (ds) { return ds.componentName() === args.selectedDashboardDataSource; })[0];
        if (dataSource && dataSource.supportDataMembers) {
            return options.dataSourceBrowser.getDataFieldsArray(args.selectedDashboardDataSource, '', '', _data_source_browser_1.isNonCollectionDataField).then(function (members) {
                return members.map(function (member) { return member.dataMember(); });
            });
        }
        return [];
    }), dataSource = _a.dataSource, dispose = _a.dispose;
    return {
        editorType: 'dxSelectBox',
        editorOptions: __assign({ dataSource: dataSource, displayCustomValue: true, placeholder: _default_1.getLocalizationById('DashboardStringId.ParametersSelectorText'), noDataText: _default_1.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'), onDisposing: function () {
                dispose();
            } }, { dropDownOptions: { container: context.widgetContainer } })
    };
}; };
var fieldChooserEditor = function (options) { return function (context) {
    return {
        template: function (args, itemElement) {
            var element = _utils_1.$unwrap(itemElement);
            element.classList.add('dx-dashboard-field-picker');
            var value = ko.observable(_form_adapter_editors_1.getFieldValue(args));
            value.subscribe(function (newValue) {
                args.component.updateData(args.dataField, newValue);
            });
            var model = new _field_picker_1.FieldListPicker(options.dataSourceBrowser, value, options.dynamicListLookUpSettings, args.editorOptions.disabled);
            ko.applyBindingsToNode(element, { template: { name: 'dx-dashboard-field-picker', data: model } }, context.bindingContext);
        }
    };
}; };
function getGridEditorSettings(typeString) {
    switch (typeString) {
        case 'System.Guid':
            return {
                dataType: 'string',
                editorOptions: {
                    mask: 'xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxx',
                    maskRules: {
                        'x': /[0-9a-fA-F]/,
                    },
                    useMaskedValue: true,
                },
            };
        case 'System.SByte':
        case 'System.Int64':
        case 'System.Int32':
        case 'System.Int16':
        case 'System.Byte':
        case 'System.UInt16':
        case 'System.UInt32':
        case 'System.UInt64':
            return {
                dataType: 'number',
                editorOptions: {
                    showSpinButtons: true,
                    format: '0#',
                },
            };
        case 'System.Single':
        case 'System.Double':
        case 'System.Decimal':
            return {
                dataType: 'number',
                editorOptions: {
                    showSpinButtons: true,
                },
            };
        case 'System.DateTime':
            return {
                dataType: 'datetime'
            };
        case 'System.Boolean':
            return {
                dataType: 'boolean'
            };
        default:
        case 'System.String':
            return {
                dataType: 'string'
            };
    }
}
