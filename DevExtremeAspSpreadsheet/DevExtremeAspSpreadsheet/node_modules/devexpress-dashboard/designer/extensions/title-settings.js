/**
* DevExpress Dashboard (title-settings.js)
* Version:  20.1.6
* Build date: Jul 17, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var control_options_1 = require("../../common/control-options");
var _dashboard_title_model_1 = require("../../common/viewer/title/_dashboard-title-model");
var disposable_object_1 = require("../../model/disposable-object");
var _base_metadata_1 = require("../../model/metadata/_base-metadata");
var _title_1 = require("../../model/metadata/_title");
var _dashboard_title_view_constants_1 = require("../../viewer-parts/title/_dashboard-title-view-constants");
var _form_adapter_editors_1 = require("../form-adapter/_form-adapter-editors");
var _object_properties_wrapper_1 = require("../form-adapter/_object-properties-wrapper");
var toolbox_items_1 = require("../toolbox-extension/toolbox-items");
var name = 'dashboard-title-editor';
var DashboardTitleEditorExtension = (function (_super) {
    __extends(DashboardTitleEditorExtension, _super);
    function DashboardTitleEditorExtension(dashboardControl) {
        var _this = _super.call(this) || this;
        _this.dashboardControl = dashboardControl;
        _this.name = name;
        _this._titlePreviewViewModel = ko.observable(null);
        _this._titleSettingsViewModel = ko.observable(null);
        _this._menuItem = new toolbox_items_1.DashboardMenuItem(_this.name, 'DashboardStringId.Title', 220, 84);
        _this._menuItem.template = 'dx-dashboard-form-title-settings';
        _this._menuItem.data = {
            titleSettings: _this._titleSettingsViewModel,
            preview: _this._titlePreviewViewModel,
            headerHeight: ko.observable(_dashboard_title_view_constants_1.titleHeight)
        };
        _this._menuItem.disabled = ko.computed(function () { return !dashboardControl.dashboard(); });
        return _this;
    }
    DashboardTitleEditorExtension.prototype.start = function () {
        var _this = this;
        this._updateTitleToolbar();
        this.toDispose(this.dashboardControl.dashboard.subscribe(function () { return _this._updateTitleToolbar(); }));
        var toolbarExtension = this.dashboardControl.findExtension('toolbox');
        if (toolbarExtension) {
            toolbarExtension.menuItems.push(this._menuItem);
        }
    };
    DashboardTitleEditorExtension.prototype.stop = function () {
        var toolbarExtension = this.dashboardControl.findExtension('toolbox');
        if (toolbarExtension) {
            toolbarExtension.menuItems.remove(this._menuItem);
        }
    };
    DashboardTitleEditorExtension.prototype._updateTitleToolbar = function () {
        var _this = this;
        if (this.dashboardControl.dashboard()) {
            var titleModel = new _dashboard_title_model_1.DashboardTitleModel(undefined, this.dashboardControl.dashboard());
            this._titlePreviewViewModel(titleModel.toolbarOptions());
            this._titleSettingsViewModel(this._createTitleSettings(this.dashboardControl.dashboard().title));
            this.toDispose(titleModel.toolbarOptions.subscribe(function (newOptions) {
                _this._titlePreviewViewModel(newOptions);
            }));
        }
        else {
            this._titlePreviewViewModel(null);
            this._titleSettingsViewModel(null);
        }
    };
    DashboardTitleEditorExtension.prototype._createTitleSettings = function (titleModel) {
        var visibilityRules = {};
        visibilityRules[_title_1.titleImage64.propertyName] = function () { return titleModel.imageType() === 'embedded'; };
        visibilityRules[_base_metadata_1.url.propertyName] = function () { return titleModel.imageType() === 'linked'; };
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: titleModel,
            properties: [
                _title_1.titleText,
                _title_1.titleVisible,
                _title_1.titleAlignment,
                _title_1.includeMasterFilter,
                _title_1.titleImageType,
                __assign({}, _title_1.titleImage64, { formAdapterItem: _form_adapter_editors_1.filePickerEditor({ placeholderId: 'Image', accept: 'image/bmp, image/gif, image/x-ico, image/jpeg, image/png, image/tiff', type: 'img' }) }),
                _title_1.titleImageUrl
            ],
            visibilityFilterRules: visibilityRules,
        });
    };
    return DashboardTitleEditorExtension;
}(disposable_object_1.DisposableObject));
exports.DashboardTitleEditorExtension = DashboardTitleEditorExtension;
control_options_1.designerExtensions[name] = function (dashboardControl, options) { return new DashboardTitleEditorExtension(dashboardControl); };
