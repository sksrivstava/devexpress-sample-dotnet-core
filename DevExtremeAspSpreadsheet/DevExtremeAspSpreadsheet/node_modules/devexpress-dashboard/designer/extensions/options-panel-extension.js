/**
* DevExpress Dashboard (options-panel-extension.js)
* Version:  20.1.6
* Build date: Jul 17, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var control_options_1 = require("../../common/control-options");
var _options_manager_1 = require("../../common/internal/_options-manager");
var _dashboard_item_menu_1 = require("../items/_dashboard-item-menu");
var name = 'item-options-panel';
var OptionsPanelExtension = (function () {
    function OptionsPanelExtension(dashboardControl, options) {
        if (options === void 0) { options = {}; }
        this.dashboardControl = dashboardControl;
        this.name = name;
        this._subscriptions = [];
        this._perMenuSubscriptions = [];
        this._customizeTabsHandlers = [];
        this._optionManager = new _options_manager_1.OptionsManager();
        this._optionManager.initialize({}, options, this);
    }
    OptionsPanelExtension.prototype._contextMenuSubscriber = function (itemContextMenu) {
        if (!!itemContextMenu) {
            var item = this.dashboardControl._dashboardSurface().selectedDashboardItem();
            this._updateContextMenu(itemContextMenu, item, this.dashboardControl.dashboard(), this.dashboardControl._dataSourceBrowser);
        }
    };
    OptionsPanelExtension.prototype.start = function () {
        var contextMenuExtension = this.dashboardControl.findExtension('item-menu');
        if (contextMenuExtension) {
            this._subscriptions.push(contextMenuExtension._itemContextMenu.subscribe(this._contextMenuSubscriber, this));
            this._contextMenuSubscriber(contextMenuExtension._itemContextMenu());
        }
    };
    OptionsPanelExtension.prototype.stop = function () {
        this._perMenuSubscriptions.forEach(function (s) { return s.dispose(); });
        this._perMenuSubscriptions = [];
        this._subscriptions.forEach(function (s) { return s.dispose(); });
        this._subscriptions = [];
    };
    OptionsPanelExtension.prototype._updateContextMenu = function (menu, item, dashboard, dataSourceBrowser) {
        var _this = this;
        var composer;
        if (menu.selectedItemSurface) {
            composer = menu.selectedItemSurface.getPropertiesComposer();
            menu.selectedItemSurface.customizeDashboardItemTabs = function (args) {
                _this._optionManager.events.raise('customizeSections', args);
            };
        }
        menu.contextMenuItems.push({
            menuItemId: this.name,
            icon: 'dx-dashboard-properties',
            title: 'DashboardWebStringId.Options',
            panelWidth: _dashboard_item_menu_1.DashboardItemMenuSizes.OptionsPanelWidth,
            templateName: 'dx-dashboard-options',
            detailVisible: ko.observable(false),
            showMenu: function () {
                var args = { dataSourceBrowser: dataSourceBrowser, dashboard: dashboard, propertiesController: menu.propertiesController };
                var tabs = composer.composeTabs(item, args);
                _this._customizeTabsHandlers.forEach(function (handler) { return handler(tabs, item); });
                menu.propertiesController.mainModel({
                    data: {
                        model: item,
                        propertiesTabs: ko.observableArray(tabs),
                    }
                });
            },
            customData: {
                propertiesController: menu.propertiesController,
            },
            index: 300
        });
    };
    OptionsPanelExtension.prototype._subscribeTabsChanged = function (handler) {
        var _this = this;
        if (this._customizeTabsHandlers.indexOf(handler) === -1) {
            this._customizeTabsHandlers.push(handler);
        }
        return {
            dispose: function () {
                _this._customizeTabsHandlers.splice(_this._customizeTabsHandlers.indexOf(handler), 1);
            }
        };
    };
    return OptionsPanelExtension;
}());
exports.OptionsPanelExtension = OptionsPanelExtension;
control_options_1.designerExtensions[name] = function (dashboardControl, options) { return new OptionsPanelExtension(dashboardControl, options); };
