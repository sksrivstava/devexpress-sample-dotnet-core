/**
* DevExpress Dashboard (_rich-edit-bindings.js)
* Version:  20.1.6
* Build date: Jul 17, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var devexpress_richedit_1 = require("devexpress-richedit");
var ko = require("knockout");
var index_internal_1 = require("../../data/index.internal");
ko.bindingHandlers['dx-dashboard-rich-edit'] = {
    init: function (element, valueAccessor, _, __, bindingContext) {
        var options = ko.unwrap(valueAccessor());
        var richEditOptions = devexpress_richedit_1.createOptions();
        richEditOptions.width = '100%';
        richEditOptions.height = '100%';
        richEditOptions.view.viewType = devexpress_richedit_1.ViewType.Simple;
        richEditOptions.view.simpleViewSettings.paddings = { bottom: 7, left: 7, right: 7, top: 7 };
        if (options.dashboardItemWidth && options.dashboardItemWidth > 0) {
            richEditOptions.view.simpleViewSettings.fixedWidth = options.dashboardItemWidth;
        }
        richEditOptions.events.saving = function (s, e) {
            var document = atob(e.base64);
            options.onSaving(document);
            e.handled = true;
        };
        richEditOptions.events.documentLoaded = function (s, e) {
            var document = s.document;
            document.fields.updateAllFields();
            var charProps = document.getDefaultCharacterProperties();
            charProps.fontName = 'Segoe UI';
            document.setDefaultCharacterProperties(charProps);
            document.modified = false;
        };
        richEditOptions.events.calculateDocumentVariable = function (s, e) {
            var docVariable = options.docVariables.filter(function (v) { return v.id === e.variableName; })[0];
            if (docVariable) {
                e.value = docVariable.displayName;
            }
        };
        var dashboardCmdPrefix = 'insertDashboardVariable';
        var fileTab = richEditOptions.ribbon.getTab(devexpress_richedit_1.RibbonTabType.File);
        fileTab.removeItem(devexpress_richedit_1.FileTabItemId.CreateNewDocument);
        fileTab.removeItem(devexpress_richedit_1.FileTabItemId.PrintDocument);
        var insertTab = richEditOptions.ribbon.getTab(devexpress_richedit_1.RibbonTabType.Insert);
        var mailMergeTab = richEditOptions.ribbon.getTab(devexpress_richedit_1.RibbonTabType.MailMerge);
        [devexpress_richedit_1.InsertTabItemId.ShowBookmarkDialog, devexpress_richedit_1.InsertTabItemId.InsertHeader, devexpress_richedit_1.InsertTabItemId.InsertFooter,
            devexpress_richedit_1.InsertTabItemId.InsertPageCountField, devexpress_richedit_1.InsertTabItemId.InsertPageNumberField, devexpress_richedit_1.InsertTabItemId.InsertFloatingTextBox].forEach(function (id) { return insertTab.removeItem(id); });
        var dashboardFieldsMenuItems = options.docVariables.length ?
            options.docVariables.map(function (docVariable) { return new devexpress_richedit_1.RibbonSubMenuItem(dashboardCmdPrefix + docVariable.id, docVariable.displayName); })
            :
                [new devexpress_richedit_1.RibbonSubMenuItem('dummyCommand', index_internal_1.getLocalizationById('DashboardWebStringId.TextBoxItemEditor.NoFields'))];
        [devexpress_richedit_1.MailMergeTabItemId.ShowAllFieldCodes, devexpress_richedit_1.MailMergeTabItemId.ShowAllFieldResults, devexpress_richedit_1.MailMergeTabItemId.UpdateAllFields]
            .map(function (id) { return mailMergeTab.getItem(id); })
            .forEach(function (item, i) { return insertTab.insertItem(item, i); });
        insertTab.insertItem(new devexpress_richedit_1.RibbonMenuItem(dashboardCmdPrefix, index_internal_1.getLocalizationById('DashboardWebStringId.TextBoxItemEditor.InsertField'), dashboardFieldsMenuItems, {
            icon: 'dxre-icon-InsertDataField',
            showText: true
        }), 0);
        insertTab.getItem(devexpress_richedit_1.InsertTabItemId.ShowInsertTableDialog).beginGroup = true;
        richEditOptions.ribbon.removeTab(devexpress_richedit_1.RibbonTabType.PageLayout);
        richEditOptions.ribbon.removeTab(devexpress_richedit_1.RibbonTabType.References);
        richEditOptions.ribbon.removeTab(devexpress_richedit_1.RibbonTabType.View);
        richEditOptions.ribbon.removeTab(devexpress_richedit_1.RibbonTabType.MailMerge);
        richEditOptions.events.customCommandExecuted = function (richEdit, e) {
            var docVariable = options.docVariables.filter(function (v) { return (dashboardCmdPrefix + v.id) === e.commandName; })[0];
            if (docVariable) {
                var field = richEdit.document.fields.create(richEdit.selection.active, 'docvariable ' + docVariable.id);
                richEdit.document.insertText(field.resultInterval.start, docVariable.displayName);
                field.update();
            }
        };
        var richEdit = devexpress_richedit_1.create(element, richEditOptions);
        if (options.initialDocument) {
            richEdit.openDocument(btoa(unescape(encodeURIComponent(options.initialDocument))), '', devexpress_richedit_1.DocumentFormat.Rtf);
        }
        richEdit.documentSaveFormat = devexpress_richedit_1.DocumentFormat.Rtf;
        options.forceSave = function () { richEdit.saveDocument(devexpress_richedit_1.DocumentFormat.Rtf); };
        options.documentModified = function () { return richEdit.document.modified; };
        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
            richEdit.dispose();
        });
        return { controlsDescendantBindings: true };
    }
};
