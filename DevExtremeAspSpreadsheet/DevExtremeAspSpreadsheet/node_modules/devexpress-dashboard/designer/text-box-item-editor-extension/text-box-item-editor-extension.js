/**
* DevExpress Dashboard (text-box-item-editor-extension.js)
* Version:  20.1.6
* Build date: Jul 17, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var button_1 = require("devextreme/ui/button");
var ko = require("knockout");
var index_internal_1 = require("../../common/index.internal");
var index_internal_2 = require("../../data/index.internal");
var model_1 = require("../../model");
var disposable_object_1 = require("../../model/disposable-object");
var index_internal_3 = require("../../model/index.internal");
var _text_box_item_1 = require("../../model/items/metadata/_text-box-item");
var _object_properties_wrapper_1 = require("../form-adapter/_object-properties-wrapper");
var _textbox_item_surface_1 = require("../items/surfaces/_textbox-item-surface");
var _accordion_tab_1 = require("../properties-controller/_accordion-tab");
var _display_name_provider_1 = require("../_display-name-provider");
require("./_rich-edit-bindings");
var _text_box_item_editor_view_model_1 = require("./_text-box-item-editor-view-model");
var name = 'text-box-item-editor';
var TextBoxItemEditorExtension = (function (_super) {
    __extends(TextBoxItemEditorExtension, _super);
    function TextBoxItemEditorExtension(dashboardControl) {
        var _this = _super.call(this) || this;
        _this.name = name;
        _this._dashboardControl = dashboardControl;
        _this._viewModel = new _text_box_item_editor_view_model_1.RichEditExtensionViewModel();
        _this._customTemplate = {
            name: 'dx-dashboard-text-box-item-editor-extension',
            data: _this._viewModel
        };
        return _this;
    }
    TextBoxItemEditorExtension.prototype.start = function () {
        var _this = this;
        this._dashboardControl.customTemplates.push(this._customTemplate);
        var contextMenuExtension = this._dashboardControl.findExtension('item-menu');
        var propertiesPanelExtension = this._dashboardControl.findExtension('item-options-panel');
        if (contextMenuExtension && propertiesPanelExtension) {
            this.toDispose(index_internal_3.subscribeAndPerform(contextMenuExtension._itemContextMenu, function (menu) {
                if (menu) {
                    var customData = menu.contextMenuItems()[0].customData;
                    if (customData instanceof _textbox_item_surface_1.TextBoxItemSurface) {
                        customData.extendTabsHandler = function (tabs, model, dashboardItem) {
                            var textBoxTextProperty = __assign({}, _text_box_item_1.textBoxText);
                            _this._extendTextBoxSerializationInfo(textBoxTextProperty, dashboardItem, _this._dashboardControl._dataSourceBrowser);
                            tabs.push(new _accordion_tab_1.ContentInHeaderAccordionTab('text-box-item-rich-edit', index_internal_2.getLocalizationById('DashboardWebStringId.AccordionTab.Content'), new _object_properties_wrapper_1.ObjectPropertiesWrapper({
                                model: dashboardItem,
                                properties: [
                                    textBoxTextProperty
                                ]
                            })));
                        };
                    }
                }
            }));
            this.toDispose(propertiesPanelExtension._subscribeTabsChanged(function (tabs, item) {
                var dataSourceBrowser = _this._dashboardControl._dataSourceBrowser;
                if (item && item instanceof model_1.TextBoxItem) {
                    var textBoxDashoardItem = item;
                    var tab = tabs.filter(function (tab) { return tab.name === _accordion_tab_1.KnownTabs.Common; })[0];
                    var tabModel = tab.tabModel();
                    if (tabModel) {
                        var textProperty = tabModel._serializationInfo.filter(function (info) { return info.propertyName === 'text'; })[0];
                        if (textProperty) {
                            _this._extendTextBoxSerializationInfo(textProperty, textBoxDashoardItem, dataSourceBrowser);
                        }
                    }
                }
            }));
        }
    };
    TextBoxItemEditorExtension.prototype._extendTextBoxSerializationInfo = function (textProperty, textBoxDashoardItem, dataSourceBrowser) {
        var _this = this;
        textProperty.displayName = index_internal_2.getLocalizationById('DashboardWebStringId.AccordionTab.Content');
        textProperty.formAdapterItem = {
            template: function (args) {
                var div = document.createElement('div');
                new button_1.default(div, {
                    text: index_internal_2.getLocalizationById('DashboardWebStringId.TextBoxItemEditor.EditTextButton'),
                    width: '100%',
                    onClick: function () {
                        var docVariables = textBoxDashoardItem.dataItems().map(function (dataItem) {
                            return {
                                id: dataItem.uniqueName(),
                                displayName: _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, textBoxDashoardItem, dataItem)
                            };
                        });
                        _this._viewModel.show({
                            getValue: function () { return ko.unwrap(args.component.option('formData')[args.dataField]); },
                            setValue: function (v) { return args.component.updateData(args.dataField, v); }
                        }, docVariables, _this._getDashboardItemWidth());
                    }
                });
                return div;
            }
        };
    };
    TextBoxItemEditorExtension.prototype._getDashboardItemWidth = function () {
        var dashboardSurface = this._dashboardControl._dashboardSurface();
        if (dashboardSurface && dashboardSurface._selectedLayoutItem()) {
            return dashboardSurface._selectedLayoutItem().width() - index_internal_1.SplitterSize;
        }
        return null;
    };
    TextBoxItemEditorExtension.prototype.stop = function () {
        this._dashboardControl.customTemplates.remove(this._customTemplate);
        this.dispose();
    };
    return TextBoxItemEditorExtension;
}(disposable_object_1.DisposableObject));
exports.TextBoxItemEditorExtension = TextBoxItemEditorExtension;
