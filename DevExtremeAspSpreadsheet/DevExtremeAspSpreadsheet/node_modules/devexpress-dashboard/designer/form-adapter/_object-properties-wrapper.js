/**
* DevExpress Dashboard (_object-properties-wrapper.js)
* Version:  20.1.6
* Build date: Jul 17, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var query_1 = require("devextreme/data/query");
var ko = require("knockout");
var ObjectPropertiesWrapper = (function () {
    function ObjectPropertiesWrapper(options) {
        var _this = this;
        this._serializationInfo = [];
        this.isPropertyVisible = function (name) {
            if (!_this._serializationInfo.filter(function (i) { return i.propertyName === name; })[0]) {
                throw new Error('unknown property');
            }
            var result = true;
            var propertyFilter = _this.visibilityFilterRules[name];
            if (propertyFilter) {
                result = !!query_1.default([_this]).filter(propertyFilter).toArray().length;
            }
            return result;
        };
        this.isPropertyDisabled = function (name) {
            if (!_this._serializationInfo.filter(function (i) { return i.propertyName === name; })[0]) {
                throw new Error('unknown property');
            }
            var result = false;
            var propertyFilter = _this.disabledFilterRules[name];
            if (propertyFilter) {
                result = !!query_1.default([_this]).filter(propertyFilter).toArray().length;
            }
            return result;
        };
        this.getDynamicEditor = function (name) {
            if (!_this._serializationInfo.filter(function (i) { return i.propertyName === name; })[0]) {
                throw new Error('unknown property');
            }
            return _this.dynamicEditorRules[name] && _this.dynamicEditorRules[name](_this.model) || null;
        };
        this.model = options.model;
        this.visibilityFilterRules = options.visibilityFilterRules || {};
        this.disabledFilterRules = options.disabledFilterRules || {};
        this.dynamicEditorRules = options.dynamicEditorRules || {};
        this._modelSubscriptions = options.disposableModelSubscriptions || [];
        this.summary = options.summary;
        this.getPropertiesFromContainer(this.model, options.properties);
        if (options.modelExtention) {
            this.getPropertiesFromContainer(options.modelExtention, options.properties);
        }
        if (options.properties.length === 0) {
            this.model['getInfo']().forEach(function (propertyInfo) {
                _this._assignPropertyCore(_this.model[propertyInfo.propertyName], propertyInfo);
            });
        }
    }
    ObjectPropertiesWrapper.prototype.getPropertiesFromContainer = function (cur, properties) {
        var _this = this;
        properties.forEach(function (propertyInfo) {
            if (propertyInfo['container']) {
                var containerObject = ko.unwrap(cur[propertyInfo['container'].propertyName]);
                if (!!containerObject) {
                    _this.getPropertiesFromContainer(containerObject, propertyInfo['properties']);
                }
            }
            else {
                var sourcePropertyName = propertyInfo.propertyName, targetPropertyName = propertyInfo.replacementPropertyName || sourcePropertyName;
                if (cur[sourcePropertyName]) {
                    var serializationInfo = sourcePropertyName !== targetPropertyName ? __assign({}, propertyInfo, { propertyName: targetPropertyName }) : propertyInfo;
                    _this._assignPropertyCore((propertyInfo.sourceObject || cur[sourcePropertyName]), serializationInfo);
                }
            }
        });
    };
    ObjectPropertiesWrapper.prototype.assignValidationPovider = function (validationProvider) {
        this._validationProvider = validationProvider;
    };
    ObjectPropertiesWrapper.prototype._assignPropertyCore = function (propertyObject, info) {
        var _this = this;
        if (info.validateBeforeSet === true && ko.isObservable(propertyObject)) {
            this[info.propertyName] = ko.pureComputed({
                read: function () { return propertyObject(); },
                write: function (value) {
                    if (_this._validationProvider) {
                        var validateResult = _this._validationProvider.validate();
                        if (validateResult.status === 'valid') {
                            propertyObject(value);
                        }
                    }
                    else {
                        propertyObject(value);
                    }
                }
            });
            this._modelSubscriptions.push(this[info.propertyName]);
        }
        else {
            this[info.propertyName] = propertyObject;
        }
        this._serializationInfo.push(info);
    };
    ObjectPropertiesWrapper.prototype.addProperty = function (propertyValue, info) {
        this._assignPropertyCore(propertyValue, info);
    };
    ObjectPropertiesWrapper.prototype.getInfo = function () {
        return this._serializationInfo;
    };
    ObjectPropertiesWrapper.prototype.isEmpty = function () {
        var _this = this;
        if (this._serializationInfo.length !== 0) {
            var everythingIsInvisible_1 = true;
            this._serializationInfo.forEach(function (i) {
                if (_this.isPropertyVisible(i.propertyName))
                    everythingIsInvisible_1 = false;
            });
            return everythingIsInvisible_1;
        }
        return true;
    };
    ObjectPropertiesWrapper.prototype.unbindModel = function () {
        this._modelSubscriptions.forEach(function (disposable) { return disposable.dispose(); });
        this._modelSubscriptions = [];
    };
    return ObjectPropertiesWrapper;
}());
exports.ObjectPropertiesWrapper = ObjectPropertiesWrapper;
