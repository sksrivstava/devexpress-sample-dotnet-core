/**
* DevExpress Dashboard (_custom-item-properties-composer-helper.js)
* Version:  20.1.6
* Build date: Jul 17, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = require("@devexpress/analytics-core/dx-analytics-core");
var ko = require("knockout");
var _default_1 = require("../../../data/localization/_default");
var _custom_item_metadata_1 = require("../../../model/metadata/_custom-item-metadata");
var _form_adapter_editors_1 = require("../../form-adapter/_form-adapter-editors");
var _file_picker_1 = require("../../ui-widgets/_file-picker");
var imageEditor = function () {
    return {
        template: function (args) {
            var div = document.createElement('div');
            new _file_picker_1.dxDashboardFilePicker(div, {
                placeholderId: 'Image',
                accept: 'image/*',
                type: 'img',
                value: _form_adapter_editors_1.getFieldValue(args),
                onValueChanged: function (e) {
                    args.component.updateData(args.dataField, e.value);
                }
            });
            return div;
        }
    };
};
var radioGroupEditor = function (values) { return ({
    editorType: 'dxRadioGroup',
    editorOptions: {
        dataSource: values,
        valueExpr: 'value',
        displayExpr: 'displayValueId',
    }
}); };
var CustomItemPropertiesComposerHelper = (function () {
    function CustomItemPropertiesComposerHelper() {
    }
    CustomItemPropertiesComposerHelper._getEditorValues = function (serializableInfo) {
        if (serializableInfo.values) {
            var values_1 = ko.unwrap(serializableInfo.values);
            return Object.keys(values_1).map(function (k) { return ({ value: k, displayValueId: values_1[k] }); });
        }
        else if (serializableInfo.valuesArray)
            return serializableInfo.valuesArray.map(function (val) { return ({ value: val.value, displayValueId: val.displayValue }); });
        return undefined;
    };
    CustomItemPropertiesComposerHelper._mapEditor = function (serializableInfo) {
        if (!serializableInfo.editor) {
            return null;
        }
        switch (serializableInfo.editor) {
            case _custom_item_metadata_1.editorTemplates.date:
                return _form_adapter_editors_1.dateBoxEditor();
            case _custom_item_metadata_1.editorTemplates.numeric:
                return _form_adapter_editors_1.numberBoxEditor();
            case _custom_item_metadata_1.editorTemplates.checkBox:
                return _form_adapter_editors_1.checkBoxEditor({ text: _default_1.getLocalizationById(serializableInfo.displayName) });
            case _custom_item_metadata_1.editorTemplates.text:
                return _form_adapter_editors_1.textBoxEditor();
            case _custom_item_metadata_1.editorTemplates.combobox:
                return _form_adapter_editors_1.selectBoxEditor(CustomItemPropertiesComposerHelper._getEditorValues(serializableInfo));
            case _custom_item_metadata_1.editorTemplates.bool:
                return _form_adapter_editors_1.buttonGroupEditor([{ value: true, displayValueId: 'DashboardWebStringId.ButtonOn' }, { value: false, displayValueId: 'DashboardWebStringId.ButtonOff' }]);
            case _custom_item_metadata_1.editorTemplates.boolYesNo:
                return _form_adapter_editors_1.buttonGroupEditor([{ value: true, displayValueId: 'DashboardWebStringId.ButtonYes' }, { value: false, displayValueId: 'DashboardWebStringId.ButtonNo' }]);
            case _custom_item_metadata_1.editorTemplates.buttonGroup:
                return _form_adapter_editors_1.buttonGroupEditor(CustomItemPropertiesComposerHelper._getEditorValues(serializableInfo));
            case _custom_item_metadata_1.editorTemplates.boolVisibleHidden:
                return _form_adapter_editors_1.buttonGroupEditor([{ value: true, displayValueId: 'DashboardWebStringId.ButtonVisible' }, { value: false, displayValueId: 'DashboardWebStringId.ButtonHidden' }]);
            case _custom_item_metadata_1.editorTemplates.list:
                return _form_adapter_editors_1.listEditor(CustomItemPropertiesComposerHelper._getEditorValues(serializableInfo));
            case _custom_item_metadata_1.editorTemplates.radioGroup:
                return radioGroupEditor(CustomItemPropertiesComposerHelper._getEditorValues(serializableInfo));
            case _custom_item_metadata_1.editorTemplates.image:
                return imageEditor();
            default:
                var template_1 = serializableInfo.editor.header || serializableInfo.editor.custom;
                return function (context) { return ({
                    customEditorType: template_1,
                    template: function (args, itemElement) {
                        var element = itemElement;
                        var info = serializableInfo;
                        var editor = new dx_analytics_core_1.default.Analytics.Widgets.Editor(info, 0);
                        editor._model(args.component.option('formData'));
                        ko.applyBindingsToNode(element, { template: { name: template_1, data: editor } }, context.bindingContext);
                    }
                }); };
        }
    };
    CustomItemPropertiesComposerHelper.convertToDashboardSerializationInfo = function (property) {
        return {
            propertyName: property.propertyName,
            formAdapterItem: __assign({}, CustomItemPropertiesComposerHelper._mapEditor(property), { label: {
                    text: _default_1.getLocalizationById(property.displayName),
                    visible: !!property.displayName,
                }, validationRules: property.validationRules || [] }),
            editorOptions: property.editorOptions,
        };
    };
    return CustomItemPropertiesComposerHelper;
}());
exports.CustomItemPropertiesComposerHelper = CustomItemPropertiesComposerHelper;
