/**
* DevExpress Dashboard (_chart-item-properties-composer.js)
* Version:  20.1.6
* Build date: Jul 17, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var _default_1 = require("../../../data/localization/_default");
var _data_field_1 = require("../../../model/data-sources/_data-field");
var _chart_axis_1 = require("../../../model/items/chart/metadata/_chart-axis");
var _chart_item_1 = require("../../../model/items/chart/metadata/_chart-item");
var _accordion_tab_1 = require("../../properties-controller/_accordion-tab");
var _display_name_provider_1 = require("../../_display-name-provider");
var _base_properties_composer_1 = require("./_base-properties-composer");
var _shared_composers_1 = require("./_shared-composers");
var ChartItemPropertiesComposer = (function (_super) {
    __extends(ChartItemPropertiesComposer, _super);
    function ChartItemPropertiesComposer(customizeHandler) {
        return _super.call(this, customizeHandler) || this;
    }
    ChartItemPropertiesComposer.prototype._getAxisXTabModel = function (model, dataSourceBrowser, argumentDataField) {
        var groupInterval = model.arguments()[0] ? model.arguments()[0].dateTimeGroupInterval() : 'None';
        var isOlap = argumentDataField && _data_field_1.DataField.isOlap(argumentDataField.dataMember());
        return _shared_composers_1.SharedComposers.getAxisWrapper(model.axisX, ko.pureComputed(function () {
            var argumentsNumber = model.arguments().length;
            if (!argumentsNumber) {
                return '';
            }
            else if (argumentsNumber === 1) {
                return model.arguments()[0] && _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, model, model.arguments()[0]);
            }
            else
                return 'Arguments';
        }), null, _data_field_1.DataField.isDateTime(argumentDataField) && !isOlap, _data_field_1.DataField.isNumeric(argumentDataField) && !isOlap, groupInterval);
    };
    ChartItemPropertiesComposer.prototype._composeTabsCore = function (model, args) {
        var _this = this;
        var argumentDataField = ko.observable();
        if (model.arguments().length == 1) {
            var dimension = model.arguments()[0];
            args.dataSourceBrowser.findDataField(model.dataSource(), model.dataMember(), dimension.dataMember()).done(function (dataField) {
                argumentDataField(dataField);
            });
        }
        var result = [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', _shared_composers_1.SharedComposers.getCommonWrapper(model, [_chart_item_1.chartRotated])),
        ];
        var axisXTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.AxisX, 'DashboardWebStringId.Chart.AxisX');
        axisXTab.tabModel(this._getAxisXTabModel(model, args.dataSourceBrowser, argumentDataField()));
        argumentDataField.subscribe(function (dataField) { axisXTab.tabModel(_this._getAxisXTabModel(model, args.dataSourceBrowser, dataField)); });
        result.push(axisXTab);
        if (model) {
            model.panes().forEach(function (pane) {
                var numberPostfix = model.panes().length === 1 ? '' : ' (' + pane.name() + ')';
                result.push(new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.AxisY + numberPostfix, _default_1.getLocalizationById('DashboardWebStringId.Chart.AxisY') + numberPostfix, _shared_composers_1.SharedComposers.getAxisWrapper(pane.primaryAxisY, ko.pureComputed(function () {
                    var series = pane.series().filter(function (s) { return !s.plotOnSecondaryAxis(); });
                    if (!series.length) {
                        return '';
                    }
                    var dataItems = series.reduce(function (array, singleSeries) {
                        return array.concat(singleSeries
                            ._getBindingModel()
                            .map(function (b) { return singleSeries[b.propertyName]; })
                            .filter(function (dil) { return !!dil.dataItem(); })
                            .map(function (dil) { return dil.dataItem(); }));
                    }, []);
                    if (dataItems.length === 1) {
                        return _display_name_provider_1.getDataItemDisplayName(args.dataSourceBrowser, model, dataItems[0]);
                    }
                    else
                        return 'Values';
                }), _chart_axis_1.chartAlwaysShowZeroLevel)));
                if (pane.series().filter(function (s) { return s.plotOnSecondaryAxis(); }).length > 0) {
                    result.push(new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.AxisY + 'secondary' + numberPostfix, _default_1.getLocalizationById('DashboardWebStringId.Chart.AxisYSecondary') + numberPostfix, _shared_composers_1.SharedComposers.getAxisWrapper(pane.secondaryAxisY, ko.pureComputed(function () {
                        var series = pane.series().filter(function (s) { return s.plotOnSecondaryAxis(); });
                        if (!series.length) {
                            return '';
                        }
                        else if (series.length === 1) {
                            return _display_name_provider_1.getDataItemContainerDisplayName(args.dataSourceBrowser, model, series[0]);
                        }
                        else
                            return 'Values';
                    }), _chart_axis_1.chartAlwaysShowZeroLevel)));
                }
            });
        }
        result.push(new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Legend, 'DashboardWebStringId.AccordionTab.ChartLegend', _shared_composers_1.SharedComposers.getLegendWrapper(model)));
        return result;
    };
    return ChartItemPropertiesComposer;
}(_base_properties_composer_1.DashboardItemPropertiesComposer));
exports.ChartItemPropertiesComposer = ChartItemPropertiesComposer;
