/**
* DevExpress Dashboard (_pivot-item-properties-composer.js)
* Version:  20.1.6
* Build date: Jul 17, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var _dashboard_item_format_rule_1 = require("../../../model/format-rules/metadata/_dashboard-item-format-rule");
var data_dashboard_item_1 = require("../../../model/items/data-dashboard-item");
var _data_dashboard_item_1 = require("../../../model/items/metadata/_data-dashboard-item");
var _pivot_item_1 = require("../../../model/items/pivot/metadata/_pivot-item");
var _form_adapter_editors_1 = require("../../form-adapter/_form-adapter-editors");
var _object_properties_wrapper_1 = require("../../form-adapter/_object-properties-wrapper");
var _accordion_tab_1 = require("../../properties-controller/_accordion-tab");
var _base_properties_composer_1 = require("./_base-properties-composer");
var _shared_composers_1 = require("./_shared-composers");
var PivotItemPropertiesComposer = (function (_super) {
    __extends(PivotItemPropertiesComposer, _super);
    function PivotItemPropertiesComposer(customizeHandler, editRuleHandler) {
        var _this = _super.call(this, customizeHandler) || this;
        _this.editRuleHandler = editRuleHandler;
        return _this;
    }
    PivotItemPropertiesComposer.prototype._composeTabsCore = function (model, args) {
        var result = [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', _shared_composers_1.SharedComposers.getCommonWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.DataLayout, 'DashboardWebStringId.AccordionTab.Layout', this.getLayoutDataWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.DataLayout, 'DashboardWebStringId.AccordionTab.PivotInitialState', this.getInitialStateDataWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ConditionalFormatting, 'DashboardWebStringId.ConditionalFormatting', PivotItemPropertiesComposer.getFormatRulesWrapper(model, args.dataSourceBrowser, this.editRuleHandler))
        ];
        return result;
    };
    PivotItemPropertiesComposer.getFormatRulesWrapper = function (model, dataSourceBrowser, editHandler) {
        var collectionEditorOptions = {
            propertyName: _dashboard_item_format_rule_1.classCaption.propertyName,
            createNewItemHandler: function () { return data_dashboard_item_1.DataDashboardItem._createFormatRule(null, { '@ItemType': 'PivotItemFormatRule' }); },
            editItemHandler: editHandler
        };
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: [__assign({}, _data_dashboard_item_1.formatRules, { formAdapterItem: _form_adapter_editors_1.collectionEditor(collectionEditorOptions) })]
        });
    };
    PivotItemPropertiesComposer.prototype.getLayoutDataWrapper = function (model) {
        var properties = [
            _pivot_item_1.layoutType,
            _pivot_item_1.showColumnTotals,
            _pivot_item_1.showRowTotals,
            _pivot_item_1.showColumnGrandTotals,
            _pivot_item_1.showRowGrandTotals,
            _pivot_item_1.columnTotalsPosition,
            _pivot_item_1.rowTotalsPosition,
            _pivot_item_1.valuesPosition
        ];
        var disabledRules = {};
        disabledRules[_pivot_item_1.rowTotalsPosition.propertyName] = function (m) { return model.layoutType() === 'Compact'; };
        disabledRules[_pivot_item_1.showRowTotals.propertyName] = function (m) { return model.layoutType() === 'Compact'; };
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties,
            disabledFilterRules: disabledRules
        });
    };
    PivotItemPropertiesComposer.prototype.getInitialStateDataWrapper = function (model) {
        var properties = [
            _pivot_item_1.autoExpandColumnGroups,
            _pivot_item_1.autoExpandRowGroups
        ];
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties
        });
    };
    return PivotItemPropertiesComposer;
}(_base_properties_composer_1.DashboardItemPropertiesComposer));
exports.PivotItemPropertiesComposer = PivotItemPropertiesComposer;
