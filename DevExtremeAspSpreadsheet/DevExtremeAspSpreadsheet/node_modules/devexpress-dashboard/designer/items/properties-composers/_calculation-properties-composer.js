/**
* DevExpress Dashboard (_calculation-properties-composer.js)
* Version:  20.1.6
* Build date: Jul 17, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var $ = require("jquery");
var ko = require("knockout");
var _helpers_1 = require("../../../common/_helpers");
var _measure_1 = require("../../../model/data-item/metadata/_measure");
var _helpers_2 = require("../../../model/data-item/_helpers");
var _expression_utils_1 = require("../../../model/internal/_expression-utils");
var _window_definition_editor_1 = require("../../calculations/_window-definition-editor");
var _expression_editor_item_provider_1 = require("../../expression-editor/_expression-editor-item-provider");
var _form_adapter_editors_1 = require("../../form-adapter/_form-adapter-editors");
var _object_properties_wrapper_1 = require("../../form-adapter/_object-properties-wrapper");
var _accordion_tab_1 = require("../../properties-controller/_accordion-tab");
var CalculationPropertiesComposer = (function () {
    function CalculationPropertiesComposer() {
    }
    CalculationPropertiesComposer.prototype.composeTabs = function (model, args) {
        var commonTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common');
        this.fillCommonWrapper(commonTab, model, args.dashboardItem, args.dataSourceBrowser);
        return [commonTab];
    };
    CalculationPropertiesComposer.prototype.fillCommonWrapper = function (tab, model, dashboardItem, dataSourceBrowser) {
        var p = [];
        var visibilityRules = {};
        p.push(__assign({}, _measure_1.windowDefinition, { formAdapterItem: _window_definition_editor_1.windowDefinitionEditor({ dataDashboardItem: dashboardItem, dataSourceBrowser: dataSourceBrowser }) }));
        if (!model.expression()) {
            p.push({
                container: _measure_1.calculation,
                properties: [{
                        container: (model.calculation.getInfo()[0]),
                        properties: (model.calculation.calculation().getInfo())
                    }]
            });
        }
        var wrapper = new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: p,
            visibilityFilterRules: visibilityRules
        });
        var expressionArgument = ko.observable();
        var getExpression = function () {
            if (!!model.expression()) {
                return model.expression();
            }
            return !!model.calculation.calculation() ? model.calculation.calculation()._getExpression(expressionArgument()) : '';
        };
        getCalculationArgumentExpression(model, dashboardItem, dataSourceBrowser)
            .done(function (expr) {
            expressionArgument(expr);
        });
        var expression = ko.computed({
            read: getExpression,
            write: function (val) {
                if (val !== getExpression()) {
                    model.expression(val);
                }
            }
        });
        var expressionOptions = {
            value: expression,
            path: ko.observable(dashboardItem.dataMember() ? [dashboardItem.dataSource(), dashboardItem.dataMember()].join('.') : dashboardItem.dataSource()),
            patchFieldName: function (fieldPath) {
                if (fieldPath.indexOf('Parameters.Parameters.') === 0) {
                    return 'Parameters.' + fieldPath.split('.')[2];
                }
                return fieldPath;
            },
        };
        var itemsProvider = new _expression_editor_item_provider_1.ExpressionEditorItemsProvider(dataSourceBrowser, dataSourceBrowser, dataSourceBrowser.parameters && dataSourceBrowser.parameters(), dashboardItem.dataSource, dashboardItem.dataMember);
        var collectionEditorOptions = {
            fieldListProvider: ko.observable(itemsProvider),
            options: ko.observable(expressionOptions)
        };
        wrapper.addProperty(ko.observable(), { propertyName: 'expressionOptions', displayName: 'DashboardStringId.CalculationTypeExpression', formAdapterItem: _form_adapter_editors_1.calculationExpressionEditor(collectionEditorOptions) });
        tab.tabModel(wrapper);
    };
    return CalculationPropertiesComposer;
}());
exports.CalculationPropertiesComposer = CalculationPropertiesComposer;
function getCalculationArgumentExpression(measure, dashboardItem, dataFieldProvider) {
    var deferred = $.Deferred();
    var summaryExpression = _helpers_2.getSummaryExpression(measure.dataMember(), measure.summaryType());
    if (!measure.filterString())
        return deferred.resolve(summaryExpression).promise();
    _helpers_1.getDimensionsExpressions(dashboardItem, dataFieldProvider)
        .done(function (dimnensionsExpressions) {
        var patchedExpression = _expression_utils_1.insertDimensionsExpressionsIntoFilterExpression(measure.filterString(), dimnensionsExpressions);
        deferred.resolve("filter(" + summaryExpression + ", " + patchedExpression + ")");
    });
    return deferred.promise();
}
exports.getCalculationArgumentExpression = getCalculationArgumentExpression;
