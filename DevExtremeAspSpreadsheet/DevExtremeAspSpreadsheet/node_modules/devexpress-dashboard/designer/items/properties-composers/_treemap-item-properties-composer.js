/**
* DevExpress Dashboard (_treemap-item-properties-composer.js)
* Version:  20.1.6
* Build date: Jul 17, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _dimension_1 = require("../../../model/data-item/metadata/_dimension");
var _treemap_item_1 = require("../../../model/items/treemap/metadata/_treemap-item");
var _object_properties_wrapper_1 = require("../../form-adapter/_object-properties-wrapper");
var _accordion_tab_1 = require("../../properties-controller/_accordion-tab");
var _base_properties_composer_1 = require("./_base-properties-composer");
var _shared_composers_1 = require("./_shared-composers");
var TreemapItemPropertiesComposer = (function (_super) {
    __extends(TreemapItemPropertiesComposer, _super);
    function TreemapItemPropertiesComposer(customizeHandler) {
        return _super.call(this, customizeHandler) || this;
    }
    TreemapItemPropertiesComposer.prototype._composeTabsCore = function (model) {
        var result = [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', _shared_composers_1.SharedComposers.getCommonWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Layout, 'DashboardWebStringId.AccordionTab.Layout', this.getLayoutWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Labels, 'DashboardWebStringId.AccordionTab.Labels', this.getLabelsWrapper(model))
        ];
        return result;
    };
    TreemapItemPropertiesComposer.prototype.getLayoutWrapper = function (model) {
        var properties = [
            _treemap_item_1.layoutAlgorithm,
            _treemap_item_1.layoutDirection
        ];
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties
        });
    };
    TreemapItemPropertiesComposer.prototype.getLabelsWrapper = function (model) {
        var properties = [
            _treemap_item_1.tilesLabelContentType,
            _treemap_item_1.tilesTooltipContentType,
            _treemap_item_1.groupsLabelContentType,
            _treemap_item_1.groupsTooltipContentType
        ];
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties
        });
    };
    TreemapItemPropertiesComposer.getTileOptionsTab = function (model, dataItem) {
        return new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.TileOptions, 'DashboardWebStringId.TileOptions', TreemapItemPropertiesComposer.getTileOptionsWrapper(model, dataItem));
    };
    TreemapItemPropertiesComposer.getTileOptionsWrapper = function (model, dataItem) {
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: dataItem,
            properties: [_dimension_1.groupChildValues]
        });
    };
    return TreemapItemPropertiesComposer;
}(_base_properties_composer_1.DashboardItemPropertiesComposer));
exports.TreemapItemPropertiesComposer = TreemapItemPropertiesComposer;
