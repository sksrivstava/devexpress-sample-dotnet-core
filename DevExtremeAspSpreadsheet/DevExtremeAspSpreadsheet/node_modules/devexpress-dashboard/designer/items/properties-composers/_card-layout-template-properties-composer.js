/**
* DevExpress Dashboard (_card-layout-template-properties-composer.js)
* Version:  20.1.6
* Build date: Jul 17, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = require("@devexpress/analytics-core/dx-analytics-core");
var ko = require("knockout");
var _utils_1 = require("../../../data/_utils");
var _knockout_utils_1 = require("../../../model/internal/_knockout-utils");
var _undo_engine_helper_1 = require("../../../model/internal/_undo-engine-helper");
var _card_layout_1 = require("../../../model/items/card/metadata/_card-layout");
var _form_adapter_editors_1 = require("../../form-adapter/_form-adapter-editors");
var _object_properties_wrapper_1 = require("../../form-adapter/_object-properties-wrapper");
var _accordion_tab_1 = require("../../properties-controller/_accordion-tab");
var _collection_editor_viewmodel_base_1 = require("../../ui-widgets/collection-editor/_collection-editor-viewmodel-base");
var CardTemplatePropertiesComposer = (function () {
    function CardTemplatePropertiesComposer() {
    }
    CardTemplatePropertiesComposer.prototype.composeTabs = function (model, args) {
        if (args.applyTemplateToAllCards === undefined)
            args.applyTemplateToAllCards = function (template) { };
        var layoutsTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.CardTemplateSettings, 'DashboardWebStringId.CardLayout.LayoutOptions');
        this.fillLayoutsTab(layoutsTab, model, args.dimensionNames, args.applyTemplateToAllCards);
        return [layoutsTab];
    };
    CardTemplatePropertiesComposer.prototype.fillLayoutsTab = function (tab, template, dimensionNames, applyTemplateToAllCards) {
        var _this = this;
        var refreshCallback = new _collection_editor_viewmodel_base_1.CollectionEditorRefreshCallback();
        var propertiesList = template._collectProperties(dimensionNames);
        var subscriptions = propertiesList.map(function (item) { return _knockout_utils_1.safeSubscribe({ checked: item.checked, selectedItem: item.selectedItem || (function () { }) }, function () { return refreshCallback.refresh(); }); });
        var collectionEditorOptions = {
            dataFields: ['checked', 'title', 'selectedItem', 'lookupDataSource'],
            isToolbarVisible: false,
            gridColumns: [{
                    dataField: 'checked',
                    dataType: 'boolean',
                    width: 40,
                }, {
                    dataField: 'selectedItem',
                    calculateDisplayValue: function (rowData) { return rowData.title; },
                    lookup: {
                        displayExpr: 'displayText',
                        valueExpr: 'key',
                    },
                }],
            customizeInlineEditor: function (e) {
                e.editorOptions.dataSource = e.row.data.lookupDataSource;
                if (e.dataField === 'selectedItem') {
                    var oldValueChanged = e.editorOptions.onValueChanged;
                    e.editorOptions.onValueChanged = function (ee) {
                        oldValueChanged.call(ee.component, ee);
                        setTimeout(function () { return e.component.saveEditData(); });
                    };
                }
            },
            customizeCell: function (e) {
                if (!e.isEditing && e.column.dataField === 'selectedItem' && !!e.data.lookupDataSource) {
                    var icon = _utils_1.createSvgIconElement('dx-dashboard-ce-edit');
                    var div = document.createElement('div');
                    div.appendChild(icon);
                    div.classList.add('custom-edit-icon');
                    div.classList.add('dx-dashboard-editable-cell');
                    _utils_1.$unwrap(e.cellElement).appendChild(div);
                }
            },
            enableEditItem: function (selectedItem, e) {
                if (e.column.dataField === 'selectedItem')
                    return !!e.data.lookupDataSource;
                return true;
            },
            forceRefreshCallback: refreshCallback,
        };
        tab.tabModel(new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: {
                minWidth: template.minWidth,
                maxWidth: template.maxWidth,
                templateProperties: ko.observableArray(propertiesList),
                buttonsFakeProperty: {},
            },
            properties: [
                __assign({}, _card_layout_1.minWidth, { formAdapterItem: _form_adapter_editors_1.numberBoxEditor({ min: 1, format: '0#' }) }),
                __assign({}, _card_layout_1.maxWidth, { formAdapterItem: _form_adapter_editors_1.nullableNumberBoxEditor({ defaultValue: 200, editorOptions: { min: 1, format: '0#' } }) }),
                {
                    formAdapterItem: _form_adapter_editors_1.inlineEditCollectionEditor(collectionEditorOptions),
                    propertyName: 'templateProperties',
                }, {
                    propertyName: 'buttonsFakeProperty',
                    formAdapterItem: _form_adapter_editors_1.actionButtons([
                        {
                            text: dx_analytics_core_1.default.Analytics.Internal.localize('DashboardWebStringId.CardLayout.ResetTemplate'),
                            onClick: function () { return _this.resetTemplate(template); },
                            elementAttr: { class: 'dx-dashboard-card-template-reset-button' }
                        },
                        {
                            text: dx_analytics_core_1.default.Analytics.Internal.localize('DashboardWebStringId.CardLayout.ApplyToAllCards'),
                            onClick: function () { return applyTemplateToAllCards(template); },
                            elementAttr: { class: 'dx-dashboard-card-template-apply-all-button' }
                        }
                    ]),
                }
            ],
            disposableModelSubscriptions: subscriptions,
        }));
    };
    CardTemplatePropertiesComposer.prototype.resetTemplate = function (template) {
        template._resetToDefaults();
    };
    __decorate([
        _undo_engine_helper_1.wrapWithUndoRedo
    ], CardTemplatePropertiesComposer.prototype, "resetTemplate", null);
    return CardTemplatePropertiesComposer;
}());
exports.CardTemplatePropertiesComposer = CardTemplatePropertiesComposer;
