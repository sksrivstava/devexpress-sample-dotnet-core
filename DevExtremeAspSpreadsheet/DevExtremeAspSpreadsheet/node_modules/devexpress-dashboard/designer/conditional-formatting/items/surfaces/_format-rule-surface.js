/**
* DevExpress Dashboard (_format-rule-surface.js)
* Version:  20.1.6
* Build date: Jul 17, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var card_item_delta_format_rule_1 = require("../../../../model/format-rules/card-item-delta-format-rule");
var card_item_format_rule_1 = require("../../../../model/format-rules/card-item-format-rule");
var grid_item_format_rule_1 = require("../../../../model/format-rules/grid-item-format-rule");
var pivot_item_format_rule_1 = require("../../../../model/format-rules/pivot-item-format-rule");
var _card_item_format_rule_properties_composer_1 = require("../properties-composers/_card-item-format-rule-properties-composer");
var _grid_item_format_rule_properties_composer_1 = require("../properties-composers/_grid-item-format-rule-properties-composer");
var _pivot_item_format_rule_properties_composer_1 = require("../properties-composers/_pivot-item-format-rule-properties-composer");
var FormatRuleSurface = (function () {
    function FormatRuleSurface(model, dashboardItem, dataSourceBrowser, propertiesController) {
        this.model = model;
        this.dashboardItem = dashboardItem;
        this.dataSourceBrowser = dataSourceBrowser;
        this.propertiesController = propertiesController;
        this._disposables = [];
    }
    FormatRuleSurface.prototype.updatePropertiesTabs = function (requestRecalculation) {
        var _this = this;
        var composer = null;
        if (this.model() instanceof card_item_delta_format_rule_1.CardItemDeltaFormatRule) {
            composer = _card_item_format_rule_properties_composer_1.createCardItemDeltaFormatRulePropertiesComposer(this.model);
        }
        else if (this.model() instanceof card_item_format_rule_1.CardItemFormatRule) {
            composer = _card_item_format_rule_properties_composer_1.createCardItemFormatRulePropertiesComposer(this.model);
        }
        else if (this.model() instanceof grid_item_format_rule_1.GridItemFormatRule) {
            composer = _grid_item_format_rule_properties_composer_1.createGridItemFormatRulePropertiesComposer();
        }
        else if (this.model() instanceof pivot_item_format_rule_1.PivotItemFormatRule) {
            composer = _pivot_item_format_rule_properties_composer_1.createPivotItemFormatRulePropertiesComposer();
        }
        var propertiesTabs = composer.composeTabs(this.model(), {
            dashboardItem: this.dashboardItem,
            dataSourceBrowser: this.dataSourceBrowser,
            requestRecalculation: requestRecalculation,
            specificTypeChanged: function () {
                _this.propertiesController.secondarySelectedIndex(1);
            }
        });
        this.propertiesController.secondaryModel({
            displayText: this.model()._classCaption,
            data: {
                model: this.model(),
                propertiesTabs: ko.observableArray(propertiesTabs)
            },
            containingCollection: this.dashboardItem.formatRules
        });
        if (this.model().condition()) {
            this.propertiesController.secondarySelectedIndex(1);
        }
    };
    FormatRuleSurface.prototype.startEditing = function (args) {
        var _this = this;
        args.createImmediately = false;
        this.updatePropertiesTabs(args.requestRecalculation);
        args.requestRecalculation.add(function () { return _this.updatePropertiesTabs(args.requestRecalculation); });
        this.model.subscribe(function () { return _this.updatePropertiesTabs(args.requestRecalculation); });
    };
    FormatRuleSurface.prototype.dispose = function () {
        this._disposables.forEach(function (d) {
            d.dispose();
        });
    };
    return FormatRuleSurface;
}());
exports.FormatRuleSurface = FormatRuleSurface;
