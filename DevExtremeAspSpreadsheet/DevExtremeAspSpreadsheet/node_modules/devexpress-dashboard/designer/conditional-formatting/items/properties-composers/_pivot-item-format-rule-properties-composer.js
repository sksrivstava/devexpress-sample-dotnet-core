/**
* DevExpress Dashboard (_pivot-item-format-rule-properties-composer.js)
* Version:  20.1.6
* Build date: Jul 17, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var _default_1 = require("../../../../data/localization/_default");
var model_1 = require("../../../../model");
var _cells_item_format_rule_1 = require("../../../../model/format-rules/metadata/_cells-item-format-rule");
var _pivot_item_format_rule_1 = require("../../../../model/format-rules/metadata/_pivot-item-format-rule");
var _pivot_item_format_rule_level_1 = require("../../../../model/format-rules/metadata/_pivot-item-format-rule-level");
var _form_adapter_1 = require("../../../form-adapter/_form-adapter");
var _form_adapter_editors_1 = require("../../../form-adapter/_form-adapter-editors");
var _section_descriptors_1 = require("../../../items/_section-descriptors");
var _display_name_provider_1 = require("../../../_display-name-provider");
var _shared_format_rule_properties_composer_1 = require("./_shared-format-rule-properties-composer");
function createPivotItemFormatRulePropertiesComposer() {
    return new _shared_format_rule_properties_composer_1.FormatRulePropertiesComposer({
        createDataTypeObservable: _shared_format_rule_properties_composer_1.createDataTypeObservable,
        getCommonFormatRuleProperties: function (formatRule, dashboardItem, dataSourceBrowser) {
            var info = _shared_format_rule_properties_composer_1.getCommonCellsFormatRuleProperties(formatRule, dashboardItem, grabDataItems(dashboardItem, dataSourceBrowser), grapApplyToItems(dashboardItem, dataSourceBrowser));
            if (!info.disabledFilterRules)
                info.disabledFilterRules = {};
            info.disabledFilterRules[_cells_item_format_rule_1.dataItemApplyTo.propertyName] = function (m) {
                var pivot = dashboardItem;
                return !(pivot.values().filter(function (v) { return v.uniqueName() === m.dataItemName(); }).length
                    || pivot.hiddenMeasures().filter(function (v) { return v.uniqueName() === m.dataItemName(); }).length);
            };
            return info;
        },
        getConditionFormatRuleProperties: function () { return ({ properties: [] }); },
        getMiscFormatRuleProperties: getMiscFormatRuleProperties
    });
}
exports.createPivotItemFormatRulePropertiesComposer = createPivotItemFormatRulePropertiesComposer;
function getMiscFormatRuleProperties(formatRule, pivot, dataSourceBrowser) {
    var visibilityRules = {};
    var properties = [];
    var intersectionLevelModeValuesObservable = ko.observable(_form_adapter_1.transformValuesDictionary(_pivot_item_format_rule_1.intersectionLevelModeValues));
    ko.computed(function () {
        if ((formatRule.condition() instanceof model_1.FormatConditionRangeBase && formatRule.condition().valueType() !== 'Number')
            || formatRule.condition() instanceof model_1.FormatConditionTopBottom
            || formatRule.condition() instanceof model_1.FormatConditionAverage) {
            intersectionLevelModeValuesObservable(_form_adapter_1.transformValuesDictionary(_pivot_item_format_rule_1.restrictedIntersectionLevelModeValues));
        }
        else {
            intersectionLevelModeValuesObservable(_form_adapter_1.transformValuesDictionary(_pivot_item_format_rule_1.intersectionLevelModeValues));
        }
    });
    properties.push(__assign({}, _pivot_item_format_rule_1.intersectionLevelMode, { formAdapterItem: _form_adapter_editors_1.dynamicSelectBoxEditor(intersectionLevelModeValuesObservable) }));
    properties.push({
        container: _pivot_item_format_rule_1.pivotLevel,
        properties: [
            __assign({ valuesArray: [{ value: null, displayValue: '[Grand Total]' }].concat(pivot.columns().map(function (m) { return ({ value: m.uniqueName(), displayValue: _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, pivot, m) }); })) }, _pivot_item_format_rule_level_1.pivotLevelColumn),
            __assign({ valuesArray: [{ value: null, displayValue: '[Grand Total]' }].concat(pivot.rows().map(function (m) { return ({ value: m.uniqueName(), displayValue: _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, pivot, m) }); })) }, _pivot_item_format_rule_level_1.pivotLevelRow)
        ]
    });
    properties.push(_pivot_item_format_rule_1.applyToColumn);
    properties.push(_cells_item_format_rule_1.applyToRow);
    var isMeasure = !!pivot.values().filter(function (v) { return v.uniqueName() === formatRule.dataItemApplyToName(); }).length;
    visibilityRules[_cells_item_format_rule_1.applyToRow.propertyName] = function (m) { return !formatRule.condition()._isApplyToRowColumnRestricted && isMeasure; };
    visibilityRules[_pivot_item_format_rule_1.applyToColumn.propertyName] = function (m) { return !formatRule.condition()._isApplyToRowColumnRestricted && isMeasure; };
    visibilityRules[_pivot_item_format_rule_level_1.pivotLevelColumn.propertyName] =
        [_pivot_item_format_rule_1.intersectionLevelMode.propertyName, '=', 'SpecificLevel'];
    visibilityRules[_pivot_item_format_rule_level_1.pivotLevelRow.propertyName] =
        [_pivot_item_format_rule_1.intersectionLevelMode.propertyName, '=', 'SpecificLevel'];
    return {
        properties: properties,
        visibilityFilterRules: visibilityRules
    };
}
function grabDataItems(dashboardItem, dataSourceBrowser) {
    return function () { return grapApplyToItems(dashboardItem, dataSourceBrowser)()
        .concat(dashboardItem
        .hiddenMeasures()
        .map(function (m) { return ({
        uniqueName: m.uniqueName(),
        displayName: _default_1.getLocalizationById(_section_descriptors_1.SectionDescriptors.HiddenMeasures.title) + ' - ' + _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, dashboardItem, m)
    }); })); };
}
function grapApplyToItems(pivot, dataSourceBrowser) {
    return function () { return pivot.values().map(function (m) { return ({
        uniqueName: m.uniqueName(),
        displayName: _default_1.getLocalizationById(_section_descriptors_1.SectionDescriptors.Values.title) + ' - ' + _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, pivot, m)
    }); }).concat(pivot.columns().map(function (d) { return ({
        uniqueName: d.uniqueName(),
        displayName: _default_1.getLocalizationById(_section_descriptors_1.SectionDescriptors.Columns.title) + ' - ' + _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, pivot, d)
    }); })).concat(pivot.rows().map(function (d) { return ({
        uniqueName: d.uniqueName(),
        displayName: _default_1.getLocalizationById(_section_descriptors_1.SectionDescriptors.Rows.title) + ' - ' + _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, pivot, d)
    }); })); };
}
