/**
* DevExpress Dashboard (_shared-format-rule-properties-composer.js)
* Version:  20.1.6
* Build date: Jul 17, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var _default_1 = require("../../../../data/localization/_default");
var model_1 = require("../../../../model");
var dimension_1 = require("../../../../model/data-item/dimension");
var measure_1 = require("../../../../model/data-item/measure");
var enums_1 = require("../../../../model/enums");
var format_condition_average_1 = require("../../../../model/format-rules/conditions/format-condition-average");
var format_condition_expression_1 = require("../../../../model/format-rules/conditions/format-condition-expression");
var format_condition_top_bottom_1 = require("../../../../model/format-rules/conditions/format-condition-top-bottom");
var _format_condition_bar_1 = require("../../../../model/format-rules/conditions/metadata/_format-condition-bar");
var _format_condition_bar_options_1 = require("../../../../model/format-rules/conditions/metadata/_format-condition-bar-options");
var _format_condition_date_occuring_1 = require("../../../../model/format-rules/conditions/metadata/_format-condition-date-occuring");
var _format_condition_expression_1 = require("../../../../model/format-rules/conditions/metadata/_format-condition-expression");
var _format_condition_min_max_base_1 = require("../../../../model/format-rules/conditions/metadata/_format-condition-min-max-base");
var _format_condition_top_bottom_1 = require("../../../../model/format-rules/conditions/metadata/_format-condition-top-bottom");
var _format_condition_value_1 = require("../../../../model/format-rules/conditions/metadata/_format-condition-value");
var _format_condition_range_base_1 = require("../../../../model/format-rules/conditions/range/metadata/_format-condition-range-base");
var _format_condition_range_gradient_1 = require("../../../../model/format-rules/conditions/range/metadata/_format-condition-range-gradient");
var _cells_item_format_rule_1 = require("../../../../model/format-rules/metadata/_cells-item-format-rule");
var _dashboard_item_format_rule_1 = require("../../../../model/format-rules/metadata/_dashboard-item-format-rule");
var _format_rules_common_1 = require("../../../../model/format-rules/metadata/_format-rules-common");
var _helper_classes_1 = require("../../../../model/internal/_helper-classes");
var _parameters_helper_1 = require("../../../../model/parameters/_parameters-helper");
var _filter_utils_1 = require("../../../filtering/_filter-utils");
var _item_filter_display_name_provider_1 = require("../../../filtering/_item-filter-display-name-provider");
var _item_filter_items_provider_1 = require("../../../filtering/_item-filter-items-provider");
var _form_adapter_editors_1 = require("../../../form-adapter/_form-adapter-editors");
var _object_properties_wrapper_1 = require("../../../form-adapter/_object-properties-wrapper");
var _accordion_tab_1 = require("../../../properties-controller/_accordion-tab");
var FormatRulePropertiesComposer = (function () {
    function FormatRulePropertiesComposer(_options) {
        this._options = _options;
    }
    FormatRulePropertiesComposer.prototype.composeTabs = function (model, args) {
        var commonTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.FormatRuleCommon, 'DashboardWebStringId.AccordionTab.Common');
        var conditionTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.FormatRuleCondition, 'DashboardWebStringId.ConditionalFormatting.Condition');
        var styleTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.FormatRuleMisc, 'DashboardWebStringId.ConditionalFormatting.Miscellaneous');
        this._fillCommonFormatRuleCommonWrapper(commonTab, model, args.dashboardItem, args.dataSourceBrowser, args.requestRecalculation, args.specificTypeChanged);
        if (ko.unwrap(model && model.condition)) {
            this._fillConditionWrapper(conditionTab, model, args.dashboardItem, args.dataSourceBrowser);
            this._fillMiscWrapper(styleTab, model, args.dashboardItem, args.dataSourceBrowser);
        }
        return [commonTab, conditionTab, styleTab];
    };
    FormatRulePropertiesComposer.prototype._fillCommonFormatRuleCommonWrapper = function (tab, formatRule, dashboardItem, dataSourceBrowser, requestRecalculation, specificTypeChanged) {
        var propertiesInfo = this._options.getCommonFormatRuleProperties(formatRule, dashboardItem, dataSourceBrowser, requestRecalculation);
        var disabledRules = {};
        var dataType = this._options.createDataTypeObservable(formatRule, dashboardItem, dataSourceBrowser);
        disabledRules[_cells_item_format_rule_1.formatRuleDataItem.propertyName] = function () { return !!ko.unwrap(formatRule.condition); };
        disabledRules['typeChooser'] = function () { return !!ko.unwrap(formatRule.condition); };
        var wrapper = new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: formatRule,
            visibilityFilterRules: propertiesInfo.visibilityFilterRules,
            properties: propertiesInfo.properties,
            disabledFilterRules: __assign({}, disabledRules, propertiesInfo.disabledFilterRules)
        });
        addConditionEditor(wrapper, dataType, formatRule, dashboardItem, requestRecalculation, specificTypeChanged, this._options.conditionTypeFilter);
        tab.tabModel(wrapper);
    };
    FormatRulePropertiesComposer.prototype._fillConditionWrapper = function (tab, model, dashboardItem, dataSourceBrowser) {
        var p = [];
        var visibilityRules = {};
        visibilityRules[_format_condition_range_base_1.rangeValueType.propertyName] = function () { return model.condition() && !model.condition().dateTimeGroupInterval(); };
        switch (model.condition() && model.condition().constructor) {
            case model_1.FormatConditionValue:
                p.push({
                    container: _dashboard_item_format_rule_1.condition,
                    properties: [{
                            container: _format_condition_value_1.formatConditionValue1,
                            properties: [
                                __assign({ simpleFormAdapterItem: _parameters_helper_1.ParameterHelper.getEditorType(model.condition()[_format_condition_value_1.formatConditionValue1.propertyName].type()), displayName: 'DashboardStringId.ValueCaption', replacementPropertyName: 'value1_value' }, _format_rules_common_1.complexValueValue)
                            ]
                        }, {
                            container: _format_condition_value_1.formatConditionValue2,
                            properties: [__assign({ simpleFormAdapterItem: _parameters_helper_1.ParameterHelper.getEditorType(model.condition()[_format_condition_value_1.formatConditionValue1.propertyName].type()), displayName: 'DashboardStringId.Value2Caption', replacementPropertyName: 'value2_value' }, _format_rules_common_1.complexValueValue)]
                        }, __assign({}, _format_rules_common_1.styleSettings, { formAdapterItem: _form_adapter_editors_1.styleSettingsEditor() }), _format_condition_value_1.conditionInCondition,
                    ]
                });
                visibilityRules['value2_value'] =
                    [_format_condition_value_1.conditionInCondition.propertyName, 'contains', 'Between'];
                visibilityRules[_format_condition_value_1.conditionInCondition.propertyName] = function () { return false; };
                break;
            case format_condition_top_bottom_1.FormatConditionTopBottom:
                p.push({
                    container: _dashboard_item_format_rule_1.condition,
                    properties: [
                        __assign({}, _format_rules_common_1.styleSettings, { formAdapterItem: _form_adapter_editors_1.styleSettingsEditor() }),
                        _format_condition_top_bottom_1.rank,
                        _format_condition_top_bottom_1.rankType
                    ]
                });
                break;
            case format_condition_average_1.FormatConditionAverage:
                p.push({
                    container: _dashboard_item_format_rule_1.condition,
                    properties: [
                        __assign({}, _format_rules_common_1.styleSettings, { formAdapterItem: _form_adapter_editors_1.styleSettingsEditor() }),
                    ]
                });
                break;
            case model_1.FormatConditionDateOccurring:
                p.push({
                    container: _dashboard_item_format_rule_1.condition,
                    properties: [
                        __assign({}, _format_rules_common_1.styleSettings, { formAdapterItem: _form_adapter_editors_1.styleSettingsEditor() }),
                        __assign({}, _format_condition_date_occuring_1.dateType, { formAdapterItem: _form_adapter_editors_1.flagsEnumTagBoxEditor({
                                values: _format_condition_date_occuring_1.dateTypeValues,
                                enumDeclaration: enums_1.FilterDateType
                            }) })
                    ]
                });
                break;
            case format_condition_expression_1.FormatConditionExpression:
                var expressionCondition = model.condition();
                var ruleExpressionEditorParams = {
                    fieldListProvider: ko.observable(new _item_filter_items_provider_1.ItemFilterItemsProvider(dataSourceBrowser, dataSourceBrowser, dataSourceBrowser.parameters, dashboardItem, function (di) { return dashboardItem._conditionFormattingExpressionEditorFilter(di); })),
                    options: _filter_utils_1.createItemFilterOptions(expressionCondition.expression, expressionCondition, dataSourceBrowser, { text: 'Expression', localizationId: 'DashboardStringId.CommandFormatRuleExpression' }),
                    displayNameProvider: new _item_filter_display_name_provider_1.ItemFilterDisplayNameProvider(dashboardItem, dataSourceBrowser)
                };
                p.push({
                    container: _dashboard_item_format_rule_1.condition,
                    properties: [
                        __assign({}, _format_condition_expression_1.formatConditionFilter, { formAdapterItem: _form_adapter_editors_1.filterEditor(ruleExpressionEditorParams) }),
                        __assign({}, _format_rules_common_1.styleSettings, { formAdapterItem: _form_adapter_editors_1.styleSettingsEditor() }),
                    ]
                });
                break;
            case model_1.FormatConditionBar:
                p.push({
                    container: _dashboard_item_format_rule_1.condition,
                    properties: [
                        _format_condition_min_max_base_1.minimumType,
                        _format_condition_min_max_base_1.formatConditionMinimum,
                        _format_condition_min_max_base_1.maximumType,
                        _format_condition_min_max_base_1.formatConditionMaximum,
                        _format_condition_bar_1.barCurrentStyleSettingsType,
                        __assign({}, _format_condition_bar_1.barCurrentStyleSettings, { formAdapterItem: _form_adapter_editors_1.styleSettingsEditor() }),
                        {
                            container: _format_rules_common_1.barOptions,
                            properties: [
                                _format_condition_bar_options_1.allowNegativeAxis,
                                _format_condition_bar_options_1.drawAxis,
                                _format_condition_bar_options_1.showBarOnly
                            ]
                        }
                    ]
                });
                visibilityRules[_format_condition_min_max_base_1.formatConditionMinimum.propertyName] = [_format_condition_min_max_base_1.minimumType.propertyName, '<>', 'Automatic'];
                visibilityRules[_format_condition_min_max_base_1.formatConditionMaximum.propertyName] = [_format_condition_min_max_base_1.maximumType.propertyName, '<>', 'Automatic'];
                break;
            case model_1.FormatConditionColorRangeBar:
                p.push({
                    container: _dashboard_item_format_rule_1.condition,
                    properties: [
                        _format_condition_range_base_1.rangeValueType,
                        __assign({}, _format_condition_range_base_1.rangeSet, { formAdapterItem: _form_adapter_editors_1.ruleRangesEditor(model.condition()) }),
                        {
                            container: _format_rules_common_1.barOptions,
                            properties: [
                                _format_condition_bar_options_1.allowNegativeAxis,
                                _format_condition_bar_options_1.drawAxis,
                                _format_condition_bar_options_1.showBarOnly
                            ]
                        }
                    ]
                });
                break;
            case model_1.FormatConditionGradientRangeBar:
                p.push({
                    container: _dashboard_item_format_rule_1.condition,
                    properties: [
                        _format_condition_range_base_1.rangeValueType,
                        _format_condition_range_gradient_1.segmentNumber,
                        __assign({}, _format_condition_range_base_1.rangeSet, { formAdapterItem: _form_adapter_editors_1.ruleRangesEditor(model.condition()) }),
                        {
                            container: _format_rules_common_1.barOptions,
                            properties: [
                                _format_condition_bar_options_1.allowNegativeAxis,
                                _format_condition_bar_options_1.drawAxis,
                                _format_condition_bar_options_1.showBarOnly
                            ]
                        }
                    ]
                });
                break;
            case model_1.FormatConditionRangeGradient:
                p.push({
                    container: _dashboard_item_format_rule_1.condition,
                    properties: [
                        _format_condition_range_base_1.rangeValueType,
                        _format_condition_range_gradient_1.segmentNumber,
                        __assign({}, _format_condition_range_base_1.rangeSet, { formAdapterItem: _form_adapter_editors_1.ruleRangesEditor(model.condition()) }),
                    ]
                });
                break;
            case model_1.FormatConditionRangeSet:
                p.push({
                    container: _dashboard_item_format_rule_1.condition,
                    properties: [
                        _format_condition_range_base_1.rangeValueType,
                        __assign({}, _format_condition_range_base_1.rangeSet, { formAdapterItem: _form_adapter_editors_1.ruleRangesEditor(model.condition()) }),
                    ]
                });
                break;
            case undefined:
                break;
            default:
                throw new Error('Unsupported formatting rule condition');
        }
        var additionProperties = this._options.getConditionFormatRuleProperties(model, dashboardItem, dataSourceBrowser);
        var wrapper = new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: p.concat(additionProperties.properties),
            visibilityFilterRules: __assign({}, visibilityRules, additionProperties.visibilityFilterRules),
            disabledFilterRules: additionProperties.disabledFilterRules,
            dynamicEditorRules: additionProperties.dynamicEditorRules
        });
        tab.tabModel(wrapper);
    };
    FormatRulePropertiesComposer.prototype._fillMiscWrapper = function (tab, model, dashboardItem, dataSourceBrowser) {
        var miscProperties = this._options.getMiscFormatRuleProperties(model, dashboardItem, dataSourceBrowser);
        var wrapper = new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: [
                _dashboard_item_format_rule_1.enabled
            ].concat(miscProperties.properties),
            disabledFilterRules: miscProperties.disabledFilterRules,
            dynamicEditorRules: miscProperties.dynamicEditorRules,
            visibilityFilterRules: miscProperties.visibilityFilterRules
        });
        tab.tabModel(wrapper);
    };
    return FormatRulePropertiesComposer;
}());
exports.FormatRulePropertiesComposer = FormatRulePropertiesComposer;
function createDeltaDataTypeObservable(model, dashboardItem, dataSourceBrowser) {
    var dataType = ko.observable(model.condition() && model.condition().dataType());
    var fillDataTypeForDelta = function () {
        var fillDataTypes = function (measure) {
            dataSourceBrowser.findDataField(dashboardItem.dataSource(), dashboardItem.dataMember(), measure.dataMember()).done(function (field) {
                var summaryType = measure.summaryType();
                if ((summaryType === 'Count') || (summaryType === 'CountDistinct')) {
                    dataType('Integer');
                    model.condition() && model.condition().dataType(dataType());
                }
                else if (['Sum', 'Average', 'StdDev', 'StdDevp', 'Var', 'VarP'].indexOf(summaryType) !== -1) {
                    dataType('Decimal');
                    model.condition() && model.condition().dataType(dataType());
                }
                else {
                    dataType(field.fieldType());
                    model.condition() && model.condition().dataType(dataType());
                }
            });
        };
        var kpiElement = dashboardItem.cards().filter(function (card) { return card._getDataId() === model.cardId(); })[0];
        var deltaValueType = model.deltaValueType();
        if (deltaValueType === 'ActualValue') {
            fillDataTypes(kpiElement.actualValue());
        }
        else if (deltaValueType === 'TargetValue') {
            fillDataTypes(kpiElement.targetValue());
        }
        else {
            dataType('Decimal');
            model.condition() && model.condition().dataType(dataType());
        }
    };
    fillDataTypeForDelta();
    model.cardId.subscribe(function (containerId) {
        fillDataTypeForDelta();
    });
    model.deltaValueType.subscribe(function (deltaValueTypeId) {
        fillDataTypeForDelta();
    });
    return { dataType: dataType, dateTimeGroupInterval: ko.observable() };
}
exports.createDeltaDataTypeObservable = createDeltaDataTypeObservable;
function createDataTypeObservable(formatRule, dashboardItem, dataSourceBrowser) {
    var dataItemCalculateBy = dashboardItem.dataItems().filter(function (d) { return formatRule.dataItemName() === d.uniqueName(); })[0];
    var dateTimeGroupInterval = ko.observable(dataItemCalculateBy instanceof dimension_1.Dimension ? dataItemCalculateBy.dateTimeGroupInterval() : undefined);
    var dataType = ko.observable(formatRule.condition() && formatRule.condition().dataType());
    var fillDataType = function (uniqueName) { return dashboardItem
        .dataItems()
        .filter(function (dataItem) { return uniqueName === dataItem.uniqueName() && !!dataItem.dataMember(); })
        .map(function (dataItem) { return ({
        dataItem: dataItem,
        fieldPromise: dataSourceBrowser.findDataField(dashboardItem.dataSource(), dashboardItem.dataMember(), dataItem.dataMember())
    }); })
        .forEach(function (d) { return d.fieldPromise.done(function (field) {
        var newDataType = field.fieldType();
        if (d.dataItem instanceof dimension_1.Dimension) {
            newDataType = _item_filter_items_provider_1.getRealDimensionType(d.dataItem, field);
            dateTimeGroupInterval(field.fieldType() === 'DateTime' ? d.dataItem.dateTimeGroupInterval() : undefined);
            formatRule.condition() && formatRule.condition().dateTimeGroupInterval(dateTimeGroupInterval());
        }
        if (d.dataItem instanceof measure_1.Measure) {
            var summaryType = d.dataItem.summaryType();
            if ((summaryType === 'Count') || (summaryType === 'CountDistinct')) {
                newDataType = 'Integer';
            }
            else if (['Sum', 'Average', 'StdDev', 'StdDevp', 'let', 'letp'].indexOf(summaryType) !== -1) {
                newDataType = 'Decimal';
            }
        }
        dataType(newDataType);
        formatRule.condition() && formatRule.condition().dataType(dataType());
    }); }); };
    if (!dataType() && formatRule.dataItemName())
        fillDataType(formatRule.dataItemName());
    formatRule.dataItemName.subscribe(fillDataType);
    return { dataType: dataType, dateTimeGroupInterval: dateTimeGroupInterval };
}
exports.createDataTypeObservable = createDataTypeObservable;
function addConditionEditor(wrapper, dataTypeInfo, formatRuleModel, dashboardItem, requestRecalculation, specificTypeChanged, conditionTypeFilter) {
    var originalConditionType = formatRuleModel._classId;
    var conditionType = ko.observable(formatRuleModel._classId).extend({ notify: 'always' });
    var specificType = ko.observable(formatRuleModel.condition() && formatRuleModel.condition().getSpecificType());
    wrapper.addProperty(ko.observable(), {
        propertyName: 'typeChooser',
        displayName: 'DashboardWebStringId.ConditionType',
        formAdapterItem: _form_adapter_editors_1.conditionTypeEditor({ dataType: dataTypeInfo.dataType, conditionType: conditionType, specificType: specificType, conditionTypeFilter: conditionTypeFilter })
    });
    specificType.subscribe(function (newSpecificType) {
        var condition = formatRuleModel.condition(), newRule = !condition, changedConditionType = originalConditionType !== conditionType(), realConditionType = conditionType().split('_')[0];
        if (newRule || changedConditionType) {
            formatRuleModel._changeConditionType(realConditionType);
            condition = formatRuleModel.condition();
            condition.dataType(dataTypeInfo.dataType());
            condition.dateTimeGroupInterval(dataTypeInfo.dateTimeGroupInterval());
        }
        condition.setSpecificType(newSpecificType);
        if (newRule) {
            formatRuleModel.name(_helper_classes_1.NameGenerator.generateName(_default_1.getLocalizationById('DashboardWebStringId.FormatRule') + ' ', dashboardItem.formatRules(), 'name', 1));
        }
        if (newRule || changedConditionType) {
            requestRecalculation.fire();
        }
        specificTypeChanged();
    });
}
exports.addConditionEditor = addConditionEditor;
function getCommonCellsFormatRuleProperties(formatRule, dashboardItem, getDataItems, getApplyToDataItems) {
    var dataItems = ko.pureComputed(function () { return getDataItems().map(function (m) { return ({ value: ko.unwrap(m.uniqueName), displayValueId: ko.unwrap(m.displayName) }); }); });
    var applyToDataItems = ko.pureComputed(function () { return getApplyToDataItems().map(function (m) { return ({ value: ko.unwrap(m.uniqueName), displayValueId: ko.unwrap(m.displayName) }); }); });
    if (!formatRule.dataItemName() && dataItems().length) {
        formatRule.dataItemName(ko.unwrap(dataItems()[0].value));
    }
    formatRule.dataItemName.subscribe(function (uniqueName) {
        if (!applyToDataItems().filter(function (di) { return ko.unwrap(di.value) === uniqueName; })[0]) {
            formatRule.dataItemApplyToName(ko.unwrap(applyToDataItems()[0].value));
        }
    });
    var commonProperties = [];
    commonProperties.push(__assign({}, _cells_item_format_rule_1.formatRuleDataItem, { formAdapterItem: _form_adapter_editors_1.dynamicSelectBoxEditor(dataItems) }));
    commonProperties.push(__assign({}, _cells_item_format_rule_1.dataItemApplyTo, { formAdapterItem: _form_adapter_editors_1.dynamicSelectBoxEditor(applyToDataItems) }));
    return {
        properties: commonProperties
    };
}
exports.getCommonCellsFormatRuleProperties = getCommonCellsFormatRuleProperties;
