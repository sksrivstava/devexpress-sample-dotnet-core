/**
* DevExpress Dashboard (_condition-type-editor.d.ts)
* Version:  20.1.6
* Build date: Jul 17, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { Color } from '../../model/color';
import { FormatConditionRangeGradientPredefinedType, FormatConditionRangeSetPredefinedType } from '../../model/format-rules/conditions/range/range-converter';
import { ISlidableListsNavigable } from '../ui-widgets/_ui-widgets';
export declare type RangeStyleType = 'None' | 'Color' | 'Icon' | 'Gradient' | 'ColorBar' | 'GradientBar';
export declare type ConditionTypePropertyName = 'conditionValue' | 'conditionTopBottom' | 'conditionAverage' | 'conditionDateOccuring' | 'conditionExpression' | 'conditionRangeSet' | 'conditionRangeGradient' | 'conditionBar' | 'conditionColorRangeBar' | 'conditionGradientRangeBar';
export interface FormatConditionTypeEditorOptions {
    dataType: ko.Observable<string>;
    conditionType: ko.Observable<string>;
    specificType: ko.Observable<string | FormatConditionRangeGradientPredefinedType | FormatConditionRangeSetPredefinedType>;
    conditionTypeFilter?: (conditionTypePropertyName: ConditionTypePropertyName) => boolean;
}
export declare class FormatConditionTypeEditorSurface implements ISlidableListsNavigable {
    displayMode: ko.Observable<"conditionTypes" | "specificTypes">;
    availableConditionTypes: ko.Computed<Array<{
        value: string;
        displayText: string;
        hasSpecificTypes: boolean;
    }>>;
    availableSpecificTypes: ko.Computed<Array<any>>;
    selectedSpecificTypes: ko.Computed<Array<any>>;
    ancestors: ko.Observable<any[]>;
    dataType: ko.Observable<string>;
    conditionType: ko.Observable<string>;
    specificType: ko.Observable<string | FormatConditionRangeGradientPredefinedType | FormatConditionRangeSetPredefinedType>;
    backClick: () => void;
    updateItemAppearance: (e: any) => void;
    constructor(options: FormatConditionTypeEditorOptions);
    getStyleList(rangeStyleType: FormatConditionRangeSetPredefinedType): Array<string>;
    getGradientColorsList(type: FormatConditionRangeGradientPredefinedType): Array<Color>;
}
