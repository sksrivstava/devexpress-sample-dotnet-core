/**
* DevExpress Dashboard (_color-scheme-model.d.ts)
* Version:  20.1.6
* Build date: Jul 17, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { DashboardUpdateHub } from '../../../common/dashboard-update-hub/_dashboard-update-hub';
import { ColorSchemeDefinition } from '../../../model/colorization/color-scheme-definition';
import { AutoColorSchemeEntry, ColorSchemeEntry } from '../../../model/colorization/color-scheme-entry';
import { MeasureDefinition } from '../../../model/colorization/measure-definition';
import { Dashboard } from '../../../model/dashboard';
import { DisposableObject } from '../../../model/disposable-object';
import { KnockoutEntry } from '../../../model/internal/_knockout-utils';
import { DataDashboardItem } from '../../../model/items/data-dashboard-item';
export declare class ItemColorScheme extends DisposableObject {
    constructor(item: Dashboard | DataDashboardItem, _requestColorSchemeDelegate: (itemName?: string) => JQueryPromise<{}>, _updateHub: DashboardUpdateHub);
    customEntries: ko.ObservableArray<ColorSchemeEntry>;
    generatedEntries: ko.ObservableArray<ColorSchemeEntry>;
    componentName: string;
    name: string;
    allEntries: ko.Computed<ColorSchemeEntry[]>;
}
export declare class ColorSchemeModel {
    private dashboard;
    private _requestColorSchemeDelegate;
    private _updateHub;
    constructor(dashboard: Dashboard, _requestColorSchemeDelegate: (itemName?: string) => JQueryPromise<{}>, _updateHub: DashboardUpdateHub);
    createItemColorScheme(item: DataDashboardItem): void;
    getScheme(componentName?: string): ko.ObservableArray<ColorSchemeEntry>;
    isSignatureAutogenerated: (definition: ColorSchemeDefinition) => boolean;
    removeEntry: (entry: ColorSchemeEntry) => void;
    removeTable: (definition: ColorSchemeDefinition) => void;
    retainColorIndex(entry: AutoColorSchemeEntry): void;
    initNewEntry: () => void;
    generateDefaultNames(newEntry: ColorSchemeEntry): any[];
    updateEntry: (entry: ColorSchemeEntry, editedEntry: ColorSchemeEntry) => void;
    getAvailableMeasureKeys: () => MeasureDefinition[];
    isEntryAutogenerated(entry: ColorSchemeEntry): boolean;
    availableSignatures: KnockoutEntry<ColorSchemeDefinition[]>;
    editableSignatures: KnockoutEntry<ColorSchemeDefinition[]>;
    selectedSignatures: ko.Observable<ColorSchemeDefinition[]>;
    selectedSignatureEntries: KnockoutEntry<ColorSchemeEntry[]>;
    itemColorSchemes: {
        [key: string]: ItemColorScheme;
    };
    allEntries: ko.Computed<ColorSchemeEntry[]>;
    newEntry: ko.Observable<ColorSchemeEntry>;
}
