/**
* DevExpress Dashboard (_color-scheme-model.js)
* Version:  20.1.6
* Build date: Jul 17, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = require("@devexpress/analytics-core/dx-analytics-core");
var $ = require("jquery");
var ko = require("knockout");
var _utils_1 = require("../../../data/_utils");
var color_1 = require("../../../model/color");
var color_scheme_entry_1 = require("../../../model/colorization/color-scheme-entry");
var disposable_object_1 = require("../../../model/disposable-object");
var index_metadata_1 = require("../../../model/index.metadata");
var _array_utils_1 = require("../../../model/internal/_array-utils");
var _knockout_utils_1 = require("../../../model/internal/_knockout-utils");
var data_dashboard_item_1 = require("../../../model/items/data-dashboard-item");
var _color_scheme_entry_creator_1 = require("./_color-scheme-entry-creator");
var measureDefinitionEqual = function (key1, key2) { return key1._id === key2._id; };
function combineEntries(auto, custom) {
    var customEntries = custom.slice();
    var result = [];
    var dimensionValuesEqual = function (value1, value2) { return value1.value() === value2.value(); };
    return auto.map(function (autoEntry) {
        var foundCustom = customEntries.filter(function (customEntry) {
            return customEntry.definition.equals(autoEntry.definition) &&
                _array_utils_1.compareArrays(customEntry.dimensionKeys().map(function (key) { return key.value; }), autoEntry.dimensionKeys().map(function (key) { return key.value; }), dimensionValuesEqual) &&
                _array_utils_1.compareArrays(customEntry.measureKeys(), autoEntry.measureKeys(), measureDefinitionEqual);
        })[0];
        !!foundCustom && customEntries.splice(customEntries.indexOf(foundCustom), 1);
        return foundCustom || autoEntry;
    }).concat(customEntries);
}
var ItemColorScheme = (function (_super) {
    __extends(ItemColorScheme, _super);
    function ItemColorScheme(item, _requestColorSchemeDelegate, _updateHub) {
        var _this = _super.call(this) || this;
        _this.generatedEntries = ko.observableArray();
        _this.componentName = '';
        _this.name = '';
        if (item instanceof data_dashboard_item_1.DataDashboardItem) {
            _this.componentName = item.componentName();
            _this.name = item.name();
        }
        _this.customEntries = item.colorScheme;
        _this.allEntries = ko.computed(function () {
            return combineEntries(_this.generatedEntries(), _this.customEntries());
        });
        _this.toDispose(_this.allEntries);
        var update = _utils_1.debounce(function () {
            if (!_this.disposed) {
                _requestColorSchemeDelegate(_this.componentName).done(function (scheme) {
                    var coloringSchemeEntries = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(scheme, function (item) { return new color_scheme_entry_1.AutoColorSchemeEntry(item, null, _this.componentName, _this.name); })();
                    _this.generatedEntries(coloringSchemeEntries);
                });
            }
        }, 10);
        _this.toDispose(_this.customEntries.subscribe(update));
        var dashboardItemUpdated = function (args) {
            if ((args.category !== index_metadata_1.PropertyCategory.ViewModel && args.category !== index_metadata_1.PropertyCategory.NoUpdate)
                && item._colorableItems().indexOf(args.item) !== -1) {
                update();
            }
        };
        item._colorableItems.subscribe(update);
        _updateHub.dashboardItemPropertyChanged.add(dashboardItemUpdated);
        _this.toDispose({ dispose: function () { _updateHub.dashboardItemPropertyChanged.remove(dashboardItemUpdated); } });
        update();
        return _this;
    }
    return ItemColorScheme;
}(disposable_object_1.DisposableObject));
exports.ItemColorScheme = ItemColorScheme;
function contains(array, item) {
    return array.some(function (element) { return element === item; });
}
var ColorSchemeModel = (function () {
    function ColorSchemeModel(dashboard, _requestColorSchemeDelegate, _updateHub) {
        var _this = this;
        this.dashboard = dashboard;
        this._requestColorSchemeDelegate = _requestColorSchemeDelegate;
        this._updateHub = _updateHub;
        this.isSignatureAutogenerated = function (definition) { return _this.itemColorSchemes[definition.componentName].generatedEntries().some(function (entry) { return entry.definition.equals(definition); }); };
        this.removeEntry = function (entry) {
            _this.getScheme(entry.definition.componentName).remove(entry);
            _this.newEntry(null);
        };
        this.removeTable = function (definition) {
            var scheme = _this.getScheme(definition.componentName);
            scheme.removeAll(scheme().filter(function (entry) { return entry.definition.equals(definition); }));
        };
        this.initNewEntry = function () {
            var entryCreator = new _color_scheme_entry_creator_1.ColorSchemeEntryCreator();
            var entryToClone = _this.selectedSignatureEntries()[0];
            var defaultNames = _this.generateDefaultNames(entryToClone);
            entryCreator.addItemComponentName(entryToClone.definition.componentName);
            entryCreator.addDataSourceName(entryToClone.definition.dataSource);
            entryCreator.addDataMemberName(entryToClone.definition.dataMember);
            entryToClone.dimensionKeys().map(function (key, index) {
                entryCreator.addDimensionKey(key.definition.dataMember(), key.definition.dateTimeGroupInterval(), key.value.type(), defaultNames[index]);
            });
            entryCreator.addColor(color_1.Color.fromArgb(1, 0, 0, 0));
            _this.newEntry(entryCreator.getEntry());
        };
        this.updateEntry = function (entry, editedEntry) {
            var entries = _this.getScheme(editedEntry.definition.componentName);
            var oldEntryIndex = entry instanceof color_scheme_entry_1.AutoColorSchemeEntry ? -1 : entries().indexOf(entry);
            if (oldEntryIndex >= 0) {
                entries.splice(oldEntryIndex, 1);
            }
            if (entries().indexOf(editedEntry) === -1) {
                entries.push(editedEntry);
            }
            _this.newEntry(null);
        };
        this.getAvailableMeasureKeys = function () {
            var result = [];
            var definition = _this.selectedSignatureEntries().length > 0 ? _this.selectedSignatureEntries()[0].definition : null;
            var itemId = definition.componentName;
            var addMeasureDefinition = function (measureDefinition) {
                if (!result.some(function (definition) { return measureDefinitionEqual(definition, measureDefinition); }))
                    result.push(measureDefinition);
            };
            var items = _this.dashboard._dataDashboardItems().
                filter(function (item) { return (!!itemId ? item.componentName() === itemId : item._isGloballyColored) &&
                definition.equals(item._getColoringSignature()); });
            if (items.length > 0) {
                items.forEach(function (item) {
                    item._measures.forEach(function (measure) {
                        if (item._isColoringEnabled(measure)) {
                            addMeasureDefinition(_color_scheme_entry_creator_1.ColorSchemeEntryCreator.createMeasureDefinitionFromMeasure(measure, item.dataItems()));
                        }
                    });
                });
            }
            else {
                _this.selectedSignatureEntries().forEach(function (entry) {
                    entry.measureKeys().forEach(function (measure) { return addMeasureDefinition(_color_scheme_entry_creator_1.ColorSchemeEntryCreator.createMeasureDefinitionCopy(measure)); });
                });
            }
            return result;
        };
        this.selectedSignatures = ko.observable([]);
        this.itemColorSchemes = {};
        this.newEntry = ko.observable();
        this.itemColorSchemes[''] = new ItemColorScheme(dashboard, _requestColorSchemeDelegate, _updateHub);
        var localyColoredItems = ko.computed(function () { return dashboard._dataDashboardItems().filter(function (item) { return item._isLocallyColored; }); });
        localyColoredItems().forEach(function (item) { return _this.createItemColorScheme(item); });
        _knockout_utils_1.subscribeWithPrev(localyColoredItems, function (oldValues, newValues) {
            var deleted = oldValues
                .filter(function (oldValue) { return !newValues.some(function (element) { return element === oldValue; }); })
                .forEach(function (item) {
                _this.itemColorSchemes[item.componentName()].dispose();
                delete _this.itemColorSchemes[item.componentName()];
            });
            var added = newValues
                .filter(function (newValue) { return !oldValues.some(function (element) { return element === newValue; }); })
                .forEach(function (item) { return _this.createItemColorScheme(item); });
        });
        this.allEntries = ko.computed(function () {
            var result = [];
            $.each(_this.itemColorSchemes, function (componentName, scheme) {
                result = result.concat(scheme.allEntries());
            });
            return result;
        });
        this.availableSignatures = ko.computed(function () {
            var result = [];
            _this.allEntries().forEach(function (entry) {
                var definition = entry.definition;
                if (!result.some(function (resultDefinition) { return resultDefinition.equals(definition); })) {
                    result.push(definition);
                }
            });
            return result;
        });
        this.editableSignatures = ko.computed(function () {
            return _this.availableSignatures().filter(function (s) { return s.dataItems().length > 0; });
        });
        this.selectedSignatureEntries = ko.pureComputed(function () {
            return _this.allEntries().filter(function (entry) { return !!_this.selectedSignatures().length && entry.definition.equals(_this.selectedSignatures()[0]); }).concat(_this.newEntry() ? [_this.newEntry()] : []);
        });
    }
    ColorSchemeModel.prototype.createItemColorScheme = function (item) {
        this.itemColorSchemes[item.componentName()] = new ItemColorScheme(item, this._requestColorSchemeDelegate, this._updateHub);
    };
    ColorSchemeModel.prototype.getScheme = function (componentName) {
        if (componentName === void 0) { componentName = ''; }
        return this.itemColorSchemes[componentName].customEntries;
    };
    ColorSchemeModel.prototype.retainColorIndex = function (entry) {
        var newEntry = entry.clone();
        newEntry.color(null);
        newEntry.paletteIndex(entry.paletteIndex());
        this.getScheme(entry.definition.componentName).push(newEntry);
    };
    ColorSchemeModel.prototype.generateDefaultNames = function (newEntry) {
        var result = [];
        var entries = this.itemColorSchemes[newEntry.definition.componentName].allEntries().filter(function (entry) { return entry.definition.equals(newEntry.definition); });
        var dimensionKeys = newEntry.dimensionKeys();
        var lastDimensionIndex = null;
        var isString = function (dimensionKey) {
            return dimensionKey.value.type() === 'System.String';
        };
        for (var i = dimensionKeys.length - 1; i >= 0; i--) {
            if (isString(dimensionKeys[i])) {
                lastDimensionIndex = i;
                break;
            }
        }
        if (lastDimensionIndex != null) {
            for (var i = 0; i < lastDimensionIndex; i++) {
                result.push(isString(dimensionKeys[i]) ? dimensionKeys[i].definition.dataMember() + '1' : null);
            }
            var lastDimensionPattern = dimensionKeys[lastDimensionIndex].definition.dataMember();
            var lastDimensionPostfix = 1;
            while (entries.some(function (entry) { return entry.dimensionKeys()[lastDimensionIndex].value.value() === lastDimensionPattern + (lastDimensionPostfix).toString(); })) {
                lastDimensionPostfix++;
            }
            result[lastDimensionIndex] = lastDimensionPattern + lastDimensionPostfix.toString();
        }
        return result;
    };
    ColorSchemeModel.prototype.isEntryAutogenerated = function (entry) {
        return this.itemColorSchemes[entry.definition.componentName].generatedEntries().some(function (generatedEntry) { return generatedEntry.equals(entry); });
    };
    return ColorSchemeModel;
}());
exports.ColorSchemeModel = ColorSchemeModel;
