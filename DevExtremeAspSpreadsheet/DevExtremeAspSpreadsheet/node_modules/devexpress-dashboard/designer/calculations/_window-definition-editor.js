/**
* DevExpress Dashboard (_window-definition-editor.js)
* Version:  20.1.6
* Build date: Jul 17, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var _utils_1 = require("../../data/_utils");
var data_item_1 = require("../../model/data-item/data-item");
var specific_calc_window_definition_1 = require("../../model/data-item/window-definition/specific-calc-window-definition");
var _undo_engine_helper_1 = require("../../model/internal/_undo-engine-helper");
var _form_adapter_editors_1 = require("../form-adapter/_form-adapter-editors");
var _object_properties_wrapper_1 = require("../form-adapter/_object-properties-wrapper");
var _display_name_provider_1 = require("../_display-name-provider");
var WindowDefinitionMode;
(function (WindowDefinitionMode) {
    WindowDefinitionMode[WindowDefinitionMode["Predefined"] = 0] = "Predefined";
    WindowDefinitionMode[WindowDefinitionMode["Specific"] = 1] = "Specific";
})(WindowDefinitionMode = exports.WindowDefinitionMode || (exports.WindowDefinitionMode = {}));
var WindowDefinitionEditor = (function () {
    function WindowDefinitionEditor(windowDefinition, _params) {
        var _this = this;
        this._params = _params;
        this.mode = ko.observable(null);
        this.value = windowDefinition.windowDefinition;
        if (this.value() instanceof specific_calc_window_definition_1.SpecificWindowDefinition) {
            this.mode(WindowDefinitionMode.Specific);
            var definition = this.value();
            definition._dimensionsInfoPatcher = WindowDefinitionEditor.createPatchSpecificWindowDimensionsInfo(definition, _params.dataDashboardItem, _params.dataSourceBrowser);
        }
        else {
            this.mode(WindowDefinitionMode.Predefined);
        }
        this.mode.subscribe(this.setValue, this);
        this.formAdapterWrapper = ko.pureComputed(function () {
            if (_this.value()) {
                return new _object_properties_wrapper_1.ObjectPropertiesWrapper({ model: _this.value(),
                    properties: _this.value().getInfo() });
            }
        });
    }
    Object.defineProperty(WindowDefinitionEditor.prototype, "dataSource", {
        get: function () {
            return [
                { value: WindowDefinitionMode.Predefined, displayValue: 'DashboardWebStringId.Calculations.WindowDefinitionModePredefined' },
                { value: WindowDefinitionMode.Specific, displayValue: 'DashboardWebStringId.Calculations.WindowDefinitionModeSpecific' }
            ];
        },
        enumerable: true,
        configurable: true
    });
    WindowDefinitionEditor.prototype.setValue = function (newMode) {
        if (newMode === WindowDefinitionMode.Predefined) {
            this.value(this._params.dataDashboardItem._getDefaultCalculationWindowDefinition());
        }
        else {
            var windowDefinition = new specific_calc_window_definition_1.SpecificWindowDefinition();
            windowDefinition._dimensionsInfoPatcher = WindowDefinitionEditor.createPatchSpecificWindowDimensionsInfo(windowDefinition, this._params.dataDashboardItem, this._params.dataSourceBrowser);
            this.value(windowDefinition);
        }
    };
    WindowDefinitionEditor.createPatchSpecificWindowDimensionsInfo = function (definition, dataDashboardItem, dataSourceBrowser) { return function (propertyInfo) {
        var lookupValueFromDimension = function (d) {
            return {
                value: d.uniqueName(),
                displayValue: _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, dataDashboardItem, d)
            };
        };
        var allDimensions = dataDashboardItem._dimensions.map(lookupValueFromDimension);
        var getAvailableDimensions = function () {
            return dataDashboardItem._dimensions
                .filter(function (d) { return !definition.dimensions().some(function (wd) { return wd.uniqueName() === d.uniqueName(); }); })
                .map(lookupValueFromDimension);
        };
        var editorOptions = {
            dataFields: ['uniqueName'],
            gridColumns: [{
                    dataField: 'uniqueName',
                    lookup: {
                        displayExpr: 'displayValue',
                        valueExpr: 'value',
                    },
                    calculateDisplayValue: function (gridRow) {
                        var dimension = allDimensions.filter(function (d) { return d.value === gridRow.uniqueName; })[0];
                        return dimension && dimension.displayValue || gridRow.uniqueName;
                    }
                }],
            enableAddItem: function () { return !!getAvailableDimensions().length; },
            noDataText: 'DashboardWebStringId.CollectionEditor.NoItems',
            createNewItemHandler: function () {
                if (getAvailableDimensions().length > 0) {
                    return new data_item_1.DataItemLink(dataDashboardItem, { '@DefaultId': getAvailableDimensions()[0].value });
                }
            },
            customizeInlineEditor: function (e) {
                var uniqueName = e.row && e.row.data && e.row.data.uniqueName;
                var availableDimensions = getAvailableDimensions();
                if (availableDimensions.filter(function (d) { return d.value === uniqueName; }).length) {
                    e.editorOptions.dataSource = availableDimensions;
                }
                else {
                    e.editorOptions.dataSource = allDimensions
                        .filter(function (d) { return d.value === uniqueName; })
                        .concat(availableDimensions);
                }
            },
        };
        return __assign({}, propertyInfo, { formAdapterItem: _form_adapter_editors_1.inlineEditCollectionEditor(editorOptions) });
    }; };
    __decorate([
        _undo_engine_helper_1.wrapWithUndoRedo
    ], WindowDefinitionEditor.prototype, "setValue", null);
    return WindowDefinitionEditor;
}());
exports.WindowDefinitionEditor = WindowDefinitionEditor;
exports.windowDefinitionEditor = function (params) { return function (context) {
    return {
        template: function (args, itemElement) {
            var windowDefinition = args.component.option('formData')[args.dataField];
            var viewModel = new WindowDefinitionEditor(windowDefinition, params);
            ko.applyBindingsToNode(_utils_1.$unwrap(itemElement), { template: { name: 'dx-dashboard-window-definition-editor', data: viewModel } }, context.bindingContext);
        }
    };
}; };
