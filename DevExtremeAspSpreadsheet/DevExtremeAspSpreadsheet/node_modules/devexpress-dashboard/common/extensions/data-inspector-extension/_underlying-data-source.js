/**
* DevExpress Dashboard (_underlying-data-source.js)
* Version:  20.1.6
* Build date: Jul 17, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var custom_store_1 = require("devextreme/data/custom_store");
var notificator_1 = require("../../notification-controller/notificator");
var _inspected_data_colum_generator_1 = require("./_inspected-data-colum-generator");
function generateUnderlyingDataSource(underlyingDataProvider, dashbordItem) {
    var DataFieldPrefix = 'DataField';
    var itemData = dashbordItem._getItemData();
    if (underlyingDataProvider && itemData && !itemData.isEmpty()) {
        var columnsState_1 = {};
        return {
            columns: null,
            customizeColumns: function (columns) {
                columns.forEach(function (column) {
                    var columnState = columnsState_1[column.dataField];
                    if (columnState) {
                        column.name = columnState.dataMember;
                        column.caption = columnState.displayName;
                    }
                });
            },
            data: new custom_store_1.default({
                loadMode: 'raw',
                load: function () {
                    return underlyingDataProvider.requestUnderlyingData(dashbordItem, {
                        dataMembers: _inspected_data_colum_generator_1.getSortedColumns(itemData)
                    }).then(function (_a) {
                        var DataMembers = _a.DataMembers, DataMembersDisplayNames = _a.DataMembersDisplayNames, Data = _a.Data, ErrorMessage = _a.ErrorMessage;
                        if (ErrorMessage) {
                            new Error(ErrorMessage);
                        }
                        DataMembers.forEach(function (member, index) {
                            columnsState_1[DataFieldPrefix + index.toString()] = {
                                dataMember: member,
                                displayName: DataMembersDisplayNames[index] || member,
                            };
                        });
                        return Data.map(function (row) {
                            return DataMembers.reduce(function (acc, _, index) {
                                acc[DataFieldPrefix + index.toString()] = row[index];
                                return acc;
                            }, {});
                        });
                    }, function (result) {
                        throw new Error(notificator_1.NotificationController._getDetailedErrorMessage(result));
                    });
                }
            })
        };
    }
    else {
        return {
            columns: [],
            customizeColumns: function () { },
            data: [],
        };
    }
}
exports.generateUnderlyingDataSource = generateUnderlyingDataSource;
