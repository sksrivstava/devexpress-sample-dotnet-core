/**
* DevExpress Dashboard (_options-manager.js)
* Version:  20.1.6
* Build date: Jul 17, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var getEventName = function (actionName) {
    return actionName.charAt(2).toLowerCase() + actionName.substr(3);
};
var isEventName = function (actionName) {
    return actionName && actionName.length && actionName.indexOf('on') === 0 && actionName.charAt(2).toUpperCase() === actionName.charAt(2);
};
var OptionsManager = (function () {
    function OptionsManager() {
        this.events = new EventManager();
    }
    OptionsManager.prototype.initialize = function (_defaultOptions, options, extension) {
        var _this = this;
        this.options = __assign({}, _defaultOptions, options);
        Object.keys(this.options).forEach(function (optionName) {
            if (isEventName(optionName)) {
                _this.events.on(getEventName(optionName), _this.options[optionName]);
            }
        });
        extension.on = this.events.on;
        extension.off = this.events.off;
    };
    OptionsManager.prototype.dispose = function () {
        this.events.dispose();
    };
    return OptionsManager;
}());
exports.OptionsManager = OptionsManager;
var EventManager = (function () {
    function EventManager() {
        var _this = this;
        this._handlers = [];
        this.on = function (eventName, eventHandler) {
            if (!_this._handlers.filter(function (handler) { return handler.eventName === eventName && handler.event === eventHandler; })[0]) {
                _this._handlers.push({
                    eventName: eventName,
                    event: eventHandler
                });
            }
        };
        this.off = function (eventName, eventHandler) {
            var eventInfo = _this._handlers.filter(function (handler) { return handler.eventName === eventName && handler.event === eventHandler; })[0];
            var index = _this._handlers.indexOf(eventInfo);
            if (index !== -1) {
                _this._handlers.splice(index, 1);
            }
        };
    }
    EventManager.prototype.dispose = function () {
        this._handlers = [];
    };
    EventManager.prototype.raise = function (eventName, eventArgs) {
        this._handlers
            .filter(function (handler) { return handler.eventName === eventName; })
            .forEach(function (handler) { return handler.event(eventArgs); });
    };
    return EventManager;
}());
exports.EventManager = EventManager;
