/**
* DevExpress Dashboard (card-layout-template-element.d.ts)
* Version:  20.1.6
* Build date: Jul 17, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import DxDesigner from '@devexpress/analytics-core/dx-analytics-core';
import * as ko from 'knockout';
import { CardRowDataElementType } from '../../enums';
import { SerializableModel } from '../../serializable-model';
export declare abstract class CardLayoutTemplateElementBase extends SerializableModel {
    visible: ko.Observable<boolean>;
    constructor(modelJson?: any, serializer?: DxDesigner.Analytics.Utils.ModelSerializer);
    abstract _getTitle(dimensionNames?: string[]): ko.Computed<string>;
    _createEditorModel(dimensionNames?: string[]): {
        title: ko.Computed<string>;
        checked: ko.Observable<boolean>;
    };
    getInfo(): DxDesigner.Analytics.Utils.ISerializationInfoArray;
    _initDefault(visible?: boolean, valueType?: CardRowDataElementType, dimenstionIndex?: number): void;
}
export declare class CardLayoutTemplateDeltaElement extends CardLayoutTemplateElementBase {
    constructor(modelJson?: any, serializer?: DxDesigner.Analytics.Utils.ModelSerializer);
    _getTitle(): ko.Computed<string>;
}
export declare class CardLayoutTemplateSparklineElement extends CardLayoutTemplateElementBase {
    constructor(modelJson?: any, serializer?: DxDesigner.Analytics.Utils.ModelSerializer);
    _getTitle(): ko.Computed<string>;
}
export declare class CardLayoutTemplateDataElement extends CardLayoutTemplateElementBase {
    valueType: ko.Observable<CardRowDataElementType>;
    dimensionIndex: ko.Observable<number>;
    constructor(modelJson?: any, serializer?: DxDesigner.Analytics.Utils.ModelSerializer);
    _getTitle(dimensionNames: string[]): ko.Computed<any>;
    getInfo(): DxDesigner.Analytics.Utils.ISerializationInfoArray;
    _initDefault(visible: boolean, valueType: CardRowDataElementType, dimenstionIndex?: number): void;
    _getEditorProperty(valueType: CardRowDataElementType, dimensionIndex?: number, dimensionNames?: string[]): {
        value: CardRowDataElementType;
        displayText: any;
        dimensionIndex: number;
        key: string;
    };
    _createEditorModel(dimensionNames: string[]): {
        lookupDataSource: {
            value: CardRowDataElementType;
            displayText: any;
            dimensionIndex: number;
            key: string;
        }[];
        selectedItem: ko.PureComputed<any>;
        title: ko.Computed<string>;
        checked: ko.Observable<boolean>;
    };
}
