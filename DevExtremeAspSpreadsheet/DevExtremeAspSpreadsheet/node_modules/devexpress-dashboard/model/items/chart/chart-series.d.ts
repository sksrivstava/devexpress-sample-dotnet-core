/**
* DevExpress Dashboard (chart-series.d.ts)
* Version:  20.1.6
* Build date: Jul 17, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import DxDesigner from '@devexpress/analytics-core/dx-analytics-core';
import * as ko from 'knockout';
import { Measure } from '../../data-item/measure';
import { OpenHighLowCloseSeriesType, RangeSeriesType, SimpleSeriesType } from '../../enums';
import { IDashboardSerializationInfoArray } from '../../metadata/_base-metadata';
import { IBindingProperty } from '../binding-property';
import { DataDashboardItem } from '../data-dashboard-item';
import { DataItemContainer } from '../data-item-container';
import { PointLabelOptions } from './point-label-options';
export declare abstract class ChartSeries extends DataItemContainer {
    plotOnSecondaryAxis: ko.Observable<boolean>;
    ignoreEmptyPoints: ko.Observable<boolean>;
    showPointMarkers: ko.Observable<boolean>;
    pointLabelOptions: PointLabelOptions;
    constructor(seriesJSON?: any, serializer?: DxDesigner.Analytics.Utils.ModelSerializer);
    protected _getInfoCore(): IDashboardSerializationInfoArray;
    grabFrom(series: ChartSeries): void;
    protected abstract readonly _defaultMeasure: Measure;
    _getDataId(): string;
    abstract _getBindingModel(): Array<IBindingProperty>;
}
export declare class SimpleSeries extends ChartSeries {
    private __value;
    value: ko.Observable<Measure>;
    seriesType: ko.Observable<SimpleSeriesType>;
    constructor(dataItemProvider: DataDashboardItem, seriesJSON?: any, serializer?: DxDesigner.Analytics.Utils.ModelSerializer);
    _getBindingModel(): Array<IBindingProperty>;
    _getContainerType(): SimpleSeriesType;
    protected _getInfoCore(): IDashboardSerializationInfoArray;
    protected _getDefaultItemType(): string;
    protected readonly _defaultMeasure: Measure;
}
export declare class RangeSeries extends ChartSeries {
    private __value1;
    private __value2;
    value1: ko.Observable<Measure>;
    value2: ko.Observable<Measure>;
    seriesType: ko.Observable<RangeSeriesType>;
    constructor(dataItemProvider: DataDashboardItem, seriesJSON?: any, serializer?: DxDesigner.Analytics.Utils.ModelSerializer);
    protected _getInfoCore(): IDashboardSerializationInfoArray;
    protected _getDefaultItemType(): string;
    _getBindingModel(): Array<IBindingProperty>;
    _getContainerType(): RangeSeriesType;
    protected readonly _defaultMeasure: Measure;
}
export declare class WeightedSeries extends ChartSeries {
    private __weight;
    private __value;
    weight: ko.Observable<Measure>;
    value: ko.Observable<Measure>;
    constructor(dataItemProvider: DataDashboardItem, seriesJSON?: any, serializer?: DxDesigner.Analytics.Utils.ModelSerializer);
    protected _getInfoCore(): IDashboardSerializationInfoArray;
    protected _getDefaultItemType(): string;
    _getBindingModel(): Array<IBindingProperty>;
    protected readonly _defaultMeasure: Measure;
}
export declare class HighLowCloseSeries extends ChartSeries {
    private __high;
    private __low;
    private __close;
    high: ko.Observable<Measure>;
    low: ko.Observable<Measure>;
    close: ko.Observable<Measure>;
    constructor(dataItemProvider: DataDashboardItem, seriesJSON?: any, serializer?: DxDesigner.Analytics.Utils.ModelSerializer);
    protected _getInfoCore(): IDashboardSerializationInfoArray;
    protected _getDefaultItemType(): string;
    _getBindingModel(): Array<IBindingProperty>;
    protected readonly _defaultMeasure: Measure;
}
export declare class OpenHighLowCloseSeries extends HighLowCloseSeries {
    private __open;
    open: ko.Observable<Measure>;
    seriesType: ko.Observable<OpenHighLowCloseSeriesType>;
    constructor(dataItemProvider: DataDashboardItem, seriesJSON?: any, serializer?: DxDesigner.Analytics.Utils.ModelSerializer);
    protected _getInfoCore(): IDashboardSerializationInfoArray;
    protected _getDefaultItemType(): string;
    _getBindingModel(): Array<IBindingProperty>;
    _getContainerType(): OpenHighLowCloseSeriesType;
    protected readonly _defaultMeasure: Measure;
}
