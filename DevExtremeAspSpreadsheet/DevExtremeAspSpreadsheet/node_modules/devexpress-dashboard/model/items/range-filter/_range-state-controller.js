/**
* DevExpress Dashboard (_range-state-controller.js)
* Version:  20.1.6
* Build date: Jul 17, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var _utils_1 = require("../../../data/_utils");
var dashboard_state_1 = require("../../dashboard-state");
var _dimension_filter_values_1 = require("../../data-item/_dimension-filter-values");
var _date_utils_1 = require("../../internal/_date-utils");
var RangeStateController = (function () {
    function RangeStateController(item) {
        this.item = item;
    }
    Object.defineProperty(RangeStateController.prototype, "defaultDateTimePeriodName", {
        get: function () { return this.item.defaultDateTimePeriodName; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RangeStateController.prototype, "currentSelectedDateTimePeriodName", {
        get: function () { return this.item.currentSelectedDateTimePeriodName; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RangeStateController.prototype, "dateTimePeriods", {
        get: function () { return this.item.dateTimePeriods; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RangeStateController.prototype, "_selectionValues", {
        get: function () { return this.item._selectionValues; },
        enumerable: true,
        configurable: true
    });
    RangeStateController.prototype._getSelectionByPeriod = function (period) {
        return this.item._getSelectionByPeriod(period);
    };
    RangeStateController.prototype._setSelection = function (stateSelection) {
        this.item._setSelection(stateSelection);
    };
    RangeStateController.prototype.initialize = function () {
        var _this = this;
        if (this.defaultDateTimePeriodName()) {
            this.item._processItemSetPredefinedPeriod(this.defaultDateTimePeriodName());
        }
        this.dateTimePeriods.subscribe(function (newPeriods) {
            if (!newPeriods.filter(function (p) { return p.name() === _this.defaultDateTimePeriodName(); })[0]) {
                _this.defaultDateTimePeriodName(undefined);
            }
        });
        var subscribeOnDefaultPeriodNameChange = function () {
            _this.item._defaultDateTimePeriodIndexSubscription && _this.item._defaultDateTimePeriodIndexSubscription.dispose();
            _this.item._defaultDateTimePeriodIndexSubscription = null;
            var newPeriod = _this.dateTimePeriods().filter(function (p) { return p.name() === _this.defaultDateTimePeriodName(); })[0];
            if (newPeriod) {
                _this.item._defaultDateTimePeriodIndexSubscription = newPeriod.name.subscribe(function (changedName) {
                    _this.defaultDateTimePeriodName(changedName);
                });
            }
        };
        this.defaultDateTimePeriodName.subscribe(function (newName) {
            subscribeOnDefaultPeriodNameChange();
            _this.item._processItemSetPredefinedPeriod(newName);
        });
        subscribeOnDefaultPeriodNameChange();
        this.item._state = ko.computed(function () {
            var state = new dashboard_state_1.ItemState();
            if (_this.currentSelectedDateTimePeriodName()) {
                if (_this.currentSelectedDateTimePeriodName() !== _this.defaultDateTimePeriodName()) {
                    state.RangeFilterState = {
                        PeriodName: _this.currentSelectedDateTimePeriodName()
                    };
                }
            }
            else {
                var selection = _date_utils_1.toStringArray(_this._selectionValues());
                if (selection && selection.length && (!!selection[0][0] || !!selection[0][1])) {
                    state.RangeFilterState = {
                        Selection: {
                            Minimum: selection[0][0],
                            Maximum: selection[0][1]
                        }
                    };
                }
            }
            return state;
        });
    };
    RangeStateController.prototype.setState = function (itemState) {
        var obsoleteItemState = itemState;
        var rangeFilterState = itemState.RangeFilterState;
        var selectedPeriod;
        var selection;
        if (rangeFilterState) {
            var rangeSelection = rangeFilterState.Selection;
            if (rangeFilterState.PeriodName) {
                var period = this.dateTimePeriods().filter(function (p) { return p.name() === rangeFilterState.PeriodName; })[0];
                if (period) {
                    selectedPeriod = rangeFilterState.PeriodName;
                    selection = this._getSelectionByPeriod(period);
                }
            }
            else if (rangeSelection) {
                if (!!rangeSelection.Minimum || !!rangeSelection.Maximum) {
                    selection = [[rangeSelection.Minimum, rangeSelection.Maximum]];
                }
            }
        }
        else {
            selection = itemState.MasterFilterValues || obsoleteItemState.Selection;
        }
        this.currentSelectedDateTimePeriodName(selectedPeriod);
        this._setSelection(selection);
    };
    RangeStateController.prototype.removeSelectionFromState = function (state) {
        var itemState = _utils_1.deepExtend({}, state);
        itemState.RangeFilterState = undefined;
        return itemState;
    };
    RangeStateController.prototype.setPredefinedPeriodToState = function (state, periodName) {
        var itemState = _utils_1.deepExtend({}, state);
        itemState.RangeFilterState = { PeriodName: periodName };
        return itemState;
    };
    RangeStateController.prototype.setSelectionToState = function (state, selection) {
        var itemState = _utils_1.deepExtend({}, state);
        if (!itemState.RangeFilterState) {
            itemState.RangeFilterState = new dashboard_state_1.RangeFilterState();
        }
        var rangeSelection = new dashboard_state_1.RangeFilterSelection();
        if (selection && selection.length > 0 && selection[0].length > 0) {
            rangeSelection.Minimum = selection[0][0];
            rangeSelection.Maximum = selection[0][1];
        }
        itemState.RangeFilterState.Selection = rangeSelection;
        return itemState;
    };
    RangeStateController.prototype.extendContentState = function (content) {
        var _this = this;
        if (this.currentSelectedDateTimePeriodName()) {
            var selectedPeriod = this.dateTimePeriods().filter(function (p) { return p.name() === _this.currentSelectedDateTimePeriodName(); })[0];
            if (selectedPeriod) {
                content.ViewModel.SelectedPeriodIndex = this.dateTimePeriods().indexOf(selectedPeriod);
            }
        }
    };
    RangeStateController.prototype._getDisplayFilterValues = function (limitCount) {
        var metaData = this.item._dataManager() ? this.item._dataManager().getMetaData() : undefined, selection = this.item._outputFilter(), outFilterValues = [], argumentDimension = selection && selection.dimensions && selection.dimensions[0];
        if (argumentDimension) {
            var dimensionId = argumentDimension['@DefaultId'];
            var format = metaData ? metaData.getDimensionFormat(dimensionId) : undefined;
            if (!_utils_1.arrayEquals(selection.range, this.item._fullRange())) {
                var filterValues = new _dimension_filter_values_1.DimensionFilterValues(this.item._getDimensionDisplayName(dimensionId));
                filterValues.Values.push({
                    Type: 'Range',
                    RangeLeft: selection.range[0],
                    RangeRight: selection.range[1],
                    Format: format
                });
                outFilterValues.push(filterValues);
            }
        }
        return outFilterValues;
    };
    return RangeStateController;
}());
exports.RangeStateController = RangeStateController;
