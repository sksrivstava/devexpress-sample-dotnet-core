/**
* DevExpress Dashboard (custom-item.d.ts)
* Version:  20.1.6
* Build date: Jul 17, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import DxDesigner from '@devexpress/analytics-core/dx-analytics-core';
import * as ko from 'knockout';
import { SectionOptions } from '../../../designer/accordion-tab-options';
import { ColorSchemeEntry } from '../../colorization/color-scheme-entry';
import { CustomPropertyMetadata } from '../../custom-properties/custom-properties-metadata';
import { DataItemLink } from '../../data-item/data-item';
import { MeasureCalculationWindowDefinition } from '../../data-item/window-definition/measure-calc-window-definition';
import { IDashboardSerializationInfo } from '../../metadata/_base-metadata';
import { DataDashboardItem } from '../data-dashboard-item';
import { DashboardItemColoringOptions } from '../options/coloring-options';
import { ICustomItemBinding, ICustomItemBindingValue } from './binding';
import { ICustomDataRow } from './data-row';
import { ICustomItemMetaData } from './meta';
import { ICustomItemProperty } from './property';
import { SliceTable } from './slice-table';
export declare class CustomItem extends DataDashboardItem {
    private _meta;
    static ItemType: string;
    static getPropertyInfo(p: ICustomItemProperty): IDashboardSerializationInfo;
    static _getBindingLinkName(propertyName: string): string;
    private static _getSerializationsInfo;
    private static _hasInteractivityTargets;
    private static _hasColoringDimensions;
    private static _hasColoringMeasures;
    private static _isFilterAllowed;
    private static _isDrillDownAllowed;
    private static _getInfo;
    colorScheme: ko.ObservableArray<ColorSchemeEntry>;
    coloringOptions: DashboardItemColoringOptions;
    customItemType: ko.Observable<string>;
    sliceTables: ko.ObservableArray<SliceTable>;
    interactivityOptions: any;
    interactivityTargets: ko.ObservableArray<DataItemLink>;
    coloringDimensions: ko.ObservableArray<DataItemLink>;
    coloringMeasures: ko.ObservableArray<DataItemLink>;
    customMetadata: {};
    constructor(_meta: ICustomItemMetaData, modelJson?: any, serializer?: DxDesigner.Analytics.Utils.ModelSerializer);
    _clearBindings(): void;
    getBindingValue(propertyName: string, index?: number): Array<ICustomItemBindingValue>;
    iterateData(action: (item: ICustomDataRow) => any, sliceTableName?: string): void;
    protected _getDefaultItemType(): string;
    private _getSliceTable;
    _getAllSelectionValues(activeDimensions: Array<string>): any[];
    private getSlice;
    private _getStorage;
    private _getValidIds;
    private _getColor;
    private _getColorMeasureId;
    private _getMeasureValue;
    private _getMeasureDisplayText;
    private _getDimensionUniqueValue;
    private _getDimensionValue;
    private _getDimensionDisplayText;
    private _format;
    private _getServerText;
    private _getSpecialValue;
    private _getValueBySliceKey;
    _isExcludingAllFilter: ko.Computed<boolean>;
    readonly customBindings: Array<ICustomItemBinding>;
    readonly legacyCustomProperties: Array<ICustomItemProperty>;
    readonly customInteractivity: any;
    readonly _optionsPanelSections: Array<SectionOptions>;
    protected _getMasterFilterMode(): string;
    protected _getDrillDownEnabled(): boolean;
    protected _getIgnoreMasterFilter(): boolean;
    protected _getInteractivityDimensionLinks(): DataItemLink[];
    isDrillDownAllowed(): boolean;
    isFilterAllowed(): boolean;
    _isInteractivityAllowed(): boolean;
    protected _getCanColorByMeasures(): boolean;
    protected _getCanColorByDimensions(): boolean;
    _getColorizableDataItemsInfo(): Array<{
        items: Array<DataItemLink>;
        prefixId: string;
    }>;
    _getDefaultCalculationWindowDefinition(): MeasureCalculationWindowDefinition;
    getInfo(): DxDesigner.Analytics.Utils.ISerializationInfoArray;
    protected _getInfoCore(): IDashboardSerializationInfo[];
    static _getCustomPropertiesSerializationInfo(customItemType: string, dynamicCustomPropertiesMetadata: Array<CustomPropertyMetadata>): IDashboardSerializationInfo;
}
