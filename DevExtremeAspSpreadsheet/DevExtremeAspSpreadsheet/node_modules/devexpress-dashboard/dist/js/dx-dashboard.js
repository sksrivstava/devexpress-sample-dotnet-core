/**
* DevExpress Dashboard (dx-dashboard.js)
* Version:  20.1.6
* Build date: Jul 17, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 676);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = ko;

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress };

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = jQuery;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = __webpack_require__(381);
var data_1 = __webpack_require__(236);
var $ = __webpack_require__(2);
var special_values_1 = __webpack_require__(39);
exports.type = {
    isDefined: function (object) {
        return null !== object && void 0 !== object;
    },
    isFunction: function (object) {
        return 'function' === typeof object;
    },
    isString: function (object) {
        return 'string' === typeof object;
    },
    isNumeric: function (object) {
        return 'number' === typeof object && isFinite(object) || !isNaN(object - parseFloat(object));
    },
    isBoolean: function (object) {
        return 'boolean' === typeof object;
    }
};
exports.KpiValueMode = {
    Measure: 'Measure',
    Delta: 'Delta'
}, exports.pivotArea = {
    column: 'column',
    row: 'row',
    data: 'data'
}, exports.gaugeViewType = {
    CircularFull: 'CircularFull',
    CircularHalf: 'CircularHalf',
    CircularQuarterRight: 'CircularQuarterRight',
    CircularQuarterLeft: 'CircularQuarterLeft',
    CircularThreeFourth: 'CircularThreeFourth',
    LinearHorizontal: 'LinearHorizontal',
    LinearVertical: 'LinearVertical'
}, exports.tooltipContainerSelector = '.dx-dashboard-container';
function toColor(numericColorValue) {
    var number = numericColorValue >>> 0;
    var b = number & 0xFF, g = (number & 0xFF00) >>> 8, r = (number & 0xFF0000) >>> 16, a = ((number & 0xFF000000) >>> 24) / 255;
    return this.getRGBColor(r, g, b, a);
}
exports.toColor = toColor;
function getRGBColor(r, g, b, a) {
    if (a && a < 1)
        return 'rgba(' + [r, g, b, a].join(',') + ')';
    return 'rgb(' + [r, g, b].join(',') + ')';
}
exports.getRGBColor = getRGBColor;
function allowSelectValue(values) {
    var result = true;
    if (values) {
        $.each(values, function (_, value) {
            result = result && (value !== special_values_1.specialValues.othersValueGuid) &&
                (value !== special_values_1.specialValues.errorValueGuid);
        });
    }
    return result;
}
exports.allowSelectValue = allowSelectValue;
function isVulnerable(value) {
    if (!value)
        return false;
    var re = new RegExp('^\s*(data|javascript)\s*:\s*');
    return !!value.match(re);
}
exports.isVulnerable = isVulnerable;
function encodeHtml(str) {
    return String(str)
        .replace(/&/g, '&amp;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#39;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;');
}
exports.encodeHtml = encodeHtml;
function decodeHtml(value) {
    return String(value)
        .replace(/&quot;/g, '"')
        .replace(/&#39;/g, "'")
        .replace(/&lt;/g, '<')
        .replace(/&gt;/g, '>')
        .replace(/&amp;/g, '&');
}
exports.decodeHtml = decodeHtml;
function moveContent(source, dest, clearSource) {
    $(source).contents().appendTo($(dest));
    if (clearSource) {
        source.innerHTML = '';
    }
}
exports.moveContent = moveContent;
function arrayContains(container, part) {
    var currentValueIndex = -1;
    if (!!container) {
        $.each(container, function (index, item) {
            if (arrayEquals(part, item)) {
                currentValueIndex = index;
                return false;
            }
        });
    }
    return currentValueIndex >= 0;
}
exports.arrayContains = arrayContains;
function arrayEquals(array1, array2) {
    if (!array1 && !array2)
        return true;
    if (!array1 || !array2)
        return false;
    if (Array.isArray(array1)) {
        if (array1.length !== array2.length)
            return false;
        for (var key in array1) {
            if (!arrayEquals(array1[key], array2[key]))
                return false;
        }
    }
    else {
        return data_1.toComparable(array1, true) === data_1.toComparable(array2, true);
    }
    return true;
}
exports.arrayEquals = arrayEquals;
function checkValuesAreEqual(value1, value2, nullValuesEquals, emptyArraysEquals) {
    if (nullValuesEquals === void 0) { nullValuesEquals = false; }
    if (emptyArraysEquals === void 0) { emptyArraysEquals = false; }
    if (!nullValuesEquals && (value1 == null || value2 == null)) {
        return false;
    }
    var list1 = Array.isArray(value1) ? value1 : [value1], list2 = Array.isArray(value2) ? value2 : [value2];
    if (list1.length !== list2.length || (list1.length === 0 && !emptyArraysEquals)) {
        return false;
    }
    else {
        for (var i = 0; i < list1.length; i++) {
            if (data_1.toComparable(list1[i], true) !== data_1.toComparable(list2[i], true))
                return false;
        }
        return true;
    }
}
exports.checkValuesAreEqual = checkValuesAreEqual;
function checkTuplesAreEqual(tuple1, tuple2) {
    if (!tuple1 || !tuple2) {
        return false;
    }
    var containsCount = 0;
    $.each(tuple1, function (_, tuple1AxisValue) {
        var value = $.grep(tuple2, function (tuple2AxisValue) {
            return tuple2AxisValue.AxisName == tuple1AxisValue.AxisName;
        })[0].Value;
        if (checkValuesAreEqual(tuple1AxisValue.Value, value)) {
            containsCount = containsCount + 1;
        }
    });
    return containsCount == tuple1.length;
}
exports.checkTuplesAreEqual = checkTuplesAreEqual;
function checkArrayContainsTuple(array, tuple) {
    var that = this, contains, currentIndex;
    $.each(array, function (index, aTuple) {
        contains = that.checkTuplesAreEqual(aTuple, tuple);
        if (contains)
            currentIndex = index;
        return !contains;
    });
    return currentIndex;
}
exports.checkArrayContainsTuple = checkArrayContainsTuple;
function getAxisPointValue(tuple, axisName) {
    var axisPoints = $.grep(tuple, function (axisValue) {
        return axisValue.AxisName == axisName;
    });
    return axisPoints.length > 0 ? axisPoints[0].Value : null;
}
exports.getAxisPointValue = getAxisPointValue;
function getTagValue(tag) {
    var axisPoint = tag.axisPoint;
    return axisPoint ? axisPoint.getUniquePath() : tag;
}
exports.getTagValue = getTagValue;
function getValueIndex(matrix, vector) {
    if (matrix && vector) {
        for (var i = 0; i < matrix.length; i++) {
            if (this.checkValuesAreEqual(matrix[i], vector)) {
                return i;
            }
        }
    }
    return -1;
}
exports.getValueIndex = getValueIndex;
function treeWalker(rootNode, childrenFunc) {
    return {
        walk: function (func) {
            this._walkInternal(rootNode, null, func, function () { return true; });
        },
        walkLeaf: function (func) {
            this._walkInternal(rootNode, null, func, function (node, parent, isLeaf) { return isLeaf; });
        },
        _walkInternal: function (node, parent, func, callPredicate) {
            var that = this, children = childrenFunc(node), isLeaf = !children || children.length === 0;
            if (callPredicate(node, parent, isLeaf)) {
                func(node, parent, isLeaf);
            }
            if (!isLeaf) {
                $.each(children, function (i, branch) {
                    that._walkInternal(branch, node, func, callPredicate);
                });
            }
        }
    };
}
exports.treeWalker = treeWalker;
function getParentClasses($obj) {
    var parents = [$obj.attr('class')];
    $.each($obj.parents(), function (_, parent) {
        var name = $(parent).attr('class');
        if (name)
            parents.push(name);
    });
    return parents.reverse();
}
exports.getParentClasses = getParentClasses;
function wrapHash(valuesArray) {
    var hash = {};
    if (valuesArray) {
        $.each(valuesArray, function (_, value) {
            hash[value] = true;
        });
    }
    return hash;
}
exports.wrapHash = wrapHash;
function areNotOrderedListsEqual(list1, list2) {
    if (list1.length != list2.length)
        return false;
    list1 = list1.slice();
    list2 = list2.slice();
    list1.sort();
    list2.sort();
    for (var i = 0; i < list1.length; i++) {
        if (list1[i] !== list2[i])
            return false;
    }
    return true;
}
exports.areNotOrderedListsEqual = areNotOrderedListsEqual;
function pxToNumber(px) {
    var result = 0;
    if (px != null && px != '') {
        try {
            var indexOfPx = px.indexOf('px');
            if (indexOfPx > -1)
                result = parseInt(px.substr(0, indexOfPx));
        }
        catch (e) { }
    }
    return result;
}
exports.pxToNumber = pxToNumber;
function debounce(func, wait) {
    var timeout;
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var that = this;
        clearTimeout(timeout);
        timeout = setTimeout(function () {
            clearTimeout(timeout);
            timeout = null;
            func.apply(that, args);
        }, wait);
    };
}
exports.debounce = debounce;
function asyncDebounce(func, action) {
    var _this = this;
    var actualPromise;
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var that = _this;
        var promise = func.call.apply(func, [that].concat(args));
        actualPromise = promise;
        promise.done(function () {
            var actionArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                actionArgs[_i] = arguments[_i];
            }
            if (promise === actualPromise) {
                action.apply(that, actionArgs);
            }
        });
    };
}
exports.asyncDebounce = asyncDebounce;
function containsInIndex(array, value, index, compare) {
    return index >= 0 && findIndex(array, function (cur) { return compare(value, cur); }) === index;
}
function distinct(array, compare) {
    return array.filter(function (value, index, arr) { return containsInIndex(arr, value, index, compare); });
}
exports.distinct = distinct;
function deepStrictEquals(x, y) {
    return strictEquals(x, y, function (obj1, obj2) {
        if (Array.isArray(obj1) || Array.isArray(obj2))
            throw new Error('Arrays comparison is not supported.');
        switch (typeof (obj1)) {
            case 'object':
                for (var p1 in obj1) {
                    if (obj1.hasOwnProperty(p1) !== obj2.hasOwnProperty(p1))
                        return false;
                    if (!deepStrictEquals(obj1[p1], obj2[p1]))
                        return false;
                }
                for (var p2 in obj2)
                    if (!obj1.hasOwnProperty(p2))
                        return false;
                break;
            case 'number':
            case 'boolean':
            case 'string':
            case 'bigint':
            case 'symbol':
                if (obj1 !== obj2)
                    return false;
                break;
            default:
                throw new Error('The object type ' + typeof (obj1) + ' is not supported in comparison.');
        }
        return true;
    });
}
exports.deepStrictEquals = deepStrictEquals;
function strictEquals(x, y, equalsCore) {
    if (x === y)
        return true;
    if (!exports.type.isDefined(x) || !exports.type.isDefined(y))
        return false;
    if (typeof (x) !== typeof (y))
        return false;
    return equalsCore(x, y);
}
exports.strictEquals = strictEquals;
exports.$unwrap = function (element) {
    if (element.jquery || element.dxRenderer) {
        return element[0];
    }
    else {
        return element;
    }
};
exports.$wrap = function (element) { return $(element); };
exports.wrapPublicElement = function (element) { return (config_1.default().useJQuery ? exports.$wrap(element) : element); };
exports.extend = function (target, source1) {
    var sources = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        sources[_i - 2] = arguments[_i];
    }
    return $.extend.apply($, [target, source1].concat(sources));
};
exports.deepExtend = function (target) {
    var sources = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        sources[_i - 1] = arguments[_i];
    }
    return $.extend.apply($, [true, target].concat(sources));
};
exports.isPlainObject = function (object) { return $.isPlainObject(object); };
exports.getWidth = function (element) { return $(element).width(); };
exports.getHeight = function (element) { return $(element).height(); };
exports.isVisible = function (element) { return $(element).is(':visible'); };
exports.closest = function (element, css) {
    var node = element;
    var matches = node.matches || node.matchesSelector || node.webkitMatchesSelector || node.mozMatchesSelector || node.msMatchesSelector || node.oMatchesSelector;
    while (node) {
        if (matches.apply(node, [css]))
            return node;
        node = closestParentElement(node);
    }
    return null;
};
var closestParentElement = function (node) {
    while (node && !node.parentElement) {
        node = node.parentNode;
    }
    return node ? node.parentElement : null;
};
exports.createJQueryCallbacks = function () { return $.Callbacks(); };
var LocalStorageHelper = (function () {
    function LocalStorageHelper() {
    }
    LocalStorageHelper._getLocalStorage = function () {
        try {
            if (window.localStorage)
                return window.localStorage;
        }
        catch (_) { }
        return undefined;
    };
    LocalStorageHelper.getItem = function (key, defaultValue) {
        if (defaultValue === void 0) { defaultValue = null; }
        var localStorage = LocalStorageHelper._getLocalStorage();
        if (localStorage) {
            return localStorage.getItem(key);
        }
        return defaultValue;
    };
    LocalStorageHelper.setItem = function (key, value) {
        var localStorage = LocalStorageHelper._getLocalStorage();
        if (localStorage) {
            return localStorage.setItem(key, value);
        }
    };
    return LocalStorageHelper;
}());
exports.LocalStorageHelper = LocalStorageHelper;
function findIndex(array, predicate) {
    for (var i = 0; i < array.length; i++) {
        if (predicate(array[i]))
            return i;
    }
    return -1;
}
exports.findIndex = findIndex;
function findLastIndex(array, predicate) {
    for (var i = array.length - 1; i >= 0; --i) {
        if (predicate(array[i]))
            return i;
    }
    return -1;
}
exports.findLastIndex = findLastIndex;
function createSvgIconElement(iconId) {
    var svgNS = 'http://www.w3.org/2000/svg';
    var xlinkNS = 'http://www.w3.org/1999/xlink';
    var useElement = document.createElementNS(svgNS, 'use');
    useElement.setAttributeNS(xlinkNS, 'xlink:href', '#' + iconId);
    var template = document.createElementNS(svgNS, 'svg');
    template.appendChild(useElement);
    return template;
}
exports.createSvgIconElement = createSvgIconElement;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var _date_utils_1 = __webpack_require__(41);
exports.NotSupportedProperty = 'NotSupportedProperty';
function testCast() {
    var a = { propertyName: '123' };
    var b = a;
    return b;
}
var PropertyCategory;
(function (PropertyCategory) {
    PropertyCategory[PropertyCategory["ClientState"] = 0] = "ClientState";
    PropertyCategory[PropertyCategory["Data"] = 1] = "Data";
    PropertyCategory[PropertyCategory["Interactivity"] = 2] = "Interactivity";
    PropertyCategory[PropertyCategory["ViewModel"] = 3] = "ViewModel";
    PropertyCategory[PropertyCategory["Map"] = 4] = "Map";
    PropertyCategory[PropertyCategory["Initialize"] = 5] = "Initialize";
    PropertyCategory[PropertyCategory["Coloring"] = 6] = "Coloring";
    PropertyCategory[PropertyCategory["NoUpdate"] = 7] = "NoUpdate";
    PropertyCategory[PropertyCategory["NoUpdateByObservableValue"] = 8] = "NoUpdateByObservableValue";
})(PropertyCategory = exports.PropertyCategory || (exports.PropertyCategory = {}));
function parseBool(value) {
    return dx_analytics_core_1.default.Analytics.Utils.parseBool(value);
}
exports.parseBool = parseBool;
function floatFromModel(value) {
    return ko.observable(parseFloat(value));
}
exports.floatFromModel = floatFromModel;
function fromStringToDate(val) {
    return ko.observable(_date_utils_1.toUtcDate(val));
}
exports.fromStringToDate = fromStringToDate;
function fromDateToString(date) {
    return _date_utils_1.fromUtcDateToString(date);
}
exports.fromDateToString = fromDateToString;
function nullableFloatToModel(value) {
    if (!isNaN(value))
        return JSON.stringify(value);
    return {};
}
exports.nullableFloatToModel = nullableFloatToModel;
exports.integerValidationRule = {
    type: 'custom',
    validationCallback: function (e) { return Math.abs(Math.round(e.value) - e.value) === 0 || isNaN(e.value); }
};
exports.itemType = { propertyName: 'itemType', modelName: '@ItemType', defaultVal: '' };
exports.componentName = { propertyName: 'componentName', modelName: '@ComponentName', displayName: 'DashboardWebStringId.Dashboard.ComponentName', simpleFormAdapterItem: 'textBoxEditor' };
exports.url = { propertyName: 'url', modelName: '@RequestUrl' };
exports.name = { propertyName: 'name', modelName: '@Name', displayName: 'DashboardWebStringId.Options.Caption', simpleFormAdapterItem: 'textBoxEditor' };
exports.name_ViewModel = { propertyName: 'name', modelName: '@Name', displayName: 'DashboardWebStringId.Options.Caption', simpleFormAdapterItem: 'textBoxEditor', category: PropertyCategory.ViewModel };
exports.nameTag = { propertyName: 'name', modelName: 'Name' };
exports.dataMember = { propertyName: 'dataMember', modelName: '@DataMember', displayName: 'DashboardStringId.DataSourceDataMember', simpleFormAdapterItem: 'textBoxEditor' };
exports.filter = { propertyName: 'filter', modelName: 'Filter' };
exports.contentArrangementMode = {
    propertyName: 'contentArrangementMode', modelName: '@ContentArrangementMode', displayName: 'DashboardWebStringId.Cards.ArrangementMode', defaultVal: 'Auto', simpleFormAdapterItem: 'listEditor', values: {
        'Auto': 'DashboardWebStringId.Cards.ArrangementMode.Auto',
        'FixedRowCount': 'DashboardWebStringId.Cards.ArrangementMode.FixedRows',
        'FixedColumnCount': 'DashboardWebStringId.Cards.ArrangementMode.FixedColumns'
    }
};
exports.contentLineCount = {
    propertyName: 'contentLineCount',
    modelName: '@ContentLineCount',
    displayName: 'DashboardWebStringId.Cards.LineCount',
    defaultVal: 3,
    simpleFormAdapterItem: 'numberBoxEditor',
    from: floatFromModel,
    editorOptions: { min: 1 },
    validationRules: [exports.integerValidationRule]
};
exports.BindingSectionTitles = {
    Arguments: 'DashboardStringId.DescriptionArguments',
    SingleArgument: 'DashboardWebStringId.Binding.Argument',
    SeriesDimension: 'DashboardStringId.DescriptionSeries'
};
exports.columnsPropertyName = '__columns';
exports.rowsPropertyName = '__rows';
exports.argumentsPropertyName = '__arguments';
exports.valuesPropertyName = '__values';
exports.argumentPropertyName = '__argument';
exports.valuePropertyName = '__value';
exports.actualValuePropertyName = '__actualValue';
exports.targetValuePropertyName = '__targetValue';
exports.sparklineArgumentPropertyName = '__sparklineArgument';
exports.weightPropertyName = '__weight';
exports.colorPropertyName = '__color';


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var SerializableModel = (function () {
    function SerializableModel(model, serializer, info) {
        serializer = serializer || new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer();
        var prevGetInfo = this.getInfo;
        if (info !== undefined)
            this.getInfo = undefined;
        serializer.deserialize(this, model || {}, info);
        if (info !== undefined)
            this.getInfo = prevGetInfo;
    }
    return SerializableModel;
}());
exports.SerializableModel = SerializableModel;
var TypedSerializableModel = (function (_super) {
    __extends(TypedSerializableModel, _super);
    function TypedSerializableModel(model, serializer, info) {
        var _this = _super.call(this, model, serializer, info) || this;
        !_this.itemType() && _this.itemType(_this._getDefaultItemType());
        return _this;
    }
    TypedSerializableModel.prototype._getUniqueNamePrefix = function () {
        return this.itemType().charAt(0).toLowerCase() + this.itemType().slice(1);
    };
    return TypedSerializableModel;
}(SerializableModel));
exports.TypedSerializableModel = TypedSerializableModel;
exports.itemTypesMap = {};


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var string_1 = __webpack_require__(30);
exports.defaultLocalization = {
    'DashboardStringId.ActionClearMasterFilter': 'Clear Master Filter',
    'DashboardStringId.ActionClearSelection': 'Clear Selection',
    'DashboardStringId.ActionOtherValues': 'Values',
    'DashboardStringId.ActionDrillUp': 'Drill Up',
    'DashboardStringId.ActionExportTo': 'Export To',
    'DashboardStringId.ActionExportToPdf': 'Export To PDF',
    'DashboardStringId.ActionExportToImage': 'Export To Image',
    'DashboardStringId.ActionExportToExcel': 'Export To Excel',
    'DashboardStringId.RangeFilterCustomDateTimePeriod': 'Custom Period',
    'DashboardStringId.ActionExportTemplate': '{0} - {1}',
    'DashboardStringId.ActionAllowMultiselection': 'Multi-Select',
    'DashboardStringId.DashboardNullValue': ' ',
    'DashboardStringId.TopNOthersValue': 'Others',
    'DashboardStringId.DashboardErrorValue': 'Error',
    'DashboardStringId.DateTimeQuarterFormat': 'Q{0}',
    'DashboardStringId.MessageLoading': 'Loading...',
    'DashboardStringId.ParametersFormCaption': 'Dashboard Parameters',
    'DashboardStringId.ParametersSelectorText': 'Select...',
    'DashboardStringId.ParametersFormAllowNullColumnCaption': 'Pass Null',
    'DashboardStringId.ParametersFormValueColumnCaption': 'Value',
    'DashboardStringId.ParametersFormNameColumnCaption': 'Parameter Name',
    'DashboardStringId.ButtonOK': 'OK',
    'DashboardStringId.ButtonCancel': 'Cancel',
    'DashboardStringId.SelectDate': 'Select date',
    'DashboardStringId.ButtonReset': 'Reset',
    'DashboardStringId.ButtonSubmit': 'Submit',
    'DashboardStringId.ButtonApply': 'Apply',
    'DashboardStringId.ButtonExport': 'Export',
    'DashboardStringId.GridResetColumnWidths': 'Reset column widths',
    'DashboardStringId.GridSortAscending': 'Sort Ascending',
    'DashboardStringId.GridSortDescending': 'Sort Descending',
    'DashboardStringId.GridClearSorting': 'Clear Sorting',
    'DashboardStringId.PivotGridTotal': '{0} Total',
    'DashboardStringId.PivotGridGrandTotal': 'Grand Total',
    'DashboardStringId.ChartTotalValue': 'Total',
    'DashboardStringId.PageLayout': 'Page Layout',
    'DashboardStringId.PageLayoutAuto': 'Auto',
    'DashboardStringId.PageLayoutPortrait': 'Portrait',
    'DashboardStringId.PageLayoutLandscape': 'Landscape',
    'DashboardStringId.PaperKind': 'Size',
    'DashboardStringId.PaperKindLetter': 'Letter',
    'DashboardStringId.PaperKindLegal': 'Legal',
    'DashboardStringId.PaperKindExecutive': 'Executive',
    'DashboardStringId.PaperKindA5': 'A5',
    'DashboardStringId.PaperKindA4': 'A4',
    'DashboardStringId.PaperKindA3': 'A3',
    'DashboardStringId.ScaleMode': 'Scale Mode',
    'DashboardStringId.ScaleModeNone': 'None',
    'DashboardStringId.ScaleModeUseScaleFactor': 'Use Scale Factor',
    'DashboardStringId.ScaleModeAutoFitToPagesWidth': 'Auto Fit to Pages Width',
    'DashboardStringId.AutoFitPageCount': 'Auto Fit Page Count',
    'DashboardStringId.ScaleFactor': 'Scale Factor',
    'DashboardStringId.PrintHeadersOnEveryPage': 'Print Headers on Every Page',
    'DashboardStringId.FitToPageWidth': 'Fit to Page Width',
    'DashboardStringId.SizeMode': 'Size Mode',
    'DashboardStringId.SizeModeNone': 'None',
    'DashboardStringId.SizeModeStretch': 'Stretch',
    'DashboardStringId.SizeModeZoom': 'Zoom',
    'DashboardStringId.AutoArrangeContent': 'Auto Arrange Content',
    'DashboardStringId.ImageFormat': 'Image Format',
    'DashboardStringId.ExcelFormat': 'ExcelFormat',
    'DashboardStringId.CsvValueSeparator': 'Separator',
    'DashboardStringId.ExportFilters': 'Export Filters',
    'DashboardStringId.ExportParameters': 'Export Parameters',
    'DashboardStringId.DashboardStatePosition': 'Dashboard State',
    'DashboardStringId.Resolution': 'Resolution (dpi)',
    'DashboardStringId.ShowTitle': 'Show Title',
    'DashboardStringId.Title': 'Title',
    'DashboardStringId.FileName': 'File Name',
    'DashboardStringId.FilterStatePresentationAfter': 'Below',
    'DashboardStringId.FilterStatePresentationAfterAndSplitPage': 'Separate Page',
    'DashboardStringId.FilterStatePresentationSplitSheet': 'Separate Sheet',
    'DashboardStringId.MessageCustomItemIsNotSupported': 'The custom item is not supported by this control.',
    'DashboardStringId.MessageGridHasNoData': 'The grid has no data.',
    'DashboardStringId.MessagePivotHasNoData': 'The pivot has no data.',
    'DashboardStringId.SparklineTooltipStartValue': 'Start:',
    'DashboardStringId.SparklineTooltipEndValue': 'End:',
    'DashboardStringId.SparklineTooltipMinValue': 'Min:',
    'DashboardStringId.SparklineTooltipMaxValue': 'Max:',
    'DashboardStringId.OpenCaption': 'Open',
    'DashboardStringId.HighCaption': 'High',
    'DashboardStringId.LowCaption': 'Low',
    'DashboardStringId.CloseCaption': 'Close',
    'DashboardStringId.InitialExtent': 'Initial Extent',
    'DashboardStringId.FilterElementShowAllItem': '(All)',
    'DashboardStringId.NumericFormatUnitSymbolThousands': 'K',
    'DashboardStringId.NumericFormatUnitSymbolMillions': 'M',
    'DashboardStringId.NumericFormatUnitSymbolBillions': 'B',
    'DashboardStringId.ActionSelectDateTimePeriod': 'Select Date Time Period',
    'DashboardStringId.RangeFilterSelectRange': 'Select Range',
    'DashboardStringId.FilterElementCheckedComboBoxNoDataCaption': '(none)',
    'DashboardStringId.FilterElementRadioComboBoxNoDataCaption': 'Select...',
    'DashboardStringId.FilterElementNoDataToDisplay': 'No data to display',
    'DashboardStringId.RangeFilterSelectRangeFromCaption': 'From:',
    'DashboardStringId.RangeFilterSelectRangeToCaption': 'To:',
    'DashboardWebStringId.DashboardParameters': 'Parameters',
    'DashboardStringId.DataSourceDataMember': 'Data Member',
    'DashboardStringId.DescriptionMeasures': 'Measures',
    'DashboardWebStringId.TextBoxFormatText': 'Format',
    'DashboardStringId.NumericFormatUnitCaption': 'Unit',
    'DashboardWebStringId.SummaryType': 'Summary Type',
    'DashboardStringId.CalculationTypeExpression': 'Expression',
    'DevExpressWebStringId.CalculatedFieldDataType': 'DataType',
    'DashboardStringId.ValueCaption': 'Value',
    'DashboardStringId.Value1Caption': 'Value 1',
    'DashboardStringId.Value2Caption': 'Value 2',
    'DashboardStringId.CommandFormatRuleTopBottom': 'Top/Bottom',
    'DashboardStringId.CommandFormatRuleAboveBelowAverage': 'Average',
    'DashboardStringId.CommandFormatRuleBar': 'Bar',
    'DashboardStringId.CommandFormatRuleColorRangeBar': 'Color Range Bar',
    'DashboardStringId.CommandFormatRuleGradientRangeBar': 'Bar Gradient Ranges',
    'DashboardStringId.FormatRuleStyleAppearance': 'Appearance',
    'DashboardStringId.FormatRuleStyleIcons': 'Icons',
    'DashboardStringId.FormatRuleNegativeStyle': 'NegativeStyleSettings',
    'DashboardStringId.CommandFormatRuleExpression': 'Expression',
    'DashboardWebStringId.TopNMode': 'Mode',
    'DashboardStringId.CommandFormatRuleRangeSet': 'RangeSet',
    'DashboardStringId.CommandFormatRuleValue': 'Value',
    'DashboardStringId.CommandFormatRuleDateOccurring': 'A Date Occurring',
    'DashboardWebStringId.ConditionalFormatting.Appearance.BackColor': 'BackColor',
    'DashboardWebStringId.ConditionalFormatting.Appearance.ForeColor': 'ForeColor',
    'DashboardStringId.DescriptionBoundImageAttribute': 'Attribute',
    'DashboardWebStringId.ShowCaptionText': 'Show Caption',
    'DashboardWebStringId.DisplayItemAsPage': 'Display Item as Page',
    'DashboardStringId.DefaultNameItemGroup': 'Group',
    'DashboardStringId.DefaultNameTabContainerItem': 'Tab Container',
    'DashboardStringId.DefaultDataSourceName': 'Data Source',
    'DashboardWebStringId.CrossDataSourceFiltering': 'Cross-Data-Source Filtering',
    'DashboardStringId.RangeFilterCalculationAlongSeries': 'Series',
    'DashboardStringId.RangeFilterCalculationAlongArgument': 'Argument',
    'DashboardStringId.DescriptionItemSeries': 'Series',
    'DashboardStringId.DescriptionSeries': 'Series',
    'DashboardWebStringId.Chart.SeriesType': 'Series Type',
    'DashboardStringId.DescriptionDimensions': 'Dimensions',
    'DashboardWebStringId.TreeView.AutoExpand': 'AutoExpand',
    'DashboardWebStringId.ConditionalFormatting.ConditionMinimum': 'Minimum',
    'DashboardWebStringId.ConditionalFormatting.ConditionMaximum': 'Maximum',
    'DashboardStringId.DescriptionItemDimension': 'Dimension',
    'DashboardStringId.DescriptionItemMeasure': 'Measure',
    'DashboardWebStringId.Grid.MergeCells': 'Merge Cells',
    'DashboardWebStringId.Grid.ColumnWidthMode': 'Column Width Mode',
    'DashboardWebStringId.Grid.BandedRows': 'Banded Rows',
    'DashboardWebStringId.Grid.VerticalLines': 'Vertical Lines',
    'DashboardWebStringId.Grid.HorizontalLines': 'Horizontal Lines',
    'DashboardWebStringId.Grid.ColumnHeaders': 'Column Headers',
    'DashboardWebStringId.Grid.WordWrap': 'Word Wrap',
    'DashboardStringId.ActualValueCaption': 'Actual',
    'DashboardStringId.TargetValueCaption': 'Target',
    'DashboardStringId.UriPatternCaption': 'Uri Pattern',
    'DashboardStringId.UriCaption': 'Uri',
    'DashboardStringId.DisplayValueCaption': 'Display Value',
    'DashboardStringId.WeightCaption': 'Weight',
    'DashboardStringId.DescriptionItemColor': 'Color',
    'DashboardStringId.Latitude': 'Latitude',
    'DashboardStringId.Longitude': 'Longitude',
    'DashboardWebStringId.GeoPointMapClusterization': 'Enable Clustering',
    'DashboardWebStringId.MapLockNavigation': 'Navigation',
    'DashboardWebStringId.WeightedLegendGalleryGroup': 'Position',
    'DashboardStringId.DescriptionItemArgument': 'Argument',
    'DashboardWebStringId.PieMapIsWeighted': 'Weighted Pies',
    'DashboardWebStringId.InteractivityOptions.IgnoreMasterFilters': 'Ignore Master Filters',
    'DashboardWebStringId.InteractivityOptions.DrillDown': 'Drill Down',
    'DashboardWebStringId.Pie.ShowCaptions': 'Show Pie Captions',
    'DashboardStringId.DescriptionColumns': 'Columns',
    'DashboardStringId.DescriptionRows': 'Rows',
    'DashboardStringId.DescriptionValues': 'Values',
    'DashboardStringId.DescriptionArguments': 'Arguments',
    'DashboardStringId.TextGroupIntervalAlphabetical': 'Alphabetical',
    'DashboardStringId.ActionMaximizeDashboardItem': 'Maximize',
    'DashboardStringId.ActionRestoreDashboardItem': 'Restore Down',
    'DevExpress.DashboardCommon.DynamicListLookUpSettings.DataSource': 'Data Source',
    'DevExpress.DashboardCommon.DynamicListLookUpSettings.DataMember': 'Data Member',
    'DevExpress.DashboardCommon.DynamicListLookUpSettings.ValueMember': 'Value Member',
    'DevExpress.DashboardCommon.DynamicListLookUpSettings.DisplayMember': 'Display Member',
    'DevExpress.DashboardCommon.DynamicListLookUpSettings.SortOrder': 'Sort Order',
    'DevExpress.DashboardCommon.DashboardParameter.Visible': 'Visible',
    'DevExpress.DashboardCommon.DashboardParameter.Description': 'Description',
    'DevExpress.DashboardCommon.DashboardParameter.AllowMultiselect': 'Allow Multiselect',
    'DevExpress.DashboardCommon.DashboardParameter.AllowNull': 'Allow Null',
    'DevExpress.DashboardCommon.DashboardParameter.SelectAllValues': 'Select All Values',
    'DevExpress.DashboardCommon.StaticListLookUpSettings.Values': 'Values',
    'DevExpress.DashboardCommon.DimensionSortOrder.Ascending': 'Ascending',
    'DevExpress.DashboardCommon.DimensionSortOrder.Descending': 'Descending',
    'DevExpress.DashboardCommon.DimensionSortOrder.None': 'None',
    'DashboardWebStringId.AccordionTab.ScatterChartPointLabelOptions': 'Point Labels',
    'DashboardWebStringId.AccordionTab.ChoroplethMapShapeLabelsAttribute': 'Shape Labels',
    'DashboardStringId.CommandFormatRuleTopN': 'Top N',
    'DashboardWebStringId.Type': 'Type',
    'DashboardWebStringId.Grid.ColumnWidth': 'Column Width',
    'DashboardWebStringId.AccordionTab.ShowTotals': 'Totals',
    'DashboardWebStringId.AccordionTab.Layout': 'Layout',
    'DashboardWebStringId.AccordionTab.PivotInitialState': 'Initial State',
    'DashboardWebStringId.AccordionTab.ImageOptions': 'Options',
    'DashboardWebStringId.AccordionTab.Labels': 'Labels',
    'DashboardWebStringId.AccordionTab.MapLegend': 'Color Legend',
    'DashboardWebStringId.AccordionTab.WeightedLegend': 'Weighted Legend',
    'DashboardWebStringId.AccordionTab.Common': 'Common',
    'DashboardWebStringId.AccordionTab.ChartLegend': 'Legend',
    'DashboardWebStringId.Grid.AutoFitToContentsColumnWidthMode': 'AutoFit To Content',
    'DashboardWebStringId.Grid.AutoFitToGridColumnWidthMode': 'AutoFitToGrid',
    'DashboardWebStringId.Grid.ManualGridColumnWidthMode': 'Manual',
    'DashboardStringId.DateTimeIntervalYear': 'Year',
    'DashboardStringId.DateTimeIntervalQuarter': 'Quarter',
    'DashboardStringId.DateTimeIntervalMonth': 'Month',
    'DashboardStringId.DateTimeIntervalWeek': 'Week',
    'DashboardStringId.DateTimeIntervalDay': 'Day',
    'DashboardStringId.DateTimeIntervalHour': 'Hour',
    'DashboardStringId.DateTimeIntervalMinute': 'Minute',
    'DashboardStringId.DateTimeIntervalSecond': 'Second',
    'DashboardStringId.DateTimeGroupIntervalYear': 'Year',
    'DashboardStringId.DateTimeGroupIntervalQuarter': 'Quarter',
    'DashboardStringId.DateTimeGroupIntervalMonth': 'Month',
    'DashboardStringId.DateTimeGroupIntervalDay': 'Day',
    'DashboardStringId.DateTimeGroupIntervalHour': 'Hour',
    'DashboardStringId.DateTimeGroupIntervalMinute': 'Minute',
    'DashboardStringId.DateTimeGroupIntervalSecond': 'Second',
    'DashboardStringId.DateTimeGroupIntervalDayOfYear': 'Day Of Year',
    'DashboardStringId.DateTimeGroupIntervalDayOfWeek': 'Day Of Week',
    'DashboardStringId.DateTimeGroupIntervalWeekOfYear': 'Week Of Year',
    'DashboardStringId.DateTimeGroupIntervalWeekOfMonth': 'Week Of Month',
    'DashboardStringId.DateTimeGroupIntervalMonthYear': 'Month-Year',
    'DashboardStringId.DateTimeGroupIntervalQuarterYear': 'Quarter-Year',
    'DashboardStringId.DateTimeGroupIntervalWeekYear': 'Week-Year',
    'DashboardStringId.DateTimeGroupIntervalDayMonthYear': 'Day-Month-Year',
    'DashboardStringId.DateTimeGroupIntervalDateHour': 'Date-Hour',
    'DashboardStringId.DateTimeGroupIntervalDateHourMinute': 'Date-Hour-Minute',
    'DashboardStringId.DateTimeGroupIntervalDateHourMinuteSecond': 'Date-Hour-Minute-Second',
    'DashboardStringId.DateTimeGroupIntervalExactDate': 'Exact Date',
    'DashboardStringId.GroupIntervalNone': 'No Grouping',
    'DashboardWebStringId.Treemap.StripedLayoutAlgorithm': 'Striped',
    'DashboardWebStringId.Treemap.SquarifiedLayoutAlgorithm': 'Squarified',
    'DashboardWebStringId.Treemap.SliceAndDiceLayoutAlgorithm': 'Slice and Dice',
    'DashboardWebStringId.Treemap.TileLabelsArgumentAndValue': 'Argument and Value',
    'DashboardWebStringId.Treemap.TileLabelsNone': 'None',
    'DashboardWebStringId.Treemap.TileLabelsValue': 'Value',
    'DashboardWebStringId.Treemap.TileLabelsArgument': 'Argument',
    'DashboardWebStringId.Treemap.TileTooltipsArgumentAndValue': 'Argument and Value',
    'DashboardWebStringId.Treemap.TileTooltipsArgument': 'Argument',
    'DashboardWebStringId.Treemap.TileTooltipsValue': 'Value',
    'DashboardWebStringId.Treemap.TileTooltipsNone': 'None',
    'DashboardWebStringId.Treemap.TopLeftToBottomRightLayoutDirection': 'Top Left To Bottom Right',
    'DashboardWebStringId.Treemap.TopRightToBottomLeftLayoutDirection': 'Top Right To Bottom Left',
    'DashboardWebStringId.Treemap.BottomLeftToTopRightLayoutDirection': 'Bottom Left To Top Right',
    'DashboardWebStringId.Treemap.BottomRightToTopLeftLayoutDirection': 'Bottom Right To Top Left',
    'DashboardWebStringId.Treemap.LayoutDirection': 'Layout Direction',
    'DashboardWebStringId.Treemap.GroupLabelsNone': 'None',
    'DashboardWebStringId.Treemap.GroupLabelsArgument': 'Argument',
    'DashboardWebStringId.Treemap.GroupLabelsValue': 'Value',
    'DashboardWebStringId.Treemap.GroupLabelsArgumentAndValue': 'Argument and Value',
    'DashboardWebStringId.Treemap.GroupTooltipsNone': 'None',
    'DashboardWebStringId.Treemap.GroupTooltipsArgument': 'Argument',
    'DashboardWebStringId.Treemap.GroupTooltipsValue': 'Value',
    'DashboardWebStringId.Treemap.GroupTooltipsArgumentAndValue': 'Argument and Value',
    'DashboardStringId.RankOrderAscending': 'Ascending',
    'DashboardStringId.RankOrderDescending': 'Descending',
    'DashboardStringId.DateTimeFormatYearFormatDefaultCaption': 'Default',
    'DashboardStringId.DateTimeFormatYearFormatFullCaption': 'Full',
    'DashboardStringId.DateTimeFormatYearFormatAbbreviatedCaption': 'Abbreviated',
    'DashboardStringId.DateTimeFormatQuarterFormatDefaultCaption': 'Default',
    'DashboardStringId.DateTimeFormatQuarterFormatNumericCaption': 'Numeric',
    'DashboardStringId.DateTimeFormatQuarterFormatFullCaption': 'Full',
    'DashboardStringId.DateTimeFormatMonthFormatDefaultCaption': 'Default',
    'DashboardStringId.DateTimeFormatMonthFormatFullCaption': 'Full',
    'DashboardStringId.DateTimeFormatMonthFormatAbbreviatedCaption': 'Abbreviated',
    'DashboardStringId.DateTimeFormatMonthFormatNumericCaption': 'Numeric',
    'DashboardStringId.DateTimeFormatDayOfWeekFormatDefaultCaption': 'Default',
    'DashboardStringId.DateTimeFormatDayOfWeekFormatFullCaption': 'Full',
    'DashboardStringId.DateTimeFormatDayOfWeekFormatAbbreviatedCaption': 'Abbreviated',
    'DashboardStringId.DateTimeFormatDayOfWeekFormatNumericCaption': 'Numeric',
    'DashboardStringId.DateTimeFormatDateFormatDefaultCaption': 'Default',
    'DashboardStringId.DateTimeFormatDateFormatLongCaption': 'Long',
    'DashboardStringId.DateTimeFormatDateFormatShortCaption': 'Short',
    'DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption': 'Default',
    'DashboardStringId.DateTimeFormatDateTimeFormatLongCaption': 'Long',
    'DashboardStringId.DateTimeFormatDateTimeFormatShortCaption': 'Short',
    'DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption': 'TimeOnly',
    'DashboardStringId.ExactDateFormatYear': 'Year',
    'DashboardStringId.ExactDateFormatQuarter': 'Quarter',
    'DashboardStringId.ExactDateFormatMonth': 'Month',
    'DashboardStringId.ExactDateFormatDay': 'Day',
    'DashboardStringId.ExactDateFormatHour': 'Hour',
    'DashboardStringId.ExactDateFormatMinute': 'Minute',
    'DashboardStringId.ExactDateFormatSecond': 'Second',
    'DashboardWebStringId.FormatType': 'Format Type',
    'DashboardWebStringId.TopN.Top': 'Top',
    'DashboardWebStringId.TopN.Bottom': 'Bottom',
    'DashboardWebStringId.DimensionSortBy': 'Sort by',
    'DashboardStringId.NumericFormatUnitAutoCaption': 'Auto',
    'DashboardStringId.NumericFormatFormatTypeAutoCaption': 'Auto',
    'DashboardStringId.NumericFormatFormatTypeGeneralCaption': 'General',
    'DashboardStringId.NumericFormatFormatTypeNumberCaption': 'Number',
    'DashboardStringId.NumericFormatFormatTypeCurrencyCaption': 'Currency',
    'DashboardStringId.NumericFormatFormatTypeScientificCaption': 'Scientific',
    'DashboardStringId.NumericFormatFormatTypePercentCaption': 'Percent',
    'DashboardStringId.NumericFormatUnitOnesCaption': 'Ones',
    'DashboardStringId.NumericFormatUnitThousandsCaption': 'Thousands',
    'DashboardStringId.NumericFormatUnitMillionsCaption': 'Millions',
    'DashboardStringId.NumericFormatUnitBillionsCaption': 'Billions',
    'DashboardStringId.DeltaValueTypeActualValueCaption': 'Actual Value',
    'DashboardStringId.DeltaValueTypeAbsoluteVariationCaption': 'Absolute Variation',
    'DashboardStringId.DeltaValueTypePercentVariationCaption': 'Percent Variation',
    'DashboardStringId.DeltaValueTypePercentOfTargetCaption': 'Percent Of Target',
    'DashboardStringId.DeltaValueTypeTargetValueCaption': 'Target Value',
    'DashboardStringId.DeltaIndicationModeGreaterIsGoodCaption': 'Greater Is Good',
    'DashboardStringId.DeltaIndicationModeLessIsGoodCaption': 'Less Is Good',
    'DashboardStringId.DeltaIndicationModeWarningIfGreaterCaption': 'Warning If Greater',
    'DashboardStringId.DeltaIndicationModeWarningIfLessCaption': 'Warning If Less',
    'DashboardStringId.DeltaIndicationModeNoIndicationCaption': 'No Indication',
    'DashboardStringId.DeltaThresholdTypeAbsolute': 'Absolute',
    'DashboardStringId.DeltaThresholdTypePercent': 'Percent',
    'DashboardStringId.CommandDimensionGroupChildValues': 'Group Tiles',
    'DashboardStringId.SeriesTypeBar': 'Bar',
    'DashboardStringId.SeriesTypeStackedBar': 'Stacked Bar',
    'DashboardStringId.SeriesTypeFullStackedBar': 'Full Stacked Bar',
    'DashboardStringId.SeriesTypePoint': 'Point',
    'DashboardStringId.SeriesTypeLine': 'Line',
    'DashboardStringId.SeriesTypeStackedLine': 'Stacked Line',
    'DashboardStringId.SeriesTypeFullStackedLine': 'Full Stacked Line',
    'DashboardStringId.SeriesTypeStepLine': 'Step Line',
    'DashboardStringId.SeriesTypeSpline': 'Spline',
    'DashboardStringId.SeriesTypeArea': 'Area',
    'DashboardStringId.SeriesTypeStackedArea': 'Stacked Area',
    'DashboardStringId.SeriesTypeFullStackedArea': 'Full Stacked Area',
    'DashboardStringId.SeriesTypeStepArea': 'Step Area',
    'DashboardStringId.SeriesTypeSplineArea': 'Spline Area',
    'DashboardStringId.SeriesTypeStackedSplineArea': 'Stacked Spline Area',
    'DashboardStringId.SeriesTypeFullStackedSplineArea': 'Full Stacked Spline Area',
    'DashboardWebStringId.Chart.ShowLegend': 'Show Legend',
    'DashboardStringId.DefaultNameBoundImageItem': 'Bound Image',
    'DashboardStringId.DefaultNameImageItem': 'Image',
    'DashboardStringId.DefaultNameTextBoxItem': 'Text Box',
    'DashboardStringId.DefaultNameCardItem': 'Cards',
    'DashboardStringId.DefaultNameChartItem': 'Chart',
    'DashboardStringId.DefaultNameComboBoxItem': 'Combo Box',
    'DashboardStringId.DefaultNameListBoxItem': 'List Box',
    'DashboardStringId.DefaultNameTreeViewItem': 'Tree View',
    'DashboardStringId.DefaultNameGaugeItem': 'Gauges',
    'DashboardStringId.DefaultNameGridItem': 'Grid',
    'DashboardStringId.GridHyperlinkUriPatternErrorMessage': 'Invalid placeholder',
    'DashboardWebStringId.DefaultNameBubbleMapItem': 'Bubble Map',
    'DashboardWebStringId.DefaultNameChoroplethMapItem': 'Choropleth Map',
    'DashboardWebStringId.DefaultNameGeoPointMapItem': 'Geo Point Map',
    'DashboardWebStringId.DefaultNamePieMapItem': 'Pie Map',
    'DashboardStringId.DefaultNamePieItem': 'Pies',
    'DashboardStringId.DefaultNamePivotItem': 'Pivot',
    'DashboardStringId.DefaultNameRangeFilterItem': 'Range Filter',
    'DashboardStringId.DefaultNameScatterChartItem': 'Scatter Chart',
    'DashboardStringId.DefaultNameTreemapItem': 'Treemap',
    'DashboardStringId.DescriptionMaps': 'Maps',
    'DashboardStringId.EntireRangePeriodCaption': 'Entire Range',
    'DashboardStringId.CalculationTypePercentOfTotal': 'Percent Of Total',
    'DashboardStringId.CalculationTypeDifference': 'Difference',
    'DashboardStringId.CalculationTypePercentageDifference': 'Percentage Difference',
    'DashboardStringId.CalculationTypeRunningTotal': 'Running Total',
    'DashboardStringId.CalculationTypeMovingCalculation': 'Moving Calculation',
    'DashboardStringId.CalculationTypeRank': 'Rank',
    'DashboardStringId.ColorPaletteIndex': 'Palette Index',
    'DashboardStringId.DifferenceCalculationTargetPrevious': 'Previous',
    'DashboardStringId.DifferenceCalculationTargetNext': 'Next',
    'DashboardStringId.DifferenceCalculationTargetFirst': 'First',
    'DashboardStringId.DifferenceCalculationTargetLast': 'Last',
    'DashboardStringId.SummaryTypeCount': 'Count',
    'DashboardStringId.SummaryTypeSum': 'Sum',
    'DashboardStringId.SummaryTypeMin': 'Min',
    'DashboardStringId.SummaryTypeMax': 'Max',
    'DashboardStringId.SummaryTypeAverage': 'Average',
    'DashboardStringId.SummaryTypeStdDev': 'StdDev',
    'DashboardStringId.SummaryTypeStdDevp': 'StdDevp',
    'DashboardStringId.SummaryTypeVar': 'Var',
    'DashboardStringId.SummaryTypeVarp': 'Varp',
    'DashboardStringId.SummaryTypeCountDistinct': 'Count Distinct',
    'DashboardStringId.SummaryTypeMedian': 'Median',
    'DashboardStringId.SummaryTypeMode': 'Mode',
    'DashboardStringId.RankTypeUnique': 'Unique',
    'DashboardStringId.RankTypeCompetition': 'Competition',
    'DashboardStringId.RankTypeDense': 'Dense',
    'DashboardStringId.RankTypeModified': 'Modified',
    'DashboardStringId.RankTypePercentile': 'Percentile',
    'DashboardStringId.CardCalculationAlongCards': 'Cards',
    'DashboardStringId.CardCalculationAlongSparklineArgument': 'Sparkline Argument',
    'DashboardStringId.CardCalculationAlongCardsAndSparklineArgument': 'Cards And Sparkline Argument',
    'DashboardStringId.CardCalculationAlongSparklineArgumentAndCards': 'Sparkline Argument And Cards',
    'DashboardStringId.ChartCalculationAlongArguments': 'Arguments',
    'DashboardStringId.ChartCalculationAlongSeries': 'Series',
    'DashboardStringId.ChartCalculationAlongArgumentsAndSeries': 'Arguments And Series',
    'DashboardStringId.ChartCalculationAlongSeriesAndArguments': 'Series And Arguments',
    'DashboardStringId.GridCalculationAlongRows': 'Rows',
    'DashboardStringId.GridCalculationAlongSparklineArgument': 'Sparkline Argument',
    'DashboardStringId.GridCalculationAlongRowsAndSparklineArgument': 'Rows And Sparkline Argument',
    'DashboardStringId.GridCalculationAlongSparklineArgumentAndRows': 'Sparkline Argument And Rows',
    'DashboardStringId.PivotCalculationAlongColumns': 'Columns',
    'DashboardStringId.PivotCalculationAlongRows': 'Rows',
    'DashboardStringId.PivotCalculationAlongColumnsAndRows': 'Columns And Rows',
    'DashboardStringId.PivotCalculationAlongRowsAndColumns': 'Rows And Columns',
    'DashboardStringId.PivotCalculationAlongGroupsInColumns': 'Groups In Columns',
    'DashboardStringId.PivotCalculationAlongGroupsInRows': 'Groups In Rows',
    'DashboardStringId.PivotCalculationAlongGroupsInColumnsAndRows': 'Groups In Columns And Rows',
    'DashboardStringId.PivotCalculationAlongGroupsInRowsAndColumns': 'Groups In Rows And Columns',
    'DashboardStringId.PieCalculationAlongArguments': 'Arguments',
    'DashboardStringId.PieCalculationAlongSeries': 'Series',
    'DashboardStringId.PieCalculationAlongArgumentsAndSeries': 'Arguments / Series',
    'DashboardStringId.PieCalculationAlongSeriesAndArguments': 'Series / Arguments',
    'DashboardStringId.RangeFilterCalculationAlongArgumentAndSeries': 'Argument / Series',
    'DashboardStringId.RangeFilterCalculationAlongSeriesAndArgument': 'Series / Argument',
    'DashboardStringId.GaugeCalculationAlongGauges': 'Gauges',
    'DashboardStringId.ScatterCalculationAlongArguments': 'Arguments',
    'DashboardStringId.CalculationAlongSpecificDimensions': 'Specific...',
    'DashboardStringId.CalculatedFieldTypeString': 'String',
    'DashboardStringId.CalculatedFieldTypeLong': 'Integer',
    'DashboardStringId.CalculatedFieldTypeDecimal': 'Decimal',
    'DashboardStringId.CalculatedFieldTypeBoolean': 'Boolean',
    'DashboardStringId.CalculatedFieldTypeDateTime': 'DateTime',
    'DashboardStringId.CalculatedFieldTypeDouble': 'Double',
    'DashboardStringId.CalculatedFieldTypeAuto': 'Auto',
    'DashboardStringId.CalculatedFieldTypeObject': 'Object',
    'DashboardStringId.DefaultEFDataSourceName': 'EF Data Source',
    'DashboardStringId.DefaultExcelDataSourceName': 'Excel Data Source',
    'DashboardStringId.DefaultFileExtractDataSourceName': 'Extract Data Source',
    'DashboardStringId.DefaultObjectDataSourceName': 'Object Data Source',
    'DashboardStringId.DefaultOlapDataSourceName': 'OLAP Data Source',
    'DashboardStringId.DefaultSqlDataSourceName': 'SQL Data Source',
    'DashboardStringId.DefaultJsonDataSourceName': 'JSON Data Source',
    'DashboardStringId.DefaultXpoDataSourceName': 'XPO Data Source',
    'DashboardStringId.OlapRaggedHierarchyNoneItemCaption': '(None)',
    'DashboardStringId.FormatRuleApplyToColumn': 'Apply to column',
    'DashboardStringId.SeriesTypeSideBySideRangeBar': 'Side By Side Range Bar',
    'DashboardStringId.SeriesTypeRangeArea': 'Range Area',
    'DashboardStringId.SeriesTypeHighLowClose': 'High Low Close',
    'DashboardStringId.SeriesTypeCandleStick': 'Candle Stick',
    'DashboardStringId.SeriesTypeStock': 'Type Stock',
    'DashboardWebStringId.StyleSettings': 'Style',
    'DashboardStringId.ParametersFormCalendarTodayButton': 'Today',
    'DashboardStringId.TreemapLabelArgumentTemplate': '{0} - {1}',
    'DashboardStringId.TreemapLabelValueTemplate': '{0}: {1}',
    'DashboardStringId.SearchNullValuePrompt': 'Enter text to search...',
    'DashboardStringId.CustomItems': 'Custom Items',
    'DashboardStringId.FormatRuleAllowNegativeAxis': 'Allow negative axis',
    'DashboardStringId.FormatRuleDrawAxis': 'Draw axis',
    'DashboardStringId.FormatRuleShowBarOnly': 'Show bar only',
    'DashboardStringId.CommandFormatRuleBottomN': 'Bottom N',
    'DashboardStringId.FormatConditionAppearanceNone': 'None',
    'DashboardStringId.FormatConditionAppearanceCustom': 'Custom',
    'DashboardStringId.FormatConditionAppearancePaleRed': 'Pale Red',
    'DashboardStringId.FormatConditionAppearancePaleYellow': 'Pale Yellow',
    'DashboardStringId.FormatConditionAppearancePaleGreen': 'Pale Green',
    'DashboardStringId.FormatConditionAppearancePaleBlue': 'Pale Blue',
    'DashboardStringId.FormatConditionAppearancePalePurple': 'Pale Purple',
    'DashboardStringId.FormatConditionAppearancePaleCyan': 'Pale Cyan',
    'DashboardStringId.FormatConditionAppearancePaleOrange': 'Pale Orange',
    'DashboardStringId.FormatConditionAppearancePaleGray': 'Pale Gray',
    'DashboardStringId.FormatConditionAppearanceRed': 'Red',
    'DashboardStringId.FormatConditionAppearanceYellow': 'Yellow',
    'DashboardStringId.FormatConditionAppearanceGreen': 'Green',
    'DashboardStringId.FormatConditionAppearanceBlue': 'Blue',
    'DashboardStringId.FormatConditionAppearancePurple': 'Purple',
    'DashboardStringId.FormatConditionAppearanceCyan': 'Cyan',
    'DashboardStringId.FormatConditionAppearanceOrange': 'Orange',
    'DashboardStringId.FormatConditionAppearanceGray': 'Gray',
    'DashboardStringId.FormatConditionAppearanceGradientRed': 'Gradient Red',
    'DashboardStringId.FormatConditionAppearanceGradientYellow': 'Gradient Yellow',
    'DashboardStringId.FormatConditionAppearanceGradientGreen': 'Gradient Green',
    'DashboardStringId.FormatConditionAppearanceGradientBlue': 'Gradient Blue',
    'DashboardStringId.FormatConditionAppearanceGradientPurple': 'Gradient Purple',
    'DashboardStringId.FormatConditionAppearanceGradientCyan': 'Gradient Cyan',
    'DashboardStringId.FormatConditionAppearanceGradientOrange': 'Gradient Orange',
    'DashboardStringId.FormatConditionAppearanceGradientTransparent': 'Gradient Transparent',
    'DashboardStringId.FormatConditionAppearanceFontBold': 'Bold',
    'DashboardStringId.FormatConditionAppearanceFontItalic': 'Italic',
    'DashboardStringId.FormatConditionAppearanceFontUnderline': 'Underline',
    'DashboardStringId.FormatConditionAppearanceFontGrayed': 'Grayed',
    'DashboardStringId.FormatConditionAppearanceFontRed': 'Red',
    'DashboardStringId.FormatConditionAppearanceFontYellow': 'Yellow',
    'DashboardStringId.FormatConditionAppearanceFontGreen': 'Green',
    'DashboardStringId.FormatConditionAppearanceFontBlue': 'Blue',
    'DashboardStringId.IntersectionLevelModeFirst': 'First level',
    'DashboardStringId.IntersectionLevelModeLast': 'Last level',
    'DashboardStringId.IntersectionLevelModeAuto': '(Auto)',
    'DashboardStringId.IntersectionLevelModeAll': 'All levels',
    'DashboardStringId.IntersectionLevelModeSpecific': 'Specific level',
    'DashboardStringId.FormatRuleApplyToRow': 'Apply to row',
    'DashboardStringId.FormatRuleApplyTo': 'Apply to',
    'DashboardWebStringId.FilterItem.AllowEmptyFilter': 'Allow Empty Filter',
    'DashboardStringId.FormatConditionAppearanceFontStrikeout': 'Strikeout',
    'DashboardStringId.FormatConditionAutomaticValueType': 'Automatic',
    'DashboardStringId.FormatConditionNumberValueType': 'Number',
    'DashboardStringId.FormatConditionPercentValueType': 'Percent',
    'DashboardStringId.CommandFormatRuleRangeIcons': 'Range Icons',
    'DashboardStringId.CommandFormatRuleGreaterThan': 'Greater',
    'DashboardStringId.CommandFormatRuleGreaterThanOrEqualTo': 'Greater Or Equal',
    'DashboardStringId.CommandFormatRuleLessThan': 'Less',
    'DashboardStringId.CommandFormatRuleLessThanOrEqualTo': 'Less Or Equal',
    'DashboardStringId.CommandFormatRuleEqualTo': 'Equal',
    'DashboardStringId.CommandFormatRuleNotEqualTo': 'Not Equal',
    'DashboardStringId.CommandFormatRuleBetween': 'Between',
    'DashboardStringId.CommandFormatRuleNotBetween': 'Not Between',
    'DashboardStringId.CommandFormatRuleBetweenOrEqual': 'Between Or Equal',
    'DashboardStringId.CommandFormatRuleNotBetweenOrEqual': 'Not Between Or Equal',
    'DashboardStringId.CommandFormatRuleContains': 'Contains Text',
    'DashboardStringId.ColorAutoAssigned': 'Auto',
    'DashboardStringId.CalculationTypeNone': 'None',
    'DashboardStringId.UndoText': 'Undo',
    'DashboardStringId.RedoText': 'Redo',
    'DashboardStringId.DashboardCurrencyUseCurrentCurrency': 'Use client system settings',
    'DashboardStringId.CommandDimensionSortModeDisplayText': '(Display Text)',
    'DashboardStringId.CommandDimensionSortModeValue': '(Value)',
    'DashboardStringId.CommandDimensionSortModeID': '(ID)',
    'DashboardStringId.CommandDimensionSortModeKey': '(Key)',
    'DashboardWebStringId.Chart.AddPane': 'Add Pane',
    'DashboardStringId.MapShapeNoneAttribute': 'NONE',
    'DashboardStringId.DefaultPeriodName': 'Period',
    'DashboardStringId.CardLayoutTemplateStretchedCaption': 'Stretched',
    'DashboardStringId.CardLayoutTemplateCenteredCaption': 'Centered',
    'DashboardStringId.CardLayoutTemplateCompactCaption': 'Compact',
    'DashboardStringId.CardLayoutTemplateLightweightCaption': 'Lightweight',
    'DashboardStringId.CardLayoutTemplateCustomCaption': 'Custom',
    'DashboardStringId.CardLayoutTemplateNoneCaption': 'None',
    'DashboardStringId.CardRowDataElementTypeTitleCaption': 'Title',
    'DashboardStringId.CardRowDataElementTypeSubtitleCaption': 'Subtitle',
    'DashboardStringId.CardRowDataElementTypeActualValueCaption': 'Actual Value',
    'DashboardStringId.CardRowDataElementTypeTargetValueCaption': 'Target Value',
    'DashboardStringId.CardRowDataElementTypeAbsoluteVariationCaption': 'Absolute Variation',
    'DashboardStringId.CardRowDataElementTypePercentVariationCaption': 'Percent Variation',
    'DashboardStringId.CardRowDataElementTypePercentOfTargetCaption': 'Percent of Target',
    'DashboardStringId.CardRowDataElementTypeDimensionValueCaption': 'Dimension',
    'DashboardStringId.CardRowDataElementTypeCardNameCaption': 'Card Name',
    'DashboardStringId.CardRowDataElementTypeDeltaIndicatorCaption': 'Delta Indicator',
    'DashboardStringId.CardRowDataElementTypeSparklineCaption': 'Sparkline',
    'DashboardStringId.FormatRuleApplyToAllElements': 'All elements',
    'DashboardWebStringId.Pie.LabelPosition': 'Label Position',
    'DashboardWebStringId.Pie.LabelPositionOutside': 'Outside',
    'DashboardWebStringId.Pie.LabelPositionInside': 'Inside',
    'DashboardStringId.IncludeExportDashboardState': 'Include',
    'DashboardStringId.PointLabelContentTypeArgument': 'Argument',
    'DashboardStringId.PointLabelContentTypeSeriesName': 'Series Name',
    'DashboardStringId.PointLabelContentTypeValue': 'Value',
    'DashboardStringId.PointLabelContentTypePercent': 'Percent',
    'DashboardWebStringId.DashboardMenu': 'Dashboard Menu',
    'DashboardWebStringId.DashboardMenuNew': 'New...',
    'DashboardWebStringId.DashboardMenuOpen': 'Open...',
    'DashboardWebStringId.DashboardMenuSave': 'Save',
    'DashboardWebStringId.DashboardMenuCurrency': 'Currency',
    'DashboardWebStringId.DashboardMenuDataSources': 'Data Sources',
    'DashboardWebStringId.DashboardMenuColorScheme': 'Color Scheme',
    'DashboardWebStringId.DashboardMenuNewDashboardCreate': 'Create',
    'DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder': 'Enter a dashboard name',
    'DashboardWebStringId.Binding.DefaultEmptyPlaceholder': 'Set {0}',
    'DashboardWebStringId.Binding.DefaultSelectedPlaceholder': 'Configure {0}',
    'DashboardWebStringId.Binding.DataFiltering': 'Data & Filtering ',
    'DashboardWebStringId.Binding.Argument': 'Argument ',
    'DashboardWebStringId.Binding.Attribute': 'Attribute ',
    'DashboardWebStringId.Binding.Sparkline': 'Sparkline ',
    'DashboardWebStringId.Binding.Columns': 'Columns ',
    'DashboardWebStringId.Binding.TooltipDimensions': 'Tooltip Dimensions',
    'DashboardWebStringId.Binding.TooltipMeasures': 'Tooltip Measures',
    'DashboardWebStringId.Binding.HiddenDimensions': 'Hidden Dimensions',
    'DashboardWebStringId.Binding.HiddenMeasures': 'Hidden Measures',
    'DashboardWebStringId.Binding.AddDimension': 'Add Dimension',
    'DashboardWebStringId.Binding.AddMeasure': 'Add Measure',
    'DashboardWebStringId.Binding.AddColumn': 'Add Column',
    'DashboardWebStringId.Binding.AddRow': 'Add Row',
    'DashboardWebStringId.Binding.AddValue': 'Add Value',
    'DashboardWebStringId.Binding.AddSeries': 'Add Series',
    'DashboardWebStringId.Binding.SetLatitude': 'Set Latitude',
    'DashboardWebStringId.Binding.SetLongitude': 'Set Longitude',
    'DashboardWebStringId.Binding.SetArgument': 'Set Argument',
    'DashboardWebStringId.Binding.AddArgument': 'Add Argument',
    'DashboardWebStringId.Binding.SetWeight': 'Set Weight',
    'DashboardWebStringId.Binding.SetColor': 'Set Color',
    'DashboardWebStringId.Binding.SetAttribute': 'Set Attribute',
    'DashboardWebStringId.Binding.SetValue': 'Set Value',
    'DashboardWebStringId.Binding.XAxis': 'X - axis ',
    'DashboardWebStringId.Binding.YAxis': 'Y - axis ',
    'DashboardWebStringId.Binding.ConfigureDimension': 'Configure Dimension',
    'DashboardWebStringId.Binding.ConfigureMeasure': 'Configure Measure',
    'DashboardWebStringId.Binding.ConfigureSeries': 'Configure Series',
    'DashboardWebStringId.Binding.ConfigureArgument': 'Configure Argument',
    'DashboardWebStringId.Binding.ConfigureValue': 'Configure Value',
    'DashboardWebStringId.Binding.ConfigureAttribute': 'Configure Attribute',
    'DashboardWebStringId.Binding.ConfigureLatitude': 'Configure Latitude',
    'DashboardWebStringId.Binding.ConfigureLongitude': 'Configure Longitude',
    'DashboardWebStringId.Binding.ConfigureColumn': 'Configure Column',
    'DashboardWebStringId.Binding.ConfigureRow': 'Configure Row',
    'DashboardWebStringId.Binding.ConfigureWeight': 'Configure Weight',
    'DashboardWebStringId.Binding.ConfigureColor': 'Configure Color',
    'DashboardWebStringId.Binding.ShowAll': 'Show All',
    'DashboardWebStringId.ColorScheme.Color': 'Color',
    'DashboardWebStringId.ColorScheme.Colors': 'Colors',
    'DashboardWebStringId.Parameters.ParameterList': 'Parameter List',
    'DashboardWebStringId.Parameters.AddParameter': 'Add New Parameter',
    'DashboardWebStringId.Parameters.AddParameter.Tooltip': 'Add new parameter to the dashboard',
    'DashboardWebStringId.Parameters.NoSelectedParameter': 'No parameter is selected.',
    'DashboardWebStringId.Parameters.Reorder': 'Reorder',
    'DashboardWebStringId.Parameters.Done': 'Done',
    'DashboardWebStringId.Currency.Currency': 'Currency',
    'DashboardWebStringId.Currency.CurrencyCulture': 'Culture',
    'DashboardWebStringId.Currency.DefaultCurrencyWarning': 'The currency culture format is based on environmental settings. Specify the culture explicitly to ignore these settings.',
    'DashboardWebStringId.Preview': 'Preview',
    'DashboardWebStringId.Add': 'Add',
    'DashboardWebStringId.DataSources.UsedDataSources': 'Used Data Sources',
    'DashboardWebStringId.DataSources.DataItems': 'Data Items',
    'DashboardWebStringId.DataSources.AddQuery': 'Add Query',
    'DashboardWebStringId.DataSources.AddCalculatedField': 'Add Calculated Field',
    'DashboardWebStringId.DataSources.AddDataSource': 'Add Data Source',
    'DashboardWebStringId.DataSources.NoUsedDataSources': 'There are no used data sources in this dashboard.',
    'DashboardWebStringId.DataSources.NoAvailableDataSources': 'There are no available datasources.',
    'DashboardWebStringId.DataSources.ChooseDataSource': 'Choose the data source for the dashboard',
    'DashboardWebStringId.DataSources.CreateDataSource': 'Create',
    'DashboardWebStringId.DataSources.CreateNewDataSource': 'Create data source...',
    'DashboardWebStringId.DataSources.CreateDataSource.Tooltip': 'Create a new data source...',
    'DashboardWebStringId.DataSources.EditCalculatedField': 'Edit Calculated Field',
    'DashboardWebStringId.DataSources.CalculatedField.Name': 'Name ',
    'DashboardWebStringId.DataSources.CalculatedField.FieldType': 'Field Type',
    'DashboardWebStringId.DataSources.CalculatedField.UniqueNameError': 'Calculated field should have a unique name.',
    'DashboardWebStringId.DataSources.CalculatedField.Corrupted': 'The calculated field contains errors',
    'DashboardWebStringId.DataSources.Edit': 'Edit',
    'DashboardStringId.MessageCollectionTypesNotSupported': 'Dashboard does not support collection types.',
    'DashboardWebStringId.New.DashboardName': 'Dashboard Name:',
    'DashboardWebStringId.Bindings': 'Binding',
    'DashboardWebStringId.Interactivity': 'Interactivity',
    'DashboardWebStringId.Options': 'Options',
    'DashboardWebStringId.Remove': 'Remove',
    'DashboardWebStringId.MasterFilterMode': 'Master Filter Mode',
    'DashboardWebStringId.Title.Text': 'Text',
    'DashboardWebStringId.Title.Visible': 'Visible',
    'DashboardWebStringId.Title.IncludeMasterFilter': 'Include Master Filter',
    'DashboardWebStringId.Title.Aligment': 'Alignment',
    'DashboardWebStringId.Title.Image': 'Image',
    'DashboardWebStringId.DataSources.Cancel': 'Cancel',
    'DashboardWebStringId.DataSources.IncludeToTheDashboard': 'Add',
    'DashboardWebStringId.DataSources.AvailableDataSourcesError': 'An error has occurred on an attempt to load the list of available data sources',
    'DashboardWebStringId.DataSources.DashboardDataSourceWizard': 'Dashboard Data Source Wizard',
    'DashboardWebStringId.Viewer': 'Viewer ',
    'DashboardWebStringId.Loading': 'LOADING...',
    'DashboardWebStringId.ClickHereInvitation': 'Click here',
    'DashboardWebStringId.BindDataInvitation': 'to bind this item to data',
    'DashboardWebStringId.AddItemInvitation': 'Drag an item from the Toolbox or click a button below to create a new item.',
    'DashboardWebStringId.Parameters.Values': 'Values ',
    'DashboardWebStringId.Binding.Cards': 'Cards ',
    'DashboardWebStringId.Binding.AddCard': 'Add Card',
    'DashboardWebStringId.Binding.ConfigureCard': 'Configure Card',
    'DashboardWebStringId.Binding.AddValues': 'Add Values',
    'DashboardWebStringId.Binding.ConfigureValues': 'Configure Values',
    'DashboardWebStringId.Binding.Maps': 'Maps ',
    'DashboardWebStringId.Binding.AddMap': 'Add Map',
    'DashboardWebStringId.Binding.ConfigureMap': 'Configure Map',
    'DashboardWebStringId.Binding.Gauges': 'Gauges ',
    'DashboardWebStringId.Binding.AddGauge': 'Add Gauge',
    'DashboardWebStringId.Binding.ConfigureGauge': 'Configure Gauge',
    'DashboardWebStringId.InteractivityOptions': 'Interactivity Options',
    'DashboardWebStringId.Binding.Values': 'Values ',
    'DashboardWebStringId.Binding.RemovePane': 'Remove Pane',
    'DashboardWebStringId.ClickToSetFilterCriteria': 'Click to set Filter Criteria',
    'DashboardWebStringId.DataSources.OK': 'OK',
    'DashboardWebStringId.DataSources.Save': 'Save',
    'DashboardWebStringId.Cards.ArrangementMode': 'Content Arrangement Mode',
    'DashboardWebStringId.Cards.ArrangementMode.Auto': 'Auto',
    'DashboardWebStringId.Cards.ArrangementMode.FixedRows': 'Fixed Rows',
    'DashboardWebStringId.Cards.ArrangementMode.FixedColumns': 'Fixed Columns',
    'DashboardWebStringId.Cards.LineCount': 'Line Count',
    'DashboardWebStringId.ConditionalFormatting': 'Conditional Formatting',
    'DashboardWebStringId.CollectionEditor.NoItems': 'Click + to add a new item.',
    'DashboardWebStringId.CollectionEditor.Totals.NoItems': 'Click + to add a new total.',
    'DashboardWebStringId.CollectionEditor.Parameters.NoItems': 'Click + to add a new parameter.',
    'DashboardWebStringId.PivotGrid.AutoExpandColumnGroups': 'Auto - Expand Column Groups',
    'DashboardWebStringId.PivotGrid.AutoExpandRowGroups': 'Auto - Expand Row Groups',
    'DashboardWebStringId.PivotGrid.ColumnGrandTotals': 'Column Grand Totals',
    'DashboardWebStringId.PivotGrid.RowGrandTotals': 'Row Grand Totals',
    'DashboardWebStringId.PivotGrid.ColumnTotals': 'Column Totals',
    'DashboardWebStringId.PivotGrid.RowTotals': 'Row Totals',
    'DashboardWebStringId.PivotGrid.ValuesPosition': 'Values Position',
    'DashboardWebStringId.PivotGrid.ValuesPositionColumns': 'Columns',
    'DashboardWebStringId.PivotGrid.ValuesPositionRows': 'Rows',
    'DashboardWebStringId.PivotGrid.RowTotalsPosition': 'Row Totals Position',
    'DashboardWebStringId.PivotGrid.RowTotalsPositionBottom': 'Bottom',
    'DashboardWebStringId.PivotGrid.RowTotalsPositionTop': 'Top',
    'DashboardWebStringId.PivotGrid.ColumnTotalsPosition': 'Column Totals Position',
    'DashboardWebStringId.PivotGrid.ColumnTotalsPositionFar': 'Far',
    'DashboardWebStringId.PivotGrid.ColumnTotalsPositionNear': 'Near',
    'DashboardWebStringId.PivotGrid.LayoutType': 'Layout',
    'DashboardWebStringId.PivotGrid.LayoutTypeCompact': 'Compact',
    'DashboardWebStringId.PivotGrid.LayoutTypeTabular': 'Tabular',
    'DashboardWebStringId.Options.Caption': 'Caption',
    'DashboardWebStringId.InteractivityOptions.IsMasterFilter': 'Master Filter',
    'DashboardWebStringId.InteractivityOptions.MasterFilterMode.None': 'None',
    'DashboardWebStringId.InteractivityOptions.MasterFilterMode.Single': 'Single',
    'DashboardWebStringId.InteractivityOptions.MasterFilterMode.Multiple': 'Multiple',
    'DashboardWebStringId.InteractivityOptions.TargetDimensions': 'Target Dimensions',
    'DashboardWebStringId.InteractivityOptions.TargetDimensions.Arguments': 'Arguments',
    'DashboardWebStringId.InteractivityOptions.TargetDimensions.Series': 'Series',
    'DashboardWebStringId.InteractivityOptions.TargetDimensions.Points': 'Points',
    'DashboardWebStringId.ColoringOptions': 'Coloring',
    'DashboardWebStringId.DataSources.Filter': 'Filter',
    'DashboardWebStringId.Chart.Rotated': 'Rotated',
    'DashboardWebStringId.Chart.Panes': 'Panes',
    'DashboardWebStringId.Chart.Legend': 'Legend',
    'DashboardWebStringId.Chart.AxisX': 'Axis X',
    'DashboardWebStringId.Chart.AxisY': 'Axis Y',
    'DashboardWebStringId.Chart.AxisYSecondary': 'Axis Y Secondary',
    'DashboardWebStringId.Chart.PointLabelOptions': 'Point Label Options',
    'DashboardWebStringId.Chart.AxisXMeasure': 'Axis X Measure',
    'DashboardWebStringId.Chart.AxisYMeasure': 'Axis Y Measure',
    'DashboardWebStringId.Chart.Weight': 'Weight',
    'DashboardWebStringId.Chart.Content': 'Content',
    'DashboardWebStringId.Chart.ArgumentAndWeight': 'Argument and Weight',
    'DashboardWebStringId.Chart.ArgumentAndValues': 'Argument and Values',
    'DashboardWebStringId.Chart.Reverse': 'Reverse',
    'DashboardWebStringId.Chart.Visible': 'Visible',
    'DashboardWebStringId.Chart.Title': 'Title',
    'DashboardWebStringId.Chart.TitleText': 'Title Text',
    'DashboardWebStringId.Chart.EnableZooming': 'Enable Zooming',
    'DashboardWebStringId.Chart.LimitVisiblePoints': 'Limit visible points',
    'DashboardWebStringId.Chart.VisiblePointsCount': 'Visible Points Count',
    'DashboardWebStringId.Chart.AlwaysShowZeroLevel': 'Always show zero level',
    'DashboardWebStringId.Chart.GridLines': 'Grid Lines',
    'DashboardWebStringId.Chart.LogarithmicScale': 'Logarithmic Scale',
    'DashboardWebStringId.Chart.LogarithmicScaleBase': 'Logarithmic Scale Base',
    'DashboardWebStringId.Chart.LogarithmicScaleBase2': '2',
    'DashboardWebStringId.Chart.LogarithmicScaleBase5': '5',
    'DashboardWebStringId.Chart.LogarithmicScaleBase10': '10',
    'DashboardWebStringId.Chart.Position': 'Position',
    'DashboardWebStringId.Chart.IsInsideOfDiagram': 'Inside diagram',
    'DashboardWebStringId.Chart.PrimaryAxisY': 'PrimaryAxisY',
    'DashboardWebStringId.Chart.SecondaryAxisY': 'SecondaryAxisY',
    'DashboardWebStringId.Chart.Name': 'Name',
    'DashboardWebStringId.Chart.PlotOnSecondaryAxis': 'Plot on secondary axis',
    'DashboardWebStringId.Chart.IgnoreEmptyPoints': 'Ignore empty points',
    'DashboardWebStringId.Chart.ShowPointMarkers': 'Show point markers',
    'DashboardWebStringId.Chart.Value': 'Value',
    'DashboardWebStringId.Chart.ShowZeroValues': 'Show for zero values',
    'DashboardWebStringId.Chart.OverlappingMode': 'Overlapping Mode',
    'DashboardWebStringId.Chart.Orientation': 'Orientation',
    'DashboardWebStringId.Chart.ShowPointLablels': 'Show Point Labels',
    'DashboardWebStringId.Chart.TooltipContent': 'Tooltips',
    'DashboardWebStringId.Chart.LabelContent': 'Data Labels',
    'DashboardWebStringId.Card.SparklineOptions': 'Sparkline Options',
    'DashboardWebStringId.Card.SparklineVisible': 'Show Sparkline',
    'DashboardWebStringId.Chart.Position.TopLeftVertical': 'Top Left Vertical',
    'DashboardWebStringId.Chart.Position.TopLeftHorizontal': 'Top Left Horizontal',
    'DashboardWebStringId.Chart.Position.TopCenterHorizontal': 'Top Center Horizontal',
    'DashboardWebStringId.Chart.Position.TopRightVertical': 'Top Right Vertical',
    'DashboardWebStringId.Chart.Position.TopRightHorizontal': 'Top Right Horizontal',
    'DashboardWebStringId.Chart.Position.BottomLeftVertical': 'Bottom Left Vertical',
    'DashboardWebStringId.Chart.Position.BottomLeftHorizontal': 'Bottom Left Horizontal',
    'DashboardWebStringId.Chart.Position.BottomCenterHorizontal': 'Bottom Center Horizontal',
    'DashboardWebStringId.Chart.Position.BottomRightVertical': 'Bottom Right Vertical',
    'DashboardWebStringId.Chart.Position.BottomRightHorizontal': 'Bottom Right Horizontal',
    'DashboardWebStringId.Chart.Position.TopCenterVertical': 'Top Center Vertical',
    'DashboardWebStringId.Chart.Position.BottomCenterVertical': 'Bottom Center Vertical',
    'DashboardWebStringId.FilterItem.Type': 'Type',
    'DashboardWebStringId.FilterItem.Type.Standard': 'Standard',
    'DashboardWebStringId.FilterItem.Type.Checked': 'Checked',
    'DashboardWebStringId.FilterItem.Type.Radio': 'Radio',
    'DashboardWebStringId.FilterItem.ShowAllValue': 'Show "All" Value',
    'DashboardWebStringId.FilterItem.EnableSearch': 'Enable Search',
    'DashboardWebStringId.Gauge.Min': 'Minimum Value',
    'DashboardWebStringId.Gauge.Max': 'Maximum Value',
    'DashboardWebStringId.Gauge.ScaleOptions': 'Scale Options',
    'DashboardWebStringId.Gauge.Type': 'Gauge Type',
    'DashboardWebStringId.Gauge.Type.FullQuarterGauge': 'Full Quarter Gauge',
    'DashboardWebStringId.Gauge.Type.HalfCircular': 'Half Circular',
    'DashboardWebStringId.Gauge.Type.LeftQuarterCircular': 'Left - Quarter Circular',
    'DashboardWebStringId.Gauge.Type.RightQuarterCircular': 'Right - Quarter Circular',
    'DashboardWebStringId.Gauge.Type.ThreeFourthCircular': 'Three-Quarter Circular',
    'DashboardWebStringId.Gauge.Type.LinearHorizontal': 'Linear Horizontal',
    'DashboardWebStringId.Gauge.Type.LinearVertical': 'Linear Vertical',
    'DashboardWebStringId.Gauge.Captions': 'Show Gauge Captions',
    'DashboardWebStringId.Gauge.Scale.Custom': 'Custom',
    'DashboardWebStringId.Gauge.Scale.Auto': 'Auto',
    'DashboardWebStringId.Grid.ColumnType': 'Column Type',
    'DashboardWebStringId.Grid.DisplayMode': 'Display Mode',
    'DashboardWebStringId.Grid.DisplayMode.Value': 'Value',
    'DashboardWebStringId.Grid.DisplayMode.Bar': 'Bar',
    'DashboardWebStringId.Grid.DisplayMode.Text': 'Text',
    'DashboardWebStringId.Grid.DisplayMode.Image': 'Image',
    'DashboardWebStringId.Grid.FixedWidth': 'Fixed Width',
    'DashboardWebStringId.Grid.WidthType': 'Width Type',
    'DashboardWebStringId.Grid.WidthType.Weight': 'Weight',
    'DashboardWebStringId.Grid.WidthType.FitToContent': 'Fit To Content',
    'DashboardWebStringId.Grid.DeltaOptions': 'Delta Options',
    'DashboardWebStringId.Grid.ShowStartEndValues': 'Show Start/ End Values',
    'DashboardWebStringId.Grid.TotalType': 'Total Type',
    'DashboardWebStringId.Grid.Dimension': 'Dimension',
    'DashboardWebStringId.Grid.Measure': 'Measure',
    'DashboardWebStringId.Grid.Delta': 'Delta',
    'DashboardWebStringId.Grid.Sparkline': 'Sparkline',
    'DashboardWebStringId.Grid.Hyperlink': 'Hyperlink',
    'DashboardWebStringId.Grid.Options': 'Grid Options',
    'DashboardWebStringId.Map.ShapeFileLoaded': '(SHP File)',
    'DashboardWebStringId.Map.AttributeFileLoaded': '(DBF File)',
    'DashboardWebStringId.Map.ValueMap': 'Value Map',
    'DashboardWebStringId.Map.DeltaMap': 'Delta Map',
    'DashboardWebStringId.Map.TooltipCaption': 'Tooltip Caption',
    'DashboardWebStringId.Map.TooltipActualValueCaption': 'Tooltip Actual Value Caption',
    'DashboardWebStringId.Map.TooltipDeltaCaption': 'Tooltip Delta Caption',
    'DashboardWebStringId.Map.CustomMapOptions': 'Custom Map Options',
    'DashboardWebStringId.Map.CustomMapOptionsSource': 'Source',
    'DashboardWebStringId.Map.CustomMapOptionsUrl': 'Url',
    'DashboardWebStringId.Map.CustomMapOptionsFile': 'File',
    'DashboardWebStringId.Map.CustomMapUrl': 'Shape File Url',
    'DashboardWebStringId.Map.CustomMapFile': 'Shape File',
    'DashboardWebStringId.Map.CustomAttributeFile': 'Attribute File',
    'DashboardWebStringId.Map.AttributeDimension': 'Attribute Dimension',
    'DashboardWebStringId.Map.IncludeSummaryValueToShapeTitle': 'Include Summary Value',
    'DashboardWebStringId.Map.AttributeName': 'Attribute Name',
    'DashboardWebStringId.Map.TooltipAttribute': 'Tooltip Attribute',
    'DashboardWebStringId.Map.TooltipDimensions': 'Tooltip Dimensions',
    'DashboardWebStringId.Map.Area.Custom': 'Custom',
    'DashboardWebStringId.Map.Area.WorldCountries': 'World Countries',
    'DashboardWebStringId.Map.Area.Europe': 'Europe',
    'DashboardWebStringId.Map.Area.Asia': 'Asia',
    'DashboardWebStringId.Map.Area.NorthAmerica': 'North America',
    'DashboardWebStringId.Map.Area.SouthAmerica': 'South America',
    'DashboardWebStringId.Map.Area.Africa': 'Africa',
    'DashboardWebStringId.Map.Area.USA': 'USA',
    'DashboardWebStringId.Map.Area.Canada': 'Canada',
    'DashboardWebStringId.Map.Viewport': 'Viewport',
    'DashboardWebStringId.Map.ShapeTitleAttribute': 'Shape Title Attribute',
    'DashboardWebStringId.Map.UseBindingAttribute': 'Use binding attribute',
    'DashboardWebStringId.Map.WeightedLegendType': 'Type',
    'DashboardWebStringId.Map.WeightedLegendType.Linear': 'Linear',
    'DashboardWebStringId.Map.WeightedLegendType.Nested': 'Nested',
    'DashboardWebStringId.Map.Orientation.Vertical': 'Vertical',
    'DashboardWebStringId.Map.Orientation.Horizontal': 'Horizontal',
    'DashboardWebStringId.Map.Position.TopLeft': 'Top Left',
    'DashboardWebStringId.Map.Position.TopCenter': 'Top Center',
    'DashboardWebStringId.Map.Position.TopRight': 'Top Right',
    'DashboardWebStringId.Map.Position.BottomLeft': 'Bottom Left',
    'DashboardWebStringId.Map.Position.BottomCenter': 'Bottom Center',
    'DashboardWebStringId.Map.Position.BottomRight': 'Bottom Right',
    'DashboardWebStringId.Map.Viewport.TopLatitude': 'Top Latitude',
    'DashboardWebStringId.Map.Viewport.LeftLongitude': 'Left Longitude',
    'DashboardWebStringId.Map.Viewport.RightLongitude': 'Right Longitude',
    'DashboardWebStringId.Map.Viewport.BottomLatitude': 'Bottom Latitude',
    'DashboardWebStringId.Map.Viewport.CenterPointLatitude': 'Center Point Latitude',
    'DashboardWebStringId.Map.Viewport.CenterPointLongitude': 'Center Point Longitude',
    'DashboardWebStringId.Map.Viewport.CreateViewerPaddings': 'Create Viewer Paddings',
    'DashboardWebStringId.Map.ShowLegend': 'Show Color Legend',
    'DashboardWebStringId.Pie.Type': 'Pie Type',
    'DashboardWebStringId.Pie': 'Pie',
    'DashboardWebStringId.Pie.Donut': 'Donut',
    'DashboardWebStringId.Pie.LabelContentType.None': 'None',
    'DashboardWebStringId.Pie.LabelContentType.Argument': 'Argument',
    'DashboardWebStringId.Pie.LabelContentType.Percent': 'Percent',
    'DashboardWebStringId.Pie.LabelContentType.ArgumentAndPercent': 'Argument And Percent',
    'DashboardWebStringId.Pie.LabelContentType.Value': 'Value',
    'DashboardWebStringId.Pie.LabelContentType.ArgumentAndValue': 'Argument And Value',
    'DashboardWebStringId.Pie.LabelContentType.ValueAndPercent': 'Value And Percent',
    'DashboardWebStringId.Pie.LabelContentType.ArgumentValueAndPercent': 'Argument, Value And Percent',
    'DashboardWebStringId.Image.BindingMode': 'Binding Mode',
    'DashboardWebStringId.Image.BindingMode.BinaryArray': 'Binary Array',
    'DashboardWebStringId.Image.BindingMode.Uri': 'Uri',
    'DashboardWebStringId.RangeFilter.UriPattern': 'Uri Pattern',
    'DashboardWebStringId.Image.SizeMode.Clip': 'Clip',
    'DashboardWebStringId.Image.SizeMode.Stretch': 'Stretch',
    'DashboardWebStringId.Image.SizeMode.Zoom': 'Zoom',
    'DashboardWebStringId.Image.SizeMode.Squeeze': 'Squeeze',
    'DashboardWebStringId.Image.HorizontalAlignment': 'Horizontal Alignment',
    'DashboardWebStringId.Image.VerticalAlignment': 'Vertical Alignment',
    'DashboardWebStringId.Image.Alignment.Left': 'Left',
    'DashboardWebStringId.Image.Alignment.Center': 'Center',
    'DashboardWebStringId.Image.Alignment.Right': 'Right',
    'DashboardWebStringId.Image.Alignment.Top': 'Top',
    'DashboardWebStringId.Image.Alignment.Bottom': 'Bottom',
    'DashboardWebStringId.SeriesItem.SeriesDimensions': 'Series Dimensions',
    'DashboardWebStringId.TextBox.Text': 'Text',
    'DashboardWebStringId.Chart.Orientation.Default': 'Default',
    'DashboardWebStringId.Chart.Orientation.RotateRight': 'Rotate Right',
    'DashboardWebStringId.Chart.Orientation.RotateLeft': 'Rotate Left',
    'DashboardWebStringId.Chart.OverlappingMode.Hide': 'Hide',
    'DashboardWebStringId.Chart.OverlappingMode.None': 'None',
    'DashboardWebStringId.Chart.Position.Outside': 'Outside',
    'DashboardWebStringId.Chart.Position.Inside': 'Inside',
    'DashboardWebStringId.Chart.SeriesType.Weighted': 'Weighted',
    'DashboardWebStringId.Coloring.MeasuresColoringMode': 'Measures Coloring',
    'DashboardWebStringId.Coloring.Global': 'Global',
    'DashboardWebStringId.Coloring.Local': 'Local',
    'DashboardWebStringId.Delta.ValueType': 'Value Type',
    'DashboardWebStringId.Delta.ResultIndication': 'Result Indication',
    'DashboardWebStringId.Delta.ThresholdType': 'Threshold Type',
    'DashboardWebStringId.Delta.ThresholdValue': 'Threshold Value',
    'DashboardWebStringId.Sparkline.ViewType': 'View Type',
    'DashboardWebStringId.Sparkline.HighlightMinMaxPoints': 'Highlight Min/ Max Points',
    'DashboardWebStringId.Sparkline.HighlightStartEndPoints': 'Highlight Start/ End Points',
    'DashboardWebStringId.Title.Aligment.Left': 'Left',
    'DashboardWebStringId.Title.Aligment.Center': 'Center',
    'DashboardWebStringId.Parameters.LookUpSettingsType.NoLookUp': 'No Look-Up',
    'DashboardWebStringId.Parameters.LookUpSettingsType.StaticList': 'Static List',
    'DashboardWebStringId.Parameters.LookUpSettingsType.DynamicList': 'Dynamic List',
    'DashboardWebStringId.Parameters.LookUpSettingsType': 'Look-up Settings',
    'DashboardWebStringId.Parameters.DefaultValue': 'Default Value',
    'DashboardWebStringId.DataItem': 'Data Item',
    'DashboardWebStringId.DataItem.Precision': 'Precision',
    'DashboardWebStringId.DataItem.IncludeGroupSeparator': 'Include Group Separator',
    'DashboardWebStringId.DataItem.ShowValues': 'Show Values',
    'DashboardWebStringId.DataItem.ShowTotals': 'Show Totals',
    'DashboardWebStringId.DataItem.ShowGrandTotals': 'Show Grand Totals',
    'DashboardWebStringId.Dialog.ConfirmSaving': 'Confirm saving',
    'DashboardWebStringId.Dimension.GroupInterval': 'Group Interval',
    'DashboardWebStringId.Dimension.SortMode': 'Sort Mode',
    'DashboardWebStringId.Dialog.ArgumentMode': 'Axis Type',
    'DashboardWebStringId.Calculations': 'Calculations',
    'DashboardWebStringId.Calculations.Expression': 'Calculation',
    'DashboardWebStringId.Calculations.DifferenceCalculation': 'Difference of',
    'DashboardWebStringId.Calculations.Moving': 'Moving of',
    'DashboardWebStringId.Calculations.RunningTotal': 'Running Total of',
    'DashboardWebStringId.Calculations.PercentOfTotal': 'Percent Of Total of',
    'DashboardWebStringId.Calculations.Rank': 'Rank of',
    'DashboardWebStringId.Calculations.DefinitionMode': 'Definition Mode',
    'DashboardWebStringId.Calculations.WindowDefinition': 'Window Definition',
    'DashboardWebStringId.Calculations.WindowDefinitionModeSpecific': 'Specific',
    'DashboardWebStringId.Calculations.WindowDefinitionModePredefined': 'Predefined',
    'DashboardWebStringId.Calculations.DifferenceType': 'Difference Type',
    'DashboardWebStringId.TreemapLayoutAlgorithm': 'Layout Algorithm',
    'DashboardWebStringId.TilesLabelContentType': 'Tile Label',
    'DashboardWebStringId.TilesTooltipContentType': 'Tile Tooltip',
    'DashboardWebStringId.GroupsLabelContentType': 'Group Label',
    'DashboardWebStringId.GroupsTooltipContentType': 'Group Tooltip',
    'DashboardWebStringId.ShowOthersValue': 'Show "Others" Value',
    'DashboardWebStringId.TopNEnabled': 'Enabled',
    'DashboardWebStringId.Parameters.StaticListLookUpSettings': 'Static List LookUp Settings',
    'DashboardWebStringId.Parameters.DynamicListLookUpSettings': 'Dynamic List LookUp Settings',
    'DashboardWebStringId.ConvertTo': 'Convert To',
    'DashboardWebStringId.Duplicate': 'Duplicate current item',
    'DashboardWebStringId.DataSourceWizard': 'Dashboard Data Source Wizard',
    'DashboardWebStringId.RangeFilter.CustomPeriods': 'Custom Periods',
    'DashboardWebStringId.RangeFilter.StartMode': 'Start Mode',
    'DashboardWebStringId.RangeFilter.EndMode': 'End Mode',
    'DashboardWebStringId.RangeFilter.StartIntervalAndOffset': 'Start Interval and Offset',
    'DashboardWebStringId.RangeFilter.EndIntervalAndOffset': 'End Interval and Offset',
    'DashboardWebStringId.RangeFilter.StartDate': 'Start Date',
    'DashboardWebStringId.RangeFilter.EndDate': 'End Date',
    'DashboardWebStringId.RangeFilter.None': 'None',
    'DashboardWebStringId.RangeFilter.Fixed': 'Fixed',
    'DashboardWebStringId.RangeFilter.Flow': 'Flow',
    'DashboardWebStringId.Tabs.Binding': 'Binding',
    'DashboardWebStringId.Tabs.DataShaping': 'Data Shaping',
    'DashboardWebStringId.Tabs.Format': 'Format',
    'DashboardWebStringId.Calculations.Types.Moving': 'Moving',
    'DashboardWebStringId.Parameters.SortByMember': 'Sort By',
    'DashboardWebStringId.Parameters.LookUpSettingsTypeCaption': 'Look-Up Settings Type',
    'DashboardWebStringId.Dashboard.Items': 'Items',
    'DashboardWebStringId.Dashboard.Groups': 'Groups',
    'DashboardWebStringId.Dashboard.LayoutItems': 'Layout Items',
    'DashboardWebStringId.Dashboard.ComponentName': 'Component Name',
    'DashboardWebStringId.ButtonConfirm': 'Confirm',
    'DashboardWebStringId.Colorization.GroupInterval': 'Group Interval',
    'DashboardWebStringId.ButtonOn': 'ON',
    'DashboardWebStringId.ButtonOff': 'OFF',
    'DashboardWebStringId.ButtonYes': 'YES',
    'DashboardWebStringId.ButtonNo': 'NO',
    'DashboardWebStringId.ButtonDiscrete': 'DISCRETE',
    'DashboardWebStringId.ButtonContinuous': 'CONTINUOUS',
    'DashboardWebStringId.ButtonVisible': 'VISIBLE',
    'DashboardWebStringId.ButtonHidden': 'HIDDEN',
    'DashboardWebStringId.Calculations.PreviousValuesCount': 'Start Offset',
    'DashboardWebStringId.Calculations.NextValuesCount': 'End Offset',
    'DashboardWebStringId.Calculations.RankType': 'Rank Type',
    'DashboardWebStringId.Calculations.RankOrder': 'Rank Order',
    'DashboardWebStringId.TileOptions': 'Tile Options',
    'DashboardWebStringId.MapLockNavigationLocked': 'Locked',
    'DashboardWebStringId.MapLockNavigationUnlocked': 'Unlocked',
    'DashboardWebStringId.ConditionalFormatting.BarOptions': 'Bar Options',
    'DashboardWebStringId.ConditionalFormatting.CalculatedBy': 'Calculated by',
    'DashboardWebStringId.ConditionalFormatting.IconType': 'Icon Type',
    'DashboardWebStringId.ConditionalFormatting.PredefinedColor': 'Predefined Color',
    'DashboardWebStringId.ConditionalFormatting.AppearanceType': 'Appearance Type',
    'DashboardWebStringId.ConditionalFormatting.FontStyle': 'Font Style',
    'DashboardWebStringId.ConditionalFormatting.FontFamily': 'Font Family',
    'DashboardWebStringId.ConditionalFormatting.FontRegular': 'Regular',
    'DashboardWebStringId.ConditionalFormatting.IconType.None': 'None',
    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenArrowUp': 'Directional Green Arrow Up',
    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowUpInclineArrow': 'Directional Yellow Up Incline Arrow',
    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowSideArrow': 'Directional Yellow Side Arrow',
    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDownInclineArrow': 'Directional Yellow Down Incline Arrow',
    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedDownArrow': 'Directional Red Down Arrow',
    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayArrowUp': 'Directional Gray Arrow Up',
    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayUpInclineArrow': 'Directional Gray Up Incline Arrow',
    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGraySideArrow': 'Directional Gray Side Arrow',
    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownInclineArrow': 'Directional Gray Down Incline Arrow',
    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownArrow': 'Directional Gray Down Arrow',
    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDash': 'Directional Yellow Dash',
    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedTriangleDown': 'Directional Red Triangle Down',
    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenTriangleUp': 'Directional Green Triangle Up',
    'DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayStar': 'Rating Full Gray Star',
    'DashboardWebStringId.ConditionalFormatting.IconType.RatingHalfGrayStar': 'Rating Half Gray Star',
    'DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayStar': 'Rating Empty Gray Star',
    'DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayCircle': 'Rating Full Gray Circle',
    'DashboardWebStringId.ConditionalFormatting.IconType.Rating1QuarterGrayCircle': 'Rating 1 Quarter Gray Circle',
    'DashboardWebStringId.ConditionalFormatting.IconType.Rating2QuartersGrayCircle': 'Rating 2 Quarters Gray Circle',
    'DashboardWebStringId.ConditionalFormatting.IconType.Rating3QuartersGrayCircle': 'Rating 3 Quarters Gray Circle',
    'DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayCircle': 'Rating Empty Gray Circle',
    'DashboardWebStringId.ConditionalFormatting.IconType.Rating4Bars': 'Rating 4 Bars',
    'DashboardWebStringId.ConditionalFormatting.IconType.Rating3Bars': 'Rating 3 Bars',
    'DashboardWebStringId.ConditionalFormatting.IconType.Rating2Bars': 'Rating 2 Bars',
    'DashboardWebStringId.ConditionalFormatting.IconType.Rating1Bar': 'Rating 1 Bar',
    'DashboardWebStringId.ConditionalFormatting.IconType.Rating0Bars': 'Rating 0 Bars',
    'DashboardWebStringId.ConditionalFormatting.IconType.Rating4FilledBoxes': 'Rating 4 Filled Boxes',
    'DashboardWebStringId.ConditionalFormatting.IconType.Rating3FilledBoxes': 'Rating 3 Filled Boxes',
    'DashboardWebStringId.ConditionalFormatting.IconType.Rating2FilledBoxes': 'Rating 2 Filled Boxes',
    'DashboardWebStringId.ConditionalFormatting.IconType.Rating1FilledBox': 'Rating 1 Filled Box',
    'DashboardWebStringId.ConditionalFormatting.IconType.Rating0FilledBoxes': 'Rating 0 Filled Boxes',
    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenTrafficLight': 'Shape Green Traffic Light',
    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTrafficLight': 'Shape Yellow Traffic Light',
    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedTrafficLight': 'Shape Red Traffic Light',
    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenCircle': 'Shape Green Circle',
    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowCircle': 'Shape Yellow Circle',
    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedCircle': 'Shape Red Circle',
    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightRedCircle': 'Shape Light Red Circle',
    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightGrayCircle': 'Shape Light Gray Circle',
    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTriangle': 'Shape Yellow Triangle',
    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedDiamond': 'Shape Red Diamond',
    'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenCheck': 'Indicator Green Check',
    'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowExclamation': 'Indicator Yellow Exclamation',
    'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedCross': 'Indicator Red Cross',
    'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledGreenCheck': 'Indicator Circled Green Check',
    'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledYellowExclamation': 'Indicator Circled Yellow Exclamation',
    'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledRedCross': 'Indicator Circled Red Cross',
    'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenFlag': 'Indicator Green Flag',
    'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowFlag': 'Indicator Yellow Flag',
    'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedFlag': 'Indicator Red Flag',
    'DashboardWebStringId.ConditionalFormatting.IntersectionColumnDimension': 'Intersection Column Dimension',
    'DashboardWebStringId.ConditionalFormatting.IntersectionRowDimension': 'Intersection Row Dimension',
    'DashboardWebStringId.ConditionalFormatting.IntersectionLevelMode': 'Intersection Level Mode',
    'DashboardWebStringId.ConditionalFormatting.GradientRangeBar': 'Gradient Range Bar',
    'DashboardWebStringId.ConditionalFormatting.RangeGradient': 'Range Gradient',
    'DashboardWebStringId.ConditionalFormatting.SegmentNumber': 'Segment Number',
    'DashboardWebStringId.ConditionalFormatting.ValueComparison': 'Value Comparison',
    'DashboardWebStringId.ConditionalFormatting.Ranges': 'Ranges',
    'DashboardWebStringId.ConditionalFormatting.AverageType': 'Average Type',
    'DashboardWebStringId.ConditionalFormatting.Above': 'Above',
    'DashboardWebStringId.ConditionalFormatting.AboveOrEqual': 'Above or Equal',
    'DashboardWebStringId.ConditionalFormatting.Below': 'Below',
    'DashboardWebStringId.ConditionalFormatting.BelowOrEqual': 'Below or Equal',
    'DashboardWebStringId.ConditionalFormatting.StyleSettingsType': 'Style Settings Type',
    'DashboardWebStringId.ConditionalFormatting.Positive': 'Positive',
    'DashboardWebStringId.ConditionalFormatting.Negative': 'Negative',
    'DashboardWebStringId.ConditionalFormatting.MinimumType': 'Minimum Type',
    'DashboardWebStringId.ConditionalFormatting.MaximumType': 'Maximum Type',
    'DashboardWebStringId.ConditionalFormatting.DateType': 'Date Type',
    'DashboardWebStringId.ConditionalFormatting.DateType.None': 'None',
    'DashboardWebStringId.ConditionalFormatting.DateType.SpecificDate': 'Specific Date',
    'DashboardWebStringId.ConditionalFormatting.DateType.BeyondThisYear': 'Beyond This Year',
    'DashboardWebStringId.ConditionalFormatting.DateType.LaterThisYear': 'Later This Year',
    'DashboardWebStringId.ConditionalFormatting.DateType.LaterThisMonth': 'Later This Month',
    'DashboardWebStringId.ConditionalFormatting.DateType.LaterThisWeek': 'Later This Week',
    'DashboardWebStringId.ConditionalFormatting.DateType.NextWeek': 'Next Week',
    'DashboardWebStringId.ConditionalFormatting.DateType.Tomorrow': 'Tomorrow',
    'DashboardWebStringId.ConditionalFormatting.DateType.Today': 'Today',
    'DashboardWebStringId.ConditionalFormatting.DateType.Yesterday': 'Yesterday',
    'DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisWeek': 'Earlier This Week',
    'DashboardWebStringId.ConditionalFormatting.DateType.LastWeek': 'Last Week',
    'DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisMonth': 'Earlier This Month',
    'DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisYear': 'Earlier This Year',
    'DashboardWebStringId.ConditionalFormatting.DateType.PriorThisYear': 'Prior This Year',
    'DashboardWebStringId.ConditionalFormatting.DateType.Empty': 'Empty',
    'DashboardWebStringId.ConditionalFormatting.DateType.User': 'User',
    'DashboardWebStringId.ConditionalFormatting.DateType.Beyond': 'Beyond',
    'DashboardWebStringId.ConditionalFormatting.DateType.ThisWeek': 'This Week',
    'DashboardWebStringId.ConditionalFormatting.DateType.ThisMonth': 'This Month',
    'DashboardWebStringId.ConditionalFormatting.DateType.MonthAfter1': 'Month After 1',
    'DashboardWebStringId.ConditionalFormatting.DateType.MonthAfter2': 'Month After 2',
    'DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo1': 'Month Ago 1',
    'DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo2': 'Month Ago 2',
    'DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo3': 'Month Ago 3',
    'DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo4': 'Month Ago 4',
    'DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo5': 'Month Ago 5',
    'DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo6': 'Month Ago 6',
    'DashboardWebStringId.ConditionalFormatting.DateType.Earlier': 'Earlier',
    'DashboardWebStringId.ConditionalFormatting.CardRuleTypeDataItem': 'Data Item',
    'DashboardWebStringId.ConditionalFormatting.CardRuleTypeCard': 'Card',
    'DashboardWebStringId.Colorization.NoSelectedSchema': 'Select color signature to edit schema',
    'DashboardWebStringId.Colorization.ColorSchemes': 'Color Schemes',
    'DashboardWebStringId.LayoutHasBeenChangedDialogMessage': 'The dashboard layout has been changed.',
    'DashboardWebStringId.SaveConfirmationDialogMessage': 'If you leave before saving, your changes will be lost.',
    'DashboardWebStringId.SaveChangesDialogMessage': 'Do you want to save changes?',
    'DashboardWebStringId.Dialog.ChangeDataMemberMessage': 'Do you want to change the data source / data member?',
    'DashboardWebStringId.Dialog.RemovedDataItemsMessage': 'Note that this action removes all data items.',
    'DashboardWebStringId.Dialog.ConfirmChanges': 'Confirm Changes',
    'DashboardWebStringId.Dialog.Save': 'Save',
    'DashboardWebStringId.Dialog.DoNotSave': "Don't Save",
    'DashboardWebStringId.Dialog.ButtonYes': 'Yes',
    'DashboardWebStringId.Dialog.ButtonDontChange': "Don't change",
    'DashboardWebStringId.Colorization.ColorSchemeType': 'Color Scheme Type',
    'DashboardWebStringId.Colorization.MeasureNames': 'Measure Names',
    'DashboardWebStringId.Colorization.AddColor': 'Add Color',
    'DashboardWebStringId.Colorization.ValidationSelectMeasure': 'Select at least one measure',
    'DashboardWebStringId.ColoringModeAuto': 'Auto',
    'DashboardWebStringId.ColoringModeOff': 'Off',
    'DashboardWebStringId.ColoringModeOn': 'On',
    'DashboardWebStringId.ColorScheme.Empty': 'The current dashboard does not contain color schemes',
    'DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButton': 'Select a data source',
    'DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip': 'To add a data source to the current dashboard, go to Menu | Data Sources.',
    'DashboardWebStringId.ConditionalFormatting.Miscellaneous': 'Miscellaneous',
    'DashboardWebStringId.Dashboards': 'Dashboards',
    'DashboardWebStringId.EditInDesigner': 'Edit in Designer',
    'DashboardWebStringId.NoDashboards': 'There are no dashboards to display.',
    'DashboardWebStringId.AddNewDashboard': 'To add a new dashboard, click',
    'DashboardWebStringId.NewDashboard': 'New Dashboard',
    'DashboardWebStringId.Binding.Searching': 'Start typing to search...',
    'DashboardWebStringId.Binding.EmptySearchResult': 'Nothing was found',
    'DashboardWebStringId.Errors.AttemptToLoadData': 'An error has occurred on an attempt to load data',
    'DashboardWebStringId.ConditionType': 'Condition Type',
    'DashboardWebStringId.ConditionalFormatting.UnsupportedDataType': 'This data type is not supported',
    'DashboardWebStringId.FormatRule': 'Format Rule',
    'DashboardWebStringId.Notification.DashboardSaving': 'Dashboard is saving',
    'DashboardWebStringId.Notification.DashboardSaved': 'Dashboard is saved',
    'DashboardWebStringId.Notification.DashboardCanNotBeSaved': 'The dashboard cannot be saved',
    'DashboardWebStringId.Notification.DashboardSavingIsNotAvailable': 'Saving is not available',
    'DashboardWebStringId.Notification.AttemptToLoadDashboards': 'An error has occurred on an attempt to load the list of available dashboards',
    'DashboardWebStringId.Notification.DashboardLoading': 'Dashboard is loading...',
    'DashboardWebStringId.Notification.AttemptToLoadDashboard': 'An error has occurred on an attempt to load the dashboard ',
    'DashboardWebStringId.Notification.AttemptToConnectionStrings': 'An error occurred on an attempt to load connection strings',
    'DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode': 'This method is not allowed in the viewer mode',
    'DashboardWebStringId.Notification.AttemptToLoadParameterValues': 'An error has occurred on an attempt to load parameter values for the data source ',
    'DashboardWebStringId.Notification.AttemptToGetUnderlyingData': 'An error has occurred on an attempt to get underlying data for the item ',
    'DashboardWebStringId.Notification.AttemptToConvertItemToType': 'An error has occurred on an attempt to convert the item to the type ',
    'DashboardWebStringId.Notification.AttemptToLoadDimensionUniqueValues': 'An error has occurred on an attempt to load dimension unique values for the data source ',
    'DashboardWebStringId.Notification.AttemptToLoadFieldListForDataSource': 'An error has occurred on an attempt to load the field list for the data source ',
    'DashboardWebStringId.Notification.AttemptToGetColorScheme': 'An error has occurred on an attempt to get the color scheme',
    'DashboardWebStringId.Notification.NewDashboardCannotBeCreated': 'A new dashboard cannot be created',
    'DashboardWebStringId.Notification.ErrorHasOccuredOn': 'An error has occurred on an',
    'DashboardWebStringId.Notification.UnsupportedDataSourceType': 'Unsupported data source type',
    'DashboardWebStringId.LimitVisibleData.DisplayAllDataTooltip': 'This dashboard item is bound to a large dataset and does not currently display all data to retain performance. Click this button to display all data.',
    'DashboardWebStringId.LimitVisibleData.IncreasePerformanceTooltip': 'This dashboard item is bound to a large data set. To increase performance, click this icon to limit visible data.',
    'DashboardWebStringId.ConditionalFormatting.Condition': 'Condition',
    'DashboardWebStringId.CardLayout.MinWidth': 'Min Width',
    'DashboardWebStringId.CardLayout.MaxWidth': 'Max Width',
    'DashboardWebStringId.CardLayout.Editor.CardLayout': 'Card Layout',
    'DashboardWebStringId.CardLayout.Editor.FormatOptions': 'Format Options',
    'DashboardWebStringId.CardLayout.LayoutOptions': 'Layout Options',
    'DashboardWebStringId.CardLayout.ResetTemplate': 'Reset',
    'DashboardWebStringId.CardLayout.ApplyToAllCards': 'Apply to all Cards',
    'DashboardWebStringId.Binding.ValuesPattern': 'Values {0}',
    'DashboardWebStringId.Parameters.ParameterNameShouldBeUnique': 'A name of the parameter should be unique',
    'DashboardWebStringId.Title.ImageEmbedded': 'Embedded',
    'DashboardWebStringId.Title.ImageLinked': 'Linked',
    'DashboardWebStringId.Title.ImageNone': 'None',
    'DashboardWebStringId.RangeFilter.SetDefaultCustomPeriod': 'Set as Default',
    'DashboardWebStringId.RangeFilter.ClearDefaultCustomPeriod': 'Clear Default Custom Period',
    'DashboardWebStringId.MobileLayout.Back': 'Back',
    'DashboardWebStringId.MobileLayout.SwitchToViewer': 'You have opened the Web Dashboard in the Designer mode. The control supports a mobile layout only if it works in the Viewer mode. Do you want to switch to the Viewer mode?',
    'DashboardWebStringId.Search': 'Search...',
    'DashboardStringId.DefaultNameTabPage': 'Page',
    'DashboardStringId.DefaultNameChartPane': 'Pane',
    'DashboardStringId.NewCalculatedFieldNamePrefix': 'Calculated Field',
    'DashboardStringId.NewParameterNamePrefix': 'Parameter',
    'AnalyticsCoreStringId.Parameter_Type_String': 'String',
    'AnalyticsCoreStringId.Parameter_Type_DateTime': 'Date',
    'AnalyticsCoreStringId.Parameter_Type_Int16': 'Number (16 bit integer)',
    'AnalyticsCoreStringId.Parameter_Type_Int32': 'Number (32 bit integer)',
    'AnalyticsCoreStringId.Parameter_Type_Int64': 'Number (64 bit integer)',
    'AnalyticsCoreStringId.Parameter_Type_Float': 'Number (floating-point)',
    'AnalyticsCoreStringId.Parameter_Type_Double': 'Number (double-precision floating-point)',
    'AnalyticsCoreStringId.Parameter_Type_Decimal': 'Number (decimal)',
    'AnalyticsCoreStringId.Parameter_Type_Boolean': 'Boolean',
    'AnalyticsCoreStringId.Parameter_Type_Guid': 'Guid',
    'AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption': 'Expression Editor',
    'DataAccessUIStringId.FiltersView': 'Filter Editor',
    'DashboardStringId.SeriesTypeGroupArea': 'Area',
    'DashboardStringId.SeriesTypeGroupBar': 'Bar',
    'DashboardStringId.SeriesTypeGroupBubble': 'Bubble',
    'DashboardStringId.SeriesTypeGroupFinancial': 'Financial',
    'DashboardStringId.SeriesTypeGroupPointLine': 'Point / Line',
    'DashboardStringId.SeriesTypeGroupRange': 'Range',
    'DashboardStringId.FunctionCategoryWindow': 'Window',
    'DashboardStringId.FunctionCategoryAggregate': 'Aggregate',
    'DashboardStringId.FunctionCategoryAdvanced': 'Advanced',
    'DashboardStringId.FunctionDescriptionWindowAvg': 'WindowAvg(SummaryExpression, StartOffset, EndOffset)\r\nReturns the average of the expression within the window, which is defined using offsets from the current row.\r\n  ',
    'DashboardStringId.FunctionDescriptionRunningMin': 'RunningMin(SummaryExpression)\r\nReturns the running minimum of the specified expression from the first row in the window to the current row.\r\n  ',
    'DashboardStringId.FunctionDescriptionTotal': 'Total(SummaryExpression)\r\nReturns the total for the specified expression in a table calculation window.\r\n  ',
    'DashboardStringId.FunctionDescriptionRankCompetition': 'RankCompetition(SummaryExpression, ["asc", "desc"])\r\nReturns the standard competition rank for the current row in the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionLookup': 'Lookup(SummaryExpression, Position)\r\nReturns the value of the expression in a target position specified as a relative offset from the current position.\r\n  ',
    'DashboardStringId.FunctionDescriptionRunningCount': 'RunningCount(SummaryExpression)\r\nReturns the running count of the specified expression from the first row in the window to the current row.\r\n  ',
    'DashboardStringId.FunctionDescriptionWindowMax': 'WindowMax(SummaryExpression, StartOffset, EndOffset)\r\nReturns the maximum of the expression within the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionVarp': 'Varp(Value)\r\nReturns the variance of a population, where the population is the entire data to be summarized.',
    'DashboardStringId.FunctionDescriptionRunningAvg': 'RunningAvg(SummaryExpression)\r\nReturns the running average of the specified expression from the first row in the window to the current row.\r\n  ',
    'DashboardStringId.FunctionDescriptionFirst': 'First()\r\nReturns the number of rows from the current row to the first row in the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionWindowMin': 'WindowMin(SummaryExpression, StartOffset, EndOffset)\r\nReturns the minimum of the expression within the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionWindowStdDev': 'WindowStdDev(SummaryExpression, StartOffset, EndOffset)\r\nReturns the sample standard deviation of the expression within the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionLast': 'Last()\r\nReturns the number of rows from the current row to the last row in the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionWindowCount': 'WindowCount(SummaryExpression, StartOffset, EndOffset)\r\nReturns the count of the expression within the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionCountDistinct': 'CountDistinct(Value)\r\nReturns the number of unique objects in a collection.',
    'DashboardStringId.FunctionDescriptionIndex': 'Index()\r\nReturns the index of the current row in the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionWindowStdDevp': 'WindowStdDevp(SummaryExpression, StartOffset, EndOffset)\r\nReturns the biased standard deviation of the expression within the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionWindowMode': 'WindowMode(SummaryExpression, StartOffset, EndOffset)\r\n Returns the mode of the expression within the window.',
    'DashboardStringId.FunctionDescriptionRunningMax': 'RunningMax(SummaryExpression)\r\nReturns the running maximum of the specified expression from the first row in the window to the current row.\r\n  ',
    'DashboardStringId.FunctionDescriptionRankPercentile': 'RankPercentile(SummaryExpression, ["asc", "desc"])\r\nReturns the percentile rank for the current row in the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionRankDense': 'RankDense(SummaryExpression, ["asc", "desc"])\r\nReturns the dense rank for the current row in the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionWindowSum': 'WindowSum(SummaryExpression, StartOffset, EndOffset)\r\nReturns the sum of the expression within the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionWindowCountDistinct': 'WindowCountDistinct(SummaryExpression, StartOffset, EndOffset)\r\nReturns the distinct count of the expression within the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionStdDevp': 'StdDevp(Value)\r\nReturns the standard deviation of a population, where the population is the entire data to be summarized.',
    'DashboardStringId.FunctionDescriptionSize': 'Size()\r\nReturns the number of rows in the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionMedian': 'Median(Value)\r\nReturns the median of the values in a collection.',
    'DashboardStringId.FunctionDescriptionRankModified': 'RankModified(SummaryExpression, ["asc", "desc"])\r\nReturns the modified competition rank for the current row in the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionWindowMedian': 'WindowMedian(SummaryExpression, StartOffset, EndOffset)\r\nReturns the median of the expression within the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionRunningSum': 'RunningSum(SummaryExpression)\r\nReturns the running sum of the specified expression from the first row in the window to the current row.\r\n  ',
    'DashboardStringId.FunctionDescriptionWindowVarp': 'WindowVarp(SummaryExpression, StartOffset, EndOffset)\r\nReturns the biased variance of the expression within the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionWindowVar': 'WindowVar(SummaryExpression, StartOffset, EndOffset)\r\nReturns the variance of the expression within the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionStdDev': 'StdDev(Value)\r\nReturns an estimate of the standard deviation of a population, where the sample is a subset of the entire population.',
    'DashboardStringId.FunctionDescriptionRankUnique': 'RankUnique(SummaryExpression, ["asc", "desc"])\r\nReturns the unique rank for the current row in the window.\r\n  ',
    'DashboardStringId.FunctionDescriptionVar': 'Var(Value)\r\nReturns an estimate of the variance of a population, where the sample is a subset of the entire population.',
    'DashboardStringId.FunctionDescriptionAggr': 'aggr(SummaryExpression, Dimension1, Dimension2, ...)\r\nUses the detail level and summary function to aggregate underlying data. The level depends on the number of dimensions.',
    'DashboardStringId.FunctionDescriptionAggrJoinRule': "joinRule(dimension, searchValue)\r\nSpecifies the dimension for the 'aggr' function and a column whose values are used in the join operation after aggregation is completed.",
    'DashboardStringId.FunctionDescriptionWindowDefinition': 'w(WindowExpression, partitionByFunction, orderByFunction)\r\nCalculates aggregated values with the specified window function for the window defined by the specified partitioning and ordering.',
    'DashboardStringId.FunctionDescriptionWindowDefinitionPartitionBy': 'partitionBy(column1, column2, ...)\r\nSpecifies the columns by which the data rows are partitioned. The window function is applied to each partition separately.',
    'DashboardStringId.FunctionDescriptionWindowDefinitionOrderBy': 'orderBy(column1, column2, ...)\r\nSpecifies the logical order in which the window function calculation is performed on the rows in the window.',
    'DashboardStringId.FunctionDescriptionWindowDefinitionOrderAsc': 'asc(column)\r\nSpecifies that the values in the specified column are sorted in ascending order. This is the default sort order.',
    'DashboardStringId.FunctionDescriptionWindowDefinitionOrderDesc': 'desc(column)\r\nSpecifies that the values in the specified column are sorted in descending order.',
    'DashboardStringId.AggregateExFunctionDescriptionCountNotNull': 'CountNotNull(Value)\r\nReturns a number of non-null objects in a collection.',
    'DashboardStringId.AggregateExFunctionDescriptionMode': 'Mode(Value)\r\nThe mode of the values.A mode is the value that is repeated more often than any other.',
    'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHour': 'GetDateHour(DateTime)\r\nExtracts the date part with the hour value from the defined DateTime.',
    'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinute': 'GetDateHourMinute(DateTime)\r\nExtracts the date part with the hour and minute values from the defined DateTime.',
    'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinuteSecond': 'GetDateHourMinuteSecond(DateTime)\r\nExtracts the date part with the hour, minute, and second values from the defined DateTime.',
    'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateMonthYear': 'GetDateHourMinuteSecond(DateTime)\r\nExtracts the date part with the hour, minute, and second values from the defined DateTime.',
    'DashboardStringId.FunctionDescriptionGetDateWeekYear': 'GetDateWeekYear(DateTime)\r\nReturns the date that corresponds the first day of the week in the defined DateTime depending on the culture settings.',
    'DashboardStringId.FunctionDescriptionGetDateWeekYear2': "GetDateWeekYear(DateTime, ['FirstDay', 'FirstFullWeek', 'FirstFourDayWeek'])\r\nReturns the date of the first day of the week for a given DateTime. The second parameter determines the rule for calculating the calendar week.",
    'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateQuarterYear': 'GetDateQuarterYear(DateTime)\r\nExtracts the date with the quarter and year from the defined DateTime.',
    'DashboardStringId.FunctionOperatorExFunctionDescriptionGetQuarter': 'GetQuarter(DateTime)\r\nExtracts a quarter from the defined DateTime.',
    'DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfMonth': 'GetWeekOfMonth(DateTime)\r\nExtracts the week of the month from the defined DateTime.',
    'DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfYear': 'GetWeekOfYear(DateTime)\r\nExtracts the week of the year from the defined DateTime.',
    'DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime3': 'MakeDateTime(Year, Month, Day)\r\nReturns a date value constructed from the specified Year, Month and Day.',
    'DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime4': 'MakeDateTime(Year, Month, Day, Hour)\r\nReturns a date value constructed from the specified Year, Month, Day and Hour.',
    'DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime5': 'MakeDateTime(Year, Month, Day, Hour, Minute)\r\nReturns a date value constructed from the specified Year, Month, Day, Hour and Minute.',
    'DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime6': 'MakeDateTime(Year, Month, Day, Hour, Minute, Second)\r\nReturns a date value constructed from the specified Year, Month, Day, Hour, Minute and Second.',
    'DashboardStringId.FunctionOperatorExFunctionDescriptionToBoolean': 'ToBoolean(Value)\r\nConverts Value to an equivalent Boolean value.',
    'DashboardStringId.FunctionOperatorExFunctionDescriptionToDateTime': 'ToDateTime(Value)\r\nConverts Value to a DateTime value.',
    'DashboardStringId.SparklineIndicationModeLine': 'Line',
    'DashboardStringId.SparklineIndicationModeArea': 'Area',
    'DashboardStringId.SparklineIndicationModeBar': 'Bar',
    'DashboardStringId.SparklineIndicationModeWinLoss': 'Win/Loss',
    'DashboardStringId.DefaultNameDateFilterItem': 'Date Filter',
    'DashboardWebStringId.DateFilter.FilterType': 'Filter Type',
    'DashboardWebStringId.DateFilter.FilterTypeExact': 'Exact',
    'DashboardWebStringId.DateFilter.FilterTypeAfter': 'After',
    'DashboardWebStringId.DateFilter.FilterTypeBefore': 'Before',
    'DashboardWebStringId.DateFilter.FilterTypeBetween': 'Between',
    'DashboardWebStringId.DateFilter.ArrangementMode': 'Arrangement Mode',
    'DashboardWebStringId.DateFilter.ArrangementModeAutoHeight': 'Auto Height',
    'DashboardWebStringId.DateFilter.ArrangementModeHorizontal': 'Horizontal',
    'DashboardWebStringId.DateFilter.ArrangementModeVertical': 'Vertical',
    'DashboardWebStringId.DateFilter.DatePickerLocation': 'Date Picker Location',
    'DashboardWebStringId.DateFilter.DatePickerLocationFar': 'Far',
    'DashboardWebStringId.DateFilter.DatePickerLocationNear': 'Near',
    'DashboardWebStringId.DateFilter.DatePickerLocationHidden': 'Hidden',
    'DashboardStringId.DateFilterDisplayTextPattern': 'Display Text Pattern',
    'DashboardStringId.DateFilterDatePickerButtonDefaultText': 'Set Filter...',
    'DashboardStringId.FromDatePeriodCaption': 'From {0}',
    'DashboardStringId.ToDatePeriodCaption': 'To {0}',
    'DashboardStringId.FromToDatePeriodCaption': '{0} - {1}',
    'DashboardStringId.UniqueNameValidationMessage': 'A name should be unique.',
    'DashboardStringId.GridTotalAutoTemplate': '{0}',
    'DashboardStringId.GridTotalValueTemplate': '{0}',
    'DashboardStringId.GridTotalTemplate': '{0} = {1}',
    'DashboardStringId.GridTotalTypeCount': 'Count',
    'DashboardStringId.GridTotalTypeMin': 'Min',
    'DashboardStringId.GridTotalTypeMax': 'Max',
    'DashboardStringId.GridTotalTypeAvg': 'Avg',
    'DashboardStringId.GridTotalTypeSum': 'Sum',
    'DashboardStringId.ActionShowDataInspector': 'Inspect Data',
    'DashboardStringId.InspectedData': 'Inspected Data:',
    'DashboardStringId.InspectedTypeFormatString': '({0} Data)',
    'DashboardStringId.AggregatedDataType': 'Aggregated',
    'DashboardStringId.RawDataType': 'Raw',
    'DashboardStringId.OLAPUnavailableRawData': 'OLAP Data Source - Data Unavailable',
    'DashboardStringId.SparklineValuesSeparator': ', ',
    'DashboardStringId.SparklineArgumentValueSeparator': ' - ',
    'DashboardWebStringId.Grid.FilterClause.ApplyFilter': 'Apply filter',
    'DashboardWebStringId.Grid.FilterClause.ResetOperation': 'Reset',
    'DashboardWebStringId.Grid.FilterClause.Contains': 'Contains',
    'DashboardWebStringId.Grid.FilterClause.DoesNotContain': 'Does not contain',
    'DashboardWebStringId.Grid.FilterClause.StartsWith': 'Starts with',
    'DashboardWebStringId.Grid.FilterClause.EndsWith': 'Ends with',
    'DashboardWebStringId.Grid.FilterClause.Equals': 'Equals',
    'DashboardWebStringId.Grid.FilterClause.DoesNotEqual': 'Does not equal',
    'DashboardWebStringId.Grid.FilterClause.Less': 'Less than',
    'DashboardWebStringId.Grid.FilterClause.Greater': 'Greater than',
    'DashboardWebStringId.Grid.FilterClause.LessOrEqual': 'Less than or equal to',
    'DashboardWebStringId.Grid.FilterClause.GreaterOrEqual': 'Greater than or equal to',
    'DashboardWebStringId.Grid.FilterClause.Between': 'Between',
    'DashboardWebStringId.Grid.FilterClause.BetweenStart': 'Start',
    'DashboardWebStringId.Grid.FilterClause.BetweenEnd': 'End',
    'DashboardWebStringId.AccordionTab.Content': 'Content',
    'DashboardWebStringId.TextBoxItemEditor.NoFields': 'No dashboard fields',
    'DashboardWebStringId.TextBoxItemEditor.InsertField': 'Insert Field',
    'DashboardWebStringId.TextBoxItemEditor.EditTextButton': 'Edit Text',
    'DashboardWebStringId.TextBoxItemEditor.DialogCaption': 'Text Editor',
    'DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose': 'Save and Close',
    'DashboardWebStringId.TextBoxItemEditor.DialogClose': 'Close',
    'DashboardStringId.StartDate': '(Start Date)',
    'DashboardStringId.EndDate': '(End Date)',
    'DashboardWebStringId.AccordionTab.MeasureFilter': 'Filter',
    'DashboardStringId.FunctionDescriptionAggregateFilter': 'filter(SummaryExpression, filterCriteria)\r\nFilters underlying data with specified filter criteria and aggregates filtered data using current detail level and the summary function.',
    'DashboardWebStringId.TabPages': 'Tab Pages',
    'DashboardWebStringId.More': 'More',
    'DashboardStringId.MeasureFilterCaptionFormatString': 'Filtered {0}',
};
function getLocalizationById(key) {
    return dx_analytics_core_1.default.Analytics.Internal.localize(key) || key;
}
exports.getLocalizationById = getLocalizationById;
function formatLocalizable(localizationId, arg1) {
    return string_1.format(getLocalizationById(localizationId), getLocalizationById(arg1));
}
exports.formatLocalizable = formatLocalizable;
function getDefaultLocalization() {
    return exports.defaultLocalization;
}
exports.getDefaultLocalization = getDefaultLocalization;


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
exports.KnownTabs = {
    Binding: 'Binding',
    DataShaping: 'DataShaping',
    NumericFormat: 'NumericFormat',
    DateTimeFormat: 'DateTimeFormat',
    TopN: 'TopN',
    Interactivity: 'Interactivity',
    Common: 'Common',
    Totals: 'Totals',
    AxisX: 'AxisX',
    AxisY: 'AxisY',
    Legend: 'Legend',
    ColoringOptions: 'ColoringOptions',
    ColorLegend: 'ColorLegend',
    WeightedLegend: 'WeightedLegend',
    Layout: 'Layout',
    ConditionalFormatting: 'ConditionalFormatting',
    FormatRuleCommon: 'FormatRuleBinding',
    FormatRuleCondition: 'FormatRuleCondition',
    FormatRuleMisc: 'FormatRuleStyle',
    CustomRanges: 'CustomRanges',
    Type: 'Type',
    PointLabels: 'PointLabels',
    DeltaOptions: 'DeltaOptions',
    ScaleOptions: 'ScaleOptions',
    SparklineOptions: 'SparklineOptions',
    CardTemplates: 'CardTemplates',
    DeltaFormats: 'DeltaFormats',
    CardTemplateSettings: 'CardTemplateSettings',
    ContentArrangement: 'ContentArrangement',
    ShapeLabels: 'ShapeLabels',
    Labels: 'Labels',
    DataLayout: 'DataDesign',
    DataItemsGroup: 'DataItemsGroup',
    ColorScheme: 'ColorScheme',
    Calculations: 'Calculations',
    Expression: 'Expression',
    TileOptions: 'TileOptions',
    UnwrappedDataItem: 'UnwrappedDataItem',
    CustomMapOptions: 'CustomMapOptions',
    MeasureFilter: 'MeasureFilter',
    TabContainer: 'TabContainer'
};
var AccordionTab = (function () {
    function AccordionTab(name, category, tabModel) {
        var _this = this;
        this.name = name;
        this.category = category;
        this._tabModel = ko.observable();
        this.orderNo = undefined;
        this.visible = ko.computed(function () {
            var tabModel = _this.tabModel();
            return !!(tabModel && ((tabModel.isEmpty === undefined) || !tabModel.isEmpty()));
        });
        if (tabModel) {
            this.tabModel(tabModel);
        }
    }
    AccordionTab.prototype.grabData = function (tab) {
        var oldModel = this.tabModel(), newModel = tab.tabModel();
        if (oldModel === newModel) {
            return;
        }
        this.tabModel(tab.tabModel());
        this.disposeTabModel(oldModel);
    };
    Object.defineProperty(AccordionTab.prototype, "tabModel", {
        get: function () { return this._tabModel; },
        set: function (model) {
            var oldTabModel = this._tabModel();
            this._tabModel(model);
            this.disposeTabModel(oldTabModel);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AccordionTab.prototype, "summary", {
        get: function () {
            return this.tabModel() && this.tabModel().summary;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AccordionTab.prototype, "buttons", {
        get: function () {
            return this.tabModel() && this.tabModel().buttons;
        },
        enumerable: true,
        configurable: true
    });
    AccordionTab.prototype.unsubscribeTabModel = function (tabModel) {
        tabModel && tabModel.summary && tabModel.summary.dispose();
    };
    AccordionTab.prototype.disposeTabModel = function (tabModel) {
        if (!tabModel) {
            return;
        }
        this.unsubscribeTabModel(tabModel);
        tabModel.unbindModel && tabModel.unbindModel();
    };
    AccordionTab.prototype.dispose = function () {
        this.disposeTabModel(this.tabModel());
    };
    return AccordionTab;
}());
exports.AccordionTab = AccordionTab;
var ContentInHeaderAccordionTab = (function (_super) {
    __extends(ContentInHeaderAccordionTab, _super);
    function ContentInHeaderAccordionTab() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.orderNo = 50;
        _this.style = 'dx-dashboard-item-type-selector';
        _this.headerTemplate = 'dx-dashboard-content-in-tab-header-template';
        _this.hasNoBorder = true;
        _this.onTitleClick = function (tabModel, data, event) {
            event.stopPropagation();
            return false;
        };
        return _this;
    }
    return ContentInHeaderAccordionTab;
}(AccordionTab));
exports.ContentInHeaderAccordionTab = ContentInHeaderAccordionTab;
var TypeAccordionTab = (function (_super) {
    __extends(TypeAccordionTab, _super);
    function TypeAccordionTab() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.orderNo = 50;
        _this.style = 'dx-dashboard-item-type-selector';
        _this.headerTemplate = 'dx-dashboard-container-type-selector-header';
        _this.tabTemplate = 'dx-dashboard-container-type-selector-full';
        _this.hasNoBorder = true;
        _this.onTitleClick = function (tabModel, data, event) {
            var model = ko.unwrap(tabModel);
            if (model) {
                model.headerClick(data, event);
            }
        };
        return _this;
    }
    return TypeAccordionTab;
}(AccordionTab));
exports.TypeAccordionTab = TypeAccordionTab;
var StyleAccordionTab = (function (_super) {
    __extends(StyleAccordionTab, _super);
    function StyleAccordionTab() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.orderNo = 55;
        _this.style = 'dx-dashboard-item-type-selector';
        _this.headerTemplate = 'dx-dashboard-container-style-selector-header';
        _this.hasNoBorder = true;
        _this.onTitleClick = function (tabModel, data, event) {
            var model = ko.unwrap(tabModel);
            if (model) {
                model.headerClick(data, event);
            }
        };
        return _this;
    }
    return StyleAccordionTab;
}(AccordionTab));
exports.StyleAccordionTab = StyleAccordionTab;
var ItemGroupAccordionTab = (function (_super) {
    __extends(ItemGroupAccordionTab, _super);
    function ItemGroupAccordionTab() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.style = 'dx-dashboard-items-wrapper';
        _this.orderNo = 60;
        _this.headerTemplate = 'dx-dashboard-data-items-header';
        _this.hasNoBorder = true;
        return _this;
    }
    Object.defineProperty(ItemGroupAccordionTab.prototype, "headerHeight", {
        get: function () { return this.tabModel().model()._getBindingModel().length * 40 + 15; },
        enumerable: true,
        configurable: true
    });
    return ItemGroupAccordionTab;
}(AccordionTab));
exports.ItemGroupAccordionTab = ItemGroupAccordionTab;
var BindingAccordionTab = (function (_super) {
    __extends(BindingAccordionTab, _super);
    function BindingAccordionTab(name, category) {
        var _this = _super.call(this, name, category) || this;
        _this.name = name;
        _this.category = category;
        _this.tabTemplate = 'dx-dashboard-data-item-general';
        _this.orderNo = 70;
        return _this;
    }
    Object.defineProperty(BindingAccordionTab.prototype, "summaryHint", {
        get: function () {
            return this.tabModel() && this.tabModel().summaryHint;
        },
        enumerable: true,
        configurable: true
    });
    BindingAccordionTab.prototype.unsubscribeTabModel = function (tabModel) {
        _super.prototype.unsubscribeTabModel.call(this, tabModel);
        tabModel && tabModel.summaryHint && tabModel.summaryHint.dispose();
    };
    BindingAccordionTab.prototype.grabData = function (tab) {
        var oldModel = this.tabModel(), newModel = tab.tabModel();
        if (oldModel == newModel) {
            return;
        }
        if (oldModel.dataItemLink !== newModel.dataItemLink) {
            this.tabModel(tab.tabModel());
            this.disposeTabModel(oldModel);
        }
        else {
            this.unsubscribeTabModel(oldModel);
            oldModel.additionalProperties(newModel.additionalProperties());
            oldModel.dataMemberPath(newModel.dataMemberPath());
            oldModel.choosenField(newModel.choosenField());
            oldModel.dataItemLink = newModel.dataItemLink;
            oldModel.dataSourceBrowser = newModel.dataSourceBrowser;
            oldModel.summary = newModel.summary;
            oldModel.summaryHint = newModel.summaryHint;
        }
    };
    return BindingAccordionTab;
}(AccordionTab));
exports.BindingAccordionTab = BindingAccordionTab;


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var serializable_model_1 = __webpack_require__(5);
var _data_item_1 = __webpack_require__(20);
var DataItem = (function (_super) {
    __extends(DataItem, _super);
    function DataItem(dataItemJSON, serializer) {
        if (dataItemJSON === void 0) { dataItemJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, dataItemJSON, serializer) || this;
    }
    DataItem.prototype.getInfo = function () {
        return _data_item_1.dataItemSerializationsInfo;
    };
    DataItem.prototype.grabFrom = function (dataItem) {
        this.name(dataItem.name());
        this.numericFormat.unit(dataItem.numericFormat.unit());
        this.numericFormat.precision(dataItem.numericFormat.precision());
        this.numericFormat.includeGroupSeparator(dataItem.numericFormat.includeGroupSeparator());
        this.numericFormat.formatType(dataItem.numericFormat.formatType());
        this.numericFormat.currencyCultureName(dataItem.numericFormat.currencyCultureName());
        this.dateTimeFormat.yearFormat(dataItem.dateTimeFormat.yearFormat());
        this.dateTimeFormat.quarterFormat(dataItem.dateTimeFormat.quarterFormat());
        this.dateTimeFormat.monthFormat(dataItem.dateTimeFormat.monthFormat());
        this.dateTimeFormat.dayOfWeekFormat(dataItem.dateTimeFormat.dayOfWeekFormat());
        this.dateTimeFormat.dateFormat(dataItem.dateTimeFormat.dateFormat());
        this.dateTimeFormat.dateHourFormat(dataItem.dateTimeFormat.dateHourFormat());
        this.dateTimeFormat.dateHourMinuteFormat(dataItem.dateTimeFormat.dateHourMinuteFormat());
        this.dateTimeFormat.dateTimeFormat(dataItem.dateTimeFormat.dateTimeFormat());
        this.dateTimeFormat.hourFormat(dataItem.dateTimeFormat.hourFormat());
        this.dateTimeFormat.exactDateFormat(dataItem.dateTimeFormat.exactDateFormat());
    };
    DataItem.prototype.isDefinitionEquals = function (dataItem) {
        return !!dataItem && this.dataMember() === dataItem.dataMember();
    };
    DataItem.prototype.getUniqueNamePrefix = function () {
        return 'DataItem';
    };
    DataItem.typesMap = {
        Integer: 'integer',
        Float: 'double',
        Double: 'double',
        Decimal: 'double',
        DateTime: 'date',
        Text: 'string',
        String: 'string',
        Bool: 'Bool',
        Boolean: 'Bool'
    };
    return DataItem;
}(serializable_model_1.TypedSerializableModel));
exports.DataItem = DataItem;
var AcceptableShapingType;
(function (AcceptableShapingType) {
    AcceptableShapingType[AcceptableShapingType["Number"] = 0] = "Number";
    AcceptableShapingType[AcceptableShapingType["String"] = 1] = "String";
    AcceptableShapingType[AcceptableShapingType["RangeDate"] = 2] = "RangeDate";
    AcceptableShapingType[AcceptableShapingType["Attribute"] = 3] = "Attribute";
    AcceptableShapingType[AcceptableShapingType["Hidden"] = 4] = "Hidden";
})(AcceptableShapingType = exports.AcceptableShapingType || (exports.AcceptableShapingType = {}));
var DataItemLink = (function (_super) {
    __extends(DataItemLink, _super);
    function DataItemLink(dataItemProvider, dataItemLinkJSON, serializer) {
        if (dataItemLinkJSON === void 0) { dataItemLinkJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, dataItemLinkJSON, serializer) || this;
        _this._dataItemProvider = ko.observable(null);
        _this._specifics = {
            acceptableShapingType: AcceptableShapingType.Number,
            customOptionsProperties: [],
            customDataShapingProperties: [],
            isAttribute: false,
            skipFormatting: false,
            supportsTopNOther: true,
            forceAddOlapExactDateFormat: false
        };
        _this._updateProvider(dataItemProvider);
        _this.dataItem = ko.pureComputed({
            read: function () {
                return !!_this._dataItemProvider() ? _this._dataItemProvider()._getDataItem(_this.uniqueName()) : undefined;
            },
            write: function (value) {
                return _this.uniqueName(value && value.uniqueName());
            }
        });
        return _this;
    }
    DataItemLink.create = function (dataItemProvider, dataItemLink) {
        var link = new DataItemLink(dataItemProvider, { '@DefaultId': dataItemLink.uniqueName() }, undefined);
        return link;
    };
    DataItemLink.prototype.getInfo = function () {
        return _data_item_1.dataItemLinkSerializationsInfo;
    };
    DataItemLink.prototype._getDefaultItemType = function () {
        return undefined;
    };
    DataItemLink.prototype._updateProvider = function (dataItemProvider) {
        this._dataItemProvider(dataItemProvider);
    };
    return DataItemLink;
}(serializable_model_1.TypedSerializableModel));
exports.DataItemLink = DataItemLink;


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var _item_data_axis_builder_1 = __webpack_require__(241);
var _item_data_axis_helper_1 = __webpack_require__(167);
var _item_data_manager_1 = __webpack_require__(406);
var _item_data_tuple_1 = __webpack_require__(98);
var _default_1 = __webpack_require__(6);
var special_values_1 = __webpack_require__(39);
var _common_1 = __webpack_require__(35);
var _utils_1 = __webpack_require__(3);
var _item_data_axis_names_1 = __webpack_require__(34);
var color_scheme_definition_1 = __webpack_require__(256);
var color_scheme_entry_1 = __webpack_require__(104);
var dashboard_state_1 = __webpack_require__(125);
var data_item_1 = __webpack_require__(8);
var dimension_1 = __webpack_require__(43);
var measure_1 = __webpack_require__(59);
var _dimension_1 = __webpack_require__(71);
var _measure_1 = __webpack_require__(70);
var specific_calc_window_definition_1 = __webpack_require__(261);
var _dimension_filter_values_1 = __webpack_require__(175);
var _data_field_1 = __webpack_require__(14);
var card_item_delta_format_rule_1 = __webpack_require__(126);
var card_item_format_rule_1 = __webpack_require__(129);
var grid_item_format_rule_1 = __webpack_require__(280);
var pivot_item_format_rule_1 = __webpack_require__(281);
var _array_utils_1 = __webpack_require__(49);
var _dashboard_component_name_generator_1 = __webpack_require__(254);
var _date_utils_1 = __webpack_require__(41);
var _expanding_manager_1 = __webpack_require__(457);
var _helper_classes_1 = __webpack_require__(36);
var _knockout_utils_1 = __webpack_require__(17);
var _obsolete_dashboard_state_1 = __webpack_require__(458);
var _utils_2 = __webpack_require__(18);
var dashboard_item_1 = __webpack_require__(60);
var _data_dashboard_item_1 = __webpack_require__(26);
var _limit_data_state_1 = __webpack_require__(459);
var DataDashboardItem = (function (_super) {
    __extends(DataDashboardItem, _super);
    function DataDashboardItem(dashboardItemJSON, serializer, info) {
        if (dashboardItemJSON === void 0) { dashboardItemJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        if (info === void 0) { info = undefined; }
        var _this = _super.call(this, dashboardItemJSON, serializer, info) || this;
        _this.hiddenDimensions = ko.observableArray([]);
        _this.hiddenMeasures = ko.observableArray([]);
        _this.colorScheme = ko.observableArray();
        _this._masterFilterMode = ko.computed(function () { return _this._getMasterFilterMode(); });
        _this._isSingleMasterFilter = ko.computed(function () { return _this._masterFilterMode() === 'Single'; });
        _this._isMultipleMasterFilter = ko.computed(function () { return _this._masterFilterMode() === 'Multiple'; });
        _this._isDrillDownEnabled = ko.computed(function () { return _this._getDrillDownEnabled(); });
        _this._isIgnoreMasterFilter = ko.computed(function () { return _this._getIgnoreMasterFilter(); });
        _this._isMasterFilter = ko.computed(function () { return _this._getIsMasterFilter(); });
        _this._clearMasterFilterSupported = ko.computed(function () { return _this._getClearMasterFilterSupported(); });
        _this._fullRange = ko.observable();
        _this._selectedElementIndex = ko.observable();
        _this._beforeMasterFilterSetByUserInteraction = null;
        _this._afterMasterFilterSetByUserInteraction = null;
        _this._drillDownChangedByUserInteraction = null;
        _this._masterFilterItems = ko.observable([]);
        _this._dataManager = ko.observable();
        _this._drillDownValues = ko.observableArray([]);
        _this._clientState = ko.observable();
        _this._dataRequestArgs = ko.observable();
        _this._expandingManager = new _expanding_manager_1.ExpandingManager();
        _this._selectionValues = ko.observable();
        _this._supportedUIStates = ko.observable(['error', 'empty', 'loading']);
        _this._limitDataState = new _limit_data_state_1.LimitDataState();
        _this._isExcludingAllFilter = ko.computed(function () { return false; });
        _this._processItemSelectionChange = function (itemElement, mode, selection) {
            if (mode === _common_1.viewerActions.setMasterFilter || mode === _common_1.viewerActions.setMultipleValuesMasterFilter) {
                _this._beforeMasterFilterSetByUserInteraction && _this._beforeMasterFilterSetByUserInteraction();
                var itemState = _utils_1.deepExtend({}, _this._state());
                itemState = _this._removeSelectionFromState(itemState);
                itemState = _this._setSelectionToState(itemState, selection);
                _this._setState(itemState);
                _this._afterMasterFilterSetByUserInteraction && _this._afterMasterFilterSetByUserInteraction();
            }
            else if (mode === _common_1.viewerActions.drillDown) {
                _this._drillDownChangedByUserInteraction && _this._drillDownChangedByUserInteraction();
                _this._drillDownValues.push(selection[0]);
                _this._setSelectionData(null);
            }
        };
        _this._processItemDrillUp = function () {
            _this._drillDownChangedByUserInteraction && _this._drillDownChangedByUserInteraction();
            var drillValue = _this._drillDownValues.pop();
            _this._selectionValues(_this._isMasterFilter() ? [[drillValue]] : null);
        };
        _this._processItemClearMasterFilter = function (itemElement) {
            _this._beforeMasterFilterSetByUserInteraction && _this._beforeMasterFilterSetByUserInteraction();
            var itemState = _utils_1.deepExtend({}, _this._state());
            itemState = _this._removeSelectionFromState(itemState);
            _this._setState(itemState);
            _this._afterMasterFilterSetByUserInteraction && _this._afterMasterFilterSetByUserInteraction();
        };
        _this._processItemSetPredefinedPeriod = function (periodName) {
            var itemState = _utils_1.deepExtend({}, _this._state());
            itemState = _this._removeSelectionFromState(itemState);
            itemState = _this._setPredefinedPeriodToState(itemState, periodName);
            _this._setState(itemState);
        };
        _this._processContentElementSelection = function (itemName, args) {
            _this._selectedElementIndex(args.index);
        };
        _this._processDataRequest = function () { };
        _this._processItemClientStateUpdate = function (itemName, clientState) {
            _this._setClientState(clientState);
        };
        _this._processExpandingStateChanged = function (expandingParams) {
            _this._expandingManager.onViewStateChanged(expandingParams);
        };
        _this._processItemExpandingChange = function (expandingParams) {
            _this._expandingManager.setExpandingParams(expandingParams);
            _this._dataQueryParams.notifySubscribers();
        };
        _this.dataItems = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(dashboardItemJSON.DataItems, function (dataItemJSON) { return DataDashboardItem._createDataItem(dataItemJSON['@ItemType'], dataItemJSON, serializer); });
        _this.formatRules = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(dashboardItemJSON.FormatRules, function (rule) { return DataDashboardItem._createFormatRule(_this, rule, serializer); });
        _this.__hiddenDimensions = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(dashboardItemJSON.HiddenDimensions, function (item) { return new data_item_1.DataItemLink(_this, item, serializer); });
        _this.__hiddenMeasures = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(dashboardItemJSON.HiddenMeasures, function (item) { return new data_item_1.DataItemLink(_this, item, serializer); });
        _this._subscribeDataItemLinkArrays(_data_dashboard_item_1.hiddenDimensions, _data_dashboard_item_1.hiddenMeasures);
        _this.colorScheme(dx_analytics_core_1.default.Analytics.Utils.deserializeArray(dashboardItemJSON.ColorScheme, function (item) { return new color_scheme_entry_1.ColorSchemeEntry(item, serializer, _this.componentName(), _this.name()); })());
        _this.__hiddenMeasures.subscribe(function (links) {
            _this._setLinkCollectionAcceptableShapingType(links, data_item_1.AcceptableShapingType.Hidden);
        });
        _this._setLinkCollectionAcceptableShapingType(_this.__hiddenMeasures(), data_item_1.AcceptableShapingType.Hidden);
        _this._componentNameGenerator = new _dashboard_component_name_generator_1.DashboardUniqueNameGenerator('uniqueName', 0, _this.dataItems);
        _this._state = ko.computed(function () {
            var state = new dashboard_state_1.ItemState();
            if (_this._drillDownValues().length) {
                state.DrillDownValues = _date_utils_1.toStringArray(_this._drillDownValues());
            }
            if (_this._selectionValues()) {
                state.MasterFilterValues = _date_utils_1.toStringArray(_this._selectionValues());
            }
            if (_this._selectedElementIndex()) {
                state.SelectedLayerIndex = _this._selectedElementIndex();
            }
            return state;
        });
        _this._actions = ko.computed({
            read: function () {
                var newValue = [];
                var interactivityDimensionCount = _this._interactivityDimensions.length;
                var drillDownValuesCount = _this._drillDownValues().length;
                if (_this._isMasterFilter() && interactivityDimensionCount > 0) {
                    newValue.push(_common_1.viewerActions.setMasterFilter);
                }
                if (_this._isMultipleMasterFilter() && interactivityDimensionCount > 0) {
                    newValue.push(_common_1.viewerActions.setMultipleValuesMasterFilter);
                }
                if (_this._isDrillDownEnabled() && (drillDownValuesCount < (interactivityDimensionCount - 1))) {
                    newValue.push(_common_1.viewerActions.drillDown);
                }
                var isPreviousLevelSelection = false;
                if (drillDownValuesCount > 0) {
                    newValue.push(_common_1.viewerActions.drillUp);
                    if (_this._selectionValues() && _this._selectionValues()[0] && _this._selectionValues()[0][0] === _this._drillDownValues()[drillDownValuesCount - 1]) {
                        isPreviousLevelSelection = true;
                    }
                }
                if (_this._hasSelection() && !isPreviousLevelSelection) {
                    newValue.push(_common_1.viewerActions.clearMasterFilter);
                }
                return newValue;
            },
            deferEvaluation: true
        });
        _this._outputFilter = ko.computed(function () {
            if (!_this._isMasterFilter())
                return undefined;
            var result = undefined, serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(), selectionValues = _this._selectionValues(), selectionValuesCount = selectionValues ? selectionValues.length : 0, drillDownValuesCount = _this._drillDownValues.peek().length, dimensionality = selectionValuesCount > 0 ? selectionValues[0].length : 0, fullRange = _this._fullRange();
            if (selectionValuesCount > 0 || drillDownValuesCount > 0) {
                result = {
                    dimensions: _this._interactivityDimensions.slice(0, drillDownValuesCount + dimensionality).map(function (dimension) { return serializer.serialize(dimension); })
                };
                if (result.dimensions.length === 1 && selectionValuesCount === 1 && dimensionality === 2) {
                    result.range = selectionValues[0];
                }
                else {
                    result.values = selectionValuesCount > 0 ? selectionValues.map(function (arr) { return _this._drillDownValues.peek().concat(arr); }) : [_this._drillDownValues.peek()];
                }
            }
            if (!result) {
                if (fullRange && fullRange.length && _this._interactivityDimensions.length) {
                    result = {
                        dimensions: _this._interactivityDimensions.map(function (dim) { return serializer.serialize(dim); }),
                        range: fullRange
                    };
                }
            }
            if (_this._isExcludingAllFilter()) {
                result = result || {};
                result.isExcludingAllFilter = true;
            }
            result = _this._performOutputFilterOptimization(result);
            return result;
        });
        _this._dataQueryParams = ko.computed(function () {
            var result = {};
            if (_this.dataItems().length > 0) {
                var externalFilter = _this._masterFilterItems().filter(function (item) { return !!item._outputFilter(); }).map(function (item) { return item._outputFilter(); });
                if (externalFilter.length) {
                    result.Filter = externalFilter.map(function (f) {
                        var v = {};
                        if (!!f.dimensions) {
                            v.dimensions = f.dimensions;
                        }
                        if (!!f.values) {
                            v.values = _date_utils_1.toStringArray(f.values);
                        }
                        if (!!f.range) {
                            v.range = _date_utils_1.toStringArray(f.range);
                        }
                        if (f.isExcludingAllFilter != undefined) {
                            v.isExcludingAllFilter = f.isExcludingAllFilter;
                        }
                        return v;
                    });
                }
                if (_this._drillDownValues().length) {
                    result.DrillDown = _date_utils_1.toStringArray(_this._drillDownValues());
                }
                if (_this._dataRequestArgs()) {
                    result.ClientState = _this._dataRequestArgs();
                }
                if (_this._selectedElementIndex()) {
                    result.SelectedElementIndex = _this._selectedElementIndex();
                }
            }
            return result;
        });
        _this._colorableItems = ko.observable([_this]);
        _this._uiState && _this._uiState['dispose'] && _this._uiState['dispose']();
        _this._uiState = ko.computed({
            read: function () {
                var result = 'live', errorState = _this._errorState(), previousState = _this._uiState(), paneValid = _this._paneContentHolder.valid(), viewerItemCreated = _this._viewerItemCreated(), hasDataItems = !!_this.dataSource.peek() && !!_this.dataItems.peek().length;
                if (_this._stateSupported('error') && errorState) {
                    result = 'error';
                }
                else if (_this._stateSupported('empty') && !hasDataItems) {
                    result = 'empty';
                }
                else if (_this._stateSupported('loading') && !paneValid && (!viewerItemCreated || 'empty' === previousState || 'error' === previousState)) {
                    result = 'loading';
                }
                else {
                    result = 'live';
                }
                return result;
            },
            deferEvaluation: true
        });
        ko.computed(function () {
            if (_this._selectedElementIndex() >= _this._getLayersCount()) {
                _this._selectedElementIndex(null);
            }
        });
        ko.computed(function () {
            _this.dataItems()
                .map(function (d) { return d instanceof measure_1.Measure ? d.windowDefinition.windowDefinition() : null; })
                .filter(function (def) { return def != null; })
                .forEach(function (def) {
                if (def instanceof specific_calc_window_definition_1.SpecificWindowDefinition) {
                    def.dimensions().forEach(function (link) { return link._updateProvider(_this); });
                }
            });
        });
        ko.computed(function () {
            if (!_this.dataSource() || _this.dataItems().length === 0) {
                _this._dataManager(null);
            }
        });
        _knockout_utils_1.subscribeToArrayItemProperties(_this.dataItems, function (dataItem) {
            if (dataItem instanceof dimension_1.Dimension) {
                return dataItem.dateTimeGroupInterval.subscribe(function () {
                    _this._removeFromFilters(dataItem);
                });
            }
            return null;
        });
        return _this;
    }
    DataDashboardItem._createDataItem = function (itemTypeName, dataItemJSON, serializer) {
        var itemType = DataDashboardItem._itemTypesMap[itemTypeName];
        return new itemType(dataItemJSON, serializer);
    };
    DataDashboardItem._updateDataItemByField = function (dataField, newDataItem, summaryInfo) {
        newDataItem.dataMember(dataField.dataMember());
        if (newDataItem instanceof measure_1.Measure) {
            if (!_data_field_1.DataField.isOlap(dataField.dataMember())) {
                if (!!summaryInfo && summaryInfo.oldDataItem instanceof measure_1.Measure) {
                    var avaliableSummaryTypes = DataDashboardItem._getAvaliableSummaryTypeInfo(dataField, summaryInfo.acceptableShapingType, newDataItem);
                    if (avaliableSummaryTypes) {
                        if (Object.keys(avaliableSummaryTypes.values).indexOf(summaryInfo.oldDataItem.summaryType()) !== -1) {
                            newDataItem.summaryType(summaryInfo.oldDataItem.summaryType());
                        }
                        else {
                            newDataItem.summaryType(avaliableSummaryTypes.defaultVal);
                        }
                    }
                }
                else {
                    newDataItem.summaryType(getSummaryType(dataField));
                }
            }
            else if (!!dataField['defaultNumericFormat']) {
                var defaultNumericFormat = dataField['defaultNumericFormat'];
                newDataItem.numericFormat.currencyCultureName(defaultNumericFormat.CurrencyCultureName);
                newDataItem.numericFormat.formatType(defaultNumericFormat.FormatType);
                newDataItem.numericFormat.includeGroupSeparator(defaultNumericFormat.IncludeGroupSeparator);
                newDataItem.numericFormat.precision(defaultNumericFormat.Precision);
                newDataItem.numericFormat.unit(defaultNumericFormat.Unit);
            }
        }
    };
    DataDashboardItem._createFormatRule = function (item, formatRuleJSON, serializer) {
        var typeName = formatRuleJSON['@ItemType'];
        var type = DataDashboardItem._formatRuleTypesMap[typeName];
        return new type(formatRuleJSON, serializer);
    };
    DataDashboardItem._getAvaliableSummaryTypeInfo = function (dataField, acceptableShapingType, dataItem) {
        if (!!dataItem && dataItem instanceof measure_1.Measure && !!dataItem.expression())
            return null;
        if (!_data_field_1.DataField.isOlap(dataField.dataMember()) && !(dataField.isAggregate && dataField.isAggregate())) {
            if (_data_field_1.DataField.isNumeric(dataField)) {
                return _measure_1.summaryTypeNumericToAny;
            }
            else {
                switch (acceptableShapingType) {
                    case data_item_1.AcceptableShapingType.Number:
                        return _measure_1.summaryTypeNonNumericToNumeric;
                    case data_item_1.AcceptableShapingType.Attribute:
                        return _measure_1.summaryTypeAttribute;
                    case data_item_1.AcceptableShapingType.String:
                    case data_item_1.AcceptableShapingType.Hidden:
                        return _measure_1.summaryTypeNonNumericToString;
                }
            }
        }
        return null;
    };
    Object.defineProperty(DataDashboardItem.prototype, "_actualSelectionValues", {
        get: function () {
            return this._selectionValues;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataDashboardItem.prototype, "_canColorByMeasures", {
        get: function () { return this._getCanColorByMeasures(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataDashboardItem.prototype, "_canColorByDimensions", {
        get: function () { return this._getCanColorByDimensions(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataDashboardItem.prototype, "_isLocallyColored", {
        get: function () {
            return (this._getAreMeasuresColoredByDefault() || this._getCanColorByDimensions()) && !this._getUseGlobalColors();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataDashboardItem.prototype, "_isGloballyColored", {
        get: function () {
            return (this._getAreMeasuresColoredByDefault() || this._getCanColorByDimensions()) && this._getUseGlobalColors();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataDashboardItem.prototype, "_interactivityDimensions", {
        get: function () {
            return this._getInteractivityDimensionLinks().map(function (link) { return link.dataItem(); }).filter(function (item) { return !!item; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataDashboardItem.prototype, "_dimensions", {
        get: function () {
            return this.dataItems && this.dataItems().filter(function (item) { return item instanceof dimension_1.Dimension; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataDashboardItem.prototype, "_measures", {
        get: function () {
            return this.dataItems && this.dataItems().filter(function (item) { return item instanceof measure_1.Measure; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataDashboardItem.prototype, "_uniqueDataItems", {
        get: function () {
            var uniqueDataItems = [];
            this.dataItems.peek().forEach(function (dataItem) {
                if (uniqueDataItems.filter(function (item) { return item.isDefinitionEquals(dataItem); }).length === 0) {
                    uniqueDataItems.push(dataItem);
                }
            });
            return uniqueDataItems;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataDashboardItem.prototype, "_multiData", {
        get: function () {
            var dataManager = this._dataManager.peek();
            return dataManager && dataManager.getItemData();
        },
        enumerable: true,
        configurable: true
    });
    DataDashboardItem.prototype._removeFromFilters = function (dataItem) {
        this.filterString(removeDataItemFromCriteria(this.filterString(), dataItem.uniqueName()));
        this._measures.forEach(function (measure) {
            measure.filterString(removeDataItemFromCriteria(measure.filterString(), dataItem.uniqueName()));
        });
    };
    DataDashboardItem.prototype._clearBindings = function () {
        this.dataSource(null);
        this.dataMember(null);
        this.dataItems.removeAll();
        this.__hiddenDimensions.removeAll();
        this.__hiddenMeasures.removeAll();
        this.colorScheme.removeAll();
    };
    DataDashboardItem.prototype._clearInteractivityState = function () {
        this._selectionValues(null);
        this._drillDownValues([]);
    };
    DataDashboardItem.prototype._isCalculationSupported = function () {
        return true;
    };
    DataDashboardItem.prototype._isSortingEnabled = function () {
        return true;
    };
    DataDashboardItem.prototype._isTopNEnabled = function (dataItem) {
        return this.hiddenDimensions().indexOf(dataItem) == -1;
    };
    DataDashboardItem.prototype._isColoringEnabled = function (dataItem) {
        if (dataItem instanceof dimension_1.Dimension) {
            if (this._canColorByDimensions) {
                if (this._isHiddenDimension(dataItem) || dataItem.coloringMode() === 'None') {
                    return false;
                }
                if (dataItem.coloringMode() === 'Hue') {
                    return true;
                }
                return this._getIsDimensionColoredByDefault(dataItem);
            }
        }
        else if (dataItem instanceof measure_1.Measure) {
            if (this._canColorByMeasures) {
                if (this._isHiddenMeasure(dataItem)) {
                    return false;
                }
                return this._coloredByMeasures();
            }
            return false;
        }
    };
    DataDashboardItem.prototype._getDataItem = function (uniqueName) {
        return this.dataItems().filter(function (item) { return item.uniqueName() === uniqueName; })[0];
    };
    DataDashboardItem.prototype._getFinalDataType = function (dataItemId) {
        var metaData = this._dataManager() ? this._dataManager().getMetaData() : undefined;
        return !!metaData ? metaData.getFinalDataType(dataItemId) : 'Unknown';
    };
    DataDashboardItem.prototype._createDataItem = function (dataField, binding) {
        var itemTypeName = binding.dataItemType;
        if (!itemTypeName) {
            itemTypeName = _data_field_1.DataField.isMeasure(dataField) ? 'Measure' : 'Dimension';
        }
        var newDataItem = DataDashboardItem._createDataItem(itemTypeName);
        DataDashboardItem._updateDataItemByField(dataField, newDataItem);
        this.dataItems.push(newDataItem);
        return newDataItem;
    };
    DataDashboardItem.prototype._updateDataItem = function (dataItem, binding, dataField, acceptableShapingType) {
        _helper_classes_1.Guard.isNotNull(dataItem, 'dataItem');
        var itemTypeName = binding.dataItemType || dataItem.itemType();
        var newDataItem = (binding.dataItemType === dataItem.itemType()) ? dataItem : DataDashboardItem._createDataItem(itemTypeName);
        DataDashboardItem._updateDataItemByField(dataField, newDataItem, { oldDataItem: dataItem, acceptableShapingType: acceptableShapingType });
        this._unassignDataItem(dataItem, false);
        if (newDataItem !== dataItem) {
            this._removeDataItemCore(dataItem);
            newDataItem.uniqueName(dataItem.uniqueName());
            this.dataItems.push(newDataItem);
        }
    };
    DataDashboardItem.prototype._removeDataItem = function (dataItem, skipGroups) {
        this._removeDataItemCore(dataItem);
        this._unassignDataItem(dataItem, skipGroups);
    };
    DataDashboardItem.prototype._attachDataItem = function (target, propertyName, link) {
        var _this = this;
        var dataItemLink = !!link ? link : new data_item_1.DataItemLink(this, { '@DefaultId': target[propertyName].uniqueName() });
        target[propertyName] = dataItemLink;
        target[propertyName.substring(2)] = ko.computed({
            read: function () { return dataItemLink.dataItem(); },
            write: function (value) {
                if (!!value) {
                    if (_this._getDataItem(value.uniqueName())) {
                        throw Error("DataItemLink: DataItem " + value.uniqueName() + " already exists");
                    }
                    else {
                        _this.dataItems.push(value);
                        dataItemLink.dataItem(value);
                    }
                }
                else {
                    if (dataItemLink.dataItem()) {
                        _this._removeDataItem(dataItemLink.dataItem());
                        dataItemLink.dataItem(null);
                    }
                }
            }
        });
    };
    DataDashboardItem.prototype._subscribeDataItemLinkArrays = function () {
        var _this = this;
        var propertyInfos = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            propertyInfos[_i] = arguments[_i];
        }
        propertyInfos.forEach(function (propertyInfo) {
            var property = _this[propertyInfo.propertyName];
            var realProperty = _this[propertyInfo.propertyName.substring(2)];
            ko.computed(function () {
                property().filter(function (value) { return !value.dataItem(); })
                    .forEach(function (value) { return property.remove(value); });
            });
            ko.computed(function () {
                var linkedDataItems = property().map(function (link) { return link.dataItem(); }).filter(function (dataItem) { return !!dataItem; });
                realProperty.peek().filter(function (dataItem) { return linkedDataItems.indexOf(dataItem) === -1; })
                    .forEach(function (itemToRemove) { return realProperty.remove(itemToRemove); });
                linkedDataItems.filter(function (dataItem) { return realProperty.peek().indexOf(dataItem) === -1; })
                    .forEach(function (itemToAdd) { return realProperty.splice(linkedDataItems.indexOf(itemToAdd), 0, itemToAdd); });
            });
            _knockout_utils_1.subscribeArrayChange(realProperty, {
                added: function (dimension, index) {
                    if (!property().some(function (link) { return link.dataItem() === dimension; })) {
                        _this.dataItems.push(dimension);
                        var link = new data_item_1.DataItemLink(_this);
                        link.dataItem(dimension);
                        property.splice(index, 0, link);
                    }
                },
                deleted: function (dimension) {
                    if (property().some(function (link) { return link.dataItem() === dimension; })) {
                        _this.dataItems.remove(dimension);
                        property.remove(function (link) { return link.dataItem() === dimension; });
                    }
                }
            });
        });
    };
    DataDashboardItem.prototype._getMasterFilterMode = function () { return 'None'; };
    DataDashboardItem.prototype._getDrillDownEnabled = function () { return false; };
    DataDashboardItem.prototype._getIgnoreMasterFilter = function () { return false; };
    DataDashboardItem.prototype._getClearMasterFilterSupported = function () { return this._isMultipleMasterFilter(); };
    DataDashboardItem.prototype._getIsMasterFilter = function () { return this._isSingleMasterFilter() || this._isMultipleMasterFilter(); };
    DataDashboardItem.prototype._getInteractivityDimensionLinks = function () { return []; };
    DataDashboardItem.prototype._getCanColorByMeasures = function () { return false; };
    DataDashboardItem.prototype._getCanColorByDimensions = function () { return false; };
    DataDashboardItem.prototype._getAreMeasuresColoredByDefault = function () { return false; };
    DataDashboardItem.prototype._getIsDimensionColoredByDefault = function (dimension) { return false; };
    DataDashboardItem.prototype._coloredDimensions = function () {
        var _this = this;
        return this._dimensions.filter(function (item) { return _this._isColoringEnabled(item); });
    };
    DataDashboardItem.prototype._coloredByMeasures = function () {
        if (this.coloringOptions.measuresColoringMode() === 'Hue') {
            return true;
        }
        if (this.coloringOptions.measuresColoringMode() === 'None') {
            return false;
        }
        return this._getAreMeasuresColoredByDefault();
    };
    DataDashboardItem.prototype._getUseGlobalColors = function () { return this.coloringOptions && this.coloringOptions.useGlobalColors(); };
    DataDashboardItem.prototype._getValidatedSelection = function (selectionValues) {
        return selectionValues ? selectionValues.map(function (value) { return value.map(_date_utils_1.tryConvertToDateTime); }) : selectionValues;
    };
    DataDashboardItem.prototype._getClearMasterFilterState = function () {
        if (this._clearMasterFilterSupported()) {
            if (this._useNeutralFilterMode() && this._isSingleMasterFilter() && !this._allowAllValue()) {
                return 'Disabled';
            }
            return this._actions().indexOf(_common_1.viewerActions.clearMasterFilter) !== -1 ? 'Enabled' : 'Hidden';
        }
        return 'Hidden';
    };
    DataDashboardItem.prototype._allowAllValue = function () { return false; };
    DataDashboardItem.prototype._validateSelectionByData = function (selection) {
        var activeDimensions = this._interactivityDimensions.slice(this._drillDownValues().length).map(function (d) { return d.uniqueName(); });
        if (this._isSingleMasterFilter() && activeDimensions.length > 0) {
            var allSelection = this._getAllSelectionValues(activeDimensions);
            if (!selection || (!this._useNeutralFilterMode() && !_utils_1.arrayContains(allSelection, selection[0]))) {
                this._setSelectionData(allSelection.length > 0 ? [allSelection[0]] : null);
            }
        }
    };
    DataDashboardItem.prototype._updateContentData = function (content) {
        _super.prototype._updateContentData.call(this, content);
        if (this.dataItems().length > 0 || !this._stateSupported('empty')) {
            this._updateDataManager(content);
        }
        if (content.ItemData && content.ItemData.Reduced) {
            this._limitDataState.setReduced();
        }
        this._validateSelectionByData(this._actualSelectionValues());
        var drillDownValues = this._getDisplayDrillDownValues();
        _utils_1.deepExtend(content, {
            multiData: this._multiData,
            DrillDownValues: !!drillDownValues ? drillDownValues.map(function (fv) { return fv.Values; }).reduce(function (v1, v2) { return v1.concat(v2); }) : undefined,
            DrillDownUniqueValues: this._drillDownValues.peek().length > 0 ? this._drillDownValues.peek() : undefined,
            LimitDataState: this._limitDataState.getViewModel()
        });
    };
    DataDashboardItem.prototype._extendContentState = function (content) {
        _super.prototype._extendContentState.call(this, content);
        content.SelectedValues = this._actualSelectionValues.peek();
    };
    DataDashboardItem.prototype._updateDataManager = function (content) {
        var itemDataDTO = content.ItemData, contentType = content.ContentType;
        if (itemDataDTO) {
            _date_utils_1.patchDateTime(itemDataDTO.DataStorageDTO);
        }
        if (contentType === _common_1.contentType.partialDataSource && this._dataManager() && itemDataDTO) {
            content.Parameters[0] = !!content.Parameters[0] && content.Parameters[0].map(function (value) { return _date_utils_1.tryConvertToDateTime(value); });
            this._dataManager().updateExpandedData(itemDataDTO, {
                values: content.Parameters[0],
                pivotArea: content.Parameters[1] ? _item_data_axis_builder_1.pivotAreaNames.columns : _item_data_axis_builder_1.pivotAreaNames.rows
            });
        }
        else {
            if ((contentType === _common_1.contentType.fullContent || contentType === _common_1.contentType.completeDataSource) && itemDataDTO && itemDataDTO.MetaData) {
                var dataManager = new _item_data_manager_1.itemDataManager();
                dataManager.initialize(itemDataDTO);
                this._dataManager(dataManager);
            }
            if (contentType !== _common_1.contentType.completeDataSource) {
            }
        }
        this._expandingManager.resetExpandingParams();
    };
    DataDashboardItem.prototype._getAllSelectionValues = function (activeDimensions) {
        return !!this._multiData ? this._multiData.getAllSelectionValues(activeDimensions) : [];
    };
    DataDashboardItem.prototype._getPointsByDimension = function (dimensionId, axisName) {
        if (this._multiData) {
            var axis = this._multiData.getAxis(axisName);
            return axis ? axis.getPointsByDimension(dimensionId) : [];
        }
    };
    DataDashboardItem.prototype._getColorizableDataItemsInfo = function () {
        return [];
    };
    DataDashboardItem.prototype._getDefaultCalculationWindowDefinition = function () {
        return undefined;
    };
    DataDashboardItem.prototype._getExportingSelection = function () {
        return this._selectionValues();
    };
    DataDashboardItem.prototype._getDisplayFilterValues = function (limitCount) {
        var _this = this;
        var selection = this._outputFilter(), outFilterValues = [];
        if (selection && selection.dimensions) {
            selection.dimensions.forEach(function (dimensionDefinition, dimensionIndex) {
                var dimension = _this._dimensions.filter(function (d) { return d.uniqueName() === dimensionDefinition['@DefaultId']; })[0];
                var filterValues = new _dimension_filter_values_1.DimensionFilterValues(_this._getDimensionDisplayName(dimension.uniqueName()));
                var uniqueValues = {};
                for (var valueIndex = 0, valueCount = 0; valueIndex < selection.values.length; valueIndex++) {
                    if (!!limitCount && valueCount >= limitCount) {
                        filterValues.Truncated = true;
                        break;
                    }
                    var value = selection.values[valueIndex][dimensionIndex];
                    if (!uniqueValues[value]) {
                        uniqueValues[value] = value;
                        valueCount++;
                    }
                }
                filterValues.Values = Object.keys(uniqueValues).map(function (v) { return _this._createFormattableValue(dimension, uniqueValues[v]); });
                outFilterValues.push(filterValues);
            });
        }
        return outFilterValues;
    };
    DataDashboardItem.prototype._createFormattableValue = function (dimension, value) {
        var isOlap = _data_field_1.DataField.isOlap(dimension.dataMember());
        var dimensionId = dimension.uniqueName();
        if (isOlap) {
            return {
                Type: 'Value',
                Value: this._getOlapDimensionDisplayText(value, dimensionId),
                Format: undefined
            };
        }
        else {
            var metaData = this._dataManager() ? this._dataManager().getMetaData() : undefined;
            return {
                Type: 'Value',
                Value: value,
                Format: metaData ? metaData.getDimensionFormat(dimensionId) : undefined
            };
        }
    };
    DataDashboardItem.prototype._getDisplayFilterValuesExternal = function () {
        var externalFilter = this._masterFilterItems().filter(function (item) { return !!item._outputFilter(); });
        return externalFilter
            .map(function (item) { return item._getDisplayFilterValues(); })
            .filter(function (arr) { return arr.length > 0; })
            .reduce(function (acc, items) { return acc.concat(items); }, []);
    };
    DataDashboardItem.prototype._getDisplayDrillDownValues = function () {
        var _this = this;
        var drillDownUniqueValues = this._drillDownValues.peek();
        if (!drillDownUniqueValues || drillDownUniqueValues.length == 0)
            return undefined;
        var values = new Array(), metaData = this._dataManager() ? this._dataManager().getMetaData() : undefined;
        drillDownUniqueValues.forEach(function (value, valueIndex) {
            var dimension = _this._interactivityDimensions[valueIndex];
            var filterValues = new _dimension_filter_values_1.DimensionFilterValues(_this._getDimensionDisplayName(dimension.uniqueName()));
            var isOlap = _data_field_1.DataField.isOlap(dimension.dataMember());
            filterValues.Values.push(_this._createFormattableValue(dimension, value));
            values.push(filterValues);
        });
        return values;
    };
    DataDashboardItem.prototype._getColoringSignature = function () {
        return new color_scheme_definition_1.ColorSchemeDefinition(this.dataSource(), this.dataMember(), this._coloredDimensions().map(function (dimension) {
            return {
                dataMember: ko.observable(dimension.dataMember()),
                dateTimeGroupInterval: ko.observable(dimension.dateTimeGroupInterval())
            };
        }), this._coloredByMeasures(), this._isGloballyColored ? '' : this.componentName(), this._isGloballyColored ? '' : this.name());
    };
    DataDashboardItem.prototype._isAttribute = function (dataItem) {
        return false;
    };
    DataDashboardItem.prototype._getItemDataAxis = function () {
        return _item_data_axis_names_1.itemDataAxisNames.defaultAxis;
    };
    DataDashboardItem.prototype._getDataItemContainerDisplayName = function (dataItemContainer, dataItemDisplayNameGetter) {
        var _this = this;
        if (dataItemDisplayNameGetter === void 0) { dataItemDisplayNameGetter = null; }
        var name = dataItemContainer.name && dataItemContainer.name() || null;
        if (name) {
            return name;
        }
        var bindingModel = dataItemContainer._getBindingModel(), separator = ' ' + (dataItemContainer._displayNameSeparator || '-') + ' ';
        name = '';
        bindingModel.forEach(function (binding) {
            var dataItemLink = dataItemContainer[binding.propertyName];
            var dataItem = dataItemLink.dataItem && dataItemLink.dataItem();
            if (dataItem && dataItem.dataMember()) {
                if (name) {
                    name = name + separator;
                }
                name = name + (!!dataItemDisplayNameGetter ? dataItemDisplayNameGetter(dataItem) : _this._getDataItemDisplayName(dataItem));
            }
        });
        return name;
    };
    DataDashboardItem.prototype._getDataItemDisplayName = function (dataItem) {
        var uniqueName = dataItem.uniqueName();
        return dataItem instanceof dimension_1.Dimension ? this._getDimensionDisplayName(uniqueName) : this._getMeasureDisplayName(uniqueName);
    };
    DataDashboardItem.prototype._getMeasureDisplayName = function (uniqueName) {
        var metaData = this._dataManager() ? this._dataManager().getMetaData() : undefined;
        var measure = metaData.getMeasures().filter(function (m) { return m.id == uniqueName; })[0];
        return !!measure ? measure.name : uniqueName;
    };
    DataDashboardItem.prototype._getDimensionDisplayName = function (uniqueName) {
        var dimension = undefined;
        var metaData = this._dataManager() ? this._dataManager().getMetaData() : undefined;
        var axes = !!metaData && metaData.getAxisNames() || [];
        axes.every(function (axisName) {
            var dimensions = metaData.getDimensions(axisName) || [];
            dimension = dimensions.filter(function (d) { return d.id == uniqueName; })[0];
            return !dimension;
        });
        return !!dimension ? dimension.name : uniqueName;
    };
    DataDashboardItem.prototype._getOlapDimensionDisplayText = function (uniqueValue, dimensionId) {
        var itemData = this._dataManager() ? this._dataManager().getItemData() : undefined;
        var axes = !!itemData ? itemData.getAxisNames() : [];
        var pt = undefined;
        axes.every(function (axisName) {
            var axis = itemData.getAxis(axisName);
            pt = axis.getPointByUniqueValueAndDimension(uniqueValue, dimensionId);
            return !pt;
        });
        if (!!pt) {
            return pt.getUniqueValue() === special_values_1.specialValues.olapNullValueGuid ? _default_1.getLocalizationById('DashboardStringId.OlapRaggedHierarchyNoneItemCaption') : pt.getDisplayText();
        }
        else {
            return uniqueValue;
        }
    };
    DataDashboardItem.prototype._cleanDataItemDependencies = function () {
    };
    DataDashboardItem.prototype._setLinkCollectionAcceptableShapingType = function (links, type) {
        links.forEach(function (l) { l._specifics.acceptableShapingType = type; });
    };
    DataDashboardItem.prototype._updateDataQueryParams = function (params) {
        _super.prototype._updateDataQueryParams.call(this, params);
        if (this._expandingManager.canProvideExpandingState()) {
            params.ExpandingState = this._expandingManager.calculateExpandingState();
        }
    };
    DataDashboardItem.prototype._stateSupported = function (state) {
        return this._supportedUIStates().indexOf(state) !== -1;
    };
    DataDashboardItem.prototype._isHiddenDimension = function (dimension) {
        return !!this.__hiddenDimensions().filter(function (link) { return link.dataItem() === dimension; })[0];
    };
    DataDashboardItem.prototype._isHiddenMeasure = function (measure) {
        return !!this.__hiddenMeasures().filter(function (link) { return link.dataItem() === measure; })[0];
    };
    DataDashboardItem.prototype._setSelection = function (stateSelection) {
        var validatedSelection = this._getValidatedSelection(stateSelection);
        if (this._isSingleMasterFilter()) {
            if ((!validatedSelection || validatedSelection.length === 0) && !this._clearMasterFilterSupported())
                return;
            if (validatedSelection && validatedSelection.length > 1)
                validatedSelection = [validatedSelection[0]];
        }
        this._setSelectionData(validatedSelection);
    };
    DataDashboardItem.prototype._hasSelection = function () {
        return !!this._selectionValues() && !!this._selectionValues()[0];
    };
    DataDashboardItem.prototype._performOutputFilterOptimization = function (filter) {
        return filter;
    };
    DataDashboardItem.prototype._setState = function (parameter) {
        _super.prototype._setState.call(this, parameter);
        var itemState = parameter;
        var obsoleteItemState = parameter;
        var drillDownState = itemState.DrillDownValues || _obsolete_dashboard_state_1.ObsoleteItemState.unwrapDilldownValues(obsoleteItemState.DrillLevels) || [];
        drillDownState = drillDownState.map(function (value) { return _date_utils_1.tryConvertToDateTime(value); });
        if (!_array_utils_1.arrayEquals(this._drillDownValues(), drillDownState))
            this._drillDownValues(drillDownState);
        var selectionState = itemState.MasterFilterValues || obsoleteItemState.Selection;
        this._setSelection(selectionState);
        var selectedElementIndexState = itemState.SelectedLayerIndex || obsoleteItemState.SelectedElementIndex;
        if (this._selectedElementIndex() !== selectedElementIndexState)
            this._selectedElementIndex(selectedElementIndexState);
    };
    DataDashboardItem.prototype._setClientState = function (clientState) {
        this._clientState(clientState);
    };
    DataDashboardItem.prototype._setSelectionData = function (selection) {
        if (!_array_utils_1.arrayEquals(this._selectionValues(), selection)) {
            this._selectionValues(selection);
        }
    };
    DataDashboardItem.prototype._itemInteractivityByColumnAxis = function () {
        return true;
    };
    DataDashboardItem.prototype._getInteractivityAxisDimensionCount = function () {
        return this._dimensions.length - this.hiddenDimensions().length;
    };
    DataDashboardItem.prototype._removeSelectionFromState = function (state) {
        var itemState = _utils_1.deepExtend({}, state);
        itemState.MasterFilterValues = undefined;
        return itemState;
    };
    DataDashboardItem.prototype._setSelectionToState = function (state, selection) {
        var itemState = _utils_1.deepExtend({}, state);
        itemState.MasterFilterValues = selection;
        return itemState;
    };
    DataDashboardItem.prototype._setPredefinedPeriodToState = function (itemState, periodName) {
        return itemState;
    };
    DataDashboardItem.prototype._unassignDataItem = function (dataItem, skipGroups) {
        this._clearInteractivityState();
        this._removeFromFilters(dataItem);
        if (!skipGroups && dataItem instanceof dimension_1.Dimension && _data_field_1.IsOlapHierarchyField(dataItem)) {
            for (var i = this.dataItems().length - 1; i >= 0; i--) {
                var item = this.dataItems()[i];
                if (item instanceof dimension_1.Dimension && item.groupIndex() == dataItem.groupIndex() && item != dataItem) {
                    this.dataItems.remove(item);
                }
            }
            this._cleanDataItemDependencies();
        }
    };
    DataDashboardItem.prototype._removeDataItemCore = function (dataItem) {
        if (dataItem instanceof measure_1.Measure) {
            this._dimensions.forEach(function (dimensionDataItem) {
                var dimension = dimensionDataItem;
                if (dimension.sortMeasure() === dataItem.uniqueName()) {
                    dimension.sortMeasure(undefined);
                }
                if (dimension.topNOptionsMeasureName() === dataItem.uniqueName()) {
                    dimension.topNOptionsMeasureName(undefined);
                }
            });
        }
        this.dataItems.remove(dataItem);
    };
    DataDashboardItem.prototype._getActiveDimensions = function () {
        var drillDownValuesCount = this._drillDownValues().length;
        if (this._getDrillDownEnabled()) {
            return [this._interactivityDimensions[drillDownValuesCount]];
        }
        else {
            return this._interactivityDimensions;
        }
    };
    DataDashboardItem.prototype._getDimensionIdsByItemName = function () {
        return this._getActiveDimensions().map(function (dim) { return dim.uniqueName(); });
    };
    DataDashboardItem.prototype._getValues = function (tuples) {
        return _item_data_axis_helper_1.itemDataAxisHelper.getValuesByTuples(tuples, this._getDimensionIdsByItemName());
    };
    DataDashboardItem.prototype._getAvailableTuples = function () {
        var that = this, data = that._getItemData(), dimensionIds = that._getDimensionIdsByItemName(), axisName = that._getCurrentAxisNameByItemName();
        return data && data.getAvailableTuples(dimensionIds, axisName);
    };
    DataDashboardItem.prototype._getCurrentAxisNameByItemName = function () {
        return this._getItemDataAxis();
    };
    DataDashboardItem.prototype._getSelectedValuesByItemName = function () {
        return this._selectionValues();
    };
    DataDashboardItem.prototype._performSetMasterFilter = function (values) {
        if (values) {
            if (!Array.isArray(values) || (!(values[0] instanceof _item_data_tuple_1.itemDataTuple) && !Array.isArray(values[0]))) {
                throw new Error('The type of the values parameter is not supported.');
            }
            var arrayValues = values[0] instanceof _item_data_tuple_1.itemDataTuple ? this._getValues(values) : values;
            if (this._isSingleMasterFilter() && arrayValues.length !== 1) {
                throw new Error('Only one filter value is allowed when the Master Filter mode is set to Single.');
            }
            this._processItemSelectionChange('', _common_1.viewerActions.setMasterFilter, arrayValues);
        }
        else {
            throw Error();
        }
    };
    DataDashboardItem.prototype._performClearMasterFilter = function () {
        this._processItemClearMasterFilter();
    };
    DataDashboardItem.prototype._performDrillDown = function (values) {
        var realValues = values instanceof _item_data_tuple_1.itemDataTuple ? this._getValues([values]) : [[values]];
        this._processItemSelectionChange('', _common_1.viewerActions.drillDown, realValues[0]);
    };
    DataDashboardItem.prototype._performDrillUp = function () {
        this._processItemDrillUp();
    };
    DataDashboardItem.prototype._getAvailableDrillDownValues = function (itemName) {
        return (this._getAvailableActions().indexOf(_common_1.viewerActions.drillDown) !== -1) ? this._getAvailableTuples() : null;
    };
    DataDashboardItem.prototype._getCurrentDrillDownValues = function () {
        var data = this._getItemData(), dimensionIds = this._getDimensionIdsByItemName(), axisName = this._getCurrentAxisNameByItemName();
        return data && data.getCurrentDrillDownValues(dimensionIds, axisName);
    };
    DataDashboardItem.prototype._getAvailableFilterValues = function (itemName) {
        return (this._getAvailableActions().indexOf(_common_1.viewerActions.setMasterFilter) !== -1 ||
            this._getAvailableActions().indexOf(_common_1.viewerActions.setMultipleValuesMasterFilter) !== -1) ? this._getAvailableTuples() : null;
    };
    DataDashboardItem.prototype._getAvailableActions = function () {
        return this._actions();
    };
    DataDashboardItem.prototype._getItemData = function () {
        var dataManager = this._dataManager();
        return dataManager && dataManager.getItemData();
    };
    DataDashboardItem.prototype._getCurrentFilterValues = function () {
        var that = this, data = that._getItemData(), dimensionIds = that._getDimensionIdsByItemName(), axisName = that._getCurrentAxisNameByItemName(), selectedValues = that._getSelectedValuesByItemName();
        return data && data.getCurrentFilterValues(dimensionIds, axisName, selectedValues);
    };
    DataDashboardItem.prototype._conditionFormattingExpressionEditorFilter = function (dataItem) {
        return !this.hiddenDimensions().filter(function (hd) { return hd.uniqueName() === dataItem.uniqueName(); })[0];
    };
    DataDashboardItem._itemTypesMap = {
        Measure: measure_1.Measure,
        Dimension: dimension_1.Dimension
    };
    DataDashboardItem._formatRuleTypesMap = {
        GridItemFormatRule: grid_item_format_rule_1.GridItemFormatRule,
        PivotItemFormatRule: pivot_item_format_rule_1.PivotItemFormatRule,
        CardItemFormatRule: card_item_format_rule_1.CardItemFormatRule,
        CardItemDeltaFormatRule: card_item_delta_format_rule_1.CardItemDeltaFormatRule
    };
    DataDashboardItem._addColoringMeta = function (links) {
        links.forEach(function (link) {
            if (!link._specifics.customDataShapingProperties.some(function (prop) { return prop.serializationInfo.propertyName === _dimension_1.coloringMode.propertyName; })) {
                link._specifics.customDataShapingProperties = link._specifics.customDataShapingProperties.concat([{
                        serializationInfo: _dimension_1.coloringMode
                    }]);
            }
        });
    };
    __decorate([
        _utils_2.collectionItemType('Dimension')
    ], DataDashboardItem.prototype, "__hiddenDimensions", void 0);
    __decorate([
        _utils_2.collectionItemType('Measure')
    ], DataDashboardItem.prototype, "__hiddenMeasures", void 0);
    __decorate([
        _utils_2.collectionItemType('Entry')
    ], DataDashboardItem.prototype, "colorScheme", void 0);
    return DataDashboardItem;
}(dashboard_item_1.DashboardItem));
exports.DataDashboardItem = DataDashboardItem;
function getSummaryType(dataField) {
    if (dataField) {
        switch (dataField.fieldType()) {
            case 'Bool':
            case 'Text':
            case 'DateTime':
                return 'Count';
            case 'Custom':
                if (!dataField.isConvertible()) {
                    return 'Count';
                }
        }
    }
    return _measure_1.summaryTypeNumericToAny.defaultVal;
}
function removePropertyFromCriteriaOperator(sourceCriteriaOperator, propertyName) {
    if (sourceCriteriaOperator instanceof dx_analytics_core_1.default.Analytics.Criteria.GroupOperator) {
        sourceCriteriaOperator.operands = sourceCriteriaOperator.operands.map(function (operand) { return removePropertyFromCriteriaOperator(operand, propertyName); });
        return sourceCriteriaOperator;
    }
    else if (sourceCriteriaOperator instanceof dx_analytics_core_1.default.Analytics.Criteria.UnaryOperator) {
        sourceCriteriaOperator.operand = removePropertyFromCriteriaOperator(sourceCriteriaOperator.operand, propertyName);
        return sourceCriteriaOperator;
    }
    else if (!sourceCriteriaOperator.children().some(function (operand) { return operand instanceof dx_analytics_core_1.default.Analytics.Criteria.OperandProperty && operand.propertyName === propertyName; })) {
        return sourceCriteriaOperator;
    }
    return new dx_analytics_core_1.default.Analytics.Criteria.GroupOperator(dx_analytics_core_1.default.Analytics.Criteria.GroupOperatorType.And, []);
}
function removeDataItemFromCriteria(criteria, dataItemName) {
    try {
        if (!!criteria) {
            var criteriaSerializer = new dx_analytics_core_1.default.Analytics.Widgets.Internal.FilterEditorSerializer();
            var criteriaOperator = criteriaSerializer.deserialize(criteria);
            var cleanedOperator = removePropertyFromCriteriaOperator(criteriaOperator, dataItemName);
            return criteriaSerializer.serialize(cleanedOperator);
        }
        else {
            return criteria;
        }
    }
    catch (e) {
        return '';
    }
}


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var query_1 = __webpack_require__(415);
var ko = __webpack_require__(0);
var ObjectPropertiesWrapper = (function () {
    function ObjectPropertiesWrapper(options) {
        var _this = this;
        this._serializationInfo = [];
        this.isPropertyVisible = function (name) {
            if (!_this._serializationInfo.filter(function (i) { return i.propertyName === name; })[0]) {
                throw new Error('unknown property');
            }
            var result = true;
            var propertyFilter = _this.visibilityFilterRules[name];
            if (propertyFilter) {
                result = !!query_1.default([_this]).filter(propertyFilter).toArray().length;
            }
            return result;
        };
        this.isPropertyDisabled = function (name) {
            if (!_this._serializationInfo.filter(function (i) { return i.propertyName === name; })[0]) {
                throw new Error('unknown property');
            }
            var result = false;
            var propertyFilter = _this.disabledFilterRules[name];
            if (propertyFilter) {
                result = !!query_1.default([_this]).filter(propertyFilter).toArray().length;
            }
            return result;
        };
        this.getDynamicEditor = function (name) {
            if (!_this._serializationInfo.filter(function (i) { return i.propertyName === name; })[0]) {
                throw new Error('unknown property');
            }
            return _this.dynamicEditorRules[name] && _this.dynamicEditorRules[name](_this.model) || null;
        };
        this.model = options.model;
        this.visibilityFilterRules = options.visibilityFilterRules || {};
        this.disabledFilterRules = options.disabledFilterRules || {};
        this.dynamicEditorRules = options.dynamicEditorRules || {};
        this._modelSubscriptions = options.disposableModelSubscriptions || [];
        this.summary = options.summary;
        this.getPropertiesFromContainer(this.model, options.properties);
        if (options.modelExtention) {
            this.getPropertiesFromContainer(options.modelExtention, options.properties);
        }
        if (options.properties.length === 0) {
            this.model['getInfo']().forEach(function (propertyInfo) {
                _this._assignPropertyCore(_this.model[propertyInfo.propertyName], propertyInfo);
            });
        }
    }
    ObjectPropertiesWrapper.prototype.getPropertiesFromContainer = function (cur, properties) {
        var _this = this;
        properties.forEach(function (propertyInfo) {
            if (propertyInfo['container']) {
                var containerObject = ko.unwrap(cur[propertyInfo['container'].propertyName]);
                if (!!containerObject) {
                    _this.getPropertiesFromContainer(containerObject, propertyInfo['properties']);
                }
            }
            else {
                var sourcePropertyName = propertyInfo.propertyName, targetPropertyName = propertyInfo.replacementPropertyName || sourcePropertyName;
                if (cur[sourcePropertyName]) {
                    var serializationInfo = sourcePropertyName !== targetPropertyName ? __assign({}, propertyInfo, { propertyName: targetPropertyName }) : propertyInfo;
                    _this._assignPropertyCore((propertyInfo.sourceObject || cur[sourcePropertyName]), serializationInfo);
                }
            }
        });
    };
    ObjectPropertiesWrapper.prototype.assignValidationPovider = function (validationProvider) {
        this._validationProvider = validationProvider;
    };
    ObjectPropertiesWrapper.prototype._assignPropertyCore = function (propertyObject, info) {
        var _this = this;
        if (info.validateBeforeSet === true && ko.isObservable(propertyObject)) {
            this[info.propertyName] = ko.pureComputed({
                read: function () { return propertyObject(); },
                write: function (value) {
                    if (_this._validationProvider) {
                        var validateResult = _this._validationProvider.validate();
                        if (validateResult.status === 'valid') {
                            propertyObject(value);
                        }
                    }
                    else {
                        propertyObject(value);
                    }
                }
            });
            this._modelSubscriptions.push(this[info.propertyName]);
        }
        else {
            this[info.propertyName] = propertyObject;
        }
        this._serializationInfo.push(info);
    };
    ObjectPropertiesWrapper.prototype.addProperty = function (propertyValue, info) {
        this._assignPropertyCore(propertyValue, info);
    };
    ObjectPropertiesWrapper.prototype.getInfo = function () {
        return this._serializationInfo;
    };
    ObjectPropertiesWrapper.prototype.isEmpty = function () {
        var _this = this;
        if (this._serializationInfo.length !== 0) {
            var everythingIsInvisible_1 = true;
            this._serializationInfo.forEach(function (i) {
                if (_this.isPropertyVisible(i.propertyName))
                    everythingIsInvisible_1 = false;
            });
            return everythingIsInvisible_1;
        }
        return true;
    };
    ObjectPropertiesWrapper.prototype.unbindModel = function () {
        this._modelSubscriptions.forEach(function (disposable) { return disposable.dispose(); });
        this._modelSubscriptions = [];
    };
    return ObjectPropertiesWrapper;
}());
exports.ObjectPropertiesWrapper = ObjectPropertiesWrapper;


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var DisposableObject = (function () {
    function DisposableObject() {
        this._disposables = [];
        this.disposed = false;
    }
    DisposableObject.prototype.toDispose = function () {
        var disposables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            disposables[_i] = arguments[_i];
        }
        var _a;
        (_a = this._disposables).push.apply(_a, disposables);
    };
    DisposableObject.prototype.dispose = function () {
        this._disposables.forEach(function (disposable) { return disposable.dispose(); });
        this._disposables = [];
        this.disposed = true;
    };
    return DisposableObject;
}());
exports.DisposableObject = DisposableObject;


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var PropertiesComposerBase = (function () {
    function PropertiesComposerBase(_customizeTabs) {
        this._customizeTabs = _customizeTabs;
    }
    PropertiesComposerBase.prototype.composeTabs = function (model, args) {
        var tabs = this._composeTabsCore(model, args);
        this._customizeTabs(tabs, model, args);
        return tabs;
    };
    return PropertiesComposerBase;
}());
exports.PropertiesComposerBase = PropertiesComposerBase;
var DataItemContainerPropertiesComposer = (function (_super) {
    __extends(DataItemContainerPropertiesComposer, _super);
    function DataItemContainerPropertiesComposer(_customizeTabs) {
        return _super.call(this, _customizeTabs) || this;
    }
    return DataItemContainerPropertiesComposer;
}(PropertiesComposerBase));
exports.DataItemContainerPropertiesComposer = DataItemContainerPropertiesComposer;
var DashboardItemPropertiesComposer = (function (_super) {
    __extends(DashboardItemPropertiesComposer, _super);
    function DashboardItemPropertiesComposer(_customizeTabs) {
        return _super.call(this, _customizeTabs) || this;
    }
    return DashboardItemPropertiesComposer;
}(PropertiesComposerBase));
exports.DashboardItemPropertiesComposer = DashboardItemPropertiesComposer;


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var model_1 = __webpack_require__(38);
var _data_item_1 = __webpack_require__(20);
var _data_item_format_1 = __webpack_require__(179);
var index_internal_1 = __webpack_require__(58);
var _helper_classes_1 = __webpack_require__(36);
var chart_series_1 = __webpack_require__(142);
var _chart_axis_1 = __webpack_require__(134);
var _chart_item_1 = __webpack_require__(135);
var _chart_legend_1 = __webpack_require__(295);
var _chart_series_1 = __webpack_require__(198);
var _point_label_options_1 = __webpack_require__(199);
var _map_item_1 = __webpack_require__(44);
var _map_legend_1 = __webpack_require__(307);
var _dashboard_item_1 = __webpack_require__(74);
var _delta_options_1 = __webpack_require__(133);
var _sparkline_options_1 = __webpack_require__(193);
var date_time_period_1 = __webpack_require__(211);
var _range_filter_item_1 = __webpack_require__(200);
var _scatter_point_label_options_1 = __webpack_require__(315);
var scatter_chart_item_1 = __webpack_require__(536);
var _base_metadata_1 = __webpack_require__(4);
var legacy_settings_1 = __webpack_require__(80);
var _form_adapter_editors_1 = __webpack_require__(22);
var _object_properties_wrapper_1 = __webpack_require__(10);
var _accordion_tab_1 = __webpack_require__(7);
var _collection_editor_viewmodel_1 = __webpack_require__(79);
var _collection_editor_viewmodel_base_1 = __webpack_require__(115);
var _map_custom_shapefile_surface_1 = __webpack_require__(626);
var SharedComposers = (function () {
    function SharedComposers() {
    }
    SharedComposers.getCommonTab = function (model, properties, disabledRules) {
        if (properties === void 0) { properties = []; }
        if (disabledRules === void 0) { disabledRules = {}; }
        var wrapper = this.getCommonWrapper(model, properties, disabledRules);
        return new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', wrapper);
    };
    SharedComposers.getAllTab = function (model) {
        return new _accordion_tab_1.AccordionTab('ALL', 'All', new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: []
        }));
    };
    SharedComposers.getContentArrangementTab = function (model) {
        return new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ContentArrangement, 'DashboardWebStringId.AccordionTab.Layout', this.getContentArrangementWrapper(model));
    };
    SharedComposers.getCommonWrapper = function (model, specificProperties, specificDisabledRules, specificVisibilityRules) {
        if (specificProperties === void 0) { specificProperties = []; }
        if (specificDisabledRules === void 0) { specificDisabledRules = {}; }
        if (specificVisibilityRules === void 0) { specificVisibilityRules = {}; }
        var properties = [
            _dashboard_item_1.showCaption,
            _base_metadata_1.name
        ];
        properties = properties.concat(specificProperties);
        var disabledRules = {};
        Object.keys(specificDisabledRules).forEach(function (key) {
            disabledRules[key] = specificDisabledRules[key];
        });
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties,
            visibilityFilterRules: specificVisibilityRules,
            disabledFilterRules: disabledRules
        });
    };
    SharedComposers.getCommonMapWrapper = function (model, propertiesController, specificProperties) {
        if (specificProperties === void 0) { specificProperties = []; }
        var editHandler = function () {
            var surface = new _map_custom_shapefile_surface_1.MapCustomShapeFileSurface(model.customShapefile, propertiesController);
            surface.startEditing(new _collection_editor_viewmodel_1.CollectionEditorEditItemArguments());
        };
        var editorOptions = {
            dataSource: Object.keys(_map_item_1.area.values),
            getDisplayText: function (item) { return _default_1.getLocalizationById(_map_item_1.area.values[item]); },
            enableEditItem: function (item) { return item === 'Custom'; },
            editItemHandler: editHandler,
            onSelectionChanged: function (item) {
                if (item === 'Custom' && !model.customShapefile.url() && !model.customShapefile.data.shapeData())
                    editHandler();
            },
        };
        var properties = [__assign({}, _map_item_1.area, { formAdapterItem: _form_adapter_editors_1.editableListEditor(editorOptions) })].concat(specificProperties);
        return SharedComposers.getCommonWrapper(model, properties);
    };
    SharedComposers.getAxisWrapper = function (model, axisComputedTitle, alwaysShowZeroLevelInfo, isDateField, isNumericField, groupInterval) {
        if (isDateField === void 0) { isDateField = false; }
        if (isNumericField === void 0) { isNumericField = true; }
        if (groupInterval === void 0) { groupInterval = 'None'; }
        var disabledRules = {};
        var visibilityRules = {};
        disabledRules[_chart_axis_1.titleVisibleBaseInfo.propertyName] = [_chart_axis_1.axisVisible.propertyName, '=', false];
        disabledRules[_chart_axis_1.title.propertyName] = [[_chart_axis_1.titleVisibleBaseInfo.propertyName, '=', false], 'or', [_chart_axis_1.axisVisible.propertyName, '=', false]];
        disabledRules[_chart_axis_1.logarithmicBase.propertyName] = [_chart_axis_1.logarithmic.propertyName, '=', false];
        disabledRules[_chart_axis_1.limitVisiblePoints.propertyName] = [_chart_axis_1.axisVisible.propertyName, '=', false];
        disabledRules[_chart_axis_1.visiblePointsCount.propertyName] = [[_chart_axis_1.limitVisiblePoints.propertyName, '=', false], 'or', [_chart_axis_1.axisVisible.propertyName, '=', false]];
        disabledRules[_data_item_1.numericFormat.propertyName] = [_data_item_1.numericFormat.propertyName, '=', false];
        disabledRules[_data_item_1.dateTimeFormat.propertyName] = [_data_item_1.dateTimeFormat.propertyName, '=', false];
        var properties = alwaysShowZeroLevelInfo ? [alwaysShowZeroLevelInfo] : [];
        properties = properties.concat([
            _chart_axis_1.reverse,
            _chart_axis_1.showGridLinesBaseInfo,
            _chart_axis_1.axisVisible,
            _chart_axis_1.titleVisibleBaseInfo,
            __assign({ editorOptions: { placeholder: axisComputedTitle } }, _chart_axis_1.title),
            _chart_axis_1.logarithmic,
            _chart_axis_1.logarithmicBase,
            _chart_axis_1.enableZooming,
            _chart_axis_1.limitVisiblePoints,
            _chart_axis_1.visiblePointsCount,
        ]);
        if (isDateField) {
            properties.push({
                container: _data_item_1.dateTimeFormat,
                properties: [
                    _data_item_format_1.yearFormat,
                    _data_item_format_1.monthFormat,
                    _data_item_format_1.quarterFormat,
                    _data_item_format_1.dayOfWeekFormat,
                    _data_item_format_1.hourFormat,
                    _data_item_format_1.dateFormat,
                    _data_item_format_1.dateHourFormat,
                    _data_item_format_1.dateHourMinuteFormat,
                    _data_item_format_1.dateTimeWithSecondsFormat,
                    _data_item_format_1.exactDateFormat
                ]
            });
            visibilityRules[_data_item_format_1.yearFormat.propertyName] = function () { return groupInterval === 'Year'; };
            visibilityRules[_data_item_format_1.quarterFormat.propertyName] = function () { return groupInterval === 'Quarter'; };
            visibilityRules[_data_item_format_1.monthFormat.propertyName] = function () { return groupInterval === 'Month'; };
            visibilityRules[_data_item_format_1.hourFormat.propertyName] = function () { return groupInterval === 'Hour'; };
            visibilityRules[_data_item_format_1.dayOfWeekFormat.propertyName] = function () { return groupInterval === 'DayOfWeek'; };
            visibilityRules[_data_item_format_1.dateFormat.propertyName] = function () { return groupInterval === 'DayMonthYear'; };
            visibilityRules[_data_item_format_1.dateHourFormat.propertyName] = function () { return groupInterval === 'DateHour'; };
            visibilityRules[_data_item_format_1.dateHourMinuteFormat.propertyName] = function () { return groupInterval === 'DateHourMinute'; };
            visibilityRules[_data_item_format_1.dateTimeWithSecondsFormat.propertyName] = function () { return groupInterval === 'DateHourMinuteSecond'; };
            visibilityRules[_data_item_format_1.exactDateFormat.propertyName] = function () { return groupInterval === 'None'; };
        }
        if (isNumericField) {
            properties.push(__assign({ sourceObject: this.getNumericFormatWrapper(model.numericFormat) }, _data_item_1.numericFormat, { displayName: null, formAdapterItem: _form_adapter_editors_1.nestedPropertyGridEditor(_default_1.getLocalizationById(_data_item_1.numericFormat.displayName)) }));
        }
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties,
            disabledFilterRules: disabledRules,
            visibilityFilterRules: visibilityRules
        });
    };
    SharedComposers.getLegendWrapper = function (model) {
        var properties = [
            _chart_legend_1.chartLegendVisible,
            _chart_legend_1.isInsideDiagram,
            _chart_legend_1.insidePosition,
            _chart_legend_1.outsidePosition,
        ];
        var disabledRules = {};
        disabledRules[_chart_legend_1.isInsideDiagram.propertyName] = [_chart_legend_1.chartLegendVisible.propertyName, '=', false];
        disabledRules[_chart_legend_1.insidePosition.propertyName] = [_chart_legend_1.chartLegendVisible.propertyName, '=', false];
        disabledRules[_chart_legend_1.outsidePosition.propertyName] = [_chart_legend_1.chartLegendVisible.propertyName, '=', false];
        var visibleRules = {};
        visibleRules[_chart_legend_1.insidePosition.propertyName] = [_chart_legend_1.isInsideDiagram.propertyName, '=', true];
        visibleRules[_chart_legend_1.outsidePosition.propertyName] = [_chart_legend_1.isInsideDiagram.propertyName, '=', false];
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: [{
                    container: _chart_item_1.chartLegend,
                    properties: properties
                }],
            disabledFilterRules: disabledRules,
            visibilityFilterRules: visibleRules
        });
    };
    SharedComposers.getContentArrangementWrapper = function (model) {
        var properties = [
            _base_metadata_1.contentArrangementMode,
            _base_metadata_1.contentLineCount
        ];
        var disabledRules = {};
        disabledRules[_base_metadata_1.contentLineCount.propertyName] = [_base_metadata_1.contentArrangementMode.propertyName, '=', 'Auto'];
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties,
            disabledFilterRules: disabledRules
        });
    };
    SharedComposers.getLabelsWrapper = function (model) {
        if (model) {
            var simpleSeries = model instanceof chart_series_1.SimpleSeries ? model : null;
            var properties = [];
            if (model instanceof scatter_chart_item_1.ScatterChartItem) {
                properties.push(_point_label_options_1.showPointLabels);
                properties.push(_scatter_point_label_options_1.content);
            }
            else {
                var isFullStackedSeries = simpleSeries && ['FullStackedBar', 'FullStackedLine', 'FullStackedArea', 'FullStackedSplineArea'].indexOf(simpleSeries.seriesType()) >= 0;
                var avaliablePointLabelContentTypes = isFullStackedSeries ?
                    [
                        { value: model_1.PointLabelContentType.Argument, displayValueId: 'DashboardStringId.PointLabelContentTypeArgument' },
                        { value: model_1.PointLabelContentType.SeriesName, displayValueId: 'DashboardStringId.PointLabelContentTypeSeriesName' },
                        { value: model_1.PointLabelContentType.Value, displayValueId: 'DashboardStringId.PointLabelContentTypeValue' },
                        { value: model_1.PointLabelContentType.Percent, displayValueId: 'DashboardStringId.PointLabelContentTypePercent' }
                    ]
                    :
                        [
                            { value: model_1.PointLabelContentType.Argument, displayValueId: 'DashboardStringId.PointLabelContentTypeArgument' },
                            { value: model_1.PointLabelContentType.SeriesName, displayValueId: 'DashboardStringId.PointLabelContentTypeSeriesName' },
                            { value: model_1.PointLabelContentType.Value, displayValueId: 'DashboardStringId.PointLabelContentTypeValue' }
                        ];
                properties.push(__assign({}, _point_label_options_1.contentType, { formAdapterItem: _form_adapter_editors_1.flagsEnumListEditor({
                        values: avaliablePointLabelContentTypes,
                        enumDeclaration: model_1.PointLabelContentType
                    }) }));
            }
            properties = properties.concat([
                _point_label_options_1.overlappingMode,
                _point_label_options_1.pointLabelOrientation
            ]);
            if (simpleSeries && simpleSeries.seriesType().indexOf('Bar') > -1) {
                properties.push(_point_label_options_1.showForZeroValues);
                properties.push(_point_label_options_1.position);
            }
            if (model instanceof scatter_chart_item_1.ScatterChartItem) {
                properties.push(_point_label_options_1.position);
            }
            return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
                model: model,
                properties: [{
                        container: _chart_series_1.chartSeriesPointLabelOptions,
                        properties: properties
                    }],
                summary: ko.computed(function () { return (model.pointLabelOptions && model.pointLabelOptions.showPointLabels()) ? 'DashboardWebStringId.ButtonOn' : ''; })
            });
        }
        return null;
    };
    SharedComposers.getAttributeNamesSerializationInfo = function (model, propertyInfo, includeNoneValue, noneValueCaption) {
        if (includeNoneValue === void 0) { includeNoneValue = true; }
        if (noneValueCaption === void 0) { noneValueCaption = 'DashboardStringId.MapShapeNoneAttribute'; }
        var attributeNames = index_internal_1.safeComputed({ attributeNames: model._shapeFilesAttributeNameList }, function (args) {
            var attributes = args.attributeNames.map(function (attr) { return { value: attr, displayValueId: attr }; });
            if (includeNoneValue) {
                attributes.splice(0, 0, {
                    value: '', displayValueId: noneValueCaption
                });
            }
            return attributes;
        });
        var info = __assign({}, propertyInfo, { formAdapterItem: _form_adapter_editors_1.dynamicSelectBoxEditor(attributeNames) });
        return info;
    };
    SharedComposers.getShapeTitleSerializationInfo = function (model) {
        return SharedComposers.getAttributeNamesSerializationInfo(model, _map_item_1.shapeTitleAttributeName);
    };
    SharedComposers.getColorLegendWrapper = function (model) {
        var properties = [
            _map_legend_1.legendVisible,
            _map_legend_1.legendPosition
        ];
        var disabledRules = {};
        disabledRules[_map_legend_1.legendPosition.propertyName] = [_map_legend_1.legendVisible.propertyName, '=', false];
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: [{
                    container: _map_item_1.colorLegend,
                    properties: properties
                }],
            disabledFilterRules: disabledRules
        });
    };
    SharedComposers.getWeightedLegendWrapper = function (model) {
        var properties = [
            _map_legend_1.legendVisible,
            _map_legend_1.legendType,
            _map_legend_1.legendPosition
        ];
        var disabledRules = {};
        disabledRules[_map_legend_1.legendType.propertyName] = [_map_legend_1.legendVisible.propertyName, '=', false];
        disabledRules[_map_legend_1.legendPosition.propertyName] = [_map_legend_1.legendVisible.propertyName, '=', false];
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: [{
                    container: _map_item_1.weightedLegend,
                    properties: properties
                }],
            disabledFilterRules: disabledRules
        });
    };
    SharedComposers.getNumericFormatWrapper = function (model) {
        var measuredInUnits = function (numericFormat) {
            return numericFormat.formatType() === 'Number' || numericFormat.formatType() === 'Currency';
        };
        var notCustomizedFormat = function (numericFormat) {
            return numericFormat.formatType() === 'Auto' || numericFormat.formatType() === 'General';
        };
        var isCustomFormat = function (numericFormat) {
            return numericFormat.formatType() === 'Custom';
        };
        var disabledRules = {};
        disabledRules[_data_item_format_1.unit.propertyName] = function (numericFormat) { return !measuredInUnits(numericFormat); };
        disabledRules[_data_item_format_1.precision.propertyName] = function (numericFormat) {
            return notCustomizedFormat(numericFormat) || (measuredInUnits(numericFormat) && numericFormat.unit() === 'Auto');
        };
        disabledRules[_data_item_format_1.includeGroupSeparator.propertyName] = function (numericFormat) {
            return notCustomizedFormat(numericFormat) || numericFormat.formatType() === 'Scientific';
        };
        disabledRules[_data_item_format_1.dataItemCurrencyCultureName.propertyName] = function (numericFormat) { return numericFormat.formatType() !== 'Currency'; };
        var visibilityFilterRules = {};
        visibilityFilterRules[_data_item_format_1.unit.propertyName] = function (model) { return !isCustomFormat(model); };
        visibilityFilterRules[_data_item_format_1.precision.propertyName] = function (model) { return !isCustomFormat(model); };
        visibilityFilterRules[_data_item_format_1.includeGroupSeparator.propertyName] = function (model) { return !isCustomFormat(model); };
        visibilityFilterRules[_data_item_format_1.dataItemCurrencyCultureName.propertyName] = function (model) { return !isCustomFormat(model); };
        visibilityFilterRules[_data_item_format_1.customFormatString.propertyName] = function (model) { return isCustomFormat(model); };
        var properties = [
            _data_item_format_1.formatType,
            _data_item_format_1.unit,
            _data_item_format_1.precision,
            _data_item_format_1.includeGroupSeparator,
            __assign({}, _data_item_format_1.dataItemCurrencyCultureName, { formAdapterItem: _form_adapter_editors_1.currencyEditor() }),
            _data_item_format_1.customFormatString
        ];
        if (legacy_settings_1.DashboardPrivateSettings.customNumericFormatMode !== 'Enabled') {
            var restrictedFormatTypeValues = (__assign({}, _data_item_format_1.formatTypeValues));
            delete restrictedFormatTypeValues['Custom'];
            properties = [
                __assign({}, _data_item_format_1.formatType, { values: __assign({}, restrictedFormatTypeValues) })
            ].concat(properties.filter(function (p) { return p.propertyName !== _data_item_format_1.formatType.propertyName && p.propertyName !== _data_item_format_1.customFormatString.propertyName; }));
        }
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties,
            disabledFilterRules: disabledRules,
            visibilityFilterRules: visibilityFilterRules,
            summary: ko.pureComputed(function () { return notCustomizedFormat(model) ? '' : (_data_item_format_1.formatTypeValues[model.formatType()] || model.formatType()); })
        });
    };
    SharedComposers.getDeltaOptionsWrapper = function (model) {
        var disabledRules = {};
        disabledRules[_delta_options_1.resultIndicationThresholdType.propertyName] = function (deltaOptions) { return deltaOptions.resultIndicationMode() === 'NoIndication'; };
        disabledRules[_delta_options_1.resultIndicationThreshold.propertyName] = function (deltaOptions) { return deltaOptions.resultIndicationMode() === 'NoIndication'; };
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: [],
            disabledFilterRules: disabledRules
        });
    };
    SharedComposers.getDeltaFormatsOptionsWrapper = function (model, editFormat) {
        if (editFormat === void 0) { editFormat = function (model) { }; }
        var additionalFormats = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            additionalFormats[_i - 2] = arguments[_i];
        }
        var formats = this.getDeltaFormats(model);
        additionalFormats.forEach(function (format) { return formats.push(format); });
        var collectionEditorOptions = {
            propertyName: 'title',
            editItemHandler: editFormat,
            allowAddItem: false,
            allowReorderItem: false,
            allowRemoveItem: false
        };
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: { deltaFormats: ko.observableArray(formats) },
            properties: [{
                    formAdapterItem: _form_adapter_editors_1.collectionEditor(collectionEditorOptions),
                    propertyName: 'deltaFormats'
                }]
        });
    };
    SharedComposers.getDeltaFormats = function (kpiElement) {
        var formats = [];
        var actualValueFormat = kpiElement.actualValue() ? kpiElement.actualValue().numericFormat : null;
        var targetValueFormat = kpiElement.targetValue() ? kpiElement.targetValue().numericFormat : null;
        actualValueFormat && formats.push({ title: _default_1.getLocalizationById('DashboardStringId.DeltaValueTypeActualValueCaption'), numericFormat: actualValueFormat });
        targetValueFormat && formats.push({ title: _default_1.getLocalizationById('DashboardStringId.CardRowDataElementTypeTargetValueCaption'), numericFormat: targetValueFormat });
        return formats.concat([
            { title: _default_1.getLocalizationById('DashboardStringId.DeltaValueTypeAbsoluteVariationCaption'), numericFormat: kpiElement.absoluteVariationNumericFormat },
            { title: _default_1.getLocalizationById('DashboardStringId.DeltaValueTypePercentVariationCaption'), numericFormat: kpiElement.percentVariationNumericFormat },
            { title: _default_1.getLocalizationById('DashboardStringId.DeltaValueTypePercentOfTargetCaption'), numericFormat: kpiElement.percentOfTargetNumericFormat }
        ]);
    };
    SharedComposers.getCustomRangesWrapper = function (model, editRuleHandler, dataSourceBrowser, dimension) {
        var namePrefix = _default_1.getLocalizationById('DashboardStringId.DefaultPeriodName') + ' ';
        var isDateTimePeriodsPropertyVisible = ko.observable(false);
        var visibilityRules = {};
        visibilityRules[_range_filter_item_1.dateTimePeriods.propertyName] = function () {
            return isDateTimePeriodsPropertyVisible();
        };
        ko.computed(function () {
            if (dimension()) {
                dataSourceBrowser.findDataField(model.dataSource(), model.dataMember(), dimension().dataMember()).done(function (dataField) {
                    isDateTimePeriodsPropertyVisible(dataField && dataField.fieldType() === 'DateTime');
                });
            }
        });
        var customItemTemplate = function (itemData, itemIndex, itemElement) {
            var name = ko.unwrap(itemData.name);
            var div = document.createElement('div');
            div.innerText = name;
            div.style.fontWeight = model.defaultDateTimePeriodName() === name ? '800' : 'normal';
            itemElement.appendChild(div);
            return div;
        };
        var refreshCallback = new _collection_editor_viewmodel_base_1.CollectionEditorRefreshCallback();
        var subscriptions = [];
        subscriptions.push(index_internal_1.safeSubscribe({ defaultPeriod: model.defaultDateTimePeriodName }, function (_) { return refreshCallback.refresh(); }));
        subscriptions.push(index_internal_1.subscribeToArrayItemProperties(model.dateTimePeriods, function (period) { return period.name.subscribe(function () { return refreshCallback.refresh(); }); }));
        var collectionEditorOptions = {
            propertyName: 'name',
            createNewItemHandler: function () { return new date_time_period_1.DateTimePeriod({ '@ItemType': 'DateTimePeriod', '@Name': _helper_classes_1.NameGenerator.generateName(namePrefix, model.dateTimePeriods(), 'name', 1) }); },
            editItemHandler: editRuleHandler,
            customTemplate: customItemTemplate,
            forceRefreshCallback: refreshCallback,
        };
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            visibilityFilterRules: visibilityRules,
            properties: [__assign({}, _range_filter_item_1.dateTimePeriods, { formAdapterItem: _form_adapter_editors_1.collectionEditor(collectionEditorOptions) })],
            disposableModelSubscriptions: subscriptions,
        });
    };
    SharedComposers.getSparklineOptionsProperties = function () {
        var viewTypesMap = {
            'Line': {
                icon: 'dx-dashboard-chart-series-line',
                displayName: 'DashboardStringId.SparklineIndicationModeLine'
            },
            'Area': {
                icon: 'dx-dashboard-chart-series-area',
                displayName: 'DashboardStringId.SparklineIndicationModeArea'
            },
            'Bar': {
                icon: 'dx-dashboard-chart-series-bar',
                displayName: 'DashboardStringId.SparklineIndicationModeBar'
            },
            'WinLoss': {
                icon: 'dx-dashboard-sparkline-win-loss',
                displayName: 'DashboardStringId.SparklineIndicationModeWinLoss'
            }
        };
        return [
            __assign({}, _sparkline_options_1.viewType, { formAdapterItem: _form_adapter_editors_1.iconTypeEditor({ containersMap: viewTypesMap }) }),
            _sparkline_options_1.highlightMinMaxPoints,
            _sparkline_options_1.highlightStartEndPoints
        ];
    };
    return SharedComposers;
}());
exports.SharedComposers = SharedComposers;


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var serializable_model_1 = __webpack_require__(5);
var _data_field_1 = __webpack_require__(437);
exports.IsNumeric = function (dataType) { return (['Decimal', 'Float', 'Double', 'Integer'].indexOf(dataType) > -1); };
exports.IsTextual = function (dataType) { return (['Enum', 'Text'].indexOf(dataType) > -1); };
exports.IsDateTime = function (dataType) { return (['DateTime'].indexOf(dataType) > -1); };
exports.IsOlapHierarchyField = function (dataField) { return !!dataField.groupIndex && dataField.groupIndex() !== undefined; };
var DataField = (function (_super) {
    __extends(DataField, _super);
    function DataField(dataFieldJSON, serializer) {
        if (dataFieldJSON === void 0) { dataFieldJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, dataFieldJSON, serializer) || this;
        _this.expanded = true;
        _this.childNodes = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(dataFieldJSON.ChildNodes, function (item) { return new DataField(item, serializer); });
        if (!_this.isDataFieldNode() || _this.childNodes().length > 0) {
            _this.fieldType(undefined);
        }
        _this.groupDataItems = $.map(dataFieldJSON.GroupFieldTypes || {}, function (type, name) {
            return {
                dataMember: ko.observable(name),
                fieldType: ko.observable(type),
                displayName: ko.observable(dataFieldJSON.GroupCaptions[dataFieldJSON.GroupDataMembers.indexOf(name)]),
                isConvertible: ko.observable(true),
                isDataFieldNode: ko.observable(true)
            };
        });
        _this.defaultNumericFormat = dataFieldJSON.DefaultNumericFormat;
        return _this;
    }
    DataField.isNumeric = function (dataField) {
        return dataField && (exports.IsNumeric(dataField.fieldType()) || (dataField.fieldType() == 'Custom' && DataField.isOlap(dataField.dataMember())));
    };
    DataField.isDateTime = function (dataField) {
        return dataField && exports.IsDateTime(dataField.fieldType());
    };
    DataField.olapMarker = function () {
        return '].[';
    };
    DataField.isOlap = function (dataMember) {
        return dataMember && ((dataMember.indexOf(DataField.olapMarker()) !== -1)
            || ((dataMember[0] === '[') && (dataMember.indexOf(']') === dataMember.length - 1)));
    };
    DataField.isMeasure = function (dataField) {
        if (dataField.isAggregate && dataField.isAggregate())
            return true;
        var isOlap = DataField.isOlap(dataField.dataMember());
        return (!isOlap && DataField.isNumeric(dataField)) || (isOlap && DataField.isOrContainMeasures(dataField.dataMember()));
    };
    DataField.isOrContainMeasures = function (dataMember) {
        return dataMember === '[Measures]' || dataMember.indexOf('[Measures]') !== -1;
    };
    DataField.ifOlapThenOnlyMeasure = function (dataField) {
        return !DataField.isOlap(dataField.dataMember()) || DataField.isOrContainMeasures(dataField.dataMember());
    };
    DataField.ifOlapThenOnlyDimension = function (dataField) {
        return !DataField.isOlap(dataField.dataMember()) || !DataField.isOrContainMeasures(dataField.dataMember());
    };
    DataField.isContinous = function (dataField) {
        return dataField && (DataField.isNumeric(dataField) || dataField.fieldType() === 'DateTime');
    };
    DataField.isOlapHierarchy = function (dataField) {
        return dataField && !!dataField.nodeType && dataField.nodeType() === 'OlapHierarchy';
    };
    DataField.prototype.getInfo = function () {
        return _data_field_1.dataFieldSerializationsInfo;
    };
    return DataField;
}(serializable_model_1.SerializableModel));
exports.DataField = DataField;


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _filter_element_item_base_1 = __webpack_require__(88);
var _chorolpeth_map_item_1 = __webpack_require__(201);
var _geo_point_map_item_base_1 = __webpack_require__(68);
var _map_item_1 = __webpack_require__(44);
var _data_dashboard_item_1 = __webpack_require__(26);
var _series_item_1 = __webpack_require__(107);
var _scatter_chart_item_1 = __webpack_require__(314);
var _base_metadata_1 = __webpack_require__(4);
exports.SectionDescriptors = {
    HiddenDimensions: {
        title: 'DashboardWebStringId.Binding.HiddenDimensions',
        bindingProperty: {
            propertyName: _data_dashboard_item_1.hiddenDimensions.propertyName,
            dataItemType: 'Dimension',
            emptyPlaceholder: 'DashboardWebStringId.Binding.AddDimension',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureDimension'
        }
    },
    HiddenMeasures: {
        title: 'DashboardWebStringId.Binding.HiddenMeasures',
        bindingProperty: {
            propertyName: _data_dashboard_item_1.hiddenMeasures.propertyName,
            dataItemType: 'Measure',
            emptyPlaceholder: 'DashboardWebStringId.Binding.AddMeasure',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureMeasure'
        }
    },
    SeriesDimension: {
        title: _base_metadata_1.BindingSectionTitles.SeriesDimension,
        bindingProperty: {
            propertyName: _series_item_1.seriesDimensions.propertyName,
            dataItemType: 'Dimension',
            emptyPlaceholder: 'DashboardWebStringId.Binding.AddSeries',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureSeries'
        }
    },
    Arguments: {
        title: _base_metadata_1.BindingSectionTitles.Arguments,
        bindingProperty: {
            propertyName: _base_metadata_1.argumentsPropertyName,
            dataItemType: 'Dimension',
            emptyPlaceholder: 'DashboardWebStringId.Binding.AddArgument',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureArgument'
        }
    },
    Values: {
        title: 'DashboardStringId.DescriptionValues',
        bindingProperty: {
            propertyName: _base_metadata_1.valuesPropertyName,
            dataItemType: 'Measure',
            emptyPlaceholder: 'DashboardWebStringId.Binding.AddValue',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureValue'
        }
    },
    FilterDimensions: {
        title: 'DashboardStringId.DescriptionDimensions',
        bindingProperty: {
            propertyName: _filter_element_item_base_1.filterDimensions.propertyName,
            dataItemType: 'Dimension',
            emptyPlaceholder: 'DashboardWebStringId.Binding.AddDimension',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureDimension'
        }
    },
    SparklineArgument: {
        title: 'DashboardWebStringId.Binding.Sparkline',
        bindingProperty: {
            propertyName: _base_metadata_1.sparklineArgumentPropertyName,
            dataItemType: 'Dimension',
            emptyPlaceholder: 'DashboardWebStringId.Binding.SetArgument',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureArgument'
        }
    },
    SingleArgument: {
        title: _base_metadata_1.BindingSectionTitles.SingleArgument,
        bindingProperty: {
            propertyName: _base_metadata_1.argumentPropertyName,
            dataItemType: 'Dimension',
            emptyPlaceholder: 'DashboardWebStringId.Binding.SetArgument',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureArgument'
        }
    },
    Value: {
        title: 'DashboardStringId.ValueCaption',
        bindingProperty: {
            propertyName: _base_metadata_1.valuePropertyName,
            dataItemType: 'Measure',
            emptyPlaceholder: 'DashboardWebStringId.Binding.SetValue',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureValue'
        }
    },
    Latitude: {
        title: 'DashboardStringId.Latitude',
        bindingProperty: {
            propertyName: _geo_point_map_item_base_1.latitude.propertyName,
            dataItemType: 'Dimension',
            emptyPlaceholder: 'DashboardWebStringId.Binding.SetLatitude',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureLatitude'
        }
    },
    Longitude: {
        title: 'DashboardStringId.Longitude',
        bindingProperty: {
            propertyName: _geo_point_map_item_base_1.longitude.propertyName,
            dataItemType: 'Dimension',
            emptyPlaceholder: 'DashboardWebStringId.Binding.SetLongitude',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureLongitude'
        }
    },
    TooltipDimensions: {
        title: 'DashboardWebStringId.Binding.TooltipDimensions',
        bindingProperty: {
            propertyName: _geo_point_map_item_base_1.tooltipDimensions.propertyName,
            dataItemType: 'Dimension',
            emptyPlaceholder: 'DashboardWebStringId.Binding.AddDimension',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureDimension'
        }
    },
    TooltipMeasures: {
        title: 'DashboardWebStringId.Binding.TooltipMeasures',
        bindingProperty: {
            propertyName: _map_item_1.tooltipMeasures.propertyName,
            dataItemType: 'Measure',
            emptyPlaceholder: 'DashboardWebStringId.Binding.AddMeasure',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureMeasure'
        }
    },
    Columns: {
        title: 'DashboardStringId.DescriptionColumns',
        bindingProperty: {
            propertyName: _base_metadata_1.columnsPropertyName,
            dataItemType: 'Dimension',
            emptyPlaceholder: 'DashboardWebStringId.Binding.AddColumn',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureColumn'
        }
    },
    Rows: {
        title: 'DashboardStringId.DescriptionRows',
        bindingProperty: {
            propertyName: _base_metadata_1.rowsPropertyName,
            dataItemType: 'Dimension',
            emptyPlaceholder: 'DashboardWebStringId.Binding.AddRow',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureRow'
        }
    },
    Weight: {
        title: 'DashboardStringId.WeightCaption',
        bindingProperty: {
            propertyName: _base_metadata_1.weightPropertyName,
            dataItemType: 'Measure',
            emptyPlaceholder: 'DashboardWebStringId.Binding.SetWeight',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureWeight'
        }
    },
    Color: {
        title: 'DashboardStringId.DescriptionItemColor',
        bindingProperty: {
            propertyName: _base_metadata_1.colorPropertyName,
            dataItemType: 'Measure',
            emptyPlaceholder: 'DashboardWebStringId.Binding.SetColor',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureColor'
        }
    },
    AttributeDimension: {
        title: 'DashboardWebStringId.Binding.Attribute',
        bindingProperty: {
            propertyName: _chorolpeth_map_item_1.attributeDimension.propertyName,
            dataItemType: 'Dimension',
            emptyPlaceholder: 'DashboardWebStringId.Binding.SetAttribute',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureAttribute'
        }
    },
    Argument: {
        title: _base_metadata_1.BindingSectionTitles.SingleArgument,
        bindingProperty: {
            propertyName: _base_metadata_1.argumentPropertyName,
            dataItemType: 'Dimension',
            emptyPlaceholder: 'DashboardWebStringId.Binding.SetArgument',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureArgument'
        }
    },
    AxisXMeasure: {
        title: 'DashboardWebStringId.Binding.XAxis',
        bindingProperty: {
            propertyName: _scatter_chart_item_1.axisXMeasure.propertyName,
            dataItemType: 'Measure',
            emptyPlaceholder: 'DashboardWebStringId.Binding.SetValue',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureValue'
        }
    },
    AxisYMeasure: {
        title: 'DashboardWebStringId.Binding.YAxis',
        bindingProperty: {
            propertyName: _scatter_chart_item_1.axisYMeasure.propertyName,
            dataItemType: 'Measure',
            emptyPlaceholder: 'DashboardWebStringId.Binding.SetValue',
            selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureValue'
        }
    }
};
var SurfaceItemsFactory = (function () {
    function SurfaceItemsFactory() {
        this._itemsMap = {};
    }
    SurfaceItemsFactory.prototype.register = function (dashboardItemType, surfaceTypeConstructor) {
        this._itemsMap[dashboardItemType] = surfaceTypeConstructor;
    };
    SurfaceItemsFactory.prototype.createSurfaceItem = function (dashboardItem, dashboardModel, dataSourceBrowser) {
        if (dashboardItem && dashboardItem.itemType && dashboardItem.itemType()) {
            var surfaceTypeConstructor = this._itemsMap[dashboardItem.itemType()];
            if (surfaceTypeConstructor) {
                return new surfaceTypeConstructor(dashboardItem, dashboardModel, dataSourceBrowser);
            }
        }
        return null;
    };
    return SurfaceItemsFactory;
}());
exports.SurfaceItemsFactory = SurfaceItemsFactory;
exports.surfaceItemsFactory = new SurfaceItemsFactory();


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _default_1 = __webpack_require__(6);
var special_values_1 = __webpack_require__(39);
exports.ALL_ELEMENT = {
    value: { all: true },
    key: -1,
    get text() {
        return _default_1.getLocalizationById('DashboardStringId.FilterElementShowAllItem') || '(All)';
    },
    get html() {
        return this.text;
    },
    isAll: true
};
var localizer = (function () {
    function localizer() {
    }
    localizer.getString = function (key) {
        return _default_1.getLocalizationById(key);
    };
    localizer.getPredefinedString = function (value) {
        switch (value) {
            case special_values_1.specialValues.nullValueGuid:
            case special_values_1.specialValues.olapNullValueGuid:
                return _default_1.getLocalizationById('DashboardStringId.DashboardNullValue');
            case special_values_1.specialValues.othersValueGuid:
                return _default_1.getLocalizationById('DashboardStringId.TopNOthersValue');
            case special_values_1.specialValues.errorValueGuid:
                return _default_1.getLocalizationById('DashboardStringId.DashboardErrorValue');
            default:
                return undefined;
        }
    };
    return localizer;
}());
exports.localizer = localizer;


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var custom_store_1 = __webpack_require__(120);
var data_source_1 = __webpack_require__(65);
var ko = __webpack_require__(0);
function subscribeArrayChange(array, handlers) {
    return array.subscribe(function (changes) {
        changes.forEach(function (arrayChange) {
            var change = arrayChange;
            if (change.status === 'added' && handlers.added) {
                handlers.added(change.value, change.index);
            }
            if (change.status === 'deleted' && handlers.deleted) {
                handlers.deleted(change.value);
            }
        });
    }, null, 'arrayChange');
}
exports.subscribeArrayChange = subscribeArrayChange;
function subscribeWithPrev(target, callback) {
    var prevValue;
    var disposables = [];
    disposables.push(target.subscribe(function (value) {
        prevValue = value;
    }, null, 'beforeChange'));
    disposables.push(target.subscribe(function (value) {
        callback(prevValue, value);
        prevValue = undefined;
    }));
    return disposables;
}
exports.subscribeWithPrev = subscribeWithPrev;
function syncArrayHelper(sourceArray, destArray, addHandler) {
    destArray(sourceArray.peek().map(function (item) { return addHandler(item); }));
    return sourceArray.subscribe(function (changes) {
        changes.forEach(function (arrayChange) {
            var change = arrayChange;
            if (change.status === 'added') {
                destArray.splice(change.index, 0, addHandler(change.value));
            }
            else if (change.status === 'deleted') {
                destArray.splice(change.index, 1);
            }
        });
    }, null, 'arrayChange');
}
exports.syncArrayHelper = syncArrayHelper;
function subscribeToArrayItemProperties(array, handler) {
    var subscriptionInfoList = [];
    var subscribe = function (item) {
        subscriptionInfoList.push({ object: item, subscriptions: [].concat(handler(item) || []) });
    };
    var unsubscribe = function (item) {
        var info = subscriptionInfoList.filter(function (info) { return info.object === item; })[0];
        if (info) {
            info.subscriptions.forEach(function (subscription) { return subscription.dispose(); });
            subscriptionInfoList.splice(subscriptionInfoList.indexOf(info), 1);
        }
    };
    array().forEach(subscribe);
    var arrayChangeSubscribtion = subscribeArrayChange(array, {
        added: subscribe,
        deleted: unsubscribe
    });
    return {
        dispose: function () {
            arrayChangeSubscribtion.dispose();
            arrayChangeSubscribtion = null;
            subscriptionInfoList.forEach(function (info) { return info.subscriptions.forEach(function (subscription) { return subscription.dispose(); }); });
            subscriptionInfoList.splice(0, subscriptionInfoList.length);
        }
    };
}
exports.subscribeToArrayItemProperties = subscribeToArrayItemProperties;
function subscribeAndPerform(subscribable, action) {
    action(subscribable());
    return subscribable.subscribe(action);
}
exports.subscribeAndPerform = subscribeAndPerform;
function safeSubscribe(observables, handler) {
    var computed = ko.pureComputed(function () { return Object.keys(observables).reduce(function (acc, key) { acc[key] = observables[key](); return acc; }, {}); });
    var prevDisposable = handler(computed());
    var subscription = computed.subscribe(function (args) {
        prevDisposable && prevDisposable.dispose();
        prevDisposable = handler(args);
    });
    return {
        dispose: function () {
            subscription.dispose();
            computed.dispose();
            prevDisposable && prevDisposable.dispose();
        }
    };
}
exports.safeSubscribe = safeSubscribe;
function safeComputed(observables, handler) {
    var observable = ko.observable();
    var subscription = safeSubscribe(observables, function (args) {
        observable(handler(args));
    });
    var computed = ko.pureComputed(function () { return observable(); });
    var oldDispose = computed.dispose;
    computed.dispose = function () {
        subscription.dispose();
        oldDispose.call(computed);
    };
    return computed;
}
exports.safeComputed = safeComputed;
function createObservableDataSource(observables, load) {
    var computed = ko.pureComputed(function () { return Object.keys(observables).reduce(function (acc, key) { acc[key] = observables[key](); return acc; }, {}); });
    var dataSource = new data_source_1.default({
        store: new custom_store_1.default({
            loadMode: 'raw',
            load: function () { return load(computed()); }
        })
    });
    var subscription = computed.subscribe(function (_) {
        dataSource.reload();
    });
    return {
        dataSource: dataSource,
        dispose: function () {
            subscription.dispose();
            if (dataSource['_disposed'] !== true)
                dataSource.dispose();
            computed.dispose();
        }
    };
}
exports.createObservableDataSource = createObservableDataSource;


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _knockout_utils_1 = __webpack_require__(17);
function collectionItemType(itemType) {
    var _this = this;
    return function (target, key) {
        var createObjectPropertyDescriptor = function () {
            var _subscription;
            var _val = _this[key];
            var getter = function () {
                return _val;
            };
            var setter = function (newVal) {
                if (!!_subscription) {
                    _subscription.dispose();
                    _subscription = null;
                }
                if (ko.isObservable(newVal) && Array.isArray(ko.unwrap(newVal))) {
                    _subscription = _knockout_utils_1.subscribeArrayChange(newVal, {
                        added: function (item) {
                            item.itemType(itemType);
                        }
                    });
                }
                _val = newVal;
            };
            return {
                get: getter,
                set: setter,
                enumerable: true,
                configurable: true
            };
        };
        var prototypePropertyDescriptor = {
            get: null,
            set: null,
            enumerable: true,
            configurable: true
        };
        var getter = function () {
            var descriptor = Object.getOwnPropertyDescriptor(this, key);
            if (descriptor === void 0) {
                Object.defineProperty(this, key, createObjectPropertyDescriptor());
            }
            return this[key];
        };
        var setter = function (newVal) {
            var descriptor = Object.getOwnPropertyDescriptor(this, key);
            if (descriptor === void 0) {
                Object.defineProperty(this, key, createObjectPropertyDescriptor());
            }
            this[key] = newVal;
        };
        prototypePropertyDescriptor.get = getter;
        prototypePropertyDescriptor.set = setter;
        if (delete _this[key]) {
            Object.defineProperty(target, key, prototypePropertyDescriptor);
        }
    };
}
exports.collectionItemType = collectionItemType;


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultExtensions = {};
exports.designerExtensions = {};


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
var data_item_format_1 = __webpack_require__(255);
exports.dataItem = { propertyName: 'dataItem', displayName: 'DashboardWebStringId.DataItem' };
exports.uniqueName = { propertyName: 'uniqueName', modelName: '@DefaultId' };
exports.dataItemDataMember = { propertyName: 'dataMember', modelName: '@DataMember' };
exports.numericFormat = { propertyName: 'numericFormat', modelName: 'NumericFormat', displayName: 'DashboardWebStringId.TextBoxFormatText', type: data_item_format_1.DataItemNumericFormat };
exports.dateTimeFormat = { propertyName: 'dateTimeFormat', modelName: 'DateTimeFormat', displayName: 'DashboardWebStringId.TextBoxFormatText', type: data_item_format_1.DataItemDateTimeFormat };
exports.absoluteVariationNumericFormat = { propertyName: 'absoluteVariationNumericFormat', modelName: 'AbsoluteVariationNumericFormat', type: data_item_format_1.AbsoluteVariationNumericFormat };
exports.percentVariationNumericFormat = { propertyName: 'percentVariationNumericFormat', modelName: 'PercentVariationNumericFormat', type: data_item_format_1.PercentVariationNumericFormat };
exports.percentOfTargetNumericFormat = { propertyName: 'percentOfTargetNumericFormat', modelName: 'PercentOfTargetNumericFormat', type: data_item_format_1.PercentOfTargetNumericFormat };
exports.showValues = { propertyName: 'showValues', modelName: '@ShowValues', displayName: 'DashboardWebStringId.DataItem.ShowValues', defaultVal: true, simpleFormAdapterItem: 'yesNoButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.showTotals = { propertyName: 'showTotals', modelName: '@ShowTotals', displayName: 'DashboardWebStringId.DataItem.ShowTotals', defaultVal: true, simpleFormAdapterItem: 'yesNoButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.showGrandTotals = { propertyName: 'showGrandTotals', modelName: '@ShowGrandTotals', displayName: 'DashboardWebStringId.DataItem.ShowGrandTotals', defaultVal: true, simpleFormAdapterItem: 'yesNoButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.dataItemLinkSerializationsInfo = [_base_metadata_1.itemType, exports.uniqueName, exports.dataItem];
exports.dataItemSerializationsInfo = [_base_metadata_1.itemType, exports.dataItemDataMember, _base_metadata_1.name, exports.uniqueName, exports.numericFormat, exports.dateTimeFormat, exports.showValues, exports.showTotals, exports.showGrandTotals];


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.localizationId = {
    FilterElementShowAllItem: 'DashboardStringId.FilterElementShowAllItem',
    DateTimeQuarterFormat: 'DashboardStringId.DateTimeQuarterFormat',
    buttonNames: {
        ClearMasterFilter: 'DashboardStringId.ActionClearMasterFilter',
        ClearSelection: 'DashboardStringId.ActionClearSelection',
        ElementSelection: 'DashboardStringId.ActionOtherValues',
        DrillUp: 'DashboardStringId.ActionDrillUp',
        ExportTo: 'DashboardStringId.ActionExportTo',
        ExportToPdf: 'DashboardStringId.ActionExportToPdf',
        ExportToImage: 'DashboardStringId.ActionExportToImage',
        ExportToExcel: 'DashboardStringId.ActionExportToExcel',
        ExportTemplate: 'DashboardStringId.ActionExportTemplate',
        AllowMultiselection: 'DashboardStringId.ActionAllowMultiselection',
        ButtonCancel: 'DashboardStringId.ButtonCancel',
        ButtonOK: 'DashboardStringId.ButtonOK',
        ButtonReset: 'DashboardStringId.ButtonReset',
        ButtonSubmit: 'DashboardStringId.ButtonSubmit',
        ButtonExport: 'DashboardStringId.ButtonExport',
        InitialExtent: 'DashboardStringId.InitialExtent',
        GridResetColumnWidths: 'DashboardStringId.GridResetColumnWidths',
        GridSortAscending: 'DashboardStringId.GridSortAscending',
        GridSortDescending: 'DashboardStringId.GridSortDescending',
        GridClearSorting: 'DashboardStringId.GridClearSorting',
        AddTimePeriod: 'DashboardStringId.ActionSelectDateTimePeriod',
        CustomPeriod: 'DashboardStringId.RangeFilterCustomDateTimePeriod',
        SelectDate: 'DashboardStringId.SelectDate'
    },
    labelName: {
        ParametersFormCaption: 'DashboardStringId.ParametersFormCaption',
        ParametersFormAllowNullColumnCaption: 'DashboardStringId.ParametersFormAllowNullColumnCaption',
        ParametersFormValueColumnCaption: 'DashboardStringId.ParametersFormValueColumnCaption',
        ParametersFormNameColumnCaption: 'DashboardStringId.ParametersFormNameColumnCaption',
        ParametersFormCalendarTodayButton: 'DashboardStringId.ParametersFormCalendarTodayButton',
        PageLayout: 'DashboardStringId.PageLayout',
        PageLayoutAuto: 'DashboardStringId.PageLayoutAuto',
        PageLayoutPortrait: 'DashboardStringId.PageLayoutPortrait',
        PageLayoutLandscape: 'DashboardStringId.PageLayoutLandscape',
        PaperKind: 'DashboardStringId.PaperKind',
        PaperKindLetter: 'DashboardStringId.PaperKindLetter',
        PaperKindLegal: 'DashboardStringId.PaperKindLegal',
        PaperKindExecutive: 'DashboardStringId.PaperKindExecutive',
        PaperKindA5: 'DashboardStringId.PaperKindA5',
        PaperKindA4: 'DashboardStringId.PaperKindA4',
        PaperKindA3: 'DashboardStringId.PaperKindA3',
        ScaleMode: 'DashboardStringId.ScaleMode',
        ScaleModeNone: 'DashboardStringId.ScaleModeNone',
        ScaleModeUseScaleFactor: 'DashboardStringId.ScaleModeUseScaleFactor',
        ScaleModeAutoFitToPagesWidth: 'DashboardStringId.ScaleModeAutoFitToPagesWidth',
        AutoFitPageCount: 'DashboardStringId.AutoFitPageCount',
        ScaleFactor: 'DashboardStringId.ScaleFactor',
        PrintHeadersOnEveryPage: 'DashboardStringId.PrintHeadersOnEveryPage',
        FitToPageWidth: 'DashboardStringId.FitToPageWidth',
        SizeMode: 'DashboardStringId.SizeMode',
        SizeModeNone: 'DashboardStringId.SizeModeNone',
        SizeModeStretch: 'DashboardStringId.SizeModeStretch',
        SizeModeZoom: 'DashboardStringId.SizeModeZoom',
        AutoArrangeContent: 'DashboardStringId.AutoArrangeContent',
        ImageFormat: 'DashboardStringId.ImageFormat',
        ExcelFormat: 'DashboardStringId.ExcelFormat',
        CsvValueSeparator: 'DashboardStringId.CsvValueSeparator',
        ExportFilters: 'DashboardStringId.ExportFilters',
        ExportParameters: 'DashboardStringId.ExportParameters',
        IncludeExportDashboardState: 'DashboardStringId.IncludeExportDashboardState',
        DashboardStatePosition: 'DashboardStringId.DashboardStatePosition',
        Resolution: 'DashboardStringId.Resolution',
        ShowTitle: 'DashboardStringId.ShowTitle',
        Title: 'DashboardStringId.Title',
        FileName: 'DashboardStringId.FileName',
        FilterStatePresentationAfter: 'DashboardStringId.FilterStatePresentationAfter',
        FilterStatePresentationAfterAndSplitPage: 'DashboardStringId.FilterStatePresentationAfterAndSplitPage',
        FilterStatePresentationSplitSheet: 'DashboardStringId.FilterStatePresentationSplitSheet',
        SelectRange: 'DashboardStringId.RangeFilterSelectRange',
        RangeFilterSelectRangeFromCaption: 'DashboardStringId.RangeFilterSelectRangeFromCaption',
        RangeFilterSelectRangeToCaption: 'DashboardStringId.RangeFilterSelectRangeToCaption'
    },
    sparkline: {
        TooltipStartValue: 'DashboardStringId.SparklineTooltipStartValue',
        TooltipEndValue: 'DashboardStringId.SparklineTooltipEndValue',
        TooltipMinValue: 'DashboardStringId.SparklineTooltipMinValue',
        TooltipMaxValue: 'DashboardStringId.SparklineTooltipMaxValue'
    },
    MessageCustomItemIsNotSupported: 'DashboardStringId.MessageCustomItemIsNotSupported',
    MessageGridHasNoData: 'DashboardStringId.MessageGridHasNoData',
    MessagePivotHasNoData: 'DashboardStringId.MessagePivotHasNoData',
    PivotGridGrandTotal: 'DashboardStringId.PivotGridGrandTotal',
    PivotGridTotal: 'DashboardStringId.PivotGridTotal',
    ChartTotalValue: 'DashboardStringId.ChartTotalValue',
    ParametersSelectorText: 'DashboardStringId.ParametersSelectorText',
    OpenCaption: 'DashboardStringId.OpenCaption',
    HighCaption: 'DashboardStringId.HighCaption',
    LowCaption: 'DashboardStringId.LowCaption',
    CloseCaption: 'DashboardStringId.CloseCaption',
    NumericFormatUnitSymbolThousands: 'DashboardStringId.NumericFormatUnitSymbolThousands',
    NumericFormatUnitSymbolMillions: 'DashboardStringId.NumericFormatUnitSymbolMillions',
    NumericFormatUnitSymbolBillions: 'DashboardStringId.NumericFormatUnitSymbolBillions',
    FilterElementCheckedComboBoxNoDataCaption: 'DashboardStringId.FilterElementCheckedComboBoxNoDataCaption',
    FilterElementRadioComboBoxNoDataCaption: 'DashboardStringId.FilterElementRadioComboBoxNoDataCaption',
    FilterElementNoDataToDisplay: 'DashboardStringId.FilterElementNoDataToDisplay',
    OlapRaggedHierarchyNoneItemCaption: 'DashboardStringId.OlapRaggedHierarchyNoneItemCaption',
    TreemapLabelArgumentTemplate: 'DashboardStringId.TreemapLabelArgumentTemplate',
    TreemapLabelValueTemplate: 'DashboardStringId.TreemapLabelValueTemplate',
    SearchNullValuePrompt: 'DashboardStringId.SearchNullValuePrompt'
};


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var data_source_1 = __webpack_require__(65);
var list_1 = __webpack_require__(171);
var tag_box_1 = __webpack_require__(101);
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var _common_1 = __webpack_require__(35);
var _utils_1 = __webpack_require__(3);
var _parameters_helper_1 = __webpack_require__(55);
var _expression_editor_1 = __webpack_require__(614);
var _condition_type_editor_1 = __webpack_require__(617);
var _rule_ranges_editor_1 = __webpack_require__(618);
var _style_settings_editor_1 = __webpack_require__(363);
var _currency_selector_1 = __webpack_require__(619);
var _filter_expression_editor_1 = __webpack_require__(621);
var _container_type_selector_1 = __webpack_require__(92);
var form_item_templates_1 = __webpack_require__(622);
var _collection_editor_viewmodel_1 = __webpack_require__(79);
var _editable_list_editor_viewmodel_1 = __webpack_require__(623);
var _inline_edit_collection_editor_viewmodel_1 = __webpack_require__(624);
var _file_picker_1 = __webpack_require__(367);
function getFieldValue(args) {
    return ko.unwrap(args.component.option('formData')[args.dataField]);
}
exports.getFieldValue = getFieldValue;
function localizeValues(v) {
    return v.map(function (v) { return ({ value: v.value, displayValue: _default_1.getLocalizationById(v.displayValueId) }); });
}
exports.dateBoxEditor = function () { return ({
    editorType: 'dxDateBox',
    editorOptions: {
        closeOnValueChange: true,
        showClearButton: true,
        type: 'datetime'
    }
}); };
exports.numberBoxEditor = function (options) {
    if (options === void 0) { options = {}; }
    return ({
        editorType: 'dxNumberBox',
        editorOptions: __assign({}, options, { showSpinButtons: true })
    });
};
exports.checkBoxEditor = function (args) {
    var text = args && args.text || null;
    return {
        editorType: 'dxCheckBox',
        label: { visible: !text },
        editorOptions: {
            elementAttr: {
                class: 'dx-dashboard-check-box'
            },
            text: text
        }
    };
};
exports.textBoxEditor = function () { return ({ editorType: 'dxTextBox' }); };
exports.guidEditor = function () { return ({
    editorType: 'dxTextBox',
    validationRules: [
        {
            type: 'custom',
            validationCallback: function (options) { return _parameters_helper_1.validateGuid(options.value); },
            message: _default_1.getLocalizationById('AnalyticsCoreStringId.GuidIsRequired_Error')
        }
    ]
}); };
exports.selectBoxEditor = function (values) { return function (context) {
    return {
        editorType: 'dxSelectBox',
        editorOptions: {
            items: localizeValues(values),
            valueExpr: 'value',
            displayExpr: 'displayValue',
            displayCustomValue: true,
            dropDownOptions: { container: context.widgetContainer }
        }
    };
}; };
exports.dynamicSelectBoxEditor = function (values) { return function (context) {
    var disposables = [];
    var dataSource = new data_source_1.default({
        load: function () { return localizeValues(values()); },
        key: 'value',
        loadMode: 'raw'
    });
    return {
        editorType: 'dxSelectBox',
        editorOptions: {
            dataSource: dataSource,
            valueExpr: 'value',
            displayExpr: 'displayValue',
            displayCustomValue: true,
            dropDownOptions: { container: context.widgetContainer },
            onInitialed: function (_) {
                disposables.push(values.subscribe(function (newItems) {
                    dataSource.reload();
                }));
            },
            onDisposing: function (_) {
                disposables.forEach(function (d) { return d.dispose(); });
                disposables = [];
            }
        }
    };
}; };
exports.buttonGroupEditor = function (values) { return ({
    template: form_item_templates_1.FormItemTemplates.buttonGroup,
    editorOptions: {
        keyExpr: 'value',
        items: values.map(function (val) { return ({ value: val.value, text: _default_1.getLocalizationById(val.displayValueId) }); }),
    }
}); };
exports.listEditor = function (values) { return ({
    template: function (args) { return getListTemplate(args, values); }
}); };
function getListTemplate(args, values) {
    var div = document.createElement('div');
    var initialValue = getFieldValue(args);
    var options = {
        dataSource: values,
        selectionMode: 'single',
        disabled: args.editorOptions && args.editorOptions.disabled || undefined,
        selectedItems: values.filter(function (value) { return value.value === initialValue; }),
        onItemClick: function (e) { args.component.updateData(args.dataField, e.itemData.value); },
        itemTemplate: function (itemData) {
            var span = document.createElement('span');
            span.innerText = _default_1.getLocalizationById(itemData.displayValueId);
            return span;
        }
    };
    new list_1.default(div, options);
    return div;
}
exports.editableListEditor = function (options) { return function (context) {
    return {
        editorOptions: options,
        template: function (args) { return editableListEditorTemplate(args, context, options); }
    };
}; };
var editableListEditorTemplate = function (args, context, options) {
    var viewModel = new _editable_list_editor_viewmodel_1.EditableListEditorViewModel(options, args.component.option('formData')[args.dataField]);
    var div = document.createElement('div');
    ko.applyBindingsToNode(div, { template: { name: 'dx-dashboard-collection-editor', data: viewModel } }, context.bindingContext);
    return div;
};
exports.collectionEditor = function (options) { return function (context) {
    return {
        editorOptions: options,
        template: function (args) { return collectionEditorTemplate(args, context, options); }
    };
}; };
var collectionEditorTemplate = function (args, context, options) {
    var viewModel = new _collection_editor_viewmodel_1.CollectionEditorViewModel(options, args.component.option('formData')[args.dataField]);
    var div = document.createElement('div');
    ko.applyBindingsToNode(div, { template: { name: 'dx-dashboard-collection-editor', data: viewModel } }, context.bindingContext);
    return div;
};
exports.inlineEditCollectionEditor = function (options) { return function (context) { return ({
    editorOptions: options,
    template: function (args, elt) { return inlineEditCollectionEditorTemplate(args, _utils_1.$unwrap(elt), context, options); }
}); }; };
var inlineEditCollectionEditorTemplate = function (args, elt, context, options) {
    var viewModel = new _inline_edit_collection_editor_viewmodel_1.InlineEditCollectionEditorViewModel(options, args.component.option('formData')[args.dataField]);
    ko.applyBindingsToNode(elt, { template: { name: 'dx-dashboard-editable-collection-editor', data: viewModel } }, context.bindingContext);
};
exports.textPreviewEditor = function (options) { return function (context) {
    return {
        template: function (args) {
            var field = args.component.option('formData')[args.dataField];
            var div = document.createElement('div');
            div.classList.add('dx-dashboard-text-preview');
            ko.applyBindingsToNode(div, { template: { name: 'dx-dashboard-text-preview', data: options.target } }, context.bindingContext);
            return div;
        }
    };
}; };
exports.actionButtons = function (options) { return function (context) {
    return {
        template: function (args) {
            var div = document.createElement('div');
            ko.applyBindingsToNode(div, { template: { name: 'dx-dashboard-action-buttons', data: { buttons: options } } }, context.bindingContext);
            return div;
        }
    };
}; };
exports.flagsEnumListEditor = function (options) {
    return {
        template: function (args) {
            var div = document.createElement('div');
            div.classList.add('dx-dashboard-point-label-content-type-selector');
            new list_1.default(div, __assign({ showSelectionControls: true, selectionMode: 'multiple', keyExpr: 'value', onInitialized: function (e) {
                    e.component.option('selectedItemKeys', _common_1.getFlagsEnumTypeValues(getFieldValue(args), options.enumDeclaration, 'value'));
                } }, getFlagsEnumWidgetCommonOptions(args, options.values)));
            return div;
        }
    };
};
exports.flagsEnumTagBoxEditor = function (options) { return function (context) {
    return {
        template: function (args) {
            var div = document.createElement('div');
            div.classList.add('dx-dashboard-enum-flags-date-type-selector');
            new tag_box_1.default(div, __assign({ placeholder: _default_1.getLocalizationById('DashboardWebStringId.ConditionalFormatting.DateType.None'), selectAllMode: 'allPages', showSelectionControls: true, showDropDownButton: true, multiline: false, searchEnabled: true, valueExpr: 'value', onInitialized: function (e) {
                    e.component.option('value', _common_1.getFlagsEnumTypeValues(getFieldValue(args), options.enumDeclaration, 'value'));
                } }, getFlagsEnumWidgetCommonOptions(args, options.values), {
                selectAllText: _default_1.getLocalizationById('DashboardStringId.FilterElementShowAllItem'),
                pageLoadMode: 'scrollBottom',
                dropDownOptions: { container: context.widgetContainer }
            }));
            return div;
        }
    };
}; };
function getFlagsEnumWidgetCommonOptions(args, values) {
    return {
        dataSource: values,
        displayExpr: function (e) { return e && _default_1.getLocalizationById(e.displayValueId); },
        onSelectionChanged: function (e) {
            var val = getFieldValue(args);
            e.addedItems.forEach(function (added) {
                val = val | added.value;
            });
            e.removedItems.forEach(function (removed) {
                val = val & ~removed.value;
            });
            args.component.updateData(args.dataField, val);
        },
    };
}
exports.currencyEditor = function () { return function (context) { return ({
    template: function (args) { return currencyEditorTemplate(args, context); }
}); }; };
var currencyEditorTemplate = function (args, context) {
    var div = document.createElement('div');
    var viewModel = new _currency_selector_1.CurrencySelector(args.component.option('formData')[args.dataField], args.editorOptions.disabled);
    ko.applyBindingsToNode(div, { template: { name: 'dx-dashboard-currency-editor-template', data: viewModel } }, context.bindingContext);
    return div;
};
exports.iconTypeEditor = function (options) { return function (context) { return ({
    template: function (args) { return iconTypeEditorTemplate(args, context, options); }
}); }; };
var iconTypeEditorTemplate = function (args, context, options) {
    var div = document.createElement('div');
    var value = args.component.option('formData')[args.dataField];
    var viewModel = new _container_type_selector_1.ContainerTypeSelector(options.containersMap, value, options.containerGroupLocalization || undefined, options.highlightedTypes);
    ko.applyBindingsToNode(div, { template: { name: 'dx-dashboard-container-type-selector-full', data: viewModel } }, context.bindingContext);
    return div;
};
exports.nullableNumberBoxEditor = function (options) { return function (context) {
    return {
        template: function (args) { return nullableNumberBoxEditorTemplate(args, context, options); }
    };
}; };
var nullableNumberBoxEditorTemplate = function (args, context, options) {
    var div = document.createElement('div');
    var value = args.component.option('formData')[args.dataField];
    var defaultValue = options.defaultValue ? options.defaultValue : 0;
    var viewModel = {
        buttonGroupOptions: {
            selectedItemKeys: ko.pureComputed(function () { return [isNaN(value())]; }),
            keyExpr: 'value',
            width: '100%',
            items: [
                { value: true, text: _default_1.getLocalizationById('DashboardWebStringId.Gauge.Scale.Auto') },
                { value: false, text: _default_1.getLocalizationById('DashboardWebStringId.Gauge.Scale.Custom') }
            ],
            onItemClick: function (e) { value(e.itemData.value ? NaN : defaultValue); }
        },
        numberBoxOptions: __assign({}, options.editorOptions, { disabled: ko.pureComputed(function () { return isNaN(value()); }), value: value, showSpinButtons: true, step: 1 })
    };
    ko.applyBindingsToNode(div, { template: { name: 'dx-dashboard-nullable-numberbox', data: viewModel } }, context.bindingContext);
    return div;
};
exports.flowModeSettingsEditor = function () { return function (context) {
    return {
        template: function (args, itemElement) {
            var periodLimit = args.component.option('formData')[args.dataField];
            var viewModel = {
                selectBoxOptions: {
                    items: periodLimit._getAvailableIntervals(),
                    value: periodLimit.interval,
                    valueExpr: 'value',
                    displayExpr: 'displayValue',
                    displayCustomValue: true,
                    dropDownOptions: { container: args.editorOptions.dashboardWidgetContainer }
                },
                numberBoxOptions: {
                    value: periodLimit.offset,
                    showSpinButtons: true,
                    step: 1
                }
            };
            ko.applyBindingsToNode(_utils_1.$unwrap(itemElement), { template: { name: 'dx-dashboard-flow-mode-settings', data: viewModel } }, context.bindingContext);
        }
    };
}; };
exports.calculationExpressionEditor = function (options) { return expressionEditorFormAdapter('dx-dashboard-calculation-expression-editor', function () { return new _expression_editor_1.CalculationExpressionEditor(options); }); };
exports.filterEditor = function (options) { return expressionEditorFormAdapter('dx-dashboard-filter-expression-editor', function () { return new _filter_expression_editor_1.FilterExpressionEditorViewModel(options); }); };
function expressionEditorFormAdapter(template, createViewModel) {
    return function (context) {
        return {
            template: function (args, itemElement) {
                var viewModel = createViewModel();
                ko.applyBindingsToNode(_utils_1.$unwrap(itemElement), { template: { name: template, data: viewModel } }, context.bindingContext);
            }
        };
    };
}
exports.filePickerEditor = function (options) {
    return {
        template: function (args) {
            var div = document.createElement('div');
            new _file_picker_1.dxDashboardFilePicker(div, __assign({}, options, { value: getFieldValue(args), onValueChanged: function (e) {
                    args.component.updateData(args.dataField, e.value);
                } }));
            return div;
        }
    };
};
exports.nestedPropertyGridEditor = function (caption) { return function (context) {
    return {
        template: function (args, itemElement) {
            var formatModel = args.component.option('formData')[args.dataField];
            ko.applyBindingsToNode(_utils_1.$unwrap(itemElement), { template: { name: 'dx-dashboard-nested-propertygrid-editor', data: {
                        object: formatModel,
                        caption: caption
                    } } }, context.bindingContext);
        }
    };
}; };
exports.ruleRangesEditor = function (condition) { return function (context) {
    return {
        template: function (args, itemElement) {
            var viewModel = new _rule_ranges_editor_1.RuleRangesEditor(condition);
            ko.applyBindingsToNode(_utils_1.$unwrap(itemElement), { template: { name: 'dx-dashboard-rule-ranges-editor', data: viewModel } }, context.bindingContext);
        }
    };
}; };
exports.styleSettingsEditor = function (options) {
    if (options === void 0) { options = {}; }
    return function (context) {
        return {
            template: function (args, itemElement) {
                var styleSettings = args.component.option('formData')[args.dataField];
                var viewModel = new _style_settings_editor_1.StyleSettingsEditor(styleSettings, options);
                ko.applyBindingsToNode(_utils_1.$unwrap(itemElement), { template: { name: 'dx-dashboard-style-settings-editor', data: viewModel } }, context.bindingContext);
            }
        };
    };
};
exports.conditionTypeEditor = function (options) { return function (context) {
    return {
        options: options,
        template: function (args, itemElement) {
            var viewModel = new _condition_type_editor_1.FormatConditionTypeEditorSurface(options);
            ko.applyBindingsToNode(_utils_1.$unwrap(itemElement), { template: { name: 'dx-dashboard-format-rule-condition-type-editor', data: viewModel } }, context.bindingContext);
        }
    };
}; };


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var _data_source_browser_1 = __webpack_require__(40);
var _default_1 = __webpack_require__(6);
var dimension_1 = __webpack_require__(43);
var olap_data_source_1 = __webpack_require__(139);
var disposable_object_1 = __webpack_require__(11);
var _undo_engine_helper_1 = __webpack_require__(27);
var accordion_tab_options_1 = __webpack_require__(224);
var _confirm_dialog_1 = __webpack_require__(225);
var _filter_1 = __webpack_require__(628);
var _filter_utils_1 = __webpack_require__(158);
var _item_filter_display_name_provider_1 = __webpack_require__(226);
var _item_filter_items_provider_1 = __webpack_require__(159);
var _data_item_collection_surface_1 = __webpack_require__(33);
var _section_descriptors_1 = __webpack_require__(15);
var BaseItemSurface = (function (_super) {
    __extends(BaseItemSurface, _super);
    function BaseItemSurface() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._dashboardItemCustomization = function (tabs, model, args) {
            if (_this.customizeDashboardItemTabs) {
                _this.customizeDashboardItemTabs({
                    dashboardItem: model,
                    addSection: function (customTabOption) {
                        accordion_tab_options_1._customizeTabs(tabs, customTabOption, model);
                    }
                });
            }
        };
        return _this;
    }
    BaseItemSurface.prototype.getPropertiesComposer = function () {
        throw "'getPropertiesComposer' method is not implemented.";
    };
    return BaseItemSurface;
}(disposable_object_1.DisposableObject));
exports.BaseItemSurface = BaseItemSurface;
var DataDashboardItemSurface = (function (_super) {
    __extends(DataDashboardItemSurface, _super);
    function DataDashboardItemSurface(dashboardItem, dashboardModel, _dataSourceBrowser) {
        var _this = _super.call(this) || this;
        _this.dashboardItem = dashboardItem;
        _this.dashboardModel = dashboardModel;
        _this._dataSourceBrowser = _dataSourceBrowser;
        _this._dataItemContainerCustomization = function (tabs, target, args) {
            if (_this.customizeDataItemContainerTabs) {
                _this.customizeDataItemContainerTabs({
                    dashboardItem: args.dashboardItem,
                    dataItemContainer: target,
                    addSection: function (customTabOption) {
                        accordion_tab_options_1._customizeTabs(tabs, customTabOption, target);
                    }
                });
            }
        };
        _this.showFilterEditor = function () {
            _this.filterEditorModel(_this._createFilterEditor());
            _this.filterEditorModel().popupVisible(true);
        };
        _this.dataSourceName = ko.observable();
        _this.dataMemberName = ko.observable();
        _this.dataSourceDisplayText = ko.computed(function () {
            var dsName = _this.dashboardItem.dataSource();
            if (!!dsName) {
                var dataSource = _this._dataSourceBrowser.findDataSource(dsName);
                if (!!dataSource) {
                    if (dataSource.supportDataMembers && _this._dataSourceBrowser.isLoading()) {
                        return 'DashboardStringId.MessageLoading';
                    }
                    return _this.dashboardItem.dataMember() ? dataSource.name() + '/' + _this.dashboardItem.dataMember() : dataSource.name();
                }
            }
            return 'DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButton';
        });
        _this.needSetDataSource = ko.computed(function () {
            var dsName = _this.dashboardItem.dataSource();
            if (!!dsName) {
                var dataSource = _this._dataSourceBrowser.findDataSource(dsName);
                if (!!dataSource && dataSource.supportDataMembers) {
                    return !_this.dashboardItem.dataMember();
                }
                return !dataSource;
            }
            return true;
        });
        _this.changeDataSourcePanelVisible = ko.observable(false);
        _this.template = 'dx-dashboard-base-item-surface';
        _this.dataSections = ko.observableArray([]);
        _this.filterEditorModel = ko.observable(null);
        _this.fillSections();
        if (_this.showDefaultSections) {
            _this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(_this, _section_descriptors_1.SectionDescriptors.HiddenDimensions, _this.extendHiddenDimensionsTabs.bind(_this)));
            _this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(_this, _section_descriptors_1.SectionDescriptors.HiddenMeasures, _this.extendHiddenMeasuresTabs.bind(_this)));
        }
        _this.confirmDialogViewModel = new _confirm_dialog_1.ConfirmDialogViewModel();
        _this.toDispose(_this.dataSourceDisplayText);
        _this.dataSections().forEach(function (section) { return _this.toDispose(section); });
        return _this;
    }
    Object.defineProperty(DataDashboardItemSurface.prototype, "showDefaultSections", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    DataDashboardItemSurface.prototype.fillSections = function () {
    };
    DataDashboardItemSurface.prototype.extendHiddenDimensionsTabs = function (tabs, model) {
    };
    DataDashboardItemSurface.prototype.extendHiddenMeasuresTabs = function (tabs, model) {
    };
    DataDashboardItemSurface.prototype._createFilterEditor = function () {
        if (this.isOlap) {
            return new _filter_1.SimpleFilterEditor(this.dashboardItem, this._dataSourceBrowser);
        }
        else {
            var filterOptions = _filter_utils_1.createItemFilterOptions(this.dashboardItem.filterString, this, this._dataSourceBrowser);
            return new dx_analytics_core_1.default.Analytics.Widgets.FilterEditor(filterOptions, ko.observable(new _item_filter_items_provider_1.ItemFilterItemsProvider(this._dataSourceBrowser, this._dataSourceBrowser, this._dataSourceBrowser.parameters, this.dashboardItem, function (di) { return di instanceof dimension_1.Dimension; })), false, new _item_filter_display_name_provider_1.ItemFilterDisplayNameProvider(this.dashboardItem, this._dataSourceBrowser));
        }
    };
    Object.defineProperty(DataDashboardItemSurface.prototype, "isOlap", {
        get: function () {
            return this._dataSourceBrowser.findDataSource(this.dashboardItem.dataSource()) instanceof olap_data_source_1.OlapDataSource;
        },
        enumerable: true,
        configurable: true
    });
    DataDashboardItemSurface.prototype.changeDataSource = function () {
        if (!this.changeDataSourcePanelVisible()) {
            this.dataSourceName(this.dashboardItem.dataSource());
            this.dataMemberName(this.dashboardItem.dataMember());
        }
        this.changeDataSourcePanelVisible(!this.changeDataSourcePanelVisible());
    };
    DataDashboardItemSurface.prototype._changeDataSource = function () {
        this.clearDataBindings();
        this.dashboardItem.dataSource(this.dataSourceName());
        this.dashboardItem.dataMember(this.dataMemberName());
    };
    DataDashboardItemSurface.prototype.saveDataSourceChanges = function () {
        var _this = this;
        if (this.dataSourceName() != this.dashboardItem.dataSource() || this.dataMemberName() != this.dashboardItem.dataMember()) {
            var saveAction = function () {
                if (!!_this.propertiesController) {
                    _this.propertiesController.mainModel(null);
                }
                _this._changeDataSource();
                _this.changeDataSourcePanelVisible(false);
            };
            if (this.dashboardItem.dataItems().length > 0) {
                var result = this.confirmDialogViewModel.confirm(_default_1.getLocalizationById('DashboardWebStringId.Dialog.ConfirmChanges'), _default_1.getLocalizationById('DashboardWebStringId.Dialog.ChangeDataMemberMessage')
                    + '<br/>' + _default_1.getLocalizationById('DashboardWebStringId.Dialog.RemovedDataItemsMessage'), _default_1.getLocalizationById('DashboardWebStringId.Dialog.ButtonYes'), _default_1.getLocalizationById('DashboardWebStringId.Dialog.ButtonDontChange'));
                result.done(function (dialogResult) {
                    if (dialogResult)
                        saveAction();
                });
            }
            else
                saveAction();
        }
        else {
            this.changeDataSourcePanelVisible(false);
        }
    };
    DataDashboardItemSurface.prototype.clearDataBindings = function () {
        this.dataSections().forEach(function (section) {
            if (section.items) {
                var array = [].concat(section.items());
                array.forEach(function (item) {
                    section.removeDataItem(item);
                });
            }
        });
    };
    Object.defineProperty(DataDashboardItemSurface.prototype, "dataSourceBrowser", {
        get: function () {
            var _this = this;
            return {
                getDataFieldsArray: function (dataSourceName) {
                    var deferred = $.Deferred();
                    if (!dataSourceName) {
                        return deferred.resolve(_this.dashboardModel.dataSources().map(function (ds) {
                            return {
                                dataSourceName: ds.componentName(),
                                dataMemberName: '',
                                dataMember: ds.componentName,
                                name: ds.componentName,
                                displayName: ds.name,
                                fieldType: ko.observable('Unknown'),
                                nodeType: ko.observable('DataSource'),
                                isDataFieldNode: ko.observable(!ds.supportDataMembers)
                            };
                        })).promise();
                    }
                    _this._dataSourceBrowser.getDataFieldsArray(dataSourceName, '', '', _data_source_browser_1.isNonCollectionDataField).done(function (dataMembers) {
                        deferred.resolve(dataMembers.map(function (dm) {
                            return {
                                dataSourceName: dataSourceName,
                                dataMemberName: dm.dataMember(),
                                dataMember: dm.dataMember,
                                name: dm.name,
                                displayName: dm.displayName,
                                fieldType: dm.fieldType,
                                nodeType: dm.nodeType,
                                isDataFieldNode: ko.observable(true)
                            };
                        }));
                    });
                    return deferred.promise();
                },
                splitFullPath: function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    return _this._dataSourceBrowser.splitFullPath.apply(_this._dataSourceBrowser, args);
                },
                findDataSource: function (dataSourceName) { return _this._dataSourceBrowser.findDataSource(dataSourceName); }
            };
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        _undo_engine_helper_1.wrapWithUndoRedo
    ], DataDashboardItemSurface.prototype, "_changeDataSource", null);
    return DataDashboardItemSurface;
}(BaseItemSurface));
exports.DataDashboardItemSurface = DataDashboardItemSurface;


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var dimension_1 = __webpack_require__(43);
var measure_1 = __webpack_require__(59);
var _dimension_1 = __webpack_require__(71);
var _measure_1 = __webpack_require__(70);
var _data_field_1 = __webpack_require__(14);
function getDataItemContainerDisplayName(dataSourceBrowser, dashboardItem, dataItemContainer) {
    return dashboardItem._getDataItemContainerDisplayName(dataItemContainer, function (dataItem) { return getDataItemDisplayName(dataSourceBrowser, dashboardItem, dataItem); });
}
exports.getDataItemContainerDisplayName = getDataItemContainerDisplayName;
function getDataItemDisplayName(dataFieldProvider, dataDashboardItem, dataItem) {
    var dataSourceName = dataDashboardItem.dataSource.peek(), queryName = dataDashboardItem.dataMember.peek(), dataMember = dataItem.dataMember(), cacheKey = createKey(dataSourceName, queryName, dataMember);
    if (!dataItem[cacheKey]) {
        var dataFieldObservable = ko.observable(null);
        dataFieldProvider
            .findDataField(dataSourceName, queryName, dataMember, true)
            .done(function (dataField) {
            if (dataField) {
                dataFieldObservable(dataField);
            }
        });
        dataItem[cacheKey] = ko.computed(function () { return getDataItemDisplayNameByField(dataDashboardItem, dataItem, dataFieldObservable); });
    }
    return dataItem[cacheKey]();
}
exports.getDataItemDisplayName = getDataItemDisplayName;
function getDataItemDisplayNameByField(dataDashboardItem, dataItem, dataFieldObservable) {
    if (dataItem.name()) {
        return dataItem.name();
    }
    var dataField = dataFieldObservable();
    if (dataField) {
        return computeDataItemDisplayName(dataDashboardItem, dataItem, dataField);
    }
    else {
        return guessDataItemDisplayName(dataDashboardItem, dataItem);
    }
}
function createKey(dataSourceName, queryName, dataMemberName) {
    return '__dx_displayNameCache_' + [dataSourceName, queryName, dataMemberName].join('_');
}
function guessDataItemDisplayName(dataDashboardItem, dataItem) {
    var dataMember = dataItem.dataMember();
    var isOlap = _data_field_1.DataField.isOlap(dataMember);
    if (isOlap) {
        var parts = dataMember.split(_data_field_1.DataField.olapMarker());
        var length = parts.length - 1;
        return parts[length].substr(0, parts[length].length - 1);
    }
    else if (dataItem instanceof measure_1.Measure) {
        return _getMeasureDisplayName(dataDashboardItem, dataItem, dataMember);
    }
    else if (dataItem instanceof dimension_1.Dimension) {
        var timeGroupInterval = dataItem.dateTimeGroupInterval();
        var postfix = timeGroupInterval !== 'Year' && timeGroupInterval !== 'None' ?
            ' (' + _default_1.getLocalizationById(_dimension_1.dateTimeGroupIntervalsDict[timeGroupInterval]) + ')' : '';
        return dataMember + postfix;
    }
    else {
        return dataMember;
    }
}
function computeDataItemDisplayName(dataDashboardItem, dataItem, dataField) {
    var displayName = dataField.displayName();
    var isOlap = _data_field_1.DataField.isOlap(dataItem.dataMember());
    if (isOlap) {
        return displayName;
    }
    else if (dataItem instanceof measure_1.Measure) {
        return _getMeasureDisplayName(dataDashboardItem, dataItem, displayName, dataField.isAggregate && dataField.isAggregate() || false);
    }
    else if (dataItem instanceof dimension_1.Dimension) {
        var timeGroupInterval = dataItem.dateTimeGroupInterval();
        if (_data_field_1.IsDateTime(dataField.fieldType()) && timeGroupInterval !== 'None') {
            return displayName + ' (' + _default_1.getLocalizationById(_dimension_1.dateTimeGroupIntervalsDict[timeGroupInterval]) + ')';
        }
        else {
            return displayName;
        }
    }
    else {
        return displayName;
    }
}
function _getMeasureDisplayName(dataDashboardItem, measure, dataMemberDisplayName, isAggregate) {
    if (isAggregate === void 0) { isAggregate = false; }
    if (dataDashboardItem._isAttribute(measure)) {
        return dataMemberDisplayName;
    }
    if (!!measure.expression()) {
        return _default_1.getLocalizationById('DashboardWebStringId.Calculations.Expression');
    }
    var prefix = !!measure.calculation.calculation() && _default_1.getLocalizationById(measure.calculation.calculation().name);
    var postfix = isAggregate ? '' : ' (' + _default_1.getLocalizationById(_measure_1.summaryTypeDict[measure.summaryType()]) + ')';
    return ((prefix && (prefix + ' ')) || '') + dataMemberDisplayName + postfix;
}


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var string_1 = __webpack_require__(30);
var legacy_settings_1 = __webpack_require__(80);
var _default_1 = __webpack_require__(6);
var _format_helper_1 = __webpack_require__(47);
var _localizer_1 = __webpack_require__(16);
var _utils_1 = __webpack_require__(3);
exports.defaultNumericFormat = {
    format: 'fixedPoint',
    unitPower: 'auto',
    precision: 0,
    significantDigits: 3
};
exports.defaultPercentFormat = {
    format: 'percent',
    unitPower: 0,
    precision: 2,
    significantDigits: 0,
    showTrailingZeros: false
};
exports.defaultScientificFormat = {
    format: 'exponential',
    precision: 2
};
exports._types = {
    Abbreviated: 'abbr',
    Full: 'full',
    Long: 'long',
    Numeric: 'num',
    Short: 'short',
    TimeOnly: 'timeOnly'
};
function format(value, formatViewModel) {
    var str = _localizer_1.localizer.getPredefinedString(value);
    if (!_utils_1.type.isDefined(str)) {
        var numericFormat = formatViewModel && formatViewModel.NumericFormat, dateTimeFormat = formatViewModel && formatViewModel.DateTimeFormat;
        if (numericFormat) {
            str = this.formatNumeric(value, numericFormat);
        }
        else {
            str = !dateTimeFormat ? this.formatObject(value) : this.formatDateTime(value, dateTimeFormat);
        }
    }
    return str;
}
exports.format = format;
function formatByFormatInfo(value, formatInfo) {
    var str = _localizer_1.localizer.getPredefinedString(value);
    if (!_utils_1.type.isDefined(str)) {
        return _format_helper_1.formatHelper.format(value, formatInfo);
    }
    return str;
}
exports.formatByFormatInfo = formatByFormatInfo;
function formatFilterValue(filterValue) {
    if (_utils_1.type.isDefined(filterValue.Value)) {
        return this.format(filterValue.Value, filterValue.Format);
    }
    var rangeLeft;
    var rangeRight;
    if (_utils_1.type.isDefined(filterValue.RangeLeft)) {
        rangeLeft = this.format(filterValue.RangeLeft, filterValue.Format);
    }
    if (_utils_1.type.isDefined(filterValue.RangeRight)) {
        rangeRight = this.format(filterValue.RangeRight, filterValue.Format);
    }
    return constructIntervalFilterText({ left: rangeLeft, right: rangeRight });
}
exports.formatFilterValue = formatFilterValue;
function constructIntervalFilterText(rangeText) {
    var rangePattern = _default_1.getLocalizationById('DashboardStringId.FromToDatePeriodCaption');
    var fromPattern = _default_1.getLocalizationById('DashboardStringId.FromDatePeriodCaption');
    var toPattern = _default_1.getLocalizationById('DashboardStringId.ToDatePeriodCaption');
    if (rangeText.left && rangeText.right) {
        if (rangeText.right != rangeText.left)
            return string_1.format(rangePattern, rangeText.left, rangeText.right);
        else
            return rangeText.left;
    }
    if (rangeText.left) {
        return string_1.format(fromPattern, rangeText.left);
    }
    if (rangeText.right) {
        return string_1.format(toPattern, rangeText.right);
    }
}
exports.constructIntervalFilterText = constructIntervalFilterText;
function formatNumeric(value, numericFormatViewModel) {
    if (!numericFormatViewModel) {
        return value.toString();
    }
    else {
        var format = this._convertToNumberFormat(numericFormatViewModel);
        return _format_helper_1.formatHelper.format(value, format);
    }
}
exports.formatNumeric = formatNumeric;
function formatDateTime(value, dateFormatViewModel) {
    var format = this._convertToDateFormat(dateFormatViewModel);
    return _format_helper_1.formatHelper.format(value, format);
}
exports.formatDateTime = formatDateTime;
function formatObject(value) {
    return value == null ? '' : value.toString();
}
exports.formatObject = formatObject;
function formatPercentValue(value) {
    return _format_helper_1.formatHelper.format(value, this.defaultPercentFormat);
}
exports.formatPercentValue = formatPercentValue;
function formatScientificAxisValue(value) {
    return _format_helper_1.formatHelper.format(value, this.defaultScientificFormat);
}
exports.formatScientificAxisValue = formatScientificAxisValue;
function formatAxisValue(value, axisMin, axisMax) {
    return _format_helper_1.formatHelper.format(value, this.getAxisFormat(axisMin, axisMax));
}
exports.formatAxisValue = formatAxisValue;
function getAxisFormat(axisMin, axisMax) {
    return {
        format: 'fixedPoint',
        unitPower: this.calculateUnitPower(axisMin, axisMax),
        precision: this.calculatePrecision(axisMin, axisMax),
        significantDigits: 0,
        showTrailingZeros: false
    };
}
exports.getAxisFormat = getAxisFormat;
function calculateUnitPower(axisMin, axisMax) {
    var range = axisMax - axisMin;
    if (range >= 1000000000)
        return 3;
    if (range >= 1000000)
        return 2;
    if (range >= 1000)
        return 1;
    return 0;
}
exports.calculateUnitPower = calculateUnitPower;
function calculatePrecision(axisMin, axisMax) {
    var precision = 0, range = axisMax - axisMin;
    if (range > 0) {
        var smallValue = Math.pow(10, -precision);
        while (range < smallValue) {
            smallValue /= 10;
            precision++;
        }
    }
    return precision + 2;
}
exports.calculatePrecision = calculatePrecision;
function convertToFormat(formatViewModel) {
    if (formatViewModel) {
        var numericFormat = formatViewModel.NumericFormat;
        if (numericFormat)
            return this._convertToNumberFormat(numericFormat);
        var dateTimeFormat = formatViewModel.DateTimeFormat;
        if (dateTimeFormat)
            return this._convertToDateFormat(dateTimeFormat);
    }
    return null;
}
exports.convertToFormat = convertToFormat;
function _convertToNumberFormat(numericFormatViewModel) {
    var formatInfo = null, formatType = numericFormatViewModel ? numericFormatViewModel.FormatType : undefined, unit = numericFormatViewModel ? numericFormatViewModel.Unit : undefined;
    if (formatType === 'Custom') {
        if (legacy_settings_1.DashboardPrivateSettings.customNumericFormatMode !== 'Disabled') {
            return {
                type: numericFormatViewModel.CustomFormatString,
                unlimitedIntegerDigits: true
            };
        }
        else {
            formatType = 'Auto';
        }
    }
    if (formatType !== 'General') {
        formatInfo = {};
        formatInfo.format = this._convertNumericFormat(formatType);
        formatInfo.currency = numericFormatViewModel.Currency;
        if (formatInfo.currency === _format_helper_1.invariantCurrencyIdentifier) {
            console.log('A web server does not support a currency specified for the dashboard. Refer to https://go.devexpress.com/dashboardInvariantCurrency.aspx to learn more.');
        }
        if (numericFormatViewModel.IncludeGroupSeparator) {
            formatInfo.includeGroupSeparator = numericFormatViewModel.IncludeGroupSeparator;
        }
        if (numericFormatViewModel.ForcePlusSign) {
            formatInfo.plus = numericFormatViewModel.ForcePlusSign;
        }
        formatInfo.precision = numericFormatViewModel.Precision;
        if (unit && unit === 'Auto' && formatType !== 'Percent') {
            formatInfo.significantDigits = numericFormatViewModel.SignificantDigits;
        }
        if (unit && formatType === 'Number' || formatType === 'Currency') {
            formatInfo.unitPower = this._convertNumericUnit(unit);
        }
        formatInfo.dateType = null;
    }
    return formatInfo;
}
exports._convertToNumberFormat = _convertToNumberFormat;
function _convertToDateFormat(dateFormatViewModel) {
    if (dateFormatViewModel) {
        var weekOptions = {};
        if (_utils_1.type.isDefined(dateFormatViewModel.FirstDayOfWeek))
            weekOptions.firstDayOfWeek = dateFormatViewModel.FirstDayOfWeek;
        if (_utils_1.type.isDefined(dateFormatViewModel.CalendarWeekRule))
            weekOptions.calendarWeekRule = dateFormatViewModel.CalendarWeekRule;
        var syntheticGroupInterval = this._getSyntheticDateTimeGroupInterval(dateFormatViewModel.GroupInterval, dateFormatViewModel.ExactDateFormat);
        switch (syntheticGroupInterval) {
            case 'WeekYear':
                return __assign({}, weekOptions, { format: 'weekYear', dateType: dateFormatViewModel.DateFormat === 'Long' ? this._types.Long : this._types.Short });
            case 'MonthYear':
                return { format: 'monthYear', dateType: this._types.Full };
            case 'QuarterYear':
                return { format: 'quarterYear', dateType: this._types.Full };
            case 'DayMonthYear':
                return {
                    format: 'dayMonthYear',
                    dateType: dateFormatViewModel.DateFormat === 'Long' ? this._types.Long : this._types.Short
                };
            case 'DateHour':
                if (dateFormatViewModel.DateHourFormat === 'Long')
                    return { format: 'dateHour', dateType: this._types.Long };
                else
                    return { format: 'dateHour', dateType: dateFormatViewModel.DateHourFormat === 'Short' ? this._types.Short : this._types.TimeOnly };
            case 'DateHourMinute':
                if (dateFormatViewModel.DateHourMinuteFormat === 'Long')
                    return { format: 'dateHourMinute', dateType: this._types.Long };
                else
                    return { format: 'dateHourMinute', dateType: dateFormatViewModel.DateHourMinuteFormat === 'Short' ? this._types.Short : this._types.TimeOnly };
            case 'DateHourMinuteSecond':
                if (dateFormatViewModel.DateTimeFormat === 'Long')
                    return { format: 'dateHourMinuteSecond', dateType: this._types.Long };
                else
                    return { format: 'dateHourMinuteSecond', dateType: dateFormatViewModel.DateTimeFormat === 'Short' ? this._types.Short : this._types.TimeOnly };
            case 'Year':
                return {
                    format: 'year',
                    dateType: dateFormatViewModel.YearFormat === 'Abbreviated' ? this._types.Abbreviated : this._types.Full
                };
            case 'DateYear':
                return {
                    format: 'dateYear',
                    dateType: dateFormatViewModel.YearFormat === 'Abbreviated' ? this._types.Abbreviated : this._types.Full
                };
            case 'Quarter':
                if (dateFormatViewModel.QuarterFormat === 'Numeric')
                    return { format: 'quarter', dateType: this._types.Numeric };
                else
                    return { format: 'quarter', dateType: this._types.Full };
            case 'Month':
                if (dateFormatViewModel.MonthFormat === 'Numeric')
                    return { format: 'month', dateType: this._types.Numeric };
                else
                    return { format: 'month', dateType: dateFormatViewModel.MonthFormat === 'Abbreviated' ? this._types.Abbreviated : this._types.Full };
            case 'Hour':
                return {
                    format: 'hour',
                    dateType: dateFormatViewModel.HourFormat === 'Long' ? this._types.Long : this._types.Short
                };
            case 'DayOfWeek':
                if (dateFormatViewModel.DayOfWeekFormat === 'Numeric')
                    return { format: 'dayOfWeek', dateType: this._types.Numeric };
                else
                    return { format: 'dayOfWeek', dateType: dateFormatViewModel.DayOfWeekFormat === 'Abbreviated' ? this._types.Abbreviated : this._types.Full };
            default:
                return { format: dateTimeGroupIntervalToCamelCase[dateFormatViewModel.GroupInterval], dateType: this._types.Numeric };
        }
    }
    else {
        return null;
    }
}
exports._convertToDateFormat = _convertToDateFormat;
function _getSyntheticDateTimeGroupInterval(groupInterval, exactDateFormat) {
    if (groupInterval != 'None')
        return groupInterval;
    switch (exactDateFormat) {
        case 'Year':
            return 'DateYear';
        case 'Quarter':
            return 'QuarterYear';
        case 'Month':
            return 'MonthYear';
        case 'Day':
            return 'DayMonthYear';
        case 'Hour':
            return 'DateHour';
        case 'Minute':
            return 'DateHourMinute';
        case 'Second':
            return 'DateHourMinuteSecond';
        default:
            return null;
    }
}
exports._getSyntheticDateTimeGroupInterval = _getSyntheticDateTimeGroupInterval;
function _convertNumericFormat(formatType) {
    switch (formatType) {
        case 'Number': return 'fixedPoint';
        case 'Currency': return 'currency';
        case 'Scientific': return 'exponential';
        case 'Percent': return 'percent';
        default: return undefined;
    }
}
exports._convertNumericFormat = _convertNumericFormat;
function _convertNumericUnit(numericUnit) {
    switch (numericUnit) {
        case 'Auto': return 'auto';
        case 'Thousands': return 1;
        case 'Millions': return 2;
        case 'Billions': return 3;
        default: return 0;
    }
}
exports._convertNumericUnit = _convertNumericUnit;
var dateTimeGroupIntervalToCamelCase = {
    'Year': 'year',
    'Quarter': 'quarter',
    'Month': 'month',
    'Day': 'day',
    'Hour': 'hour',
    'Minute': 'minute',
    'Second': 'second',
    'DayOfYear': 'dayOfYear',
    'DayOfWeek': 'dayOfWeek',
    'WeekOfYear': 'weekOfYear',
    'WeekOfMonth': 'weekOfMonth',
    'WeekYear': 'weekYear',
    'MonthYear': 'monthYear',
    'QuarterYear': 'quarterYear',
    'DayMonthYear': 'dayMonthYear',
    'DateHour': 'dateHour',
    'DateHourMinute': 'dateHourMinute',
    'DateHourMinuteSecond': 'dateHourMinuteSecond',
    'None': 'none'
};


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
var _dashboard_item_1 = __webpack_require__(74);
exports.dataSource = { propertyName: 'dataSource', modelName: '@DataSource', displayName: 'DashboardStringId.DefaultDataSourceName', simpleFormAdapterItem: 'textBoxEditor' };
exports.filterString = { propertyName: 'filterString', modelName: '@FilterString' };
exports.isMasterFilterCrossDataSource = { propertyName: 'isMasterFilterCrossDataSource', modelName: '@IsMasterFilterCrossDataSource', displayName: 'DashboardWebStringId.CrossDataSourceFiltering', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.itemColorScheme = { propertyName: 'colorScheme', modelName: 'ColorScheme', displayName: 'DashboardWebStringId.DashboardMenuColorScheme', array: true };
exports.dataItemsSerializable = { propertyName: 'dataItems', modelName: 'DataItems', displayName: 'DashboardWebStringId.DataSources.DataItems', array: true };
exports.hiddenDimensions = { propertyName: '__hiddenDimensions', modelName: 'HiddenDimensions', displayName: 'DashboardWebStringId.Binding.HiddenDimensions', array: true };
exports.hiddenMeasures = { propertyName: '__hiddenMeasures', modelName: 'HiddenMeasures', displayName: 'DashboardWebStringId.Binding.HiddenMeasures', array: true };
exports.formatRules = { propertyName: 'formatRules', modelName: 'FormatRules', array: true };
exports.dataDashboardItemSerializationsInfo = _dashboard_item_1.dashboardItemSerializationsInfo.concat([exports.dataSource, _base_metadata_1.dataMember, exports.filterString, exports.isMasterFilterCrossDataSource, exports.dataItemsSerializable, exports.formatRules, exports.hiddenDimensions, exports.hiddenMeasures, exports.itemColorScheme]);


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var UndoEngineContainer = (function () {
    function UndoEngineContainer() {
    }
    return UndoEngineContainer;
}());
exports.UndoEngineContainer = UndoEngineContainer;
function wrapFuncWithUndoRedo(func) {
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        try {
            UndoEngineContainer.undoEngine && UndoEngineContainer.undoEngine.start();
            var result = func.apply(this, args);
            return result;
        }
        finally {
            UndoEngineContainer.undoEngine && UndoEngineContainer.undoEngine.end();
        }
    };
}
exports.wrapFuncWithUndoRedo = wrapFuncWithUndoRedo;
function wrapWithUndoRedo(target, key, value) {
    return {
        value: wrapFuncWithUndoRedo(value.value)
    };
}
exports.wrapWithUndoRedo = wrapWithUndoRedo;


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var string_1 = __webpack_require__(30);
var scroll_view_1 = __webpack_require__(164);
var $ = __webpack_require__(2);
var _utils_1 = __webpack_require__(3);
var _cacheable_1 = __webpack_require__(237);
var RenderHelper = (function () {
    function RenderHelper() {
    }
    RenderHelper.html = function (element, content, encodeHtml) {
        if (encodeHtml) {
            element.innerText = content;
        }
        else {
            element.innerHTML = content;
        }
    };
    RenderHelper.rectangle = function (color, width, height) {
        var w = width != 0 ? width || 10 : 0, h = height || 10;
        return string_1.format("<div style='display:inline-block;width:{0}px;height:{1}px;background-color:{2};padding:0px;margin:0px;'></div>", w, h, color);
    };
    RenderHelper.getActualBorder = function ($element) {
        return {
            width: $element.outerWidth() - $element.width(),
            height: $element.outerHeight() - $element.height()
        };
    };
    RenderHelper.getActualSize = function ($element, collapse) {
        if (collapse === void 0) { collapse = false; }
        if (!$element || $element.length === 0) {
            return { width: 0, height: 0 };
        }
        var values = [];
        if (collapse) {
            $.each($element.children(), function (index, child) {
                values.push(child.style.display);
                child.style.display = 'none';
            });
        }
        try {
            var border = this.getActualBorder($element), isBorderBox = $element.css('box-sizing') == 'border-box';
            return {
                width: $element.width() - (isBorderBox ? 0 : border.width),
                height: $element.height() - (isBorderBox ? 0 : border.height)
            };
        }
        finally {
            if (collapse) {
                $.each($element.children(), function (index, child) {
                    child.style.display = values[index];
                });
            }
        }
    };
    RenderHelper.getDefaultPalette = function () {
        return ['#5F8195', '#B55951', '#AEAF69', '#915E64', '#758E6D', '#85688C', '#91B9C7', '#E49B86'];
    };
    RenderHelper.getScrollable = function (element) {
        return scroll_view_1.default.getInstance(element);
    };
    RenderHelper.updateScrollable = function (element) {
        var scrollable = this.getScrollable(element);
        if (scrollable) {
            scrollable.update();
        }
    };
    RenderHelper.wrapScrollable = function (container, parentOverflow, direction) {
        var scrollableContent = undefined, scrollableOptions = {
            bounceEnabled: false,
            showScrollbar: 'onHover',
            direction: direction
        };
        if (container) {
            var scrollableInstance = scroll_view_1.default.getInstance(container);
            if (scrollableInstance) {
                scrollableInstance.option(scrollableOptions);
            }
            else {
                scrollableInstance = new scroll_view_1.default(container, scrollableOptions);
            }
            scrollableContent = _utils_1.$unwrap(scrollableInstance.content());
        }
        return scrollableContent;
    };
    RenderHelper.getElementBox = function (element) {
        var $fakeContainer = $('<div>', {
            css: {
                position: 'absolute',
                top: 0,
                left: 0,
                visibility: 'hidden',
                overflow: 'hidden'
            }
        }).appendTo($(RenderHelper.getThemeBaseElement()));
        $fakeContainer.append(element);
        try {
            return {
                width: $fakeContainer.outerWidth(),
                height: $fakeContainer.outerHeight()
            };
        }
        finally {
            $fakeContainer.remove();
        }
    };
    RenderHelper.processElement = function ($element, processElement) {
        var $fakeContainer = $('<div>', {
            css: {
                position: 'absolute',
                top: 0,
                left: 0,
                visibility: 'hidden',
                overflow: 'hidden'
            }
        }).appendTo($(RenderHelper.getThemeBaseElement()));
        $fakeContainer.append($element);
        try {
            return processElement();
        }
        finally {
            $fakeContainer.remove();
        }
    };
    RenderHelper.getElementBoxFloat = function (e) {
        var style = window.getComputedStyle(e);
        var boxSizing = style['box-sizing'];
        var rect = e.getBoundingClientRect();
        var size = {
            width: rect.width + parseFloat(style.marginLeft) + parseFloat(style.marginRight),
            height: rect.height + parseFloat(style.marginTop) + parseFloat(style.marginBottom)
        };
        if (boxSizing === 'content-box' || boxSizing === 'padding-box') {
            size.width += parseFloat(style.borderLeftWidth) + parseFloat(style.borderRightWidth);
            size.height += parseFloat(style.borderTopWidth) + parseFloat(style.borderBottomWidth);
            if (boxSizing === 'content-box') {
                size.width += parseFloat(style.paddingLeft) + parseFloat(style.paddingRight);
                size.height += parseFloat(style.paddingTop) + parseFloat(style.paddingBottom);
            }
        }
        return size;
    };
    RenderHelper.widgetIncidentOccurred = function (e) {
    };
    RenderHelper.getBorderSizeByClasses = function (classNames) {
        if (classNames && classNames.length > 0) {
            var fakeObjs = createFakeObjects(classNames, { width: 100, height: 100 });
            try {
                return RenderHelper.getActualBorder(fakeObjs.lastElement);
            }
            finally {
                fakeObjs.remove();
            }
        }
        else {
            return {
                width: 0,
                height: 0
            };
        }
    };
    RenderHelper.getThemeBaseElement = function () { return document.body; };
    __decorate([
        _cacheable_1.cacheable('getBorderSizeByClasses')
    ], RenderHelper, "getBorderSizeByClasses", null);
    return RenderHelper;
}());
exports.RenderHelper = RenderHelper;
function createFakeObjects(classNames, cssOptions) {
    var firstElement, prevElement, currElement;
    $.each(classNames, function (_, name) {
        currElement = $('<div>', {
            css: __assign({ position: 'absolute', top: 0, left: 0, visibility: 'hidden', overflow: 'hidden' }, cssOptions)
        });
        currElement.appendTo(prevElement ? prevElement : $('body'));
        currElement.addClass(name);
        prevElement = currElement;
        if (!firstElement)
            firstElement = currElement;
    });
    return {
        firstElement: firstElement,
        lastElement: currElement,
        remove: function () {
            firstElement.remove();
        }
    };
}
exports.createFakeObjects = createFakeObjects;


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var _default_1 = __webpack_require__(6);
var _common_1 = __webpack_require__(35);
var _factory_1 = __webpack_require__(409);
var _formatter_1 = __webpack_require__(25);
var _localization_ids_1 = __webpack_require__(21);
var _localizer_1 = __webpack_require__(16);
var _utils_1 = __webpack_require__(3);
var _z_index_1 = __webpack_require__(57);
var _utils_layout_1 = __webpack_require__(541);
var _dashboard_viewer_constants_1 = __webpack_require__(217);
var caption_toolbar_options_1 = __webpack_require__(64);
var _caption_toolbar_css_classes_1 = __webpack_require__(31);
var _clickable_floating_toolbar_1 = __webpack_require__(341);
var _hidden_caption_toolbar_1 = __webpack_require__(342);
var _hovered_floating_toolbar_1 = __webpack_require__(547);
var _hovered_toolbar_1 = __webpack_require__(548);
var _minimized_clickable_toolbar_1 = __webpack_require__(549);
var _minimized_hovered_toolbar_1 = __webpack_require__(550);
var _static_toolbar_1 = __webpack_require__(219);
var _render_helper_1 = __webpack_require__(28);
var _dashboard_layout_mode_helper_1 = __webpack_require__(77);
var _item_loading_1 = __webpack_require__(551);
var _interactivity_controller_1 = __webpack_require__(150);
exports.createDefaultToolbar = function (viewerItem, container, controlContainer, popupContainer, viewOptions) {
    if (viewOptions.hiddenToolbar) {
        return new _hidden_caption_toolbar_1.HiddenCaptionToolbar();
    }
    else if (_dashboard_layout_mode_helper_1.DashboardLayoutModeHelper.isTouch) {
        if (viewOptions.hasCaption) {
            return new _static_toolbar_1.StaticCaptionToolbar(container, controlContainer, popupContainer, viewOptions.encodeHtml, _caption_toolbar_css_classes_1.cssClasses.caption, viewOptions.captionToolbarSeparatorRequired, false);
        }
        else {
            if (viewOptions.allowPreview) {
                return new _minimized_clickable_toolbar_1.MinimizedClickableCaptionToolbar(container, controlContainer, popupContainer, viewOptions.encodeHtml, viewOptions.isBottomFloatingToolbarPosition, viewOptions.itemHasOwnContent);
            }
            else {
                return new _clickable_floating_toolbar_1.ClickableFloatingCaptionToolbar(container, controlContainer, popupContainer, viewOptions.encodeHtml, viewOptions.isBottomFloatingToolbarPosition, viewOptions.itemHasOwnContent);
            }
        }
    }
    else {
        if (viewOptions.hasCaption) {
            return new _hovered_toolbar_1.HoveredDashboardCaptionToolbar(container, controlContainer, popupContainer, viewOptions.encodeHtml, viewOptions.captionToolbarSeparatorRequired);
        }
        else {
            if (viewOptions.allowPreview) {
                return new _minimized_hovered_toolbar_1.MinimizedHoveredCaptionToolbar(container, controlContainer, popupContainer, viewOptions.encodeHtml, viewOptions.isBottomFloatingToolbarPosition);
            }
            else {
                return new _hovered_floating_toolbar_1.HoveredFloatingCaptionToolbar(container, controlContainer, popupContainer, viewOptions.encodeHtml, viewOptions.isBottomFloatingToolbarPosition);
            }
        }
    }
};
function getControlContainer(element) {
    return $(element).closest('.dx-dashboard-widget-container')[0];
}
exports.getControlContainer = getControlContainer;
var baseItem = (function () {
    function baseItem($container, options) {
        this._lockCount = 0;
        this._isFixedHeight = false;
        this.customHoverEnabled = false;
        this._allowMultiselection = false;
        this.dateToString = function (date) { return date.toJSON(); };
        this.selected = $.Callbacks();
        this.clearMasterFilter = $.Callbacks();
        this.drillUp = $.Callbacks();
        this.contentElementSelection = $.Callbacks();
        this.expandValue = $.Callbacks();
        this.clientStateUpdate = $.Callbacks();
        this.dataRequest = $.Callbacks();
        this.itemClick = $.Callbacks();
        this.itemHover = $.Callbacks();
        this.itemSelectionChanged = $.Callbacks();
        this.itemWidgetCreated = $.Callbacks();
        this.itemWidgetUpdating = $.Callbacks();
        this.itemWidgetUpdated = $.Callbacks();
        this.itemWidgetOptionsPrepared = $.Callbacks();
        this.itemCaptionToolbarUpdated = $.Callbacks();
        this.constraintsUpdated = $.Callbacks();
        this.customTargetAxes = [];
        this.customDefaultSelectedValues = [];
        this.itemLoadingElement = new _item_loading_1.ItemLoadingElement();
        this.visualMode = 'full';
        this._hasWidget = false;
        this.deferredToolbarRenderingPromise = undefined;
        this.createCaptionToolbar = exports.createDefaultToolbar;
        this._initializeData(options);
        this.container = $container;
        this.controlContainer = options.controlContainer;
        this._boundaryContainer = options.boundaryContainer;
        this.interactivityController = new _interactivity_controller_1.interactivityController($.proxy(this.getSelectedTuples, this));
        this.interactivityController.selectionChanged.add($.proxy(this._onSelectionChanged, this));
        this.customSelectionMode = _interactivity_controller_1.dashboardSelectionMode.none;
    }
    Object.defineProperty(baseItem.prototype, "hasWidget", {
        get: function () {
            return this._hasWidget;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(baseItem.prototype, "_captionToolbarSeparatorRequired", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(baseItem.prototype, "_isBottomFloatingToolbarPosition", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(baseItem.prototype, "_allowPreview", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(baseItem.prototype, "_shouldApplySelectionOnInitialRender", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    baseItem.prototype._initializeData = function (newOptions) {
        if (!this.options) {
            this.options = newOptions;
        }
        else {
            this.options = {
                Name: newOptions.Name,
                Type: newOptions.Type,
                ParentContainer: newOptions.ParentContainer,
                ContentType: newOptions.ContentType,
                SelectedValues: newOptions.SelectedValues,
                ViewModel: newOptions.ViewModel || this.options.ViewModel,
                ActionModel: newOptions.ActionModel || this.options.ActionModel,
                CaptionViewModel: newOptions.CaptionViewModel || this.options.CaptionViewModel,
                ConditionalFormattingModel: newOptions.ConditionalFormattingModel || this.options.ConditionalFormattingModel,
                Parameters: newOptions.Parameters,
                DrillDownValues: newOptions.DrillDownValues,
                DrillDownUniqueValues: newOptions.DrillDownUniqueValues,
                AxisNames: newOptions.AxisNames,
                DimensionIds: newOptions.DimensionIds,
                multiData: newOptions.multiData,
                encodeHtml: newOptions.encodeHtml !== undefined ? newOptions.encodeHtml : this.options.encodeHtml,
                allowExport: newOptions.allowExport !== undefined ? newOptions.allowExport : this.options.allowExport,
                showExportDialog: newOptions.showExportDialog !== undefined ? newOptions.showExportDialog : this.options.showExportDialog,
                isDataReduced: !!newOptions.ItemData ? newOptions.ItemData.Reduced : this.options.isDataReduced,
                useNeutralFilterMode: newOptions.useNeutralFilterMode !== undefined ? newOptions.useNeutralFilterMode : this.options.useNeutralFilterMode,
                FullViewport: newOptions.FullViewport,
                LimitDataState: newOptions.LimitDataState
            };
        }
        if (!this.dataController || (newOptions.ContentType != _common_1.contentType.actionModel)) {
            var drillDownState = {}, axisPointHash = this.dataController ? this.dataController.getAxisPointsHash() : undefined;
            drillDownState[this._getDrillDownAxisName()] = this.options.DrillDownUniqueValues;
            this.dataController = _factory_1.defaultDataControllerFactory.createDataController(this.options.Type, {
                multiData: this.options.multiData,
                viewModel: this.options.ViewModel,
                cfModel: this.options.ConditionalFormattingModel,
                useNeutralFilterMode: this.options.useNeutralFilterMode,
                drillDownState: drillDownState,
                axisPointHash: axisPointHash
            });
            if (this.dataController) {
                this.dataController.update(this.options.SelectedValues, this._isEncodeHtml());
            }
        }
        this.customSelectedTuples = [];
    };
    baseItem.prototype.initialDataRequest = function () {
        if (this.hasWidget) {
            this.initialDataRequestUnsafe();
        }
    };
    baseItem.prototype.initialDataRequestUnsafe = function () {
    };
    Object.defineProperty(baseItem.prototype, "allowMultiselection", {
        get: function () {
            return this._allowMultiselection;
        },
        set: function (value) {
            this._allowMultiselection = value;
        },
        enumerable: true,
        configurable: true
    });
    baseItem.prototype.forceUpdateInteractivity = function () {
        this.updateCaptionToolbar();
        this.updateInteractivityOptions();
    };
    baseItem.prototype.clearSelection = function () {
        if (this.hasWidget) {
            this._clearSelectionUnsafe();
        }
        else {
            this._clearSelectionBase();
        }
    };
    baseItem.prototype._clearSelectionUnsafe = function () {
        this._clearSelectionBase();
    };
    baseItem.prototype._clearSelectionBase = function () {
    };
    baseItem.prototype.performClearSelection = function () {
        this._setSelectedValues(null);
        this.clearSelection();
    };
    baseItem.prototype.selectTuple = function (tuple, state) {
        if (this.hasWidget) {
            this.selectTupleUnsafe(tuple, state);
        }
    };
    baseItem.prototype.selectTupleUnsafe = function (tuple, state) {
    };
    baseItem.prototype.setSelection = function (values) {
        if (this.hasWidget) {
            this._setSelectionUnsafe(values);
        }
        else {
            this.setSelectionBase(values);
        }
    };
    baseItem.prototype._setSelectionUnsafe = function (values) {
        this.setSelectionBase(values);
    };
    baseItem.prototype.setSelectionBase = function (values) {
        this._setSelectedValues(values);
    };
    baseItem.prototype._applySelection = function () {
        if (this.hasWidget) {
            this._applySelectionUnsafe();
        }
    };
    baseItem.prototype._applySelectionUnsafe = function () {
    };
    baseItem.prototype._isEncodeHtml = function () {
        return (!this.options || this.options.encodeHtml == undefined) ? true : this.options.encodeHtml;
    };
    baseItem.prototype._isSupportDataAwareExport = function () {
        return this.options && this.options.allowExport && this.options.ViewModel && this.options.ViewModel.SupportDataAwareExport;
    };
    baseItem.prototype._isLocked = function () {
        if (this._lockCount < 0)
            throw new Error("Unresolved locker state (looks like 'unlock' method is called without 'lock')");
        return this._lockCount > 0;
    };
    baseItem.prototype._lock = function () {
        this._lockCount++;
    };
    baseItem.prototype._unlock = function () {
        this._lockCount--;
    };
    baseItem.prototype._getCustomSelectionMode = function () {
        return this.customSelectionMode;
    };
    baseItem.prototype._setCustomSelectionMode = function (value) {
        this.customSelectionMode = value;
    };
    baseItem.prototype._getCustomHoverEnabled = function () {
        return this.customHoverEnabled;
    };
    baseItem.prototype._setCustomHoverEnabled = function (value) {
        this.customHoverEnabled = value;
    };
    baseItem.prototype._getCustomTargetAxes = function () {
        return this.customTargetAxes;
    };
    baseItem.prototype._setCustomTargetAxes = function (value) {
        this.customTargetAxes = value;
    };
    baseItem.prototype._getTargetAxes = function () {
        if (!this.isInteractivityActionEnabled()) {
            return this._getCustomTargetAxes();
        }
        else {
            return this._getAxisNames();
        }
    };
    baseItem.prototype.getSelectedTuples = function () {
        var that = this, multiData = that.options.multiData, axisNames = that._getAxisNames(), dimensionByAxis = {}, tupleValues, axisValues, valueIndex;
        if (that._canSetMasterFilter() || that._canSetMultipleMasterFilter() || that._canPerformDrillDown()) {
            var tuples = [];
            if (that.options.SelectedValues == null)
                return tuples;
            if (axisNames.length > 1) {
                $.each(axisNames, function (_, axisName) {
                    dimensionByAxis[axisName] = multiData.getAxis(axisName).getDimensions();
                });
                $.each(that.options.SelectedValues, function (_, selection) {
                    tupleValues = [];
                    valueIndex = 0;
                    $.each(axisNames, function (_, axisName) {
                        axisValues = [];
                        $.each(dimensionByAxis[axisName], function () {
                            axisValues.push(selection[valueIndex++]);
                        });
                        tupleValues.push({ AxisName: axisName, Value: axisValues });
                    });
                    tuples.push(tupleValues);
                });
            }
            else {
                var drillDownValues = that._getDrillDownValues();
                $.each(that.options.SelectedValues, function (indexd, value) {
                    tuples.push([{ AxisName: axisNames[0], Value: drillDownValues.concat(value) }]);
                });
            }
            return tuples;
        }
        else {
            return that.customSelectedTuples;
        }
    };
    baseItem.prototype.updateItem = function (options) {
        var that = this;
        this._setCustomSelectionMode(options.selectionMode);
        this._setCustomTargetAxes(options.targetAxes);
        this._setCustomHoverEnabled(options.hoverEnabled);
        this.customDefaultSelectedValues = options.defaultSelectedValues;
        that.updateInteractivityOptions();
        if (!this.isInteractivityActionEnabled()) {
            var customDefaultSelectedValues = options.selectionMode == _interactivity_controller_1.dashboardSelectionMode.single ? that.customDefaultSelectedValues.slice(0, 1) : that.customDefaultSelectedValues;
            that.interactivityController.clickAction(customDefaultSelectedValues);
        }
        this.updateCaptionToolbar();
    };
    baseItem.prototype.forceUpdateItem = function () {
        this.forceCreateCaptionToolbar();
        this.updateContentSize();
    };
    baseItem.prototype._changeTuple = function (tuple) {
        var that = this, newTuple = [];
        $.each(tuple, function (index, axisValue) {
            var axisName = axisValue.AxisName, value = axisValue.Value;
            newTuple.push({ AxisName: axisName, Value: (axisName == that._getDrillDownAxisName()) ? value.slice(-1) : value });
        });
        return newTuple;
    };
    baseItem.prototype._onSelectionChanged = function (tuples) {
        var that = this, currentSelectedValues = this.options.SelectedValues, singleSelection = !!currentSelectedValues && currentSelectedValues.length === 1 ? currentSelectedValues[0] : null, newSelection = [], tupleValues, selectedTuples = this.getSelectedTuples(), actionName, selectedDrillDownValue;
        this._selectTuples(tuples, selectedTuples, true);
        this._selectTuples(selectedTuples, tuples, false);
        if (this.itemSelectionChanged) {
            this.itemSelectionChanged.fire(this.getName(), tuples);
        }
        if (this.isInteractivityActionEnabled()) {
            $.each(tuples, function (index, tuple) {
                tupleValues = [];
                $.each(that._getAxisNames(), function (_, axisName) {
                    tupleValues.push.apply(tupleValues, _utils_1.getAxisPointValue(tuple, axisName).slice());
                });
                newSelection.push(tupleValues);
            });
            newSelection = this._deductDrillDownValues(newSelection);
            this._setSelectedValues(newSelection);
            actionName = this._getSelectionCallbackType(newSelection.length === 1 && singleSelection && _utils_1.checkValuesAreEqual(newSelection[0], singleSelection));
            if (actionName === _common_1.viewerActions.drillDown) {
                newSelection = newSelection[0];
            }
            if (this._mustSelectingFired(newSelection)) {
                this.selected.fire(this.getName(), actionName, newSelection);
            }
            else {
                this._onClearMasterFilter();
            }
        }
        else {
            this.customSelectedTuples = [];
            $.each(tuples, function (index, tuple) {
                that.customSelectedTuples.push(tuple);
            });
        }
        if (this.customSelectionMode == _interactivity_controller_1.dashboardSelectionMode.multiple) {
            this.updateCaptionToolbar();
        }
    };
    baseItem.prototype._mustSelectingFired = function (values) {
        return values.length > 0;
    };
    baseItem.prototype._patchTroughDrillDownValues = function (values) {
        var drillDownValues = this._getDrillDownValues(), filterValues = [];
        if (values) {
            $.each(values, function (_, value) {
                filterValues.push(drillDownValues.concat(value));
            });
        }
        return filterValues;
    };
    baseItem.prototype._deductDrillDownValues = function (values) {
        var drillDownValues = this._getDrillDownValues(), drillDownValuesLength = drillDownValues.length, cutValue;
        $.each(values, function (_, value) {
            cutValue = value.slice(0, drillDownValuesLength);
            if (_utils_1.checkValuesAreEqual(cutValue, drillDownValues))
                value.splice(0, drillDownValuesLength);
        });
        return values;
    };
    baseItem.prototype._getSelectionCallbackType = function (performDrillDown) {
        var actionName = undefined;
        if (this._canSetMultipleMasterFilter() && this.allowMultiselection) {
            actionName = _common_1.viewerActions.setMultipleValuesMasterFilter;
        }
        else if (this._canSetMasterFilter()) {
            if (performDrillDown) {
                if (this._canPerformDrillDown())
                    actionName = _common_1.viewerActions.drillDown;
            }
            else {
                actionName = _common_1.viewerActions.setMasterFilter;
            }
        }
        else if (this._canPerformDrillDown()) {
            actionName = _common_1.viewerActions.drillDown;
        }
        return actionName;
    };
    baseItem.prototype._selectTuples = function (tuplesToSelect, unaffectedTuples, isSelect) {
        var that = this;
        var updateTuple = function (tuple) {
            if (_utils_1.checkArrayContainsTuple(unaffectedTuples, tuple) == undefined) {
                return that._hasDrillUpButton() && !that._isMultiDataSupported() ? that._changeTuple(tuple) : tuple;
            }
            return undefined;
        };
        this._selectTuplesCore(tuplesToSelect, updateTuple, isSelect);
    };
    baseItem.prototype._selectTuplesCore = function (tuples, updateTupleDelegate, state) {
        var that = this;
        $.each(tuples, function (index, tuple) {
            var updatedTuple = updateTupleDelegate(tuple);
            if (!!updatedTuple) {
                that.selectTuple(updatedTuple, state);
            }
        });
    };
    baseItem.prototype._renderContent = function (element, changeExisting, afterRenderCallback) {
        if (this.visualMode !== 'caption') {
            this._hasWidget = true;
            return this.renderContentUnsafe(element, changeExisting, afterRenderCallback);
        }
        return false;
    };
    baseItem.prototype.renderContentUnsafe = function ($element, changeExisting, afterRenderCallback) {
        return false;
    };
    baseItem.prototype.renderPartialContent = function () {
        if (this.hasWidget) {
            this.renderPartialContentUnsafe();
        }
    };
    baseItem.prototype.renderPartialContentUnsafe = function () {
    };
    baseItem.prototype.updateContentState = function () {
        if (this.hasWidget) {
            this.updateContentStateUnsafe();
        }
    };
    baseItem.prototype.updateContentStateUnsafe = function () {
    };
    baseItem.prototype.getInfo = function () {
        if (this.hasWidget) {
            return this.getInfoUnsafe();
        }
        else {
            return this.getInfoBase();
        }
    };
    baseItem.prototype.getInfoUnsafe = function () {
        return this.getInfoBase();
    };
    baseItem.prototype.getInfoBase = function () {
        var that = this, container = this._getBoundaryContainer();
        return {
            name: that.getName(),
            headerHeight: this.hasCaption() ? this.captionToolbar.calcHeight(this.getCaptionToolbarOptions()) : 0,
            position: $(container).offset(),
            width: $(container).outerWidth(),
            height: $(container).outerHeight(),
            virtualSize: undefined,
            scroll: undefined
        };
    };
    baseItem.prototype.getName = function () {
        return this.options.Name;
    };
    baseItem.prototype.getCaption = function () {
        return this.options.CaptionViewModel && this.options.CaptionViewModel.Text ? this.options.CaptionViewModel.Text.concat(this._getParametersTitle() || '') : undefined;
    };
    baseItem.prototype.hasCaption = function (options) {
        var opts = options || this.options;
        return opts && opts.CaptionViewModel && opts.CaptionViewModel.ShowCaption;
    };
    baseItem.prototype.hasParentContainer = function () {
        return this.options && _utils_1.type.isDefined(this.options.ParentContainer);
    };
    baseItem.prototype._isPaneEmpty = function () {
        return this.hasParentContainer();
    };
    baseItem.prototype._isTransparentBackground = function () {
        return false;
    };
    baseItem.prototype.render = function (container) {
        this.container = this.container || container;
        this.container.setAttribute('data-layout-item-name', this.getName());
        this.contentRoot = document.createElement('div');
        _utils_1.moveContent(this.container, this.contentRoot, true);
        if (!this.captionToolbar) {
            this.captionToolbar = this._createCaptionToolbar(this.container, this.controlContainer, this._getBoundaryContainer());
            this.updateCaptionToolbar();
        }
        else if (container) {
            this.forceCreateCaptionToolbar();
        }
        this.container.appendChild(this.contentRoot);
        this.updateContentSize();
        this._changeContent(false);
    };
    baseItem.prototype.dispose = function () {
        this._removeShildElement();
        this.itemLoadingElement.hide();
        if (this.captionToolbar) {
            this.captionToolbar.dispose();
        }
    };
    baseItem.prototype.updateContent = function (newOptions) {
        var isPrevShowCaption = this.hasCaption(this.options), isNewShowCaption = this.hasCaption(newOptions), showCaptionChanged = isPrevShowCaption !== isNewShowCaption;
        this._initializeData(newOptions);
        if (_utils_1.type.isDefined(isNewShowCaption) && showCaptionChanged) {
            this.forceCreateCaptionToolbar();
        }
        else {
            this.updateCaptionToolbar();
        }
        switch (newOptions.ContentType) {
            case _common_1.contentType.partialDataSource:
            case _common_1.contentType.completeDataSource:
                if (newOptions.DataSource || (newOptions.ItemData && newOptions.ItemData.DataStorageDTO))
                    this.renderPartialContent();
                break;
            case _common_1.contentType.actionModel:
                if (!this.isInteractivityActionEnabled()) {
                    this.updateContentState();
                }
                break;
            default:
                this._changeContent(true);
                break;
        }
    };
    baseItem.prototype.updateClientState = function (clientState) {
        if (this.hasWidget && this.options.ContentType !== _common_1.contentType.partialDataSource && this.options.ContentType !== _common_1.contentType.completeDataSource)
            this._updateClientStateUnsafe(clientState);
    };
    baseItem.prototype._removeShildElement = function () {
        var shieldingElement = this.shieldingElement;
        if (shieldingElement) {
            shieldingElement.parentNode.removeChild(shieldingElement);
            delete this.shieldingElement;
        }
    };
    baseItem.prototype.updateState = function (state) {
        if (!this.container)
            return;
        var shieldingElement = this.shieldingElement;
        var container = this._getBoundaryContainer();
        if (this.visualMode !== 'caption') {
            if (!!state.loading) {
                this.itemLoadingElement.show(container);
            }
            else {
                this.itemLoadingElement.hide();
            }
        }
        if (!!state.operations.actions) {
            this._removeShildElement();
        }
        else {
            if (!shieldingElement) {
                var position = this._getContainerPosition();
                shieldingElement = document.createElement('div');
                shieldingElement.classList.add('dx-dashboard-item-shield');
                shieldingElement.style.left = position.left.toString() + 'px';
                shieldingElement.style.top = position.top.toString() + 'px';
                shieldingElement.style.width = position.width.toString() + 'px';
                shieldingElement.style.height = position.height.toString() + 'px';
                shieldingElement.style.zIndex = _z_index_1.zIndex.dashboardItemShield.toString();
                this.shieldingElement = shieldingElement;
                $(container).prepend(shieldingElement);
            }
        }
    };
    baseItem.prototype.width = function (width) {
        var that = this;
        if ($.isNumeric(width)) {
            that.setSize(width, undefined);
        }
        else {
            return $(that.container).outerWidth();
        }
    };
    baseItem.prototype.height = function (height) {
        var that = this;
        if ($.isNumeric(height)) {
            that.setSize(undefined, height);
        }
        else {
            return $(that.container).outerHeight();
        }
    };
    baseItem.prototype.setSize = function (width, height) {
        var that = this, oldSize = { width: that.width(), height: that.height() }, newSize = { width: width, height: height };
        if (width) {
            $(that.container).outerWidth(width);
        }
        if (height) {
            $(that.container).outerHeight(height);
        }
        that._resize();
    };
    baseItem.prototype.getConstraints = function (includeBorders) {
        var borderSize = includeBorders ? _render_helper_1.RenderHelper.getBorderSizeByClasses(this._generateOuterBorderClasses().concat(this._generateInnerBorderClasses())) : { width: 0, height: 0 }, headerHeight = this._calcHeaderAndFooterHeight(), contentMinHeight = this._getMinContentHeight(), height = borderSize.height + headerHeight + contentMinHeight;
        return _utils_layout_1.constraints(_utils_layout_1.size(_dashboard_viewer_constants_1.MIN_PANE_WIDTH + borderSize.width, height), _utils_layout_1.size(Number.MAX_VALUE, this._isFixedHeight ? height : Number.MAX_VALUE));
    };
    baseItem.prototype.getOffset = function () {
        return {
            width: 0,
            height: 0
        };
    };
    baseItem.prototype.updateInteractivityOptions = function () {
        var that = this, selectionMode = _interactivity_controller_1.dashboardSelectionMode.none;
        if (!that.isInteractivityActionEnabled()) {
            that.updateContentState();
            selectionMode = this.customSelectionMode;
            if (selectionMode == _interactivity_controller_1.dashboardSelectionMode.multiple && !this.allowMultiselection)
                selectionMode = _interactivity_controller_1.dashboardSelectionMode.single;
        }
        else {
            if (this._canSetMultipleMasterFilter() && this.allowMultiselection) {
                selectionMode = _interactivity_controller_1.dashboardSelectionMode.multiple;
            }
            else {
                if (that.isInteractivityActionEnabled()) {
                    selectionMode = _interactivity_controller_1.dashboardSelectionMode.single;
                }
            }
        }
        that.interactivityController.setOptions(selectionMode);
    };
    baseItem.prototype.getCaptionToolbarOptions = function () {
        var actionAtems = this._getActionToolbarItems();
        var staticItems = this._getStaticToolbarItems();
        var stateItems = this._getStateToolbarItems();
        var toolbarOptions = {
            staticItems: staticItems,
            actionItems: actionAtems,
            stateItems: stateItems,
            navigationItems: []
        };
        this.addContextCaptionToolbarOptions && this.addContextCaptionToolbarOptions(toolbarOptions);
        this.itemCaptionToolbarUpdated.fire(this.getName(), toolbarOptions);
        return toolbarOptions;
    };
    baseItem.prototype.updateConstraints = function () {
        this.constraintsUpdated.fire(this.getName());
    };
    baseItem.prototype.updateCaptionToolbar = function () {
        var _this = this;
        var options = this.getCaptionToolbarOptions();
        if (this.deferredToolbarRenderingPromise) {
            this.deferredToolbarRenderingPromise(this.getName(), this.captionToolbar.calcMinWidth(options), this.captionToolbar.calcHeight(options)).done(function () {
                _this._updateCaptionToolbarAndSize(options);
            });
        }
        else {
            this._updateCaptionToolbarAndSize(options);
        }
    };
    baseItem.prototype._createCaptionToolbar = function (container, controlContainer, popupContainer) {
        return this.createCaptionToolbar(this, container, controlContainer, popupContainer, {
            encodeHtml: this._isEncodeHtml(),
            hasCaption: this.hasCaption(),
            isBottomFloatingToolbarPosition: this._isBottomFloatingToolbarPosition,
            captionToolbarSeparatorRequired: this._captionToolbarSeparatorRequired,
            allowPreview: this._allowPreview,
            hiddenToolbar: this.visualMode === 'content',
            itemHasOwnContent: this._itemHasOwnContent()
        });
    };
    baseItem.prototype._updateCaptionToolbarAndSize = function (options) {
        var heightChanded = this.captionToolbar.update(options);
        if (heightChanded) {
            this.updateContentSize();
        }
    };
    baseItem.prototype.forceCreateCaptionToolbar = function () {
        this.captionToolbar.dispose();
        this.captionToolbar = this._createCaptionToolbar(this.container, this.controlContainer, this._getBoundaryContainer());
        this.updateCaptionToolbar();
    };
    baseItem.prototype._itemHasOwnContent = function () {
        return true;
    };
    baseItem.prototype._updateClientStateUnsafe = function (clientState) {
    };
    baseItem.prototype._changeContent = function (updateExisting) {
        var _this = this;
        if (this.visualMode === 'caption')
            return;
        var afterRenderCallback = function () {
            if (updateExisting) {
                _this._raiseItemWidgetUpdated();
            }
            else {
                _this._raiseItemWidgetCreated();
            }
            if (updateExisting || _this._shouldApplySelectionOnInitialRender)
                _this._applySelection();
        };
        if (updateExisting) {
            this._raiseItemWidgetUpdating();
        }
        if (!this._renderContent(this.contentRoot, updateExisting, afterRenderCallback)) {
            afterRenderCallback();
        }
    };
    baseItem.prototype._calcHeaderAndFooterHeight = function () {
        var headerAndFooterHeight = 0;
        var toolbar = this._createCaptionToolbar(undefined, undefined, undefined);
        headerAndFooterHeight += toolbar.calcHeight(this.getCaptionToolbarOptions());
        return headerAndFooterHeight;
    };
    baseItem.prototype._getReducedDataTooltip = function () {
        if (this.options.LimitDataState) {
            if (this.options.LimitDataState.isReduced)
                return _default_1.getLocalizationById('DashboardWebStringId.LimitVisibleData.DisplayAllDataTooltip');
            return _default_1.getLocalizationById('DashboardWebStringId.LimitVisibleData.IncreasePerformanceTooltip');
        }
        return undefined;
    };
    baseItem.prototype._getStaticToolbarItems = function () {
        var items = [];
        if (this.hasCaption()) {
            var caption = this.getCaption();
            if (caption) {
                items.push({
                    name: caption_toolbar_options_1.dashboardToolbarItemNames.itemCaption,
                    type: 'text',
                    text: caption
                });
            }
            if (this.allowLimitDataCallback && this.options.LimitDataState.isReduceMode)
                items.push(this._getReduceDataToolbarItem());
        }
        return items;
    };
    baseItem.prototype._getReduceDataToolbarItem = function () {
        var _this = this;
        return {
            name: caption_toolbar_options_1.dashboardToolbarItemNames.limitVisibleData,
            checked: this.options.LimitDataState.isReduced,
            click: function (element) { _this.allowLimitDataCallback(); },
            icon: _caption_toolbar_css_classes_1.cssClasses.iconLimitVisibleData,
            type: 'button',
            tooltip: {
                className: _caption_toolbar_css_classes_1.cssClasses.tooltipLimitVisibleData,
                template: function () {
                    var div = document.createElement('div');
                    div.innerText = _this._getReducedDataTooltip();
                    return div;
                }
            }
        };
    };
    baseItem.prototype._getStateToolbarItems = function () {
        var _this = this;
        var items = this._getSpecificStatePanelItems();
        var actionModel = this.options.ActionModel;
        if (this._hasClearMasterFilterButton()) {
            items.push({
                name: caption_toolbar_options_1.dashboardToolbarItemNames.clearMasterFilter,
                click: function (element) { _this._onClearMasterFilter(); },
                icon: _caption_toolbar_css_classes_1.cssClasses.iconClearMasterFilter,
                type: 'button',
                hint: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ClearMasterFilter)
            });
        }
        if (this.options.useNeutralFilterMode && actionModel && actionModel.ClearMasterFilterButtonState === 'Disabled') {
            items.push({
                name: caption_toolbar_options_1.dashboardToolbarItemNames.clearMasterFilter,
                icon: _caption_toolbar_css_classes_1.cssClasses.iconClearMasterFilter,
                type: 'button',
                disabled: true,
                hint: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ClearMasterFilter)
            });
        }
        if (this._hasClearSelectionButton())
            items.push({
                name: caption_toolbar_options_1.dashboardToolbarItemNames.clearSelection,
                click: function (element) { _this._onClearSelection(); },
                icon: _caption_toolbar_css_classes_1.cssClasses.iconClearSelection,
                type: 'button',
                hint: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ClearSelection)
            });
        if (this._hasDrillUpButton() && this._isDrillUpEnabled())
            items.push({
                name: caption_toolbar_options_1.dashboardToolbarItemNames.drillUp,
                click: function (element) { _this._onDrillUp(); },
                icon: _caption_toolbar_css_classes_1.cssClasses.iconDrillUp,
                type: 'button',
                hint: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.DrillUp)
            });
        if (!this.hasCaption() && this.allowLimitDataCallback && this.options.LimitDataState.isReduceMode)
            items.push(this._getReduceDataToolbarItem());
        return items;
    };
    baseItem.prototype._getActionToolbarItems = function () {
        var _this = this;
        var items = this._getSpecificActionToolbarItems(), contentDescription = this.options.ViewModel ? this.options.ViewModel.ContentDescription : undefined;
        if (this.options.allowExport)
            items.push({
                name: caption_toolbar_options_1.dashboardToolbarItemNames.exportMenu,
                menu: this._getExportMenuModel(),
                icon: _caption_toolbar_css_classes_1.cssClasses.iconItemExport,
                type: 'menu',
                hint: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ExportTo)
            });
        if (contentDescription && contentDescription.ElementSelectionEnabled)
            items.push({
                name: caption_toolbar_options_1.dashboardToolbarItemNames.values,
                menu: {
                    items: contentDescription.ElementNames,
                    selectedItems: [contentDescription.ElementNames[contentDescription.SelectedElementIndex]],
                    selectionMode: 'single',
                    itemClick: function (itemData, itemElement, index) { _this._onContentElementSelection(index); },
                    type: 'list'
                },
                icon: _caption_toolbar_css_classes_1.cssClasses.iconContentSelection,
                type: 'menu',
                hint: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ElementSelection)
            });
        if (this._hasToggleSelectionModeButton())
            items.push({
                name: caption_toolbar_options_1.dashboardToolbarItemNames.multiselection,
                checked: this.allowMultiselection,
                click: function (element) { _this._onToggleSelectionMode(); },
                icon: _caption_toolbar_css_classes_1.cssClasses.iconMultiselection,
                type: 'button',
                hint: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.AllowMultiselection)
            });
        return items;
    };
    baseItem.prototype._getExportMenuModel = function () {
        var _this = this;
        var items = [_caption_toolbar_css_classes_1.cssClasses.iconExportToPDF];
        if (_caption_toolbar_css_classes_1.Settings.allowExportToImage)
            items.push(_caption_toolbar_css_classes_1.cssClasses.iconExportToImage);
        if (this._isSupportDataAwareExport()) {
            items.push(_caption_toolbar_css_classes_1.cssClasses.iconExportToExcel);
        }
        return {
            title: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ExportTo),
            items: items,
            itemClick: function (itemData, itemElement, index) { _this.showExportDialog(_caption_toolbar_css_classes_1._convertToExportFormat(itemData)); },
            type: 'icons'
        };
    };
    baseItem.prototype._getParametersTitle = function () {
        if (!this.hasCaption())
            return undefined;
        var parameters = [], separator = ' - ', drillDownValues = this.options.DrillDownValues, contentDescription = this.options.ViewModel.ContentDescription;
        if (contentDescription && contentDescription.ElementSelectionEnabled) {
            parameters.push(contentDescription.ElementNames[contentDescription.SelectedElementIndex || 0]);
        }
        if (drillDownValues && drillDownValues.length > 0) {
            parameters = parameters.concat(drillDownValues.map(function (drillDownValue) { return _formatter_1.format(drillDownValue.Value, drillDownValue.Format); }));
        }
        return parameters.length > 0 ? separator + parameters.join(separator) : undefined;
    };
    baseItem.prototype.showExportDialog = function (exportFormat) {
        this.options.showExportDialog(exportFormat);
    };
    baseItem.prototype._getSpecificActionToolbarItems = function () {
        return [];
    };
    baseItem.prototype._getSpecificStatePanelItems = function () {
        return [];
    };
    baseItem.prototype._getMinContentHeight = function () {
        return _dashboard_viewer_constants_1.MIN_PANE_HEIGHT;
    };
    baseItem.prototype._generateInnerBorderClasses = function (element) {
        if (this.visualMode === 'caption') {
            return [];
        }
        else {
            return this._generateInnerBorderClassesUnsafe(element);
        }
    };
    baseItem.prototype._generateInnerBorderClassesUnsafe = function (element) {
        var classes = [exports.cssClassNamesBaseItem.item];
        if (this._isBorderRequired()) {
            classes.push(exports.cssClassNamesBaseItem.simpleBorder);
        }
        if (element) {
            element.classList.add(exports.cssClassNamesBaseItem.item);
            if (this._isBorderRequired()) {
                element.classList.add(exports.cssClassNamesBaseItem.simpleBorder);
            }
            else {
                element.classList.remove(exports.cssClassNamesBaseItem.simpleBorder);
            }
        }
        return classes;
    };
    baseItem.prototype._generateOuterBorderClasses = function (element) {
        if (this.visualMode === 'caption')
            return;
        if (element) {
            if (this.hasParentContainer() && this.visualMode === 'full') {
                element.classList.add(exports.cssClassNamesBaseItem.groupItemChild);
            }
            else {
                element.classList.remove(exports.cssClassNamesBaseItem.groupItemChild);
            }
        }
        return this.hasParentContainer() && this.visualMode === 'full' ? [exports.cssClassNamesBaseItem.groupItemChild] : [];
    };
    baseItem.prototype._isBorderRequired = function () {
        return this._isPaneEmpty() && this.visualMode === 'full';
    };
    baseItem.prototype._resize = function () {
        if (this.hasWidget) {
            this._resizeUnsafe();
        }
        else {
            this._resizeBase();
        }
    };
    baseItem.prototype._resizeUnsafe = function () {
        this._resizeBase();
    };
    baseItem.prototype._resizeBase = function () {
        this.updateContentSize();
        this._allocatePreloader();
        this.captionToolbar.onResize();
    };
    baseItem.prototype.updateContentSize = function () {
        if (this.hasWidget) {
            this._updateContentSizeUnsafe();
        }
        else {
            this._updateContentSizeBase();
        }
    };
    baseItem.prototype._updateContentSizeUnsafe = function () {
        this._updateContentSizeBase();
    };
    baseItem.prototype._updateContentSizeBase = function () {
        var that = this;
        that._generateOuterBorderClasses(that.container);
        that._generateInnerBorderClasses(that.contentRoot);
        var contentHeight = Math.floor($(that.container).height() - that._calcHeaderAndFooterHeight());
        $(that.contentRoot).outerHeight(contentHeight);
    };
    baseItem.prototype._allocatePreloader = function () {
        var shieldingElement = this.container.querySelector('.dx-dashboard-item-shield'), position = this._getContainerPosition();
        this.itemLoadingElement.resize();
        if (shieldingElement) {
            shieldingElement.style.left = position.left.toString() + 'px';
            shieldingElement.style.top = position.top.toString() + 'px';
            shieldingElement.style.width = position.width.toString() + 'px';
            shieldingElement.style.height = position.height.toString() + 'px';
        }
    };
    baseItem.prototype._getButtonOffset = function (useToolbarOffset) {
        var defaultButtonSize = 28;
        var hoverDiv = useToolbarOffset ? this.container.querySelector('.' + exports.cssClassNamesBaseItem.overlayContent) : undefined;
        return {
            left: !!hoverDiv ? $(hoverDiv).outerWidth(true) : defaultButtonSize,
            top: !!hoverDiv ? $(hoverDiv).outerHeight(true) : defaultButtonSize
        };
    };
    baseItem.prototype._getAnimationOptions = function () {
        return {
            enabled: !!this.options.animate,
            duration: 300
        };
    };
    baseItem.prototype._getContainerPosition = function () {
        if (this.hasWidget) {
            return this._getContainerPositionUnsafe();
        }
        else {
            return this._getContainerPositionBase();
        }
    };
    baseItem.prototype._getContainerPositionUnsafe = function () {
        return this._getContainerPositionBase();
    };
    baseItem.prototype._getContainerPositionBase = function () {
        var container = this._getBoundaryContainer(), position = $(container).position(), width = $(container).outerWidth(), height = $(container).outerHeight(), marginX = $(container).css('margin-left'), marginY = $(container).css('margin-top'), border = this._isPaneEmpty() ? 0 : 1, parseMargin = function (margin) { return margin == 'auto' ? 0 : parseInt(margin); };
        return {
            left: position.left,
            top: position.top,
            width: width,
            height: height,
            offsetX: width + parseMargin(marginX) - border,
            offsetY: parseMargin(marginY) - border
        };
    };
    baseItem.prototype._getBoundaryContainer = function () {
        return this.visualMode === 'caption' ? this._boundaryContainer : this.container;
    };
    baseItem.prototype._getSelectedValues = function () {
        var selectedValues = this.options.SelectedValues;
        return this._isMultiDataSupported() ? this._patchTroughDrillDownValues(selectedValues) : selectedValues;
    };
    baseItem.prototype._onClearSelection = function () {
        this.clearSelection();
        this.customSelectedTuples = [];
        if (this.customSelectionMode == _interactivity_controller_1.dashboardSelectionMode.multiple)
            this.updateCaptionToolbar();
        this.itemSelectionChanged.fire(this.getName(), []);
    };
    baseItem.prototype._getElementInteractionValue = function (element, viewModel) {
    };
    baseItem.prototype._setSelectedValues = function (values) {
        this.options.SelectedValues = values;
    };
    baseItem.prototype._raiseItemClick = function (element) {
        var that = this, tuple = [], dataPoint = that._getDataPoint(element), drillDownValues = that._getDrillDownValues(), targetAxes = that._getTargetAxes(), drillDownAxis = drillDownValues && targetAxes.length == 1 ? targetAxes[0] : undefined;
        targetAxes.forEach(function (axisName) {
            var values;
            if (dataPoint.getSelectionValues) {
                values = dataPoint.getSelectionValues(axisName);
            }
            else {
                values = dataPoint.getValues(axisName);
            }
            if (values.length > 0) {
                if (drillDownAxis && axisName === drillDownAxis && !that._isMultiDataSupported()) {
                    values = drillDownValues.concat(values);
                }
                tuple.push({ AxisName: axisName, Value: values });
            }
        });
        if ((targetAxes.length != 0) && (targetAxes.length == tuple.length)) {
            that._clickAction(tuple);
        }
        if (that.itemClick) {
            that.itemClick.fire(that.getName(), dataPoint);
        }
    };
    baseItem.prototype._clickAction = function (tuple) {
        this.interactivityController.clickAction([tuple]);
    };
    baseItem.prototype._isMultiDataSupported = function () {
        return false;
    };
    baseItem.prototype._getDataPoint = function (element) {
        return null;
    };
    baseItem.prototype._getWidget = function () {
        return null;
    };
    baseItem.prototype._raiseItemWidgetCreated = function () {
        var widget = this._getWidget();
        if (widget) {
            this.itemWidgetCreated.fire(this.getName(), widget);
        }
    };
    baseItem.prototype._raiseItemWidgetUpdating = function () {
        var widget = this._getWidget();
        if (widget) {
            this.itemWidgetUpdating.fire(this.getName(), widget);
        }
    };
    baseItem.prototype._raiseItemWidgetUpdated = function () {
        var widget = this._getWidget();
        if (widget) {
            this.itemWidgetUpdated.fire(this.getName(), widget);
        }
    };
    baseItem.prototype._raiseItemWidgetOptionsPrepared = function (options) {
        if (options) {
            this.itemWidgetOptionsPrepared.fire(this.getName(), options);
        }
    };
    baseItem.prototype._raiseItemHover = function (element, state) {
        if (this.itemHover) {
            var dataPoint = this._getDataPoint(element);
            this.itemHover.fire(this.getName(), dataPoint, state);
        }
    };
    baseItem.prototype._onClearMasterFilter = function () {
        var name = this.getName();
        this._setSelectedValues(null);
        if (!this.options || !this.options.useNeutralFilterMode) {
            this.clearSelection();
        }
        this.clearMasterFilter.fire(name);
    };
    baseItem.prototype._onToggleSelectionMode = function () {
        this._allowMultiselection = !this._allowMultiselection;
        this.allowMultiselectionChanged && this.allowMultiselectionChanged(this._allowMultiselection);
        this.updateCaptionToolbar();
        this.updateInteractivityOptions();
    };
    baseItem.prototype._onDrillUp = function () {
        this.drillUp.fire(this.getName(), !!this._getSelectedValues());
    };
    baseItem.prototype._onContentElementSelection = function (index) {
        this.contentElementSelection.fire(this.getName(), {
            index: index,
            caption: this.options.ViewModel.ContentDescription.ElementNames[index]
        });
    };
    baseItem.prototype._onExpandValue = function (expandValueParams) {
        this.expandValue.fire(this.getName(), expandValueParams);
    };
    baseItem.prototype._onClientStateUpdate = function (clientState) {
        this.clientStateUpdate.fire(this.getName(), clientState);
    };
    baseItem.prototype._onDataRequest = function () {
        this.dataRequest.fire(this.getName());
    };
    baseItem.prototype._hasDrillUpButton = function () {
        var actionModel = this.options.ActionModel;
        return actionModel && actionModel.DrillUpButtonState && actionModel.DrillUpButtonState !== 'Hidden';
    };
    baseItem.prototype._hasClearMasterFilterButton = function () {
        var actionModel = this.options.ActionModel;
        return actionModel && actionModel.ClearMasterFilterButtonState && actionModel.ClearMasterFilterButtonState === 'Enabled';
    };
    baseItem.prototype._hasClearSelectionButton = function () {
        return !this.isInteractivityActionEnabled() && this.customSelectionMode == _interactivity_controller_1.dashboardSelectionMode.multiple && this.customSelectedTuples.length > 0;
    };
    baseItem.prototype._hasToggleSelectionModeButton = function () {
        return this._canSetMultipleMasterFilter() || (!this.isInteractivityActionEnabled() && this.customSelectionMode == _interactivity_controller_1.dashboardSelectionMode.multiple);
    };
    baseItem.prototype._isDrillUpEnabled = function () {
        var actionModel = this.options.ActionModel;
        return actionModel && actionModel.DrillUpButtonState && actionModel.DrillUpButtonState === 'Enabled';
    };
    baseItem.prototype._canPerformAction = function (action) {
        var actionModel = this.options.ActionModel;
        return actionModel && actionModel.Actions && actionModel.Actions.indexOf(action) !== -1;
    };
    baseItem.prototype._canPerformDrillDown = function () {
        return this._canPerformAction(_common_1.viewerActions.drillDown);
    };
    baseItem.prototype._canPerformDrillUp = function () {
        return this._canPerformAction(_common_1.viewerActions.drillUp);
    };
    baseItem.prototype._canSetMasterFilter = function () {
        return this._canPerformAction(_common_1.viewerActions.setMasterFilter);
    };
    baseItem.prototype._canSetMultipleMasterFilter = function () {
        return this._canPerformAction(_common_1.viewerActions.setMultipleValuesMasterFilter);
    };
    baseItem.prototype.isInteractivityActionEnabled = function () {
        return this._canSetMasterFilter() || this._canSetMultipleMasterFilter() || this._canPerformDrillDown();
    };
    baseItem.prototype._selectionMode = function () {
        return this.isInteractivityActionEnabled() ? 'multiple' : 'none';
    };
    baseItem.prototype._getHtml = function (text) {
        return this._isEncodeHtml() ? _utils_1.encodeHtml(text) : text;
    };
    baseItem.prototype._getAxisNames = function () {
        return this.options.AxisNames || [];
    };
    baseItem.prototype._getDrillDownAxisName = function () {
        return this._getAxisNames().length > 0 ? this._getAxisNames()[0] : undefined;
    };
    baseItem.prototype._getDrillDownValues = function () {
        var drillDownValues = this.options.DrillDownUniqueValues;
        return drillDownValues != null ? drillDownValues : [];
    };
    return baseItem;
}());
exports.baseItem = baseItem;
exports.cssClassNamesBaseItem = {
    item: 'dx-dashboard-item',
    groupItem: 'dx-dashboard-group-item',
    groupItemChild: 'dx-dashboard-group-item-child',
    simpleBorder: 'dx-dashboard-simple-border',
    overlayContent: 'dx-overlay-content',
    cardWihtoutBackground: 'dx-dashboard-card-without-background'
};


/***/ }),
/* 30 */
/***/ (function(module, exports) {

module.exports = DevExpress.utils.string;

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _export_options_1 = __webpack_require__(147);
exports.cssClasses = {
    caption: 'dx-dashboard-caption-toolbar',
    actionToolbar: 'dx-dashboard-action-toolbar',
    contentToolbar: 'dx-dashboard-content-toolbar',
    captionBorder: 'dx-dashboard-caption-toolbar-border',
    title: 'dx-dashboard-title-toolbar',
    captionPanelSeparator: 'dx-caption-panel-separator',
    popoverIconMenuWrapper: 'dx-dashboard-icon-menu-popover-wrapper',
    popoverListWrapper: 'dx-dashboard-list-popover-wrapper',
    floatingContainer: 'dx-dashboard-floating-caption-panel-container',
    iconClearMasterFilter: 'dx-dashboard-clear-master-filter',
    iconClearSelection: 'dx-dashboard-clear-selection',
    iconDrillUp: 'dx-dashboard-drill-up',
    iconMultiselection: 'dx-dashboard-toggle-multiselection',
    iconItemExport: 'dx-dashboard-export',
    iconExportToPDF: 'dx-dashboard-export-to-pdf',
    iconExportToImage: 'dx-dashboard-export-to-image',
    iconExportToExcel: 'dx-dashboard-export-to-excel',
    iconContentSelection: 'dx-dashboard-content-selection',
    iconLimitVisibleData: 'dx-dashboard-data-reduced',
    iconParameters: 'dx-dashboard-parameters',
    iconFilter: 'dx-dashboard-filter',
    iconTimePeriods: 'dx-dashboard-range-time-periods',
    iconInitialExtent: 'dx-dashboard-map-initial-extent',
    iconBack: 'dx-dashboard-back',
    ellipsisIcon: 'dx-dashboard-open-tab-pages',
    tooltipLimitVisibleData: 'dx-dashboard-tooltip-limit-visible-data',
    checked: 'dx-dashboard-checked',
    textButton: 'text-button',
    filterText: 'filter-text',
    dashboardContainer: 'dx-dashboard-container',
    toolbarItem: 'dx-toolbar-item',
    toolbarBefore: 'dx-toolbar-before',
    toolbarAfter: 'dx-toolbar-after',
    toolbarCenter: 'dx-toolbar-center',
    ellipsisText: 'dx-dashboard-ellipsis',
    flexParent: 'dx-dashboard-flex-parent',
    truncated: 'dx-dashboard-truncated',
    fixed: 'dx-dashboard-fixed',
    buttonBack: 'dx-dashboard-back-button',
    toolbarPreview: 'dx-dashboard-toolbar-preview'
};
function _convertToExportFormat(exportIcon) {
    switch (exportIcon) {
        case exports.cssClasses.iconExportToExcel:
            return _export_options_1.exportFormats.excel;
        case exports.cssClasses.iconExportToImage:
            return _export_options_1.exportFormats.image;
        default:
            return _export_options_1.exportFormats.pdf;
    }
}
exports._convertToExportFormat = _convertToExportFormat;
exports.Settings = {
    allowExportToImage: true
};


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var serializable_model_1 = __webpack_require__(5);
var _interactivity_options_1 = __webpack_require__(130);
var FilterableDashboardItemInteractivityOptions = (function (_super) {
    __extends(FilterableDashboardItemInteractivityOptions, _super);
    function FilterableDashboardItemInteractivityOptions(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    FilterableDashboardItemInteractivityOptions.prototype.getInfo = function () {
        return [_interactivity_options_1.ignoreMasterFiltersDefaultTrue];
    };
    return FilterableDashboardItemInteractivityOptions;
}(serializable_model_1.SerializableModel));
exports.FilterableDashboardItemInteractivityOptions = FilterableDashboardItemInteractivityOptions;
var DashboardItemGroupInteractivityOptions = (function (_super) {
    __extends(DashboardItemGroupInteractivityOptions, _super);
    function DashboardItemGroupInteractivityOptions(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    DashboardItemGroupInteractivityOptions.prototype.getInfo = function () {
        return _super.prototype.getInfo.call(this).concat(_interactivity_options_1.isMasterFilterDefaultFalse);
    };
    return DashboardItemGroupInteractivityOptions;
}(FilterableDashboardItemInteractivityOptions));
exports.DashboardItemGroupInteractivityOptions = DashboardItemGroupInteractivityOptions;
var DashboardItemBaseInteractivityOptions = (function (_super) {
    __extends(DashboardItemBaseInteractivityOptions, _super);
    function DashboardItemBaseInteractivityOptions(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    DashboardItemBaseInteractivityOptions.prototype.getInfo = function () {
        return [_interactivity_options_1.ignoreMasterFiltersDefaultFalse];
    };
    return DashboardItemBaseInteractivityOptions;
}(serializable_model_1.SerializableModel));
exports.DashboardItemBaseInteractivityOptions = DashboardItemBaseInteractivityOptions;
var DashboardTabItemInteractivityOptions = (function (_super) {
    __extends(DashboardTabItemInteractivityOptions, _super);
    function DashboardTabItemInteractivityOptions(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    DashboardTabItemInteractivityOptions.prototype.getInfo = function () {
        return _super.prototype.getInfo.call(this).concat([_interactivity_options_1.isMasterFilterDefaultTrue, _interactivity_options_1.ignoreMasterFiltersDefaultFalse]);
    };
    return DashboardTabItemInteractivityOptions;
}(DashboardItemBaseInteractivityOptions));
exports.DashboardTabItemInteractivityOptions = DashboardTabItemInteractivityOptions;
var DashboardItemMasterFilterInteractivityOptions = (function (_super) {
    __extends(DashboardItemMasterFilterInteractivityOptions, _super);
    function DashboardItemMasterFilterInteractivityOptions(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    DashboardItemMasterFilterInteractivityOptions.prototype.getInfo = function () {
        return _super.prototype.getInfo.call(this).concat([_interactivity_options_1.masterFilterMode]);
    };
    return DashboardItemMasterFilterInteractivityOptions;
}(DashboardItemBaseInteractivityOptions));
exports.DashboardItemMasterFilterInteractivityOptions = DashboardItemMasterFilterInteractivityOptions;
var DashboardItemDrillDownInteractivityOptions = (function (_super) {
    __extends(DashboardItemDrillDownInteractivityOptions, _super);
    function DashboardItemDrillDownInteractivityOptions(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    DashboardItemDrillDownInteractivityOptions.prototype.getInfo = function () {
        return _super.prototype.getInfo.call(this).concat([_interactivity_options_1.isDrillDownEnabled]);
    };
    return DashboardItemDrillDownInteractivityOptions;
}(DashboardItemBaseInteractivityOptions));
exports.DashboardItemDrillDownInteractivityOptions = DashboardItemDrillDownInteractivityOptions;
var DashboardItemInteractivityOptions = (function (_super) {
    __extends(DashboardItemInteractivityOptions, _super);
    function DashboardItemInteractivityOptions(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    DashboardItemInteractivityOptions.prototype.getInfo = function () {
        return _super.prototype.getInfo.call(this).concat([_interactivity_options_1.isDrillDownEnabled]);
    };
    return DashboardItemInteractivityOptions;
}(DashboardItemMasterFilterInteractivityOptions));
exports.DashboardItemInteractivityOptions = DashboardItemInteractivityOptions;
var ChartInteractivityOptions = (function (_super) {
    __extends(ChartInteractivityOptions, _super);
    function ChartInteractivityOptions(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    ChartInteractivityOptions.prototype.getInfo = function () {
        return _super.prototype.getInfo.call(this).concat(_interactivity_options_1.targetDimensions);
    };
    return ChartInteractivityOptions;
}(DashboardItemInteractivityOptions));
exports.ChartInteractivityOptions = ChartInteractivityOptions;
exports._filterItemInteractivityOptionsMeta = _interactivity_options_1.getInteractivityOptionsPropertyInfo(FilterableDashboardItemInteractivityOptions);
exports._groupItemInteractivityOptionsMeta = _interactivity_options_1.getInteractivityOptionsPropertyInfo(DashboardItemGroupInteractivityOptions);
exports._tabItemInteractivityOptions = _interactivity_options_1.getInteractivityOptionsPropertyInfo(DashboardTabItemInteractivityOptions);
exports._baseInteractivityOptionsMeta = _interactivity_options_1.getInteractivityOptionsPropertyInfo(DashboardItemBaseInteractivityOptions);
exports._dashboardItemInteractivityOptionsMeta = _interactivity_options_1.getInteractivityOptionsPropertyInfo(DashboardItemInteractivityOptions);
exports._masterFilterInteractivityOptionsMeta = _interactivity_options_1.getInteractivityOptionsPropertyInfo(DashboardItemMasterFilterInteractivityOptions);
exports._drillDownInteractivityOptionsMeta = _interactivity_options_1.getInteractivityOptionsPropertyInfo(DashboardItemDrillDownInteractivityOptions);
exports._chartItemInteractivityOptionsMeta = _interactivity_options_1.getInteractivityOptionsPropertyInfo(ChartInteractivityOptions);


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var data_item_1 = __webpack_require__(8);
var dimension_1 = __webpack_require__(43);
var _data_field_1 = __webpack_require__(14);
var _undo_engine_helper_1 = __webpack_require__(27);
var _display_name_provider_1 = __webpack_require__(24);
var _data_item_surface_1 = __webpack_require__(227);
var DataItemCollectionSurface = (function () {
    function DataItemCollectionSurface(itemSurface, sectionInfo, extendTabsHandler, warning) {
        var _this = this;
        this.itemSurface = itemSurface;
        this.sectionInfo = sectionInfo;
        this.extendTabsHandler = extendTabsHandler;
        this.warning = warning;
        this._disposables = [];
        this.supportGroups = true;
        this.addClick = function () {
            var dataLink = new data_item_1.DataItemLink(_this.itemSurface.dashboardItem);
            _this.newItemSample(dataLink);
            var surface = new _data_item_surface_1.DataItemSurface(dataLink, _this.sectionInfo.bindingProperty, _this.itemSurface.dashboardItem, _this.itemSurface._dataSourceBrowser, _this.itemSurface.propertiesController, true, null, _this.extendTabsHandler);
            surface.newItemCreated.add(function (model) { return _this._addDataItem(model); });
            surface.itemSelected.add(function (model) {
                _this.newItemSample(undefined);
                _this.selectDataItem(model);
            });
            _this.itemSurface.propertiesController.mainModel({
                data: surface,
                containingCollection: _this.dataItems
            });
        };
        this.removeDataItem = function (data) {
            _this._removeDataItem(data);
        };
        this.dataItemDisplayNameProvider = function (dataItem) {
            return _display_name_provider_1.getDataItemDisplayName(_this.itemSurface._dataSourceBrowser, _this.itemSurface.dashboardItem, dataItem);
        };
        this.selectDataItem = function (data) {
            var surface = new _data_item_surface_1.DataItemSurface(data, _this.sectionInfo.bindingProperty, _this.itemSurface.dashboardItem, _this.itemSurface._dataSourceBrowser, _this.itemSurface.propertiesController, true, null, _this.extendTabsHandler);
            surface.newItemCreated.add(function (model) {
                _this._addDataItem(model);
            });
            _this.dataItemSurface(surface);
            _this.itemSurface.propertiesController.mainModel({
                data: _this.dataItemSurface(),
                containingCollection: _this.dataItems
            });
        };
        this.dataItemSurface = ko.observable();
        this.newItemSample = ko.observable();
        this.template = 'dx-dashboard-data-item-collection';
        this.dataItems = itemSurface.dashboardItem[sectionInfo.bindingProperty.propertyName];
        this.groups = ko.computed(function () {
            var result = [], position = 0;
            _this.dataItems().forEach(function (dataItemLink) {
                if (dataItemLink.dataItem() instanceof dimension_1.Dimension && _data_field_1.IsOlapHierarchyField(dataItemLink.dataItem())) {
                    var dimension = dataItemLink.dataItem();
                    var group = result.filter(function (group) { return group.groupIndex === dimension.groupIndex(); })[0];
                    if (!group) {
                        group = {
                            groupIndex: dimension.groupIndex(),
                            items: [],
                            position: position++
                        };
                        result.push(group);
                    }
                    group.items.push(dataItemLink);
                }
                else {
                    result.push({
                        groupIndex: undefined,
                        items: [dataItemLink],
                        position: position++
                    });
                }
            });
            return result;
        });
    }
    Object.defineProperty(DataItemCollectionSurface.prototype, "items", {
        get: function () {
            return this.dataItems;
        },
        enumerable: true,
        configurable: true
    });
    DataItemCollectionSurface.prototype._addDataItem = function (model) {
        this.dataItems.push(model);
    };
    DataItemCollectionSurface.prototype._removeDataItem = function (link) {
        var dataItem = link.dataItem();
        this.dataItems.remove(link);
        this.itemSurface.dashboardItem._removeDataItem(dataItem, true);
        if (dataItem instanceof dimension_1.Dimension && _data_field_1.IsOlapHierarchyField(dataItem)) {
            for (var i = this.dataItems().length - 1; i >= 0; i--) {
                var groupItemLink = this.dataItems()[i];
                var groupItem = groupItemLink.dataItem();
                if (groupItem instanceof dimension_1.Dimension && groupItem.groupIndex() == dataItem.groupIndex()) {
                    this.dataItems.remove(groupItemLink);
                    this.itemSurface.dashboardItem._removeDataItem(groupItem, true);
                }
            }
        }
    };
    DataItemCollectionSurface.prototype.relocateItem = function (item, placeholderIndex) {
        var _this = this;
        var dataLink = new data_item_1.DataItemLink(this.itemSurface.dashboardItem);
        var dataItem;
        if (item instanceof data_item_1.DataItemLink) {
            dataItem = item.dataItem();
        }
        else if (item['_getBindingModel']) {
            var x = item;
            var filledBinding = x._getBindingModel().filter(function (b) { return !!item[b.propertyName].uniqueName(); })[0];
            dataItem = item[filledBinding.propertyName].dataItem();
        }
        this.itemSurface
            ._dataSourceBrowser.findDataField(this.itemSurface.dashboardItem.dataSource(), this.itemSurface.dashboardItem.dataMember(), dataItem.dataMember())
            .done(function (dataField) {
            var newDataItem = _this.itemSurface.dashboardItem._createDataItem(dataField, _this.sectionInfo.bindingProperty);
            newDataItem.grabFrom(dataItem);
            _this.itemSurface.dashboardItem._removeDataItem(dataItem);
            dataLink.dataItem(newDataItem);
            _this.items.splice(placeholderIndex, 0, dataLink);
        });
    };
    DataItemCollectionSurface.prototype.isOlap = function () {
        var filledItem = this
            .items()
            .filter(function (item) { return item.dataItem(); })[0];
        return _data_field_1.DataField.isOlap(filledItem.dataItem().dataMember());
    };
    DataItemCollectionSurface.prototype.errorFactory = function (link) {
        var linkErrorState = ko.observable(false);
        if (link.dataItem()) {
            this.itemSurface._dataSourceBrowser.findDataField(this.itemSurface.dashboardItem.dataSource(), this.itemSurface.dashboardItem.dataMember(), link.dataItem().dataMember()).done(function (result) {
                linkErrorState(!result);
            });
        }
        return linkErrorState;
    };
    DataItemCollectionSurface.prototype.dispose = function () {
        this._disposables.forEach(function (d) {
            d.dispose();
        });
    };
    __decorate([
        _undo_engine_helper_1.wrapWithUndoRedo
    ], DataItemCollectionSurface.prototype, "_addDataItem", null);
    __decorate([
        _undo_engine_helper_1.wrapWithUndoRedo
    ], DataItemCollectionSurface.prototype, "_removeDataItem", null);
    __decorate([
        _undo_engine_helper_1.wrapWithUndoRedo
    ], DataItemCollectionSurface.prototype, "relocateItem", null);
    return DataItemCollectionSurface;
}());
exports.DataItemCollectionSurface = DataItemCollectionSurface;


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.itemDataAxisNames = {
    defaultAxis: 'Default',
    chartSeriesAxis: 'Series',
    chartArgumentAxis: 'Argument',
    sparklineAxis: 'Sparkline',
    pivotColumnAxis: 'Column',
    pivotRowAxis: 'Row'
};


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DashboardDataIdField = '__DX_DASHBOARD_DATA_ID';
exports.viewerActions = {
    setMasterFilter: 'SetMasterFilter',
    setMultipleValuesMasterFilter: 'SetMultipleValuesMasterFilter',
    clearMasterFilter: 'ClearMasterFilter',
    drillDown: 'DrillDown',
    drillUp: 'DrillUp',
    setSelectedElementIndex: 'SetSelectedElementIndex',
    expandValue: 'ExpandValue',
    dataRequest: 'DataRequest',
    getDrillThroughData: 'GetDrillThroughData'
};
exports.contentType = {
    empty: 'Empty',
    viewModel: 'ViewModel',
    actionModel: 'ActionModel',
    completeDataSource: 'CompleteDataSource',
    partialDataSource: 'PartialDataSource',
    fullContent: 'FullContent'
};
var separator = ', ';
exports.parseFlagsEnumType = function (typeModel, defaultValue, dic) {
    var types = typeModel.split(separator);
    return Object.keys(dic).reduce(function (prev, curr) {
        return prev | (types.indexOf(curr) >= 0 ? dic[curr] : 0);
    }, defaultValue);
};
exports.serializeFlagsEnumType = function (val, defaultValue, dic) {
    return Object.keys(dic).reduce(function (prev, curr) {
        if (val & dic[curr]) {
            prev.push(curr);
        }
        return prev;
    }, []).join(separator) || defaultValue;
};
exports.getFlagsEnumTypeValues = function (val, dic, type) {
    var keys = [];
    Object.keys(dic).forEach(function (key) {
        if (dic[key] & val) {
            keys.push(type === 'value' ? dic[key] : key);
        }
    });
    return keys;
};


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var NameGenerator = (function () {
    function NameGenerator() {
    }
    NameGenerator.validateName = function (object, nameCollection, propertyName, startIndex, addWhiteSpace) {
        if (addWhiteSpace === void 0) { addWhiteSpace = false; }
        var currentName = ko.unwrap(object[propertyName]);
        if (!NameGenerator.isValidName(currentName, nameCollection, propertyName)) {
            object[propertyName](NameGenerator.generateName(currentName, nameCollection, propertyName, startIndex, addWhiteSpace));
        }
    };
    NameGenerator.isValidName = function (name, nameCollection, propertyName) {
        return nameCollection.map(function (value) { return ko.unwrap(value[propertyName]); }).filter(function (value) { return value === name; }).length === 0;
    };
    NameGenerator.generateName = function (namePrefix, nameCollection, propertyName, startIndex, addWhiteSpace) {
        if (addWhiteSpace === void 0) { addWhiteSpace = false; }
        var getNewName = function (index) {
            return namePrefix + (addWhiteSpace ? ' ' : '') + index;
        };
        var i = startIndex ? startIndex : 0, name = getNewName(i);
        while (!NameGenerator.isValidName(name, nameCollection, propertyName)) {
            name = getNewName(++i);
        }
        return name;
    };
    return NameGenerator;
}());
exports.NameGenerator = NameGenerator;
function isComponentNameValid(name) {
    return !!(name && (typeof name === 'string') && name.length && name.match(/^[A-Za-z][A-Za-z0-9]*(?:_[A-Za-z0-9]+)*$/));
}
exports.isComponentNameValid = isComponentNameValid;
var Guard = (function () {
    function Guard() {
    }
    Guard.isNotNull = function (object, name) {
        if (!object) {
            throw new Error(name + ' should not be null');
        }
    };
    return Guard;
}());
exports.Guard = Guard;
var EnumManager = (function () {
    function EnumManager() {
    }
    EnumManager.getNamesAndValues = function (enumType) {
        return this.getNames(enumType).map(function (name) {
            return {
                name: name,
                value: enumType[name]
            };
        });
    };
    EnumManager.getNames = function (enumType) {
        return EnumManager._getObjectValues(enumType).filter(function (value) { return typeof value === 'string'; });
    };
    EnumManager.getValues = function (enumType) {
        return EnumManager._getObjectValues(enumType).filter(function (value) { return typeof value === 'number'; });
    };
    EnumManager._getObjectValues = function (enumType) {
        return Object.keys(enumType).map(function (key) { return enumType[key]; });
    };
    return EnumManager;
}());
exports.EnumManager = EnumManager;


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(678);
__webpack_require__(234);
__webpack_require__(47);
__export(__webpack_require__(385));
__export(__webpack_require__(386));
__export(__webpack_require__(387));
__export(__webpack_require__(239));
__export(__webpack_require__(165));
__export(__webpack_require__(388));
__export(__webpack_require__(48));
__export(__webpack_require__(97));
__export(__webpack_require__(389));
__export(__webpack_require__(391));
__export(__webpack_require__(163));
__export(__webpack_require__(392));
__export(__webpack_require__(394));
__export(__webpack_require__(238));
__export(__webpack_require__(395));
__export(__webpack_require__(396));
__export(__webpack_require__(397));
__export(__webpack_require__(398));
__export(__webpack_require__(399));
__export(__webpack_require__(400));
__export(__webpack_require__(401));
__export(__webpack_require__(402));
__export(__webpack_require__(403));
__export(__webpack_require__(404));
__export(__webpack_require__(241));
__export(__webpack_require__(167));
__export(__webpack_require__(406));
__export(__webpack_require__(242));
__export(__webpack_require__(407));
__export(__webpack_require__(408));
__export(__webpack_require__(166));
__export(__webpack_require__(98));
__export(__webpack_require__(6));
__export(__webpack_require__(234));
__export(__webpack_require__(95));
__export(__webpack_require__(35));
__export(__webpack_require__(409));
__export(__webpack_require__(47));
__export(__webpack_require__(25));
__export(__webpack_require__(390));
__export(__webpack_require__(393));
__export(__webpack_require__(240));
__export(__webpack_require__(405));
__export(__webpack_require__(21));
__export(__webpack_require__(16));
__export(__webpack_require__(410));
__export(__webpack_require__(243));
__export(__webpack_require__(679));
__export(__webpack_require__(680));
__export(__webpack_require__(3));


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(429);
__export(__webpack_require__(429));


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.specialValues = {
    nullValueGuid: 'D86D8A6C-0D87-4CA4-9C15-3356A83699B5',
    othersValueGuid: '5821CCA5-303B-425D-909F-B8373FB7FAE3',
    olapNullValueGuid: '764E2930-72BE-4464-ACB6-4ADB205BD414',
    errorValueGuid: 'D7BB8881-C9F3-45E3-B370-2EA8E836FC5D'
};


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var dx_querybuilder_1 = __webpack_require__(1);
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var ef_data_source_1 = __webpack_require__(138);
var federation_data_source_1 = __webpack_require__(207);
var object_data_source_1 = __webpack_require__(323);
var sql_data_source_1 = __webpack_require__(90);
var _data_field_1 = __webpack_require__(14);
var _date_utils_1 = __webpack_require__(41);
var _knockout_utils_1 = __webpack_require__(17);
function patchCalcFieldPath(dataSource, calculatedField, fieldName) {
    if (fieldName.indexOf('Parameters.Parameters.') === 0) {
        return 'Parameters.' + fieldName.split('.')[2];
    }
    if (dataSource instanceof sql_data_source_1.SqlDataSource) {
        var query = dataSource.queries().filter(function (query) { return query.name() === calculatedField.dataMember(); })[0];
        if (!!query && query instanceof dx_querybuilder_1.default.Analytics.Data.TableQuery) {
            var table = query.tables().filter(function (table) { return fieldName.indexOf((table.alias() || table.name()) + '.') === 0; })[0];
            if (!!table) {
                return trimLeadingPathElement(fieldName, table.alias() || table.name());
            }
        }
    }
    return fieldName;
}
exports.patchCalcFieldPath = patchCalcFieldPath;
function trimLeadingPathElement(path, element) {
    if (path === void 0) { path = ''; }
    var str = path;
    if (path.indexOf(element) === 0) {
        str = path.substring(element.length);
    }
    return str[0] === '.' ? str.substring(1) : str;
}
exports.trimLeadingPathElement = trimLeadingPathElement;
function splitFullFieldName(fullFieldName) {
    var parts = fullFieldName.split('.');
    return {
        path: parts.slice(0, parts.length - 1).join('.'),
        name: parts[parts.length - 1] || ''
    };
}
exports.splitFullFieldName = splitFullFieldName;
function isStartedWith(path, value) {
    return path.indexOf(value) === 0 && (path.length === value.length || path[value.length] === '.');
}
exports.isStartedWith = isStartedWith;
function findDataMember(dataSource, path) {
    var dataMember = '';
    var fieldPath = path;
    if (dataSource instanceof sql_data_source_1.SqlDataSource) {
        var query = dataSource.queries().filter(function (q) { return isStartedWith(path, q.name()); })[0];
        if (!!query) {
            dataMember = query.name();
            fieldPath = trimLeadingPathElement(path, dataMember);
        }
    }
    else if (dataSource instanceof ef_data_source_1.EFDataSource) {
        var table = dataSource._tables().filter(function (t) { return isStartedWith(path, t.dataMember()); })[0];
        if (!!table) {
            dataMember = table.dataMember();
            fieldPath = trimLeadingPathElement(path, dataMember);
        }
    }
    else if (dataSource instanceof federation_data_source_1.FederationDataSource) {
        var query = dataSource.queries().filter(function (q) { return isStartedWith(path, q.alias()); })[0];
        if (!!query) {
            dataMember = query.alias();
            fieldPath = trimLeadingPathElement(path, dataMember);
        }
    }
    return {
        dataMember: dataMember,
        fieldPath: fieldPath
    };
}
exports.findDataMember = findDataMember;
function getFirstDataMember(dataSource) {
    if (dataSource instanceof sql_data_source_1.SqlDataSource && dataSource.queries().length > 0) {
        return dataSource.queries()[0].name();
    }
    else if (dataSource instanceof ef_data_source_1.EFDataSource && dataSource._tables().length > 0) {
        return dataSource._tables()[0].dataMember();
    }
    else if (dataSource instanceof federation_data_source_1.FederationDataSource && dataSource.queries().length > 0) {
        return dataSource.queries()[0].alias();
    }
    else if (dataSource instanceof object_data_source_1.ObjectDataSource)
        return undefined;
    throw new Error();
}
exports.getFirstDataMember = getFirstDataMember;
var DataSourceBrowser = (function () {
    function DataSourceBrowser(_dataSources, isDesignMode, parameters, _serviceClient, isLoading) {
        if (isLoading === void 0) { isLoading = ko.observable(false); }
        var _this = this;
        this._dataSources = _dataSources;
        this.isDesignMode = isDesignMode;
        this.parameters = parameters;
        this._serviceClient = _serviceClient;
        this.isLoading = isLoading;
        this._disposables = [];
        this._dynamicParametersValueCache = {};
        this._dimensionValuesCache = {};
        this._fieldsCache = {};
        this.removeDataSource = function (dataSource) {
            _this._dataSources.remove(dataSource);
            _this.clearFieldsCache(dataSource.componentName());
        };
        if (isDesignMode()) {
            this._subscribeDataSources();
        }
        this._disposables.push(this.isDesignMode.subscribe(function (isDesignMode) {
            if (isDesignMode) {
                _this._subscribeDataSources();
            }
            else {
                _this._unsubscribeDataSources();
            }
        }));
    }
    DataSourceBrowser.prototype._cacheNestedFields = function (path, field) {
        var _this = this;
        if (field.childNodes().length > 0 && !!field.childNodes()[0].dataMember()) {
            var nestedPath = !!path ? path + '.' + field.dataMember() : field.dataMember();
            this._fieldsCache[nestedPath] = $.Deferred().resolve(field.childNodes()).promise();
            field.childNodes().forEach(function (member) { return _this._cacheNestedFields(nestedPath, member); });
        }
    };
    DataSourceBrowser.prototype._findInFieldsCache = function (dataSourceName, dataMemberName, fieldName, constraint, separateGroupFields) {
        var deferred = $.Deferred();
        var result = { path: '', field: undefined };
        var keys = Object.keys(this._fieldsCache);
        var fieldPath = dataMemberName ? [dataSourceName, dataMemberName].join('.') : dataSourceName;
        var i = 0;
        var findPromises = [];
        while (!result.field && i < keys.length) {
            var path = keys[i];
            if (path === fieldPath || path.indexOf(fieldPath + '.') === 0) {
                var a = function (notClosuredPath, notClosuredFieldPath) {
                    return function (fields) {
                        var filteredFields = fields.filter(isNonCollectionDataField);
                        for (var i_1 = 0; i_1 < filteredFields.length; i_1++) {
                            var field = filteredFields[i_1];
                            var foundField = field.dataMember() === fieldName && constraint(field) ? field : undefined;
                            var groupDataItems = field['groupDataItems'];
                            if ((!foundField || separateGroupFields) && !!groupDataItems && groupDataItems.length > 0) {
                                var foundGroupField = groupDataItems.filter(function (groupField) { return groupField.dataMember() === fieldName; })[0];
                                if (foundGroupField) {
                                    foundField = separateGroupFields ? foundGroupField : field;
                                }
                            }
                            if (!!foundField) {
                                result.path = notClosuredPath.substr(notClosuredFieldPath.length).split('.').filter(function (item) { return !!item; }).join('.');
                                result.field = foundField;
                                deferred.resolve(result);
                                break;
                            }
                        }
                    };
                };
                findPromises.push(this._fieldsCache[path].done(a(path, fieldPath)));
            }
            i++;
        }
        $.when.apply($.when, findPromises).done(function () {
            if (!result.field) {
                deferred.resolve(result);
            }
        });
        return deferred.promise();
    };
    DataSourceBrowser.prototype.getDimensionFilterItems = function (dashboardItem, dimensionDataMember, previousState, branch) {
        var deferred = $.Deferred();
        var result = deferred.promise();
        if (!!dashboardItem && !!dimensionDataMember) {
            this._serviceClient.peek().getDimensionFilterItems(dashboardItem, dimensionDataMember, previousState, branch).done(function (list) {
                deferred.resolve(list);
            }).fail(function () {
                deferred.resolve([]);
            });
        }
        else {
            deferred.resolve([]);
        }
        return result;
    };
    DataSourceBrowser.prototype.getDimensionFilterString = function (dashboardItem, dimensionDataMember, previousState) {
        var deferred = $.Deferred();
        var result = deferred.promise();
        if (!!dashboardItem && !!dimensionDataMember) {
            this._serviceClient.peek().getDimensionFilterString(dashboardItem, dimensionDataMember, previousState).done(function (filterString) {
                deferred.resolve(filterString);
            }).fail(function () {
                deferred.resolve('');
            });
        }
        else {
            deferred.resolve('');
        }
        return result;
    };
    DataSourceBrowser.prototype.getDataFieldsArray = function (dataSourceName, dataMember, fieldPath, filterDelegate) {
        var _this = this;
        if (filterDelegate === void 0) { filterDelegate = function () { return true; }; }
        var id = !!dataMember ? [dataSourceName, dataMember].join('.') : dataSourceName;
        id = !!fieldPath ? [id, fieldPath].join('.') : id;
        var dataSource = this.findDataSource(dataSourceName);
        if (!dataSource) {
            return $.Deferred().resolve([]).promise();
        }
        dataSource.calculatedFields().forEach(function (calcField) {
            var expression = calcField.expression();
            var fieldType = calcField.fieldType();
            var name = calcField.name();
        });
        var result = $.Deferred();
        var cachedValue = this._fieldsCache[id];
        if (cachedValue) {
            cachedValue.done(function (dataFields) {
                result.resolve(dataFields.filter(filterDelegate));
            });
        }
        else {
            if (!!dataSourceName && !!dataSource && !!this._serviceClient) {
                var valueToCache_1 = $.Deferred();
                this._fieldsCache[id] = valueToCache_1.promise();
                setTimeout(function () {
                    _this._serviceClient.peek().getFieldList(dataSource, dataMember, fieldPath).done(function (list) {
                        var members = [];
                        (list || []).forEach(function (field) {
                            var dataField = new _data_field_1.DataField(field);
                            members.push(dataField);
                            _this._cacheNestedFields(id, dataField);
                        });
                        if (!fieldPath) {
                            members = members
                                .sort(function (f1, f2) { return f1.displayName().localeCompare(f2.displayName()); });
                        }
                        valueToCache_1
                            .resolve(members)
                            .done(function (dataFields) { return result.resolve(dataFields.filter(filterDelegate)); });
                    }).fail(function () {
                        result.resolve([]);
                    });
                }, 1);
            }
            else {
                result.resolve([]);
            }
        }
        return result.promise();
    };
    DataSourceBrowser.prototype.isFolder = function (path) {
        return !!this._fieldsCache[path];
    };
    DataSourceBrowser.prototype.findPathToFieldInTree = function (dataSourceName, dataMemberName, fieldName, constraint) {
        var _this = this;
        var deferred = $.Deferred();
        this.getDataFieldsArray(dataSourceName, dataMemberName, '', isNonCollectionDataField).done(function () {
            _this._findInFieldsCache(dataSourceName, dataMemberName, fieldName, constraint, false).done(function (info) { return deferred.resolve(info.path); });
        });
        return deferred.promise();
    };
    DataSourceBrowser.prototype.findDataField = function (dataSourceName, dataMemberName, fullFieldName, separateGroupFields) {
        var _this = this;
        if (separateGroupFields === void 0) { separateGroupFields = false; }
        var deferred = $.Deferred();
        var dataSource = this._dataSources().filter(function (ds) { return ds.componentName() === dataSourceName; })[0];
        var info = {
            path: '',
            name: fullFieldName
        };
        if (dataSource instanceof object_data_source_1.ObjectDataSource || dataSource instanceof ef_data_source_1.EFDataSource) {
            info = splitFullFieldName(fullFieldName);
        }
        this.getDataFieldsArray(dataSourceName, dataMemberName, info.path, isNonCollectionDataField).done(function () {
            _this._findInFieldsCache(dataSourceName, dataMemberName, fullFieldName, function (field) { return true; }, separateGroupFields).done(function (info) { return deferred.resolve(info.field); });
        });
        return deferred.promise();
    };
    DataSourceBrowser.prototype.fuzzyFindFields = function (startPath, searchFor) {
        var _this = this;
        var deferred = $.Deferred(), result = [], findPromises = [];
        var strContains = function (str, substr) { return str.toLowerCase().indexOf(substr.toLowerCase()) !== -1; };
        Object.keys(this._fieldsCache).forEach(function (path) {
            if (path === startPath || path.indexOf(startPath + '.') === 0) {
                findPromises.push(_this._fieldsCache[path].done(function (fields) {
                    fields
                        .filter(function (field) { return isNonCollectionDataField; })
                        .filter(function (field) { return strContains(field.dataMember(), searchFor) || strContains(field.displayName(), searchFor); })
                        .forEach(function (field) { return result.push({ path: path, field: field }); });
                }));
            }
        });
        $.when.apply($.when, findPromises).done(function () { return deferred.resolve(result); });
        return deferred.promise();
    };
    DataSourceBrowser.prototype.findDataSource = function (dsName) {
        return this._dataSources().filter(function (ds) { return ds.componentName() === dsName; })[0];
    };
    DataSourceBrowser.prototype.dataMembersSupported = function (dsc) {
        var dataSource = dsc && this.findDataSource(dsc.dataSource()) || null;
        return dataSource && dataSource.supportDataMembers;
    };
    DataSourceBrowser.prototype.getDataFields = function (dsc) {
        var result = ko.observableArray();
        if (dsc) {
            this.getDataFieldsArray(dsc.dataSource(), dsc.dataMember(), '', isNonCollectionDataField).done(function (members) {
                result(members.map(function (member) { return member.displayName(); }));
            });
        }
        return result;
    };
    DataSourceBrowser.prototype.clearFieldsCache = function (path) {
        var _this = this;
        Object.keys(this._fieldsCache).forEach(function (key) {
            if (key === path || key.indexOf(path + '.') === 0) {
                delete _this._fieldsCache[key];
            }
        });
    };
    DataSourceBrowser.prototype.clearDynamicParametersValueCache = function () {
        this._dynamicParametersValueCache = {};
    };
    DataSourceBrowser.prototype.initDataSource = function (dataSource) {
        var _this = this;
        if (dataSource instanceof sql_data_source_1.SqlDataSource) {
            this._fieldsCache[dataSource.componentName()] = $.Deferred().resolve(dataSource.queries().map(function (query) {
                var newDataField = new _data_field_1.DataField({ 'DataMember': query.name(), 'Name': query.name(), 'DisplayName': query.name() });
                newDataField.hasCalculatedFields = true;
                return newDataField;
            })).promise();
        }
        else if (dataSource instanceof ef_data_source_1.EFDataSource) {
            this.isLoading(true);
            this.getDataFieldsArray(dataSource.componentName(), '', '', isNonCollectionDataField).done(function (members) {
                dataSource._tables(members);
                _this.isLoading(false);
            });
        }
    };
    DataSourceBrowser.prototype.getParameterValues = function (parameterType, dynamicListLookUpSettings) {
        var _this = this;
        var dsc = dynamicListLookUpSettings;
        var valueMember = dynamicListLookUpSettings.valueMemberName();
        var displayMember = dynamicListLookUpSettings.displayMemberName() || valueMember;
        var sortOrder = dynamicListLookUpSettings.sortOrder();
        var sortByMember = dynamicListLookUpSettings.sortByMember();
        var selectedValues = '';
        if (this.parameters) {
            selectedValues = this.parameters()
                .map(function (p) {
                return {
                    name: p.name(),
                    value: _date_utils_1.toStringArray(p._actualValue.peek())
                };
            })
                .sort(function (p1, p2) { return p1.name.localeCompare(p2.name); })
                .reduce(function (acc, param) {
                var value = param.name + ":" + (param.value instanceof Array ? param.value.slice().sort().join('|') : param.value);
                return !!acc ? acc + "," + value : value;
            }, '');
        }
        var key = [parameterType, dsc.dataSource(), dsc.dataMember(), valueMember, displayMember, sortOrder, sortByMember, selectedValues].join('.');
        var parameterValues = this._dynamicParametersValueCache[key];
        if (!parameterValues) {
            parameterValues = ko.observableArray();
            if (!!valueMember && !!displayMember) {
                this._dynamicParametersValueCache[key] = parameterValues;
                this._serviceClient.peek().getParameterValues(dsc.dataSource(), this.findDataSource(dsc.dataSource()), dsc.dataMember(), valueMember, displayMember, sortOrder, sortByMember, parameterType)
                    .done(function (result) {
                    parameterValues(result ? result.map(function (value) { return ({
                        Value: _date_utils_1.tryConvertToDateTime(value.Value),
                        DisplayText: value.DisplayText
                    }); }) : undefined);
                    _this.dynamicLookUpValuesLoaded && _this.dynamicLookUpValuesLoaded(dynamicListLookUpSettings);
                });
            }
        }
        return parameterValues;
    };
    DataSourceBrowser.prototype.getDimensionUniqueValues = function (dataSourceName, dataMember, dimension) {
        var def = $.Deferred();
        var key = 'DataSource=' + dataSourceName
            + 'DataMember=' + dataMember
            + 'Dimension=' + JSON.stringify(new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer({ useRefs: false }).serialize(dimension));
        var dimensionValues = this._dimensionValuesCache[key];
        if (!dimensionValues) {
            dimensionValues = ko.observableArray();
            var dataSource = this.findDataSource(dataSourceName);
            if (!!dataSource && !!dimension) {
                this._dimensionValuesCache[key] = dimensionValues;
                this._serviceClient.peek().getDimensionUniqueValues(dataSource, dataMember, dimension)
                    .done(function (result) {
                    if (Array.isArray(result))
                        result = result.map(function (val) { return _date_utils_1.tryConvertToDateTime(val); });
                    dimensionValues(result);
                    def.resolve(dimensionValues());
                });
            }
        }
        else {
            def.resolve(dimensionValues());
        }
        return def.promise();
    };
    DataSourceBrowser.prototype.splitFullPath = function (fullPath) {
        if (fullPath === void 0) { fullPath = ''; }
        var dataSource = '';
        var dataSourceObj = this._dataSources().filter(function (ds) { return isStartedWith(fullPath, ds.componentName()); })[0];
        if (!!dataSourceObj) {
            dataSource = dataSourceObj.componentName();
        }
        var _a = findDataMember(dataSourceObj, trimLeadingPathElement(fullPath, dataSource)), dataMember = _a.dataMember, fieldPath = _a.fieldPath;
        return {
            dataSource: dataSource,
            dataMember: dataMember,
            fieldPath: fieldPath
        };
    };
    DataSourceBrowser.prototype._subscribeDataSources = function () {
        var _this = this;
        this._dataSources().forEach(function (dataSource) {
            _this.initDataSource(dataSource);
        });
        this._dataSourcesSubscription = _knockout_utils_1.subscribeArrayChange(this._dataSources, {
            added: function (ds) { return _this.initDataSource(ds); },
            deleted: function (ds) { return _this.clearFieldsCache(ds.componentName()); }
        });
        this._disposables.push(this._dataSourcesSubscription);
    };
    DataSourceBrowser.prototype._unsubscribeDataSources = function () {
        var _this = this;
        if (this._dataSourcesSubscription) {
            this._disposables.splice(this._disposables.indexOf(this._dataSourcesSubscription), 1);
            this._dataSourcesSubscription.dispose();
            this._dataSourcesSubscription = undefined;
            this._dataSources().forEach(function (dataSource) {
                _this.clearFieldsCache(dataSource.componentName());
            });
        }
    };
    DataSourceBrowser.prototype.dispose = function () {
        this.dynamicLookUpValuesLoaded = null;
        this._disposables.forEach(function (d) {
            d.dispose();
        });
    };
    return DataSourceBrowser;
}());
exports.DataSourceBrowser = DataSourceBrowser;
function isNonCollectionDataField(dataField) {
    if (!dataField)
        return;
    var nodeType = ko.unwrap(dataField.nodeType);
    var childNodes = ko.unwrap(dataField.childNodes);
    return !(nodeType === 'DataMember' && childNodes && childNodes.length === 0);
}
exports.isNonCollectionDataField = isNonCollectionDataField;
function getDataFields(fieldsNames, dataSource, dataMember, dataFieldProvider) {
    var deferred = $.Deferred();
    var promises = fieldsNames.map(function (field) {
        return dataFieldProvider.findDataField(dataSource, dataMember, field, true);
    });
    $.when.apply($, promises).done(function () {
        var fields = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            fields[_i] = arguments[_i];
        }
        deferred.resolve(fields);
    });
    return deferred.promise();
}
exports.getDataFields = getDataFields;


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var isoDataTimePattern = /^\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d/;
function tryConvertToDateTime(value) {
    if (typeof (value) === 'string' && isoDataTimePattern.test(value)) {
        return toUtcDate(value);
    }
    return value;
}
exports.tryConvertToDateTime = tryConvertToDateTime;
function patchDateTime(storageDTO) {
    var _tryPatchDateTime = function (obj, property) {
        obj[property] = tryConvertToDateTime(obj[property]);
    };
    for (var sliceId in storageDTO.Slices) {
        var slice = storageDTO.Slices[sliceId];
        for (var keyIds in slice.Data) {
            var dataPoint = slice.Data[keyIds];
            for (var valueId in dataPoint) {
                _tryPatchDateTime(dataPoint, valueId);
            }
        }
    }
    for (var dataItemName in storageDTO.EncodeMaps) {
        var uniqueValues = storageDTO.EncodeMaps[dataItemName];
        var len = uniqueValues.length;
        if (len > 0) {
            for (var i = 0; i < len; i++) {
                _tryPatchDateTime(uniqueValues, i);
            }
        }
    }
}
exports.patchDateTime = patchDateTime;
function toStringArray(value) {
    if (!value) {
        return value;
    }
    if (Array.isArray(value)) {
        return value.map(function (v) { return toStringArray(v); });
    }
    else if (value instanceof Date) {
        return fromUtcDateToString(value);
    }
    else if (value instanceof Object) {
        for (var key in value) {
            value[key] = toStringArray(value[key]);
        }
    }
    return value;
}
exports.toStringArray = toStringArray;
function toUtcDate(value) {
    var hasDateZone = value[value.length - 3] == ':' && ['+', '-'].indexOf(value[value.length - 6]) !== -1;
    if (value[value.length - 1] !== 'Z' && !hasDateZone) {
        value += 'Z';
    }
    var date = new Date(value);
    return new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
}
exports.toUtcDate = toUtcDate;
function fromUtcDateToString(date) {
    var toString = function (n, useThreeDigits) {
        if (useThreeDigits === void 0) { useThreeDigits = false; }
        var s = n.toString();
        if (useThreeDigits) {
            return s.length == 2 ? '0' + s : (s.length == 1 ? '00' + s : s);
        }
        else {
            return s.length == 1 ? '0' + s : s;
        }
    };
    return date.getFullYear() + '-' +
        toString(date.getMonth() + 1) + '-' +
        toString(date.getDate()) + 'T' +
        toString(date.getHours()) + ':' +
        toString(date.getMinutes()) + ':' +
        toString(date.getSeconds()) + '.' +
        toString(date.getMilliseconds(), true);
}
exports.fromUtcDateToString = fromUtcDateToString;
function serializeDate(date) {
    return date instanceof Date ? fromUtcDateToString(date) : String(date);
}
exports.serializeDate = serializeDate;
function clone(date) {
    return new Date(date.valueOf());
}
exports.clone = clone;
function addDays(date, days) {
    date.setDate(date.getDate() + days);
}
exports.addDays = addDays;
function getIsStartOfFirstWeek(calendarWeekRule) {
    switch (calendarWeekRule) {
        case 'FirstDay':
            return function (date) { return isStartOfFirstWeek(date, 1); };
        case 'FirstFourDayWeek':
            return function (date) { return isStartOfFirstWeek(date, 4); };
        case 'FirstFullWeek':
            return function (date) { return isStartOfFirstWeek(date, 7); };
    }
}
exports.getIsStartOfFirstWeek = getIsStartOfFirstWeek;
function isStartOfFirstWeek(weekStart, numberOfWeekDaysNeededInYear) {
    var month = weekStart.getMonth();
    var day = weekStart.getDate();
    return month === 11 && day >= 25 + numberOfWeekDaysNeededInYear ||
        month === 0 && day <= numberOfWeekDaysNeededInYear;
}
function divideIntoWeeks(start, end, firstDayOfWeek, calendarWeekRule, add) {
    if (start > end)
        throw new Error("'start' must be less or equal to 'end'.");
    if (start.getMonth() === 0 && start.getDate() === 1) {
        var firstWeekStart = getStartOfFirstWeek(start.getFullYear(), firstDayOfWeek, calendarWeekRule);
        var secondWeekStart = clone(firstWeekStart);
        addDays(secondWeekStart, 7);
        if (firstWeekStart < start && secondWeekStart > start) {
            add(clone(start));
            start = secondWeekStart;
        }
        else if (firstWeekStart > start) {
            add(clone(start));
            start = firstWeekStart;
        }
        if (start > end)
            return;
    }
    var current = clone(start);
    var isInFirstWeek = getIsStartOfFirstWeek(calendarWeekRule);
    while (current < end) {
        add(clone(current));
        if (current.getMonth() === 11 &&
            current.getDate() !== 25 &&
            isInFirstWeek(current))
            add(new Date(current.getFullYear() + 1, 0, 1));
        addDays(current, 7);
    }
    add(clone(end));
}
exports.divideIntoWeeks = divideIntoWeeks;
function getStartOfFirstWeek(year, firstDayOfWeek, calendarWeekRule) {
    var current = new Date(year, 0, 1);
    addDays(current, -7);
    while (current.getDay() !== firstDayOfWeek)
        addDays(current, 1);
    var isStartOfFirstWeek = getIsStartOfFirstWeek(calendarWeekRule);
    while (!isStartOfFirstWeek(current))
        addDays(current, 7);
    return current;
}
exports.getStartOfFirstWeek = getStartOfFirstWeek;


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var serializable_model_1 = __webpack_require__(5);
var _measure_calc_window_definition_1 = __webpack_require__(51);
var MeasureCalculationWindowDefinition = (function (_super) {
    __extends(MeasureCalculationWindowDefinition, _super);
    function MeasureCalculationWindowDefinition(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson || {}, serializer) || this;
    }
    MeasureCalculationWindowDefinition.prototype.getInfo = function () {
        return _measure_calc_window_definition_1.measureCalculationWindowDefinitionSerializationsInfo;
    };
    return MeasureCalculationWindowDefinition;
}(serializable_model_1.SerializableModel));
exports.MeasureCalculationWindowDefinition = MeasureCalculationWindowDefinition;
exports.windowDefinitionsTypesMap = {};


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var _data_field_1 = __webpack_require__(14);
var _knockout_utils_1 = __webpack_require__(17);
var data_item_1 = __webpack_require__(8);
var _dimension_1 = __webpack_require__(71);
var Dimension = (function (_super) {
    __extends(Dimension, _super);
    function Dimension(dataItemJSON, serializer) {
        if (dataItemJSON === void 0) { dataItemJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, dataItemJSON, serializer) || this;
        _this.realSortMode = ko.computed({
            read: function () {
                if (_this.sortMeasure())
                    return _this.sortMeasure();
                var valueModes = ['DXDisplayText', 'DXValue', 'DXID', 'DXKey'];
                var actualModes = ['DisplayText', 'Value', 'ID', 'Key'];
                return valueModes[actualModes.indexOf(_this.sortMode())];
            },
            write: function (val) {
                var valueModes = ['DXDisplayText', 'DXValue', 'DXID', 'DXKey'];
                var actualModes = ['DisplayText', 'Value', 'ID', 'Key'];
                if (valueModes.indexOf(val) !== -1) {
                    _this.sortMode(actualModes[valueModes.indexOf(val)]);
                    _this.sortMeasure(null);
                }
                else {
                    _this.sortMode('Value');
                    _this.sortMeasure(val);
                }
            }
        });
        _this._actualDateTimeGroupInterval = _knockout_utils_1.safeComputed({ dateTimeGroupInterval: _this.dateTimeGroupInterval, dataMember: _this.dataMember }, function (args) {
            return _data_field_1.DataField.isOlap(args.dataMember) ? 'None' : args.dateTimeGroupInterval;
        });
        return _this;
    }
    Dimension.prototype.getInfo = function () {
        return _dimension_1.dimensionItemSerializationsInfo;
    };
    Dimension.prototype.grabFrom = function (dataItem) {
        _super.prototype.grabFrom.call(this, dataItem);
        if (!(dataItem instanceof Dimension))
            return;
        this.sortOrder(dataItem.sortOrder());
        this.sortMeasure(dataItem.sortMeasure());
        this.sortMode(dataItem.sortMode());
        this.dateTimeGroupInterval(dataItem.dateTimeGroupInterval());
        this.textGroupInterval(dataItem.textGroupInterval());
        this.isDiscreteNumericScale(dataItem.isDiscreteNumericScale());
        this.groupChildValues(dataItem.groupChildValues());
        this.coloringMode(dataItem.coloringMode());
        this.topNOptionsEnabled(dataItem.topNOptionsEnabled());
        this.topNOptionsMode(dataItem.topNOptionsMode());
        this.topNOptionsCount(dataItem.topNOptionsCount());
        this.topNOptionsMeasureName(dataItem.topNOptionsMeasureName());
        this.topNOptionsShowOthers(dataItem.topNOptionsShowOthers());
        this.groupIndex(dataItem.groupIndex());
    };
    Dimension.prototype.isDefinitionEquals = function (dataItem) {
        return _super.prototype.isDefinitionEquals.call(this, dataItem) && (dataItem instanceof Dimension) &&
            this.dateTimeGroupInterval() === dataItem.dateTimeGroupInterval() && this.textGroupInterval() == dataItem.textGroupInterval();
    };
    Dimension.prototype._getDefaultItemType = function () {
        return 'Dimension';
    };
    return Dimension;
}(data_item_1.DataItem));
exports.Dimension = Dimension;


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
var _data_dashboard_item_1 = __webpack_require__(26);
var interactivity_options_1 = __webpack_require__(32);
var custom_shape_file_1 = __webpack_require__(501);
var map_legend_1 = __webpack_require__(503);
var map_viewport_1 = __webpack_require__(504);
exports.area = {
    propertyName: 'area', modelName: '@ShapefileArea', defaultVal: 'WorldCountries', values: {
        'WorldCountries': 'DashboardWebStringId.Map.Area.WorldCountries',
        'Europe': 'DashboardWebStringId.Map.Area.Europe',
        'Asia': 'DashboardWebStringId.Map.Area.Asia',
        'NorthAmerica': 'DashboardWebStringId.Map.Area.NorthAmerica',
        'SouthAmerica': 'DashboardWebStringId.Map.Area.SouthAmerica',
        'Africa': 'DashboardWebStringId.Map.Area.Africa',
        'USA': 'DashboardWebStringId.Map.Area.USA',
        'Canada': 'DashboardWebStringId.Map.Area.Canada',
        'Custom': 'DashboardWebStringId.Map.Area.Custom'
    }, category: _base_metadata_1.PropertyCategory.Map
};
exports.colorLegend = { propertyName: 'legend', modelName: 'MapLegend', displayName: 'DashboardWebStringId.Chart.Legend', type: map_legend_1.MapLegend };
exports.weightedLegend = { propertyName: 'weightedLegend', modelName: 'WeightedLegend', displayName: 'DashboardWebStringId.AccordionTab.WeightedLegend', type: map_legend_1.WeightedLegend };
exports.customShapefile = { propertyName: 'customShapefile', modelName: 'CustomShapefile', type: custom_shape_file_1.CustomShapefile };
exports.viewport = { propertyName: 'viewport', modelName: 'ViewArea', displayName: 'DashboardWebStringId.Map.Viewport', type: map_viewport_1.MapViewport };
exports.tooltipMeasures = { propertyName: '__tooltipMeasures', modelName: 'TooltipMeasures', displayName: 'DashboardWebStringId.Binding.TooltipMeasures', array: true };
exports.lockNavigation = {
    propertyName: 'lockNavigation', modelName: '@LockNavigation', displayName: 'DashboardWebStringId.MapLockNavigation', defaultVal: false, simpleFormAdapterItem: 'buttonGroupEditor', valuesArray: [
        { value: true, displayValue: 'DashboardWebStringId.MapLockNavigationLocked' },
        { value: false, displayValue: 'DashboardWebStringId.MapLockNavigationUnlocked' }
    ], from: _base_metadata_1.parseBool, category: _base_metadata_1.PropertyCategory.Map
};
exports.shapeTitleAttributeName = { propertyName: 'shapeTitleAttributeName', modelName: '@ShapeTitleAttributeName', displayName: 'DashboardWebStringId.Map.ShapeTitleAttribute', defaultVal: '', category: _base_metadata_1.PropertyCategory.Map };
exports.mapDashboardItemSerializationsInfo = _data_dashboard_item_1.dataDashboardItemSerializationsInfo.concat([exports.area, exports.customShapefile, exports.viewport, exports.tooltipMeasures, exports.lockNavigation, exports.shapeTitleAttributeName, interactivity_options_1._masterFilterInteractivityOptionsMeta]);


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var data_item_1 = __webpack_require__(8);
var _data_field_1 = __webpack_require__(14);
var _undo_engine_helper_1 = __webpack_require__(27);
var _display_name_provider_1 = __webpack_require__(24);
var _data_item_surface_1 = __webpack_require__(227);
var SingleDataItemSurface = (function () {
    function SingleDataItemSurface(options) {
        var _this = this;
        this._disposables = [];
        this.supportGroups = false;
        this.removeDataItem = function () {
            _this._removeDataItem();
        };
        this.dataItemDisplayNameProvider = function (dataItem) {
            return _display_name_provider_1.getDataItemDisplayName(_this.itemSurface._dataSourceBrowser, _this.itemSurface.dashboardItem, dataItem);
        };
        this.selectDataItem = function () {
            _this.dataItemSurface(new _data_item_surface_1.DataItemSurface(_this.dataItemLink, _this.sectionInfo.bindingProperty, _this.itemSurface.dashboardItem, _this.itemSurface._dataSourceBrowser, _this.itemSurface.propertiesController, true, _this.fieldConstraint));
            _this.dataItemSurface().newItemCreated.add(function (model) {
                _this.selectDataItem();
            });
            _this.itemSurface.propertiesController.mainModel({
                data: _this.dataItemSurface()
            });
        };
        this.dataItemSurface = ko.observable();
        this.items = ko.observableArray([]);
        this.template = 'dx-dashboard-data-item-single';
        this.itemSurface = options.itemSurface;
        this.sectionInfo = options.sectionInfo;
        this.warning = options.warning;
        this.fieldConstraint = options.fieldConstraint;
        this.dataItemLink = this.itemSurface.dashboardItem[this.sectionInfo.bindingProperty.propertyName];
        this._disposables.push(ko.computed(function () {
            if (_this.dataItemLink.uniqueName()) {
                _this.items([_this.dataItemLink]);
            }
        }));
        this._disposables.push(this.items.subscribe(function (newValue) {
            if (!newValue.length) {
                _this.dataItemLink.uniqueName(undefined);
            }
        }));
    }
    SingleDataItemSurface.prototype._removeDataItem = function () {
        if (!!this.dataItemLink.dataItem()) {
            this.itemSurface.propertiesController.mainModel(null);
            var dataItem = this.dataItemLink.dataItem();
            this.dataItemLink.uniqueName(undefined);
            this.itemSurface.dashboardItem._removeDataItem(dataItem);
        }
    };
    SingleDataItemSurface.prototype.relocateItem = function (item, placeholderIndex) {
        var _this = this;
        var dataItem;
        if (item instanceof data_item_1.DataItemLink) {
            dataItem = item.dataItem();
        }
        else if (item['_getBindingModel']) {
            var x = item;
            var filledBinding = x._getBindingModel().filter(function (b) { return !!item[b.propertyName].uniqueName(); })[0];
            dataItem = item[filledBinding.propertyName].dataItem();
        }
        this.itemSurface
            ._dataSourceBrowser.findDataField(this.itemSurface.dashboardItem.dataSource(), this.itemSurface.dashboardItem.dataMember(), dataItem.dataMember())
            .done(function (dataField) {
            var newDataItem = _this.itemSurface.dashboardItem._createDataItem(dataField, _this.sectionInfo.bindingProperty);
            newDataItem.grabFrom(dataItem);
            _this.itemSurface.dashboardItem._removeDataItem(dataItem);
            _this.dataItemLink.dataItem(newDataItem);
        });
    };
    SingleDataItemSurface.prototype.isOlap = function () {
        return _data_field_1.DataField.isOlap(this.dataItemLink.dataItem() && this.dataItemLink.dataItem().dataMember());
    };
    SingleDataItemSurface.prototype.errorFactory = function (link) {
        var linkErrorState = ko.observable(false);
        if (link.dataItem()) {
            this.itemSurface._dataSourceBrowser.findDataField(this.itemSurface.dashboardItem.dataSource(), this.itemSurface.dashboardItem.dataMember(), link.dataItem().dataMember()).done(function (result) {
                linkErrorState(!result);
            });
        }
        return linkErrorState;
    };
    SingleDataItemSurface.prototype.dispose = function () {
        this._disposables.forEach(function (d) {
            d.dispose();
        });
    };
    __decorate([
        _undo_engine_helper_1.wrapWithUndoRedo
    ], SingleDataItemSurface.prototype, "_removeDataItem", null);
    __decorate([
        _undo_engine_helper_1.wrapWithUndoRedo
    ], SingleDataItemSurface.prototype, "relocateItem", null);
    return SingleDataItemSurface;
}());
exports.SingleDataItemSurface = SingleDataItemSurface;


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ClassMemberType = {
    method: 'method',
    property: 'property'
};
function obsoleteWarn(memberType, oldMemberName, newMemberName) {
    return "The " + oldMemberName + " " + memberType + " is obsolete." + (newMemberName ? " Use the " + newMemberName + " " + memberType + " instead." : '');
}
function defineObsoleteProperty(info) {
    Object.defineProperty(info.target, info.memberName, {
        get: function () {
            if (!info.ignoreWarmMessage) {
                var message = info.warmMessage ? info.warmMessage : obsoleteWarn(exports.ClassMemberType.property, info.oldMemberDisplayName, info.newMemberDisplayName);
                console.warn(message);
            }
            return info.action();
        },
        enumerable: false,
        configurable: true
    });
}
exports.defineObsoleteProperty = defineObsoleteProperty;
function defineClassMoved(className, sourceNamespace, destNamespace, sourceNamespaceName, destNamespaceName, additionalInfo) {
    defineObsoleteProperty({
        target: sourceNamespace,
        memberName: className,
        warmMessage: 'The ' + className + ' class was moved from the ' + sourceNamespaceName + ' to the ' + destNamespaceName + '. ' + additionalInfo,
        action: function () { return destNamespace[className]; }
    });
}
exports.defineClassMoved = defineClassMoved;
function defineObsoleteMethod(info) {
    info.target[info.memberName] = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (!info.ignoreWarmMessage) {
            var message = info.warmMessage ? info.warmMessage : obsoleteWarn(exports.ClassMemberType.method, info.oldMemberDisplayName, info.newMemberDisplayName);
            console.warn(message);
        }
        return info.action.apply(info.target, args);
    };
}
exports.defineObsoleteMethod = defineObsoleteMethod;


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = __webpack_require__(381);
var dateUtils = __webpack_require__(382);
var string_1 = __webpack_require__(30);
var formatHelper = __webpack_require__(383);
exports.formatHelper = formatHelper;
var dateLocalization = __webpack_require__(235);
var numberLocalization = __webpack_require__(384);
var _utils_1 = __webpack_require__(3);
var _default_1 = __webpack_require__(6);
exports.invariantCurrencyIdentifier = 'INVARIANT';
exports.invariantCurrencySymbol = '¤';
numberLocalization.inject({
    format: function (value, formatConfig) {
        if (formatConfig === void 0) { formatConfig = {}; }
        var numberStr = (+value).toString(10);
        if ((/e/).test(numberStr)) {
            console.warn('The number ' + numberStr + ' out of (1e21, 1e-7) range can`t be formatted. The number will be displayed as is.');
            return value.toString();
        }
        var invariantCurrency = formatConfig.currency === exports.invariantCurrencyIdentifier;
        if (invariantCurrency) {
            formatConfig.currency = 'USD';
        }
        var formattedValue = this.callBase.apply(this, arguments);
        if (formattedValue != null && formatConfig.currency != 'default') {
            var currencySymbol = '';
            var symbolAltNarrow = '';
            try {
                var symbolInfo = numberLocalization.getCurrencySymbol(formatConfig.currency);
                currencySymbol = symbolInfo['symbol'];
                symbolAltNarrow = symbolInfo['symbol-alt-narrow'];
            }
            catch (_a) { }
            try {
                var symbolInfo = numberLocalization._getCurrencySymbolInfo(formatConfig.currency);
                currencySymbol = symbolInfo.symbol;
                symbolAltNarrow = symbolInfo.symbol;
            }
            catch (_b) { }
            if (invariantCurrency) {
                symbolAltNarrow = exports.invariantCurrencySymbol;
                formatConfig.currency = exports.invariantCurrencyIdentifier;
            }
            if (!!symbolAltNarrow && symbolAltNarrow !== currencySymbol) {
                return formattedValue.replace(currencySymbol, symbolAltNarrow);
            }
        }
        return formattedValue;
    }
});
formatHelper.inject({
    defaultLargeNumberFormatPostfixes: {
        1: 'DashboardStringId.NumericFormatUnitSymbolThousands',
        2: 'DashboardStringId.NumericFormatUnitSymbolMillions',
        3: 'DashboardStringId.NumericFormatUnitSymbolBillions',
        4: 'T'
    },
    _accountingStyle: false,
    defaultQuarterFormat: function () { return _default_1.getLocalizationById('DashboardStringId.DateTimeQuarterFormat'); },
    romanDigits: ['I', 'II', 'III', 'IV'],
    format: function (value, format) {
        if (_utils_1.isPlainObject(format) && format.format) {
            if (format.dateType)
                return this._formatDateEx(value, format);
            else if (_utils_1.type.isNumeric(value) && isFinite(value))
                return this._formatNumberEx(value, format);
        }
        return this.callBase.apply(this, arguments);
    },
    _getQuarterString: function (date, format) {
        var quarter = dateUtils.getQuarter(date.getMonth());
        switch (format) {
            case 'q':
                return this.romanDigits[quarter];
            case 'qq':
                return string_1.format(this.defaultQuarterFormat(), this.romanDigits[quarter]);
            case 'Q':
                return (quarter + 1).toString();
            case 'QQ':
                return string_1.format(this.defaultQuarterFormat(), (quarter + 1).toString());
        }
        return '';
    },
    _formatDateEx: function (value, formatInfo) {
        var that = this, format = formatInfo.format.toLowerCase(), dateType = formatInfo.dateType, time, index, dateStr;
        if (!_utils_1.type.isDefined(value)) {
            return '';
        }
        if (dateType !== 'num' || format === 'dayofweek') {
            switch (format) {
                case 'monthyear':
                    return dateLocalization.format(value, 'monthandyear');
                case 'quarteryear':
                    return that._getQuarterString(value, 'QQ') + ' ' + value.getFullYear();
                case 'daymonthyear':
                case 'weekyear':
                    return dateLocalization.format(value, dateType + 'Date');
                case 'datehour':
                    time = new Date(value.getTime());
                    time.setMinutes(0);
                    dateStr = dateType === 'timeOnly' ? '' : dateLocalization.format(value, dateType + 'Date');
                    return dateType === 'timeOnly' ? dateLocalization.format(time, 'shorttime') : dateStr + ' ' + dateLocalization.format(time, 'shorttime');
                case 'datehourminute':
                    dateStr = dateType === 'timeOnly' ? '' : dateLocalization.format(value, dateType + 'Date');
                    return dateType === 'timeOnly' ? dateLocalization.format(value, 'shorttime') : dateStr + ' ' + dateLocalization.format(value, 'shorttime');
                case 'datehourminutesecond':
                    dateStr = dateType === 'timeOnly' ? '' : dateLocalization.format(value, dateType + 'Date');
                    return dateType === 'timeOnly' ? dateLocalization.format(value, 'longtime') : dateStr + ' ' + dateLocalization.format(value, 'longtime');
                case 'year':
                    dateStr = value.toString();
                    return (dateType === 'abbr') ? dateStr.slice(2, 4) : dateStr;
                case 'dateyear':
                    return (dateType === 'abbr') ? dateLocalization.format(value, 'shortyear') : dateLocalization.format(value, 'year');
                case 'quarter':
                    return string_1.format(that.defaultQuarterFormat(), value.toString());
                case 'month':
                    index = value - 1;
                    return dateLocalization.getMonthNames(dateType === 'abbr' && 'abbreviated')[index];
                case 'hour':
                    if (dateType === 'long') {
                        time = new Date();
                        time.setHours(value);
                        time.setMinutes(0);
                        return dateLocalization.format(time, 'shorttime');
                    }
                    return value.toString();
                case 'dayofweek':
                    index = _utils_1.type.isString(value) ? ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].indexOf(value) : value;
                    if (dateType !== 'num') {
                        return dateLocalization.getDayNames(dateType === 'abbr' && 'abbreviated')[index];
                    }
                    return ((index - dateLocalization.firstDayOfWeekIndex() + 1 + 7) % 8).toString();
                default:
                    return value.toString();
            }
        }
        else {
            return value.toString();
        }
    },
    _getMinimalPossibleValue: function (formatType, precision) {
        var maxPrecision = precision + 1;
        if (formatType === 'percent') {
            maxPrecision += 2;
        }
        return Math.pow(10, -maxPrecision);
    },
    _formatNumberEx: function (value, formatInfo) {
        var that = this, formatType = formatInfo.format.toLowerCase(), formatSettings = that._getUnitFormatSettings(value, formatInfo), result = '', config;
        if (!_utils_1.type.isDefined(value)) {
            return '';
        }
        if (['currency', 'percent', 'fixedpoint'].indexOf(formatType) !== -1
            && formatSettings.precision >= 0
            && Math.abs(value) < that._getMinimalPossibleValue(formatType, formatSettings.precision)) {
            value = 0;
        }
        value = that._getNumberByPower(value, formatSettings.unitPower, 1000);
        if (['fixedpoint', 'currency', 'percent'].indexOf(formatType) !== -1) {
            config = that._generateNumericFormatConfig(__assign({}, formatSettings, { significantDigits: formatInfo.significantDigits, signsAfterPointCount: that._countSignsAfterPoint(value, formatType), formatType: formatType }), value);
        }
        switch (formatType) {
            case 'decimal':
                result = numberLocalization.format(value, that._normalizeFormatConfig(formatType, formatSettings.precision, value));
                break;
            case 'fixedpoint':
                result = numberLocalization.format(value, config);
                break;
            case 'currency':
                config.currency = formatInfo.currency || config_1.default().defaultCurrency;
                if (config.style === 'accounting' && !this._accountingStyle)
                    delete config.style;
                result = numberLocalization.format(value, config);
                break;
            case 'percent':
                config.style = 'percent';
                result = numberLocalization.format(value, config);
                break;
            case 'exponential':
                return numberLocalization.format(value, { type: 'exponential', precision: formatSettings.precision });
            default:
                throw "Illegal numeric format: '" + formatType + "'";
        }
        result = that._insertUnitPostfix(result, formatSettings.unitPower);
        return (formatInfo.plus && value > 0 ? '+' : '') + result;
    },
    _getUnitFormatSettings: function (value, formatInfo) {
        var unitPower = formatInfo.unitPower || 0, precision = formatInfo.precision || 0, includeGroupSeparator = formatInfo.includeGroupSeparator || false, showTrailingZeros = formatInfo.showTrailingZeros === undefined ? true : formatInfo.showTrailingZeros, significantDigits = formatInfo.significantDigits || 1, absValue;
        if (unitPower.toString().toLowerCase() === 'auto') {
            showTrailingZeros = false;
            absValue = Math.abs(value);
            if (significantDigits < 1)
                significantDigits = 1;
            if (absValue >= 1000000000) {
                unitPower = 3;
                absValue /= 1000000000;
            }
            else if (absValue >= 1000000) {
                unitPower = 2;
                absValue /= 1000000;
            }
            else if (absValue >= 1000) {
                unitPower = 1;
                absValue /= 1000;
            }
            else
                unitPower = 0;
            if (absValue === 0)
                precision = 0;
            else if (absValue < 1) {
                precision = significantDigits;
                var smallValue = Math.pow(10, -significantDigits);
                while (absValue < smallValue) {
                    smallValue /= 10;
                    precision++;
                }
            }
            else {
                if (absValue >= 100)
                    precision = significantDigits - 3;
                else if (absValue >= 10)
                    precision = significantDigits - 2;
                else
                    precision = significantDigits - 1;
            }
        }
        if (precision < 0) {
            precision = 0;
        }
        return {
            unitPower: unitPower,
            precision: precision,
            showTrailingZeros: showTrailingZeros,
            includeGroupSeparator: includeGroupSeparator
        };
    },
    _insertUnitPostfix: function (formattedNumber, unitPower) {
        var lastDigitReg = /(\d)([^\d]*)$/;
        return unitPower > 0
            ? formattedNumber.replace(lastDigitReg, '$1' + _default_1.getLocalizationById(this.defaultLargeNumberFormatPostfixes[unitPower]) + '$2')
            : formattedNumber;
    },
    _generateNumericFormatConfig: function (settings, value) {
        var that = this, config;
        if (!settings.showTrailingZeros) {
            settings.precision = Math.min(settings.precision, settings.signsAfterPointCount);
        }
        config = that._normalizeFormatConfig(settings.formatType, settings.precision, value);
        config.useGrouping = settings.includeGroupSeparator;
        if (settings.significantDigits && value) {
            _utils_1.extend(config, {
                minimumSignificantDigits: settings.showTrailingZeros ? settings.significantDigits : 1,
                maximumSignificantDigits: settings.significantDigits
            });
        }
        return config;
    },
    _countSignsAfterPoint: function (num, formatType) {
        var strNum = String(num), pointPos = strNum.indexOf('.');
        if (formatType == 'percent') {
            pointPos += 2;
        }
        if (pointPos < 0) {
            return 0;
        }
        return strNum.substr(pointPos + 1, strNum.length).length;
    },
    _excludeTrailingZeros: function (strValue, floatingSymbol) {
        var floatingIndex = strValue.indexOf(floatingSymbol), stopIndex, i;
        if (floatingIndex < 0)
            return strValue;
        stopIndex = strValue.length;
        for (i = stopIndex - 1; i >= floatingIndex && (strValue[i] === '0' || i === floatingIndex); i--) {
            stopIndex--;
        }
        return strValue.substring(0, stopIndex);
    },
    _normalizeFormatConfig: function (format, precision, value) {
        var config = numberLocalization._normalizeFormatConfig(format, {
            precision: precision
        }, value);
        if (format === 'decimal') {
            config = __assign({}, config, {
                minimumIntegerDigits: precision || 1,
                useGrouping: false,
                maximumFractionDigits: 0,
                round: value < 0 ? 'ceil' : 'floor'
            });
        }
        else {
            config = __assign({}, config, {
                minimumFractionDigits: precision,
                maximumFractionDigits: precision
            });
        }
        return config;
    },
    _getNumberByPower: function (number, power, base) {
        var result = number;
        while (power > 0) {
            result = result / base;
            power--;
        }
        while (power < 0) {
            result = result * base;
            power++;
        }
        return result;
    }
});


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var _render_helper_1 = __webpack_require__(28);
var _localization_ids_1 = __webpack_require__(21);
var _localizer_1 = __webpack_require__(16);
var _utils_1 = __webpack_require__(3);
var _z_index_1 = __webpack_require__(57);
exports.DATA_POSTFIX = '_Data';
exports.DEFAULT_SUBTITLE_SEPARATOR = ' - ';
var dataControllerBase = (function () {
    function dataControllerBase(options) {
        this.deltaIndicatorTypes = ['none', 'up', 'down', 'warning'];
        this.multiData = options ? options.multiData : undefined;
        this.viewModel = options ? options.viewModel : undefined;
        this.cfModel = options ? options.cfModel : undefined;
        this.drillDownState = options ? options.drillDownState : undefined;
        this.useNeutralFilterMode = options ? options.useNeutralFilterMode : undefined;
    }
    dataControllerBase.prototype.isMultiselectable = function () {
        return false;
    };
    dataControllerBase.prototype.update = function (selectedValues, encodeHtml) {
    };
    dataControllerBase.prototype.getTitle = function (axisPoint, separator, saveOrder) {
        var axisName = axisPoint.getAxisName(), values;
        if (this.drillDownState[axisName]) {
            var text = axisPoint.getDisplayText();
            return text == undefined ? '' : text;
        }
        else {
            values = axisPoint.getDisplayPath();
            if (!saveOrder) {
                values = values.reverse();
            }
            return values.join(separator ? separator : exports.DEFAULT_SUBTITLE_SEPARATOR);
        }
    };
    dataControllerBase.prototype.getAxisPointsHash = function () {
    };
    dataControllerBase.prototype._getMeasureValueByAxisPoints = function (axisPoints, cfMeasureId) {
        var slice = this._getSlice(axisPoints);
        return slice.getConditionalFormattingMeasureValue(cfMeasureId);
    };
    dataControllerBase.prototype._getSlice = function (axisPoints) {
        var slice = this.multiData;
        $.each(axisPoints, function (_, axisPoint) {
            slice = slice.getSlice(axisPoint);
        });
        return slice;
    };
    dataControllerBase.prototype._getZeroPosition = function (zeroPositionMeasureId, columnAxisName, rowAxisName) {
        var that = this, currentZeroPosition, zeroPosition, columnRootPoint, rowRootPoint;
        columnRootPoint = that.multiData.getAxis(columnAxisName).getRootPoint();
        rowRootPoint = that.multiData.getAxis(rowAxisName).getRootPoint();
        currentZeroPosition = that._getMeasureValueByAxisPoints([columnRootPoint, rowRootPoint], zeroPositionMeasureId);
        if (currentZeroPosition !== undefined && currentZeroPosition !== null)
            zeroPosition = currentZeroPosition;
        return zeroPosition;
    };
    dataControllerBase.prototype._getStyleIndexes = function (rule, cellInfo, points) {
    };
    dataControllerBase.prototype._getStyleSettingsInfoCore = function (cellInfo, rules, columnAxisName, rowAxisName) {
        var that = this, currentStyleIndexes = [], uniqueIndexes = [], styleAndRuleMappingTable = {}, ruleIndex, currentNormalizedValue, normalizedValue, zeroPosition, styleSettingsInfo, points = [];
        if (rules.length > 0) {
            $.each(rules, function (_, rule) {
                currentStyleIndexes = that._getStyleIndexes(rule, cellInfo, points);
                if (currentStyleIndexes.length > 0) {
                    ruleIndex = that.cfModel.RuleModels ? that.cfModel.RuleModels.indexOf(rule) : -1;
                    $.each(currentStyleIndexes, function (_, styleIndex) {
                        if (uniqueIndexes[styleIndex] === undefined) {
                            uniqueIndexes.push(styleIndex);
                            styleAndRuleMappingTable[styleIndex] = ruleIndex;
                        }
                    });
                }
                currentNormalizedValue = that._getMeasureValueByAxisPoints(points, rule.NormalizedValueMeasureId);
                if (currentNormalizedValue !== undefined && currentNormalizedValue !== null) {
                    normalizedValue = currentNormalizedValue;
                    zeroPosition = that._getZeroPosition(rule.ZeroPositionMeasureId, columnAxisName, rowAxisName);
                }
            });
            styleSettingsInfo = {
                styleIndexes: uniqueIndexes,
                styleAndRuleMappingTable: styleAndRuleMappingTable
            };
            if (normalizedValue !== undefined && zeroPosition !== undefined) {
                styleSettingsInfo.normalizedValue = normalizedValue;
                styleSettingsInfo.zeroPosition = zeroPosition;
            }
        }
        return styleSettingsInfo;
    };
    dataControllerBase.prototype._generateSparklineOptions = function (data, options, format) {
        return {
            dataSource: data,
            type: options.ViewType.toLowerCase(),
            onIncidentOccurred: _render_helper_1.RenderHelper.widgetIncidentOccurred,
            showMinMax: options.HighlightMinMaxPoints,
            showFirstLast: options.HighlightStartEndPoints,
            tooltip: {
                _justify: true,
                container: _utils_1.tooltipContainerSelector,
                customizeTooltip: function () {
                    var startText = _localizer_1.localizer.getString(_localization_ids_1.localizationId.sparkline.TooltipStartValue), endText = _localizer_1.localizer.getString(_localization_ids_1.localizationId.sparkline.TooltipEndValue), minText = _localizer_1.localizer.getString(_localization_ids_1.localizationId.sparkline.TooltipMinValue), maxText = _localizer_1.localizer.getString(_localization_ids_1.localizationId.sparkline.TooltipMaxValue), html = "<table style='border-spacing:0px;'>", template = "</td><td style='width: 15px'></td><td style='text-align: right'>";
                    html += '<tr><td>' + startText + template + format(this.originalFirstValue) + '</td></tr>';
                    html += '<tr><td>' + endText + template + format(this.originalLastValue) + '</td></tr>';
                    html += '<tr><td>' + minText + template + format(this.originalMinValue) + '</td></tr>';
                    html += '<tr><td>' + maxText + template + format(this.originalMaxValue) + '</td></tr>';
                    html += '</table>';
                    return { html: html };
                },
                zIndex: _z_index_1.zIndex.dashboardItemTooltips
            }
        };
    };
    dataControllerBase.prototype._convertIndicatorType = function (type) {
        return this.deltaIndicatorTypes[type];
    };
    dataControllerBase.prototype._findAxisPoint = function (dataId, axisPoint) {
        if (axisPoint) {
            while (axisPoint.getDimension() && axisPoint.getDimension().id !== dataId) {
                axisPoint = axisPoint.getParent();
            }
        }
        return axisPoint && axisPoint.getParent() ? axisPoint : null;
    };
    return dataControllerBase;
}());
exports.dataControllerBase = dataControllerBase;


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _utils_1 = __webpack_require__(3);
function arrayEquals(array1, array2) {
    return _utils_1.arrayEquals(array1, array2);
}
exports.arrayEquals = arrayEquals;
function arrayInsert(a, insertion, position) {
    return a.slice(0, position).concat(insertion, a.slice(position, a.length));
}
exports.arrayInsert = arrayInsert;
function areArraysEqual(arr1, arr2) {
    if (arr1 === void 0) { arr1 = []; }
    if (arr2 === void 0) { arr2 = []; }
    return arr1.length === arr2.length && arr1.every(function (val, index) { return val === arr2[index]; });
}
exports.areArraysEqual = areArraysEqual;
function compareArrays(array1, array2, predicate) {
    if (predicate === void 0) { predicate = function (a, b) { return a === b; }; }
    if (array1.length !== array2.length)
        return false;
    for (var i = 0; i < array1.length; i++) {
        if (!predicate(array1[i], array2[i]))
            return false;
    }
    return true;
}
exports.compareArrays = compareArrays;
function compareNotOrderedArrays(array1, array2, predicate) {
    if (predicate === void 0) { predicate = function (a, b) { return a === b; }; }
    if (array1.length !== array2.length)
        return false;
    for (var i = 0; i < array1.length; i++) {
        if (!array2.some(function (array) { return predicate(array1[i], array); }))
            return false;
    }
    return true;
}
exports.compareNotOrderedArrays = compareNotOrderedArrays;


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dxColor = __webpack_require__(96);
var ko = __webpack_require__(0);
var _appearance_settings_provider_1 = __webpack_require__(123);
var Color = (function () {
    function Color(colorValue) {
        var a = (colorValue >> 0x18) & 0xff, r = (colorValue >> 0x10) & 0xff, g = (colorValue >> 0x8) & 0xff, b = colorValue & 0xff;
        this._dxColor = new dxColor(this._toRgbaString(r, g, b, a / 255));
    }
    Color.fromArgb = function (alpha, red, green, blue) {
        return new Color(Color.toNumber(alpha, red, green, blue));
    };
    Color.fromRgbaString = function (rgbaColor) {
        return Color.fromDxColor(new dxColor(rgbaColor));
    };
    Color.fromJSON = function (jsonValue) {
        return new Color(parseInt(jsonValue, 10));
    };
    Color.fromAppearance = function (appearanceType) {
        var color = new Color(0);
        color._dxColor = new dxColor(_appearance_settings_provider_1.appearanceSettingsProvider.backAndGradientColorGroupsToBackColor(appearanceType));
        return color;
    };
    Color.fromDxColor = function (dxColor) {
        var color = new Color(0);
        color._dxColor = dxColor;
        return color;
    };
    Color.toNumber = function (alpha, red, green, blue) {
        return ((((alpha * 255 << 0x18) | (red << 0x10) | (green << 0x8)) | blue)) & 0xffffffff;
    };
    Color.toJSON = function (color) {
        return Color.toNumber(color.A, color.R, color.G, color.B);
    };
    Color.contrastColor = function (baseColor) {
        var luminance = 1 - (0.299 * baseColor.R + 0.587 * baseColor.G + 0.114 * baseColor.B) / 255;
        var result = luminance < 0.5 ? 0 : 255;
        return Color.fromArgb(1, result, result, result);
    };
    Color._colorFromModel = function (value) {
        return ko.observable(value ? Color.fromJSON(value) : null);
    };
    Color._colorToModel = function (value) {
        return value ? Color.toJSON(value) : null;
    };
    Color.prototype.toNumber = function () {
        return Color.toNumber(this.A, this.R, this.G, this.B);
    };
    Color.toHex = function (colorValue) {
        return new Color(colorValue).toHex();
    };
    Object.defineProperty(Color.prototype, "A", {
        get: function () { return this._dxColor.a; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Color.prototype, "R", {
        get: function () { return this._dxColor.r; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Color.prototype, "G", {
        get: function () { return this._dxColor.g; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Color.prototype, "B", {
        get: function () { return this._dxColor.b; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Color.prototype, "css", {
        get: function () { return this._toRgbaString(this.R, this.G, this.B, this.A); },
        enumerable: true,
        configurable: true
    });
    Color.prototype.blend = function (blendColor, opacity) {
        return this._dxColor.blend(blendColor._dxColor, opacity);
    };
    Color.prototype.toHex = function () {
        return this._dxColor.toHex();
    };
    Color.prototype._toRgbaString = function (r, g, b, a) {
        return 'rgba(' + [r, g, b, a].join(',') + ')';
    };
    return Color;
}());
exports.Color = Color;


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.measureCalculationWindowDefinitionSerializationsInfo = [];


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
var format_condition_average_1 = __webpack_require__(263);
var format_condition_bar_1 = __webpack_require__(442);
var format_condition_date_occuring_1 = __webpack_require__(444);
var format_condition_expression_1 = __webpack_require__(269);
var format_condition_top_bottom_1 = __webpack_require__(271);
var format_condition_value_1 = __webpack_require__(445);
var format_condition_range_color_bar_1 = __webpack_require__(446);
var format_condition_range_gradient_1 = __webpack_require__(278);
var format_condition_range_gradient_bar_1 = __webpack_require__(451);
var format_condition_range_set_1 = __webpack_require__(273);
exports.formatRuleName = {
    propertyName: 'name', modelName: '@Name', displayName: 'DashboardWebStringId.Options.Caption', simpleFormAdapterItem: 'textBoxEditor'
};
exports.classCaption = {
    propertyName: '_classCaption', displayName: 'DashboardWebStringId.Options.Caption', simpleFormAdapterItem: 'textBoxEditor'
};
exports.enabled = { propertyName: 'enabled', modelName: '@Enabled', displayName: 'DashboardWebStringId.TopNEnabled', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.conditionTypes = [
    { propertyName: 'conditionValue', displayName: 'DashboardStringId.CommandFormatRuleValue', modelName: 'FormatConditionValue', type: format_condition_value_1.FormatConditionValue },
    { propertyName: 'conditionTopBottom', displayName: 'DashboardStringId.CommandFormatRuleTopBottom', modelName: 'FormatConditionTopBottom', type: format_condition_top_bottom_1.FormatConditionTopBottom },
    { propertyName: 'conditionAverage', displayName: 'DashboardStringId.CommandFormatRuleAboveBelowAverage', modelName: 'FormatConditionAverage', type: format_condition_average_1.FormatConditionAverage },
    { propertyName: 'conditionDateOccuring', displayName: 'DashboardStringId.CommandFormatRuleDateOccurring', modelName: 'FormatConditionDateOccurring', type: format_condition_date_occuring_1.FormatConditionDateOccurring },
    { propertyName: 'conditionExpression', displayName: 'DashboardStringId.CommandFormatRuleExpression', modelName: 'FormatConditionExpression', type: format_condition_expression_1.FormatConditionExpression },
    { propertyName: 'conditionBar', displayName: 'DashboardStringId.CommandFormatRuleBar', modelName: 'FormatConditionBar', type: format_condition_bar_1.FormatConditionBar },
    { propertyName: 'conditionColorRangeBar', displayName: 'DashboardStringId.CommandFormatRuleColorRangeBar', modelName: 'FormatConditionColorRangeBar', type: format_condition_range_color_bar_1.FormatConditionColorRangeBar },
    { propertyName: 'conditionGradientRangeBar', displayName: 'DashboardWebStringId.ConditionalFormatting.GradientRangeBar', modelName: 'FormatConditionGradientRangeBar', type: format_condition_range_gradient_bar_1.FormatConditionGradientRangeBar },
    { propertyName: 'conditionRangeGradient', displayName: 'DashboardWebStringId.ConditionalFormatting.RangeGradient', modelName: 'FormatConditionRangeGradient', type: format_condition_range_gradient_1.FormatConditionRangeGradient },
    { propertyName: 'conditionRangeSet', displayName: 'DashboardStringId.CommandFormatRuleRangeSet', modelName: 'FormatConditionRangeSet', type: format_condition_range_set_1.FormatConditionRangeSet }
];
exports.condition = { propertyName: 'condition' };
exports.dashboardItemFormatRuleSerializationsInfo = [_base_metadata_1.itemType, exports.formatRuleName, exports.enabled, exports.condition].concat(exports.conditionTypes);


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var _bar_style_settings_1 = __webpack_require__(440);
var style_settings_base_1 = __webpack_require__(127);
var BarStyleSettings = (function (_super) {
    __extends(BarStyleSettings, _super);
    function BarStyleSettings(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    BarStyleSettings.prototype.getInfo = function () {
        return _bar_style_settings_1.barStyleSettingsSerializationsInfo;
    };
    BarStyleSettings.prototype.equals = function (style) {
        return (style instanceof BarStyleSettings) &&
            this.predefinedColor() === style.predefinedColor() &&
            this.color() == style.color();
    };
    BarStyleSettings.prototype.clone = function () {
        var style = new BarStyleSettings({});
        style.predefinedColor(this.predefinedColor());
        style.color(this.color());
        return style;
    };
    BarStyleSettings.prototype.setSpecificType = function (type) {
        this.predefinedColor(type);
    };
    BarStyleSettings.prototype.init = function () {
        this.predefinedColor('PaleRed');
    };
    return BarStyleSettings;
}(style_settings_base_1.StyleSettingsBase));
exports.BarStyleSettings = BarStyleSettings;


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var format_condition_bar_options_1 = __webpack_require__(441);
var appearance_settings_1 = __webpack_require__(67);
var bar_style_settings_1 = __webpack_require__(53);
var icon_settings_1 = __webpack_require__(73);
exports.negativeInfinity = '-Infinity';
exports.fieldTypes = {
    Text: 'System.String',
    DateTime: 'System.DateTime',
    Bool: 'System.Boolean',
    Integer: 'System.Int32',
    Float: 'System.Single',
    Double: 'System.Double',
    Decimal: 'System.Decimal',
    Enum: 'Enum',
    Custom: 'Custom',
    Unknown: 'Unknown'
};
exports.complexValueType = { propertyName: 'type', modelName: '@Type', defaultVal: null };
exports.complexValueValue = { propertyName: 'value', modelName: '@Value', defaultVal: null };
exports.complexValueInfo = [exports.complexValueType, exports.complexValueValue];
exports.styleSettingsTypes = [
    { propertyName: 'styleSettingsAppearance', modelName: 'AppearanceSettings', type: appearance_settings_1.AppearanceSettings },
    { propertyName: 'styleSettingsIcon', modelName: 'IconSettings', type: icon_settings_1.IconSettings },
    { propertyName: 'styleSettingsBar', modelName: 'StyleSettings', type: bar_style_settings_1.BarStyleSettings },
    { propertyName: 'styleSettingsRangeBar', modelName: 'BarStyleSettings', type: bar_style_settings_1.BarStyleSettings }
];
exports.styleSettings = { propertyName: 'styleSettings', displayName: 'DashboardWebStringId.StyleSettings' };
exports.barOptions = { propertyName: 'barOptions', modelName: 'BarOptions', displayName: 'DashboardWebStringId.ConditionalFormatting.BarOptions', type: format_condition_bar_options_1.FormatConditionBarOptions };


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _utils_1 = __webpack_require__(3);
var _date_utils_1 = __webpack_require__(41);
var _base_metadata_1 = __webpack_require__(4);
function validateGuid(guid) {
    return guid && (/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/.test(guid)
        || /^\{[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\}$/.test(guid)
        || /^\([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\)$/.test(guid)
        || /^[0-9a-fA-F]{32}$/.test(guid));
}
exports.validateGuid = validateGuid;
var ParameterHelper = (function () {
    function ParameterHelper() {
    }
    ParameterHelper.getInfoPerType = function (valueType) {
        var value = { propertyName: 'value', modelName: '#text', displayName: 'DashboardStringId.ParametersFormValueColumnCaption', simpleFormAdapterItem: 'textBoxEditor' };
        if (valueType)
            return [_utils_1.deepExtend({}, value, { simpleFormAdapterItems: ParameterHelper.getEditorType(valueType()) }), _base_metadata_1.itemType];
        else
            return [value, _base_metadata_1.itemType];
    };
    ParameterHelper.getEditorType = function (typeString) {
        if (typeString === 'Enum') {
            return 'selectBoxEditor';
        }
        if (typeString === 'System.String') {
            return 'textBoxEditor';
        }
        if (typeString === 'System.Guid') {
            return 'guidEditor';
        }
        if (typeString === 'System.SByte'
            || typeString === 'System.Int64'
            || typeString === 'System.Int32'
            || typeString === 'System.Int16'
            || typeString === 'System.Single'
            || typeString === 'System.Double'
            || typeString === 'System.Byte'
            || typeString === 'System.UInt16'
            || typeString === 'System.UInt32'
            || typeString === 'System.UInt64'
            || typeString === 'System.Decimal'
            || typeString === 'System.Byte') {
            return 'numberBoxEditor';
        }
        if (typeString === 'System.Boolean') {
            return 'onOffButtonGroupEditor';
        }
        if (typeString === 'System.DateTime') {
            return 'dateBoxEditor';
        }
        return 'textBoxEditor';
    };
    ParameterHelper._getTypeValue = function (typeName) {
        var values = ParameterHelper.typeValues.filter(function (type) { return type.value === typeName; });
        return values.length > 0 ? values[0] : null;
    };
    ParameterHelper._tryConvertValue = function (value, type, allowNull) {
        var condition = function (val) {
            return val !== void 0 && val !== null && !isNaN(typeof val === 'string' ? '' : val);
        };
        if (!condition(value)) {
            return { isValid: allowNull, newValue: null };
        }
        var typeValue = this._getTypeValue(type), converter = (typeValue && typeValue.valueConverter) || (function (val) { return typeValue && typeValue.defaultValue; }), newValue = converter(value);
        return { isValid: condition(newValue), newValue: newValue };
    };
    ParameterHelper.getDefaultTypeValue = function (type) {
        var typeValue = this._getTypeValue(type);
        return typeValue ? typeValue.defaultValue : '';
    };
    ParameterHelper.convertSingleValue = function (value, type, allowNull) {
        if (allowNull === void 0) { allowNull = false; }
        var result = this._tryConvertValue(value, type, allowNull);
        return result.isValid ? result.newValue : this.getDefaultTypeValue(type);
    };
    ParameterHelper.typeValues = [
        { value: 'System.String', displayValue: 'AnalyticsCoreStringId.Parameter_Type_String', defaultValue: '', specifics: 'String', valueConverter: function (val) { return val.toString(); } },
        { value: 'System.DateTime', displayValue: 'AnalyticsCoreStringId.Parameter_Type_DateTime', defaultValue: _base_metadata_1.fromDateToString(new Date(new Date().setHours(0, 0, 0, 0))), specifics: 'Date', valueConverter: function (val) { return _date_utils_1.toUtcDate(val); } },
        { value: 'System.Int16', displayValue: 'AnalyticsCoreStringId.Parameter_Type_Int16', defaultValue: 0, specifics: 'Integer', valueConverter: function (val) { return parseInt(val); } },
        { value: 'System.Int32', displayValue: 'AnalyticsCoreStringId.Parameter_Type_Int32', defaultValue: 0, specifics: 'Integer', valueConverter: function (val) { return parseInt(val); } },
        { value: 'System.Int64', displayValue: 'AnalyticsCoreStringId.Parameter_Type_Int64', defaultValue: '0', specifics: 'String', valueConverter: function (val) { return val.toString(); } },
        { value: 'System.Single', displayValue: 'AnalyticsCoreStringId.Parameter_Type_Float', defaultValue: 0, specifics: 'Float', valueConverter: function (val) { return parseFloat(val); } },
        { value: 'System.Double', displayValue: 'AnalyticsCoreStringId.Parameter_Type_Double', defaultValue: 0, specifics: 'Float', valueConverter: function (val) { return parseFloat(val); } },
        { value: 'System.Decimal', displayValue: 'AnalyticsCoreStringId.Parameter_Type_Decimal', defaultValue: 0, specifics: 'Float', valueConverter: function (val) { return parseFloat(val); } },
        { value: 'System.Boolean', displayValue: 'AnalyticsCoreStringId.Parameter_Type_Boolean', defaultValue: false, specifics: 'Bool', valueConverter: function (val) { return String(val).toLowerCase() === 'true' ? true : (String(val).toLowerCase() === 'false' ? false : false); } },
        { value: 'System.Guid', displayValue: 'AnalyticsCoreStringId.Parameter_Type_Guid', defaultValue: '00000000-0000-0000-0000-000000000000', specifics: 'String', valueConverter: function (val) { return validateGuid(val) ? val : '00000000-0000-0000-0000-000000000000'; } }
    ];
    return ParameterHelper;
}());
exports.ParameterHelper = ParameterHelper;


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var leftPanelWidth = 81;
var DashboardMenuItem = (function () {
    function DashboardMenuItem(id, title, index, hotKey, click) {
        this.id = id;
        this.title = title;
        this.click = click;
        this.hotKey = hotKey;
        this.index = index;
        this.selected = ko.observable(false);
        this.disabled = ko.observable(false);
    }
    return DashboardMenuItem;
}());
exports.DashboardMenuItem = DashboardMenuItem;
var DashboardToolboxItem = (function () {
    function DashboardToolboxItem(name, click, icon, title, type) {
        this.name = name;
        this.click = click;
        this.icon = icon;
        this.title = title;
        this.type = type;
        this.disabled = ko.observable(false);
    }
    return DashboardToolboxItem;
}());
exports.DashboardToolboxItem = DashboardToolboxItem;
var DashboardToolbarItem = (function () {
    function DashboardToolbarItem(name, click, icon, title) {
        this.name = name;
        this.click = click;
        this.icon = icon;
        this.title = title;
        this.disabled = ko.observable(false);
    }
    return DashboardToolbarItem;
}());
exports.DashboardToolbarItem = DashboardToolbarItem;
var DashboardToolboxGroup = (function () {
    function DashboardToolboxGroup(name, title, index) {
        var items = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            items[_i - 3] = arguments[_i];
        }
        this.name = name;
        this.title = title;
        this.index = index;
        this.items = ko.observableArray(items);
    }
    return DashboardToolboxGroup;
}());
exports.DashboardToolboxGroup = DashboardToolboxGroup;
var DashboardToolbarGroup = (function () {
    function DashboardToolbarGroup(name, title, index) {
        var items = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            items[_i - 3] = arguments[_i];
        }
        this.name = name;
        this.title = title;
        this.index = index;
        this.items = ko.observableArray(items);
    }
    return DashboardToolbarGroup;
}());
exports.DashboardToolbarGroup = DashboardToolbarGroup;


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.zIndex = {
    floatingToolbar: 95,
    dashboardItemShield: 100,
    dashboardItemTooltips: 110,
};


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(689);
__export(__webpack_require__(175));
__export(__webpack_require__(49));
__export(__webpack_require__(254));
__export(__webpack_require__(102));
__export(__webpack_require__(41));
__export(__webpack_require__(457));
__export(__webpack_require__(36));
__export(__webpack_require__(17));
__export(__webpack_require__(458));
__export(__webpack_require__(46));
__export(__webpack_require__(27));
__export(__webpack_require__(18));
__export(__webpack_require__(285));
__export(__webpack_require__(464));
__export(__webpack_require__(459));
__export(__webpack_require__(284));
__export(__webpack_require__(465));
__export(__webpack_require__(468));
__export(__webpack_require__(106));
__export(__webpack_require__(55));


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var data_item_1 = __webpack_require__(8);
var _measure_1 = __webpack_require__(70);
var Measure = (function (_super) {
    __extends(Measure, _super);
    function Measure(dataItemJSON, serializer) {
        if (dataItemJSON === void 0) { dataItemJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, dataItemJSON, serializer) || this;
        _this.expression.subscribe(function (val) {
            if (val !== undefined) {
                _this.calculation.calculation(undefined);
            }
        });
        return _this;
    }
    Measure.prototype.getInfo = function () {
        return _measure_1.measureItemSerializationsInfo;
    };
    Measure.prototype.grabFrom = function (dataItem) {
        _super.prototype.grabFrom.call(this, dataItem);
        if (!(dataItem instanceof Measure))
            return;
        this.summaryType(dataItem.summaryType());
    };
    Measure.prototype.isDefinitionEquals = function (dataItem) {
        return _super.prototype.isDefinitionEquals.call(this, dataItem) && (dataItem instanceof Measure) &&
            this.summaryType() === dataItem.summaryType() && this.expression() === dataItem.expression() &&
            this.calculation.calculationType() === dataItem.calculation.calculationType() &&
            this.windowDefinition.equals(dataItem.windowDefinition) &&
            this.filterString() === dataItem.filterString();
    };
    Measure.prototype._hasCalculation = function () {
        return !this.calculation.isEmpty() || !!this.expression();
    };
    Measure.prototype._getDefaultItemType = function () {
        return 'Measure';
    };
    return Measure;
}(data_item_1.DataItem));
exports.Measure = Measure;


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var _common_1 = __webpack_require__(35);
var _utils_1 = __webpack_require__(3);
var _custom_properties_utils_1 = __webpack_require__(178);
var _base_metadata_1 = __webpack_require__(4);
var serializable_model_1 = __webpack_require__(5);
var _interactivity_options_1 = __webpack_require__(130);
var _pane_content_holder_1 = __webpack_require__(284);
var DashboardItem = (function (_super) {
    __extends(DashboardItem, _super);
    function DashboardItem(dashboardItemJSON, serializer, info) {
        if (dashboardItemJSON === void 0) { dashboardItemJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        if (info === void 0) { info = undefined; }
        var _this = _super.call(this, dashboardItemJSON, serializer, info) || this;
        _this._useNeutralFilterMode = ko.observable(false);
        _this._uiState = ko.observable('live');
        _this._errorState = ko.observable(null);
        _this._viewerItemCreated = ko.observable(false);
        _this._paneContentHolder = new _pane_content_holder_1.PaneContentHolder();
        _this._allowMultiselection = ko.observable(false);
        _this._serverContent = ko.observable(null);
        _this._actions = ko.computed(function () { return []; });
        _this._state = ko.computed(function () { return null; });
        _this._dataQueryParams = ko.computed(function () { return null; });
        ko.computed(function () {
            var errorState = _this._errorState(), valid = _this._paneContentHolder.valid();
            return valid && !errorState;
        }).subscribe(function (valid) {
            if (valid) {
                var content = _utils_1.deepExtend({}, _this._paneContentHolder.getContent(_base_metadata_1.PropertyCategory.Data) || {});
                _this._updateContentViewModel(content);
                _this._updateContentData(content);
                _this._extendContentState(content);
                _this._serverContent(content);
            }
            else {
                _this._serverContent(null);
            }
        });
        return _this;
    }
    DashboardItem._getCommonItemType = function (itemType) {
        var commonItemType = itemType.toUpperCase();
        if (commonItemType === 'TEXTBOX') {
            return 'TEXT';
        }
        return commonItemType;
    };
    DashboardItem.prototype.getUniqueNamePrefix = function () {
        return _super.prototype._getUniqueNamePrefix.call(this) + 'DashboardItem';
    };
    Object.defineProperty(DashboardItem.prototype, "_caption", {
        get: function () {
            var name = this.name(), layerName = '';
            if (this._getLayersCount() > 0) {
                layerName = this._getLayerName();
                name += !!name && !!layerName ? ' - ' : '';
            }
            return name + layerName;
        },
        enumerable: true,
        configurable: true
    });
    DashboardItem.prototype._isInteractivityAllowed = function () {
        return !!this[_interactivity_options_1.commonInteractivityOptions.propertyName];
    };
    DashboardItem.prototype._getLayersCount = function () {
        return 0;
    };
    DashboardItem.prototype._getLayerName = function () {
        return '';
    };
    DashboardItem.prototype._updateContentViewModel = function (content) {
        content.CaptionViewModel = content.CaptionViewModel || {};
        content.CaptionViewModel.Caption = this.name();
        content.CaptionViewModel.Text = this.name();
        content.CaptionViewModel.ShowCaption = this.showCaption();
        content.ViewModel = content.ViewModel || {};
        content.ViewModel.Caption = this.name();
        content.ViewModel.ShowCaption = this.showCaption();
        content.ParentContainer = this.parentContainer();
    };
    DashboardItem.prototype._updateContentData = function (content) {
    };
    DashboardItem.prototype._updateDataQueryParams = function (params) {
    };
    DashboardItem.prototype._validateSelectionByData = function (selection) {
    };
    DashboardItem.prototype._extendContentState = function (content) {
    };
    DashboardItem.prototype._getDisplayFilterValues = function (limitCount) {
        return undefined;
    };
    DashboardItem.prototype._getDisplayFilterValuesExternal = function () {
    };
    DashboardItem.prototype._getServerContent = function () {
        var content = this._serverContent();
        var contentCopy = content ? _utils_1.deepExtend({}, content) : undefined;
        if (contentCopy) {
            this._extendContentState(contentCopy);
        }
        return contentCopy;
    };
    DashboardItem.prototype._getFullServerContent = function () {
        var serverContent = this._getServerContent();
        return !!serverContent ? __assign({}, serverContent, { ContentType: _common_1.contentType.fullContent }) : serverContent;
    };
    DashboardItem.prototype._subcribeServerContent = function (handler) {
        var _this = this;
        return this._serverContent.subscribe(function () {
            handler(_this._getServerContent());
        });
    };
    DashboardItem.prototype._getContentCategories = function () {
        return [_base_metadata_1.PropertyCategory.Initialize];
    };
    DashboardItem.prototype._getDataQueryParams = function () {
        var params = this._dataQueryParams.peek();
        this._updateDataQueryParams(params);
        return params || {};
    };
    DashboardItem.prototype._subcribeDataQueryParams = function (handler) {
        var _this = this;
        return this._dataQueryParams.subscribe(function () { return handler(_this._getDataQueryParams()); });
    };
    DashboardItem.prototype._getExportingSelection = function () {
    };
    DashboardItem.prototype._setState = function (parameter) {
    };
    DashboardItem.prototype.getInfo = function () {
        return this._getInfoCore().concat(_custom_properties_utils_1.getCustomPropertiesSerializationInfo(this));
    };
    return DashboardItem;
}(serializable_model_1.TypedSerializableModel));
exports.DashboardItem = DashboardItem;


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
exports.dataSourceSerializationsInfo = [_base_metadata_1.itemType, _base_metadata_1.name, _base_metadata_1.componentName, { propertyName: 'calculatedFields', modelName: 'CalculatedFields', array: true }];


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var serializable_model_1 = __webpack_require__(5);
var calculated_field_1 = __webpack_require__(206);
var DataSource = (function (_super) {
    __extends(DataSource, _super);
    function DataSource(dataSourceJSON, serializer) {
        if (dataSourceJSON === void 0) { dataSourceJSON = {}; }
        var _this = _super.call(this, dataSourceJSON, serializer) || this;
        _this.hasCalculatedFields = false;
        _this.supportDataMembers = false;
        _this.hasFilter = false;
        _this.calculatedFields = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(dataSourceJSON.CalculatedFields, function (item) { return new calculated_field_1.CalculatedField(item, serializer); });
        return _this;
    }
    DataSource.prototype.getJson = function () {
        return new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer({ useRefs: false }).serialize(this);
    };
    DataSource.prototype.getUniqueNamePrefix = function () {
        return _super.prototype._getUniqueNamePrefix.call(this);
    };
    return DataSource;
}(serializable_model_1.TypedSerializableModel));
exports.DataSource = DataSource;


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.cssClassNames = {
    widgetsViewerScrollableHolder: 'dx-widgets-viewer-scrollable-holder',
    widgetViewerIdPrefix: 'dx-widgets-viewer-style_id',
    widgetViewerContainer: 'dx-widget-viewer-container',
    widgetViewerTable: 'widget-viewer-table',
    widgetViewerRow: 'widget-viewer-row',
    widgetViewerCell: 'widget-viewer-cell',
    cardItem: 'dx-cardItem',
    widgetItem: 'dx-widgetItem',
    cardTitle: 'dx-card-title',
    cardSubtitle: 'dx-card-subTitle',
    cardIndicator: 'dx-card-indicator',
    cardVariableValue1: 'dx-card-variableValue1',
    cardVariableValue2: 'dx-card-variableValue2',
    cardMainValue: 'dx-card-mainValue',
    cardSparkline: 'dx-card-sparkline',
    cardHiddenContainer: 'dx-card-item-hidden-container',
    cardNowrapHiddenContainer: 'dx-card-item-nowrap-hidden-container',
    layoutCardHiddenContainer: 'dx-layout-card-hidden-container',
    selectedItem: 'dx-selected-viewer-item',
    hoveredItem: 'dx-hovered-viewer-item'
};
exports.layoutCardCssClassNames = {
    cardScrollableHolder: 'dx-card-scrollable-holder',
    card: 'dx-flex-card-layout',
    content: 'dx-flex-card-layout-content',
    contentTopRows: 'dx-flex-card-layout-content-top-rows',
    contentBottomRows: 'dx-flex-card-layout-content-bottom-rows',
    row: 'dx-flex-card-layout-row',
    rowOnlyCenterElements: 'dx-flex-card-layout-row-center-only',
    rowLeftRightElements: 'dx-flex-card-layout-row-left-right',
    rowElement: 'dx-flex-card-layout-row-element',
    indicatorElement: 'dx-flex-card-layout-indicator-element',
    sparklineElement: 'dx-flex-card-layout-sparkline-row-element'
};


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.dashboardToolbarItemNames = {
    titleFilterText: 'filter-text',
    titleFilterIcon: 'filter-icon',
    exportMenu: 'export-menu',
    dashboardTitleImage: 'dashboard-title-image',
    dashboardTitle: 'dashboard-title',
    parameters: 'parameters',
    itemCaption: 'item-caption',
    limitVisibleData: 'limit-visible-data',
    clearMasterFilter: 'clear-master-filter',
    clearSelection: 'clear-selection',
    drillUp: 'drill-up',
    values: 'values',
    multiselection: 'multiselection',
    initialExtent: 'initial-extent',
    dateTimePeriodMenu: 'date-time-period-menu',
    customDateTimePeriod: 'custom-date-time-period',
    dashboardList: 'dashboard-list',
    dashboardFilters: 'dashboard-filters',
    backButton: 'back-button',
    itemFilters: 'item-filters',
    restoreItem: 'restore-item',
    maximizeItem: 'maximize-down-item',
    dataInspector: 'data-inspector'
};


/***/ }),
/* 65 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.data.DataSource };

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var appearance_settings_1 = __webpack_require__(67);
var bar_style_settings_1 = __webpack_require__(53);
var icon_settings_1 = __webpack_require__(73);
var format_condition_base_1 = __webpack_require__(264);
exports._styleSettingsTypesMap = {
    'AppearanceSettings': appearance_settings_1.AppearanceSettings,
    'IconSettings': icon_settings_1.IconSettings,
    'StyleSettings': bar_style_settings_1.BarStyleSettings
};
exports.currentStyleSettingInfo = function (styleSettingsType) {
    return !styleSettingsType ? [] : [{
            propertyName: 'styleSettings',
            modelName: styleSettingsType(),
            type: exports._styleSettingsTypesMap[styleSettingsType()]
        }];
};
var FormatConditionStyleBase = (function (_super) {
    __extends(FormatConditionStyleBase, _super);
    function FormatConditionStyleBase(modelJson, serializer) {
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.styleSettings = ko.observable();
        _this._styleSettingsType = ko.observable();
        _this._styleSettingsType(Object.keys(exports._styleSettingsTypesMap).filter(function (mapItem) { return !!modelJson && modelJson[mapItem]; })[0] || _this.getDefaultStyleSettingsType());
        _this.styleSettings(new exports._styleSettingsTypesMap[_this._styleSettingsType()]((modelJson || {})[_this._styleSettingsType()]));
        delete _this['_model'][_this._styleSettingsType()];
        _this.styleSettings.subscribe(function (styleSettings) {
            _this._styleSettingsType(Object.keys(exports._styleSettingsTypesMap).filter(function (mapItem) { return styleSettings instanceof exports._styleSettingsTypesMap[mapItem]; })[0]);
        });
        return _this;
    }
    FormatConditionStyleBase.prototype.getInfo = function () {
        return this._getStyleSettingsInfo().concat(exports.currentStyleSettingInfo(this._styleSettingsType));
    };
    FormatConditionStyleBase.prototype.getDefaultStyleSettingsType = function () {
        return 'AppearanceSettings';
    };
    FormatConditionStyleBase.prototype.isValid = function () {
        return _super.prototype.isValid.call(this);
    };
    FormatConditionStyleBase.prototype.init = function () {
        if (this.styleSettings()) {
            this.styleSettings().init();
        }
        this.isEmpty(false);
    };
    return FormatConditionStyleBase;
}(format_condition_base_1.FormatConditionBase));
exports.FormatConditionStyleBase = FormatConditionStyleBase;


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var _appearance_settings_1 = __webpack_require__(180);
var style_settings_base_1 = __webpack_require__(127);
var AppearanceSettings = (function (_super) {
    __extends(AppearanceSettings, _super);
    function AppearanceSettings(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    AppearanceSettings.prototype.getInfo = function () {
        return _appearance_settings_1.appearanceSettingsSerializationsInfo;
    };
    AppearanceSettings.prototype.equals = function (style) {
        return (style instanceof AppearanceSettings) &&
            this.appearanceType() === style.appearanceType() &&
            this.fontFamily() == style.fontFamily() &&
            this.fontStyle() == style.fontStyle() &&
            this.backColor() == style.backColor() &&
            this.foreColor() == style.foreColor();
    };
    AppearanceSettings.prototype.clone = function () {
        var style = new AppearanceSettings({});
        style.appearanceType(this.appearanceType());
        style.fontFamily(this.fontFamily());
        style.fontStyle(this.fontStyle());
        style.backColor(this.backColor());
        style.foreColor(this.foreColor());
        return style;
    };
    AppearanceSettings.prototype.setSpecificType = function (type) {
        this.appearanceType(type);
    };
    AppearanceSettings.prototype.init = function () {
        this.appearanceType('PaleRed');
    };
    return AppearanceSettings;
}(style_settings_base_1.StyleSettingsBase));
exports.AppearanceSettings = AppearanceSettings;


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _data_item_1 = __webpack_require__(20);
var _base_metadata_1 = __webpack_require__(4);
var _map_item_1 = __webpack_require__(44);
exports.latitude = { propertyName: '__latitude', modelName: 'Latitude', displayName: 'DashboardStringId.Latitude', info: _data_item_1.dataItemLinkSerializationsInfo };
exports.longitude = { propertyName: '__longitude', modelName: 'Longitude', displayName: 'DashboardStringId.Longitude', info: _data_item_1.dataItemLinkSerializationsInfo };
exports.tooltipDimensions = { propertyName: '__tooltipDimensions', modelName: 'TooltipDimensions', displayName: 'DashboardWebStringId.Map.TooltipDimensions', array: true };
exports.enableClustering = { propertyName: 'enableClustering', modelName: '@EnableClustering', displayName: 'DashboardWebStringId.GeoPointMapClusterization', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.geoPointMapDashboardItemBaseSerializationsInfo = _map_item_1.mapDashboardItemSerializationsInfo.concat([exports.latitude, exports.longitude, exports.tooltipDimensions, exports.enableClustering]);


/***/ }),
/* 69 */
/***/ (function(module, exports) {

module.exports = DevExpress.events;

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var calculation_1 = __webpack_require__(258);
var window_definition_1 = __webpack_require__(259);
var _data_item_1 = __webpack_require__(20);
exports.summaryTypeDict = {
    'Count': 'DashboardStringId.SummaryTypeCount',
    'CountDistinct': 'DashboardStringId.SummaryTypeCountDistinct',
    'Sum': 'DashboardStringId.SummaryTypeSum',
    'Min': 'DashboardStringId.SummaryTypeMin',
    'Max': 'DashboardStringId.SummaryTypeMax',
    'Average': 'DashboardStringId.SummaryTypeAverage',
    'StdDev': 'DashboardStringId.SummaryTypeStdDev',
    'StdDevp': 'DashboardStringId.SummaryTypeStdDevp',
    'Var': 'DashboardStringId.SummaryTypeVar',
    'Varp': 'DashboardStringId.SummaryTypeVarp',
    'Median': 'DashboardStringId.SummaryTypeMedian',
    'Mode': 'DashboardStringId.SummaryTypeMode'
};
exports.summaryTypeTemplate = {
    propertyName: 'summaryType', modelName: '@SummaryType', displayName: 'DashboardWebStringId.SummaryType'
};
exports.summaryTypeNumericToAny = __assign({ defaultVal: 'Sum', simpleFormAdapterItem: 'selectBoxEditor', values: exports.summaryTypeDict }, exports.summaryTypeTemplate);
exports.summaryTypeAttribute = __assign({ defaultVal: 'Min', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Min': 'DashboardStringId.SummaryTypeMin'
    } }, exports.summaryTypeTemplate);
exports.summaryTypeNonNumericToNumeric = __assign({ defaultVal: 'Count', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Count': 'DashboardStringId.SummaryTypeCount',
        'CountDistinct': 'DashboardStringId.SummaryTypeCountDistinct'
    } }, exports.summaryTypeTemplate);
exports.summaryTypeNonNumericToString = __assign({ defaultVal: 'Count', simpleFormAdapterItem: 'selectBoxEditor', values: {
        'Count': 'DashboardStringId.SummaryTypeCount',
        'CountDistinct': 'DashboardStringId.SummaryTypeCountDistinct',
        'Min': 'DashboardStringId.SummaryTypeMin',
        'Max': 'DashboardStringId.SummaryTypeMax',
        'Mode': 'DashboardStringId.SummaryTypeMode'
    } }, exports.summaryTypeTemplate);
exports.calculation = { propertyName: 'calculation', modelName: 'Calculation', type: calculation_1.Calculation };
exports.windowDefinition = { propertyName: 'windowDefinition', modelName: 'WindowDefinition', type: window_definition_1.WindowDefinition, displayName: 'DashboardWebStringId.Calculations.WindowDefinition' };
exports.expression = { propertyName: 'expression', modelName: '@Expression' };
exports.calculations = { propertyName: 'calculations' };
exports.measureFilterString = { propertyName: 'filterString', modelName: '@FilterString' };
exports.measureItemSerializationsInfo = _data_item_1.dataItemSerializationsInfo.concat(exports.summaryTypeNumericToAny, exports.calculation, exports.windowDefinition, exports.expression, exports.measureFilterString);


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
var _data_item_1 = __webpack_require__(20);
exports.dateTimeGroupIntervalsDict = {
    'Year': 'DashboardStringId.DateTimeGroupIntervalYear',
    'Quarter': 'DashboardStringId.DateTimeGroupIntervalQuarter',
    'Month': 'DashboardStringId.DateTimeGroupIntervalMonth',
    'Day': 'DashboardStringId.DateTimeGroupIntervalDay',
    'Hour': 'DashboardStringId.DateTimeGroupIntervalHour',
    'Minute': 'DashboardStringId.DateTimeGroupIntervalMinute',
    'Second': 'DashboardStringId.DateTimeGroupIntervalSecond',
    'DayOfYear': 'DashboardStringId.DateTimeGroupIntervalDayOfYear',
    'DayOfWeek': 'DashboardStringId.DateTimeGroupIntervalDayOfWeek',
    'WeekOfYear': 'DashboardStringId.DateTimeGroupIntervalWeekOfYear',
    'WeekOfMonth': 'DashboardStringId.DateTimeGroupIntervalWeekOfMonth',
    'QuarterYear': 'DashboardStringId.DateTimeGroupIntervalQuarterYear',
    'MonthYear': 'DashboardStringId.DateTimeGroupIntervalMonthYear',
    'WeekYear': 'DashboardStringId.DateTimeGroupIntervalWeekYear',
    'DayMonthYear': 'DashboardStringId.DateTimeGroupIntervalDayMonthYear',
    'DateHour': 'DashboardStringId.DateTimeGroupIntervalDateHour',
    'DateHourMinute': 'DashboardStringId.DateTimeGroupIntervalDateHourMinute',
    'DateHourMinuteSecond': 'DashboardStringId.DateTimeGroupIntervalDateHourMinuteSecond',
    'None': 'DashboardStringId.DateTimeGroupIntervalExactDate'
};
exports.dimensionGroupIndex = { propertyName: 'groupIndex', modelName: '@GroupIndex' };
exports.dateTimeGroupInterval = {
    propertyName: 'dateTimeGroupInterval', modelName: '@DateTimeGroupInterval', displayName: 'DashboardWebStringId.Dimension.GroupInterval', defaultVal: 'Year', simpleFormAdapterItem: 'selectBoxEditor', values: exports.dateTimeGroupIntervalsDict
};
exports.rangeDateTimeGroupInterval = {
    propertyName: 'dateTimeGroupInterval', modelName: '@DateTimeGroupInterval', displayName: 'DashboardWebStringId.Dimension.GroupInterval', defaultVal: 'Year', simpleFormAdapterItem: 'selectBoxEditor', values: {
        'Year': 'DashboardStringId.DateTimeGroupIntervalYear',
        'QuarterYear': 'DashboardStringId.DateTimeGroupIntervalQuarterYear',
        'MonthYear': 'DashboardStringId.DateTimeGroupIntervalMonthYear',
        'DayMonthYear': 'DashboardStringId.DateTimeGroupIntervalDayMonthYear',
        'DateHour': 'DashboardStringId.DateTimeGroupIntervalDateHour',
        'DateHourMinute': 'DashboardStringId.DateTimeGroupIntervalDateHourMinute',
        'DateHourMinuteSecond': 'DashboardStringId.DateTimeGroupIntervalDateHourMinuteSecond',
        'None': 'DashboardStringId.DateTimeGroupIntervalExactDate'
    }
};
exports.sortOrderBase = {
    propertyName: 'sortOrder', modelName: '@SortOrder', displayName: 'DevExpress.DashboardCommon.DynamicListLookUpSettings.SortOrder', defaultVal: 'Ascending', simpleFormAdapterItem: 'buttonGroupEditor'
};
exports.sortOrderOlap = __assign({ values: {
        'Ascending': 'DevExpress.DashboardCommon.DimensionSortOrder.Ascending',
        'Descending': 'DevExpress.DashboardCommon.DimensionSortOrder.Descending',
        'None': 'DevExpress.DashboardCommon.DimensionSortOrder.None'
    } }, exports.sortOrderBase);
exports.sortOrderNonOlap = __assign({ values: {
        'Ascending': 'DevExpress.DashboardCommon.DimensionSortOrder.Ascending',
        'Descending': 'DevExpress.DashboardCommon.DimensionSortOrder.Descending'
    } }, exports.sortOrderBase);
exports.sortMode = {
    propertyName: 'sortMode', modelName: '@SortMode', displayName: 'DashboardWebStringId.Dimension.SortMode', defaultVal: 'Value', simpleFormAdapterItem: 'selectBoxEditor', values: {
        'DisplayText': 'DashboardStringId.CommandDimensionSortModeDisplayText',
        'Value': 'DashboardStringId.CommandDimensionSortModeValue',
        'ID': 'DashboardStringId.CommandDimensionSortModeID',
        'Key': 'DashboardStringId.CommandDimensionSortModeKey'
    }
};
exports.textGroupInterval = {
    propertyName: 'textGroupInterval', modelName: '@TextGroupInterval', displayName: 'DashboardWebStringId.Dimension.GroupInterval', defaultVal: 'None', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'None': 'DashboardStringId.GroupIntervalNone',
        'Alphabetical': 'DashboardStringId.TextGroupIntervalAlphabetical'
    }
};
exports.isDiscreteNumericScale = { propertyName: 'isDiscreteNumericScale', modelName: '@IsDiscreteScale', displayName: 'DashboardWebStringId.Dialog.ArgumentMode', defaultVal: false, simpleFormAdapterItem: 'discreteContinuousButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.groupChildValues = { propertyName: 'groupChildValues', modelName: '@GroupChildValues', displayName: 'DashboardStringId.CommandDimensionGroupChildValues', defaultVal: false, simpleFormAdapterItem: 'yesNoButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.coloringMode = {
    propertyName: 'coloringMode', modelName: '@ColoringMode', displayName: 'DashboardWebStringId.ColoringOptions', defaultVal: 'Default', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Default': 'DashboardWebStringId.ColoringModeAuto',
        'None': 'DashboardWebStringId.ColoringModeOff',
        'Hue': 'DashboardWebStringId.ColoringModeOn'
    }
};
exports.sortMeasure = { propertyName: 'sortMeasure', modelName: '@SortByMeasure', displayName: 'DashboardWebStringId.DimensionSortBy' };
exports.realSortMode = { propertyName: 'realSortMode', defaultVal: 'DXValue', displayName: 'DashboardWebStringId.DimensionSortBy', simpleFormAdapterItem: 'selectBoxEditor' };
exports.topNOptionsEnabled = { propertyName: 'topNOptionsEnabled', modelName: '@TopNEnabled', displayName: 'DashboardWebStringId.TopNEnabled', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.topNOptionsModeValues = {
    'Top': 'DashboardWebStringId.TopN.Top',
    'Bottom': 'DashboardWebStringId.TopN.Bottom'
};
exports.topNOptionsMode = {
    propertyName: 'topNOptionsMode', modelName: '@TopNMode', displayName: 'DashboardWebStringId.TopNMode', defaultVal: 'Top', simpleFormAdapterItem: 'buttonGroupEditor', values: exports.topNOptionsModeValues
};
exports.topNOptionsCount = { propertyName: 'topNOptionsCount', modelName: '@TopNCount', displayName: 'DashboardStringId.SummaryTypeCount', defaultVal: 5, simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel, editorOptions: { min: 1 }, validateBeforeSet: true, validationRules: [_base_metadata_1.integerValidationRule] };
exports.topNOptionsMeasure = { propertyName: 'topNOptionsMeasureName', modelName: '@TopNMeasure', displayName: 'DashboardStringId.DescriptionItemMeasure', simpleFormAdapterItem: 'selectBoxEditor' };
exports.topNOptionsShowOthers = { propertyName: 'topNOptionsShowOthers', modelName: '@TopNShowOthers', displayName: 'DashboardWebStringId.ShowOthersValue', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.topNOptionsSerializationsInfo = [exports.topNOptionsEnabled, exports.topNOptionsMode, exports.topNOptionsCount, exports.topNOptionsMeasure, exports.topNOptionsShowOthers];
exports.dimensionItemSerializationsInfo = _data_item_1.dataItemSerializationsInfo
    .concat(exports.dimensionGroupIndex, exports.dateTimeGroupInterval, exports.sortOrderBase, exports.sortMeasure, exports.sortMode, exports.textGroupInterval, exports.isDiscreteNumericScale, exports.groupChildValues, exports.coloringMode)
    .concat(exports.topNOptionsSerializationsInfo);


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.emptyStyleType = 'None';
exports.styleSettingsBaseSerializationsInfo = [];


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var _icon_settings_1 = __webpack_require__(181);
var style_settings_base_1 = __webpack_require__(127);
var IconSettings = (function (_super) {
    __extends(IconSettings, _super);
    function IconSettings(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    IconSettings.prototype.getInfo = function () {
        return _icon_settings_1.iconSettingsSerializationsInfo;
    };
    IconSettings.prototype.equals = function (style) {
        return (style instanceof IconSettings) && this.iconType() === style.iconType();
    };
    IconSettings.prototype.clone = function () {
        var style = new IconSettings({});
        style.iconType(this.iconType());
        return style;
    };
    IconSettings.prototype.setSpecificType = function (type) {
        this.iconType(type);
    };
    IconSettings.prototype.init = function () {
        this.iconType('DirectionalGreenArrowUp');
    };
    return IconSettings;
}(style_settings_base_1.StyleSettingsBase));
exports.IconSettings = IconSettings;


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
exports.showCaption = { propertyName: 'showCaption', modelName: '@ShowCaption', displayName: 'DashboardWebStringId.ShowCaptionText', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool, category: _base_metadata_1.PropertyCategory.ViewModel };
exports.showCaptionDefaultFalse = { propertyName: 'showCaption', modelName: '@ShowCaption', displayName: 'DashboardWebStringId.ShowCaptionText', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool, category: _base_metadata_1.PropertyCategory.ViewModel };
exports.parentContainer = { propertyName: 'parentContainer', modelName: '@ParentContainer' };
exports.dashboardItemSerializationsInfo = [_base_metadata_1.itemType, _base_metadata_1.componentName, _base_metadata_1.name_ViewModel, exports.showCaption, exports.parentContainer];


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var coloring_options_1 = __webpack_require__(460);
exports.coloringOptions = { propertyName: 'coloringOptions', modelName: 'ColoringOptions', displayName: 'DashboardWebStringId.ColoringOptions', type: coloring_options_1.DashboardItemColoringOptions };


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
exports.KeyCodes = {
    Esc: 27,
    Delete: 46,
    Z: 90,
    Y: 89,
    S: 83
};
var SingleItemSizeController = (function () {
    function SingleItemSizeController(_element, requestRepaint) {
        this._element = _element;
        this.requestRepaint = requestRepaint;
        this.renderImmediately = true;
    }
    SingleItemSizeController.prototype.getWidth = function () {
        return $(this._element).width();
    };
    SingleItemSizeController.prototype.getHeight = function () {
        return $(this._element).height();
    };
    SingleItemSizeController.prototype.setConstraints = function (constraints) {
    };
    return SingleItemSizeController;
}());
exports.SingleItemSizeController = SingleItemSizeController;
var SingleTabItemSizeController = (function () {
    function SingleTabItemSizeController(requestRepaint, width, height) {
        this.requestRepaint = requestRepaint;
        this.width = width;
        this.height = height;
        this.renderImmediately = true;
    }
    SingleTabItemSizeController.prototype.getWidth = function () {
        return this.width();
    };
    SingleTabItemSizeController.prototype.getHeight = function () {
        return this.height();
    };
    SingleTabItemSizeController.prototype.setConstraints = function (constraints) {
    };
    return SingleTabItemSizeController;
}());
exports.SingleTabItemSizeController = SingleTabItemSizeController;


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var devices_1 = __webpack_require__(119);
var support_1 = __webpack_require__(414);
var DashboardLayoutModeHelper = (function () {
    function DashboardLayoutModeHelper() {
    }
    Object.defineProperty(DashboardLayoutModeHelper, "isMobile", {
        get: function () {
            if (DashboardLayoutModeHelper._forceMobileMode !== null)
                return DashboardLayoutModeHelper._forceMobileMode;
            return devices_1.default.current().phone || devices_1.default.current().tablet;
        },
        set: function (value) {
            DashboardLayoutModeHelper._forceMobileMode = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardLayoutModeHelper, "isTouch", {
        get: function () {
            if (DashboardLayoutModeHelper._forceTouchMode !== null)
                return DashboardLayoutModeHelper._forceTouchMode;
            return support_1.touch;
        },
        set: function (value) {
            DashboardLayoutModeHelper._forceTouchMode = value;
        },
        enumerable: true,
        configurable: true
    });
    DashboardLayoutModeHelper._forceTouchMode = null;
    DashboardLayoutModeHelper._forceMobileMode = null;
    return DashboardLayoutModeHelper;
}());
exports.DashboardLayoutModeHelper = DashboardLayoutModeHelper;


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var getEventName = function (actionName) {
    return actionName.charAt(2).toLowerCase() + actionName.substr(3);
};
var isEventName = function (actionName) {
    return actionName && actionName.length && actionName.indexOf('on') === 0 && actionName.charAt(2).toUpperCase() === actionName.charAt(2);
};
var OptionsManager = (function () {
    function OptionsManager() {
        this.events = new EventManager();
    }
    OptionsManager.prototype.initialize = function (_defaultOptions, options, extension) {
        var _this = this;
        this.options = __assign({}, _defaultOptions, options);
        Object.keys(this.options).forEach(function (optionName) {
            if (isEventName(optionName)) {
                _this.events.on(getEventName(optionName), _this.options[optionName]);
            }
        });
        extension.on = this.events.on;
        extension.off = this.events.off;
    };
    OptionsManager.prototype.dispose = function () {
        this.events.dispose();
    };
    return OptionsManager;
}());
exports.OptionsManager = OptionsManager;
var EventManager = (function () {
    function EventManager() {
        var _this = this;
        this._handlers = [];
        this.on = function (eventName, eventHandler) {
            if (!_this._handlers.filter(function (handler) { return handler.eventName === eventName && handler.event === eventHandler; })[0]) {
                _this._handlers.push({
                    eventName: eventName,
                    event: eventHandler
                });
            }
        };
        this.off = function (eventName, eventHandler) {
            var eventInfo = _this._handlers.filter(function (handler) { return handler.eventName === eventName && handler.event === eventHandler; })[0];
            var index = _this._handlers.indexOf(eventInfo);
            if (index !== -1) {
                _this._handlers.splice(index, 1);
            }
        };
    }
    EventManager.prototype.dispose = function () {
        this._handlers = [];
    };
    EventManager.prototype.raise = function (eventName, eventArgs) {
        this._handlers
            .filter(function (handler) { return handler.eventName === eventName; })
            .forEach(function (handler) { return handler.event(eventArgs); });
    };
    return EventManager;
}());
exports.EventManager = EventManager;


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var data_source_1 = __webpack_require__(65);
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var _collection_editor_viewmodel_base_1 = __webpack_require__(115);
var CollectionEditorViewModel = (function (_super) {
    __extends(CollectionEditorViewModel, _super);
    function CollectionEditorViewModel(params, dataSource) {
        var _this = _super.call(this, params) || this;
        _this.add = function () {
            var newItem = ko.observable(_this.createNewItemHandler());
            if (!!newItem) {
                var addToDataSource = function () {
                    if (_this.dataSource.indexOf(newItem()) === -1) {
                        _this.dataSource.push(newItem());
                    }
                    _this._setListSelection(newItem());
                };
                if (_this.editItemHandler) {
                    var args = new CollectionEditorEditItemArguments();
                    _this.editItemHandler(newItem(), args, newItem);
                    if (args.createImmediately) {
                        addToDataSource();
                    }
                    else {
                        args.requestRecalculation.add(addToDataSource);
                    }
                }
                else {
                    addToDataSource();
                }
            }
        };
        _this.edit = function () { return _this.editItemHandler && _this.editItemHandler(_this.selectedValue, new CollectionEditorEditItemArguments(), ko.observable(_this.selectedValue)); };
        _this.remove = function () { return _this.removeEnabled() && _this.removeItemHandler && _this.removeItemHandler(_this.selectedValue); };
        _this.up = function () {
            var selection = _this.selectedValue;
            !!_this.reorderItemsHandler ? _this.reorderItemsHandler(selection, 'up') : _this._moveSelectedGridRow('up');
            _this._setListSelection(selection);
        };
        _this.down = function () {
            var selection = _this.selectedValue;
            !!_this.reorderItemsHandler ? _this.reorderItemsHandler(selection, 'down') : _this._moveSelectedGridRow('down');
            _this._setListSelection(selection);
        };
        _this.dataField = params.propertyName;
        _this.dataSource = dataSource;
        _this.isToolbarVisible = params.isToolbarVisible === undefined || params.isToolbarVisible;
        _this.allowAddItem = params.allowAddItem === undefined || params.allowAddItem;
        _this.allowReorderItem = params.allowReorderItem === undefined || params.allowReorderItem;
        _this.allowRemoveItem = params.allowRemoveItem === undefined || params.allowRemoveItem;
        _this.createNewItemHandler = params.createNewItemHandler;
        _this.editItemHandler = params.editItemHandler;
        _this.reorderItemsHandler = params.reorderItemsHandler;
        _this.customToolbarItems = params.customToolbarItems;
        _this.visibleItemsFilter = params.visibleItemsFilter || (function (_) { return true; });
        _this.customTemplate = params.customTemplate;
        _this.removeItemHandler = params.removeItemHandler || (function (item) { return _this.dataSource.remove(item); });
        _this.enableRemoveItem = params.enableRemoveItem || (function (_) { return true; });
        _this.addEnabled = ko.observable(true);
        _this.subscriptions = [_this.dataSource.subscribe(function () { return _this._safeReloadDataSource(); })];
        params.forceRefreshCallback && params.forceRefreshCallback.subscribe(function () { return _this._safeReloadDataSource(); });
        return _this;
    }
    CollectionEditorViewModel.prototype.getListOptions = function () {
        var _this = this;
        return __assign({}, _super.prototype.getListOptions.call(this), { dataSource: new data_source_1.default({ load: function () { return ko.unwrap(_this.dataSource).filter(_this.visibleItemsFilter); } }) });
    };
    CollectionEditorViewModel.prototype._itemTemplate = function (itemData, itemIndex, itemElement) {
        this.customTemplate ? this.customTemplate(itemData, itemIndex, itemElement) : _super.prototype._itemTemplate.call(this, itemData, itemIndex, itemElement);
    };
    CollectionEditorViewModel.prototype._getDisplayText = function (itemData) {
        return _default_1.getLocalizationById(ko.unwrap(itemData[this.dataField]));
    };
    CollectionEditorViewModel.prototype._moveSelectedGridRow = function (direction) {
        var selectedValue = this.selectedValue;
        if (!selectedValue)
            return;
        this.listInstance.beginUpdate();
        var index = this.dataSource().indexOf(selectedValue);
        this.dataSource.splice(index, 1);
        this.dataSource.splice(direction === 'up' ? index - 1 : index + 1, 0, selectedValue);
        this.listInstance.endUpdate();
    };
    CollectionEditorViewModel.prototype._updateActionsState = function () {
        var selection = this.selectedValue;
        this.removeEnabled(!!selection && this.enableRemoveItem(selection));
        this.editEnabled(!!this.enableEditItem ? this.enableEditItem(selection) : !!selection);
        var selectedRowIndex = this.dataSource.indexOf(selection);
        this.upEnabled(!!selection && selectedRowIndex > 0);
        this.downEnabled(!!selection && selectedRowIndex < this.dataSource().length - 1);
    };
    CollectionEditorViewModel.prototype._safeReloadDataSource = function () {
        var _this = this;
        var selection = this.dataSource().some(function (v) { return v === _this.selectedValue; }) ? this.selectedValue : undefined;
        if (this.listInstance) {
            this.listInstance.reload();
            selection && this._setListSelection(selection);
        }
    };
    CollectionEditorViewModel.prototype.dispose = function () {
        this.subscriptions && this.subscriptions.forEach(function (s) { return s.dispose(); });
        _super.prototype.dispose.call(this);
    };
    return CollectionEditorViewModel;
}(_collection_editor_viewmodel_base_1.CollectionEditorViewModelBase));
exports.CollectionEditorViewModel = CollectionEditorViewModel;
var CollectionEditorEditItemArguments = (function () {
    function CollectionEditorEditItemArguments() {
        this.requestRecalculation = $.Callbacks();
        this.createImmediately = true;
    }
    return CollectionEditorEditItemArguments;
}());
exports.CollectionEditorEditItemArguments = CollectionEditorEditItemArguments;


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var LegacySettings = (function () {
    function LegacySettings() {
    }
    LegacySettings.useLegacyTreeView = false;
    LegacySettings._useCardLegacyLayout = false;
    return LegacySettings;
}());
exports.LegacySettings = LegacySettings;
var DashboardPrivateSettings = (function () {
    function DashboardPrivateSettings() {
    }
    DashboardPrivateSettings.customNumericFormatMode = 'Disabled';
    return DashboardPrivateSettings;
}());
exports.DashboardPrivateSettings = DashboardPrivateSettings;


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var serializable_model_1 = __webpack_require__(5);
var _measure_calculation_1 = __webpack_require__(82);
var MeasureCalculation = (function (_super) {
    __extends(MeasureCalculation, _super);
    function MeasureCalculation(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson || {}, serializer) || this;
    }
    MeasureCalculation._getWindowAggrFunction = function (summaryType) {
        switch (summaryType) {
            case 'Sum':
                return 'WindowSum';
            case 'Average':
                return 'WindowAvg';
            case 'Count':
                return 'WindowCount';
            case 'CountDistinct':
                return 'WindowCountDistinct';
            case 'Max':
                return 'WindowMax';
            case 'Median':
                return 'WindowMedian';
            case 'Mode':
                return 'WindowMode';
            case 'Min':
                return 'WindowMin';
            case 'StdDev':
                return 'WindowStdDev';
            case 'StdDevp':
                return 'WindowStdDevp';
            case 'Var':
                return 'WindowVar';
            case 'Varp':
                return 'WindowVarp';
            default:
                throw new Error('WindowAggrFunction: Unsupported SummaryType');
        }
    };
    MeasureCalculation.prototype.getInfo = function () {
        return _measure_calculation_1.measureCalculationSerializationsInfo;
    };
    MeasureCalculation.prototype._getAggrName = function (summaryType) {
        return MeasureCalculation._getWindowAggrFunction(summaryType);
    };
    return MeasureCalculation;
}(serializable_model_1.SerializableModel));
exports.MeasureCalculation = MeasureCalculation;
exports.calculationsTypesMap = {};


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.measureCalculationSerializationsInfo = [];


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _format_rules_common_1 = __webpack_require__(54);
var _format_condition_base_1 = __webpack_require__(182);
exports.formatConditionStyleBaseSerializationsInfo = _format_condition_base_1.formatConditionBaseSerializationsInfo.concat([_format_rules_common_1.styleSettings]);


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var color_1 = __webpack_require__(50);
var _helper_classes_1 = __webpack_require__(36);
var _format_rules_common_1 = __webpack_require__(54);
var appearance_settings_1 = __webpack_require__(67);
var bar_style_settings_1 = __webpack_require__(53);
var icon_settings_1 = __webpack_require__(73);
var range_converter_1 = __webpack_require__(277);
var range_info_1 = __webpack_require__(186);
var FormatConditionRangeGenerator = (function () {
    function FormatConditionRangeGenerator() {
    }
    FormatConditionRangeGenerator.generateRangeSet = function (condition, type) {
        if (type === range_converter_1.FormatConditionRangeSetPredefinedType.None || type === range_converter_1.FormatConditionRangeSetPredefinedType.Custom)
            return;
        condition.valueType(!!condition.dateTimeGroupInterval() ? 'Number' : 'Percent');
        var ranges = [];
        var styleList = range_converter_1.FormatConditionConverter.getStyleList(type);
        if (styleList.isIcon) {
            ranges = FormatConditionRangeGenerator._generateRangeSet(styleList.list.length, condition.dataType(), condition.dateTimeGroupInterval(), function (i) { return new icon_settings_1.IconSettings({
                '@IconType': styleList.list[i]
            }); });
        }
        else {
            ranges = FormatConditionRangeGenerator._generateRangeSet(styleList.list.length, condition.dataType(), condition.dateTimeGroupInterval(), function (i) {
                return condition.createStyleSettings(styleList.list[i]);
            });
        }
        condition.rangeSet.ranges(ranges);
    };
    FormatConditionRangeGenerator.generateGradientByType = function (condition, type, segmentNumber, isBar) {
        if (isBar === void 0) { isBar = false; }
        if (type === range_converter_1.FormatConditionRangeGradientPredefinedType.None || type === range_converter_1.FormatConditionRangeGradientPredefinedType.Custom)
            return;
        var styles = range_converter_1.FormatConditionConverter
            .toAppearanceTypes(type)
            .map(function (t) { return isBar ? new bar_style_settings_1.BarStyleSettings({ '@PredefinedColor': t }) : new appearance_settings_1.AppearanceSettings({ '@AppearanceType': t }); });
        FormatConditionRangeGenerator.generateGradientByStyles(condition, styles, segmentNumber);
    };
    FormatConditionRangeGenerator.generateGradientByStyles = function (condition, styles, segmentNumber) {
        var colorsCount = styles.length;
        if (segmentNumber >= colorsCount) {
            condition.generateAsPercent(styles[0], styles[colorsCount - 1], segmentNumber);
            if (colorsCount == 3)
                condition.rangeSet.ranges()[Math.floor(segmentNumber / 2)].styleSettings(styles[1]);
            if (colorsCount == 4) {
                condition.rangeSet.ranges()[Math.floor(segmentNumber / 3)].styleSettings(styles[1]);
                condition.rangeSet.ranges()[Math.floor(2 * segmentNumber / 3)].styleSettings(styles[2]);
            }
        }
    };
    FormatConditionRangeGenerator.generateGradientColors = function (gradientType, count) {
        var gradientColors = [];
        var appearanceTypes = range_converter_1.FormatConditionConverter.toAppearanceTypes(gradientType);
        var prevIndex = 0, nextIndex = count - 1;
        gradientColors[prevIndex] = color_1.Color.fromAppearance(appearanceTypes[0]);
        gradientColors[nextIndex] = color_1.Color.fromAppearance(appearanceTypes[appearanceTypes.length - 1]);
        if (appearanceTypes.length == 3) {
            nextIndex = count / 2;
            gradientColors[nextIndex] = color_1.Color.fromAppearance(appearanceTypes[1]);
        }
        for (var i = 1; i < count - 1; i++) {
            if (appearanceTypes.length == 3 && (i === count / 2)) {
                nextIndex = count - 1;
            }
            gradientColors[i] = color_1.Color.fromDxColor(gradientColors[nextIndex].blend(gradientColors[prevIndex], (i - nextIndex) / (prevIndex - nextIndex)));
        }
        return gradientColors;
    };
    FormatConditionRangeGenerator.getPredefinedType = function (actualStyles, func) {
        var enumValues = _helper_classes_1.EnumManager.getValues(range_converter_1.FormatConditionRangeSetPredefinedType);
        for (var i = 0; i < enumValues.length; i++) {
            var rangePredefinedType = enumValues[i];
            if (rangePredefinedType != range_converter_1.FormatConditionRangeSetPredefinedType.None && rangePredefinedType != range_converter_1.FormatConditionRangeSetPredefinedType.Custom
                && FormatConditionRangeGenerator._isStylesEqual(actualStyles, func(rangePredefinedType).actualStyles))
                return rangePredefinedType;
        }
        return range_converter_1.FormatConditionRangeSetPredefinedType.Custom;
    };
    FormatConditionRangeGenerator.getGradientPredefinedType = function (actualStyles, func) {
        var enumValues = _helper_classes_1.EnumManager.getValues(range_converter_1.FormatConditionRangeGradientPredefinedType);
        for (var i = 0; i < enumValues.length; i++) {
            var rangePredefinedType = enumValues[i];
            if (rangePredefinedType != range_converter_1.FormatConditionRangeGradientPredefinedType.None && rangePredefinedType != range_converter_1.FormatConditionRangeGradientPredefinedType.Custom
                && FormatConditionRangeGenerator._isStylesEqual(actualStyles, func(rangePredefinedType).actualStyles))
                return rangePredefinedType;
        }
        return range_converter_1.FormatConditionRangeGradientPredefinedType.Custom;
    };
    FormatConditionRangeGenerator.calculateRangePercentValues = function (segmentCount) {
        var values = [];
        for (var i = 0; i < segmentCount; i++) {
            values.push(FormatConditionRangeGenerator._calculateRangePercent(i, segmentCount));
        }
        return values;
    };
    FormatConditionRangeGenerator.compareValues = function (val1, val2, changeType) {
        var negativeInfinity = negativeInfinity;
        var compare = function (a, b) {
            if (a == b) {
                return 0;
            }
            if (!a) {
                return -1;
            }
            if (!b) {
                return 1;
            }
            return a > b ? 1 : -1;
        };
        if (changeType && !!val1 && !!val2) {
            var firstNegativeInfinity = (val1 == negativeInfinity), secondNegativeInfinity = (val2 == negativeInfinity);
            if (firstNegativeInfinity && secondNegativeInfinity) {
                return 0;
            }
            if (firstNegativeInfinity) {
                return -1;
            }
            if (secondNegativeInfinity) {
                return 1;
            }
        }
        return compare(val1, val2);
    };
    FormatConditionRangeGenerator._isStylesEqual = function (actual, predefined) {
        if (actual.length != predefined.length)
            return false;
        for (var i = 0; i < actual.length; i++) {
            if ((actual[i] != null && predefined[i] == null) ||
                (actual[i] == null && predefined[i] != null) ||
                !actual[i].equals(predefined[i]))
                return false;
        }
        return true;
    };
    FormatConditionRangeGenerator._getPercentRangeStops = function (rangeStopsCount) {
        var marks = new Array(rangeStopsCount);
        for (var i = 0; i < rangeStopsCount; i++) {
            marks.push(i * 100 / rangeStopsCount);
        }
        return marks;
    };
    FormatConditionRangeGenerator._calculateRangePercent = function (index, count, decimals) {
        if (decimals === void 0) { decimals = 0; }
        return Math.round(100 * (index / count));
    };
    FormatConditionRangeGenerator._generateRangeSet = function (segmentCount, dataType, dateTimeGroupInterval, createStyleProc) {
        var ranges = [];
        for (var i = 0; i < segmentCount; i++) {
            var rangeInfo = new range_info_1.RangeInfo();
            var value = !dateTimeGroupInterval ? FormatConditionRangeGenerator._calculateRangePercent(i, segmentCount) : FormatConditionRangeGenerator._calculateRangeDate(dateTimeGroupInterval, i, segmentCount);
            rangeInfo.value.setValue(value, _format_rules_common_1.fieldTypes[dataType]);
            rangeInfo.styleSettings(createStyleProc(i));
            ranges.push(rangeInfo);
        }
        return ranges;
    };
    FormatConditionRangeGenerator._calculateRangeDate = function (groupInterval, i, segmentCount) {
        var dateIndex = segmentCount - i - 1;
        switch (groupInterval) {
            case 'DateHour':
                return DateTime.addHours(-dateIndex);
            case 'DateHourMinute':
                return DateTime.addMinutes(-dateIndex);
            case 'DateHourMinuteSecond':
                return DateTime.addSeconds(-dateIndex);
            case 'DayMonthYear':
            case 'None':
                return DateTime.addDays(-dateIndex);
            case 'WeekYear':
                return DateTime.addWeeks(-dateIndex);
            case 'MonthYear':
                return DateTime.addMonths(-dateIndex);
            case 'QuarterYear':
                return DateTime.addMonths(-dateIndex * 3);
            case 'Year':
                return DateTime.addYears(-dateIndex).getFullYear();
            case 'WeekOfMonth':
            case 'WeekOfYear':
            case 'Second':
            case 'Quarter':
            case 'Hour':
            case 'Minute':
            case 'Month':
            case 'DayOfWeek':
            case 'DayOfYear':
            case 'Day':
            default:
                return i;
        }
    };
    return FormatConditionRangeGenerator;
}());
exports.FormatConditionRangeGenerator = FormatConditionRangeGenerator;
var DateTime = (function () {
    function DateTime() {
    }
    DateTime.addHours = function (v) {
        var date = new Date();
        date.setTime(date.getTime() + (v * 60 * 60 * 1000));
        return date;
    };
    DateTime.addMinutes = function (v) {
        var date = new Date();
        date.setTime(date.getTime() + (v * 60 * 1000));
        return date;
    };
    DateTime.addSeconds = function (v) {
        var date = new Date();
        date.setTime(date.getTime() + (v * 1000));
        return date;
    };
    DateTime.addDays = function (v) {
        var date = new Date();
        date.setTime(date.getTime() + (v * 24 * 60 * 60 * 1000));
        return date;
    };
    DateTime.addMonths = function (v) {
        var date = new Date();
        var year = date.getFullYear();
        var newMonth = date.getMonth() + v;
        var month = newMonth % 12;
        if (month < 0) {
            month += 12;
        }
        date.setMonth(month);
        date.setFullYear(year + (newMonth - month) / 12);
        return date;
    };
    DateTime.addYears = function (v) {
        var date = new Date();
        date.setFullYear(date.getFullYear() + v);
        return date;
    };
    DateTime.addWeeks = function (v) {
        return DateTime.addDays(7 * v);
    };
    return DateTime;
}());


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
var _dashboard_item_format_rule_1 = __webpack_require__(52);
exports.applyToRow = { propertyName: 'applyToRow', modelName: '@ApplyToRow', displayName: 'DashboardStringId.FormatRuleApplyToRow', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.formatRuleDataItem = { propertyName: 'dataItemName', modelName: '@DataItem', displayName: 'DashboardWebStringId.ConditionalFormatting.CalculatedBy', simpleFormAdapterItem: 'selectBoxEditor' };
exports.dataItemApplyTo = { propertyName: 'dataItemApplyToName', displayName: 'DashboardStringId.FormatRuleApplyTo', simpleFormAdapterItem: 'selectBoxEditor' };
var _dataItemApplyTo = { propertyName: '_dataItemApplyToName', modelName: '@DataItemApplyTo' };
exports.cellsItemFormatRuleSerializationsInfo = _dashboard_item_format_rule_1.dashboardItemFormatRuleSerializationsInfo.concat([exports.applyToRow, exports.formatRuleDataItem, _dataItemApplyTo]);


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var dashboard_item_1 = __webpack_require__(60);
var _dashboard_tab_page_1 = __webpack_require__(286);
var DashboardTabPage = (function (_super) {
    __extends(DashboardTabPage, _super);
    function DashboardTabPage(dashboardItemJSON, serializer) {
        if (dashboardItemJSON === void 0) { dashboardItemJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, dashboardItemJSON, serializer) || this;
        _this._uniqueNamePrefix = 'dashboardTabPage';
        return _this;
    }
    DashboardTabPage.prototype._getInfoCore = function () {
        return _dashboard_tab_page_1.tabPageSerializationInfo;
    };
    DashboardTabPage.prototype.getUniqueNamePrefix = function () {
        return this._uniqueNamePrefix;
    };
    DashboardTabPage.prototype._getDefaultItemType = function () {
        return 'Page';
    };
    return DashboardTabPage;
}(dashboard_item_1.DashboardItem));
exports.DashboardTabPage = DashboardTabPage;


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var dashboard_state_1 = __webpack_require__(125);
var _helper_classes_1 = __webpack_require__(36);
var _knockout_utils_1 = __webpack_require__(17);
var _utils_1 = __webpack_require__(18);
var serializable_model_1 = __webpack_require__(5);
var dashboard_item_1 = __webpack_require__(60);
var dashboard_tab_page_1 = __webpack_require__(86);
var _tab_container_item_1 = __webpack_require__(466);
var TabContainerItem = (function (_super) {
    __extends(TabContainerItem, _super);
    function TabContainerItem(dashboardItemJSON, serializer) {
        if (dashboardItemJSON === void 0) { dashboardItemJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, dashboardItemJSON, serializer) || this;
        _this.tabPages = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(dashboardItemJSON.Pages, function (item) { return new dashboard_tab_page_1.DashboardTabPage(item, serializer); });
        if (_this.tabPages().length === 0) {
            _this._addNewPage();
        }
        _this._activeTabPage = ko.observable();
        _knockout_utils_1.subscribeWithPrev(_this._activeTabPage, function (prevPage, page) {
            var prevPageName = prevPage && _this.tabPages().indexOf(prevPage) != -1 ? prevPage.componentName() : '';
            var activePageName = page && _this.tabPages().indexOf(page) != -1 ? page.componentName() : '';
            if (_this._activePageChanged && (prevPageName !== activePageName || (!prevPageName && !page))) {
                _this._activePageChanged(prevPageName, activePageName);
            }
        });
        _this._state = ko.computed(function () {
            var state = new dashboard_state_1.ItemState();
            if (_this._activeTabPage() && _this.tabPages().indexOf(_this._activeTabPage()) !== 0) {
                state.TabPageName = _this._activeTabPage().componentName();
            }
            return state;
        });
        return _this;
    }
    TabContainerItem.prototype._setState = function (itemState) {
        _super.prototype._setState.call(this, itemState);
        if (itemState.TabPageName) {
            var page = this.tabPages().filter(function (page) { return page.componentName() === itemState.TabPageName; })[0];
            if (page && (!this._activeTabPage() || this._activeTabPage().name() !== page.name())) {
                this._activeTabPage(page);
            }
        }
    };
    TabContainerItem.prototype._getInfoCore = function () {
        return _tab_container_item_1.tabContainerItemSerializationInfo;
    };
    TabContainerItem.prototype._getDefaultItemType = function () {
        return 'TabContainer';
    };
    TabContainerItem.prototype._addNewPage = function () {
        var tabPage = new dashboard_tab_page_1.DashboardTabPage({});
        tabPage.name(_helper_classes_1.NameGenerator.generateName(_default_1.getLocalizationById('DashboardStringId.DefaultNameTabPage') + ' ', this.tabPages(), 'name', 1));
        this.tabPages.push(tabPage);
        return tabPage;
    };
    __decorate([
        _utils_1.collectionItemType('Page')
    ], TabContainerItem.prototype, "tabPages", void 0);
    return TabContainerItem;
}(dashboard_item_1.DashboardItem));
exports.TabContainerItem = TabContainerItem;
serializable_model_1.itemTypesMap['TabContainer'] = { type: TabContainerItem, groupName: 'layout', title: 'DashboardStringId.DefaultNameTabContainerItem', index: 115 };


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
var _data_dashboard_item_1 = __webpack_require__(26);
var interactivity_options_1 = __webpack_require__(32);
exports.filterDimensions = { propertyName: '__filterDimensions', modelName: 'FilterDimensions', displayName: 'DashboardStringId.DescriptionDimensions', array: true };
exports.showAllValue = { propertyName: 'showAllValue', modelName: '@ShowAllValue', displayName: 'DashboardWebStringId.FilterItem.ShowAllValue', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.enableSearch = { propertyName: 'enableSearch', modelName: '@EnableSearch', displayName: 'DashboardWebStringId.FilterItem.EnableSearch', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool, category: _base_metadata_1.PropertyCategory.ViewModel };
exports.filterElementItemBaseSerializationInfo = _data_dashboard_item_1.dataDashboardItemSerializationsInfo.concat([exports.filterDimensions, interactivity_options_1._filterItemInteractivityOptionsMeta, exports.enableSearch]);


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var color_scheme_entry_1 = __webpack_require__(104);
var _custom_properties_utils_1 = __webpack_require__(178);
var dashboard_state_1 = __webpack_require__(125);
var ef_data_source_1 = __webpack_require__(138);
var federation_data_source_1 = __webpack_require__(207);
var sql_data_source_1 = __webpack_require__(90);
var _data_source_factory_base_1 = __webpack_require__(513);
var _array_utils_1 = __webpack_require__(49);
var _dashboard_component_name_generator_1 = __webpack_require__(254);
var _dashboard_item_helper_1 = __webpack_require__(102);
var _date_utils_1 = __webpack_require__(41);
var _helper_classes_1 = __webpack_require__(36);
var _knockout_utils_1 = __webpack_require__(17);
var _undo_engine_helper_1 = __webpack_require__(27);
var data_dashboard_item_1 = __webpack_require__(9);
var group_item_1 = __webpack_require__(131);
var tab_container_item_1 = __webpack_require__(87);
var _dashboard_item_factory_1 = __webpack_require__(464);
var dashboard_layout_group_1 = __webpack_require__(105);
var dashboard_layout_item_1 = __webpack_require__(516);
var _dashboard_layout_creator_1 = __webpack_require__(465);
var _layout_utils_1 = __webpack_require__(106);
var _dashboard_1 = __webpack_require__(511);
var parameter_1 = __webpack_require__(140);
var serializable_model_1 = __webpack_require__(5);
var Dashboard = (function (_super) {
    __extends(Dashboard, _super);
    function Dashboard(dashboardJSON, serializer) {
        if (dashboardJSON === void 0) { dashboardJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, dashboardJSON, serializer) || this;
        _this.dashboardJSON = dashboardJSON;
        _this._disposables = [];
        _this.dataSources = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(dashboardJSON.DataSources, function (item) { return Dashboard._createDataSource(item, serializer); });
        _this.groups = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(dashboardJSON.Groups, function (group) { return _dashboard_item_factory_1.createDashboardItem(group, serializer); });
        _this.items = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(dashboardJSON.Items, function (item) { return _dashboard_item_factory_1.createDashboardItem(item, serializer); });
        _this._tabPages = ko.observableArray();
        _this._componentNameGenerator = new _dashboard_component_name_generator_1.DashboardUniqueNameGenerator('componentName', 1, _this.dataSources, _this.items, _this.groups, _this._tabPages);
        _this._allItems = ko.pureComputed(function () { return _this.items().concat(_this.groups(), _this._tabPages()); });
        _knockout_utils_1.subscribeArrayChange(_this.dataSources, {
            added: function (newDataSource) {
                if (newDataSource instanceof federation_data_source_1.FederationDataSource) {
                    newDataSource.context()
                        .forEach(function (contextItem) {
                        var dataSourceToAdd = contextItem.source();
                        _this.dataSources.push(dataSourceToAdd);
                        var source = newDataSource.sources().filter(function (source) { return source.dataSource() === contextItem.id(); })[0];
                        if (source) {
                            source.dataSource(dataSourceToAdd.componentName());
                        }
                    });
                    newDataSource.context.removeAll();
                }
                if (!newDataSource.name()) {
                    newDataSource.name(_helper_classes_1.NameGenerator.generateName(_default_1.getLocalizationById('DashboardStringId.DefaultDataSourceName') + ' ', ko.unwrap(_this.dataSources), 'name', 1));
                }
            }
        });
        _this._disposables.push(ko.computed(function () {
            var newTabPagesList = _this.items()
                .filter(function (item) { return item instanceof tab_container_item_1.TabContainerItem; })
                .reduce(function (acc, tabPage) { return acc.concat(tabPage.tabPages()); }, []);
            _this._tabPages()
                .filter(function (removedTabPage) { return newTabPagesList.indexOf(removedTabPage) === -1; })
                .forEach(function (removedTabPage) { return _this._tabPages.remove(removedTabPage); });
            newTabPagesList
                .filter(function (newTabPage) { return _this._tabPages().indexOf(newTabPage) === -1; })
                .forEach(function (newTabPage) { return _this._tabPages.push(newTabPage); });
        }));
        _this._disposables.push(_this._componentNameGenerator);
        _this.parameters = ko.observableArray();
        _this.parameters(dx_analytics_core_1.default.Analytics.Utils.deserializeArray(dashboardJSON.Parameters, function (item) { return new parameter_1.Parameter(item, serializer); })());
        _this.colorScheme = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(dashboardJSON.ColorScheme, function (item) { return new color_scheme_entry_1.ColorSchemeEntry(item, serializer); });
        _this._disposables.push(_knockout_utils_1.subscribeArrayChange(_this.dataSources, {
            deleted: _this._processDeleteDataSource.bind(_this)
        }));
        _this._queryParameters = ko.computed(function () {
            return parameter_1._getParametersQuery(_this.parameters());
        });
        _this._dataDashboardItems = ko.computed(function () {
            return _this.items().filter(function (item) { return item instanceof data_dashboard_item_1.DataDashboardItem; });
        });
        _this._masterFilterItems = ko.computed(function () {
            return _this._dataDashboardItems()
                .filter(function (item) { return item._isMasterFilter() && _this._interactivityGroupPathToRoot(item).every(function (containerItem) { return containerItem.interactivityOptions.isMasterFilter(); }); });
        });
        _this._disposables.push(ko.computed(function () {
            _this._dataDashboardItems().forEach(function (detailItem) {
                var masterItems = _this._dataDashboardItems()
                    .filter(function (item) { return item !== detailItem && item._isMasterFilter(); })
                    .filter(function (item) {
                    if (item.isMasterFilterCrossDataSource())
                        return true;
                    return item.dataSource() == detailItem.dataSource() && item.dataMember() == detailItem.dataMember();
                })
                    .filter(function (item) {
                    var masterGroups = _this._interactivityGroupPathToRoot(item).reverse();
                    var detailGroups = _this._interactivityGroupPathToRoot(detailItem).reverse();
                    while (masterGroups.length && detailGroups.length && masterGroups[0] === detailGroups[0]) {
                        masterGroups.shift();
                        detailGroups.shift();
                    }
                    if (masterGroups.some(function (masterGroup) { return !masterGroup.interactivityOptions.isMasterFilter(); })) {
                        return false;
                    }
                    if (detailGroups.length === 0) {
                        return !detailItem._isIgnoreMasterFilter();
                    }
                    else {
                        return !detailGroups[0].interactivityOptions.ignoreMasterFilters();
                    }
                });
                if (!_array_utils_1.arrayEquals(detailItem._masterFilterItems.peek(), masterItems)) {
                    detailItem._masterFilterItems(masterItems);
                }
            });
        }));
        _this._state = ko.computed({
            read: function () {
                var state = new dashboard_state_1.DashboardState();
                if (_this.parameters().length > 0) {
                    var parametersState = {};
                    _this.parameters().forEach(function (param) {
                        parametersState[param.name()] = _date_utils_1.toStringArray(param._actualValue());
                    });
                    if (Object.keys(parametersState).length) {
                        state.Parameters = parametersState;
                    }
                }
                if (_this.items().length > 0) {
                    var itemsState = {};
                    _this.items().forEach(function (item) {
                        var itemState = item._state();
                        if (itemState && Object.keys(itemState).length) {
                            itemsState[item.componentName()] = itemState;
                        }
                    });
                    if (Object.keys(itemsState).length) {
                        state.Items = itemsState;
                    }
                }
                return state;
            },
            write: function (dashboardState) {
                var obsoleteDashboardState = dashboardState;
                var parametersState = dashboardState.Parameters || obsoleteDashboardState.parameters;
                if (parametersState) {
                    _this.parameters().forEach(function (parameter) {
                        if (parametersState[parameter.name()] !== undefined) {
                            var parameterValue = parametersState[parameter.name()];
                            if (Array.isArray(parameterValue)) {
                                parameterValue = parameterValue.map(_date_utils_1.tryConvertToDateTime);
                            }
                            else {
                                parameterValue = _date_utils_1.tryConvertToDateTime(parameterValue);
                            }
                            parameter._value(parameterValue);
                        }
                    });
                }
                var itemsState = dashboardState.Items || obsoleteDashboardState.items;
                if (itemsState) {
                    Object.keys(itemsState).forEach(function (name) {
                        var dashboardItemModel = _this.findItem(name);
                        if (dashboardItemModel) {
                            dashboardItemModel._setState(itemsState[name]);
                        }
                    });
                }
            }
        });
        var item = new dashboard_layout_group_1.DashboardLayoutRootGroup(_this, dashboardJSON.LayoutTree || {}, serializer);
        _this.layout(item);
        _this._colorableItems = ko.pureComputed(function () { return _this._dataDashboardItems().filter(function (dataDashboardItem) { return dataDashboardItem._isGloballyColored; }); });
        return _this;
    }
    Dashboard._createDataSource = function (dataSourceJSON, serializer) {
        var itemTypeName = dataSourceJSON['@ItemType'];
        var itemType = Dashboard._dataSourceTypesMap[itemTypeName];
        return new itemType(dataSourceJSON, serializer);
    };
    Object.defineProperty(Dashboard.prototype, "stateString", {
        get: function () {
            var state = this._state();
            return Object.keys(state).length ? JSON.stringify(state) : '';
        },
        set: function (stateVal) {
            if (!stateVal)
                return;
            this._state(JSON.parse(stateVal));
        },
        enumerable: true,
        configurable: true
    });
    Dashboard.prototype.dispose = function () {
        this._disposables.map(function (disposable) { return disposable.dispose(); });
    };
    Dashboard.prototype.getInfo = function () {
        return _dashboard_1.dashboardSerializationsInfo.concat(_custom_properties_utils_1.getCustomPropertiesSerializationInfo(this));
    };
    Dashboard.prototype.getJSON = function () {
        return new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer({ useRefs: false, serializeDate: _date_utils_1.serializeDate }).serialize(this, this.getInfo());
    };
    Dashboard.prototype.findItem = function (itemId) {
        var item = this.items().filter(function (filterItem) { return filterItem.componentName() === itemId; })[0];
        if (!item) {
            item = this.groups().filter(function (filterItem) { return filterItem.componentName() === itemId; })[0];
        }
        if (!item) {
            item = this._tabPages().filter(function (filterItem) { return filterItem.componentName() === itemId; })[0];
        }
        return item;
    };
    Dashboard.prototype.rebuildLayout = function (clientWidth, clientHeight) {
        if (clientWidth === void 0) { clientWidth = 1; }
        if (clientHeight === void 0) { clientHeight = 1; }
        new _dashboard_layout_creator_1.DashboardLayoutCreator(clientWidth, clientHeight, this).rebuildLayout();
    };
    Dashboard.prototype._getDisplayDashboardItem = function (tabPage) {
        if (!tabPage || !tabPage.showItemAsTabPage())
            return tabPage;
        var itemsOnTabPage = this.items().concat(this.groups()).filter(function (item) { return item.parentContainer() === tabPage.componentName(); });
        return itemsOnTabPage.length === 1 && !(itemsOnTabPage[0] instanceof group_item_1.GroupItem) ? itemsOnTabPage[0] : tabPage;
    };
    Dashboard.prototype._changeItem = function (oldItem, newItem) {
        var dashboardLayoutItem = this.layout().findLayoutItem(oldItem);
        this.items.replace(oldItem, newItem);
        if (dashboardLayoutItem) {
            dashboardLayoutItem.item = newItem;
        }
    };
    Dashboard.prototype._duplicateItem = function (item) {
        var dashboardLayoutItem = this.layout().findLayoutItem(item);
        var serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer({ useRefs: false });
        var itemJSON = serializer.serialize(item);
        var itemCopy = _dashboard_item_factory_1.createDashboardItem(itemJSON, serializer);
        itemCopy.componentName(undefined);
        this.items.push(itemCopy);
        var newDashboardLayoutItem = new dashboard_layout_item_1.DashboardLayoutItem();
        newDashboardLayoutItem.item = itemCopy;
        newDashboardLayoutItem.weight(dashboardLayoutItem.weight());
        dashboardLayoutItem.insert(newDashboardLayoutItem, 'left');
    };
    Dashboard.prototype._createDashboardLayoutItem = function (modelItemJson) {
        if (!!modelItemJson) {
            var newItemModel = _dashboard_item_factory_1.createDashboardItem(modelItemJson);
            newItemModel.name(_helper_classes_1.NameGenerator.generateName(_dashboard_item_helper_1.getItemTitle(newItemModel) + ' ', this.items().concat(this.groups()), 'name', 1));
            if (this.dataSources().length > 0 && newItemModel instanceof data_dashboard_item_1.DataDashboardItem) {
                newItemModel.dataSource(this.dataSources()[0].componentName());
                if (this.dataSources()[0] instanceof sql_data_source_1.SqlDataSource) {
                    var sqlDataSource = (this.dataSources()[0]);
                    sqlDataSource.queries().length > 0 && newItemModel.dataMember(sqlDataSource.queries()[0].name());
                }
                if (this.dataSources()[0] instanceof ef_data_source_1.EFDataSource) {
                    var efDataSource = (this.dataSources()[0]);
                    if (!efDataSource._tables().length) {
                        var subscription = efDataSource._tables.subscribe(function (tables) {
                            var dataDashboardItem = newItemModel;
                            if (dataDashboardItem.dataSource() === efDataSource.componentName() && !dataDashboardItem.dataMember.peek()) {
                                newItemModel.dataMember(tables[0].dataMember());
                            }
                            subscription.dispose();
                        });
                    }
                    else {
                        newItemModel.dataMember(efDataSource._tables()[0].dataMember());
                    }
                }
                if (this.dataSources()[0] instanceof federation_data_source_1.FederationDataSource) {
                    var feredationDataSource = (this.dataSources()[0]);
                    feredationDataSource.queries().length > 0 && newItemModel.dataMember(feredationDataSource.queries()[0].alias());
                }
            }
            if (newItemModel instanceof group_item_1.GroupItem) {
                this.groups.push(newItemModel);
            }
            else {
                this.items.push(newItemModel);
            }
            return this._createDashboardLayoutNode(newItemModel);
        }
        return new dashboard_layout_group_1.DashboardLayoutGroup();
    };
    Dashboard.prototype._createDashboardLayoutNode = function (dashboardItem) {
        var itemType = null;
        if (dashboardItem instanceof group_item_1.GroupItem) {
            itemType = 'LayoutGroup';
        }
        else if (dashboardItem instanceof tab_container_item_1.TabContainerItem) {
            itemType = 'LayoutTabContainer';
        }
        else {
            itemType = 'LayoutItem';
        }
        var newLayoutItemModel = _layout_utils_1.deserializeDashboardLayoutNode({ '@ItemType': itemType });
        newLayoutItemModel.item = dashboardItem;
        return newLayoutItemModel;
    };
    Dashboard.prototype._findDataItem = function (itemId) {
        return this._dataDashboardItems().filter(function (item) { return item.componentName() == itemId; })[0];
    };
    Dashboard.prototype._interactivityGroupPathToRoot = function (dashboardItem) {
        var _this = this;
        var getParentContainerItem = function (item) {
            return (!!item.parentContainer() && _this.findItem(item.parentContainer()) || undefined);
        };
        var parentContainers = [];
        var parentContainerItem = dashboardItem;
        do {
            parentContainerItem = getParentContainerItem(parentContainerItem);
            if (parentContainerItem) {
                parentContainers.push(parentContainerItem);
            }
        } while (parentContainerItem);
        return parentContainers;
    };
    Dashboard.prototype._processDeleteDataSource = function (dataSource) {
        this._dataDashboardItems()
            .filter(function (item) { return item.dataSource() == dataSource.componentName(); })
            .forEach(function (item) { return item._clearBindings(); });
    };
    Dashboard._dataSourceTypesMap = __assign({ 'FederationDataSource': federation_data_source_1.FederationDataSource }, _data_source_factory_base_1._baseDataSourceTypesMap);
    __decorate([
        _undo_engine_helper_1.wrapWithUndoRedo
    ], Dashboard.prototype, "_changeItem", null);
    __decorate([
        _undo_engine_helper_1.wrapWithUndoRedo
    ], Dashboard.prototype, "_duplicateItem", null);
    __decorate([
        _undo_engine_helper_1.wrapWithUndoRedo
    ], Dashboard.prototype, "_processDeleteDataSource", null);
    return Dashboard;
}(serializable_model_1.SerializableModel));
exports.Dashboard = Dashboard;


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var dx_querybuilder_1 = __webpack_require__(1);
var data_source_1 = __webpack_require__(62);
var _sql_data_source_1 = __webpack_require__(488);
var SqlDataSource = (function (_super) {
    __extends(SqlDataSource, _super);
    function SqlDataSource(dataSourceJSON, serializer) {
        if (dataSourceJSON === void 0) { dataSourceJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, dataSourceJSON, serializer) || this;
        _this.queries = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(dataSourceJSON.Queries, function (item) {
            if (item['@Type'] === dx_querybuilder_1.default.Analytics.Data.Utils.SqlQueryType.customSqlQuery) {
                return new dx_querybuilder_1.default.Analytics.Data.CustomSqlQuery(item, null, serializer);
            }
            else if (item['@Type'] === dx_querybuilder_1.default.Analytics.Data.Utils.SqlQueryType.tableQuery) {
                return new dx_querybuilder_1.default.Analytics.Data.TableQuery(item, null, serializer);
            }
            else if (item['@Type'] === dx_querybuilder_1.default.Analytics.Data.Utils.SqlQueryType.storedProcQuery) {
                return new dx_querybuilder_1.default.Analytics.Data.StoredProcQuery(item, null, serializer);
            }
            else {
                throw new Error('Unknown sql query type.');
            }
        });
        _this.hasCalculatedFields = true;
        _this.supportDataMembers = true;
        return _this;
    }
    SqlDataSource.prototype.getInfo = function () {
        return _sql_data_source_1.sqlDataSourceSerializationsInfo;
    };
    SqlDataSource.prototype.getDisplayNamePrefix = function () {
        return 'DashboardStringId.DefaultSqlDataSourceName';
    };
    SqlDataSource.prototype._getDefaultItemType = function () {
        return 'SqlDataSource';
    };
    return SqlDataSource;
}(data_source_1.DataSource));
exports.SqlDataSource = SqlDataSource;


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.titleHeight = 42;
exports.titleVerticalPadding = 3;
exports.contentToolbarHeight = 34;


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var MAX_ICON_NUMBER = 7;
var ContainerTypeSelector = (function () {
    function ContainerTypeSelector(_containersMap, containerType, _containerGroupLocalization, _highlightedTypes) {
        var _this = this;
        this._containersMap = _containersMap;
        this.containerType = containerType;
        this._containerGroupLocalization = _containerGroupLocalization;
        this._highlightedTypes = _highlightedTypes;
        this.headerClick = function (data, event) {
            if (!_this.hasFullList) {
                event.stopPropagation();
                return false;
            }
        };
        this.itemClick = function (data, event) {
            _this.containerType(ko.unwrap(data.value));
            event.stopPropagation();
            event.originalEvent && event.originalEvent.stopPropagation();
            return false;
        };
    }
    Object.defineProperty(ContainerTypeSelector.prototype, "shortAvailableContainerTypes", {
        get: function () {
            var _this = this;
            var iconNumber = MAX_ICON_NUMBER - (this.hasFullList ? 1 : 0);
            var highlightedTypes = this.availableContainerTypes
                .filter(function (type) {
                if (_this._highlightedTypes) {
                    return _this._highlightedTypes.indexOf(type.value) !== -1;
                }
                else {
                    return true;
                }
            })
                .slice(0, iconNumber);
            var selected = this.availableContainerTypes.filter(function (t) { return t.selected; })[0];
            if (selected) {
                if (!highlightedTypes.filter(function (containerType) { return containerType.value === selected.value; })[0]) {
                    highlightedTypes.pop();
                    highlightedTypes.unshift(selected);
                }
            }
            return highlightedTypes;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContainerTypeSelector.prototype, "hasFullList", {
        get: function () {
            var length = Object.keys(this._containersMap).length;
            return (length > MAX_ICON_NUMBER);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContainerTypeSelector.prototype, "availableContainerTypes", {
        get: function () {
            var _this = this;
            var containerTypes = Object.keys(this._containersMap || {}).map(function (name) {
                var info = _this._containersMap[name];
                return {
                    value: name,
                    group: info.group,
                    displayName: info.displayName,
                    icon: info.icon,
                    selected: name === _this.containerType()
                };
            });
            return containerTypes;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContainerTypeSelector.prototype, "availableContainerTypeGroups", {
        get: function () {
            var _this = this;
            return Object.keys(this._containersMap).reduce(function (groups, value) {
                var info = _this._containersMap[value];
                if (!groups.filter(function (group) { return group.name === info.group; })[0]) {
                    groups.push({
                        name: info.group,
                        displayName: _this._containerGroupLocalization && _this._containerGroupLocalization[info.group] || info.group
                    });
                }
                return groups;
            }, []);
        },
        enumerable: true,
        configurable: true
    });
    return ContainerTypeSelector;
}());
exports.ContainerTypeSelector = ContainerTypeSelector;


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var data_item_1 = __webpack_require__(8);
var dimension_1 = __webpack_require__(43);
var _data_field_1 = __webpack_require__(14);
var _undo_engine_helper_1 = __webpack_require__(27);
var _binding_model_1 = __webpack_require__(751);
var _display_name_provider_1 = __webpack_require__(24);
var _data_item_container_seed_1 = __webpack_require__(643);
var _data_item_container_surface_1 = __webpack_require__(644);
var DataItemContainerCollectionSurface = (function () {
    function DataItemContainerCollectionSurface(itemSurface, holder, sectionInfo, warning) {
        var _this = this;
        this.itemSurface = itemSurface;
        this.holder = holder;
        this.sectionInfo = sectionInfo;
        this.warning = warning;
        this._disposables = [];
        this.supportGroups = true;
        this.addDataItemContainerClick = function () {
            var dataItemContainer = new _data_item_container_seed_1.DataItemContainerSeed(_this.itemSurface.dashboardItem, _this.sectionInfo.bindingProperty.dataItemType);
            _this.selectContainerSample(dataItemContainer);
        };
        this.selectContainerSample = function (dataItemContainer) {
            _this.newContainerSample(dataItemContainer);
            var newContainerSurface = new _data_item_container_surface_1.DataItemContainerSurface(dataItemContainer, _this.sectionInfo.detailsPropertiesComposer, _this.itemSurface, _this.removeDataItem);
            newContainerSurface.dataFieldChoosed.add(function (dataField) {
                _this._chooseDataField(dataField, newContainerSurface);
            });
            _this._disposables.push(newContainerSurface.containerType.subscribe(function (containerType) {
                var newContainer = _this.sectionInfo.bindingProperty.creator(containerType);
                _this.selectContainerSample(newContainer);
            }));
            _this.itemSurface.propertiesController.mainModel({
                data: newContainerSurface,
                containingCollection: _this.items
            });
        };
        this.removeDataItem = function (container) {
            _this._removeDataItem(container);
        };
        this.dataItemDisplayNameProvider = function (dataItem) {
            return _display_name_provider_1.getDataItemDisplayName(_this.itemSurface._dataSourceBrowser, _this.itemSurface.dashboardItem, dataItem);
        };
        this.getDisplayName = function (object) {
            return _display_name_provider_1.getDataItemContainerDisplayName(_this.itemSurface._dataSourceBrowser, _this.itemSurface.dashboardItem, object);
        };
        this.selectDataItemContainer = function (container) {
            var surface = new _data_item_container_surface_1.DataItemContainerSurface(container, _this.sectionInfo.detailsPropertiesComposer, _this.itemSurface, _this.removeDataItem);
            surface.dataFieldChoosed.add(function (dataField, link) {
                if (link) {
                    var newContainer = _this.sectionInfo.bindingProperty.creator('', dataField);
                    var binding = newContainer._getBindingModel()[0];
                    newContainer[binding.propertyName].uniqueName(link.uniqueName());
                    var prevContainers = _this.items().filter(function (item) {
                        var bindingProperty = item[binding.propertyName];
                        if (!!bindingProperty) {
                            return bindingProperty.dataItem().groupIndex && bindingProperty.dataItem().groupIndex() === link.dataItem().groupIndex();
                        }
                        return false;
                    });
                    _this.items.splice(_this.items().indexOf(prevContainers[prevContainers.length - 1]) + 1, 0, newContainer);
                }
            });
            _this._disposables.push(surface.containerType.subscribe(function (containerType) {
                _this._processChangeContainerType(containerType, container, surface);
            }));
            _this.itemSurface.propertiesController.mainModel({
                data: surface,
                containingCollection: _this.items
            });
        };
        this.newContainerSample = ko.observable();
        this.template = 'dx-dashboard-data-item-container-collection';
        this.groups = ko.computed(function () {
            var result = [], position = 0;
            _this.items().forEach(function (dataItemContainer) {
                var dataItem = dataItemContainer[dataItemContainer._getBindingModel()[0].propertyName].dataItem();
                if (dataItem instanceof dimension_1.Dimension && _data_field_1.IsOlapHierarchyField(dataItem)) {
                    var dimension = dataItem;
                    var group = result.filter(function (group) { return group.groupIndex === dimension.groupIndex(); })[0];
                    if (!group) {
                        group = {
                            groupIndex: dimension.groupIndex(),
                            items: [],
                            position: position++
                        };
                        result.push(group);
                    }
                    group.items.push(dataItemContainer);
                }
                else {
                    result.push({
                        groupIndex: undefined,
                        items: [dataItemContainer],
                        position: position++
                    });
                }
            });
            return result;
        });
        this._disposables.push(this.groups);
    }
    Object.defineProperty(DataItemContainerCollectionSurface.prototype, "items", {
        get: function () {
            return this.holder[this.sectionInfo.bindingProperty.propertyName];
        },
        enumerable: true,
        configurable: true
    });
    DataItemContainerCollectionSurface.prototype._chooseDataField = function (dataField, newContainerSurface) {
        var containerModel = [newContainerSurface.model()];
        if (containerModel[0] instanceof _data_item_container_seed_1.DataItemContainerSeed) {
            containerModel = containerModel[0].grow(this.itemSurface.dashboardItem, this.sectionInfo.bindingProperty, dataField);
        }
        this.items.push.apply(this.items, containerModel);
        this.newContainerSample(undefined);
        this.selectDataItemContainer(containerModel[0]);
    };
    DataItemContainerCollectionSurface.prototype._removeDataItem = function (container) {
        var _this = this;
        this.groups().forEach(function (group) {
            if (!!group.items.filter(function (item) { return item === container; })[0]) {
                group.items.forEach(function (item) {
                    _this.items.remove(item);
                    item._getBindingModel().forEach(function (binding) {
                        var dataItem = item[binding.propertyName].dataItem();
                        if (!!dataItem) {
                            _this.itemSurface.dashboardItem._removeDataItem(dataItem, true);
                        }
                    });
                });
            }
        });
    };
    DataItemContainerCollectionSurface.prototype._processChangeContainer = function (newContainer, transfers, container, surface) {
        var _this = this;
        var position = this.items().indexOf(surface.model());
        transfers.forEach(function (transfer) {
            var link = newContainer[transfer.newBinding.propertyName];
            _this.itemSurface.dashboardItem._updateDataItem(transfer.dataItem, transfer.newBinding, transfer.dataField, link._specifics.acceptableShapingType);
            link.uniqueName(transfer.dataItem.uniqueName());
            _this.items.splice(position, 1, newContainer);
            link.dataItem().grabFrom(transfer.dataItem);
        });
        this.selectDataItemContainer(newContainer);
    };
    DataItemContainerCollectionSurface.prototype.getCompatibleTransfers = function (container, newContainer) {
        var _this = this;
        if (_binding_model_1._areTheSameBindingProviders(container, newContainer)) {
            return newContainer
                ._getBindingModel()
                .map(function (binding) {
                var filledBinding = container._getBindingModel().filter(function (b) { return b.propertyName === binding.propertyName; })[0];
                if (!filledBinding)
                    return;
                if (!container[filledBinding.propertyName].uniqueName()) {
                    return;
                }
                var dataItem = container[filledBinding.propertyName].dataItem();
                var transferInfo = {
                    filledBinding: filledBinding,
                    dataItem: dataItem,
                    newBinding: binding,
                    dataField: null,
                    promise: _this.itemSurface._dataSourceBrowser.findDataField(_this.itemSurface.dashboardItem.dataSource(), _this.itemSurface.dashboardItem.dataMember(), dataItem.dataMember())
                };
                transferInfo.promise.done(function (field) {
                    transferInfo.dataField = field;
                });
                return transferInfo;
            })
                .filter(function (t) { return !!t; });
        }
        return [];
    };
    DataItemContainerCollectionSurface.prototype._processChangeContainerType = function (containerType, container, surface) {
        var _this = this;
        var newContainer = this.sectionInfo.bindingProperty.creator(containerType);
        if (!!newContainer.grabFrom) {
            newContainer.grabFrom(container);
        }
        var transfers = this.getCompatibleTransfers(container, newContainer);
        if (transfers.length === 0) {
            var filledBinding = container._getBindingModel().filter(function (b) { return !!container[b.propertyName].uniqueName(); })[0];
            var dataItem = container[filledBinding.propertyName].dataItem();
            var binding = newContainer._getBindingModel()[0];
            var transferInfo_1 = {
                filledBinding: filledBinding,
                dataItem: dataItem,
                newBinding: binding,
                dataField: null,
                promise: this.itemSurface._dataSourceBrowser.findDataField(this.itemSurface.dashboardItem.dataSource(), this.itemSurface.dashboardItem.dataMember(), dataItem.dataMember())
            };
            transferInfo_1.promise.done(function (field) {
                transferInfo_1.dataField = field;
            });
            transfers.push(transferInfo_1);
        }
        $.when.apply($, transfers.map(function (t) { return t.promise; })).done(function () { return _this._processChangeContainer(newContainer, transfers, container, surface); });
    };
    DataItemContainerCollectionSurface.prototype.relocateItem = function (item, placeholderIndex) {
        var _this = this;
        var dataItem;
        if (item instanceof data_item_1.DataItemLink) {
            dataItem = item.dataItem();
        }
        else if (item['_getBindingModel']) {
            this.items.splice(placeholderIndex, 0, item);
            return;
        }
        this.itemSurface
            ._dataSourceBrowser.findDataField(this.itemSurface.dashboardItem.dataSource(), this.itemSurface.dashboardItem.dataMember(), dataItem.dataMember())
            .done(function (dataField) {
            var newContainer = _this.sectionInfo.bindingProperty.creator(undefined, dataField, dataItem);
            var binding = newContainer._getBindingModel()[0];
            var link = newContainer[binding.propertyName];
            _this.itemSurface.dashboardItem._updateDataItem(dataItem, binding, dataField, link._specifics.acceptableShapingType);
            link.uniqueName(dataItem.uniqueName());
            link.dataItem().grabFrom(dataItem);
            _this.items.splice(placeholderIndex, 0, newContainer);
        });
    };
    DataItemContainerCollectionSurface.prototype.isOlap = function () {
        var filledLink = this
            .items()
            .reduce(function (links, container) { return links.concat(container._getBindingModel().map(function (bm) { return container[bm.propertyName]; })); }, [])
            .filter(function (dil) { return dil.dataItem(); })[0];
        return _data_field_1.DataField.isOlap(filledLink.dataItem().dataMember());
    };
    DataItemContainerCollectionSurface.prototype.errorFactory = function (container) {
        var _this = this;
        var errorState = ko.observable(false);
        var fieldPromises = [];
        container
            ._getBindingModel()
            .filter(function (binding) { return container[binding.propertyName].dataItem(); })
            .forEach(function (binding) {
            fieldPromises.push(_this.itemSurface._dataSourceBrowser.findDataField(_this.itemSurface.dashboardItem.dataSource(), _this.itemSurface.dashboardItem.dataMember(), container[binding.propertyName].dataItem().dataMember()));
        });
        var isCorruptedDataField = function (field) { return !field || field.isCorruptedCalcField && field.isCorruptedCalcField(); };
        $.when.apply($.when, fieldPromises).done(function () {
            var fields = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                fields[_i] = arguments[_i];
            }
            errorState(fields.filter(function (f) { return isCorruptedDataField(f); }).length > 0);
        });
        return errorState;
    };
    DataItemContainerCollectionSurface.prototype.dispose = function () {
        this._disposables.forEach(function (d) {
            d.dispose();
        });
    };
    __decorate([
        _undo_engine_helper_1.wrapWithUndoRedo
    ], DataItemContainerCollectionSurface.prototype, "_chooseDataField", null);
    __decorate([
        _undo_engine_helper_1.wrapWithUndoRedo
    ], DataItemContainerCollectionSurface.prototype, "_removeDataItem", null);
    __decorate([
        _undo_engine_helper_1.wrapWithUndoRedo
    ], DataItemContainerCollectionSurface.prototype, "_processChangeContainer", null);
    __decorate([
        _undo_engine_helper_1.wrapWithUndoRedo
    ], DataItemContainerCollectionSurface.prototype, "relocateItem", null);
    return DataItemContainerCollectionSurface;
}());
exports.DataItemContainerCollectionSurface = DataItemContainerCollectionSurface;


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _common_1 = __webpack_require__(35);
var PointLabelContentType;
(function (PointLabelContentType) {
    PointLabelContentType[PointLabelContentType["None"] = 0] = "None";
    PointLabelContentType[PointLabelContentType["Argument"] = 1] = "Argument";
    PointLabelContentType[PointLabelContentType["SeriesName"] = 2] = "SeriesName";
    PointLabelContentType[PointLabelContentType["Value"] = 4] = "Value";
    PointLabelContentType[PointLabelContentType["Percent"] = 8] = "Percent";
})(PointLabelContentType = exports.PointLabelContentType || (exports.PointLabelContentType = {}));
exports.parsePointLabelContentType = function (typeModel) {
    return _common_1.parseFlagsEnumType(typeModel, PointLabelContentType.None, exports.PointLabelContentTypeDictionary);
};
exports.serializePointLabelContentType = function (val) {
    return _common_1.serializeFlagsEnumType(val, 'None', exports.PointLabelContentTypeDictionary);
};
exports.getPointLabelContentTypeValues = function (val) {
    return _common_1.getFlagsEnumTypeValues(val, exports.PointLabelContentTypeDictionary, 'value');
};
exports.PointLabelContentTypeDictionary = {
    'Argument': PointLabelContentType.Argument,
    'SeriesName': PointLabelContentType.SeriesName,
    'Value': PointLabelContentType.Value,
    'Percent': PointLabelContentType.Percent
};
var FilterDateType;
(function (FilterDateType) {
    FilterDateType[FilterDateType["None"] = 0] = "None";
    FilterDateType[FilterDateType["BeyondThisYear"] = 2] = "BeyondThisYear";
    FilterDateType[FilterDateType["LaterThisYear"] = 4] = "LaterThisYear";
    FilterDateType[FilterDateType["LaterThisMonth"] = 8] = "LaterThisMonth";
    FilterDateType[FilterDateType["LaterThisWeek"] = 16] = "LaterThisWeek";
    FilterDateType[FilterDateType["NextWeek"] = 32] = "NextWeek";
    FilterDateType[FilterDateType["Tomorrow"] = 64] = "Tomorrow";
    FilterDateType[FilterDateType["Today"] = 128] = "Today";
    FilterDateType[FilterDateType["Yesterday"] = 256] = "Yesterday";
    FilterDateType[FilterDateType["EarlierThisWeek"] = 512] = "EarlierThisWeek";
    FilterDateType[FilterDateType["LastWeek"] = 1024] = "LastWeek";
    FilterDateType[FilterDateType["EarlierThisMonth"] = 2048] = "EarlierThisMonth";
    FilterDateType[FilterDateType["EarlierThisYear"] = 4096] = "EarlierThisYear";
    FilterDateType[FilterDateType["PriorThisYear"] = 8192] = "PriorThisYear";
    FilterDateType[FilterDateType["Empty"] = 16384] = "Empty";
    FilterDateType[FilterDateType["Beyond"] = 131072] = "Beyond";
    FilterDateType[FilterDateType["ThisWeek"] = 262144] = "ThisWeek";
    FilterDateType[FilterDateType["ThisMonth"] = 524288] = "ThisMonth";
    FilterDateType[FilterDateType["MonthAfter1"] = 1048576] = "MonthAfter1";
    FilterDateType[FilterDateType["MonthAfter2"] = 2097152] = "MonthAfter2";
    FilterDateType[FilterDateType["MonthAgo1"] = 4194304] = "MonthAgo1";
    FilterDateType[FilterDateType["MonthAgo2"] = 8388608] = "MonthAgo2";
    FilterDateType[FilterDateType["MonthAgo3"] = 16777216] = "MonthAgo3";
    FilterDateType[FilterDateType["MonthAgo4"] = 33554432] = "MonthAgo4";
    FilterDateType[FilterDateType["MonthAgo5"] = 67108864] = "MonthAgo5";
    FilterDateType[FilterDateType["MonthAgo6"] = 134217728] = "MonthAgo6";
    FilterDateType[FilterDateType["Earlier"] = 268435456] = "Earlier";
})(FilterDateType = exports.FilterDateType || (exports.FilterDateType = {}));


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.chartHelper = {
    SelectionMode: {
        Argument: 'Argument',
        Series: 'Series',
        Points: 'Points'
    },
    ChartLegendInsidePosition: {
        TopLeftVertical: 'TopLeftVertical',
        TopLeftHorizontal: 'TopLeftHorizontal',
        TopCenterVertical: 'TopCenterVertical',
        TopCenterHorizontal: 'TopCenterHorizontal',
        TopRightVertical: 'TopRightVertical',
        TopRightHorizontal: 'TopRightHorizontal',
        BottomLeftVertical: 'BottomLeftVertical',
        BottomLeftHorizontal: 'BottomLeftHorizontal',
        BottomCenterVertical: 'BottomCenterVertical',
        BottomCenterHorizontal: 'BottomCenterHorizontal',
        BottomRightVertical: 'BottomRightVertical',
        BottomRightHorizontal: 'BottomRightHorizontal'
    },
    ChartLegendOutsidePosition: {
        TopLeftVertical: 'TopLeftVertical',
        TopLeftHorizontal: 'TopLeftHorizontal',
        TopCenterHorizontal: 'TopCenterHorizontal',
        TopRightVertical: 'TopRightVertical',
        TopRightHorizontal: 'TopRightHorizontal',
        BottomLeftVertical: 'BottomLeftVertical',
        BottomLeftHorizontal: 'BottomLeftHorizontal',
        BottomCenterHorizontal: 'BottomCenterHorizontal',
        BottomRightVertical: 'BottomRightVertical',
        BottomRightHorizontal: 'BottomRightHorizontal'
    },
    convertSeriesType: function (viewSeriesType) {
        switch (viewSeriesType) {
            case 'Bar': return 'bar';
            case 'StackedBar': return 'stackedbar';
            case 'FullStackedBar': return 'fullstackedbar';
            case 'Point': return 'scatter';
            case 'Line': return 'line';
            case 'StackedLine': return 'stackedline';
            case 'FullStackedLine': return 'fullstackedline';
            case 'StepLine': return 'stepline';
            case 'Spline': return 'spline';
            case 'Area': return 'area';
            case 'StackedArea': return 'stackedarea';
            case 'FullStackedArea': return 'fullstackedarea';
            case 'StepArea': return 'steparea';
            case 'SplineArea': return 'splinearea';
            case 'StackedSplineArea': return 'stackedsplinearea';
            case 'FullStackedSplineArea': return 'fullstackedsplinearea';
            case 'SideBySideRangeBar': return 'rangebar';
            case 'RangeArea': return 'rangearea';
            case 'CandleStick': return 'candlestick';
            case 'Stock': return 'stock';
            case 'Donut': return 'doughnut';
            case 'Pie': return 'pie';
            case 'HighLowClose': return 'stock';
            case 'Weighted': return 'bubble';
            default:
                return 'area';
        }
    },
    convertPresentationUnit: function (argumentViewModel) {
        if (argumentViewModel && argumentViewModel.Type === 'DateTime') {
            switch (argumentViewModel.DateTimePresentationUnit) {
                case 'Second':
                    return 'second';
                case 'Minute':
                    return 'minute';
                case 'Hour':
                    return 'hour';
                case 'Day':
                    return 'day';
                case 'Month':
                    return 'month';
                case 'Week':
                    return 'week';
                case 'Quarter':
                    return 'quarter';
                default:
                    return null;
            }
        }
        return null;
    },
    convertLegendInsidePosition: function (position) {
        var legendPosition = this.ChartLegendInsidePosition;
        switch (position) {
            case legendPosition.TopLeftVertical:
                return {
                    verticalAlignment: 'top',
                    horizontalAlignment: 'left',
                    orientation: 'vertical'
                };
            case legendPosition.TopLeftHorizontal:
                return {
                    verticalAlignment: 'top',
                    horizontalAlignment: 'left',
                    orientation: 'horizontal'
                };
            case legendPosition.TopCenterVertical:
                return {
                    verticalAlignment: 'top',
                    horizontalAlignment: 'center',
                    orientation: 'vertical'
                };
            case legendPosition.TopCenterHorizontal:
                return {
                    verticalAlignment: 'top',
                    horizontalAlignment: 'center',
                    orientation: 'horizontal'
                };
            case legendPosition.TopRightVertical:
                return {
                    verticalAlignment: 'top',
                    horizontalAlignment: 'right',
                    orientation: 'vertical'
                };
            case legendPosition.TopRightHorizontal:
                return {
                    verticalAlignment: 'top',
                    horizontalAlignment: 'right',
                    orientation: 'horizontal'
                };
            case legendPosition.BottomLeftVertical:
                return {
                    verticalAlignment: 'bottom',
                    horizontalAlignment: 'left',
                    orientation: 'vertical'
                };
            case legendPosition.BottomLeftHorizontal:
                return {
                    verticalAlignment: 'bottom',
                    horizontalAlignment: 'left',
                    orientation: 'horizontal'
                };
            case legendPosition.BottomCenterVertical:
                return {
                    verticalAlignment: 'bottom',
                    horizontalAlignment: 'center',
                    orientation: 'vertical'
                };
            case legendPosition.BottomCenterHorizontal:
                return {
                    verticalAlignment: 'bottom',
                    horizontalAlignment: 'center',
                    orientation: 'horizontal'
                };
            case legendPosition.BottomRightVertical:
                return {
                    verticalAlignment: 'bottom',
                    horizontalAlignment: 'right',
                    orientation: 'vertical'
                };
            case legendPosition.BottomRightHorizontal:
                return {
                    verticalAlignment: 'bottom',
                    horizontalAlignment: 'right',
                    orientation: 'horizontal'
                };
            default:
                return {
                    verticalAlignment: 'top',
                    horizontalAlignment: 'center',
                    orientation: 'horizontal'
                };
        }
    },
    convertLegendOutsidePosition: function (position) {
        var legendPosition = this.ChartLegendOutsidePosition;
        switch (position) {
            case legendPosition.TopLeftVertical:
                return {
                    verticalAlignment: 'top',
                    horizontalAlignment: 'left',
                    orientation: 'vertical'
                };
            case legendPosition.TopLeftHorizontal:
                return {
                    verticalAlignment: 'top',
                    horizontalAlignment: 'left',
                    orientation: 'horizontal'
                };
            case legendPosition.TopCenterHorizontal:
                return {
                    verticalAlignment: 'top',
                    horizontalAlignment: 'center',
                    orientation: 'horizontal'
                };
            case legendPosition.TopRightVertical:
                return {
                    verticalAlignment: 'top',
                    horizontalAlignment: 'right',
                    orientation: 'vertical'
                };
            case legendPosition.TopRightHorizontal:
                return {
                    verticalAlignment: 'top',
                    horizontalAlignment: 'right',
                    orientation: 'horizontal'
                };
            case legendPosition.BottomLeftVertical:
                return {
                    verticalAlignment: 'bottom',
                    horizontalAlignment: 'left',
                    orientation: 'vertical'
                };
            case legendPosition.BottomLeftHorizontal:
                return {
                    verticalAlignment: 'bottom',
                    horizontalAlignment: 'left',
                    orientation: 'horizontal'
                };
            case legendPosition.BottomCenterHorizontal:
                return {
                    verticalAlignment: 'bottom',
                    horizontalAlignment: 'center',
                    orientation: 'horizontal'
                };
            case legendPosition.BottomRightVertical:
                return {
                    verticalAlignment: 'bottom',
                    horizontalAlignment: 'right',
                    orientation: 'vertical'
                };
            case legendPosition.BottomRightHorizontal:
                return {
                    verticalAlignment: 'bottom',
                    horizontalAlignment: 'right',
                    orientation: 'horizontal'
                };
            default:
                return {
                    verticalAlignment: 'top',
                    horizontalAlignment: 'center',
                    orientation: 'horizontal'
                };
        }
    },
    convertPointLabelRotationAngle: function (orientation) {
        switch (orientation) {
            case 'RotateRight':
                return 90;
            case 'RotateLeft':
                return 270;
            default:
                return 0;
        }
    },
    convertPointLabelPosition: function (position) {
        if (position == 'Inside')
            return 'inside';
        else
            return 'outside';
    },
    allowArgumentAxisMargins: function (panes) {
        var seriesType = undefined, seriesEqual = true, marginsArgsEnabled;
        if (panes.length == 1) {
            panes[0].SeriesTemplates.forEach(function (seriesTemplate) {
                seriesType = (seriesType == undefined) ? seriesTemplate.SeriesType : seriesType;
                seriesEqual = seriesEqual && (seriesType === seriesTemplate.SeriesType);
            });
            marginsArgsEnabled = !(seriesEqual &&
                (['Area', 'StackedArea', 'FullStackedArea', 'StepArea', 'SplineArea', 'StackedSplineArea', 'RangeArea', 'FullStackedSplineArea'].indexOf(seriesType) !== -1));
        }
        else
            marginsArgsEnabled = true;
        return marginsArgsEnabled;
    },
    isFinancialType: function (type) {
        switch (type) {
            case 'candlestick':
            case 'stock':
                return true;
            default:
                return false;
        }
    },
    isTransparentColorType: function (type) {
        switch (type) {
            case 'area':
            case 'steparea':
            case 'splinearea':
            case 'rangearea':
            case 'bubble':
                return true;
            default:
                return false;
        }
    },
    isSeriesColorSupported: function (type) {
        switch (type) {
            case 'line':
            case 'stackedline':
            case 'fullstackedline':
            case 'stepline':
            case 'spline':
            case 'area':
            case 'fullstackedarea':
            case 'splinearea':
            case 'stackedarea':
            case 'stackedsplinearea':
            case 'fullstackedsplinearea':
            case 'steparea':
            case 'rangearea':
                return true;
            default:
                return false;
        }
    },
    isStackedAreaType: function (type) {
        switch (type) {
            case 'stackedarea':
            case 'fullstackedarea':
            case 'stackedsplinearea':
            case 'fullstackedsplinearea':
                return true;
            default:
                return false;
        }
    }
};


/***/ }),
/* 96 */
/***/ (function(module, exports) {

module.exports = DevExpress.Color;

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var legacy_settings_1 = __webpack_require__(80);
var _item_data_axis_names_1 = __webpack_require__(34);
var special_values_1 = __webpack_require__(39);
var _hashset_wrapper_1 = __webpack_require__(240);
var _localizer_1 = __webpack_require__(16);
var _utils_1 = __webpack_require__(3);
var _data_controller_base_1 = __webpack_require__(48);
var VALUE_EXPR = 'value';
exports.KEY_EXPR = 'key';
var filterElementDataController = (function (_super) {
    __extends(filterElementDataController, _super);
    function filterElementDataController(options) {
        var _this = _super.call(this, options) || this;
        _this._reset();
        return _this;
    }
    filterElementDataController.prototype.getAllItemIndex = function () {
        return this.dataSource ? this.dataSource.indexOf(_localizer_1.ALL_ELEMENT) : -1;
    };
    filterElementDataController.prototype.isAllSelected = function () {
        return this.dataSource && this.selection ? (this.dataSource.length === this.selection.length) : false;
    };
    filterElementDataController.prototype.update = function (selectedValues, encodeHtml, selectionOnly) {
        if (selectionOnly === void 0) { selectionOnly = false; }
        this._reset(selectionOnly);
        var hashset = new _hashset_wrapper_1.HashsetWrapper(selectedValues || []);
        var that = this, key = 0, applySelection = function (dataItem) {
            if (hashset.contains(dataItem[VALUE_EXPR])) {
                that.selection.push(dataItem);
            }
            that.fullSelection.push(dataItem);
        }, hasAllElement = that.viewModel && that.viewModel.ShowAllValue && !that.isMultiselectable() && !that.useNeutralFilterMode, points = that.multiData ? that.multiData.getAxis(_item_data_axis_names_1.itemDataAxisNames.defaultAxis).getPoints(true) : [];
        if (selectionOnly) {
            $.each(that.dataSource, function (_, dataItem) {
                applySelection(dataItem);
            });
        }
        else {
            if (hasAllElement && points.length > 0) {
                that.dataSource.push(_localizer_1.ALL_ELEMENT);
            }
            $.each(points, function (_, point) {
                var dataItem = {}, uniqueValue = point.getUniquePath();
                dataItem[exports.KEY_EXPR] = key++;
                dataItem[VALUE_EXPR] = uniqueValue;
                dataItem[encodeHtml ? 'text' : 'html'] = that.getTitle(point, ', ', true);
                that.dataSource.push(dataItem);
                applySelection(dataItem);
            });
        }
        if (hasAllElement && ((!this.useNeutralFilterMode && that.dataSource.length - 1 === that.selection.length) || (!!this.useNeutralFilterMode && !that.selection.length))) {
            that.selection.splice(0, 0, _localizer_1.ALL_ELEMENT);
            that.fullSelection.splice(0, 0, _localizer_1.ALL_ELEMENT);
        }
    };
    filterElementDataController.prototype.getInteractionValues = function (elements, selectedValues) {
        var hasAll = !this.isMultiselectable() && elements && elements.indexOf(_localizer_1.ALL_ELEMENT) !== -1;
        if (!!this.useNeutralFilterMode && hasAll)
            return null;
        var that = this, values = [], items = hasAll ? that.dataSource : elements;
        $.each(items, function (_, item) {
            if (item !== _localizer_1.ALL_ELEMENT) {
                values.push(that._getDataValue(item));
            }
        });
        return values;
    };
    filterElementDataController.prototype._getDataValue = function (wrappedValue) {
        var itemData = (wrappedValue && wrappedValue.itemData) || wrappedValue;
        if (itemData[VALUE_EXPR] != null)
            return itemData[VALUE_EXPR];
        return null;
    };
    filterElementDataController.prototype._reset = function (selectionOnly) {
        if (selectionOnly === void 0) { selectionOnly = false; }
        if (!selectionOnly) {
            this.dataSource = [];
        }
        this.selection = [];
        this.fullSelection = [];
    };
    return filterElementDataController;
}(_data_controller_base_1.dataControllerBase));
exports.filterElementDataController = filterElementDataController;
var listViewDataController = (function (_super) {
    __extends(listViewDataController, _super);
    function listViewDataController(options) {
        var _this = _super.call(this, options) || this;
        _this.ListBoxType = {
            Checked: 'Checked',
            Radio: 'Radio'
        };
        _this.ComboBoxType = {
            Standard: 'Standard',
            Checked: 'Checked'
        };
        return _this;
    }
    listViewDataController.prototype.isMultiselectable = function () {
        return !this.viewModel || (this.viewModel.ListBoxType == this.ListBoxType.Checked) || (this.viewModel.ComboBoxType == this.ListBoxType.Checked);
    };
    return listViewDataController;
}(filterElementDataController));
exports.listViewDataController = listViewDataController;
var treeViewDataController = (function (_super) {
    __extends(treeViewDataController, _super);
    function treeViewDataController(options) {
        return _super.call(this, options) || this;
    }
    treeViewDataController.prototype.isMultiselectable = function () {
        return true;
    };
    treeViewDataController.prototype.getAllItemIndex = function () {
        return -1;
    };
    treeViewDataController.prototype.isAllSelected = function () {
        return false;
    };
    treeViewDataController.prototype.update = function (selectedValues, encodeHtml, selectionOnly) {
        if (selectionOnly === void 0) { selectionOnly = false; }
        this._reset(selectionOnly);
        if (selectionOnly)
            return this._updateSelection(selectedValues);
        var that = this, hash = _utils_1.wrapHash(selectedValues), sourceItems = that.multiData ? that.multiData.getAxis('Default').getRootPoint().getChildren() : [], key = 1, createDestNode = function (sourceNode) {
            var dataItem = {};
            dataItem[exports.KEY_EXPR] = key++;
            dataItem[VALUE_EXPR] = sourceNode.getUniqueValue();
            dataItem[encodeHtml || !legacy_settings_1.LegacySettings.useLegacyTreeView ? 'text' : 'html'] = sourceNode.getDisplayText();
            if (legacy_settings_1.LegacySettings.useLegacyTreeView) {
                dataItem['expanded'] = that.viewModel.AutoExpandNodes;
            }
            return dataItem;
        }, walkTree = function (sourceNode, destNodeItems, branch, nullChildCount) {
            var children = sourceNode.getChildren();
            var nextNull = 0;
            while (children.length == 1 && children[0].getUniqueValue() === special_values_1.specialValues.olapNullValueGuid) {
                children = children[0].getChildren();
                nextNull++;
            }
            var hasChildren = (children && children.length !== 0), subDestNode = createDestNode(sourceNode), currentBranch = branch.slice();
            subDestNode.nullChildCount = nextNull;
            for (var a = 0; a < nullChildCount; a++)
                currentBranch.push(special_values_1.specialValues.olapNullValueGuid);
            currentBranch.push(subDestNode.value);
            destNodeItems.push(subDestNode);
            if (hasChildren) {
                subDestNode.items = [];
                $.each(children, function (_, node) {
                    walkTree(node, subDestNode.items, currentBranch, nextNull);
                });
            }
            else {
                for (var a = 0; a < nextNull; a++)
                    currentBranch.push(special_values_1.specialValues.olapNullValueGuid);
                if (legacy_settings_1.LegacySettings.useLegacyTreeView) {
                    subDestNode.selected = !!hash[currentBranch];
                }
                else {
                    if (!!hash[currentBranch]) {
                        that.selection.push(subDestNode[exports.KEY_EXPR]);
                    }
                }
            }
        };
        $.each(sourceItems, function (_, sourceItem) {
            walkTree(sourceItem, that.dataSource, [], 0);
        });
    };
    treeViewDataController.prototype.getInteractionValues = function (elements, selectedValues) {
        if (!legacy_settings_1.LegacySettings.useLegacyTreeView)
            return elements;
        var that = this, hash = _utils_1.wrapHash(selectedValues), parent = elements.length ? elements[0].parent : undefined, rootBranch = [], resultSelection = [], prepareSelectionItems = function (items, parentBranch) {
            $.each(items, function (_, item) {
                var itemBranch = parentBranch.slice(), value = that._getDataValue(item), nullChildCount = that._getDataNullChildCount(item);
                itemBranch.push(value);
                for (var a = 0; a < nullChildCount; a++)
                    itemBranch.push(special_values_1.specialValues.olapNullValueGuid);
                if (!!item.items && item.items.length) {
                    prepareSelectionItems(item.items, itemBranch);
                }
                else {
                    var isSelected = !!hash[itemBranch];
                    if ((!legacy_settings_1.LegacySettings.useLegacyTreeView && !isSelected) ||
                        (legacy_settings_1.LegacySettings.useLegacyTreeView && ((item.selected && !isSelected) || (!item.selected && isSelected)))) {
                        resultSelection.push(itemBranch);
                    }
                }
            });
        };
        while (parent) {
            rootBranch.splice(0, 0, that._getDataValue(parent));
            parent = parent.parent;
        }
        prepareSelectionItems(elements, rootBranch);
        return resultSelection;
    };
    treeViewDataController.prototype._updateSelection = function (selectedValues) {
        var that = this;
        var hash = _utils_1.wrapHash(selectedValues);
        var updateItemsSelectedState = function (items, parentBranch) {
            $.each(items, function (_, item) {
                var itemBranch = parentBranch.slice(), value = that._getDataValue(item), nullChildCount = that._getDataNullChildCount(item);
                itemBranch.push(value);
                for (var a = 0; a < nullChildCount; a++)
                    itemBranch.push(special_values_1.specialValues.olapNullValueGuid);
                if (item.items && item.items.length) {
                    updateItemsSelectedState(item.items, itemBranch);
                }
                else {
                    if (legacy_settings_1.LegacySettings.useLegacyTreeView) {
                        item.selected = !!hash[itemBranch];
                    }
                    else {
                        if (!!hash[itemBranch]) {
                            that.selection.push(item[exports.KEY_EXPR]);
                        }
                    }
                }
            });
        };
        updateItemsSelectedState(this.dataSource, []);
    };
    treeViewDataController.prototype._getDataNullChildCount = function (wrappedValue) {
        var itemData = (wrappedValue && wrappedValue.itemData) || wrappedValue;
        if (itemData['nullChildCount'] != null)
            return itemData['nullChildCount'];
        return 0;
    };
    return treeViewDataController;
}(filterElementDataController));
exports.treeViewDataController = treeViewDataController;


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var itemDataTuple = (function () {
    function itemDataTuple(axisPoints) {
        this._axisPoints = axisPoints;
    }
    itemDataTuple.prototype.getAxisPoint = function (axisName) {
        if (axisName) {
            return this._axisPoints.filter(function (axisPoint) {
                return axisPoint.getAxisName() == axisName;
            })[0];
        }
        else {
            return this._axisPoints[0];
        }
    };
    return itemDataTuple;
}());
exports.itemDataTuple = itemDataTuple;


/***/ }),
/* 99 */
/***/ (function(module, exports) {

module.exports = DevExpress.utils.browser;

/***/ }),
/* 100 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.ui.dxDateBox };

/***/ }),
/* 101 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.ui.dxTagBox };

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _default_1 = __webpack_require__(6);
var custom_item_1 = __webpack_require__(103);
var serializable_model_1 = __webpack_require__(5);
function getIconName(typeName, icon) {
    var getCamelType = function (s) { return s[0].toLowerCase() + s.substr(1, s.length); };
    return icon || 'dx-dashboard-toolbox-' + getCamelType(typeName);
}
exports.getIconName = getIconName;
function getItemIconName(item) {
    var icon = item instanceof custom_item_1.CustomItem ? serializable_model_1.itemTypesMap[item.customItemType()].icon : undefined;
    return getIconName(item.itemType(), icon);
}
exports.getItemIconName = getItemIconName;
function getItemTitle(item) {
    var itemType = item instanceof custom_item_1.CustomItem ? item.customItemType() : item.itemType();
    var info = serializable_model_1.itemTypesMap[itemType];
    return !!info.title ? _default_1.getLocalizationById(info.title) : itemType;
}
exports.getItemTitle = getItemTitle;
function getItemJson(itemType) {
    var itemTypeDescription = serializable_model_1.itemTypesMap[itemType];
    return {
        '@ItemType': !!itemTypeDescription.customItemType ? custom_item_1.CustomItem.ItemType : itemType,
        '@CustomItemType': !!itemTypeDescription.customItemType ? itemType : undefined
    };
}
exports.getItemJson = getItemJson;


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var _item_data_axis_point_1 = __webpack_require__(166);
var special_values_1 = __webpack_require__(39);
var _formatter_1 = __webpack_require__(25);
var _utils_1 = __webpack_require__(3);
var color_1 = __webpack_require__(50);
var custom_properties_metadata_1 = __webpack_require__(177);
var _custom_properties_utils_1 = __webpack_require__(178);
var data_item_1 = __webpack_require__(8);
var _data_item_1 = __webpack_require__(20);
var custom_item_calc_window_definition_1 = __webpack_require__(432);
var _knockout_utils_1 = __webpack_require__(17);
var _utils_2 = __webpack_require__(18);
var _base_metadata_1 = __webpack_require__(4);
var data_dashboard_item_1 = __webpack_require__(9);
var interactivity_options_1 = __webpack_require__(32);
var _coloring_options_1 = __webpack_require__(75);
var _custom_item_1 = __webpack_require__(461);
var slice_table_1 = __webpack_require__(462);
var COLOR_MEASURE_ID = 'ColorMeasure';
var CustomItem = (function (_super) {
    __extends(CustomItem, _super);
    function CustomItem(_meta, modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer, CustomItem._getInfo(_meta, modelJson['@CustomItemType'])) || this;
        _this._meta = _meta;
        _this.sliceTables = ko.observableArray();
        _this.interactivityTargets = ko.observableArray();
        _this.coloringDimensions = ko.observableArray();
        _this.coloringMeasures = ko.observableArray();
        _this.customMetadata = {};
        _this._getMeasureValue = function (dataRow, dataItemUniqueName) {
            return _this._getStorage().getValue(dataRow, dataItemUniqueName);
        };
        _this._getMeasureDisplayText = function (dataRow, dataItemUniqueName) {
            var value = _this._getMeasureValue(dataRow, dataItemUniqueName);
            if (value === null || value === undefined) {
                return null;
            }
            var metaData = _this._dataManager().getMetaData(), formatViewModel = metaData.getMeasureFormat(dataItemUniqueName);
            return _this._format(value, formatViewModel);
        };
        _this._getDimensionUniqueValue = function (dataRow, dataItemUniqueName) {
            return _this._getStorage().getKeyValue(dataRow, dataItemUniqueName);
        };
        _this._getDimensionValue = function (dataRow, dataItemUniqueName) {
            var value = _this._getSpecialValue(dataRow, dataItemUniqueName, _item_data_axis_point_1.dataStorageSpecialIds.Value);
            if (value === null || value === undefined)
                value = _this._getDimensionUniqueValue(dataRow, dataItemUniqueName);
            if (value === special_values_1.specialValues.nullValueGuid)
                value = null;
            return value;
        };
        _this._getDimensionDisplayText = function (dataRow, dataItemUniqueName) {
            var displayText = _this._getServerText(dataRow, dataItemUniqueName), uniqueValue = _this._getDimensionUniqueValue(dataRow, dataItemUniqueName);
            if (uniqueValue === special_values_1.specialValues.olapNullValueGuid)
                return undefined;
            if (displayText == null) {
                var metaData = _this._dataManager().getMetaData(), formatViewModel = metaData.getDimensionFormat(dataItemUniqueName);
                displayText = uniqueValue === special_values_1.specialValues.nullValueGuid ?
                    _this._format(uniqueValue, formatViewModel) :
                    _this._format(_this._getDimensionValue(dataRow, dataItemUniqueName), formatViewModel);
            }
            return displayText;
        };
        _this._isExcludingAllFilter = ko.computed(function () {
            if (_this._isMasterFilter() && !!_this.customInteractivity && !!_this.customInteractivity.applyEmptyFilter) {
                var selectionValues = _this._selectionValues();
                return !selectionValues || selectionValues.length === 0;
            }
            return false;
        });
        var modelCustomMetadata = modelJson.CustomMetadata || {};
        _this.customBindings.forEach(function (binding) {
            var linkPropertyName = CustomItem._getBindingLinkName(binding.propertyName);
            if (binding.array) {
                _this[linkPropertyName] = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(modelCustomMetadata[binding.propertyName], function (item) { return new data_item_1.DataItemLink(_this, item, serializer); });
                _this[binding.propertyName] = ko.observableArray([]);
                _this._subscribeDataItemLinkArrays({ propertyName: linkPropertyName, modelName: binding.propertyName });
                _knockout_utils_1.subscribeArrayChange(_this[linkPropertyName], {
                    added: function (item) { return item.itemType(binding.dataItemType); }
                });
            }
            else {
                _this[binding.propertyName] = ko.observable();
                _this._attachDataItem(_this, linkPropertyName, new data_item_1.DataItemLink(_this, modelCustomMetadata[binding.propertyName], serializer));
            }
            _this.customMetadata[linkPropertyName] = _this[linkPropertyName];
        });
        _this.legacyCustomProperties.forEach(function (p) {
            _this.customMetadata[p.propertyName] = _this[p.propertyName] = ko.pureComputed({
                read: function () { return _this.customProperties[p.propertyName](); },
                write: function (value) { return _this.customProperties.setValue(p.propertyName, value); },
            });
        });
        ko.computed(function () {
            var sliceTables = [];
            var interactivityTargets = [];
            var coloringDimensions = [];
            var coloringMeasures = [];
            _this.customBindings.forEach(function (binding) {
                var prop = _this[CustomItem._getBindingLinkName(binding.propertyName)];
                var bindings = (binding.array ? prop() : [prop]).filter(function (link) { return !!link.dataItem(); });
                var sliceTable = sliceTables.filter(function (sliceTable) { return sliceTable.name() === binding.slice; })[0];
                if (!sliceTable) {
                    sliceTable = new slice_table_1.SliceTable(_this, { '@ItemType': 'SliceTable', '@Name': binding.slice });
                    sliceTables.push(sliceTable);
                }
                sliceTable.push(bindings, binding.dataItemType);
                if (binding.enableInteractivity) {
                    interactivityTargets = interactivityTargets.concat(bindings);
                }
                if (binding.enableColoring) {
                    if (binding.dataItemType === 'Dimension') {
                        bindings.forEach(function (link) { return data_dashboard_item_1.DataDashboardItem._addColoringMeta([link]); });
                        if (binding.array) {
                            prop.subscribe(function (links) { return data_dashboard_item_1.DataDashboardItem._addColoringMeta(links); });
                        }
                        coloringDimensions = coloringDimensions.concat(bindings);
                    }
                    if (binding.dataItemType === 'Measure') {
                        coloringMeasures = coloringMeasures.concat(bindings);
                    }
                }
            });
            _this.sliceTables(sliceTables);
            _this.interactivityTargets(interactivityTargets);
            _this.coloringDimensions(coloringDimensions);
            _this.coloringMeasures(coloringMeasures);
        });
        if (!_this.customBindings.length) {
            _this._supportedUIStates(['error']);
        }
        return _this;
    }
    CustomItem.getPropertyInfo = function (p) {
        return _utils_1.deepExtend({ modelName: '@' + p.propertyName, category: _base_metadata_1.PropertyCategory.ViewModel }, p);
    };
    CustomItem._getBindingLinkName = function (propertyName) {
        return '__' + propertyName;
    };
    CustomItem._getSerializationsInfo = function (bindings) {
        return (bindings || []).map(function (binding) {
            return {
                propertyName: CustomItem._getBindingLinkName(binding.propertyName),
                modelName: binding.propertyName,
                array: binding.array,
                info: !binding.array ? _data_item_1.dataItemLinkSerializationsInfo : undefined
            };
        });
    };
    CustomItem._hasInteractivityTargets = function (meta) {
        var bindings = (meta && meta['bindings']) || [];
        return bindings.some(function (binding) { return binding.enableInteractivity; });
    };
    CustomItem._hasColoringDimensions = function (bindings) {
        return bindings.some(function (binding) { return binding.enableColoring && binding.dataItemType === 'Dimension'; });
    };
    CustomItem._hasColoringMeasures = function (bindings) {
        return bindings.some(function (binding) { return binding.enableColoring && binding.dataItemType === 'Measure'; });
    };
    CustomItem._isFilterAllowed = function (meta) {
        var interactivity = !!meta && meta['interactivity'];
        return !!interactivity && interactivity.filter && CustomItem._hasInteractivityTargets(meta);
    };
    CustomItem._isDrillDownAllowed = function (meta) {
        var interactivity = !!meta && meta['interactivity'];
        return !!interactivity && interactivity.drillDown && CustomItem._hasInteractivityTargets(meta);
    };
    CustomItem._getInfo = function (meta, customItemType) {
        if (!meta) {
            var staticCustomPropertiesInfo = CustomItem._getCustomPropertiesSerializationInfo(customItemType, []);
            return _custom_item_1.customDashboardItemSerializationsInfo.concat([staticCustomPropertiesInfo]);
        }
        var dynamicInfo = [];
        var bindings = (meta && meta.bindings) || [];
        var isFilterAllowed = CustomItem._isFilterAllowed(meta);
        var isDrillDownAllowed = CustomItem._isDrillDownAllowed(meta);
        var bindingsInfo = CustomItem._getSerializationsInfo(bindings);
        var propertiesMetadata = ((meta && meta.properties) || [])
            .map(function (p) { return ({
            ownerType: CustomItem,
            customItemType: customItemType,
            propertyName: p.propertyName,
            defaultValue: p.defaultVal,
        }); })
            .concat((meta && meta.customProperties))
            .filter(function (cp) { return !!cp; });
        var customProperties = CustomItem._getCustomPropertiesSerializationInfo(customItemType, propertiesMetadata);
        if (isFilterAllowed && isDrillDownAllowed) {
            dynamicInfo.push(interactivity_options_1._dashboardItemInteractivityOptionsMeta);
        }
        else if (isFilterAllowed) {
            dynamicInfo.push(interactivity_options_1._masterFilterInteractivityOptionsMeta);
        }
        else if (isDrillDownAllowed) {
            dynamicInfo.push(interactivity_options_1._drillDownInteractivityOptionsMeta);
        }
        else {
            dynamicInfo.push(interactivity_options_1._baseInteractivityOptionsMeta);
        }
        var hasColoringDimensions = CustomItem._hasColoringDimensions(bindings);
        if (hasColoringDimensions) {
            dynamicInfo.push(_custom_item_1.coloringDimensions);
        }
        var hasColoringMeasures = CustomItem._hasColoringMeasures(bindings);
        if (hasColoringMeasures) {
            dynamicInfo.push(_custom_item_1.coloringMeasures);
        }
        if (hasColoringDimensions || hasColoringMeasures) {
            dynamicInfo.push(_coloring_options_1.coloringOptions);
        }
        return _custom_item_1.customDashboardItemSerializationsInfo
            .concat([{ propertyName: 'customMetadata', modelName: 'CustomMetadata', info: bindingsInfo }])
            .concat(dynamicInfo)
            .concat(customProperties);
    };
    CustomItem.prototype._clearBindings = function () {
        var _this = this;
        _super.prototype._clearBindings.call(this);
        this.customBindings.forEach(function (binding) {
            if (binding.array) {
                _this[CustomItem._getBindingLinkName(binding.propertyName)].removeAll();
            }
        });
    };
    CustomItem.prototype.getBindingValue = function (propertyName, index) {
        var _this = this;
        var binding = ko.unwrap(this[CustomItem._getBindingLinkName(propertyName)]);
        var bindingValues = undefined;
        var wrapBindingValue = function (binding) {
            return !binding.dataItem() ? undefined : {
                displayName: function () { return _this._getDataItemDisplayName(binding.dataItem()); },
                uniqueName: function () { return binding.uniqueName(); }
            };
        };
        if (Array.isArray(binding)) {
            bindingValues = index != undefined ? [wrapBindingValue(binding[index])] : binding.map(function (b) { return wrapBindingValue(b); });
        }
        else {
            bindingValues = [wrapBindingValue(binding)];
        }
        return bindingValues.filter(function (b) { return b !== undefined; });
    };
    CustomItem.prototype.iterateData = function (action, sliceTableName) {
        var _this = this;
        if (sliceTableName === void 0) { sliceTableName = null; }
        var slice = this.getSlice(sliceTableName);
        if (!slice)
            return;
        var keyIds = slice.getKeyIds() || [], valueIds = slice.getValueIds() || [], processDataRow = function (dataRow, propertyName, measureAction, dimensionAction) {
            var binding = _this.customBindings.filter(function (b) { return b.propertyName === propertyName; })[0], result = [];
            if (!!binding) {
                var property = _this[CustomItem._getBindingLinkName(propertyName)];
                $.each(binding.array ? property() : [property], function (_, item) {
                    var uniqueName = item.uniqueName();
                    if (keyIds.indexOf(uniqueName) != -1)
                        result.push(dimensionAction(dataRow, uniqueName));
                    if (valueIds.indexOf(uniqueName) != -1)
                        result.push(measureAction(dataRow, uniqueName));
                });
            }
            return result;
        };
        slice.forEach(function (dataRow) {
            action({
                getColor: function (measureBindingName) {
                    if (!measureBindingName) {
                        return [_this._getColor(dataRow, keyIds, COLOR_MEASURE_ID)];
                    }
                    else {
                        return processDataRow(dataRow, measureBindingName, function (dataRow, uniqueName) { return _this._getColor(dataRow, keyIds, _this._getColorMeasureId(uniqueName)); }, function (dataRow, uniqueName) { return _this._getColor(dataRow, keyIds, COLOR_MEASURE_ID); });
                    }
                },
                getDisplayText: function (property) {
                    return processDataRow(dataRow, property, _this._getMeasureDisplayText, _this._getDimensionDisplayText);
                },
                getValue: function (property) {
                    return processDataRow(dataRow, property, _this._getMeasureValue, _this._getDimensionValue);
                },
                getUniqueValue: function (property) {
                    return processDataRow(dataRow, property, _this._getMeasureValue, _this._getDimensionUniqueValue);
                }
            });
        });
    };
    CustomItem.prototype._getDefaultItemType = function () {
        return CustomItem.ItemType;
    };
    CustomItem.prototype._getSliceTable = function (name) {
        var sliceTables = this.sliceTables();
        if (!!name) {
            return sliceTables.filter(function (slice) { return slice.name() === name; })[0];
        }
        else {
            return sliceTables.length > 0 ? sliceTables[0] : undefined;
        }
    };
    CustomItem.prototype._getAllSelectionValues = function (activeDimensions) {
        var sliceTables = this.sliceTables().filter(function (slice) { return activeDimensions.every(function (id) { return slice.dimensions().map(function (dim) { return dim.uniqueName(); }).indexOf(id) !== -1; }); }), values = [];
        if (sliceTables.length > 0) {
            var slice = this.getSlice(sliceTables[0].name());
            if (!!slice) {
                var keyIds = slice.getKeyIds().filter(function (id) { return activeDimensions.indexOf(id) !== -1; });
                slice.forEach(function (dataRow) { return values.push(keyIds.map(function (id) { return slice.getKeyValue(dataRow.rowKey, id); })); });
            }
        }
        return values;
    };
    CustomItem.prototype.getSlice = function (sliceTableName) {
        if (sliceTableName === void 0) { sliceTableName = null; }
        var dimensions = this._getSliceTable(sliceTableName).dimensions();
        var storage = this._getStorage();
        return storage && storage.getSliceByIds && storage.getSliceByIds(this._getValidIds(dimensions));
    };
    CustomItem.prototype._getStorage = function () {
        return this._dataManager() && this._dataManager().getDataStorage();
    };
    CustomItem.prototype._getValidIds = function (dimensionLinks) {
        var excluded = [];
        if (this.isDrillDownAllowed() && this._isDrillDownEnabled() && this.interactivityTargets().every(function (d) { return dimensionLinks.filter(function (dd) { return d.uniqueName() === dd.uniqueName(); }).length > 0; })) {
            excluded = this.interactivityTargets().slice(this._drillDownValues().length + 1);
        }
        return dimensionLinks.filter(function (d) { return excluded.filter(function (dd) { return d.uniqueName() === dd.uniqueName(); }).length == 0; }).map(function (d) { return d.uniqueName(); });
    };
    CustomItem.prototype._getColor = function (dataRow, keyIds, colorMeasureId) {
        var coloredDimensionIds = this._coloredDimensions().map(function (dim) { return dim.uniqueName(); }).filter(function (id) { return keyIds.indexOf(id) != -1; }), sliceKey = [];
        if (coloredDimensionIds.length > 0) {
            var lastColored = coloredDimensionIds[coloredDimensionIds.length - 1];
            for (var i = 0; i < keyIds.length; i++) {
                var currentId = keyIds[i];
                sliceKey.push(currentId);
                if (currentId == lastColored)
                    break;
            }
        }
        var colorValue = this._getValueBySliceKey(dataRow, sliceKey, colorMeasureId);
        if (colorValue)
            return color_1.Color.toHex(colorValue);
        return null;
    };
    CustomItem.prototype._getColorMeasureId = function (uniqueName) {
        if (this.coloringOptions && this._coloredByMeasures()) {
            var measure = this.coloringMeasures().map(function (mes) { return mes.dataItem(); }).filter(function (mes) { return mes.uniqueName() === uniqueName; });
            if (measure && measure.length > 0)
                return COLOR_MEASURE_ID + '_' + measure[0].dataMember() + ' (' + measure[0]['summaryType']() + ')';
        }
        return COLOR_MEASURE_ID;
    };
    CustomItem.prototype._format = function (value, formatViewModel) {
        return !!formatViewModel ? _formatter_1.format(value, formatViewModel) : value.toString();
    };
    CustomItem.prototype._getServerText = function (dataRow, dataItemUniqueName) {
        return this._getSpecialValue(dataRow, dataItemUniqueName, _item_data_axis_point_1.dataStorageSpecialIds.DisplayText);
    };
    CustomItem.prototype._getSpecialValue = function (dataRow, dataItemUniqueName, specialId) {
        return this._getValueBySliceKey(dataRow, [dataItemUniqueName], specialId);
    };
    CustomItem.prototype._getValueBySliceKey = function (dataRow, sliceKey, valueId) {
        var storage = this._getStorage(), metaDataSliceKey = storage.getSliceKey(sliceKey);
        if (metaDataSliceKey < 0)
            return null;
        var metaDataRowKey = storage.findDataRowKey(metaDataSliceKey, dataRow);
        return storage.getValue(metaDataRowKey, valueId);
    };
    Object.defineProperty(CustomItem.prototype, "customBindings", {
        get: function () {
            return (this._meta && this._meta.bindings) || [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CustomItem.prototype, "legacyCustomProperties", {
        get: function () {
            return (this._meta && this._meta.properties) || [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CustomItem.prototype, "customInteractivity", {
        get: function () {
            return !!this._meta && this._meta.interactivity;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CustomItem.prototype, "_optionsPanelSections", {
        get: function () {
            return !!this._meta && this._meta.optionsPanelSections;
        },
        enumerable: true,
        configurable: true
    });
    CustomItem.prototype._getMasterFilterMode = function () {
        return this.interactivityOptions instanceof interactivity_options_1.DashboardItemMasterFilterInteractivityOptions ? this.interactivityOptions.masterFilterMode() : 'None';
    };
    CustomItem.prototype._getDrillDownEnabled = function () {
        return this.interactivityOptions instanceof interactivity_options_1.DashboardItemInteractivityOptions && this.interactivityOptions.isDrillDownEnabled();
    };
    CustomItem.prototype._getIgnoreMasterFilter = function () { return !!this.interactivityOptions && this.interactivityOptions.ignoreMasterFilters(); };
    CustomItem.prototype._getInteractivityDimensionLinks = function () { return this.interactivityTargets(); };
    CustomItem.prototype.isDrillDownAllowed = function () {
        return CustomItem._isDrillDownAllowed(this._meta);
    };
    CustomItem.prototype.isFilterAllowed = function () {
        return CustomItem._isFilterAllowed(this._meta);
    };
    CustomItem.prototype._isInteractivityAllowed = function () {
        return this.isDrillDownAllowed() || this.isFilterAllowed();
    };
    CustomItem.prototype._getCanColorByMeasures = function () { return CustomItem._hasColoringMeasures(this.customBindings); };
    CustomItem.prototype._getCanColorByDimensions = function () { return CustomItem._hasColoringDimensions(this.customBindings); };
    CustomItem.prototype._getColorizableDataItemsInfo = function () {
        var _this = this;
        return this.customBindings.filter(function (binding) { return binding.enableColoring && binding.dataItemType === 'Dimension'; }).map(function (binding) {
            var prop = _this[CustomItem._getBindingLinkName(binding.propertyName)];
            return {
                items: binding.array ? prop() : [prop],
                prefixId: binding.displayName
            };
        });
    };
    CustomItem.prototype._getDefaultCalculationWindowDefinition = function () {
        return new custom_item_calc_window_definition_1.CustomItemWindowDefinition();
    };
    CustomItem.prototype.getInfo = function () {
        return CustomItem._getInfo(this._meta, this.customItemType());
    };
    CustomItem.prototype._getInfoCore = function () {
        return null;
    };
    CustomItem._getCustomPropertiesSerializationInfo = function (customItemType, dynamicCustomPropertiesMetadata) {
        var filterPredicate = function (cp) { return cp.ownerType === CustomItem && cp.customItemType === customItemType || CustomItem.prototype instanceof cp.ownerType; };
        var filteredCustomProperties = custom_properties_metadata_1._customPropertiesMeta
            .filter(filterPredicate)
            .concat(dynamicCustomPropertiesMetadata);
        return _custom_properties_utils_1._getCustomPropertiesSerializationInfoCore(filteredCustomProperties);
    };
    CustomItem.ItemType = 'CustomItem';
    __decorate([
        _utils_2.collectionItemType('Dimension')
    ], CustomItem.prototype, "interactivityTargets", void 0);
    __decorate([
        _utils_2.collectionItemType('Dimension')
    ], CustomItem.prototype, "coloringDimensions", void 0);
    __decorate([
        _utils_2.collectionItemType('Measure')
    ], CustomItem.prototype, "coloringMeasures", void 0);
    return CustomItem;
}(data_dashboard_item_1.DataDashboardItem));
exports.CustomItem = CustomItem;


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var serializable_model_1 = __webpack_require__(5);
var color_scheme_definition_1 = __webpack_require__(256);
var dimension_key_1 = __webpack_require__(257);
var measure_definition_1 = __webpack_require__(260);
var _color_scheme_entry_1 = __webpack_require__(124);
var ColorSchemeEntry = (function (_super) {
    __extends(ColorSchemeEntry, _super);
    function ColorSchemeEntry(modelJson, serializer, itemComponentName, name) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        if (itemComponentName === void 0) { itemComponentName = ''; }
        if (name === void 0) { name = ''; }
        var _this = _super.call(this, modelJson, serializer, _color_scheme_entry_1.colorSchemeEntrySerializationInfo) || this;
        _this.itemComponentName = itemComponentName;
        _this.name = name;
        _this.measureKeys = ko.observableArray();
        _this.dimensionKeys = ko.observableArray();
        _this.measureKeys = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(modelJson.MeasureKey, function (item) { return new measure_definition_1.MeasureDefinition(item, serializer); });
        _this.dimensionKeys = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(modelJson.DimensionKeys, function (item) { return new dimension_key_1.DimensionKey(item, serializer); });
        _this.displayText = ko.computed(function () {
            return _this.dimensionKeys()
                .map(function (key) { return key.value.value(); })
                .concat(_this.measureKeys().map(function (key) { return key.displayText(); }))
                .join(' | ');
        });
        _this.colorText = ko.computed(function () {
            var result = '';
            if (!_this.custom) {
                result = _default_1.getLocalizationById('DashboardStringId.ColorAutoAssigned');
            }
            else {
                if (_this.paletteIndex() !== null)
                    result = _default_1.getLocalizationById('DashboardStringId.ColorPaletteIndex') + _this.paletteIndex();
                else if (!!_this.color()) {
                    result = _default_1.getLocalizationById('DashboardWebStringId.ColorScheme.Color') + ' [A=' + (_this.color().A * 255).toFixed(0) + ', R=' + _this.color().R + ', G=' + _this.color().G + ', B=' + _this.color().B + ']';
                }
            }
            return result;
        });
        _this.componentName = ko.computed(function () {
            return _this.displayText() + _this.dataSource() + _this.dataMember();
        });
        return _this;
    }
    Object.defineProperty(ColorSchemeEntry.prototype, "custom", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorSchemeEntry.prototype, "definition", {
        get: function () {
            if (!this._definition) {
                this._definition = new color_scheme_definition_1.ColorSchemeDefinition(this.dataSource(), this.dataMember(), this.dimensionKeys().map(function (key) { return key.definition; }), !!this.measureKeys().length, this.itemComponentName, this.name);
            }
            return this._definition;
        },
        enumerable: true,
        configurable: true
    });
    ColorSchemeEntry.prototype.getInfo = function () {
        return _color_scheme_entry_1.colorSchemeEntrySerializationInfo;
    };
    ColorSchemeEntry.prototype.clone = function () {
        var clonedEntry = new ColorSchemeEntry();
        clonedEntry.itemComponentName = this.itemComponentName;
        clonedEntry.name = this.name;
        clonedEntry.dataMember(this.dataMember());
        clonedEntry.dataSource(this.dataSource());
        clonedEntry.dimensionKeys(this.dimensionKeys());
        clonedEntry.measureKeys(this.measureKeys());
        clonedEntry.paletteIndex(this.paletteIndex());
        clonedEntry.color(this.color());
        return clonedEntry;
    };
    ColorSchemeEntry.prototype.equals = function (entry) {
        if (this.dimensionKeys().length !== entry.dimensionKeys().length)
            return false;
        for (var i = 0; i < this.dimensionKeys().length; i++) {
            if (this.dimensionKeys()[i].value.value() !== entry.dimensionKeys()[i].value.value()) {
                return false;
            }
        }
        if (this.definition.colorByMeasures) {
            if (this.measureKeys().length !== entry.measureKeys().length)
                return false;
            for (var i = 0; i < this.measureKeys().length; i++) {
                if (this.measureKeys()[i].dataMember() !== entry.measureKeys()[i].dataMember() || this.measureKeys()[i].summaryType() !== entry.measureKeys()[i].summaryType())
                    return false;
            }
        }
        return true;
    };
    ColorSchemeEntry.prototype.getUniqueNamePrefix = function () {
        return _super.prototype._getUniqueNamePrefix.call(this);
    };
    ColorSchemeEntry.prototype._getDefaultItemType = function () {
        return 'Entry';
    };
    return ColorSchemeEntry;
}(serializable_model_1.TypedSerializableModel));
exports.ColorSchemeEntry = ColorSchemeEntry;
var AutoColorSchemeEntry = (function (_super) {
    __extends(AutoColorSchemeEntry, _super);
    function AutoColorSchemeEntry(modelJson, serializer, componentName, name) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer, componentName, name) || this;
    }
    Object.defineProperty(AutoColorSchemeEntry.prototype, "custom", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    return AutoColorSchemeEntry;
}(ColorSchemeEntry));
exports.AutoColorSchemeEntry = AutoColorSchemeEntry;


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var dashboard_layout_node_1 = __webpack_require__(190);
var _layout_item_placeholder_1 = __webpack_require__(468);
var _layout_utils_1 = __webpack_require__(106);
var DashboardLayoutGroup = (function (_super) {
    __extends(DashboardLayoutGroup, _super);
    function DashboardLayoutGroup(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.childNodes = ko.observableArray([]);
        _this.childNodes(dx_analytics_core_1.default.Analytics.Utils.deserializeArray(modelJson.LayoutItems || {}, function (modelJson) { return _layout_utils_1.deserializeDashboardLayoutNode(modelJson, serializer); })());
        _this.childNodes().forEach(function (childNode) { return childNode.parentNode(_this); });
        _this.parentNode.subscribe(function (newParentNode) {
            _this.childNodes().forEach(function (childNode) { return childNode.parentNode(_this); });
        });
        _this.childNodes.subscribe(function (arrayChanges) {
            arrayChanges.forEach(function (arrayChange) {
                if (arrayChange.status === 'added') {
                    var addedLayoutItem = arrayChange.value;
                    addedLayoutItem.parentNode(_this);
                }
                if (arrayChange.status === 'deleted') {
                    var removedLayoutItem = arrayChange.value;
                    if (removedLayoutItem.parentNode() === _this) {
                        arrayChange.value.parentNode(null);
                    }
                }
            });
        }, null, 'arrayChange');
        return _this;
    }
    Object.defineProperty(DashboardLayoutGroup.prototype, "_template", {
        get: function () { return 'dx-dashboard-group'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardLayoutGroup.prototype, "_createPlaceholderFunc", {
        get: function () {
            var _this = this;
            return function () { return new _layout_item_placeholder_1.DashboardLayoutItemPlaceholder(_this)._createViewModel(); };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardLayoutGroup.prototype, "_visibleItems", {
        get: function () { return this.childNodes; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardLayoutGroup.prototype, "_childItems", {
        get: function () { return this.childNodes; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardLayoutGroup.prototype, "_orientation", {
        get: function () { return this.orientation; },
        enumerable: true,
        configurable: true
    });
    DashboardLayoutGroup.prototype.findLayoutItem = function (dashboardItem) {
        var result = _super.prototype.findLayoutItem.call(this, dashboardItem);
        if (!result) {
            for (var _i = 0, _a = this.childNodes(); _i < _a.length; _i++) {
                var childLayoutItem = _a[_i];
                result = childLayoutItem.findLayoutItem(dashboardItem);
                if (!!result) {
                    break;
                }
            }
        }
        return result;
    };
    DashboardLayoutGroup.prototype.getNodesRecursive = function () {
        return this.childNodes().reduce(function (acc, layoutItem) {
            acc.push(layoutItem);
            if (layoutItem instanceof DashboardLayoutGroup) {
                acc = acc.concat(layoutItem.getNodesRecursive());
            }
            return acc;
        }, []);
    };
    DashboardLayoutGroup.prototype.getItemsRecursive = function () {
        return this.getNodesRecursive().filter(function (node) { return node.dashboardItem(); });
    };
    DashboardLayoutGroup.prototype._attachToGroupWithInversedOrientation = function (target, itemToAttach, position) {
        var owner = this;
        var newGroupItemModel = new DashboardLayoutGroup();
        newGroupItemModel.orientation(owner.orientation());
        owner.childNodes().slice(0).forEach(function (node) {
            owner._detachChild(node);
            newGroupItemModel.childNodes.push(node);
        });
        owner.orientation(newGroupItemModel.orientation() === 'Horizontal' ? 'Vertical' : 'Horizontal');
        owner.childNodes.push(newGroupItemModel);
        owner._attachChild(target, itemToAttach, position);
    };
    DashboardLayoutGroup.prototype._attachChild = function (target, itemToAttach, position) {
        var attachBefore = true;
        var owner = this;
        if (this.orientation() === 'Horizontal') {
            switch (position) {
                case 'left':
                    break;
                case 'right':
                    attachBefore = false;
                    break;
                case 'top':
                    owner = this._wrapChildWithGroup(target, 'Vertical');
                    break;
                case 'bottom':
                    attachBefore = false;
                    owner = this._wrapChildWithGroup(target, 'Vertical');
                    break;
            }
        }
        else {
            switch (position) {
                case 'left':
                    owner = this._wrapChildWithGroup(target, 'Horizontal');
                    break;
                case 'right':
                    attachBefore = false;
                    owner = this._wrapChildWithGroup(target, 'Horizontal');
                    break;
                case 'top':
                    break;
                case 'bottom':
                    attachBefore = false;
                    break;
            }
        }
        if (!this.parentNode() && owner === this) {
            owner = this._wrapChildWithGroup(target, 'Horizontal');
        }
        _attachChildCore(owner, target, itemToAttach, attachBefore);
    };
    DashboardLayoutGroup.prototype._detachChild = function (removedChildLayoutNode) {
        this.childNodes.splice(this.childNodes().indexOf(removedChildLayoutNode), 1);
        if (this.childNodes().length === 0 && !this.item) {
            this.remove();
        }
        this._ensureGroupIsNeeded();
    };
    DashboardLayoutGroup.prototype._ensureGroupIsNeeded = function () {
        if (this.childNodes().length === 1 && !this.item && this.parentNode() && this.parentNode().parentNode()) {
            var childToUnwrap = this.childNodes()[0];
            var parentNode = this.parentNode();
            childToUnwrap.weight(this.weight());
            this.childNodes.remove(childToUnwrap);
            parentNode.childNodes.splice(parentNode.childNodes().indexOf(this), 1, childToUnwrap);
            parentNode._ensureGroupIsNeeded();
        }
    };
    DashboardLayoutGroup.prototype._wrapChildWithGroup = function (childLayoutNode, orientation) {
        var newGroupItemModel = new DashboardLayoutGroup();
        newGroupItemModel.weight(childLayoutNode.weight());
        newGroupItemModel.orientation(orientation);
        _attachChildCore(this, childLayoutNode, newGroupItemModel, true);
        this._detachChild(childLayoutNode);
        newGroupItemModel.childNodes.push(childLayoutNode);
        return newGroupItemModel;
    };
    DashboardLayoutGroup.prototype._getOrientationByInsertPosition = function (position) {
        return (position === 'left' || position === 'right') ? 'Horizontal' : 'Vertical';
    };
    DashboardLayoutGroup.prototype._insertItemCore = function (layoutNodeToInsert, position, insertionBehavior) {
        if (this.parentNode()) {
            if (insertionBehavior === 'InsertIntoGroup' && this._getOrientationByInsertPosition(position) !== this.orientation()) {
                this._attachToGroupWithInversedOrientation(this, layoutNodeToInsert, position);
            }
            else {
                _super.prototype._insertItemCore.call(this, layoutNodeToInsert, position);
            }
        }
        else {
            this._addItem(layoutNodeToInsert);
        }
    };
    DashboardLayoutGroup.prototype._addItem = function (layoutNodeToInsert) {
        this.childNodes.push(layoutNodeToInsert);
    };
    DashboardLayoutGroup.prototype._getDefaultItemType = function () { return 'LayoutGroup'; };
    DashboardLayoutGroup.prototype._deleteDashbordItem = function () {
        var _this = this;
        _super.prototype._deleteDashbordItem.call(this);
        if (this._dashboard()) {
            this._dashboard().items.remove(function (item) { return item.parentContainer() === _this.item.componentName(); });
            this._dashboard().groups.remove(this.item);
        }
    };
    return DashboardLayoutGroup;
}(dashboard_layout_node_1.DashboardLayoutNode));
exports.DashboardLayoutGroup = DashboardLayoutGroup;
function _attachChildCore(owner, target, sibling, before) {
    if (before === void 0) { before = true; }
    var index = owner.childNodes().indexOf(target);
    if (index == -1)
        index = 0;
    owner.childNodes.splice(before ? index : index + 1, 0, sibling);
}
_layout_utils_1._layoutItemTypeMap['LayoutGroup'] = DashboardLayoutGroup;
var DashboardLayoutRootGroup = (function (_super) {
    __extends(DashboardLayoutRootGroup, _super);
    function DashboardLayoutRootGroup(dashboard, modelJson, serializer) {
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this._dashboard(dashboard);
        _this.weight(undefined);
        return _this;
    }
    DashboardLayoutRootGroup.prototype._getDefaultItemType = function () { return ''; };
    DashboardLayoutRootGroup.prototype._addItem = function (layoutNodeToInsert) {
        if (this.childNodes().length == 0) {
            var targetLayoutItem = new DashboardLayoutGroup();
            targetLayoutItem.childNodes.push(layoutNodeToInsert);
            this.childNodes.push(targetLayoutItem);
        }
        else if (this.childNodes().length == 1 && this.childNodes()[0] instanceof DashboardLayoutGroup) {
            this.childNodes()[0].childNodes.push(layoutNodeToInsert);
        }
        else if (this.childNodes().length > 1) {
            throw new Error('Root layout item has more than one child.');
        }
    };
    return DashboardLayoutRootGroup;
}(DashboardLayoutGroup));
exports.DashboardLayoutRootGroup = DashboardLayoutRootGroup;


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
exports._layoutItemTypeMap = {};
function deserializeDashboardLayoutNode(itemModel, serializer) {
    if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
    var itemType = itemModel['@ItemType'];
    return new exports._layoutItemTypeMap[itemType](itemModel, serializer);
}
exports.deserializeDashboardLayoutNode = deserializeDashboardLayoutNode;


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _data_dashboard_item_1 = __webpack_require__(26);
exports.seriesDimensions = { propertyName: '__seriesDimensions', modelName: 'SeriesDimensions', displayName: 'DashboardWebStringId.SeriesItem.SeriesDimensions', array: true };
exports.seriesDashboardItemSerializationsInfo = _data_dashboard_item_1.dataDashboardItemSerializationsInfo.concat([exports.seriesDimensions]);


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var _date_utils_1 = __webpack_require__(41);
var serializable_model_1 = __webpack_require__(5);
var _parameters_helper_1 = __webpack_require__(55);
var LookUpValue = (function (_super) {
    __extends(LookUpValue, _super);
    function LookUpValue(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.valueType = ko.observable('');
        _this.value(_date_utils_1.tryConvertToDateTime(_this.value()));
        return _this;
    }
    LookUpValue.prototype.getInfo = function () {
        return _parameters_helper_1.ParameterHelper.getInfoPerType(this.valueType);
    };
    LookUpValue.prototype._getDefaultItemType = function () {
        return 'Value';
    };
    return LookUpValue;
}(serializable_model_1.TypedSerializableModel));
exports.LookUpValue = LookUpValue;


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var chart_series_1 = __webpack_require__(142);
var ChartSeriesCreator = (function () {
    function ChartSeriesCreator() {
    }
    ChartSeriesCreator.getSeriesCreator = function (dataItemProvider) {
        return function (seriesViewType) {
            var seriesType = ChartSeriesCreator.chartSeriesViewTypesMap[seriesViewType].seriesType, series = ChartSeriesCreator.createSeries(dataItemProvider, { '@ItemType': seriesType });
            if (series instanceof chart_series_1.SimpleSeries) {
                series.seriesType(seriesViewType);
            }
            else if (series instanceof chart_series_1.RangeSeries) {
                series.seriesType(seriesViewType);
            }
            else if (series instanceof chart_series_1.OpenHighLowCloseSeries) {
                series.seriesType(seriesViewType);
            }
            return series;
        };
    };
    ChartSeriesCreator.createSeries = function (dataItemProvider, seriesJSON, serializer) {
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var itemType = seriesJSON['@ItemType'];
        return new ChartSeriesCreator.chartSeriesTypesMap[itemType](dataItemProvider, seriesJSON, serializer);
    };
    ChartSeriesCreator.chartSeriesTypesMap = {
        'Simple': chart_series_1.SimpleSeries,
        'Range': chart_series_1.RangeSeries,
        'Weighted': chart_series_1.WeightedSeries,
        'OpenHighLowClose': chart_series_1.OpenHighLowCloseSeries,
        'HighLowClose': chart_series_1.HighLowCloseSeries
    };
    ChartSeriesCreator.chartSeriesViewTypesMap = {
        'Bar': {
            seriesType: 'Simple',
            displayName: 'DashboardStringId.SeriesTypeBar',
            group: 'Bar',
            icon: 'dx-dashboard-chart-series-bar'
        },
        'StackedBar': {
            seriesType: 'Simple',
            displayName: 'DashboardStringId.SeriesTypeStackedBar',
            group: 'Bar',
            icon: 'dx-dashboard-chart-series-stacked-bar'
        },
        'FullStackedBar': {
            seriesType: 'Simple',
            displayName: 'DashboardStringId.SeriesTypeFullStackedBar',
            group: 'Bar',
            icon: 'dx-dashboard-chart-series-full-stacked-bar'
        },
        'Point': {
            seriesType: 'Simple',
            displayName: 'DashboardStringId.SeriesTypePoint',
            group: 'Point / Line',
            icon: 'dx-dashboard-chart-series-points'
        },
        'Line': {
            seriesType: 'Simple',
            displayName: 'DashboardStringId.SeriesTypeLine',
            group: 'Point / Line',
            icon: 'dx-dashboard-chart-series-line'
        },
        'StackedLine': {
            seriesType: 'Simple',
            displayName: 'DashboardStringId.SeriesTypeStackedLine',
            group: 'Point / Line',
            icon: 'dx-dashboard-chart-series-stacked-line'
        },
        'FullStackedLine': {
            seriesType: 'Simple',
            displayName: 'DashboardStringId.SeriesTypeFullStackedLine',
            group: 'Point / Line',
            icon: 'dx-dashboard-chart-series-full-stacked-line'
        },
        'StepLine': {
            seriesType: 'Simple',
            displayName: 'DashboardStringId.SeriesTypeStepLine',
            group: 'Point / Line',
            icon: 'dx-dashboard-chart-series-step-line'
        },
        'Spline': {
            seriesType: 'Simple',
            displayName: 'DashboardStringId.SeriesTypeSpline',
            group: 'Point / Line',
            icon: 'dx-dashboard-chart-series-spline'
        },
        'Area': {
            seriesType: 'Simple',
            displayName: 'DashboardStringId.SeriesTypeArea',
            group: 'Area',
            icon: 'dx-dashboard-chart-series-area'
        },
        'StackedArea': {
            seriesType: 'Simple',
            displayName: 'DashboardStringId.SeriesTypeStackedArea',
            group: 'Area',
            icon: 'dx-dashboard-chart-series-stacked-area'
        },
        'FullStackedArea': {
            seriesType: 'Simple',
            displayName: 'DashboardStringId.SeriesTypeFullStackedArea',
            group: 'Area',
            icon: 'dx-dashboard-chart-series-full-stacked-area'
        },
        'StepArea': {
            seriesType: 'Simple',
            displayName: 'DashboardStringId.SeriesTypeStepArea',
            group: 'Area',
            icon: 'dx-dashboard-chart-series-step-area'
        },
        'SplineArea': {
            seriesType: 'Simple',
            displayName: 'DashboardStringId.SeriesTypeSplineArea',
            group: 'Area',
            icon: 'dx-dashboard-chart-series-spline-area'
        },
        'StackedSplineArea': {
            seriesType: 'Simple',
            displayName: 'DashboardStringId.SeriesTypeStackedSplineArea',
            group: 'Area',
            icon: 'dx-dashboard-chart-series-stacked-spline-area'
        },
        'FullStackedSplineArea': {
            seriesType: 'Simple',
            displayName: 'DashboardStringId.SeriesTypeFullStackedSplineArea',
            group: 'Area',
            icon: 'dx-dashboard-chart-series-full-stacked-spline-area'
        },
        'SideBySideRangeBar': {
            seriesType: 'Range',
            displayName: 'DashboardStringId.SeriesTypeSideBySideRangeBar',
            group: 'Range',
            icon: 'dx-dashboard-chart-series-range-bar'
        },
        'RangeArea': {
            seriesType: 'Range',
            displayName: 'DashboardStringId.SeriesTypeRangeArea',
            group: 'Range',
            icon: 'dx-dashboard-chart-series-range-area'
        },
        'Weighted': {
            seriesType: 'Weighted',
            displayName: 'DashboardWebStringId.Chart.SeriesType.Weighted',
            group: 'Bubble',
            icon: 'dx-dashboard-chart-series-weighted'
        },
        'HighLowClose': {
            seriesType: 'HighLowClose',
            displayName: 'DashboardStringId.SeriesTypeHighLowClose',
            group: 'Financial',
            icon: 'dx-dashboard-chart-series-high-low-close'
        },
        'CandleStick': {
            seriesType: 'OpenHighLowClose',
            displayName: 'DashboardStringId.SeriesTypeCandleStick',
            group: 'Financial',
            icon: 'dx-dashboard-chart-series-candle-stick'
        },
        'Stock': {
            seriesType: 'OpenHighLowClose',
            displayName: 'DashboardStringId.SeriesTypeStock',
            group: 'Financial',
            icon: 'dx-dashboard-chart-series-stock'
        }
    };
    ChartSeriesCreator.chartSeriesGroupLocalization = {
        'Area': 'DashboardStringId.SeriesTypeGroupArea',
        'Bar': 'DashboardStringId.SeriesTypeGroupBar',
        'Bubble': 'DashboardStringId.SeriesTypeGroupBubble',
        'Financial': 'DashboardStringId.SeriesTypeGroupFinancial',
        'Point / Line': 'DashboardStringId.SeriesTypeGroupPointLine',
        'Range': 'DashboardStringId.SeriesTypeGroupRange'
    };
    return ChartSeriesCreator;
}());
exports.ChartSeriesCreator = ChartSeriesCreator;


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var _hashset_wrapper_1 = __webpack_require__(240);
var _utils_1 = __webpack_require__(3);
var data_item_1 = __webpack_require__(8);
var _knockout_utils_1 = __webpack_require__(17);
var _utils_2 = __webpack_require__(18);
var data_dashboard_item_1 = __webpack_require__(9);
var _filter_element_item_base_1 = __webpack_require__(88);
var FilterElementItemBase = (function (_super) {
    __extends(FilterElementItemBase, _super);
    function FilterElementItemBase(dashboardItemJSON, serializer) {
        if (dashboardItemJSON === void 0) { dashboardItemJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, dashboardItemJSON, serializer) || this;
        _this.__filterDimensions = ko.observableArray([]);
        _this.filterDimensions = ko.observableArray([]);
        _this._unselectedValues = ko.observable();
        _this._isExcludingAllFilter = ko.computed(function () {
            if (!!_this._useNeutralFilterMode())
                return false;
            var selectionValues = _this._selectionValues();
            return _this._dataManager() && selectionValues && selectionValues.length === 0;
        });
        _knockout_utils_1.subscribeArrayChange(_this.__filterDimensions, {
            added: function (link) { return link._specifics.supportsTopNOther = false; },
            deleted: function (link) { return link._specifics.supportsTopNOther = true; }
        });
        _this.__filterDimensions(dx_analytics_core_1.default.Analytics.Utils.deserializeArray(dashboardItemJSON.FilterDimensions, function (item) {
            var link = new data_item_1.DataItemLink(_this, item, serializer);
            link._specifics.supportsTopNOther = false;
            return link;
        })());
        _this._subscribeDataItemLinkArrays(_filter_element_item_base_1.filterDimensions);
        return _this;
    }
    Object.defineProperty(FilterElementItemBase.prototype, "_supportParallelRequests", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FilterElementItemBase.prototype, "_useCriteriaOptimization", {
        get: function () {
            return !this.filterString()
                && this.interactivityOptions.ignoreMasterFilters()
                && !this.isMasterFilterCrossDataSource()
                && !this._interactivityDimensions.some(function (d) { return d.topNOptionsEnabled(); });
        },
        enumerable: true,
        configurable: true
    });
    FilterElementItemBase.prototype._clearBindings = function () {
        _super.prototype._clearBindings.call(this);
        this.__filterDimensions.removeAll();
    };
    FilterElementItemBase.prototype._getInfoCore = function () {
        return _filter_element_item_base_1.filterElementItemBaseSerializationInfo;
    };
    FilterElementItemBase.prototype._isCalculationSupported = function () {
        return false;
    };
    FilterElementItemBase.prototype._getInteractivityDimensionLinks = function () { return this.__filterDimensions(); };
    FilterElementItemBase.prototype._getMasterFilterMode = function () { return !this._useNeutralFilterMode() || (!!this._useNeutralFilterMode() && this._isMultiselectable()) ? 'Multiple' : 'Single'; };
    FilterElementItemBase.prototype._getIgnoreMasterFilter = function () { return this.interactivityOptions.ignoreMasterFilters(); };
    FilterElementItemBase.prototype._getClearMasterFilterSupported = function () { return !!this._useNeutralFilterMode(); };
    FilterElementItemBase.prototype._getIsMasterFilter = function () { return true; };
    FilterElementItemBase.prototype._isMultiselectable = function () { return false; };
    FilterElementItemBase.prototype._updateContentViewModel = function (content) {
        _super.prototype._updateContentViewModel.call(this, content);
        content.ViewModel.EnableSearch = this.enableSearch();
    };
    FilterElementItemBase.prototype._performOutputFilterOptimization = function (filter) {
        if (this.__filterDimensions && filter && !!filter.values && this._useCriteriaOptimization) {
            var allselectionValues = this._getAllSelectionValues(this._interactivityDimensions.map(function (d) { return d.uniqueName(); }));
            if (filter.values.length === allselectionValues.length) {
                return undefined;
            }
        }
        if (!!this._dataQueryParams.peek()
            && !!this._dataQueryParams.peek().Filter
            && this._dataQueryParams.peek().Filter.some(function (externalFilter) { return externalFilter.isExcludingAllFilter; })) {
            return undefined;
        }
        return filter;
    };
    FilterElementItemBase.prototype._validateSelectionByData = function (selection) {
        if (!this._interactivityDimensions.length)
            return;
        var allValues = this._getAllSelectionValues(this._interactivityDimensions.map(function (d) { return d.uniqueName(); }));
        if (this._isMultiselectable() && !this._useNeutralFilterMode() && !Array.isArray(this._unselectedValues())) {
            this._unselectedValues([]);
            if (Array.isArray(selection)) {
                this._updateUnselectedValues(selection, allValues);
            }
        }
        this._setSelectionData(this._correctSelectionValues(allValues, selection || []));
    };
    FilterElementItemBase.prototype._setSelectionData = function (selection) {
        if (!this._useNeutralFilterMode() && this._multiData) {
            var currentSelection = this._selectionValues();
            if (this._isMultiselectable() && !!currentSelection && this._unselectedValues()) {
                this._updateUnselectedValues(selection, currentSelection);
            }
            if (!!selection) {
                var hashset = new _hashset_wrapper_1.HashsetWrapper(selection);
                var allValues = this._getAllSelectionValues(this._interactivityDimensions.map(function (d) { return d.uniqueName(); }));
                selection = hashset.getIntersection(allValues);
            }
        }
        _super.prototype._setSelectionData.call(this, selection);
    };
    FilterElementItemBase.prototype._correctSelectionValues = function (allValues, currentSelection) {
        var _this = this;
        if (this._isMultiselectable() && !this._useNeutralFilterMode()) {
            var unknownSelection = allValues
                .filter(function (x) { return !_this._arrayContains(currentSelection, x) && !_this._arrayContains(_this._unselectedValues(), x); });
            return currentSelection.concat(unknownSelection);
        }
        else if (!this._isMultiselectable()) {
            if (!!this._useNeutralFilterMode()) {
                if (currentSelection.length !== 1) {
                    return this._allowAllValue() || allValues.length == 0 ? null : [allValues[0]];
                }
            }
            else {
                if (currentSelection.length !== 1 || !this._arrayContains(allValues, currentSelection[0])) {
                    return this._allowAllValue() ? allValues : [allValues[0]];
                }
            }
        }
        return currentSelection;
    };
    FilterElementItemBase.prototype._updateUnselectedValues = function (newSelection, currentSelection) {
        var _this = this;
        if (!newSelection || newSelection.length === 0) {
            currentSelection.forEach(function (x) { return _this._unselectedValues().push(x.slice()); });
        }
        else {
            var hashset_1 = new _hashset_wrapper_1.HashsetWrapper(newSelection);
            var unselectedCount = this._unselectedValues().length;
            for (var i = unselectedCount - 1; i >= 0; i--) {
                if (hashset_1.contains(this._unselectedValues()[i])) {
                    this._unselectedValues().splice(i, 1);
                }
            }
            currentSelection.forEach(function (x) {
                if (!hashset_1.contains(x)) {
                    _this._unselectedValues().push(x.slice());
                }
            });
        }
    };
    FilterElementItemBase.prototype._arrayContains = function (container, part) {
        return _utils_1.arrayContains(container, part);
    };
    __decorate([
        _utils_2.collectionItemType('Dimension')
    ], FilterElementItemBase.prototype, "__filterDimensions", void 0);
    return FilterElementItemBase;
}(data_dashboard_item_1.DataDashboardItem));
exports.FilterElementItemBase = FilterElementItemBase;


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var _utils_1 = __webpack_require__(3);
var _range_filter_selection_validator_1 = __webpack_require__(144);
var _item_data_axis_names_1 = __webpack_require__(34);
var data_item_1 = __webpack_require__(8);
var range_filter_calc_window_definition_1 = __webpack_require__(528);
var _array_utils_1 = __webpack_require__(49);
var _knockout_utils_1 = __webpack_require__(17);
var _utils_2 = __webpack_require__(18);
var _base_metadata_1 = __webpack_require__(4);
var serializable_model_1 = __webpack_require__(5);
var chart_series_creator_1 = __webpack_require__(109);
var series_item_1 = __webpack_require__(210);
var date_time_period_1 = __webpack_require__(211);
var _range_filter_item_1 = __webpack_require__(200);
var _range_filter_item_helper_1 = __webpack_require__(285);
var _range_state_controller_1 = __webpack_require__(329);
var RangeFilterItem = (function (_super) {
    __extends(RangeFilterItem, _super);
    function RangeFilterItem(dashboardItemJSON, serializer) {
        if (dashboardItemJSON === void 0) { dashboardItemJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, dashboardItemJSON, serializer) || this;
        _this._defaultDateTimePeriodIndexSubscription = null;
        _this.currentSelectedDateTimePeriodName = ko.observable();
        _this.series = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(dashboardItemJSON.Series, function (item) {
            return chart_series_creator_1.ChartSeriesCreator.createSeries(_this, item, serializer);
        });
        _this.dateTimePeriods = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(dashboardItemJSON.DateTimePeriods, function (item) { return new date_time_period_1.DateTimePeriod(item, serializer); });
        _this._attachDataItem(_this, _range_filter_item_1.argument.propertyName);
        _this.__argument._specifics.acceptableShapingType = data_item_1.AcceptableShapingType.RangeDate;
        _this.__argument._specifics.forceAddOlapExactDateFormat = true;
        _this._stateController = new _range_state_controller_1.RangeStateController(_this);
        _this._stateController.initialize();
        _range_filter_item_helper_1._subscribeToDimension(_this.argument, _this.dateTimePeriods);
        _knockout_utils_1.safeSubscribe({ dataManager: _this._dataManager, dateTimePeriods: _this.dateTimePeriods, argument: _this.argument }, function (args) {
            if (args.dataManager && args.argument) {
                var metaData = args.dataManager.getMetaData();
                if (metaData) {
                    var dimensionFormat = metaData.getDimensionFormat(args.argument.uniqueName());
                    if (dimensionFormat && dimensionFormat.DateTimeFormat) {
                        var firstDayOfWeek = dimensionFormat.DateTimeFormat.FirstDayOfWeek;
                        args.dateTimePeriods.forEach(function (period) { return period._firstDayOfWeek(firstDayOfWeek); });
                    }
                }
            }
        });
        return _this;
    }
    Object.defineProperty(RangeFilterItem.prototype, "_supportParallelRequests", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    RangeFilterItem.prototype._clearBindings = function () {
        _super.prototype._clearBindings.call(this);
        this.dateTimePeriods.removeAll();
        this.series.removeAll();
    };
    RangeFilterItem.prototype._getInfoCore = function () {
        return _range_filter_item_1.rangeFilterDashboardItemSerializationsInfo;
    };
    RangeFilterItem.prototype._getDefaultItemType = function () {
        return 'RangeFilter';
    };
    RangeFilterItem.prototype._getIgnoreMasterFilter = function () { return this.interactivityOptions.ignoreMasterFilters(); };
    RangeFilterItem.prototype._getClearMasterFilterSupported = function () { return true; };
    RangeFilterItem.prototype._getIsMasterFilter = function () { return true; };
    RangeFilterItem.prototype._getInteractivityDimensionLinks = function () {
        return [this.__argument];
    };
    RangeFilterItem.prototype._getCanColorByDimensions = function () { return true; };
    RangeFilterItem.prototype._getCanColorByMeasures = function () { return true; };
    RangeFilterItem.prototype._getAreMeasuresColoredByDefault = function () {
        return this.series().length > 1;
    };
    RangeFilterItem.prototype._getIsDimensionColoredByDefault = function (dimension) {
        return !!this.__seriesDimensions().filter(function (link) { return link.dataItem() === dimension; })[0];
    };
    RangeFilterItem.prototype._getColorizableDataItemsInfo = function () {
        return [{
                items: this.__seriesDimensions(),
                prefixId: _base_metadata_1.BindingSectionTitles.SeriesDimension
            }];
    };
    RangeFilterItem.prototype._getDefaultCalculationWindowDefinition = function () {
        return new range_filter_calc_window_definition_1.RangeFilterWindowDefinition();
    };
    RangeFilterItem.prototype._hasSelection = function () {
        if (this.currentSelectedDateTimePeriodName())
            return true;
        if (_super.prototype._hasSelection.call(this)) {
            var fullRange = this._fullRange.peek();
            if (fullRange) {
                return !_array_utils_1.arrayEquals(fullRange, this._selectionValues()[0]);
            }
            else
                return true;
        }
        return false;
    };
    RangeFilterItem.prototype._getSelectionByPeriod = function (period) {
        var range = period.getDateTimeValue();
        return [[range.startValue, range.endValue]];
    };
    RangeFilterItem.prototype._getDisplayFilterValues = function (limitCount) {
        return this._stateController._getDisplayFilterValues(limitCount);
    };
    RangeFilterItem.prototype._getEntireRange = function () {
        var points = this._getPointsByDimension(this.__argument.uniqueName(), _item_data_axis_names_1.itemDataAxisNames.chartArgumentAxis);
        if (points && points.length > 0) {
            return [points[0].getValue(), points[points.length - 1].getValue()];
        }
        return [];
    };
    RangeFilterItem.prototype._validateSelectionByData = function (selection) {
        if (this.argument()) {
            var newRange = this._getEntireRange();
            if (!_array_utils_1.arrayEquals(newRange, this._fullRange.peek()))
                this._fullRange(newRange);
        }
        var validatedSelection = this._fullRange() && this._fullRange().length > 0 ? selection : undefined;
        this._setSelection(validatedSelection);
    };
    RangeFilterItem.prototype._getValidatedSelection = function (selectionValues) {
        var validatedValues = _super.prototype._getValidatedSelection.call(this, selectionValues);
        if (this._fullRange() && this._fullRange().length > 0) {
            if (validatedValues) {
                var validatedRange = _range_filter_selection_validator_1.RangeFilterSelectionValidator.validate({
                    startValue: validatedValues[0][0],
                    endValue: validatedValues[0][1]
                }, this.argument()._actualDateTimeGroupInterval() === 'Year', {
                    minimum: this._fullRange()[0],
                    maximum: this._fullRange()[1]
                });
                validatedValues[0] = [validatedRange.startValue, validatedRange.endValue];
            }
        }
        return validatedValues;
    };
    RangeFilterItem.prototype._setState = function (itemState) {
        this._stateController.setState(itemState);
    };
    RangeFilterItem.prototype._removeSelectionFromState = function (state) {
        var itemState = _super.prototype._removeSelectionFromState.call(this, _utils_1.deepExtend({}, state));
        return this._stateController.removeSelectionFromState(itemState);
    };
    RangeFilterItem.prototype._setPredefinedPeriodToState = function (state, periodName) {
        var itemState = _super.prototype._setPredefinedPeriodToState.call(this, _utils_1.deepExtend({}, state), periodName);
        return this._stateController.setPredefinedPeriodToState(itemState, periodName);
    };
    RangeFilterItem.prototype._setSelectionToState = function (state, selection) {
        return this._stateController.setSelectionToState(state, selection);
    };
    RangeFilterItem.prototype._extendContentState = function (content) {
        _super.prototype._extendContentState.call(this, content);
        this._stateController.extendContentState(content);
    };
    RangeFilterItem.prototype._isSortingEnabled = function () {
        return false;
    };
    RangeFilterItem.prototype._isTopNEnabled = function (dataItem) {
        return false;
    };
    RangeFilterItem.rangeSeriesViewTypesMap = {
        Line: chart_series_creator_1.ChartSeriesCreator.chartSeriesViewTypesMap.Line,
        StackedLine: chart_series_creator_1.ChartSeriesCreator.chartSeriesViewTypesMap.StackedLine,
        FullStackedLine: chart_series_creator_1.ChartSeriesCreator.chartSeriesViewTypesMap.FullStackedLine,
        Area: chart_series_creator_1.ChartSeriesCreator.chartSeriesViewTypesMap.Area,
        StackedArea: chart_series_creator_1.ChartSeriesCreator.chartSeriesViewTypesMap.StackedArea,
        FullStackedArea: chart_series_creator_1.ChartSeriesCreator.chartSeriesViewTypesMap.FullStackedArea,
        Bar: chart_series_creator_1.ChartSeriesCreator.chartSeriesViewTypesMap.Bar,
        StackedBar: chart_series_creator_1.ChartSeriesCreator.chartSeriesViewTypesMap.StackedBar,
        FullStackedBar: chart_series_creator_1.ChartSeriesCreator.chartSeriesViewTypesMap.FullStackedBar
    };
    __decorate([
        _utils_2.collectionItemType('DateTimePeriod')
    ], RangeFilterItem.prototype, "dateTimePeriods", void 0);
    return RangeFilterItem;
}(series_item_1.SeriesItem));
exports.RangeFilterItem = RangeFilterItem;
serializable_model_1.itemTypesMap['RangeFilter'] = { type: RangeFilterItem, groupName: 'filter', title: 'DashboardStringId.DefaultNameRangeFilterItem', index: 310 };


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Color = __webpack_require__(96);
var browser = __webpack_require__(99);
var tooltip_1 = __webpack_require__(216);
var $ = __webpack_require__(2);
var _utils_1 = __webpack_require__(3);
var _css_class_names_1 = __webpack_require__(63);
var _appearance_settings_provider_1 = __webpack_require__(123);
var ICON_TYPE_NONE = 'None', APPEARANCE_TYPE_NONE = 'None', APPEARANCE_TYPE_CUSTOM = 'Custom', VERTICAL_AXIS_PADDING = 3, HIDDEN_TEXT_PREFIX = 'hiddenText', TOOLTIP_PREFIX = 'tooltip', GRID_BANDED_ROW_SELECTOR = '.dx-datagrid .dx-row-alt', PIVOT_AREA_SELECTOR = '.dx-pivotgrid .dx-pivotgrid-area';
var BarCacheItem = (function () {
    function BarCacheItem() {
    }
    return BarCacheItem;
}());
var DrawProperty = (function () {
    function DrawProperty() {
        this.shouldDrawFontStyles = true;
        this.shouldDrawBackColorStyle = true;
    }
    return DrawProperty;
}());
exports.DrawProperty = DrawProperty;
var styleSettingsProvider = (function () {
    function styleSettingsProvider() {
        this.wordWrap = false;
        this.FontStyle = {
            Bold: 1,
            Italic: 2,
            Underline: 4,
            Strikeout: 8
        };
        this.DataAttributes = {
            Bar: 'bar',
            Axis: 'axis',
            NormalizedValue: 'normalizedValue',
            ZeroPosition: 'zeroPosition',
            AllowNegativeAxis: 'allowNegativeAxis',
            DrawAxis: 'drawAxis'
        };
        this.cfModel = undefined;
        this.cssCustomClasses = [];
        this.cssCustomClassesLinks = [];
        this.id = styleSettingsProvider.inctanceCounter++;
        this.drawingLocked = true;
        this.barCache = {};
        this.padding = null;
        this.barPrefixes = [];
    }
    styleSettingsProvider.toIconCssClass = function (iconType) {
        return styleSettingsProvider.cssClassNames.iconConditionalFormatting + '-' + iconType.toLowerCase();
    };
    styleSettingsProvider.prototype.initialize = function (cfModel, wordWrap) {
        if (cfModel) {
            this.cfModel = cfModel;
            this._clearCssClasses();
            this._registerCssClasses();
            this.drawingLocked = true;
            this.barCache = {};
            this.padding = null;
            this.barPrefixes = [];
        }
        this.wordWrap = wordWrap !== undefined ? wordWrap : this.wordWrap;
    };
    styleSettingsProvider.prototype.dispose = function () {
        this._clearCssClasses();
        this._registerCssClasses();
    };
    styleSettingsProvider.prototype.draw = function () {
        var that = this;
        $.each(that.barCache, function (i, columnCacheItem) {
            $.each(columnCacheItem, function (i, barCacheItem) {
                barCacheItem.container.text('');
                var $barContainer = barCacheItem.barContainer;
                $barContainer.appendTo(barCacheItem.container);
                barCacheItem.barDiv.appendTo($barContainer);
                if (barCacheItem.drawAxis) {
                    barCacheItem.axisDiv.appendTo($barContainer);
                }
                if (!barCacheItem.showBarOnly) {
                    barCacheItem.textDiv.appendTo($barContainer);
                }
                else {
                    barCacheItem.textDiv.appendTo(barCacheItem.container);
                    barCacheItem.tooltipDiv.appendTo(barCacheItem.container);
                }
            });
        });
        this.drawingLocked = false;
        $.each(that.barPrefixes, function (_, barPrefix) {
            that.updateBarWidth(barPrefix);
        });
    };
    styleSettingsProvider.prototype.updateBarWidth = function (barPrefix) {
        if (!this.drawingLocked) {
            var that = this, barCacheItems = that.barCache[barPrefix], containerHeights;
            if (barCacheItems) {
                containerHeights = this._getContainerHeights(barCacheItems);
                $.each(barCacheItems, function (i, barCacheItem) {
                    var $bar = barCacheItem.barDiv, normalizedValue = $bar.data(that.DataAttributes.NormalizedValue), zeroPosition = $bar.data(that.DataAttributes.ZeroPosition), allowNegativeAxis = $bar.data(that.DataAttributes.AllowNegativeAxis), drawAxis = $bar.data(that.DataAttributes.DrawAxis), containerHeight = containerHeights[i], axisDivs = $bar.parent().find('.' + that.DataAttributes.Axis + '_' + barPrefix + ':first');
                    that._setBarBounds($bar, containerHeight, zeroPosition, normalizedValue, allowNegativeAxis, drawAxis);
                    if (axisDivs.length !== 0) {
                        that._setAxisBounds($(axisDivs[0]), containerHeight, zeroPosition);
                    }
                });
            }
        }
    };
    styleSettingsProvider.prototype.applyStyleSettings = function (container, popupContainer, styleSettingsInfo, ignoreImageSettings, barPrefix, forceLeftAlignment, isSecondaryStyle) {
        var $container = $(container);
        var that = this, styleSettingsModel, sortedStyleIndexes = styleSettingsInfo ? styleSettingsInfo.styleIndexes : undefined, condition, ruleIndex, barInfo, iconType, cssClassname;
        if (sortedStyleIndexes && sortedStyleIndexes.length > 0) {
            sortedStyleIndexes.sort(function (a, b) {
                return a - b;
            });
            $.each(sortedStyleIndexes, function (_, styleIndex) {
                styleSettingsModel = that.cfModel.FormatConditionStyleSettings[styleIndex];
                ruleIndex = styleSettingsInfo.styleAndRuleMappingTable[styleIndex];
                if (styleSettingsModel.IsBarStyle) {
                    condition = that.cfModel.RuleModels[ruleIndex].ConditionModel;
                    barInfo = that._getBarInfo(styleSettingsModel, styleIndex, condition);
                }
                else if (styleSettingsModel.RangeIndex || styleSettingsModel.AppearanceType !== APPEARANCE_TYPE_NONE) {
                    var style = isSecondaryStyle === true ? that.cssCustomClasses[styleIndex].secondary : that.cssCustomClasses[styleIndex].primary;
                    $container.addClass(style);
                }
                else if (styleSettingsModel.IconType !== ICON_TYPE_NONE)
                    iconType = styleSettingsModel.IconType;
            });
            if (barInfo) {
                barInfo.normalizedValue = styleSettingsInfo.normalizedValue;
                barInfo.zeroPosition = styleSettingsInfo.zeroPosition;
                this._createBarContent($container, popupContainer, barInfo, barPrefix, forceLeftAlignment);
            }
            else if (!ignoreImageSettings && iconType) {
                this._applyIconSettings($container, iconType, forceLeftAlignment);
            }
        }
    };
    styleSettingsProvider.prototype._getContainerHeights = function (barCacheItems) {
        var containerHeights = [];
        $.each(barCacheItems, function (_, barCacheItem) {
            var $container = barCacheItem.container, containerElement = $container.get(0), containerBounds = containerElement.getBoundingClientRect(), topBorderWidth = parseInt($container.css('border-top-width')) || 0, bottomBorderWidth = parseInt($container.css('border-bottom-width')) || 0, height = browser.webkit ? containerBounds.height - topBorderWidth : containerBounds.height - topBorderWidth - bottomBorderWidth;
            if (browser.msie)
                height = Math.floor(height);
            containerHeights.push(height);
        });
        return containerHeights;
    };
    styleSettingsProvider.prototype._createCssClassName = function (prefix, styleIndex, postFix) {
        var styleName = prefix + '-' + this.id + '-' + styleIndex;
        if (postFix)
            styleName += '-' + postFix;
        return styleName;
    };
    styleSettingsProvider.prototype._applyIconSettings = function ($container, iconType, forceLeftAlignment, flexParentStyle) {
        if (flexParentStyle === void 0) { flexParentStyle = styleSettingsProvider.cssClassNames.flexParent; }
        if (!$container.hasClass('dx-white-space-column')) {
            var classes = styleSettingsProvider.cssClassNames;
            var textAlignmentIsLeft = this._textAlignmentIsLeft($container);
            var imageClasses = [classes.iconConditionalFormatting, styleSettingsProvider.toIconCssClass(iconType)];
            this._wrapChildElementsToApplyIconSettings($container, classes, forceLeftAlignment);
            var marginClass = textAlignmentIsLeft ? classes.leftMargin : classes.rightMargin;
            imageClasses.push(classes.fixed, marginClass);
            $container[textAlignmentIsLeft ? 'append' : 'prepend']($('<div/>').addClass(imageClasses.join(' ')));
            $container.wrapInner($('<div/>').addClass(flexParentStyle));
        }
    };
    styleSettingsProvider.prototype._wrapChildElementsToApplyIconSettings = function ($container, classes, forceLeftAlignment) {
        var textClasses = [this.wordWrap ? classes.wordWrap : classes.truncated,
            forceLeftAlignment ? '' : classes.stretched].join(' ');
        if ($container.children().length > 0) {
            $container.find('.dx-expand-icon-container').addClass(classes.fixed);
            $container.find('>:not(.dx-expand-icon-container)').addClass(textClasses);
        }
        else {
            $container.wrapInner($('<div/>').addClass(textClasses));
        }
    };
    styleSettingsProvider.prototype._textAlignmentIsLeft = function ($container) {
        var textAlignment = $container.css('text-align');
        return textAlignment === 'left' || textAlignment === 'start' || textAlignment === 'center' || textAlignment === 'justify';
    };
    styleSettingsProvider.prototype._getBarInfo = function (styleSettingsModel, styleIndex, condition) {
        if (this._shouldDrawBarStyle(styleSettingsModel)) {
            return {
                showBarOnly: condition.BarOptions.ShowBarOnly,
                allowNegativeAxis: condition.BarOptions.AllowNegativeAxis,
                drawAxis: condition.BarOptions.DrawAxis,
                cssClass: this.cssCustomClasses[styleIndex].primary
            };
        }
        return null;
    };
    styleSettingsProvider.prototype._createBarContent = function ($container, popupContainer, barInfo, barPrefix, forceLeftAlignment) {
        var displayText = $container.text(), $tooltipDiv, index, tooltipId, containerId, $barContainer, barCacheItem = new BarCacheItem();
        if (!this.padding)
            this.padding = $container.css('padding-top') + ' ' + $container.css('padding-left');
        if (!this.barCache[barPrefix])
            this.barCache[barPrefix] = [];
        this.barCache[barPrefix].push(barCacheItem);
        $container.addClass(styleSettingsProvider.cssClassNames.barContainer);
        $barContainer = $('<div/>').addClass(styleSettingsProvider.cssClassNames.relativePosition);
        barCacheItem.container = $container;
        barCacheItem.barContainer = $barContainer;
        if (!this.barPrefixes.some(function (prefix) { return prefix === barPrefix; }))
            this.barPrefixes.push(barPrefix);
        barCacheItem.barDiv = this._createBarDiv($barContainer, barInfo, barPrefix);
        barCacheItem.showBarOnly = barInfo.showBarOnly;
        barCacheItem.drawAxis = barInfo.drawAxis;
        if (barInfo.drawAxis) {
            barCacheItem.axisDiv = this._createAxisDiv($barContainer, barPrefix, barInfo.zeroPosition);
        }
        if (!barInfo.showBarOnly) {
            barCacheItem.textDiv = $('<div/>').addClass(styleSettingsProvider.cssClassNames.barValue).text(displayText);
        }
        else {
            barCacheItem.textDiv = $('<div/>').html('&nbsp;');
            index = styleSettingsProvider.hiddenTextCounter++;
            tooltipId = TOOLTIP_PREFIX + index;
            containerId = HIDDEN_TEXT_PREFIX + index;
            $container.attr('id', containerId);
            var tooltipDiv = document.createElement('div');
            tooltipDiv.innerText = displayText;
            tooltipDiv.id = tooltipId;
            new tooltip_1.default(tooltipDiv, {
                target: '#' + containerId,
                container: popupContainer,
                showEvent: 'dxhoverstart',
                hideEvent: 'dxhoverend',
            });
            barCacheItem.tooltipDiv = $(tooltipDiv);
            $container.unbind().hover(function () { $(tooltipDiv).toggle(); });
        }
    };
    styleSettingsProvider.prototype._createBarDiv = function ($container, barInfo, barPrefix) {
        var $barDiv = $('<div/>').addClass(styleSettingsProvider.cssClassNames.absolutePosition).addClass(barInfo.cssClass);
        $barDiv.html('&nbsp;');
        $barDiv.addClass(this.DataAttributes.Bar + '_' + barPrefix);
        $barDiv.data(this.DataAttributes.NormalizedValue, barInfo.normalizedValue);
        $barDiv.data(this.DataAttributes.ZeroPosition, barInfo.zeroPosition);
        $barDiv.data(this.DataAttributes.AllowNegativeAxis, barInfo.allowNegativeAxis);
        $barDiv.data(this.DataAttributes.DrawAxis, barInfo.drawAxis);
        return $barDiv;
    };
    styleSettingsProvider.prototype._createAxisDiv = function ($container, barPrefix, zeroPosition) {
        var $axisDiv = $('<div/>');
        $axisDiv.addClass(styleSettingsProvider.cssClassNames.absolutePosition).addClass(this.DataAttributes.Axis + '_' + barPrefix + ' ' + styleSettingsProvider.cssClassNames.barAxis);
        $axisDiv.data(this.DataAttributes.ZeroPosition, zeroPosition);
        return $axisDiv;
    };
    styleSettingsProvider.prototype._setBarBounds = function ($barDiv, containerHeight, zeroPosition, normalizedValue, allowNegativeAxis, drawAxis) {
        var barWidth = Math.abs(normalizedValue * 100), axisPosition = Math.abs(zeroPosition * 100), width = allowNegativeAxis && drawAxis && normalizedValue < 0 && zeroPosition > 0 ? 'calc(' + barWidth + '% + 1px)' : barWidth + '%';
        $barDiv.css({
            height: containerHeight + 'px',
            width: width
        });
        if (allowNegativeAxis && normalizedValue < 0 && zeroPosition > 0) {
            if (drawAxis) {
                $barDiv.css('right', 'calc(' + (100 - axisPosition) + '% - 1px)');
            }
            else {
                $barDiv.css('right', (100 - axisPosition) + '%');
            }
        }
        else
            $barDiv.css('left', axisPosition + '%');
    };
    styleSettingsProvider.prototype._setAxisBounds = function ($axisDiv, containerHeight, zeroPosition) {
        $axisDiv.css({
            left: Math.abs(zeroPosition * 100) + '%',
            height: Math.max(0, containerHeight - VERTICAL_AXIS_PADDING * 2) + 'px'
        });
    };
    styleSettingsProvider.prototype._getCustomBackColor = function (color) {
        if (color.toHex)
            return color.toHex();
        return _utils_1.toColor(color);
    };
    styleSettingsProvider.prototype._getRangeBackColorStyleSettings = function (styleSettings, ruleIndex) {
        var rangeIndex = styleSettings.RangeIndex, condition = this.cfModel.RuleModels[ruleIndex].ConditionModel, leftIndex = -1, rightIndex = -1, leftModel, rightModel, resultModel, leftColor, rightColor, color;
        $.each(condition.FixedColors, function (index, colorModel) {
            if (index < rangeIndex && (leftIndex === -1 || index > leftIndex))
                leftIndex = index;
            if (index > rangeIndex && (rightIndex === -1 || index < rightIndex))
                rightIndex = index;
        });
        leftModel = condition.FixedColors[leftIndex];
        rightModel = condition.FixedColors[rightIndex];
        leftColor = this._getBackColor(leftModel);
        rightColor = this._getBackColor(rightModel);
        return {
            AppearanceType: APPEARANCE_TYPE_CUSTOM,
            Color: leftColor.blend(rightColor, (rangeIndex - leftIndex) / (rightIndex - leftIndex)),
            ForeColor: leftModel.ForeColor,
            FontFamily: leftModel.FontFamily,
            FontSize: leftModel.FontSize,
            FontStyle: leftModel.FontStyle,
            IsBarStyle: leftModel.IsBarStyle
        };
    };
    styleSettingsProvider.prototype._getBackColor = function (colorModel) {
        var color;
        if (colorModel.AppearanceType === APPEARANCE_TYPE_CUSTOM) {
            color = _utils_1.toColor(colorModel.Color);
        }
        else if (colorModel.AppearanceType !== APPEARANCE_TYPE_NONE) {
            color = _appearance_settings_provider_1.appearanceSettingsProvider.backAndGradientColorGroupsToBackColor(colorModel.AppearanceType);
        }
        return new Color(color);
    };
    styleSettingsProvider.prototype._clearCssClasses = function () {
        var that = this;
        $.each(that.cssCustomClassesLinks, function (_, s) {
            s.remove();
        });
        that.cssCustomClassesLinks = [];
    };
    styleSettingsProvider.prototype._registerCssClasses = function () {
        if (this.cfModel != undefined) {
            for (var styleIndex = 0; styleIndex < this.cfModel.FormatConditionStyleSettings.length; styleIndex++) {
                var styleSettingsModel = this.cfModel.FormatConditionStyleSettings[styleIndex];
                this._registerCssClassByStyleModel(styleSettingsModel, styleIndex, false);
                if (this._isShouldGenerateSecondaryStyle(styleSettingsModel)) {
                    this._registerCssClassByStyleModel(styleSettingsModel, styleIndex, true);
                }
            }
        }
    };
    styleSettingsProvider.prototype._registerCssClassByStyleModel = function (styleSettingsModel, styleIndex, isSecondaryStyle) {
        var className = this._generateCssClassName(styleIndex, isSecondaryStyle);
        this._addCssClassToDictionary(className, styleIndex, isSecondaryStyle);
        this._generateCssClassBody(styleSettingsModel, className, this._getDrawProperty(isSecondaryStyle));
    };
    styleSettingsProvider.prototype._addCssClassToDictionary = function (styleName, styleIndex, isSecondary) {
        var primaryStyle, secondaryStyle;
        if (this.cssCustomClasses[styleIndex]) {
            primaryStyle = this.cssCustomClasses[styleIndex].primary;
            secondaryStyle = this.cssCustomClasses[styleIndex].secondary;
        }
        if (isSecondary)
            secondaryStyle = styleName;
        else
            primaryStyle = styleName;
        this.cssCustomClasses[styleIndex] = {
            primary: primaryStyle,
            secondary: secondaryStyle
        };
    };
    styleSettingsProvider.prototype._generateCssClassName = function (styleIndex, isSecondary) {
        var postFix = this._getStylePostFix(isSecondary);
        var cssClassName = this._createCssClassName(styleSettingsProvider.cssClassNames.customStyle, styleIndex, postFix);
        return cssClassName;
    };
    styleSettingsProvider.prototype.addNewStyle = function (styleName, styleIndex, isSecond) {
        this.cssCustomClasses[styleIndex] = {
            secondary: styleName,
            primary: styleName
        };
    };
    styleSettingsProvider.prototype._isShouldGenerateSecondaryStyle = function (styleSettingsModel) {
        return false;
    };
    styleSettingsProvider.prototype._isSecondaryStyle = function (styleSettingsModel) {
        return false;
    };
    styleSettingsProvider.prototype._getStylePostFix = function (isSecondary) {
        return null;
    };
    styleSettingsProvider.prototype._getDrawProperty = function (isSecondaryStyle) {
        return null;
    };
    styleSettingsProvider.prototype._shouldDrawBarStyle = function (styleSettingsModel) {
        return true;
    };
    styleSettingsProvider.prototype._generateCssClassBody = function (styleSettingsModel, cssClassName, drawProperty) {
        var selector = this._getCssTdSelector(cssClassName);
        if (styleSettingsModel.RangeIndex) {
            styleSettingsModel = this._getRangeBackColorStyleSettings(styleSettingsModel, styleSettingsModel.RuleIndex);
            this._createCssClassFromCustomAppearanceType(styleSettingsModel, selector, drawProperty);
        }
        else if (styleSettingsModel.AppearanceType === APPEARANCE_TYPE_CUSTOM) {
            this._createCssClassFromCustomAppearanceType(styleSettingsModel, selector, drawProperty);
        }
        else if (styleSettingsModel.AppearanceType !== APPEARANCE_TYPE_NONE) {
            this._createCssClassFromPredefinedAppearanceType(selector, styleSettingsModel.AppearanceType, drawProperty);
        }
    };
    styleSettingsProvider.prototype._getCssTdSelector = function (cssClassname) {
        return '.' + styleSettingsProvider.cssClassNames.dashboardContainer + ' .' + cssClassname + ', '
            + GRID_BANDED_ROW_SELECTOR + ' .' + cssClassname + ', '
            + PIVOT_AREA_SELECTOR + ' .' + cssClassname;
    };
    styleSettingsProvider.prototype._createCssClassFromCustomAppearanceType = function (styleSettingsModel, cssSelector, drawProperty) {
        var style = "<style type='text/css'> " + cssSelector + '{ ', $style;
        if (drawProperty == null || drawProperty.shouldDrawBackColorStyle)
            style = this._createBackColorStyle(styleSettingsModel, style);
        if (drawProperty == null || drawProperty.shouldDrawFontStyles)
            style = this._createFontStyles(styleSettingsModel, style);
        style += '</style>';
        $style = $(style);
        $style.appendTo('head');
        this.cssCustomClassesLinks.push($style);
    };
    styleSettingsProvider.prototype._createFontStyles = function (styleSettingsModel, style) {
        var isUnderline = (styleSettingsModel.FontStyle & this.FontStyle.Underline) !== 0, isStrikeout = (styleSettingsModel.FontStyle & this.FontStyle.Strikeout) !== 0;
        if (styleSettingsModel.ForeColor)
            style += 'color:' + _utils_1.toColor(styleSettingsModel.ForeColor) + ';';
        if (styleSettingsModel.FontFamily)
            style += 'font-family:' + styleSettingsModel.FontFamily + ';';
        if (styleSettingsModel.FontSize && styleSettingsModel.FontSize > 0)
            style += 'font-size:' + styleSettingsModel.FontSize + ';';
        if ((styleSettingsModel.FontStyle & this.FontStyle.Bold) !== 0)
            style += 'font-weight:bold;';
        if ((styleSettingsModel.FontStyle & this.FontStyle.Italic) !== 0)
            style += 'font-style: italic;';
        if (isUnderline && isStrikeout)
            style += 'text-decoration: underline line-through;';
        else if (isUnderline)
            style += 'text-decoration: underline;';
        else if (isStrikeout)
            style += 'text-decoration: line-through;';
        return style;
    };
    styleSettingsProvider.prototype._createBackColorStyle = function (styleSettingsModel, style) {
        if (styleSettingsModel.Color)
            style += 'background-color:' + this._getCustomBackColor(styleSettingsModel.Color) + ';';
        return style;
    };
    styleSettingsProvider.prototype._createCssClassFromPredefinedAppearanceType = function (selector, appearanceType, drawProperty) {
        var style = "<style type='text/css'> " + selector +
            _appearance_settings_provider_1.appearanceSettingsProvider.toCssClassBody(appearanceType, null, drawProperty) +
            '</style>', $style = $(style);
        $style.appendTo('head');
        this.cssCustomClassesLinks.push($style);
    };
    styleSettingsProvider.cssClassNames = {
        iconConditionalFormatting: 'dx-icon-dashboard-cf',
        barAxis: 'dx-dashboard-bar-axis',
        customStyle: 'dx-dashboard-cf-style',
        customGradientStyle: 'dx-dashboard-cf-gradient-style',
        dashboardContainer: 'dx-dashboard-container',
        absolutePosition: 'dx-dashboard-absolute-position',
        relativePosition: 'dx-dashboard-relative-position',
        flexParent: 'dx-dashboard-flex-parent',
        flexParentBaseline: 'dx-dashboard-flex-parent-baseline',
        truncated: 'dx-dashboard-truncated',
        wordWrap: 'dx-dashboard-word-wrap',
        stretched: 'dx-dashboard-stretched',
        fixed: 'dx-dashboard-fixed',
        leftMargin: 'dx-dashboard-left-margin',
        rightMargin: 'dx-dashboard-right-margin',
        barContainer: 'dx-dashboard-cf-bar-container',
        barValue: 'dx-dashboard-cf-bar-value'
    };
    styleSettingsProvider.inctanceCounter = 0;
    styleSettingsProvider.hiddenTextCounter = 0;
    return styleSettingsProvider;
}());
exports.styleSettingsProvider = styleSettingsProvider;
var cardItemStyleSettingsProvider = (function (_super) {
    __extends(cardItemStyleSettingsProvider, _super);
    function cardItemStyleSettingsProvider() {
        return _super.call(this) || this;
    }
    cardItemStyleSettingsProvider.prototype._getDrawProperty = function (isSecondaryStyle) {
        var drawProperty = new DrawProperty();
        drawProperty.shouldDrawBackColorStyle = isSecondaryStyle;
        drawProperty.shouldDrawFontStyles = !isSecondaryStyle;
        return drawProperty;
    };
    cardItemStyleSettingsProvider.prototype._getStylePostFix = function (isSecondaryStyle) {
        return isSecondaryStyle ? 'card' : null;
    };
    cardItemStyleSettingsProvider.prototype._isShouldGenerateSecondaryStyle = function (styleSettingsModel) {
        return true;
    };
    cardItemStyleSettingsProvider.prototype._shouldDrawBarStyle = function (styleSettingsModel) {
        return false;
    };
    cardItemStyleSettingsProvider.prototype._textAlignmentIsLeft = function ($container) {
        return false;
    };
    cardItemStyleSettingsProvider.prototype._getCssTdSelector = function (cssClassname) {
        var notSelectedOrHovered = ':not(.dx-selected-viewer-item):not(.dx-hovered-viewer-item)';
        return '.' + styleSettingsProvider.cssClassNames.dashboardContainer + ' .' + _css_class_names_1.layoutCardCssClassNames.card + notSelectedOrHovered + ' .' + cssClassname + ', '
            + '.' + styleSettingsProvider.cssClassNames.dashboardContainer + ' .' + _css_class_names_1.layoutCardCssClassNames.card + notSelectedOrHovered + '.' + cssClassname;
    };
    cardItemStyleSettingsProvider.prototype._applyIconSettings = function ($container, iconType, forceLeftAlignment, flexParentStyle) {
        if (flexParentStyle === void 0) { flexParentStyle = styleSettingsProvider.cssClassNames.flexParent; }
        _super.prototype._applyIconSettings.call(this, $container, iconType, forceLeftAlignment, styleSettingsProvider.cssClassNames.flexParentBaseline);
    };
    cardItemStyleSettingsProvider.prototype._wrapChildElementsToApplyIconSettings = function ($container, classes, forceLeftAlignment) {
        var textClasses = [this.wordWrap ? classes.wordWrap : classes.truncated, classes.stretched].join(' ');
        $container.wrapInner($('<div/>').addClass(textClasses));
    };
    cardItemStyleSettingsProvider.prototype.getIconType = function (styleSettingsInfo) {
        var _this = this;
        var sortedStyleIndexes = styleSettingsInfo ? styleSettingsInfo.styleIndexes : undefined;
        var iconType;
        if (sortedStyleIndexes && sortedStyleIndexes.length > 0) {
            sortedStyleIndexes.sort(function (a, b) { return a - b; });
            sortedStyleIndexes.forEach(function (index) {
                var styleSettingsModel = _this.cfModel.FormatConditionStyleSettings[index];
                if (styleSettingsModel.IconType !== ICON_TYPE_NONE)
                    iconType = styleSettingsModel.IconType;
            });
        }
        return iconType;
    };
    cardItemStyleSettingsProvider.prototype.applyIndicatorStyle = function (container, iconType) {
        this._applyIconSettings($(container), iconType, null);
    };
    return cardItemStyleSettingsProvider;
}(styleSettingsProvider));
exports.cardItemStyleSettingsProvider = cardItemStyleSettingsProvider;


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _common_1 = __webpack_require__(35);
var _utils_1 = __webpack_require__(3);
var _interactivity_controller_1 = __webpack_require__(150);
var _item_viewer_adapter_base_1 = __webpack_require__(356);
var DataItemViewerAdapter = (function (_super) {
    __extends(DataItemViewerAdapter, _super);
    function DataItemViewerAdapter() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._createDefaultCustomInteractivityOptions = function () {
            return {
                selectionMode: _interactivity_controller_1.dashboardSelectionMode.none,
                hoverEnabled: false,
                targetAxes: [],
                defaultSelectedValues: []
            };
        };
        _this._ensureCustomInteractivityOptions = function (interactivityOptions, interactivityEnable, itemData) {
            var newOptions = {
                selectionMode: interactivityOptions.selectionMode,
                hoverEnabled: interactivityOptions.hoverEnabled,
                targetAxes: interactivityOptions.targetAxes,
                defaultSelectedValues: interactivityOptions.defaultSelectedValues
            };
            if (interactivityEnable && interactivityOptions.defaultSelectedValues.length == 0 && interactivityOptions.selectionMode == _interactivity_controller_1.dashboardSelectionMode.single) {
                var tuple = [];
                interactivityOptions.targetAxes.forEach(function (axisName) {
                    tuple.push({
                        AxisName: axisName,
                        Value: itemData.getAxis(axisName).getPoints()[0].getUniquePath()
                    });
                });
                newOptions.defaultSelectedValues = [tuple];
            }
            return newOptions;
        };
        return _this;
    }
    DataItemViewerAdapter.prototype.attachToModel = function (viewerItem, dataDashboardItem) {
        var _this = this;
        _super.prototype.attachToModel.call(this, viewerItem, dataDashboardItem);
        this.modelSubscriptions.push(dataDashboardItem._actions.subscribe(function (actions) {
            _this.updateActionsModel(viewerItem, actions);
        }));
        this.modelSubscriptions.push(dataDashboardItem._actualSelectionValues.subscribe(function (newSelection) {
            viewerItem.setSelection(newSelection);
        }));
        viewerItem.selected.add(dataDashboardItem._processItemSelectionChange);
        viewerItem.drillUp.add(dataDashboardItem._processItemDrillUp);
        viewerItem.clearMasterFilter.add(dataDashboardItem._processItemClearMasterFilter);
        viewerItem.contentElementSelection.add(dataDashboardItem._processContentElementSelection);
        viewerItem.allowLimitDataCallback = function () {
            dataDashboardItem._limitDataState.toggle();
            _this.context.refresh(dataDashboardItem.componentName());
        };
    };
    DataItemViewerAdapter.prototype.detachFromModel = function (viewerItem, dataDashboardItem) {
        viewerItem.selected.remove(dataDashboardItem._processItemSelectionChange);
        viewerItem.drillUp.remove(dataDashboardItem._processItemDrillUp);
        viewerItem.clearMasterFilter.remove(dataDashboardItem._processItemClearMasterFilter);
        viewerItem.contentElementSelection.remove(dataDashboardItem._processContentElementSelection);
        viewerItem.allowLimitDataCallback = null;
        _super.prototype.detachFromModel.call(this, viewerItem, dataDashboardItem);
    };
    DataItemViewerAdapter.prototype.ensureViewerItemCore = function (onlyCreation, content) {
        var customInteractivityOptions = this._createDefaultCustomInteractivityOptions();
        _super.prototype.ensureViewerItemCore.call(this, onlyCreation, content, customInteractivityOptions);
        this.item.updateItem(this._ensureCustomInteractivityOptions(customInteractivityOptions, this.dashboardItem._actions().length > 0, this.dashboardItem._getItemData()));
        this.updateActionsModel(this.item, this.dashboardItem._actions());
    };
    DataItemViewerAdapter.prototype.updateItemContent = function (content) {
        if (!this.dashboardItem._actualSelectionValues() && this.item.visualMode !== 'caption') {
            this.item.clearSelection();
        }
        _super.prototype.updateItemContent.call(this, content);
        this.item.updateInteractivityOptions();
    };
    DataItemViewerAdapter.prototype.createDashboardViewerItem = function (element, content, dashboardItem) {
        var actions = dashboardItem._actions();
        content.ActionModel = content.ActionModel || {};
        content.ActionModel.Actions = actions;
        content.ActionModel.DrillUpButtonState = this.getDrillUpState(actions);
        content.ActionModel.ClearMasterFilterButtonState = this.dashboardItem._getClearMasterFilterState();
        var viewerItem = _super.prototype.createDashboardViewerItem.call(this, element, content, dashboardItem);
        viewerItem.updateInteractivityOptions();
        return viewerItem;
    };
    DataItemViewerAdapter.prototype.getDrillUpState = function (actions) {
        if (actions.indexOf(_common_1.viewerActions.drillUp) !== -1) {
            return 'Enabled';
        }
        else {
            if (actions.indexOf(_common_1.viewerActions.drillDown) !== -1) {
                return 'Disabled';
            }
            else {
                return 'Hidden';
            }
        }
    };
    DataItemViewerAdapter.prototype.updateActionsModel = function (item, actions) {
        var actionModel = _utils_1.deepExtend({}, item.options.ActionModel);
        actionModel.Actions = actions;
        actionModel.DrillUpButtonState = this.getDrillUpState(actions);
        actionModel.ClearMasterFilterButtonState = this.dashboardItem._getClearMasterFilterState();
        var newOptions = _utils_1.deepExtend({}, item.options);
        newOptions.ActionModel = actionModel;
        newOptions.ContentType = 'ActionModel';
        item.updateContent(newOptions);
    };
    return DataItemViewerAdapter;
}(_item_viewer_adapter_base_1.ItemViewerAdapterBase));
exports.DataItemViewerAdapter = DataItemViewerAdapter;


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _utils_1 = __webpack_require__(3);
var _notificator_view_model_1 = __webpack_require__(598);
var NotificationController = (function () {
    function NotificationController() {
        this._viewModel = new _notificator_view_model_1.NotificationControllerViewModel();
    }
    NotificationController._getErrorTextFromResponse = function (request) {
        return (request && request.responseJSON && request.responseJSON.Message) || '';
    };
    NotificationController._getDetailedErrorMessage = function (errorInfo) {
        var errorDetail = '';
        if (typeof errorInfo == 'string') {
            errorDetail = errorInfo;
        }
        else if (errorInfo && errorInfo['responseJSON']) {
            errorDetail = NotificationController._getErrorTextFromResponse(errorInfo);
        }
        return _utils_1.decodeHtml(errorDetail);
    };
    NotificationController.prototype.suspended = function (isSuspended) {
        this._viewModel.suspended(isSuspended);
    };
    NotificationController.prototype.showState = function (message) {
        this._viewModel.updateNotification('info', message);
    };
    NotificationController.prototype.showSuccess = function (message) {
        this._viewModel.updateNotification('success', message);
    };
    NotificationController.prototype.showError = function (title, errorInfo) {
        var errorDetail = NotificationController._getDetailedErrorMessage(errorInfo);
        this._viewModel.updateNotification('error', title, errorDetail);
        console.warn(title + (errorDetail ? ' - ' + errorDetail : ''));
    };
    NotificationController.prototype.reset = function () {
        this._viewModel.reset();
    };
    return NotificationController;
}());
exports.NotificationController = NotificationController;


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var _utils_1 = __webpack_require__(3);
var CollectionEditorViewModelBase = (function () {
    function CollectionEditorViewModelBase(params) {
        this.noDataText = params.noDataText || 'DashboardWebStringId.CollectionEditor.NoItems';
        this.customToolbarItems = params.customToolbarItems;
        this.isToolbarVisible = true;
        this.allowAddItem = false;
        this.allowEditItem = true;
        this.allowReorderItem = false;
        this.allowRemoveItem = false;
        this.addEnabled = ko.observable(false);
        this.editEnabled = ko.observable(false);
        this.upEnabled = ko.observable(false);
        this.downEnabled = ko.observable(false);
        this.removeEnabled = ko.observable(false);
    }
    CollectionEditorViewModelBase.prototype.getListOptions = function () {
        var _this = this;
        return {
            activeStateEnabled: false,
            itemTemplate: function (itemData, itemIndex, itemElement) { return _this._itemTemplate(itemData, itemIndex, _utils_1.$unwrap(itemElement)); },
            noDataText: _default_1.getLocalizationById(this.noDataText),
            onContentReady: function () { return _this._updateActionsState(); },
            onInitialized: function (e) { return _this.listInstance = e.component; },
            onItemClick: function () { return _this._itemClickHandler(); },
            selectionMode: 'single',
        };
    };
    Object.defineProperty(CollectionEditorViewModelBase.prototype, "selectedValue", {
        get: function () {
            return this.listInstance && this.listInstance.option('selectedItems')[0];
        },
        enumerable: true,
        configurable: true
    });
    CollectionEditorViewModelBase.prototype.dispose = function () { };
    CollectionEditorViewModelBase.prototype._itemTemplate = function (itemData, itemIndex, itemElement) {
        var div = document.createElement('div');
        div.innerText = this._getDisplayText(itemData);
        itemElement.appendChild(div);
    };
    CollectionEditorViewModelBase.prototype._getDisplayText = function (itemData) {
        return '';
    };
    CollectionEditorViewModelBase.prototype._itemClickHandler = function () {
        if (this._innerSelection !== this.selectedValue) {
            this._onSelectionChanged();
        }
        else {
            if (this.isToolbarVisible && this.allowEditItem && this.editEnabled()) {
                this.edit();
            }
        }
    };
    CollectionEditorViewModelBase.prototype._listSelectionChanged = function () { };
    CollectionEditorViewModelBase.prototype._updateActionsState = function () { };
    CollectionEditorViewModelBase.prototype._onSelectionChanged = function () {
        this._innerSelection = this.selectedValue;
        this._listSelectionChanged();
        this._updateActionsState();
    };
    CollectionEditorViewModelBase.prototype._setListSelection = function (selectedItem) {
        this.listInstance.option('selectedItems', selectedItem !== undefined ? [selectedItem] : []);
        this._onSelectionChanged();
    };
    return CollectionEditorViewModelBase;
}());
exports.CollectionEditorViewModelBase = CollectionEditorViewModelBase;
var CollectionEditorRefreshCallback = (function () {
    function CollectionEditorRefreshCallback() {
        var _this = this;
        this.callbacks = [];
        this.refresh = function () { return _this.callbacks.forEach(function (fn) { return fn(); }); };
        this.subscribe = function (fn) { return _this.callbacks.push(fn); };
    }
    return CollectionEditorRefreshCallback;
}());
exports.CollectionEditorRefreshCallback = CollectionEditorRefreshCallback;


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var difference_calculation_1 = __webpack_require__(517);
var moving_calculation_1 = __webpack_require__(518);
var percent_of_total_calculation_1 = __webpack_require__(519);
var rank_calculation_1 = __webpack_require__(520);
var running_total_calculation_1 = __webpack_require__(521);
var data_item_1 = __webpack_require__(8);
var dimension_1 = __webpack_require__(43);
var measure_1 = __webpack_require__(59);
var _data_item_1 = __webpack_require__(20);
var _data_item_format_1 = __webpack_require__(179);
var _dimension_1 = __webpack_require__(71);
var _measure_1 = __webpack_require__(70);
var _data_field_1 = __webpack_require__(14);
var cells_item_format_rule_1 = __webpack_require__(188);
var _dashboard_item_format_rule_1 = __webpack_require__(52);
var index_internal_1 = __webpack_require__(58);
var data_dashboard_item_1 = __webpack_require__(9);
var _data_dashboard_item_1 = __webpack_require__(26);
var _base_metadata_1 = __webpack_require__(4);
var _calculation_surface_1 = __webpack_require__(629);
var _filter_utils_1 = __webpack_require__(158);
var _item_filter_display_name_provider_1 = __webpack_require__(226);
var _item_filter_items_provider_1 = __webpack_require__(159);
var _form_adapter_editors_1 = __webpack_require__(22);
var _object_properties_wrapper_1 = __webpack_require__(10);
var _accordion_tab_1 = __webpack_require__(7);
var _properties_controller_1 = __webpack_require__(369);
var _collection_editor_viewmodel_1 = __webpack_require__(79);
var _display_name_provider_1 = __webpack_require__(24);
var _calculation_properties_composer_1 = __webpack_require__(368);
var _shared_composers_1 = __webpack_require__(13);
var DataItemsPropertiesComposer = (function () {
    function DataItemsPropertiesComposer() {
    }
    DataItemsPropertiesComposer._addConstraint = function (wrapper, condition, propertiesInCondition) {
        var rulesToAdd = {};
        wrapper.getInfo().map(function (propInfo) { return propInfo.propertyName; }).forEach(function (propName) { return rulesToAdd[propName] = condition; });
        DataItemsPropertiesComposer._mergeRules(wrapper.visibilityFilterRules, rulesToAdd, 'and');
        propertiesInCondition.forEach(function (prop) {
            if (wrapper.getInfo().filter(function (p) { return p.propertyName === prop.info.propertyName; }).length === 0) {
                wrapper.addProperty(prop.value, prop.info);
                wrapper.visibilityFilterRules[prop.info.propertyName] = function () { return false; };
            }
        });
    };
    DataItemsPropertiesComposer._mergeRules = function (into, rules, operator) {
        Object.keys(rules).forEach(function (propName) {
            var currentRule = into[propName];
            var ruleToAdd = rules[propName];
            var newRule = currentRule ? [currentRule, operator, ruleToAdd] :
                operator === 'and' ? ruleToAdd : [];
            into[propName] = newRule;
        });
    };
    DataItemsPropertiesComposer.prototype.composeTabs = function (model, args) {
        if (args.constraint === undefined)
            args.constraint = function () { return true; };
        if (args.propertiesController === undefined)
            args.propertiesController = new _properties_controller_1.PropertiesController();
        var dataField = args.choosenField.peek(), bindingTab = new _accordion_tab_1.BindingAccordionTab(_accordion_tab_1.KnownTabs.Binding, 'DashboardWebStringId.Tabs.Binding'), optionsTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.UnwrappedDataItem, 'DashboardWebStringId.Options'), dataShapingTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.DataShaping, 'DashboardWebStringId.Tabs.DataShaping'), numericFormatTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.NumericFormat, 'DashboardWebStringId.Tabs.Format'), dateTimeFormatTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.DateTimeFormat, 'DashboardWebStringId.Tabs.Format'), topNTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.TopN, 'DashboardStringId.CommandFormatRuleTopN'), calculationsTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Calculations, 'DashboardWebStringId.Calculations'), filterTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.MeasureFilter, 'DashboardWebStringId.AccordionTab.MeasureFilter'), result = [bindingTab, optionsTab, dataShapingTab, numericFormatTab, dateTimeFormatTab, topNTab, calculationsTab, filterTab];
        optionsTab.orderNo = 90;
        calculationsTab.orderNo = 190;
        filterTab.orderNo = 195;
        numericFormatTab.orderNo = 200;
        dateTimeFormatTab.orderNo = 205;
        topNTab.orderNo = 210;
        this.fillBindingTab(bindingTab, model, args.choosenField, args.dataSourceBrowser, args.dataDashboardItem, args.constraint);
        var dataItem = model.dataItem();
        if (dataItem) {
            var fieldType = dataField && dataField.fieldType();
            if (args.unwrappedDataItem) {
                this.fillOptionsTab(optionsTab, dataItem, model, args.dataDashboardItem);
            }
            if (dataItem instanceof dimension_1.Dimension) {
                var measures = args.dataDashboardItem._measures.filter(function (measure) { return !measure._hasCalculation(); });
                this.fillDataShapingPropertiesTab(dataShapingTab, args.dataDashboardItem, model, dataField, measures, args.dataSourceBrowser);
                if (args.dataDashboardItem._isTopNEnabled(dataItem)) {
                    this.fillTopNTab(topNTab, args.dataDashboardItem, dataItem, dataField, measures, model._specifics.supportsTopNOther, args.dataSourceBrowser);
                }
                if (!model._specifics.skipFormatting && dataField && !_data_field_1.DataField.isOlap(dataField.dataMember())) {
                    if (_data_field_1.DataField.isNumeric(dataField)) {
                        numericFormatTab.tabModel(_shared_composers_1.SharedComposers.getNumericFormatWrapper(dataItem.numericFormat));
                    }
                    else if (fieldType === 'DateTime') {
                        this.fillDimensionDatetimeFormatTab(dateTimeFormatTab, dataItem);
                    }
                }
                else if (model._specifics.forceAddOlapExactDateFormat && dataField && fieldType === 'DateTime' && _data_field_1.DataField.isOlap(dataField.dataMember())) {
                    this.fillDataItemExactDatetimeFormatTab(dateTimeFormatTab, dataItem);
                }
            }
            if (dataItem instanceof measure_1.Measure && !model._specifics.isAttribute) {
                if (args.dataDashboardItem._isCalculationSupported() && !_data_field_1.DataField.isOlap(dataItem.dataMember())) {
                    this.fillCalculationsTab(calculationsTab, dataItem, args.dataDashboardItem, args.dataSourceBrowser, args.propertiesController);
                }
                if (!model._specifics.skipFormatting) {
                    var numericFormatWrapper = _shared_composers_1.SharedComposers.getNumericFormatWrapper(dataItem.numericFormat);
                    if (!_data_field_1.DataField.isNumeric(dataField)) {
                        DataItemsPropertiesComposer._addConstraint(numericFormatWrapper, [
                            [_measure_1.summaryTypeTemplate.propertyName, '<>', 'Min'], 'and',
                            [_measure_1.summaryTypeTemplate.propertyName, '<>', 'Max'], 'and',
                            [_measure_1.summaryTypeTemplate.propertyName, '<>', 'Mode']
                        ], [{ info: _measure_1.summaryTypeTemplate, value: dataItem.summaryType }]);
                    }
                    numericFormatTab.tabModel(numericFormatWrapper);
                    if (fieldType === 'DateTime') {
                        var exactDateWrapper = this._createExactDatePropertiesWrapper(dataItem);
                        DataItemsPropertiesComposer._addConstraint(exactDateWrapper, [
                            [_measure_1.summaryTypeTemplate.propertyName, '=', 'Min'], 'or',
                            [_measure_1.summaryTypeTemplate.propertyName, '=', 'Max'], 'or',
                            [_measure_1.summaryTypeTemplate.propertyName, '=', 'Mode']
                        ], [{ info: _measure_1.summaryTypeTemplate, value: dataItem.summaryType }]);
                        dateTimeFormatTab.tabModel(exactDateWrapper);
                    }
                }
                this._fillFilterTab(filterTab, dataItem, args.dataDashboardItem, args.dataSourceBrowser);
            }
        }
        return result;
    };
    DataItemsPropertiesComposer.prototype.fillBindingTab = function (bindingTab, model, choosenField, dataSourceBrowser, dataDashboardItem, constraint) {
        bindingTab.tabModel({
            choosenField: ko.observable(choosenField),
            dataItemLink: model,
            constraint: constraint,
            dataSourceBrowser: dataSourceBrowser,
            dataMemberPath: ko.observable(ko.computed(function () {
                if (dataDashboardItem.dataSource() && dataDashboardItem.dataMember()) {
                    return [dataDashboardItem.dataSource(), dataDashboardItem.dataMember()].join('.');
                }
                else if (dataDashboardItem.dataSource()) {
                    return dataDashboardItem.dataSource();
                }
                return '';
            })),
            additionalProperties: ko.observable(ko.pureComputed(function () {
                if (model._specifics.isAttribute || !choosenField())
                    return null;
                var properties = [];
                var dataItem = model.dataItem();
                if (dataItem instanceof measure_1.Measure) {
                    var summaryTypeMeta = data_dashboard_item_1.DataDashboardItem._getAvaliableSummaryTypeInfo(choosenField(), model._specifics.acceptableShapingType, dataItem);
                    if (summaryTypeMeta) {
                        properties.push(summaryTypeMeta);
                    }
                }
                if ((model.dataItem() instanceof dimension_1.Dimension)
                    && (!_data_field_1.DataField.isOlap(model.dataItem().dataMember()))
                    && (choosenField() && choosenField().fieldType() === 'DateTime')) {
                    if (model._specifics.acceptableShapingType !== data_item_1.AcceptableShapingType.RangeDate) {
                        properties.push(_dimension_1.dateTimeGroupInterval);
                    }
                    else {
                        properties.push(_dimension_1.rangeDateTimeGroupInterval);
                    }
                }
                if (properties.length) {
                    return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
                        model: model.dataItem(),
                        properties: properties
                    });
                }
                return null;
            })),
            summary: ko.pureComputed(function () {
                var dataItemLink = bindingTab.tabModel() && bindingTab.tabModel().dataItemLink;
                return dataItemLink.dataItem() && dataItemLink.dataItem().dataMember() || '';
            }),
            summaryHint: ko.pureComputed(function () {
                var dataItemLink = bindingTab.tabModel() && bindingTab.tabModel().dataItemLink;
                return dataItemLink.dataItem() && (dataItemLink.dataItem().dataMember() + ' (' + dataItemLink.uniqueName() + ')') || '';
            })
        });
    };
    DataItemsPropertiesComposer.prototype.fillOptionsTab = function (tab, dataItem, model, dataDashboardItem) {
        var properties = [];
        properties.push(_base_metadata_1.name);
        var newProperties = model
            ._specifics
            .customOptionsProperties
            .filter(function (p) { return !p.filter || p.filter(dataItem); });
        properties = properties.concat(newProperties.map(function (p) { return p.serializationInfo; }));
        var disabledRules = {};
        newProperties
            .filter(function (x) { return !!x.disabledRule; })
            .forEach(function (property) {
            disabledRules[property.serializationInfo.propertyName] = function (m) { return property.disabledRule(dataItem); };
        });
        tab.tabModel(new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: dataItem,
            properties: properties,
            disabledFilterRules: disabledRules
        }));
    };
    DataItemsPropertiesComposer.prototype.fillDataShapingPropertiesTab = function (tab, dataDashboardItem, model, dataField, measures, dataSourceBrowser) {
        var dataItem = model.dataItem();
        var disableRules = {};
        if (dataItem) {
            var fieldType = dataField && dataField.fieldType();
            ko.computed(function () {
                var properties = [];
                if (dataItem instanceof dimension_1.Dimension) {
                    var topNEnabledFunc = function () { return dataItem.topNOptionsEnabled(); };
                    if (dataDashboardItem._isSortingEnabled()) {
                        if (dataField && _data_field_1.DataField.isOlap(dataItem.dataMember())) {
                            properties.push(_dimension_1.sortOrderOlap);
                            disableRules[_dimension_1.sortOrderOlap.propertyName] = topNEnabledFunc;
                        }
                        else {
                            properties.push(_dimension_1.sortOrderNonOlap);
                            disableRules[_dimension_1.sortOrderNonOlap.propertyName] = topNEnabledFunc;
                        }
                        var values = [];
                        if (!_data_field_1.DataField.isOlap(dataItem.dataMember())) {
                            values.push({
                                value: 'DXValue',
                                displayValue: 'DashboardStringId.CommandDimensionSortModeValue'
                            });
                        }
                        else {
                            values.push({
                                value: 'DXDisplayText',
                                displayValue: 'DashboardStringId.CommandDimensionSortModeDisplayText'
                            });
                            values.push({
                                value: 'DXValue',
                                displayValue: 'DashboardStringId.CommandDimensionSortModeValue'
                            });
                            values.push({
                                value: 'DXID',
                                displayValue: 'DashboardStringId.CommandDimensionSortModeID'
                            });
                            values.push({
                                value: 'DXKey',
                                displayValue: 'DashboardStringId.CommandDimensionSortModeKey'
                            });
                        }
                        properties.push(__assign({ valuesArray: values.concat(measures.filter(function (m) { return m instanceof measure_1.Measure && !m.calculation.calculation() && !m.expression(); }).map(function (m) { return ({
                                value: m.uniqueName(),
                                displayValue: _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, dataDashboardItem, m)
                            }); })) }, _dimension_1.realSortMode));
                        disableRules[_dimension_1.realSortMode.propertyName] = topNEnabledFunc;
                    }
                    switch (fieldType) {
                        case 'DateTime':
                            break;
                        case 'Text':
                            properties.push(_dimension_1.textGroupInterval);
                            break;
                    }
                }
                properties = properties.concat(model
                    ._specifics
                    .customDataShapingProperties
                    .filter(function (p) { return !p.filter || p.filter(dataField); })
                    .map(function (p) { return p.serializationInfo; }));
                var tabModel = properties.length > 0 ?
                    new _object_properties_wrapper_1.ObjectPropertiesWrapper({
                        model: dataItem,
                        properties: properties,
                        disabledFilterRules: disableRules
                    })
                    : null;
                tab.tabModel(tabModel);
            });
        }
    };
    DataItemsPropertiesComposer.prototype._createExactDateProperties = function () {
        var properties = [
            _data_item_format_1.namelessYearFormat,
            _data_item_format_1.namelessDateFormat,
            _data_item_format_1.namelessDateHourFormat,
            _data_item_format_1.namelessDateHourMinuteFormat,
            _data_item_format_1.namelessDateTimeWithSecondsFormat
        ];
        var visibilityRules = {};
        visibilityRules[_data_item_format_1.namelessYearFormat.propertyName] = [_data_item_format_1.namelessExactDateFormat.propertyName, '=', 'Year'];
        visibilityRules[_data_item_format_1.namelessDateFormat.propertyName] = [_data_item_format_1.namelessExactDateFormat.propertyName, '=', 'Day'];
        visibilityRules[_data_item_format_1.namelessDateHourFormat.propertyName] = [_data_item_format_1.namelessExactDateFormat.propertyName, '=', 'Hour'];
        visibilityRules[_data_item_format_1.namelessDateHourMinuteFormat.propertyName] = [_data_item_format_1.namelessExactDateFormat.propertyName, '=', 'Minute'];
        visibilityRules[_data_item_format_1.namelessDateTimeWithSecondsFormat.propertyName] = [_data_item_format_1.namelessExactDateFormat.propertyName, '=', 'Second'];
        return { properties: properties, visibilityRules: visibilityRules };
    };
    DataItemsPropertiesComposer.prototype.fillDataItemExactDatetimeFormatTab = function (tab, model) {
        tab.tabModel(this._createExactDatePropertiesWrapper(model));
    };
    DataItemsPropertiesComposer.prototype._createExactDatePropertiesWrapper = function (model) {
        var exactDateProperties = this._createExactDateProperties();
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: [
                {
                    container: _data_item_1.dateTimeFormat,
                    properties: [_data_item_format_1.namelessExactDateFormat]
                },
                {
                    container: _data_item_1.dateTimeFormat,
                    properties: exactDateProperties.properties
                }
            ],
            visibilityFilterRules: exactDateProperties.visibilityRules
        });
    };
    DataItemsPropertiesComposer.prototype.fillDimensionDatetimeFormatTab = function (tab, model) {
        var visibilityRules = {};
        var properties = [
            _data_item_format_1.namelessExactDateFormat,
            _data_item_format_1.namelessYearFormat,
            _data_item_format_1.namelessMonthFormat,
            _data_item_format_1.namelessQuarterFormat,
            _data_item_format_1.namelessDayOfWeekFormat,
            _data_item_format_1.namelessHourFormat,
            _data_item_format_1.namelessDateFormat,
            _data_item_format_1.namelessDateHourFormat,
            _data_item_format_1.namelessDateHourMinuteFormat,
            _data_item_format_1.namelessDateTimeWithSecondsFormat
        ];
        visibilityRules[_dimension_1.dateTimeGroupInterval.propertyName] = function () { return false; };
        visibilityRules[_data_item_format_1.namelessYearFormat.propertyName] = [_dimension_1.dateTimeGroupInterval.propertyName, '=', 'Year'];
        visibilityRules[_data_item_format_1.namelessQuarterFormat.propertyName] = [_dimension_1.dateTimeGroupInterval.propertyName, '=', 'Quarter'];
        visibilityRules[_data_item_format_1.namelessMonthFormat.propertyName] = [_dimension_1.dateTimeGroupInterval.propertyName, '=', 'Month'];
        visibilityRules[_data_item_format_1.namelessHourFormat.propertyName] = [_dimension_1.dateTimeGroupInterval.propertyName, '=', 'Hour'];
        visibilityRules[_data_item_format_1.namelessDayOfWeekFormat.propertyName] = [_dimension_1.dateTimeGroupInterval.propertyName, '=', 'DayOfWeek'];
        visibilityRules[_data_item_format_1.namelessDateFormat.propertyName] = [
            [_dimension_1.dateTimeGroupInterval.propertyName, '=', 'DayMonthYear'],
            'or',
            [_dimension_1.dateTimeGroupInterval.propertyName, '=', 'WeekYear']
        ];
        visibilityRules[_data_item_format_1.namelessDateHourFormat.propertyName] = [_dimension_1.dateTimeGroupInterval.propertyName, '=', 'DateHour'];
        visibilityRules[_data_item_format_1.namelessDateHourMinuteFormat.propertyName] = [_dimension_1.dateTimeGroupInterval.propertyName, '=', 'DateHourMinute'];
        visibilityRules[_data_item_format_1.namelessDateTimeWithSecondsFormat.propertyName] = [_dimension_1.dateTimeGroupInterval.propertyName, '=', 'DateHourMinuteSecond'];
        visibilityRules[_data_item_format_1.namelessExactDateFormat.propertyName] = [_dimension_1.dateTimeGroupInterval.propertyName, '=', 'None'];
        var exactDateProperties = this._createExactDateProperties();
        var exactDateIntervalConstraints = {};
        exactDateProperties.properties.forEach(function (edProp) { return exactDateIntervalConstraints[edProp.propertyName] = [_dimension_1.dateTimeGroupInterval.propertyName, '=', 'None']; });
        DataItemsPropertiesComposer._mergeRules(exactDateProperties.visibilityRules, exactDateIntervalConstraints, 'and');
        DataItemsPropertiesComposer._mergeRules(visibilityRules, exactDateProperties.visibilityRules, 'or');
        tab.tabModel(new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: [
                _dimension_1.dateTimeGroupInterval,
                {
                    container: _data_item_1.dateTimeFormat,
                    properties: properties
                }
            ],
            visibilityFilterRules: visibilityRules
        }));
    };
    DataItemsPropertiesComposer.prototype.fillTopNTab = function (tab, dataDashboardItem, dataItem, dataField, measures, supportsTopNOther, dataSourceBrowser) {
        var disabledRules = {};
        var isTopNUnavailable = function () { return measures.length === 0; };
        var topNOptionsDisabled = function () { return !dataItem.topNOptionsEnabled() || isTopNUnavailable(); };
        disabledRules[_dimension_1.topNOptionsEnabled.propertyName] = isTopNUnavailable;
        disabledRules[_dimension_1.topNOptionsCount.propertyName] = topNOptionsDisabled;
        disabledRules[_dimension_1.topNOptionsMode.propertyName] = topNOptionsDisabled;
        disabledRules[_dimension_1.topNOptionsMeasure.propertyName] = topNOptionsDisabled;
        disabledRules[_dimension_1.topNOptionsShowOthers.propertyName] = topNOptionsDisabled;
        var visibilityRules = {};
        visibilityRules[_dimension_1.topNOptionsShowOthers.propertyName] = function () { return supportsTopNOther; };
        var properties = [
            _dimension_1.topNOptionsEnabled,
            _dimension_1.topNOptionsMode,
            _dimension_1.topNOptionsCount,
            __assign({ valuesArray: measures.map(function (m) { return { value: m.uniqueName(), displayValue: _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, dataDashboardItem, m) }; }) }, _dimension_1.topNOptionsMeasure)
        ];
        if (dataField && !_data_field_1.DataField.isOlap(dataField.dataMember())) {
            properties.push(_dimension_1.topNOptionsShowOthers);
        }
        tab.tabModel(new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: dataItem,
            properties: properties,
            disabledFilterRules: disabledRules,
            visibilityFilterRules: visibilityRules,
            summary: ko.computed(function () {
                if (!topNOptionsDisabled()) {
                    if (!dataItem.topNOptionsMeasureName()) {
                        dataItem.topNOptionsMeasureName(measures[0] && measures[0].uniqueName());
                    }
                    var topNDataItem = measures.filter(function (di) { return di.uniqueName.peek() === dataItem.topNOptionsMeasureName(); })[0];
                    var modeDisplayValue = _default_1.getLocalizationById(_dimension_1.topNOptionsModeValues[dataItem.topNOptionsMode()]);
                    return modeDisplayValue + ' ' + dataItem.topNOptionsCount() + ' - ' + (!!topNDataItem ? topNDataItem.dataMember() : '');
                }
                return '';
            })
        }));
    };
    DataItemsPropertiesComposer.prototype.fillCalculationsTab = function (tab, measure, dataDashboardItem, dataSourceBrowser, propertiesController) {
        var noneCalculation = { title: 'DashboardStringId.CalculationTypeNone', data: { type: undefined } };
        var expressionCalculation = { title: 'DashboardStringId.CalculationTypeExpression', data: { type: undefined } };
        var calculationsInfo = __assign({}, _measure_1.calculations);
        var disabledRules = {};
        disabledRules[calculationsInfo.propertyName] = function () {
            return dataDashboardItem
                ._dimensions
                .some(function (dimension) {
                return (dimension.topNOptionsEnabled() && dimension.topNOptionsMeasureName() === measure.uniqueName()) || (dimension.sortMeasure() === measure.uniqueName());
            });
        };
        var availableCalculations = [
            noneCalculation,
            { title: 'DashboardStringId.CalculationTypePercentOfTotal', data: { type: percent_of_total_calculation_1.PercentOfTotalCalculation } },
            { title: 'DashboardStringId.CalculationTypeRunningTotal', data: { type: running_total_calculation_1.RunningTotalCalculation } },
            { title: 'DashboardStringId.CalculationTypeDifference', data: { type: difference_calculation_1.DifferenceCalculation, isEqual: function (calc) { return calc.differenceType() !== 'Percentage'; } } },
            { title: 'DashboardStringId.CalculationTypePercentageDifference', data: { type: difference_calculation_1.DifferenceCalculation, default: { '@DifferenceType': 'Percentage' }, isEqual: function (calc) { return calc.differenceType() === 'Percentage'; } } },
            { title: 'DashboardStringId.CalculationTypeMovingCalculation', data: { type: moving_calculation_1.MovingCalculation } },
            { title: 'DashboardStringId.CalculationTypeRank', data: { type: rank_calculation_1.RankCalculation } },
            expressionCalculation
        ];
        var isEqual = function (definition) {
            return !!definition.data.type && measure.calculation.calculation() instanceof definition.data.type && (!definition.data.isEqual || definition.data.isEqual(measure.calculation.calculation()));
        };
        var selectedPredefinedCalculation = ko.computed({
            read: function () {
                var result = !!measure.expression() ? expressionCalculation : undefined;
                if (!result) {
                    result = availableCalculations.filter(function (definition) { return isEqual(definition); })[0] || noneCalculation;
                }
                return result;
            },
            write: index_internal_1.wrapFuncWithUndoRedo(function (val) {
                if (val !== noneCalculation) {
                    if (val === expressionCalculation) {
                        if (!measure.expression()) {
                            _calculation_properties_composer_1.getCalculationArgumentExpression(measure, dataDashboardItem, dataSourceBrowser).done(function (expr) {
                                measure.expression(expr);
                            });
                            measure.windowDefinition.windowDefinition(dataDashboardItem._getDefaultCalculationWindowDefinition());
                        }
                    }
                    else if (!isEqual(val)) {
                        measure.expression(undefined);
                        measure.calculation.calculation(new (val.data.type)(val.data.default));
                        measure.windowDefinition.windowDefinition(dataDashboardItem._getDefaultCalculationWindowDefinition());
                    }
                }
                else {
                    measure.expression(undefined);
                    measure.calculation.calculation(undefined);
                    measure.windowDefinition.windowDefinition(undefined);
                }
            })
        });
        var singleChoiceEditorOptions = {
            propertyName: 'title',
            dataSource: availableCalculations,
            enableEditItem: function (calcDefinition) { return calcDefinition !== noneCalculation; },
            editItemHandler: function (calcDefinition) {
                if (calcDefinition !== noneCalculation) {
                    var surface = new _calculation_surface_1.CalculationSurface(calcDefinition, measure, dataDashboardItem, dataSourceBrowser, propertiesController);
                    surface.startEditing(new _collection_editor_viewmodel_1.CollectionEditorEditItemArguments());
                }
            },
        };
        tab.tabModel(new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: {
                calculations: selectedPredefinedCalculation,
            },
            properties: [__assign({}, calculationsInfo, { formAdapterItem: _form_adapter_editors_1.editableListEditor(singleChoiceEditorOptions) })],
            disabledFilterRules: disabledRules,
            summary: ko.computed(function () { return selectedPredefinedCalculation().title !== noneCalculation.title ? selectedPredefinedCalculation().title : ''; })
        }));
    };
    DataItemsPropertiesComposer.prototype._fillFilterTab = function (tab, model, dashboardItem, dataSourceBrowser) {
        var _a;
        if (!_data_field_1.DataField.isOlap(model.dataMember())) {
            var measureFilterEditorParams = {
                fieldListProvider: ko.observable(new _item_filter_items_provider_1.ItemFilterItemsProvider(dataSourceBrowser, dataSourceBrowser, dataSourceBrowser.parameters, dashboardItem, function (di) { return di instanceof dimension_1.Dimension; })),
                options: _filter_utils_1.createItemFilterOptions(model.filterString, undefined, dataSourceBrowser, { text: 'MeasureFilter', localizationId: 'DashboardWebStringId.AccordionTab.MeasureFilter' }),
                displayNameProvider: new _item_filter_display_name_provider_1.ItemFilterDisplayNameProvider(dashboardItem, dataSourceBrowser)
            };
            var wrapper = new _object_properties_wrapper_1.ObjectPropertiesWrapper({
                model: model,
                properties: [
                    __assign({}, _measure_1.measureFilterString, { formAdapterItem: _form_adapter_editors_1.filterEditor(measureFilterEditorParams) })
                ],
                summary: index_internal_1.safeComputed({ filterString: model.filterString }, function (args) { return !!args.filterString ? _default_1.getLocalizationById('DashboardWebStringId.ButtonOn') : ''; }),
                visibilityFilterRules: (_a = {},
                    _a[_measure_1.measureFilterString.propertyName] = function () { return !model.expression(); },
                    _a)
            });
            tab.tabModel(wrapper);
        }
    };
    DataItemsPropertiesComposer.getCellFormatRuleCreator = function (dataItem, dataItemApplyTo, formatRuleItemType) {
        return function () {
            return data_dashboard_item_1.DataDashboardItem._createFormatRule(null, {
                '@ItemType': formatRuleItemType,
                '@DataItem': dataItem.uniqueName(),
                '@DataItemApplyTo': dataItemApplyTo.uniqueName()
            });
        };
    };
    DataItemsPropertiesComposer.getCellFormatRuleFilter = function (dataItem) {
        return function (rule) {
            if (rule instanceof cells_item_format_rule_1.CellsItemFormatRule) {
                var uniqueName = dataItem.uniqueName();
                return rule.dataItemName() === uniqueName || rule.dataItemApplyToName() === uniqueName;
            }
            return false;
        };
    };
    DataItemsPropertiesComposer.getFormatRulesWrapper = function (model, createNewItemHandler, visibleItemsFilter, editHandler) {
        var collectionEditorOptions = __assign({ propertyName: _dashboard_item_format_rule_1.classCaption.propertyName, createNewItemHandler: createNewItemHandler }, _dashboard_item_format_rule_1.classCaption, { editItemHandler: editHandler, visibleItemsFilter: visibleItemsFilter });
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: [__assign({}, _data_dashboard_item_1.formatRules, { formAdapterItem: _form_adapter_editors_1.collectionEditor(collectionEditorOptions) })]
        });
    };
    return DataItemsPropertiesComposer;
}());
exports.DataItemsPropertiesComposer = DataItemsPropertiesComposer;


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = __webpack_require__(69);
var ko = __webpack_require__(0);
var _utils_1 = __webpack_require__(3);
var disposable_object_1 = __webpack_require__(11);
var _properties_controller_1 = __webpack_require__(369);
var _section_descriptors_1 = __webpack_require__(15);
exports.DashboardItemMenuSizes = {
    BindingPanelPanelWidth: 495,
    OptionsPanelWidth: 274
};
var ItemMenuViewModel = (function (_super) {
    __extends(ItemMenuViewModel, _super);
    function ItemMenuViewModel(surface, layoutItem, _positionCalculator, propertiesController, surfaceItemsFactory) {
        var _this = _super.call(this) || this;
        _this.surface = surface;
        _this.layoutItem = layoutItem;
        _this._positionCalculator = _positionCalculator;
        _this.propertiesController = propertiesController;
        _this.surfaceItemsFactory = surfaceItemsFactory;
        _this.menuItemClick = function (menuItem) {
            _this.contextMenuItems().forEach(function (contextMenuItem) {
                if (contextMenuItem !== menuItem) {
                    contextMenuItem.detailVisible(false);
                }
                else {
                    _this.propertiesController.mainModel(null);
                    if (contextMenuItem.detailVisible.peek()) {
                        contextMenuItem.detailVisible(false);
                    }
                    else {
                        contextMenuItem.showMenu && contextMenuItem.showMenu();
                        contextMenuItem.detailVisible(true);
                    }
                }
            });
        };
        _this.contextMenuItems = ko.observableArray();
        _this.contextMenuItemsSorted = ko.pureComputed(function () {
            return _this.contextMenuItems().sort(function (a, b) { return (a.index || Number.MAX_VALUE) - (b.index || Number.MAX_VALUE); });
        });
        _this.menuItemDetailVisible = ko.pureComputed(function () { return _this.contextMenuItems().some(function (contextMenuItem) { return contextMenuItem.detailVisible(); }); });
        _this.verticalPosition = ko.observable();
        _this.isLeft = ko.observable();
        _this.positionMy = ko.computed(function () { return _this.isLeft() ? 'right' : 'left'; });
        _this.positionAt = ko.computed(function () { return _this.isLeft() ? 'left' : 'right'; });
        _this._recalculateVerticalPosition = function () {
            window.setTimeout(function () {
                _this.verticalPosition(_this._positionCalculator.calculateVPosition());
            }, 1);
        };
        _this._recalculateIsLeft = function () {
            _this.isLeft(_this._positionCalculator.calculateIsLeft());
        };
        _this.hideBindingProperties = function () {
            if (_this.propertiesController.secondaryModel() && _this.isSecondaryPanelVisible()) {
                _this.isSecondaryPanelVisible(false);
            }
            else {
                _this.propertiesController.mainModel(null);
                if (_this.contextMenuItems().filter(function (mi) { return mi.detailVisible() && mi.menuItemId !== 'item-binding-panel'; })[0]) {
                    _this.hideBindingPanel();
                }
            }
        };
        _this.hideBindingPanel = function () {
            _this.propertiesController.secondaryModel(null);
            _this.propertiesController.mainModel(null);
            _this.menuItemClick(null);
        };
        _this.isSecondaryPanelVisible = ko.observable(false);
        _this.__secondaryPanelVisibleTimeout = 0;
        _this.initForFirstShown = function (options) {
            _utils_1.$unwrap(options.component._$content).classList.add('dx-state-hover');
        };
        _this.repaintHandlers = [];
        _this.popupInitialized = function (args) {
            _this._addRepaintHandler(function () {
                window.setTimeout(function () {
                    if (!_this.disposed) {
                        args.component.repaint();
                    }
                }, 1);
            });
        };
        _this.selectedItemSurface = surfaceItemsFactory.createSurfaceItem(layoutItem.viewModel.item(), surface.dashboardModel, surface.dataSourceBrowser);
        if (_this.selectedItemSurface) {
            _this.selectedItemSurface.propertiesController = _this.propertiesController;
        }
        ko.computed(function () {
            surface.itemInteractionInProgress(_this.menuItemDetailVisible());
        });
        _this.isSecondaryPanelVisible.subscribe(function (visibility) {
            if (!visibility) {
                _this.__secondaryPanelVisibleTimeout = window.setTimeout(function () {
                    _this.propertiesController.secondaryModel(undefined);
                    _this.__secondaryPanelVisibleTimeout = 0;
                }, 350);
            }
        });
        _this.propertiesController.secondaryModel.subscribe(function (model) {
            _this.isSecondaryPanelVisible(!!model);
            if (_this.__secondaryPanelVisibleTimeout)
                clearTimeout(_this.__secondaryPanelVisibleTimeout);
        });
        _this.propertiesPanelStyle = ko.computed(function () {
            var visiblePanel = _this.contextMenuItems().filter(function (contextMenuItem) { return contextMenuItem.detailVisible(); })[0], mainModel = _this.propertiesController.mainModel();
            if (visiblePanel) {
                if (visiblePanel.menuItemId === 'item-binding-panel') {
                    if (mainModel) {
                        return { width: exports.DashboardItemMenuSizes.BindingPanelPanelWidth.toString() + 'px', marginLeft: '' };
                    }
                    else {
                        return { width: '220px', marginLeft: '' };
                    }
                }
            }
            return { width: exports.DashboardItemMenuSizes.OptionsPanelWidth.toString() + 'px', marginLeft: '0px' };
        });
        _this._addRepaintHandler(_this._recalculateVerticalPosition);
        _this.toDispose(_this.contextMenuItemsSorted.subscribe(function () { return _this._recalculateVerticalPosition(); }));
        _this.toDispose(_this.layoutItem.isSelected.subscribe(function () { return _this._recalculateVerticalPosition(); }));
        _this._recalculateVerticalPosition();
        _this._recalculateIsLeft();
        return _this;
    }
    ItemMenuViewModel.prototype.deleteCurrentItem = function () {
        this.surface._selectedLayoutItem().delete();
    };
    ItemMenuViewModel.prototype._addRepaintHandler = function (handler) {
        this.layoutItem.repaintCallbacks.add(handler);
        this.repaintHandlers.push(handler);
    };
    ItemMenuViewModel.prototype.dispose = function () {
        var _this = this;
        _super.prototype.dispose.call(this);
        this.repaintHandlers.forEach(function (handler) { return _this.layoutItem.repaintCallbacks.remove(handler); });
        this.selectedItemSurface && this.selectedItemSurface.dispose();
    };
    return ItemMenuViewModel;
}(disposable_object_1.DisposableObject));
exports.ItemMenuViewModel = ItemMenuViewModel;
ko.components.register('dx-dashboard-item-menu', {
    viewModel: {
        createViewModel: function (params, componentInfo) {
            var positionCalculator = new ItemMenuPositionCalculator(componentInfo.element);
            var propertiesController = new _properties_controller_1.PropertiesController();
            var itemMenu = new ItemMenuViewModel(params.surface, params.layoutItem, positionCalculator, propertiesController, _section_descriptors_1.surfaceItemsFactory);
            params.itemMenuViewModelContainer(itemMenu);
            ko.utils.domNodeDisposal.addDisposeCallback(componentInfo.element, function () {
                itemMenu.dispose();
                propertiesController.dispose();
                params.itemMenuViewModelContainer(undefined);
            });
            return itemMenu;
        }
    },
    template: { element: 'dx-dashboard-item-menu' }
});
var ItemMenuPositionCalculator = (function () {
    function ItemMenuPositionCalculator(element) {
        this.element = element;
        this.layoutRoot = _utils_1.closest(this.element, '.dx-layout-root');
    }
    ItemMenuPositionCalculator.prototype._isValidElement = function () {
        return this.element.parentElement && this.layoutRoot;
    };
    ItemMenuPositionCalculator.prototype.calculateIsLeft = function () {
        if (!this._isValidElement()) {
            return false;
        }
        var elementParentBounds = this.element.parentElement.getBoundingClientRect();
        var rootBounds = this.layoutRoot.getBoundingClientRect();
        var left = elementParentBounds.left, right = elementParentBounds.right, rootLeft = rootBounds.left, rootRight = rootBounds.right;
        return (rootRight - right < exports.DashboardItemMenuSizes.BindingPanelPanelWidth &&
            left - rootLeft > exports.DashboardItemMenuSizes.BindingPanelPanelWidth) || (rootRight - right < 50);
    };
    ItemMenuPositionCalculator.prototype.calculateVPosition = function () {
        var itemMenuElement = this.element.querySelector('.dx-dashboard-item-menu');
        var layoutItem = _utils_1.closest(this.element, '.dx-layout-item-wrapper');
        if (!this._isValidElement() || !layoutItem || !itemMenuElement) {
            return 'center';
        }
        var layoutItemBounds = layoutItem.getBoundingClientRect();
        var layoutRootBounds = this.layoutRoot.getBoundingClientRect();
        var itemMenuBounds = itemMenuElement.getBoundingClientRect();
        if (itemMenuBounds.height <= layoutItemBounds.height) {
            return 'center';
        }
        else {
            if (layoutItemBounds.top + layoutItemBounds.height - itemMenuBounds.height < layoutRootBounds.top) {
                return 'top';
            }
            else {
                return 'bottom';
            }
        }
    };
    return ItemMenuPositionCalculator;
}());
exports.ItemMenuPositionCalculator = ItemMenuPositionCalculator;
var DISAPPEARING_EVENT_NAMESPACE = '.disappearing';
var findContainer = function (element) {
    return _utils_1.closest(element, '.dx-layout-item-wrapper').querySelector('.dx-layout-item-container');
};
ko.bindingHandlers['menuVisibilitySubscription'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
            events_1.off(findContainer(element), DISAPPEARING_EVENT_NAMESPACE);
        });
    },
    update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var toggleClass = function (state) {
            var cssClass = 'dx-target-widget-hovered';
            var nodes = document.querySelectorAll('.dx-disappearing-overlay>.dx-overlay-content');
            for (var i = 0; i < nodes.length; i++) {
                if (state) {
                    nodes[i].classList.add(cssClass);
                }
                else {
                    nodes[i].classList.remove(cssClass);
                }
            }
        };
        valueAccessor().visible.subscribe(function (val) {
            var container = findContainer(element);
            if (val) {
                events_1.on(container, 'mouseenter' + DISAPPEARING_EVENT_NAMESPACE, function () { toggleClass(true); });
                events_1.on(container, 'mouseleave' + DISAPPEARING_EVENT_NAMESPACE, function () { toggleClass(false); });
            }
            else {
                events_1.off(container, DISAPPEARING_EVENT_NAMESPACE);
                toggleClass(false);
            }
        });
    }
};


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.types = {
    group: 'GROUP',
    page: 'PAGE',
    tabPage: 'TABPAGE',
    tabContainer: 'TABCONTAINER',
    rangeFilter: 'RANGEFILTER',
    chart: 'CHART',
    scatter: 'SCATTERCHART',
    pie: 'PIE',
    card: 'CARD',
    grid: 'GRID',
    pivot: 'PIVOT',
    gauge: 'GAUGE',
    text: 'TEXT',
    image: 'IMAGE',
    boundImage: 'BOUNDIMAGE',
    map: 'MAP',
    choroplethMap: 'CHOROPLETHMAP',
    geoPointMap: 'GEOPOINTMAP',
    bubbleMap: 'BUBBLEMAP',
    pieMap: 'PIEMAP',
    comboBox: 'COMBOBOX',
    listBox: 'LISTBOX',
    treeView: 'TREEVIEW',
    treemap: 'TREEMAP',
    dateFilter: 'DATEFILTER',
    custom: 'CUSTOMITEM'
};


/***/ }),
/* 119 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.devices };

/***/ }),
/* 120 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.data.CustomStore };

/***/ }),
/* 121 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.ui.dxTextBox };

/***/ }),
/* 122 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.viz.dxSparkline };

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _dx_devextreme_themes_integration_1 = __webpack_require__(176);
var AppearanceType = {
    WhiteColor: '#FFFFFF',
    GrayedTextColor: '#D3D3D3',
    LightGradientRedColor: 'rgb(255, 166, 173)',
    LightGradientYellowColor: 'rgb(255, 226, 81)',
    LightGradientGreenColor: 'rgb(139, 210, 78)',
    LightGradientBlueColor: 'rgb(149, 204, 255)',
    LightGradientPurpleColor: 'rgb(223, 166, 232)',
    LightGradientCyanColor: 'rgb(113, 223, 221)',
    LightGradientOrangeColor: 'rgb(255, 182, 90)',
    LightGradientTransparentColor: '#ffffff',
    DarkGradientRedColor: '#AC203D',
    DarkGradientYellowColor: '#FF8A01',
    DarkGradientGreenColor: '#538A31',
    DarkGradientBlueColor: '#4371B0',
    DarkGradientPurpleColor: '#7E53A2',
    DarkGradientCyanColor: '#149BA3',
    DarkGradientOrangeColor: '#D83D00',
    DarkGradientTransparentColor: '#303030',
    LightPaleRedColor: 'rgb(255, 221, 224)',
    LightPaleYellowColor: 'rgb(255, 245, 174)',
    LightPaleGreenColor: 'rgb(208, 239, 172)',
    LightPaleBlueColor: 'rgb(213, 237, 255)',
    LightPalePurpleColor: 'rgb(244, 221, 247)',
    LightPaleCyanColor: 'rgb(194, 244, 243)',
    LightPaleOrangeColor: 'rgb(255, 228, 180)',
    LightPaleGrayColor: 'rgb(234, 234, 234)',
    DarkPaleRedColor: '#5B2D3D',
    DarkPaleYellowColor: '#51492D',
    DarkPaleGreenColor: '#3B4D2D',
    DarkPaleBlueColor: '#2D3F5A',
    DarkPalePurpleColor: '#512D55',
    DarkPaleCyanColor: '#2D4B4B',
    DarkPaleOrangeColor: '#593E2D',
    DarkPaleGrayColor: '#444444',
    LightRedColor: 'rgb(226, 60, 76)',
    LightYellowColor: 'rgb(255, 166, 38)',
    LightGreenColor: 'rgb(101, 172, 80)',
    LightBlueColor: 'rgb(89, 143, 216)',
    LightPurpleColor: 'rgb(148, 105, 184)',
    LightCyanColor: 'rgb(39, 192, 187)',
    LightOrangeColor: 'rgb(255, 92, 12)',
    LightGrayColor: 'rgb(111, 111, 111)',
    DarkRedColor: '#E23C4C',
    DarkYellowColor: '#FFA626',
    DarkGreenColor: '#65AC50',
    DarkBlueColor: '#598FD8',
    DarkPurpleColor: '#9469B8',
    DarkCyanColor: '#27C0BB',
    DarkOrangeColor: '#FF5C0C',
    DarkGrayColor: '#6F6F6F'
};
var appearanceSettingsProvider = (function () {
    function appearanceSettingsProvider() {
    }
    appearanceSettingsProvider.toCssClassBody = function (appearanceType, theme, drawProperty) {
        return '{ ' + appearanceSettingsProvider.toCss(appearanceType, drawProperty) + ' }';
    };
    appearanceSettingsProvider.toCss = function (appearanceType, drawProperty) {
        var isDark = appearanceSettingsProvider.isDark();
        var styles = [];
        if (drawProperty == null || drawProperty.shouldDrawBackColorStyle) {
            styles.push(this._createBackColorStyle(appearanceType, isDark));
        }
        if (drawProperty == null || drawProperty.shouldDrawFontStyles) {
            styles.push(this._createFontStyles(appearanceType, isDark));
        }
        return styles.join('; ');
    };
    appearanceSettingsProvider._createFontStyles = function (appearanceType, isDark) {
        var color;
        switch (appearanceType) {
            case 'FontBold':
                return 'font-weight: bold;';
            case 'FontItalic':
                return 'font-style: italic;';
            case 'FontUnderline':
                return 'text-decoration: underline;';
            case 'FontGrayed':
                return 'color: ' + AppearanceType.GrayedTextColor + ';';
            case 'FontRed':
                return 'color: ' + (isDark ? AppearanceType.DarkRedColor : AppearanceType.LightRedColor) + ';';
            case 'FontYellow':
                return 'color: ' + (isDark ? AppearanceType.DarkYellowColor : AppearanceType.LightYellowColor) + ';';
            case 'FontGreen':
                return 'color: ' + (isDark ? AppearanceType.DarkGreenColor : AppearanceType.LightGreenColor) + ';';
            case 'FontBlue':
                return 'color: ' + (isDark ? AppearanceType.DarkBlueColor : AppearanceType.LightBlueColor) + ';';
            default:
                color = appearanceSettingsProvider.backAndGradientColorGroupsToBackColor(appearanceType);
                if (color !== undefined)
                    return '';
                color = appearanceSettingsProvider._backColorsWithFontGroupToBackColor(appearanceType, isDark);
                if (color !== undefined)
                    return 'color: ' + AppearanceType.WhiteColor + ';';
                return '';
        }
    };
    appearanceSettingsProvider._createBackColorStyle = function (appearanceType, isDark) {
        var color;
        color = appearanceSettingsProvider.backAndGradientColorGroupsToBackColor(appearanceType);
        if (color !== undefined)
            return 'background-color: ' + color + ';';
        color = appearanceSettingsProvider._backColorsWithFontGroupToBackColor(appearanceType, isDark);
        if (color !== undefined)
            return 'background-color: ' + color;
        return '';
    };
    appearanceSettingsProvider.backAndGradientColorGroupsToBackColor = function (appearanceType) {
        var isDark = appearanceSettingsProvider.isDark();
        switch (appearanceType) {
            case 'PaleRed':
                return isDark ? AppearanceType.DarkPaleRedColor : AppearanceType.LightPaleRedColor;
            case 'PaleYellow':
                return isDark ? AppearanceType.DarkPaleYellowColor : AppearanceType.LightPaleYellowColor;
            case 'PaleGreen':
                return isDark ? AppearanceType.DarkPaleGreenColor : AppearanceType.LightPaleGreenColor;
            case 'PaleBlue':
                return isDark ? AppearanceType.DarkPaleBlueColor : AppearanceType.LightPaleBlueColor;
            case 'PalePurple':
                return isDark ? AppearanceType.DarkPalePurpleColor : AppearanceType.LightPalePurpleColor;
            case 'PaleCyan':
                return isDark ? AppearanceType.DarkPaleCyanColor : AppearanceType.LightPaleCyanColor;
            case 'PaleOrange':
                return isDark ? AppearanceType.DarkPaleOrangeColor : AppearanceType.LightPaleOrangeColor;
            case 'PaleGray':
                return isDark ? AppearanceType.DarkPaleGrayColor : AppearanceType.LightPaleGrayColor;
            case 'GradientRed':
                return isDark ? AppearanceType.DarkGradientRedColor : AppearanceType.LightGradientRedColor;
            case 'GradientYellow':
                return isDark ? AppearanceType.DarkGradientYellowColor : AppearanceType.LightGradientYellowColor;
            case 'GradientGreen':
                return isDark ? AppearanceType.DarkGradientGreenColor : AppearanceType.LightGradientGreenColor;
            case 'GradientBlue':
                return isDark ? AppearanceType.DarkGradientBlueColor : AppearanceType.LightGradientBlueColor;
            case 'GradientPurple':
                return isDark ? AppearanceType.DarkGradientPurpleColor : AppearanceType.LightGradientPurpleColor;
            case 'GradientCyan':
                return isDark ? AppearanceType.DarkGradientCyanColor : AppearanceType.LightGradientCyanColor;
            case 'GradientOrange':
                return isDark ? AppearanceType.DarkGradientOrangeColor : AppearanceType.LightGradientOrangeColor;
            case 'GradientTransparent':
                return isDark ? AppearanceType.DarkGradientTransparentColor : AppearanceType.LightGradientTransparentColor;
            default: {
            }
        }
    };
    appearanceSettingsProvider._backColorsWithFontGroupToBackColor = function (appearanceType, isDark) {
        switch (appearanceType) {
            case 'Red':
                return isDark ? AppearanceType.DarkRedColor : AppearanceType.LightRedColor;
            case 'Yellow':
                return isDark ? AppearanceType.DarkYellowColor : AppearanceType.LightYellowColor;
            case 'Green':
                return isDark ? AppearanceType.DarkGreenColor : AppearanceType.LightGreenColor;
            case 'Blue':
                return isDark ? AppearanceType.DarkBlueColor : AppearanceType.LightBlueColor;
            case 'Purple':
                return isDark ? AppearanceType.DarkPurpleColor : AppearanceType.LightPurpleColor;
            case 'Cyan':
                return isDark ? AppearanceType.DarkCyanColor : AppearanceType.LightCyanColor;
            case 'Orange':
                return isDark ? AppearanceType.DarkOrangeColor : AppearanceType.LightOrangeColor;
            case 'Gray':
                return isDark ? AppearanceType.DarkGrayColor : AppearanceType.LightGrayColor;
            default: {
            }
        }
    };
    appearanceSettingsProvider.isDark = function () {
        return _dx_devextreme_themes_integration_1.getBaseColorScheme() === 'dark';
    };
    return appearanceSettingsProvider;
}());
exports.appearanceSettingsProvider = appearanceSettingsProvider;


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var color_1 = __webpack_require__(50);
var _measure_1 = __webpack_require__(70);
var _base_metadata_1 = __webpack_require__(4);
exports.colorSchemeDataSource = { propertyName: 'dataSource', modelName: '@DataSource', displayName: 'DevExpress.DashboardCommon.DynamicListLookUpSettings.DataSource', defaultVal: '', simpleFormAdapterItem: 'textBoxEditor' };
exports.colorSchemeDataMember = { propertyName: 'dataMember', modelName: '@DataMember', displayName: 'DashboardStringId.DataSourceDataMember', defaultVal: '', simpleFormAdapterItem: 'textBoxEditor' };
exports.colorSchemeColor = { propertyName: 'color', modelName: '@Color', displayName: 'DashboardStringId.DescriptionItemColor', defaultVal: null, simpleFormAdapterItem: 'textBoxEditor', from: color_1.Color._colorFromModel, toJsonObject: color_1.Color._colorToModel };
exports.paletteIndex = { propertyName: 'paletteIndex', modelName: '@PaletteIndex', displayName: 'DashboardStringId.ColorPaletteIndex', defaultVal: null, simpleFormAdapterItem: 'numberBoxEditor' };
exports.colorSchemeSummaryType = { propertyName: 'summaryType', modelName: '@SummaryType', displayName: 'DashboardWebStringId.SummaryType', defaultVal: 'Sum', simpleFormAdapterItem: 'textBoxEditor' };
exports.dimensionInfoDateTimeGroupInterval = { propertyName: 'dateTimeGroupInterval', modelName: '@DateTimeGroupInterval', displayName: 'DashboardWebStringId.Colorization.GroupInterval', defaultVal: 'Year', simpleFormAdapterItem: 'textBoxEditor' };
exports.definitionInfo = [exports.colorSchemeDataMember, exports.dimensionInfoDateTimeGroupInterval];
exports.definitionsInMeasureDefinition = { propertyName: 'definitions', modelName: 'Definitions', array: true };
exports.measureKeySerializationInfo = [exports.colorSchemeDataMember, exports.colorSchemeSummaryType, _measure_1.calculation, _measure_1.windowDefinition, _measure_1.expression, _measure_1.measureFilterString, exports.definitionsInMeasureDefinition];
exports.dimensionKeys = { propertyName: 'dimensionKeys', modelName: 'DimensionKeys', displayName: 'DashboardStringId.DescriptionDimensions', array: true };
exports.measureKey = { propertyName: 'measureKeys', modelName: 'MeasureKey', displayName: 'DashboardStringId.DescriptionMeasures', array: true, info: exports.measureKeySerializationInfo };
exports.colorSchemeEntrySerializationInfo = [_base_metadata_1.itemType, exports.colorSchemeDataSource, exports.colorSchemeDataMember, exports.colorSchemeColor, exports.paletteIndex, exports.dimensionKeys, exports.measureKey];
exports.colorShemetype = { propertyName: 'type', modelName: '@Type', displayName: 'DashboardWebStringId.Type', simpleFormAdapterItem: 'textBoxEditor' };
exports.dimensionValue = { propertyName: 'value', modelName: '@Value', displayName: 'DashboardStringId.ValueCaption', simpleFormAdapterItem: 'textBoxEditor' };
exports.valueInfo = [exports.colorShemetype, exports.dimensionValue];
exports.definition = { propertyName: 'definition', modelName: 'Definition', info: exports.definitionInfo, defaultVal: '' };
exports.colorShemeValue = { propertyName: 'value', modelName: 'Value', displayName: 'DashboardStringId.ValueCaption', info: exports.valueInfo };
exports.dimensionKeySerializationInfo = [exports.definition, exports.colorShemeValue];


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var DashboardState = (function () {
    function DashboardState() {
    }
    return DashboardState;
}());
exports.DashboardState = DashboardState;
var RangeFilterSelection = (function () {
    function RangeFilterSelection() {
    }
    return RangeFilterSelection;
}());
exports.RangeFilterSelection = RangeFilterSelection;
var RangeFilterState = (function () {
    function RangeFilterState() {
    }
    return RangeFilterState;
}());
exports.RangeFilterState = RangeFilterState;
var ItemState = (function () {
    function ItemState() {
    }
    return ItemState;
}());
exports.ItemState = ItemState;


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var card_item_format_rule_base_1 = __webpack_require__(439);
var _card_item_delta_format_rule_1 = __webpack_require__(453);
var CardItemDeltaFormatRule = (function (_super) {
    __extends(CardItemDeltaFormatRule, _super);
    function CardItemDeltaFormatRule(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    CardItemDeltaFormatRule.prototype.getInfo = function () {
        return _card_item_delta_format_rule_1.cardItemDeltaFormatRuleSerializationsInfo;
    };
    CardItemDeltaFormatRule.prototype._getDefaultItemType = function () {
        return 'CardItemDeltaFormatRule';
    };
    return CardItemDeltaFormatRule;
}(card_item_format_rule_base_1.CardItemFormatRuleBase));
exports.CardItemDeltaFormatRule = CardItemDeltaFormatRule;


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var serializable_model_1 = __webpack_require__(5);
var _style_settings_base_1 = __webpack_require__(72);
var StyleSettingsBase = (function (_super) {
    __extends(StyleSettingsBase, _super);
    function StyleSettingsBase(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    StyleSettingsBase.prototype.getInfo = function () {
        return _style_settings_base_1.styleSettingsBaseSerializationsInfo;
    };
    StyleSettingsBase.prototype.init = function () { };
    StyleSettingsBase.prototype.setSpecificType = function (type) {
    };
    return StyleSettingsBase;
}(serializable_model_1.SerializableModel));
exports.StyleSettingsBase = StyleSettingsBase;


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _format_condition_base_1 = __webpack_require__(182);
var range_set_1 = __webpack_require__(447);
exports.rangeValueType = {
    propertyName: 'valueType', modelName: '@ValueType', displayName: 'DashboardWebStringId.Delta.ValueType', defaultVal: 'Automatic', simpleFormAdapterItem: 'selectBoxEditor', values: {
        'Number': 'DashboardStringId.FormatConditionNumberValueType',
        'Percent': 'DashboardStringId.FormatConditionPercentValueType',
        'Automatic': 'DashboardStringId.FormatConditionAutomaticValueType'
    }
};
exports.rangeSet = { propertyName: 'rangeSet', modelName: 'RangeSet', type: range_set_1.RangeSet };
exports.formatConditionRangeBaseSerializationsInfo = _format_condition_base_1.formatConditionBaseSerializationsInfo.concat([exports.rangeValueType, exports.rangeSet]);


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var card_item_format_rule_base_1 = __webpack_require__(439);
var _card_item_format_rule_1 = __webpack_require__(454);
var CardItemFormatRule = (function (_super) {
    __extends(CardItemFormatRule, _super);
    function CardItemFormatRule(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    CardItemFormatRule.prototype.getInfo = function () {
        return _card_item_format_rule_1.cardItemFormatRuleSerializationsInfo;
    };
    CardItemFormatRule.prototype._getDefaultItemType = function () {
        return 'CardItemFormatRule';
    };
    return CardItemFormatRule;
}(card_item_format_rule_base_1.CardItemFormatRuleBase));
exports.CardItemFormatRule = CardItemFormatRule;


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
exports.ignoreMasterFiltersDefaultFalse = { propertyName: 'ignoreMasterFilters', modelName: '@IgnoreMasterFilters', displayName: 'DashboardWebStringId.InteractivityOptions.IgnoreMasterFilters', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool, category: _base_metadata_1.PropertyCategory.Interactivity };
exports.ignoreMasterFiltersDefaultTrue = { propertyName: 'ignoreMasterFilters', modelName: '@IgnoreMasterFilters', displayName: 'DashboardWebStringId.InteractivityOptions.IgnoreMasterFilters', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool, category: _base_metadata_1.PropertyCategory.Interactivity };
exports.isMasterFilterDefaultFalse = { propertyName: 'isMasterFilter', modelName: '@IsMasterFilter', displayName: 'DashboardWebStringId.InteractivityOptions.IsMasterFilter', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.isMasterFilterDefaultTrue = { propertyName: 'isMasterFilter', modelName: '@IsMasterFilter', displayName: 'DashboardWebStringId.InteractivityOptions.IsMasterFilter', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.masterFilterMode = {
    propertyName: 'masterFilterMode', modelName: '@MasterFilterMode', displayName: 'DashboardWebStringId.MasterFilterMode', defaultVal: 'None', simpleFormAdapterItem: 'buttonGroupEditor', category: _base_metadata_1.PropertyCategory.Interactivity, values: {
        'None': 'DashboardWebStringId.InteractivityOptions.MasterFilterMode.None',
        'Single': 'DashboardWebStringId.InteractivityOptions.MasterFilterMode.Single',
        'Multiple': 'DashboardWebStringId.InteractivityOptions.MasterFilterMode.Multiple'
    }
};
exports.isDrillDownEnabled = { propertyName: 'isDrillDownEnabled', modelName: '@IsDrillDownEnabled', displayName: 'DashboardWebStringId.InteractivityOptions.DrillDown', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool, category: _base_metadata_1.PropertyCategory.Data };
exports.targetDimensions = {
    propertyName: 'targetDimensions', modelName: '@TargetDimensions', displayName: 'DashboardWebStringId.InteractivityOptions.TargetDimensions', defaultVal: 'Arguments', simpleFormAdapterItem: 'buttonGroupEditor', category: _base_metadata_1.PropertyCategory.Interactivity, values: {
        'Arguments': 'DashboardWebStringId.InteractivityOptions.TargetDimensions.Arguments',
        'Series': 'DashboardWebStringId.InteractivityOptions.TargetDimensions.Series',
        'Points': 'DashboardWebStringId.InteractivityOptions.TargetDimensions.Points'
    }
};
exports.commonInteractivityOptions = { propertyName: 'interactivityOptions', modelName: 'InteractivityOptions', displayName: 'DashboardWebStringId.InteractivityOptions' };
function getInteractivityOptionsPropertyInfo(type) { return __assign({ type: type }, exports.commonInteractivityOptions); }
exports.getInteractivityOptionsPropertyInfo = getInteractivityOptionsPropertyInfo;


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var serializable_model_1 = __webpack_require__(5);
var dashboard_item_1 = __webpack_require__(60);
var _group_item_1 = __webpack_require__(467);
var GroupItem = (function (_super) {
    __extends(GroupItem, _super);
    function GroupItem(dashboardItemJSON, serializer) {
        if (dashboardItemJSON === void 0) { dashboardItemJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, dashboardItemJSON, serializer) || this;
    }
    GroupItem.prototype._getInfoCore = function () {
        return _group_item_1.groupItemSerializationInfo;
    };
    GroupItem.prototype._getDefaultItemType = function () {
        return 'Group';
    };
    return GroupItem;
}(dashboard_item_1.DashboardItem));
exports.GroupItem = GroupItem;
serializable_model_1.itemTypesMap['Group'] = { type: GroupItem, groupName: 'layout', title: 'DashboardStringId.DefaultNameItemGroup', index: 25 };


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var serializable_model_1 = __webpack_require__(5);
var _delta_options_1 = __webpack_require__(133);
var CardDeltaOptions = (function (_super) {
    __extends(CardDeltaOptions, _super);
    function CardDeltaOptions(modelJSON, serializer) {
        if (modelJSON === void 0) { modelJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJSON, serializer) || this;
    }
    CardDeltaOptions.prototype.getInfo = function () {
        return _delta_options_1.cardDeltaOptionsSerializationsInfo;
    };
    return CardDeltaOptions;
}(serializable_model_1.SerializableModel));
exports.CardDeltaOptions = CardDeltaOptions;
var DeltaOptions = (function (_super) {
    __extends(DeltaOptions, _super);
    function DeltaOptions(modelJSON, serializer) {
        if (modelJSON === void 0) { modelJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJSON, serializer) || this;
    }
    DeltaOptions.prototype.getInfo = function () {
        return _delta_options_1.deltaOptionsSerializationsInfo;
    };
    return DeltaOptions;
}(CardDeltaOptions));
exports.DeltaOptions = DeltaOptions;


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
exports.deltaValueTypeMap = {
    'ActualValue': 'DashboardStringId.DeltaValueTypeActualValueCaption',
    'AbsoluteVariation': 'DashboardStringId.DeltaValueTypeAbsoluteVariationCaption',
    'PercentVariation': 'DashboardStringId.DeltaValueTypePercentVariationCaption',
    'PercentOfTarget': 'DashboardStringId.DeltaValueTypePercentOfTargetCaption',
    'TargetValue': 'DashboardStringId.DeltaValueTypeTargetValueCaption'
};
exports.valueType = {
    propertyName: 'valueType', modelName: '@ValueType', displayName: 'DashboardWebStringId.Delta.ValueType', defaultVal: 'AbsoluteVariation', simpleFormAdapterItem: 'listEditor', values: exports.deltaValueTypeMap
};
exports.resultIndicationMode = {
    propertyName: 'resultIndicationMode', modelName: '@ResultIndicationMode', displayName: 'DashboardWebStringId.Delta.ResultIndication', defaultVal: 'GreaterIsGood', simpleFormAdapterItem: 'listEditor', values: {
        'GreaterIsGood': 'DashboardStringId.DeltaIndicationModeGreaterIsGoodCaption',
        'LessIsGood': 'DashboardStringId.DeltaIndicationModeLessIsGoodCaption',
        'WarningIfGreater': 'DashboardStringId.DeltaIndicationModeWarningIfGreaterCaption',
        'WarningIfLess': 'DashboardStringId.DeltaIndicationModeWarningIfLessCaption',
        'NoIndication': 'DashboardStringId.DeltaIndicationModeNoIndicationCaption'
    }
};
exports.resultIndicationThresholdType = {
    propertyName: 'resultIndicationThresholdType', modelName: '@ResultIndicationThresholdType', displayName: 'DashboardWebStringId.Delta.ThresholdType', defaultVal: 'Percent', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Absolute': 'DashboardStringId.DeltaThresholdTypeAbsolute',
        'Percent': 'DashboardStringId.DeltaThresholdTypePercent'
    }
};
exports.resultIndicationThreshold = { propertyName: 'resultIndicationThreshold', modelName: '@ResultIndicationThreshold', displayName: 'DashboardWebStringId.Delta.ThresholdValue', defaultVal: 0, simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel };
exports.cardDeltaOptionsSerializationsInfo = [exports.resultIndicationMode, exports.resultIndicationThresholdType, exports.resultIndicationThreshold];
exports.deltaOptionsSerializationsInfo = [exports.valueType].concat(exports.cardDeltaOptionsSerializationsInfo);


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var _data_item_1 = __webpack_require__(20);
var _base_metadata_1 = __webpack_require__(4);
exports.reverse = { propertyName: 'reverse', modelName: '@Reverse', displayName: 'DashboardWebStringId.Chart.Reverse', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.axisVisible = { propertyName: 'visible', modelName: '@Visible', displayName: 'DashboardWebStringId.Chart.Visible', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.titleVisibleBaseInfo = { propertyName: 'titleVisible', modelName: '@TitleVisible', displayName: 'DashboardWebStringId.Chart.Title', simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
function getInfoTitleVisible(defaultVal) { return __assign({ defaultVal: defaultVal }, exports.titleVisibleBaseInfo); }
exports.title = { propertyName: 'title', modelName: '@Title', displayName: 'DashboardWebStringId.Chart.TitleText', simpleFormAdapterItem: 'textBoxEditor' };
exports.chartAxisSerializationsInfo = [exports.axisVisible, exports.reverse, exports.title, _data_item_1.numericFormat];
exports.enableZooming = { propertyName: 'enableZooming', modelName: '@EnableZooming', displayName: 'DashboardWebStringId.Chart.EnableZooming', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.limitVisiblePoints = { propertyName: 'limitVisiblePoints', modelName: '@LimitVisiblePoints', displayName: 'DashboardWebStringId.Chart.LimitVisiblePoints', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.visiblePointsCount = { propertyName: 'visiblePointsCount', modelName: '@VisiblePointsCount', displayName: 'DashboardWebStringId.Chart.VisiblePointsCount', defaultVal: 10, simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel, validationRules: [{ type: 'range', min: 1 }, _base_metadata_1.integerValidationRule] };
exports.chartAxisXSerializationsInfo = exports.chartAxisSerializationsInfo.concat([getInfoTitleVisible(false), exports.enableZooming, exports.limitVisiblePoints, exports.visiblePointsCount, _data_item_1.dateTimeFormat]);
exports.alwaysShowZeroLevelTemplate = { propertyName: 'alwaysShowZeroLevel', modelName: '@AlwaysShowZeroLevel', displayName: 'DashboardWebStringId.Chart.AlwaysShowZeroLevel', simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.chartAlwaysShowZeroLevel = __assign({ defaultVal: true }, exports.alwaysShowZeroLevelTemplate);
exports.alwaysShowZeroLevelScatter = __assign({ defaultVal: false }, exports.alwaysShowZeroLevelTemplate);
exports.showGridLinesBaseInfo = { propertyName: 'showGridLines', modelName: '@ShowGridLines', displayName: 'DashboardWebStringId.Chart.GridLines', simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
function getInfoShowGridLines(defaultVal) { return __assign({ defaultVal: defaultVal }, exports.showGridLinesBaseInfo); }
exports.logarithmic = { propertyName: 'logarithmic', modelName: '@Logarithmic', displayName: 'DashboardWebStringId.Chart.LogarithmicScale', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.logarithmicBase = {
    propertyName: 'logarithmicBase', modelName: '@LogarithmicBase', displayName: 'DashboardWebStringId.Chart.LogarithmicScaleBase', defaultVal: 'Base10', simpleFormAdapterItem: 'selectBoxEditor', values: {
        'Base2': 'DashboardWebStringId.Chart.LogarithmicScaleBase2',
        'Base5': 'DashboardWebStringId.Chart.LogarithmicScaleBase5',
        'Base10': 'DashboardWebStringId.Chart.LogarithmicScaleBase10'
    }
};
exports.chartAxisYBaseSerializationsInfo = exports.chartAxisSerializationsInfo.concat([exports.logarithmic, exports.logarithmicBase]);
exports.chartAxisYSerializationsInfo = exports.chartAxisYBaseSerializationsInfo.concat([exports.chartAlwaysShowZeroLevel, getInfoTitleVisible(true), getInfoShowGridLines(true)]);
exports.chartSecondaryAxisYSerializationsInfo = exports.chartAxisYBaseSerializationsInfo.concat([exports.chartAlwaysShowZeroLevel, getInfoTitleVisible(true), getInfoShowGridLines(false)]);
exports.scatterChartAxisYSerializationsInfo = exports.chartAxisYBaseSerializationsInfo.concat([exports.alwaysShowZeroLevelScatter, getInfoTitleVisible(true), getInfoShowGridLines(true)]);


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
var _chart_item_base_1 = __webpack_require__(196);
var interactivity_options_1 = __webpack_require__(32);
var chart_axis_1 = __webpack_require__(197);
var chart_legend_1 = __webpack_require__(294);
exports.chartRotated = { propertyName: 'rotated', modelName: '@Rotated', displayName: 'DashboardWebStringId.Chart.Rotated', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool, category: _base_metadata_1.PropertyCategory.ViewModel };
exports.panes = { propertyName: 'panes', modelName: 'Panes', displayName: 'DashboardWebStringId.Chart.Panes', array: true };
exports.chartLegend = { propertyName: 'legend', modelName: 'ChartLegend', displayName: 'DashboardWebStringId.Chart.Legend', type: chart_legend_1.ChartLegend };
exports.chartAxisX = { propertyName: 'axisX', modelName: 'AxisX', displayName: 'DashboardWebStringId.Chart.AxisX', type: chart_axis_1.ChartAxisX };
exports.chartItemSerializationInfo = _chart_item_base_1.chartItemBaseSerializationsInfo.concat([exports.panes, exports.chartRotated, exports.chartLegend, exports.chartAxisX, interactivity_options_1._chartItemInteractivityOptionsMeta]);


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
exports.shapeData = { propertyName: 'shapeData', modelName: '@ShapeData', displayName: 'DashboardWebStringId.Map.CustomMapFile', defaultVal: undefined, category: _base_metadata_1.PropertyCategory.Map };
exports.attributeData = { propertyName: 'attributeData', modelName: '@AttributeData', displayName: 'DashboardWebStringId.Map.CustomAttributeFile', defaultVal: undefined, category: _base_metadata_1.PropertyCategory.Map };
exports.customShapefileDataSerializationsInfo = [exports.shapeData, exports.attributeData];


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
var _dashboard_item_1 = __webpack_require__(74);
exports.urlPath = { propertyName: 'urlPath', modelName: '@Url', defaultVal: '', simpleFormAdapterItem: 'textBoxEditor' };
exports.image64 = { propertyName: 'image64', modelName: 'ImageData' };
exports.imageType = {
    propertyName: 'imageType', displayName: 'DashboardWebStringId.Title.Image', defaultVal: 'linked', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'linked': 'DashboardWebStringId.Title.ImageLinked',
        'embedded': 'DashboardWebStringId.Title.ImageEmbedded'
    }
};
exports.sizeMode = {
    propertyName: 'sizeMode', modelName: '@SizeMode', displayName: 'DashboardStringId.SizeMode', defaultVal: 'Clip', simpleFormAdapterItem: 'listEditor', values: {
        'Clip': 'DashboardWebStringId.Image.SizeMode.Clip',
        'Stretch': 'DashboardWebStringId.Image.SizeMode.Stretch',
        'Zoom': 'DashboardWebStringId.Image.SizeMode.Zoom',
        'Squeeze': 'DashboardWebStringId.Image.SizeMode.Squeeze'
    }, category: _base_metadata_1.PropertyCategory.ViewModel
};
exports.horizontalAlignment = {
    propertyName: 'horizontalAlignment', modelName: '@HorizontalAlignment', displayName: 'DashboardWebStringId.Image.HorizontalAlignment', defaultVal: 'Center', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Left': 'DashboardWebStringId.Image.Alignment.Left',
        'Center': 'DashboardWebStringId.Image.Alignment.Center',
        'Right': 'DashboardWebStringId.Image.Alignment.Right'
    }, category: _base_metadata_1.PropertyCategory.ViewModel
};
exports.verticalAlignment = {
    propertyName: 'verticalAlignment', modelName: '@VerticalAlignment', displayName: 'DashboardWebStringId.Image.VerticalAlignment', defaultVal: 'Center', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Top': 'DashboardWebStringId.Image.Alignment.Top',
        'Center': 'DashboardWebStringId.Image.Alignment.Center',
        'Bottom': 'DashboardWebStringId.Image.Alignment.Bottom'
    }, category: _base_metadata_1.PropertyCategory.ViewModel
};
exports.imageDashboardItemSerializationsInfo = _dashboard_item_1.dashboardItemSerializationsInfo.concat([exports.urlPath, exports.imageType, exports.image64, exports.sizeMode, exports.horizontalAlignment, exports.verticalAlignment]);


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var data_source_1 = __webpack_require__(62);
var _ef_data_source_1 = __webpack_require__(482);
var EFDataSource = (function (_super) {
    __extends(EFDataSource, _super);
    function EFDataSource(dataSourceJSON, serializer) {
        if (dataSourceJSON === void 0) { dataSourceJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, dataSourceJSON, serializer) || this;
        _this._tables = ko.observableArray();
        _this.hasCalculatedFields = true;
        _this.supportDataMembers = true;
        return _this;
    }
    EFDataSource.prototype.getInfo = function () {
        return _ef_data_source_1.efDataSourceSerializationsInfo;
    };
    EFDataSource.prototype.getDisplayNamePrefix = function () {
        return 'DashboardStringId.DefaultEFDataSourceName';
    };
    EFDataSource.prototype._getDefaultItemType = function () {
        return 'EFDataSource';
    };
    return EFDataSource;
}(data_source_1.DataSource));
exports.EFDataSource = EFDataSource;


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var data_source_1 = __webpack_require__(62);
var _olap_data_source_1 = __webpack_require__(487);
var OlapDataSource = (function (_super) {
    __extends(OlapDataSource, _super);
    function OlapDataSource(dataSourceJSON, serializer) {
        if (dataSourceJSON === void 0) { dataSourceJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, dataSourceJSON, serializer) || this;
    }
    OlapDataSource.prototype.getInfo = function () {
        return _olap_data_source_1.olapDataSourceSerializationsInfo;
    };
    OlapDataSource.prototype.getDisplayNamePrefix = function () {
        return 'DashboardStringId.DefaultOlapDataSourceName';
    };
    OlapDataSource.prototype._getDefaultItemType = function () {
        return 'OLAPDataSource';
    };
    return OlapDataSource;
}(data_source_1.DataSource));
exports.OlapDataSource = OlapDataSource;


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var _utils_1 = __webpack_require__(3);
var _date_utils_1 = __webpack_require__(41);
var _utils_2 = __webpack_require__(18);
var serializable_model_1 = __webpack_require__(5);
var dynamic_list_lookup_settings_1 = __webpack_require__(319);
var look_up_value_1 = __webpack_require__(108);
var _parameter_1 = __webpack_require__(318);
var static_list_lookup_settings_1 = __webpack_require__(320);
var _parameters_helper_1 = __webpack_require__(55);
function _getParametersQuery(parameters) {
    return parameters.map(function (p) {
        return {
            name: p.name(),
            value: _date_utils_1.toStringArray(p._actualValue()),
            type: p.type(),
            allowMultiselect: p.allowMultiselect(),
            selectAll: p.allowMultiselect() && p.selectAllValues() && p._actualValue() === Parameter.SelectAllValue
        };
    });
}
exports._getParametersQuery = _getParametersQuery;
var Parameter = (function (_super) {
    __extends(Parameter, _super);
    function Parameter(modelJson, serializer, _allParameters) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this._allParameters = _allParameters;
        _this.lookUpSourceType = ko.observable('None');
        _this.staticListLookUpSettings = ko.observable(null);
        _this.dynamicListLookUpSettings = ko.observable(null);
        _this._paramDialogValue = ko.observable();
        _this._value = ko.computed({
            read: function () { return _this._paramDialogValue(); },
            write: function (val) { return _this._paramDialogValue(val); }
        });
        _this.defaultValues = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(modelJson.Values, function (item) { return new look_up_value_1.LookUpValue(item, serializer); });
        _this._valuesOfDefaultValues = ko.computed(function () {
            return _this.defaultValues() && _this.defaultValues().map(function (val) { return val.value(); }) || null;
        });
        if (_this._type()) {
            var typeParts = _this._type().split(',');
            if (typeParts.length > 1) {
                _this._type(typeParts[0]);
            }
        }
        _this.type = ko.pureComputed({
            read: function () {
                return _this._type();
            },
            write: function (val) {
                var oldVal = _this._type();
                if (val !== oldVal) {
                    _this._value(undefined);
                    if (_this.staticListLookUpSettings()) {
                        _this.staticListLookUpSettings()._updateValuesType(val);
                    }
                    _this._type(val);
                    if (val === 'System.DateTime') {
                        _this.defaultValue(_parameters_helper_1.ParameterHelper.getDefaultTypeValue(val));
                    }
                    else {
                        _this.defaultValue(_parameters_helper_1.ParameterHelper.convertSingleValue(_this.defaultValue(), val, _this.allowNull()));
                    }
                }
            }
        });
        _this.defaultValue(_parameters_helper_1.ParameterHelper.convertSingleValue(_this.defaultValue(), _this.type(), _this.allowNull()));
        if (modelJson.hasOwnProperty(static_list_lookup_settings_1.StaticListLookUpSettings.modelName)) {
            _this.staticListLookUpSettings(new static_list_lookup_settings_1.StaticListLookUpSettings(modelJson[static_list_lookup_settings_1.StaticListLookUpSettings.modelName], serializer));
            delete _this['_model'][static_list_lookup_settings_1.StaticListLookUpSettings.modelName];
            _this.staticListLookUpSettings()._updateValuesType(_this.type());
            _this.lookUpSourceType('StaticListLookUpSettings');
        }
        else if (modelJson.hasOwnProperty(dynamic_list_lookup_settings_1.DynamicListLookUpSettings.modelName)) {
            _this.dynamicListLookUpSettings(new dynamic_list_lookup_settings_1.DynamicListLookUpSettings(modelJson[dynamic_list_lookup_settings_1.DynamicListLookUpSettings.modelName], serializer));
            delete _this['_model'][dynamic_list_lookup_settings_1.DynamicListLookUpSettings.modelName];
            _this.lookUpSourceType('DynamicListLookUpSettings');
        }
        else {
            _this.lookUpSourceType('None');
        }
        _this.lookUpSourceType = ko.computed({
            read: function () {
                if (!!_this.staticListLookUpSettings()) {
                    return 'StaticListLookUpSettings';
                }
                else if (_this.dynamicListLookUpSettings()) {
                    return 'DynamicListLookUpSettings';
                }
                else {
                    return 'None';
                }
            },
            write: function (val) {
                switch (val) {
                    case 'StaticListLookUpSettings':
                        _this.staticListLookUpSettings(new static_list_lookup_settings_1.StaticListLookUpSettings());
                        _this.dynamicListLookUpSettings(null);
                        _this._resetDefaultValues();
                        break;
                    case 'DynamicListLookUpSettings':
                        _this.staticListLookUpSettings(null);
                        _this.dynamicListLookUpSettings(new dynamic_list_lookup_settings_1.DynamicListLookUpSettings());
                        _this._resetDefaultValues();
                        break;
                    default:
                        _this.staticListLookUpSettings(null);
                        _this.dynamicListLookUpSettings(null);
                        _this._resetDefaultValues();
                        _this.allowMultiselect(false);
                        _this.selectAllValues(false);
                        break;
                }
            }
        });
        _this._actualValue = ko.computed(function () {
            if ((!_this.allowNull() && (_this._value() === null || _this._value() === undefined)) ||
                (_this.allowNull() && _this._value() === undefined)) {
                if (_this.allowMultiselect()) {
                    if (_this.selectAllValues()) {
                        if (!!_this.staticListLookUpSettings()) {
                            return _this.staticListLookUpSettings().values().map(function (val) { return val.value(); });
                        }
                        else if (!!_this.dynamicListLookUpSettings()) {
                            return Parameter.SelectAllValue;
                        }
                    }
                    return _this._valuesOfDefaultValues();
                }
                return _this.defaultValue();
            }
            return _this._value();
        });
        _this.containsDisplayMember = ko.computed(function () {
            return !!_this.dynamicListLookUpSettings();
        });
        _this.defaultValue.subscribe(function (newDefaultValue) {
            if (!_this.allowMultiselect()) {
                _this._value(_this.defaultValue());
            }
        });
        ko.computed(function () {
            if (_this.allowMultiselect()) {
                if (_this.selectAllValues()) {
                    _this._value(undefined);
                }
                else {
                    _this._value(_this._valuesOfDefaultValues());
                }
            }
            else {
                _this._value(_this.defaultValue());
            }
        });
        _this.allowMultiselect.subscribe(function (newAllowMultiselect) {
            if (!newAllowMultiselect) {
                _this.selectAllValues(false);
            }
            _this._resetDefaultValues();
        });
        _this.selectAllValues.subscribe(function (_) {
            _this._resetDefaultValues();
        });
        return _this;
    }
    Parameter.prototype._patchSerializationsInfo = function (infos, propertyName, action) {
        var property = (infos.filter(function (prop) { return prop.propertyName === propertyName; })[0]);
        if (!!property) {
            action(property);
        }
    };
    Parameter.prototype.getInfo = function () {
        var _this = this;
        var info = _utils_1.deepExtend([], _parameter_1.dashboardParameterSerializationsInfo);
        if (this.type) {
            this._patchSerializationsInfo(info, _parameter_1.defaultValue.propertyName, function (prop) { prop.defaultVal = _parameters_helper_1.ParameterHelper.getDefaultTypeValue(_this.type()); });
        }
        if (this.staticListLookUpSettings && !!this.staticListLookUpSettings()) {
            this._patchSerializationsInfo(info, static_list_lookup_settings_1._staticListLookUpSettingsSerializationInfo.propertyName, function (prop) { prop.modelName = static_list_lookup_settings_1.StaticListLookUpSettings.modelName; });
        }
        if (this.staticListLookUpSettings && !!this.dynamicListLookUpSettings()) {
            this._patchSerializationsInfo(info, dynamic_list_lookup_settings_1._dynamicListLookUpSettingsSerializationInfo.propertyName, function (prop) { prop.modelName = dynamic_list_lookup_settings_1.DynamicListLookUpSettings.modelName; });
        }
        return info;
    };
    Parameter.prototype._resetDefaultValues = function () {
        this.defaultValue(_parameters_helper_1.ParameterHelper.convertSingleValue(null, this.type(), this.allowNull()));
        this.defaultValues(this.allowNull() ? null : []);
    };
    Parameter.prototype.grabFrom = function (another) {
        this.name(another.name.peek());
        this._type(another._type.peek());
        this.allowNull(another.allowNull.peek());
        this.parameterVisible(another.parameterVisible.peek());
        this.description(another.description.peek());
        this.defaultValue(another.defaultValue.peek());
        this.allowMultiselect(another.allowMultiselect.peek());
        this.defaultValues(another.defaultValues.peek());
        this.selectAllValues(another.selectAllValues.peek());
        this.staticListLookUpSettings(another.staticListLookUpSettings.peek());
        this.dynamicListLookUpSettings(another.dynamicListLookUpSettings.peek());
    };
    Parameter.prototype._getDefaultItemType = function () {
        return 'Parameter';
    };
    Parameter.SelectAllValue = '7BD68C11-DC21-4571-8EF6-AAB6E15355EF';
    __decorate([
        _utils_2.collectionItemType('Value')
    ], Parameter.prototype, "defaultValues", void 0);
    return Parameter;
}(serializable_model_1.TypedSerializableModel));
exports.Parameter = Parameter;


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _custom_properties_utils_1 = __webpack_require__(178);
var serializable_model_1 = __webpack_require__(5);
var DataItemContainer = (function (_super) {
    __extends(DataItemContainer, _super);
    function DataItemContainer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DataItemContainer.prototype.getInfo = function () {
        return this._getInfoCore().concat(_custom_properties_utils_1.getCustomPropertiesSerializationInfo(this));
    };
    DataItemContainer.prototype.grabFrom = function (dataItemContainer) {
        this.name(dataItemContainer.name());
    };
    DataItemContainer.prototype._getContainerType = function () {
        return this.itemType();
    };
    return DataItemContainer;
}(serializable_model_1.TypedSerializableModel));
exports.DataItemContainer = DataItemContainer;


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var data_item_container_1 = __webpack_require__(141);
var _chart_series_1 = __webpack_require__(198);
var ChartSeries = (function (_super) {
    __extends(ChartSeries, _super);
    function ChartSeries(seriesJSON, serializer) {
        return _super.call(this, seriesJSON, serializer) || this;
    }
    ChartSeries.prototype._getInfoCore = function () {
        throw new Error("Method 'getInfo' is not implemented.");
    };
    ChartSeries.prototype.grabFrom = function (series) {
        _super.prototype.grabFrom.call(this, series);
        this.plotOnSecondaryAxis(series.plotOnSecondaryAxis());
        this.ignoreEmptyPoints(series.ignoreEmptyPoints());
        this.showPointMarkers(series.showPointMarkers());
        this.ignoreEmptyPoints(series.ignoreEmptyPoints());
        this.pointLabelOptions.grabFrom(series.pointLabelOptions);
    };
    ChartSeries.prototype._getDataId = function () {
        return this._defaultMeasure && this._defaultMeasure.uniqueName() || null;
    };
    return ChartSeries;
}(data_item_container_1.DataItemContainer));
exports.ChartSeries = ChartSeries;
var SimpleSeries = (function (_super) {
    __extends(SimpleSeries, _super);
    function SimpleSeries(dataItemProvider, seriesJSON, serializer) {
        if (seriesJSON === void 0) { seriesJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, seriesJSON, serializer) || this;
        dataItemProvider._attachDataItem(_this, _chart_series_1.chartSeriesValue.propertyName);
        return _this;
    }
    SimpleSeries.prototype._getBindingModel = function () {
        return [{
                propertyName: _chart_series_1.chartSeriesValue.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.ValueCaption'
            }];
    };
    SimpleSeries.prototype._getContainerType = function () {
        return this.seriesType();
    };
    SimpleSeries.prototype._getInfoCore = function () {
        return _chart_series_1.simpleSeriesSerializationsInfo;
    };
    SimpleSeries.prototype._getDefaultItemType = function () {
        return 'Simple';
    };
    Object.defineProperty(SimpleSeries.prototype, "_defaultMeasure", {
        get: function () { return this.value(); },
        enumerable: true,
        configurable: true
    });
    return SimpleSeries;
}(ChartSeries));
exports.SimpleSeries = SimpleSeries;
var RangeSeries = (function (_super) {
    __extends(RangeSeries, _super);
    function RangeSeries(dataItemProvider, seriesJSON, serializer) {
        if (seriesJSON === void 0) { seriesJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, seriesJSON, serializer) || this;
        dataItemProvider._attachDataItem(_this, _chart_series_1.value1.propertyName);
        dataItemProvider._attachDataItem(_this, _chart_series_1.value2.propertyName);
        return _this;
    }
    RangeSeries.prototype._getInfoCore = function () {
        return _chart_series_1.rangeSeriesSerializationsInfo;
    };
    RangeSeries.prototype._getDefaultItemType = function () {
        return 'Range';
    };
    RangeSeries.prototype._getBindingModel = function () {
        return [{
                propertyName: _chart_series_1.value1.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.Value1Caption'
            }, {
                propertyName: _chart_series_1.value2.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.Value2Caption'
            }];
    };
    RangeSeries.prototype._getContainerType = function () {
        return this.seriesType();
    };
    Object.defineProperty(RangeSeries.prototype, "_defaultMeasure", {
        get: function () { return this.value1() || this.value2(); },
        enumerable: true,
        configurable: true
    });
    return RangeSeries;
}(ChartSeries));
exports.RangeSeries = RangeSeries;
var WeightedSeries = (function (_super) {
    __extends(WeightedSeries, _super);
    function WeightedSeries(dataItemProvider, seriesJSON, serializer) {
        if (seriesJSON === void 0) { seriesJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, seriesJSON, serializer) || this;
        dataItemProvider._attachDataItem(_this, _chart_series_1.chartSeriesWeight.propertyName);
        dataItemProvider._attachDataItem(_this, _chart_series_1.chartSeriesValue.propertyName);
        return _this;
    }
    WeightedSeries.prototype._getInfoCore = function () {
        return _chart_series_1.weightedSeriesSerializationsInfo;
    };
    WeightedSeries.prototype._getDefaultItemType = function () {
        return 'Weighted';
    };
    WeightedSeries.prototype._getBindingModel = function () {
        return [{
                propertyName: _chart_series_1.chartSeriesValue.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardWebStringId.Chart.Value'
            }, {
                propertyName: _chart_series_1.chartSeriesWeight.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.WeightCaption'
            }];
    };
    Object.defineProperty(WeightedSeries.prototype, "_defaultMeasure", {
        get: function () { return this.value() || this.weight(); },
        enumerable: true,
        configurable: true
    });
    return WeightedSeries;
}(ChartSeries));
exports.WeightedSeries = WeightedSeries;
var HighLowCloseSeries = (function (_super) {
    __extends(HighLowCloseSeries, _super);
    function HighLowCloseSeries(dataItemProvider, seriesJSON, serializer) {
        if (seriesJSON === void 0) { seriesJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, seriesJSON, serializer) || this;
        dataItemProvider._attachDataItem(_this, _chart_series_1.high.propertyName);
        dataItemProvider._attachDataItem(_this, _chart_series_1.low.propertyName);
        dataItemProvider._attachDataItem(_this, _chart_series_1.close.propertyName);
        return _this;
    }
    HighLowCloseSeries.prototype._getInfoCore = function () {
        return _chart_series_1.highLowCloseSeriesSerializationsInfo;
    };
    HighLowCloseSeries.prototype._getDefaultItemType = function () {
        return 'HighLowClose';
    };
    HighLowCloseSeries.prototype._getBindingModel = function () {
        return [{
                propertyName: _chart_series_1.high.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.HighCaption'
            }, {
                propertyName: _chart_series_1.low.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.LowCaption'
            }, {
                propertyName: _chart_series_1.close.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.CloseCaption'
            }];
    };
    Object.defineProperty(HighLowCloseSeries.prototype, "_defaultMeasure", {
        get: function () { return this.high() || this.low() || this.close(); },
        enumerable: true,
        configurable: true
    });
    return HighLowCloseSeries;
}(ChartSeries));
exports.HighLowCloseSeries = HighLowCloseSeries;
var OpenHighLowCloseSeries = (function (_super) {
    __extends(OpenHighLowCloseSeries, _super);
    function OpenHighLowCloseSeries(dataItemProvider, seriesJSON, serializer) {
        if (seriesJSON === void 0) { seriesJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, dataItemProvider, seriesJSON, serializer) || this;
        dataItemProvider._attachDataItem(_this, _chart_series_1.open.propertyName);
        return _this;
    }
    OpenHighLowCloseSeries.prototype._getInfoCore = function () {
        return _chart_series_1.openHighLowCloseSeriesSerializationsInfo;
    };
    OpenHighLowCloseSeries.prototype._getDefaultItemType = function () {
        return 'OpenHighLowClose';
    };
    OpenHighLowCloseSeries.prototype._getBindingModel = function () {
        return [{
                propertyName: _chart_series_1.open.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.OpenCaption'
            }].concat(_super.prototype._getBindingModel.call(this));
    };
    OpenHighLowCloseSeries.prototype._getContainerType = function () {
        return this.seriesType();
    };
    Object.defineProperty(OpenHighLowCloseSeries.prototype, "_defaultMeasure", {
        get: function () { return this.open() || this.high() || this.low() || this.close(); },
        enumerable: true,
        configurable: true
    });
    return OpenHighLowCloseSeries;
}(HighLowCloseSeries));
exports.OpenHighLowCloseSeries = OpenHighLowCloseSeries;


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var _utils_1 = __webpack_require__(3);
var _range_filter_selection_validator_1 = __webpack_require__(144);
var data_item_1 = __webpack_require__(8);
var _utils_2 = __webpack_require__(18);
var serializable_model_1 = __webpack_require__(5);
var data_dashboard_item_1 = __webpack_require__(9);
var date_time_period_1 = __webpack_require__(211);
var _range_filter_item_helper_1 = __webpack_require__(285);
var _range_state_controller_1 = __webpack_require__(329);
var _date_filter_item_1 = __webpack_require__(298);
var DateFilterItem = (function (_super) {
    __extends(DateFilterItem, _super);
    function DateFilterItem(dashboardItemJSON, serializer) {
        if (dashboardItemJSON === void 0) { dashboardItemJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, dashboardItemJSON, serializer) || this;
        _this._defaultDateTimePeriodIndexSubscription = null;
        _this.currentSelectedDateTimePeriodName = ko.observable();
        _this._attachDataItem(_this, _date_filter_item_1.dateFilterDimension.propertyName);
        _this.__dimension._specifics.acceptableShapingType = data_item_1.AcceptableShapingType.RangeDate;
        _this.dateTimePeriods = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(dashboardItemJSON.DateTimePeriods, function (item) { return new date_time_period_1.DateTimePeriod(item, serializer); });
        _this._stateController = new _range_state_controller_1.RangeStateController(_this);
        _this._stateController.initialize();
        _range_filter_item_helper_1._subscribeToDimension(_this.dimension, _this.dateTimePeriods);
        return _this;
    }
    DateFilterItem.prototype._getSelectionByPeriod = function (period) {
        var range = period.getDateTimeValue();
        return [[range.startValue, range.endValue]];
    };
    DateFilterItem.prototype._clearBindings = function () {
        _super.prototype._clearBindings.call(this);
        this.dateTimePeriods.removeAll();
    };
    DateFilterItem.prototype._getInfoCore = function () {
        return _date_filter_item_1.dateFilterDashboardItemSerializationsInfo;
    };
    DateFilterItem.prototype._getDefaultItemType = function () {
        return 'DateFilter';
    };
    DateFilterItem.prototype._getClearMasterFilterSupported = function () { return true; };
    DateFilterItem.prototype._getIsMasterFilter = function () { return true; };
    DateFilterItem.prototype._getIgnoreMasterFilter = function () { return this.interactivityOptions.ignoreMasterFilters(); };
    DateFilterItem.prototype._getInteractivityDimensionLinks = function () {
        return [this.__dimension];
    };
    DateFilterItem.prototype._getDisplayFilterValues = function (limitCount) {
        return this._stateController._getDisplayFilterValues(limitCount);
    };
    DateFilterItem.prototype._updateContentViewModel = function (content) {
        _super.prototype._updateContentViewModel.call(this, content);
        (content.ViewModel.DateTimePeriods || []).forEach(function (p) {
            p.Start && p.Start.Date && (p.Start.Date = new Date(p.Start.Date));
            p.End && p.End.Date && (p.End.Date = new Date(p.End.Date));
        });
    };
    DateFilterItem.prototype._setState = function (itemState) {
        this._stateController.setState(itemState);
    };
    DateFilterItem.prototype._removeSelectionFromState = function (state) {
        var itemState = _super.prototype._removeSelectionFromState.call(this, _utils_1.deepExtend({}, state));
        return this._stateController.removeSelectionFromState(itemState);
    };
    DateFilterItem.prototype._setPredefinedPeriodToState = function (state, periodName) {
        var itemState = _super.prototype._setPredefinedPeriodToState.call(this, _utils_1.deepExtend({}, state), periodName);
        return this._stateController.setPredefinedPeriodToState(itemState, periodName);
    };
    DateFilterItem.prototype._setSelectionToState = function (state, selection) {
        return this._stateController.setSelectionToState(state, selection);
    };
    DateFilterItem.prototype._getValidatedSelection = function (selectionValues) {
        var validatedValues = _super.prototype._getValidatedSelection.call(this, selectionValues);
        if (validatedValues && this.dimension()) {
            var validatedRange = _range_filter_selection_validator_1.RangeFilterSelectionValidator.validate({
                startValue: validatedValues[0][0],
                endValue: validatedValues[0][1]
            }, this.dimension()._actualDateTimeGroupInterval() === 'Year');
            validatedValues[0] = [validatedRange.startValue, validatedRange.endValue];
        }
        return validatedValues;
    };
    DateFilterItem.prototype._extendContentState = function (content) {
        _super.prototype._extendContentState.call(this, content);
        this._stateController.extendContentState(content);
    };
    DateFilterItem.prototype._hasSelection = function () {
        if (!!this.currentSelectedDateTimePeriodName())
            return true;
        else if (_super.prototype._hasSelection.call(this)) {
            if (!!this._selectionValues()[0][0] || !!this._selectionValues()[0][1])
                return true;
        }
        return false;
    };
    DateFilterItem.prototype._isSortingEnabled = function () {
        return false;
    };
    DateFilterItem.prototype._isTopNEnabled = function (dataItem) {
        return false;
    };
    DateFilterItem.prototype._getEntireRange = function () {
        if (this._multiData) {
            var measures = this._multiData.getMeasures();
            var values = [];
            for (var i = 0; i < measures.length; i++)
                values.push(this._multiData.getMeasureValue(measures[i].id).getValue());
            values.sort(function (a, b) { return a > b ? 1 : -1; });
            return values;
        }
        return [];
    };
    __decorate([
        _utils_2.collectionItemType('DateTimePeriod')
    ], DateFilterItem.prototype, "dateTimePeriods", void 0);
    return DateFilterItem;
}(data_dashboard_item_1.DataDashboardItem));
exports.DateFilterItem = DateFilterItem;
serializable_model_1.itemTypesMap['DateFilter'] = { type: DateFilterItem, groupName: 'filter', title: 'DashboardStringId.DefaultNameDateFilterItem', index: 350 };


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var RangeFilterSelectionValidator = (function () {
    function RangeFilterSelectionValidator() {
    }
    RangeFilterSelectionValidator.validate = function (range, isYearGroupInterval, entireRange) {
        var validatedRange = this._prepareYearRangeBeforeSelection(range, isYearGroupInterval);
        validatedRange = this._validateValues(validatedRange, entireRange || { maximum: null, minimum: null });
        validatedRange = this.validateLimitsOrder(validatedRange);
        if (entireRange) {
            validatedRange = this._validateOutOfRange(validatedRange, entireRange);
        }
        return validatedRange;
    };
    RangeFilterSelectionValidator.validateLimitsOrder = function (range) {
        if (range.startValue && range.endValue && range.startValue > range.endValue) {
            return {
                startValue: range.endValue,
                endValue: range.startValue
            };
        }
        return range;
    };
    RangeFilterSelectionValidator.isValidValue = function (value) {
        return (typeof value === 'number') || (value instanceof Date);
    };
    RangeFilterSelectionValidator._validateValues = function (range, entireRange) {
        return {
            startValue: RangeFilterSelectionValidator.isValidValue(range.startValue) ? range.startValue : entireRange.minimum,
            endValue: RangeFilterSelectionValidator.isValidValue(range.endValue) ? range.endValue : entireRange.maximum
        };
    };
    RangeFilterSelectionValidator._validateOutOfRange = function (range, entireRange) {
        var startValue = range.startValue >= entireRange.minimum ? range.startValue : entireRange.minimum;
        startValue = startValue <= entireRange.maximum ? startValue : entireRange.minimum;
        var endValue = range.endValue <= entireRange.maximum ? range.endValue : entireRange.maximum;
        endValue = endValue >= entireRange.minimum ? endValue : entireRange.maximum;
        return {
            startValue: startValue,
            endValue: endValue
        };
    };
    RangeFilterSelectionValidator._prepareYearRangeBeforeSelection = function (range, isYearGroupInterval) {
        var prepareYearBeforeSelection = function (value) {
            return value && value.getFullYear ? value.getFullYear() : value;
        };
        if (isYearGroupInterval) {
            return {
                startValue: prepareYearBeforeSelection(range.startValue),
                endValue: prepareYearBeforeSelection(range.endValue)
            };
        }
        else {
            return range;
        }
    };
    return RangeFilterSelectionValidator;
}());
exports.RangeFilterSelectionValidator = RangeFilterSelectionValidator;


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var data_item_1 = __webpack_require__(8);
var measure_1 = __webpack_require__(59);
var _data_field_1 = __webpack_require__(14);
var _utils_1 = __webpack_require__(18);
var data_item_container_1 = __webpack_require__(141);
var grid_column_total_1 = __webpack_require__(330);
var _grid_column_total_1 = __webpack_require__(498);
var _grid_columns_1 = __webpack_require__(303);
var GridColumnType;
(function (GridColumnType) {
    GridColumnType[GridColumnType["Dimension"] = 0] = "Dimension";
    GridColumnType[GridColumnType["Measure"] = 1] = "Measure";
    GridColumnType[GridColumnType["Delta"] = 2] = "Delta";
    GridColumnType[GridColumnType["Sparkline"] = 3] = "Sparkline";
    GridColumnType[GridColumnType["Hyperlink"] = 4] = "Hyperlink";
})(GridColumnType = exports.GridColumnType || (exports.GridColumnType = {}));
var GridColumn = (function (_super) {
    __extends(GridColumn, _super);
    function GridColumn(dataItemProvider, dashboardItemJSON, serializer) {
        if (dashboardItemJSON === void 0) { dashboardItemJSON = {}; }
        var _this = _super.call(this, dashboardItemJSON, serializer) || this;
        _this._displayNameSeparator = 'vs';
        _this.totals = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(dashboardItemJSON.Totals, function (item) { return new grid_column_total_1.GridColumnTotal(item, serializer); });
        return _this;
    }
    Object.defineProperty(GridColumn.prototype, "actualDataItem", {
        get: function () {
            var dataItemLink = this._getActualDataItemLink();
            return !!dataItemLink ? dataItemLink.dataItem() : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GridColumn.prototype, "_actualDataItemLink", {
        get: function () {
            return this._getActualDataItemLink();
        },
        enumerable: true,
        configurable: true
    });
    GridColumn.prototype.grabFrom = function (column) {
        _super.prototype.grabFrom.call(this, column);
        this.weight(column.weight());
        this.fixedWidth(column.fixedWidth());
        this.widthType(column.widthType());
    };
    GridColumn.prototype._getInfoCore = function () {
        return _grid_columns_1.gridColumnBaseSerializationsInfo;
    };
    GridColumn.prototype._getColumnType = function () {
        return undefined;
    };
    GridColumn.prototype._getDataId = function () {
        return this.actualDataItem && this.actualDataItem.uniqueName() || null;
    };
    GridColumn.prototype._isAttribute = function (dataItem) {
        return false;
    };
    GridColumn.prototype._getViewModel = function () {
        return {
            Weight: this.weight(),
            FixedWidth: this.fixedWidth(),
            WidthType: this.widthType()
        };
    };
    GridColumn.prototype._getAvailableTotalTypes = function (dataItemProvider) {
        return _grid_column_total_1.totalTypeValues.commonCountTypes;
    };
    GridColumn.prototype._getTotalTypes = function (dataType) {
        var possibleTypes = _grid_column_total_1.totalTypeValues.commonCountTypes;
        if (_data_field_1.IsNumeric(dataType)) {
            return _grid_column_total_1.totalTypeValues.commonMinMaxTypes.concat(_grid_column_total_1.totalTypeValues.numericTypes).concat(possibleTypes);
        }
        else if (_data_field_1.IsTextual(dataType) || _data_field_1.IsDateTime(dataType)) {
            return _grid_column_total_1.totalTypeValues.commonMinMaxTypes.concat(possibleTypes);
        }
        else {
            return possibleTypes;
        }
    };
    __decorate([
        _utils_1.collectionItemType('Total')
    ], GridColumn.prototype, "totals", void 0);
    return GridColumn;
}(data_item_container_1.DataItemContainer));
exports.GridColumn = GridColumn;
var GridDimensionColumn = (function (_super) {
    __extends(GridDimensionColumn, _super);
    function GridDimensionColumn(dataItemProvider, dashboardItemJSON, serializer) {
        if (dashboardItemJSON === void 0) { dashboardItemJSON = {}; }
        var _this = _super.call(this, dataItemProvider, dashboardItemJSON, serializer) || this;
        dataItemProvider._attachDataItem(_this, _grid_columns_1.dimension.propertyName);
        return _this;
    }
    GridDimensionColumn.prototype._getInfoCore = function () {
        return _grid_columns_1.gridDimensionColumnSerializationsInfo;
    };
    GridDimensionColumn.prototype._getColumnType = function () {
        return GridColumnType.Dimension;
    };
    GridDimensionColumn.prototype._getActualDataItemLink = function () {
        return this.__dimension;
    };
    GridDimensionColumn.prototype._getAvailableTotalTypes = function (dataItemProvider) {
        var dataItem = this.actualDataItem;
        if (dataItem) {
            return this._getTotalTypes(dataItemProvider._getFinalDataType(dataItem.uniqueName()));
        }
        else {
            return _super.prototype._getAvailableTotalTypes.call(this, dataItemProvider);
        }
    };
    GridDimensionColumn.prototype._getDefaultItemType = function () {
        return 'GridDimensionColumn';
    };
    GridDimensionColumn.prototype._getBindingModel = function () {
        return [{
                propertyName: _grid_columns_1.dimension.propertyName,
                dataItemType: 'Dimension',
                emptyPlaceholder: 'DashboardStringId.DescriptionItemDimension'
            }];
    };
    return GridDimensionColumn;
}(GridColumn));
exports.GridDimensionColumn = GridDimensionColumn;
var GridMeasureColumn = (function (_super) {
    __extends(GridMeasureColumn, _super);
    function GridMeasureColumn(dataItemProvider, dashboardItemJSON, serializer) {
        if (dashboardItemJSON === void 0) { dashboardItemJSON = {}; }
        var _this = _super.call(this, dataItemProvider, dashboardItemJSON, serializer) || this;
        dataItemProvider._attachDataItem(_this, _grid_columns_1.measure.propertyName);
        _this.__measure._specifics.acceptableShapingType = data_item_1.AcceptableShapingType.String;
        return _this;
    }
    GridMeasureColumn.prototype._getInfoCore = function () {
        return _grid_columns_1.gridMeasureColumnSerializationsInfo;
    };
    GridMeasureColumn.prototype._getColumnType = function () {
        return GridColumnType.Measure;
    };
    GridMeasureColumn.prototype._getActualDataItemLink = function () {
        return this.__measure;
    };
    GridMeasureColumn.prototype._getAvailableTotalTypes = function (dataItemProvider) {
        var dataItem = this.actualDataItem;
        if (dataItem instanceof measure_1.Measure) {
            var totalTypes = this._getTotalTypes(dataItemProvider._getFinalDataType(dataItem.uniqueName()));
            if (dataItem.expression() == null && dataItem.calculation.calculation() == null)
                totalTypes = totalTypes.concat(_grid_column_total_1.totalTypeValues.autoTypes);
            return totalTypes;
        }
        else {
            return _super.prototype._getAvailableTotalTypes.call(this, dataItemProvider);
        }
    };
    GridMeasureColumn.prototype._getDefaultItemType = function () {
        return 'GridMeasureColumn';
    };
    GridMeasureColumn.prototype._getBindingModel = function () {
        return [{
                propertyName: _grid_columns_1.measure.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.DescriptionItemMeasure'
            }];
    };
    return GridMeasureColumn;
}(GridColumn));
exports.GridMeasureColumn = GridMeasureColumn;
var GridDeltaColumn = (function (_super) {
    __extends(GridDeltaColumn, _super);
    function GridDeltaColumn(dataItemProvider, dashboardItemJSON, serializer) {
        if (dashboardItemJSON === void 0) { dashboardItemJSON = {}; }
        var _this = _super.call(this, dataItemProvider, dashboardItemJSON, serializer) || this;
        dataItemProvider._attachDataItem(_this, _grid_columns_1.gridColumnActualValue.propertyName);
        dataItemProvider._attachDataItem(_this, _grid_columns_1.gridColumnTargetValue.propertyName);
        ko.computed(function () {
            _this.__actualValue._specifics.skipFormatting = true;
            _this.__targetValue._specifics.skipFormatting = true;
            if (!_this.__actualValue.dataItem() && _this.__targetValue.dataItem()) {
                _this.__targetValue._specifics.skipFormatting = false;
            }
            if (_this.__actualValue.dataItem() && !_this.__targetValue.dataItem()) {
                _this.__actualValue._specifics.skipFormatting = false;
            }
            else if (_this.__actualValue.dataItem() && _this.__targetValue.dataItem() && _this.deltaOptions.valueType() === 'ActualValue') {
                _this.__actualValue._specifics.skipFormatting = false;
            }
        });
        return _this;
    }
    GridDeltaColumn.prototype._getInfoCore = function () {
        return _grid_columns_1.gridDeltaColumnSerializationsInfo;
    };
    GridDeltaColumn.prototype._getColumnType = function () {
        return GridColumnType.Delta;
    };
    GridDeltaColumn.prototype._getActualDataItemLink = function () {
        return !!this.__actualValue.dataItem() ? this.__actualValue : this.__targetValue;
    };
    GridDeltaColumn.prototype._getDefaultItemType = function () {
        return 'GridDeltaColumn';
    };
    GridDeltaColumn.prototype._getBindingModel = function () {
        return [{
                propertyName: _grid_columns_1.gridColumnActualValue.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.ActualValueCaption'
            }, {
                propertyName: _grid_columns_1.gridColumnTargetValue.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.TargetValueCaption'
            }];
    };
    return GridDeltaColumn;
}(GridColumn));
exports.GridDeltaColumn = GridDeltaColumn;
var GridSparklineColumn = (function (_super) {
    __extends(GridSparklineColumn, _super);
    function GridSparklineColumn(dataItemProvider, dashboardItemJSON, serializer) {
        if (dashboardItemJSON === void 0) { dashboardItemJSON = {}; }
        var _this = _super.call(this, dataItemProvider, dashboardItemJSON, serializer) || this;
        dataItemProvider._attachDataItem(_this, _grid_columns_1.sparkline.propertyName);
        return _this;
    }
    GridSparklineColumn.prototype._getInfoCore = function () {
        return _grid_columns_1.gridSparklineColumnSerializationsInfo;
    };
    GridSparklineColumn.prototype._getColumnType = function () {
        return GridColumnType.Sparkline;
    };
    GridSparklineColumn.prototype._getActualDataItemLink = function () {
        return this.__measure;
    };
    GridSparklineColumn.prototype._getDefaultItemType = function () {
        return 'GridSparklineColumn';
    };
    GridSparklineColumn.prototype._getBindingModel = function () {
        return [{
                propertyName: _grid_columns_1.sparkline.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardWebStringId.Grid.Sparkline'
            }];
    };
    return GridSparklineColumn;
}(GridColumn));
exports.GridSparklineColumn = GridSparklineColumn;
var GridHyperlinkColumn = (function (_super) {
    __extends(GridHyperlinkColumn, _super);
    function GridHyperlinkColumn(dataItemProvider, dashboardItemJSON, serializer) {
        if (dashboardItemJSON === void 0) { dashboardItemJSON = {}; }
        var _this = _super.call(this, dataItemProvider, dashboardItemJSON, serializer) || this;
        dataItemProvider._attachDataItem(_this, _grid_columns_1.displayValue.propertyName);
        _this.__uriAttribute = data_item_1.DataItemLink.create(dataItemProvider, _this.__uriAttribute);
        _this.__uriAttribute._specifics.isAttribute = true;
        _this.__uriAttribute._specifics.acceptableShapingType = data_item_1.AcceptableShapingType.Attribute;
        _this._displayNameSeparator = '/';
        var isUriPatternChangedCallback = function (value) {
            _this.uriPattern(_grid_columns_1.checkGridUriPattern(value));
        };
        _this.uriPattern.subscribe(isUriPatternChangedCallback);
        return _this;
    }
    GridHyperlinkColumn.prototype._getInfoCore = function () {
        return _grid_columns_1.gridHyperlinkColumnSerializationsInfo;
    };
    GridHyperlinkColumn.prototype._getColumnType = function () {
        return GridColumnType.Hyperlink;
    };
    GridHyperlinkColumn.prototype._getActualDataItemLink = function () {
        return this.__displayValue;
    };
    GridHyperlinkColumn.prototype._getDefaultItemType = function () {
        return 'GridHyperlinkColumn';
    };
    GridHyperlinkColumn.prototype._isAttribute = function (dataItem) {
        return dataItem === this.__uriAttribute.dataItem();
    };
    GridHyperlinkColumn.prototype._getBindingModel = function () {
        return [{
                propertyName: _grid_columns_1.displayValue.propertyName,
                dataItemType: 'Dimension',
                emptyPlaceholder: 'DashboardStringId.DisplayValueCaption'
            }, {
                propertyName: _grid_columns_1.uri.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.UriCaption'
            }];
    };
    return GridHyperlinkColumn;
}(GridColumn));
exports.GridHyperlinkColumn = GridHyperlinkColumn;


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var _model_subscriber_1 = __webpack_require__(331);
var _utils_1 = __webpack_require__(3);
var grid_calc_window_definition_1 = __webpack_require__(525);
var _undo_engine_helper_1 = __webpack_require__(27);
var serializable_model_1 = __webpack_require__(5);
var data_dashboard_item_1 = __webpack_require__(9);
var grid_columns_1 = __webpack_require__(145);
var _grid_item_1 = __webpack_require__(304);
var GridItem = (function (_super) {
    __extends(GridItem, _super);
    function GridItem(dashboardItemJSON, serializer) {
        if (dashboardItemJSON === void 0) { dashboardItemJSON = {}; }
        var _this = _super.call(this, dashboardItemJSON, serializer) || this;
        _this.columns = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(dashboardItemJSON.GridColumns, function (item) { return _this._createGridColumn(item, serializer); });
        _this._attachDataItem(_this, _grid_item_1.sparklineArgument.propertyName);
        _this.interactivityOptions.masterFilterMode.subscribe(function (newMode) {
            if (newMode !== 'None') {
                _this.gridOptions.allowCellMerge(false);
            }
        });
        return _this;
    }
    GridItem.prototype._clearBindings = function () {
        _super.prototype._clearBindings.call(this);
        this.columns.removeAll();
    };
    GridItem.prototype._createGridColumn = function (columnJSON, serializer) {
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var itemType = columnJSON['@ItemType'];
        return new GridItem._gridColumnTypesMap[itemType].constructor(this, columnJSON, serializer);
    };
    GridItem.prototype._getInfoCore = function () {
        return _grid_item_1.dashboardGridItemSerializationsInfo;
    };
    GridItem.prototype._getDefaultItemType = function () {
        return 'Grid';
    };
    GridItem.prototype._getMasterFilterMode = function () { return this.interactivityOptions.masterFilterMode(); };
    GridItem.prototype._getDrillDownEnabled = function () { return this.interactivityOptions.isDrillDownEnabled(); };
    GridItem.prototype._getIgnoreMasterFilter = function () { return this.interactivityOptions.ignoreMasterFilters(); };
    GridItem.prototype._getInteractivityDimensionLinks = function () {
        if (this.columns().length > 0) {
            var dimensionsMap = this.columns().map(function (col) { return col instanceof grid_columns_1.GridDimensionColumn || col instanceof grid_columns_1.GridHyperlinkColumn; });
            var startIndex = dimensionsMap.indexOf(true);
            startIndex = startIndex == -1 ? dimensionsMap.length : startIndex;
            var endIndex = dimensionsMap.indexOf(false, startIndex);
            endIndex = endIndex == -1 ? dimensionsMap.length : endIndex;
            return this.columns().slice(startIndex, endIndex)
                .filter(function (col) { return col instanceof grid_columns_1.GridHyperlinkColumn || col.displayMode() !== 'Image'; })
                .map(function (col) { return col._actualDataItemLink; });
        }
        else {
            return _super.prototype._getInteractivityDimensionLinks.call(this);
        }
    };
    GridItem.prototype._cleanDataItemDependencies = function () {
        var _this = this;
        _super.prototype._cleanDataItemDependencies.call(this);
        var columnsToRemove = this.columns().filter(function (column) {
            var bindings = column._getBindingModel();
            return bindings.every(function (binding) { return !column[binding.propertyName].dataItem(); });
        });
        columnsToRemove.forEach(function (column) { return _this.columns.remove(column); });
    };
    GridItem.prototype._updateContentViewModel = function (content) {
        var _this = this;
        _super.prototype._updateContentViewModel.call(this, content);
        content.ViewModel = _utils_1.deepExtend(content.ViewModel || {}, this.gridOptions._getViewModel());
        if (!!content.ViewModel.Columns) {
            content.ViewModel.Columns.forEach(function (columnModel) {
                var column = _this.columns().filter(function (column) {
                    var actualDataItem = column.actualDataItem;
                    return actualDataItem ? columnModel.DataId == actualDataItem.uniqueName() : false;
                })[0];
                _utils_1.deepExtend(columnModel, !!column ? column._getViewModel() : {});
            });
        }
    };
    GridItem.prototype._isAttribute = function (dataItem) {
        return this.columns().some(function (c) { return c._isAttribute(dataItem); });
    };
    GridItem.prototype._setColumnWidthOptions = function (clientState) {
        var _this = this;
        if (clientState.widthOptions) {
            _model_subscriber_1.ModelSubscriber.changePropertyQuietly(this.gridOptions.columnWidthMode, function () { return _this.gridOptions.columnWidthMode(clientState.widthOptions.mode); });
            clientState.widthOptions.columnsOptions.forEach(function (columnOptions, index) {
                var column = _this.columns()[columnOptions.actualIndex];
                _model_subscriber_1.ModelSubscriber.changePropertyQuietly(column.widthType, function () { return column.widthType(columnOptions.widthType); });
                _model_subscriber_1.ModelSubscriber.changePropertyQuietly(column.weight, function () { return column.weight(columnOptions.weight); });
            });
        }
    };
    GridItem.prototype._getDefaultCalculationWindowDefinition = function () {
        return new grid_calc_window_definition_1.GridWindowDefinition();
    };
    GridItem.prototype._setClientState = function (clientState) {
        _super.prototype._setClientState.call(this, clientState);
        this._setColumnWidthOptions(clientState);
    };
    GridItem.prototype._getInteractivityAxisDimensionCount = function () {
        return this.columns().reduce(function (n, col) {
            return (col instanceof grid_columns_1.GridDimensionColumn) || (col instanceof grid_columns_1.GridHyperlinkColumn) ? n + 1 : n;
        }, 0);
    };
    GridItem._gridColumnTypesMap = {
        'GridDimensionColumn': {
            constructor: grid_columns_1.GridDimensionColumn,
            displayName: 'DashboardWebStringId.Grid.Dimension',
            icon: 'dx-dashboard-grid-column-dimension'
        },
        'GridMeasureColumn': {
            constructor: grid_columns_1.GridMeasureColumn,
            displayName: 'DashboardWebStringId.Grid.Measure',
            icon: 'dx-dashboard-grid-column-measure'
        },
        'GridDeltaColumn': {
            constructor: grid_columns_1.GridDeltaColumn,
            displayName: 'DashboardWebStringId.Grid.Delta',
            icon: 'dx-dashboard-grid-column-delta'
        },
        'GridSparklineColumn': {
            constructor: grid_columns_1.GridSparklineColumn,
            displayName: 'DashboardWebStringId.Grid.Sparkline',
            icon: 'dx-dashboard-grid-column-sparkline'
        },
        'GridHyperlinkColumn': {
            constructor: grid_columns_1.GridHyperlinkColumn,
            displayName: 'DashboardWebStringId.Grid.Hyperlink',
            icon: 'dx-dashboard-grid-column-hyperlink'
        }
    };
    __decorate([
        _undo_engine_helper_1.wrapWithUndoRedo
    ], GridItem.prototype, "_setColumnWidthOptions", null);
    return GridItem;
}(data_dashboard_item_1.DataDashboardItem));
exports.GridItem = GridItem;
serializable_model_1.itemTypesMap['Grid'] = { type: GridItem, groupName: 'common', title: 'DashboardStringId.DefaultNameGridItem', index: 10 };


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _utils_1 = __webpack_require__(3);
exports.dashboardExportPaperKind = {
    letter: 'Letter',
    legal: 'Legal',
    executive: 'Executive',
    a5: 'A5',
    a4: 'A4',
    a3: 'A3'
};
exports.dashboardExportPageLayout = {
    auto: 'Auto',
    portrait: 'Portrait',
    landscape: 'Landscape'
};
exports.dashboardExportScaleMode = {
    none: 'None',
    useScaleFactor: 'UseScaleFactor',
    autoFitToPageWidth: 'AutoFitToPageWidth',
    autoFitWithinOnePage: 'AutoFitWithinOnePage'
};
exports.dashboardExportDocumentScaleMode = {
    none: 'None',
    useScaleFactor: 'UseScaleFactor',
    autoFitToPagesWidth: 'AutoFitToPagesWidth',
};
exports.exportFormats = {
    pdf: 'PDF',
    image: 'Image',
    excel: 'Excel'
};
exports.dashboardExportFilterState = {
    none: 'None',
    after: 'Below',
    afterAndSplitPage: 'SeparatePage',
};
exports.excelExportFilterState = {
    none: 'None',
    below: 'Below',
    separateSheet: 'SeparateSheet'
};
exports.dashboardExportImageFormat = {
    png: 'Png',
    gif: 'Gif',
    jpg: 'Jpg'
};
exports.dashboardExportExcelFormat = {
    csv: 'Csv',
    xls: 'Xls',
    xlsx: 'Xlsx'
};
exports.dashboardExportSizeMode = {
    none: 'None',
    stretch: 'Stretch',
    zoom: 'Zoom'
};
exports.dashboardStateExportPosition = {
    below: 'Below',
    separatePage: 'SeparatePage'
};
exports.dashboardStateExcelExportPosition = {
    below: 'Below',
    separateSheet: 'SeparateSheet'
};
var ExportOptions = (function () {
    function ExportOptions() {
        var defaultFontInfoName = undefined;
        var defaultGdiCharSet = 0;
        var defaultUseCustomFontInfo = false;
        this.pdfExportOptions = {
            Title: ExportOptions.DefaultTitle,
            AutoFitPageCount: 1,
            CardAutoArrangeContent: true,
            ChartAutomaticPageLayout: true,
            ChartSizeMode: 'Zoom',
            ExportFilters: false,
            ExportParameters: false,
            DashboardStatePosition: 'Below',
            GaugeAutoArrangeContent: true,
            GridFitToPageWidth: true,
            GridPrintHeadersOnEveryPage: true,
            MapAutomaticPageLayout: true,
            MapSizeMode: 'Zoom',
            PageLayout: 'Portrait',
            PaperKind: 'Letter',
            PieAutoArrangeContent: true,
            PivotPrintHeadersOnEveryPage: true,
            RangeFilterAutomaticPageLayout: true,
            RangeFilterSizeMode: 'Stretch',
            ScaleFactor: 1.0,
            DocumentScaleMode: 'None',
            DashboardAutomaticPageLayout: true,
            ShowTitle: true,
            TreemapAutomaticPageLayout: true,
            TreemapSizeMode: 'Zoom',
            IncludeHiddenParameters: false,
            FontInfo: {
                Name: defaultFontInfoName,
                GdiCharSet: defaultGdiCharSet,
                UseCustomFontInfo: defaultUseCustomFontInfo
            }
        };
        this.imageExportOptions = {
            Title: ExportOptions.DefaultTitle,
            Format: 'Png',
            Resolution: 96,
            ExportFilters: false,
            ExportParameters: false,
            ScaleFactor: 1.0,
            ShowTitle: true,
            IncludeHiddenParameters: false,
            FontInfo: {
                Name: defaultFontInfoName,
                GdiCharSet: defaultGdiCharSet,
                UseCustomFontInfo: defaultUseCustomFontInfo
            }
        };
        this.excelExportOptions = {
            CsvValueSeparator: ',',
            ExportFilters: false,
            ExportParameters: false,
            DashboardStatePosition: 'Below',
            Format: 'Xlsx',
            IncludeHiddenParameters: false
        };
    }
    ExportOptions.prototype.convertToExportOptions = function (clientOptions) {
        if (!clientOptions)
            return this;
        var currentPdfOptions = this.pdfExportOptions;
        var currentImageOptions = this.imageExportOptions;
        var currentExcelOptions = this.excelExportOptions;
        var clientPdfOptions = clientOptions.pdfExportOptions ? clientOptions.pdfExportOptions : clientOptions;
        var clientImageOptions = clientOptions.imageExportOptions ? clientOptions.imageExportOptions : clientOptions;
        var clientExcelOptions = clientOptions.excelExportOptions ? clientOptions.excelExportOptions : clientOptions;
        var pdfOptions = {
            Title: 'Title' in clientPdfOptions ? clientPdfOptions.Title : currentPdfOptions.Title,
            ShowTitle: _utils_1.type.isDefined(clientPdfOptions.ShowTitle) ? clientPdfOptions.ShowTitle !== 'False' && clientPdfOptions.ShowTitle !== false : currentPdfOptions.ShowTitle,
            AutoFitPageCount: clientPdfOptions.AutoFitPageCount || currentPdfOptions.AutoFitPageCount,
            CardAutoArrangeContent: this._getDefinedValue(clientPdfOptions.CardOptions, 'AutoArrangeContent', clientPdfOptions.CardAutoArrangeContent, currentPdfOptions.CardAutoArrangeContent),
            ChartAutomaticPageLayout: this._getDefinedValue(clientPdfOptions.ChartOptions, 'AutomaticPageLayout', clientPdfOptions.ChartAutomaticPageLayout, currentPdfOptions.ChartAutomaticPageLayout),
            ChartSizeMode: this._getDefinedValue(clientPdfOptions.ChartOptions, 'SizeMode', clientPdfOptions.ChartSizeMode, currentPdfOptions.ChartSizeMode),
            ExportFilters: this._getExportFilters(clientPdfOptions, currentPdfOptions.ExportFilters),
            ExportParameters: _utils_1.type.isDefined(clientPdfOptions.ExportParameters) ? clientPdfOptions.ExportParameters : currentPdfOptions.ExportParameters,
            DashboardStatePosition: this._getPdfDashboardStatePosition(clientPdfOptions, currentPdfOptions.DashboardStatePosition),
            GaugeAutoArrangeContent: this._getDefinedValue(clientPdfOptions.GaugeOptions, 'AutoArrangeContent', clientPdfOptions.GaugeAutoArrangeContent, currentPdfOptions.GaugeAutoArrangeContent),
            GridFitToPageWidth: this._getDefinedValue(clientPdfOptions.GridOptions, 'FitToPageWidth', clientPdfOptions.GridFitToPageWidth, currentPdfOptions.GridFitToPageWidth),
            GridPrintHeadersOnEveryPage: this._getDefinedValue(clientPdfOptions.GridOptions, 'PrintHeadersOnEveryPage', clientPdfOptions.GridPrintHeadersOnEveryPage, currentPdfOptions.GridPrintHeadersOnEveryPage),
            MapAutomaticPageLayout: this._getDefinedValue(clientPdfOptions.MapOptions, 'AutomaticPageLayout', clientPdfOptions.MapAutomaticPageLayout, currentPdfOptions.MapAutomaticPageLayout),
            MapSizeMode: this._getDefinedValue(clientPdfOptions.MapOptions, 'SizeMode', clientPdfOptions.MapSizeMode, currentPdfOptions.MapSizeMode),
            PageLayout: clientPdfOptions.PageLayout || currentPdfOptions.PageLayout,
            PaperKind: clientPdfOptions.PaperKind || currentPdfOptions.PaperKind,
            PieAutoArrangeContent: this._getDefinedValue(clientPdfOptions.PieOptions, 'AutoArrangeContent', clientPdfOptions.PieAutoArrangeContent, currentPdfOptions.PieAutoArrangeContent),
            PivotPrintHeadersOnEveryPage: this._getDefinedValue(clientPdfOptions.PivotOptions, 'PrintHeadersOnEveryPage', clientPdfOptions.PivotPrintHeadersOnEveryPage, currentPdfOptions.PivotPrintHeadersOnEveryPage),
            RangeFilterAutomaticPageLayout: this._getDefinedValue(clientPdfOptions.RangeFilterOptions, 'AutomaticPageLayout', clientPdfOptions.RangeFilterAutomaticPageLayout, currentPdfOptions.RangeFilterAutomaticPageLayout),
            RangeFilterSizeMode: this._getDefinedValue(clientPdfOptions.RangeFilterOptions, 'SizeMode', clientPdfOptions.RangeFilterSizeMode, currentPdfOptions.RangeFilterSizeMode),
            ScaleFactor: clientPdfOptions.ScaleFactor || currentPdfOptions.ScaleFactor,
            DocumentScaleMode: clientPdfOptions.DocumentScaleMode || (clientPdfOptions.ScaleMode && this._convertScaleModeToDocumentScaleMode(clientPdfOptions.ScaleMode)) || currentPdfOptions.DocumentScaleMode,
            DashboardAutomaticPageLayout: this._getDashboardAutomaticPageLayout(clientPdfOptions, currentPdfOptions.DashboardAutomaticPageLayout),
            TreemapAutomaticPageLayout: this._getDefinedValue(clientPdfOptions.TreemapOptions, 'AutomaticPageLayout', clientPdfOptions.TreemapAutomaticPageLayout, currentPdfOptions.TreemapAutomaticPageLayout),
            TreemapSizeMode: this._getDefinedValue(clientPdfOptions.TreemapOptions, 'SizeMode', clientPdfOptions.TreemapSizeMode, currentPdfOptions.TreemapSizeMode),
            IncludeHiddenParameters: _utils_1.type.isDefined(clientPdfOptions.IncludeHiddenParameters) ? clientPdfOptions.IncludeHiddenParameters : currentPdfOptions.IncludeHiddenParameters,
            FontInfo: {
                Name: this._getDefinedValue(clientPdfOptions.FontInfo, 'Name', undefined, currentPdfOptions.FontInfo.Name),
                GdiCharSet: this._getDefinedValue(clientPdfOptions.FontInfo, 'GdiCharSet', undefined, currentPdfOptions.FontInfo.GdiCharSet),
                UseCustomFontInfo: this._getDefinedValue(clientPdfOptions.FontInfo, 'UseCustomFontInfo', undefined, currentPdfOptions.FontInfo.UseCustomFontInfo),
            }
        };
        var imageOptions = {
            Title: clientImageOptions.Title || currentImageOptions.Title,
            Format: this._getImageFormat(clientImageOptions, currentImageOptions.Format),
            Resolution: (clientImageOptions.ImageOptions ? clientImageOptions.ImageOptions.Resolution : clientImageOptions.Resolution) || currentImageOptions.Resolution,
            ExportFilters: this._getExportFilters(clientImageOptions, currentImageOptions.ExportFilters),
            ExportParameters: _utils_1.type.isDefined(clientImageOptions.ExportParameters) ? clientImageOptions.ExportParameters : currentImageOptions.ExportParameters,
            ScaleFactor: clientImageOptions.ScaleFactor || currentImageOptions.ScaleFactor,
            ShowTitle: _utils_1.type.isDefined(clientImageOptions.ShowTitle) ? clientImageOptions.ShowTitle !== 'False' && clientImageOptions.ShowTitle !== false : currentImageOptions.ShowTitle,
            IncludeHiddenParameters: _utils_1.type.isDefined(clientImageOptions.IncludeHiddenParameters) ? clientImageOptions.IncludeHiddenParameters : currentImageOptions.IncludeHiddenParameters,
            FontInfo: {
                Name: this._getDefinedValue(clientImageOptions.FontInfo, 'Name', undefined, currentImageOptions.FontInfo.Name),
                GdiCharSet: this._getDefinedValue(clientImageOptions.FontInfo, 'GdiCharSet', undefined, currentImageOptions.FontInfo.GdiCharSet),
                UseCustomFontInfo: this._getDefinedValue(clientImageOptions.FontInfo, 'UseCustomFontInfo', undefined, currentImageOptions.FontInfo.UseCustomFontInfo),
            }
        };
        var excelOptions = {
            CsvValueSeparator: (clientExcelOptions.ExcelOptions ? clientExcelOptions.ExcelOptions.CsvValueSeparator : clientExcelOptions.CsvValueSeparator) || currentExcelOptions.CsvValueSeparator,
            ExportFilters: this._getExportFilters(clientExcelOptions, currentExcelOptions.ExportFilters),
            ExportParameters: clientExcelOptions.ExportParameters || currentExcelOptions.ExportParameters,
            DashboardStatePosition: this._getExcelDashboardStatePosition(clientExcelOptions, currentExcelOptions.DashboardStatePosition),
            Format: this._getExcelFormat(clientExcelOptions, currentExcelOptions.Format),
            IncludeHiddenParameters: _utils_1.type.isDefined(clientExcelOptions.IncludeHiddenParameters) ? clientExcelOptions.IncludeHiddenParameters : currentExcelOptions.IncludeHiddenParameters
        };
        var options = new ExportOptions();
        options.pdfExportOptions = pdfOptions;
        options.imageExportOptions = imageOptions;
        options.excelExportOptions = excelOptions;
        return options;
    };
    ExportOptions.prototype.convertToASPxClientDashboardExportOptions = function () {
        return {
            PaperKind: this.pdfExportOptions.PaperKind,
            PageLayout: this.pdfExportOptions.PageLayout,
            ScaleMode: this._convertDocumentScaleModeToScaleMode(this.pdfExportOptions.DocumentScaleMode, this.pdfExportOptions.DashboardAutomaticPageLayout),
            ScaleFactor: this.pdfExportOptions.ScaleFactor,
            AutoFitPageCount: this.pdfExportOptions.AutoFitPageCount,
            Title: this.pdfExportOptions.Title,
            ShowTitle: this.pdfExportOptions.ShowTitle,
            FilterState: this._getPdfFilterState(),
            ImageOptions: {
                Format: this.imageExportOptions.Format,
                Resolution: this.imageExportOptions.Resolution,
            },
            ExcelOptions: {
                CsvValueSeparator: this.excelExportOptions.CsvValueSeparator,
                Format: this.excelExportOptions.Format,
                FilterState: this._getExcelFilterState()
            },
            GridOptions: {
                FitToPageWidth: this.pdfExportOptions.GridFitToPageWidth,
                PrintHeadersOnEveryPage: this.pdfExportOptions.GridPrintHeadersOnEveryPage
            },
            PivotOptions: {
                PrintHeadersOnEveryPage: this.pdfExportOptions.PivotPrintHeadersOnEveryPage
            },
            PieOptions: {
                AutoArrangeContent: this.pdfExportOptions.PieAutoArrangeContent
            },
            GaugeOptions: {
                AutoArrangeContent: this.pdfExportOptions.GaugeAutoArrangeContent
            },
            CardOptions: {
                AutoArrangeContent: this.pdfExportOptions.CardAutoArrangeContent
            },
            RangeFilterOptions: {
                AutomaticPageLayout: this.pdfExportOptions.RangeFilterAutomaticPageLayout,
                SizeMode: this.pdfExportOptions.RangeFilterSizeMode,
            },
            ChartOptions: {
                AutomaticPageLayout: this.pdfExportOptions.ChartAutomaticPageLayout,
                SizeMode: this.pdfExportOptions.ChartSizeMode,
            },
            MapOptions: {
                AutomaticPageLayout: this.pdfExportOptions.MapAutomaticPageLayout,
                SizeMode: this.pdfExportOptions.MapSizeMode
            },
            TreemapOptions: {
                AutomaticPageLayout: this.pdfExportOptions.TreemapAutomaticPageLayout,
                SizeMode: this.pdfExportOptions.TreemapSizeMode
            }
        };
    };
    ExportOptions.prototype.setExcelOptions = function (options) {
        this.excelExportOptions = this.convertToExportOptions(options).excelExportOptions;
    };
    ExportOptions.prototype.setImageOptions = function (options) {
        this.imageExportOptions = this.convertToExportOptions(options).imageExportOptions;
    };
    ExportOptions.prototype.setPdfOptions = function (options) {
        this.pdfExportOptions = this.convertToExportOptions(options).pdfExportOptions;
    };
    ExportOptions.prototype.setOptions = function (options) {
        var exportOptions = this.convertToExportOptions(options);
        this.pdfExportOptions = exportOptions.pdfExportOptions;
        this.imageExportOptions = exportOptions.imageExportOptions;
        this.excelExportOptions = exportOptions.excelExportOptions;
    };
    ExportOptions.prototype._getPdfDashboardStatePosition = function (clientOptions, currentValue) {
        if (clientOptions.DashboardStatePosition && clientOptions.DashboardStatePosition !== 'SeparateSheet')
            return clientOptions.DashboardStatePosition;
        return clientOptions.FilterState && clientOptions.FilterState !== 'None' ? clientOptions.FilterState : currentValue;
    };
    ExportOptions.prototype._getExcelDashboardStatePosition = function (clientOptions, currentValue) {
        if (clientOptions.DashboardStatePosition && clientOptions.DashboardStatePosition !== 'SeparatePage')
            return clientOptions.DashboardStatePosition;
        return clientOptions.ExcelOptions && clientOptions.ExcelOptions.FilterState && clientOptions.ExcelOptions.FilterState !== 'None' ? clientOptions.ExcelOptions.FilterState : currentValue;
    };
    ExportOptions.prototype._getImageFormat = function (clientOptions, currentValue) {
        if (clientOptions.Format && (clientOptions.Format === 'Png' || clientOptions.Format === 'Jpeg' || clientOptions.Format === 'Jpg' || clientOptions.Format === 'Gif'))
            return this._correctImageFormat(clientOptions.Format);
        return clientOptions.ImageOptions ? clientOptions.ImageOptions.Format : currentValue;
    };
    ExportOptions.prototype._getExcelFormat = function (clientOptions, currentValue) {
        if (clientOptions.Format && (clientOptions.Format === 'Csv' || clientOptions.Format === 'Xls' || clientOptions.Format === 'Xlsx'))
            return clientOptions.Format;
        return clientOptions.ExcelOptions ? clientOptions.ExcelOptions.Format : currentValue;
    };
    ExportOptions.prototype._getDefinedValue = function (oldOptions, oldProperty, newValue, currentValue) {
        if (_utils_1.type.isDefined(oldOptions))
            return oldOptions[oldProperty];
        if (_utils_1.type.isDefined(newValue))
            return newValue;
        return currentValue;
    };
    ExportOptions.prototype._getExportFilters = function (clientOptions, currentValue) {
        if (_utils_1.type.isDefined(clientOptions.ExportFilters))
            return clientOptions.ExportFilters;
        if (_utils_1.type.isDefined(clientOptions.FilterState))
            return clientOptions.FilterState !== 'None';
        return currentValue;
    };
    ExportOptions.prototype._getDashboardAutomaticPageLayout = function (clientOptions, currentValue) {
        if (_utils_1.type.isDefined(clientOptions.DashboardAutomaticPageLayout))
            return clientOptions.DashboardAutomaticPageLayout;
        if (_utils_1.type.isDefined(clientOptions.ScaleMode))
            return clientOptions.ScaleMode === exports.dashboardExportScaleMode.autoFitWithinOnePage;
        return currentValue;
    };
    ExportOptions.prototype._convertDocumentScaleModeToScaleMode = function (documentScaleMode, dashboardAutomaticPageLayout) {
        switch (documentScaleMode) {
            case exports.dashboardExportDocumentScaleMode.autoFitToPagesWidth:
                return exports.dashboardExportScaleMode.autoFitToPageWidth;
            case exports.dashboardExportDocumentScaleMode.useScaleFactor:
                return exports.dashboardExportScaleMode.useScaleFactor;
            default:
                return dashboardAutomaticPageLayout ? exports.dashboardExportScaleMode.autoFitWithinOnePage : exports.dashboardExportScaleMode.none;
        }
    };
    ExportOptions.prototype._convertScaleModeToDocumentScaleMode = function (scaleMode) {
        switch (scaleMode) {
            case exports.dashboardExportScaleMode.autoFitToPageWidth:
                return exports.dashboardExportDocumentScaleMode.autoFitToPagesWidth;
            case exports.dashboardExportScaleMode.useScaleFactor:
                return exports.dashboardExportDocumentScaleMode.useScaleFactor;
            default:
                return exports.dashboardExportDocumentScaleMode.none;
        }
    };
    ExportOptions.prototype._getPdfFilterState = function () {
        if (!this.pdfExportOptions.ExportFilters && !this.pdfExportOptions.ExportParameters)
            return 'None';
        return this.pdfExportOptions.DashboardStatePosition;
    };
    ExportOptions.prototype._getExcelFilterState = function () {
        if (!this.excelExportOptions.ExportFilters && !this.excelExportOptions.ExportParameters)
            return 'None';
        return this.excelExportOptions.DashboardStatePosition;
    };
    ExportOptions.prototype._correctImageFormat = function (imageFormat) {
        return imageFormat === 'Jpeg' ? exports.dashboardExportImageFormat.jpg : imageFormat;
    };
    ExportOptions.DefaultTitle = undefined;
    return ExportOptions;
}());
exports.ExportOptions = ExportOptions;


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
function arrangeToolbarItems(staticItems, actionItems, stateItems, navigationItems, showStaticItemsOnCenter) {
    if (staticItems === void 0) { staticItems = []; }
    if (actionItems === void 0) { actionItems = []; }
    if (stateItems === void 0) { stateItems = []; }
    if (navigationItems === void 0) { navigationItems = []; }
    if (showStaticItemsOnCenter === void 0) { showStaticItemsOnCenter = false; }
    var items = [];
    navigationItems.forEach(function (button) {
        items.push(__assign({}, button, { location: staticItems.length !== 0 ? 'before' : 'after' }));
    });
    staticItems.forEach(function (button) {
        items.push(__assign({}, button, { location: showStaticItemsOnCenter ? 'center' : 'before' }));
    });
    actionItems.forEach(function (button) {
        items.push(__assign({}, button, { location: 'after' }));
    });
    if (actionItems.length !== 0 && stateItems.length !== 0) {
        items.push({
            location: 'after',
            isSeparator: true
        });
    }
    stateItems.forEach(function (button) {
        items.push(__assign({}, button, { location: 'after' }));
    });
    return items;
}
function arrangeFloatingToolbarItems(itemOptions) {
    return arrangeToolbarItems(undefined, itemOptions.actionItems, itemOptions.stateItems, itemOptions.navigationItems);
}
exports.arrangeFloatingToolbarItems = arrangeFloatingToolbarItems;
function arrangeHoveredToolbarItems(itemOptions, containerHovered, disabled) {
    return arrangeToolbarItems(itemOptions.staticItems, containerHovered && !disabled ? itemOptions.actionItems : undefined, itemOptions.stateItems, itemOptions.navigationItems);
}
exports.arrangeHoveredToolbarItems = arrangeHoveredToolbarItems;
function arrangeTitleToolbarItems(itemOptions, showStaticItemsOnCenter) {
    return arrangeToolbarItems(itemOptions.staticItems, itemOptions.actionItems, itemOptions.stateItems, itemOptions.navigationItems, showStaticItemsOnCenter);
}
exports.arrangeTitleToolbarItems = arrangeTitleToolbarItems;
function arrangeStaticToolbarItems(itemOptions, disabled) {
    return arrangeToolbarItems(itemOptions.staticItems, disabled ? undefined : itemOptions.actionItems, itemOptions.stateItems, itemOptions.navigationItems);
}
exports.arrangeStaticToolbarItems = arrangeStaticToolbarItems;


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var toolbar_1 = __webpack_require__(420);
var $ = __webpack_require__(2);
var _utils_1 = __webpack_require__(3);
var _render_helper_1 = __webpack_require__(28);
var _caption_toolbar_adapter_1 = __webpack_require__(543);
var _caption_toolbar_css_classes_1 = __webpack_require__(31);
var _toolbar_item_size_calculator_1 = __webpack_require__(545);
var DashboardCaptionToolbarBase = (function () {
    function DashboardCaptionToolbarBase(_container, _controlContainer, _popupContainer, encodeHtml) {
        if (encodeHtml === void 0) { encodeHtml = true; }
        this._container = _container;
        this._controlContainer = _controlContainer;
        this._popupContainer = _popupContainer;
        this.encodeHtml = encodeHtml;
        this._className = _caption_toolbar_css_classes_1.cssClasses.caption;
        this._disabled = false;
        this._adapter = new _caption_toolbar_adapter_1.DashboardCaptionToolbarAdapter(encodeHtml);
    }
    Object.defineProperty(DashboardCaptionToolbarBase.prototype, "_initialized", {
        get: function () {
            return this._toolbar !== undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardCaptionToolbarBase.prototype, "_staticItemsClass", {
        get: function () {
            return _caption_toolbar_css_classes_1.cssClasses.toolbarBefore;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardCaptionToolbarBase.prototype, "element", {
        get: function () {
            return this._initialized ? _utils_1.$unwrap(this._toolbar.element()) : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardCaptionToolbarBase.prototype, "disabled", {
        get: function () {
            return this._disabled;
        },
        set: function (value) {
            if (this._disabled !== value) {
                this._disabled = value;
                this._updateToolbar();
            }
        },
        enumerable: true,
        configurable: true
    });
    DashboardCaptionToolbarBase.prototype.update = function (options) {
        var _this = this;
        this._options = options;
        var heightChanded = false;
        if (!this._toolbar) {
            this._toolbarDiv = document.createElement('div');
            this._className.split(' ').forEach(function (className) { return _this._toolbarDiv.classList.add(className); });
            if (this._container)
                this._toolbarContainer = this._appendToContainer(this._toolbarDiv);
            this._toolbar = new toolbar_1.default(this._toolbarDiv, this._getToolbarOptions());
            heightChanded = true;
        }
        else {
            this._updateToolbar();
        }
        return heightChanded;
    };
    DashboardCaptionToolbarBase.prototype.calcHeight = function (options) {
        var toolbar = this._createInstance();
        if (toolbar) {
            this._processToolbarBeforeGettingSize(toolbar);
            toolbar.update(options);
            var height = _render_helper_1.RenderHelper.getElementBox(toolbar.element).height;
            toolbar.dispose();
            return height;
        }
        return 0;
    };
    DashboardCaptionToolbarBase.prototype.calcMinWidth = function (options) {
        var toolbar = this._createInstance();
        if (toolbar) {
            this._processToolbarBeforeGettingSize(toolbar);
            toolbar.update(options);
            var proccesSize = function () {
                var getWidth = function (selector) {
                    return toolbar.element.querySelector('.' + selector).getBoundingClientRect().width;
                };
                var w = getWidth(_caption_toolbar_css_classes_1.cssClasses.toolbarBefore) +
                    getWidth(_caption_toolbar_css_classes_1.cssClasses.toolbarCenter) +
                    getWidth(_caption_toolbar_css_classes_1.cssClasses.toolbarAfter);
                return w;
            };
            var width = _render_helper_1.RenderHelper.processElement($(toolbar.element), proccesSize);
            toolbar.dispose();
            return width;
        }
        return 0;
    };
    DashboardCaptionToolbarBase.prototype.onResize = function () {
        if (this._initialized) {
            this._toolbar.repaint();
            this._resizeStaticToolbarItems();
        }
    };
    DashboardCaptionToolbarBase.prototype.dispose = function () {
        if (this._toolbarContainer) {
            this._toolbarContainer.parentNode.removeChild(this._toolbarContainer);
            this._toolbarContainer = undefined;
        }
        if (this._toolbar) {
            this._toolbar.dispose();
            this._toolbar = undefined;
        }
    };
    DashboardCaptionToolbarBase.prototype._updateToolbar = function () {
        if (this._toolbar) {
            this._toolbar.option(this._getToolbarOptions());
        }
    };
    DashboardCaptionToolbarBase.prototype._createInstance = function () {
        return undefined;
    };
    DashboardCaptionToolbarBase.prototype._getToolbarOptions = function () {
        var _this = this;
        return {
            items: this._getToolbarItems(this._getVisibleItems()),
            onContentReady: function (data) {
                _this._resizeStaticToolbarItems();
            }
        };
    };
    DashboardCaptionToolbarBase.prototype._getVisibleItems = function () {
        return [];
    };
    DashboardCaptionToolbarBase.prototype._getToolbarItems = function (items) {
        var _this = this;
        return items.map(function (item) { return _this._adapter.createToolbarItem(item, _this._controlContainer, _this._popupContainer); }).filter(function (item) { return item !== undefined; });
    };
    DashboardCaptionToolbarBase.prototype._appendToContainer = function (toolbarDiv) {
        $(this._container).prepend(toolbarDiv);
        return toolbarDiv;
    };
    DashboardCaptionToolbarBase.prototype._resizeStaticToolbarItems = function (toolbarDiv) {
        if (toolbarDiv === void 0) { toolbarDiv = this._toolbarDiv; }
        var staticElements = $(toolbarDiv).find('.' + this._staticItemsClass).find('.' + _caption_toolbar_css_classes_1.cssClasses.ellipsisText).toArray();
        var toolbarWidth = $(toolbarDiv).width();
        if (staticElements.length > 0 && toolbarWidth > 0) {
            var afterSectionWidth = $(toolbarDiv).find('.' + _caption_toolbar_css_classes_1.cssClasses.toolbarAfter).get(0).getBoundingClientRect().width;
            var staticSectionMaxWidth = toolbarWidth - afterSectionWidth;
            var staticSectionWidth = $(toolbarDiv).find('.' + this._staticItemsClass).get(0).getBoundingClientRect().width;
            var itemsMaxWidth = _toolbar_item_size_calculator_1.calcMaxWidth(staticElements.map(function (item) { return $(item).outerWidth(); }), staticSectionWidth, staticSectionMaxWidth);
            itemsMaxWidth.map(function (maxWidth, i) {
                if (maxWidth !== undefined) {
                    $(staticElements[i]).closest('.' + _caption_toolbar_css_classes_1.cssClasses.toolbarItem).css('maxWidth', maxWidth + 'px');
                }
            });
        }
    };
    DashboardCaptionToolbarBase.prototype._processToolbarBeforeGettingSize = function (toolbar) {
    };
    return DashboardCaptionToolbarBase;
}());
exports.DashboardCaptionToolbarBase = DashboardCaptionToolbarBase;


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Class = __webpack_require__(412);
var $ = __webpack_require__(2);
var _utils_1 = __webpack_require__(3);
exports.dashboardSelectionMode = {
    none: 'None',
    single: 'Single',
    multiple: 'Multiple'
};
exports.interactivityController = Class.inherit({
    ctor: function ctor(getTuples) {
        var that = this;
        that._getTuples = getTuples;
        that.selectionChanged = $.Callbacks();
    },
    clickAction: function (tuples, isEmpty) {
        if (isEmpty === void 0) { isEmpty = false; }
        if (isEmpty) {
            this.selectionChanged.fire(null);
        }
        else if (this.selectionMode !== exports.dashboardSelectionMode.none) {
            var that = this, isMultipleMode = that.selectionMode === exports.dashboardSelectionMode.multiple, currentTuples = isMultipleMode ? that._getTuples().slice() : [], selectedTuples = [], changed = false;
            $.each(tuples, function (index, tuple) {
                if (that._allowSelectTuple(tuple)) {
                    var arrayIndex = isMultipleMode ? _utils_1.checkArrayContainsTuple(currentTuples, tuple) : undefined;
                    if (arrayIndex == undefined) {
                        selectedTuples.push(tuple);
                    }
                    else {
                        currentTuples.splice(arrayIndex, 1);
                    }
                    changed = true;
                }
            });
            if (changed) {
                that.selectionChanged.fire(currentTuples.concat(selectedTuples));
            }
        }
    },
    setOptions: function (selectionMode) {
        this.selectionMode = selectionMode;
    },
    _allowSelectTuple: function (tuple) {
        var allowSelect = true;
        $.each(tuple, function (_, axisValue) {
            if (!_utils_1.allowSelectValue(axisValue.Value)) {
                allowSelect = false;
                return false;
            }
        });
        return allowSelect;
    }
});


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var renderer_1 = __webpack_require__(174);
var $ = __webpack_require__(2);
var _consts_1 = __webpack_require__(343);
var DeltaIndicator = (function () {
    function DeltaIndicator(options) {
        options = options || {};
        this._container = $(options.container);
        this._renderer = options.renderer;
        this._shape = null;
        this._init();
        if (this._container.length) {
            this.draw(options);
        }
    }
    DeltaIndicator.prototype._init = function () {
        var container = this._container, width = 0, height = 0;
        if (!container.length) {
            return;
        }
        width = container.width(),
            height = container.height();
        if (!(width > 0 && height > 0)) {
            return;
        }
        this._renderer = new renderer_1.Renderer({ container: container[0] });
    };
    DeltaIndicator.prototype.draw = function (options) {
        var params = this._prepareDrawParams(options);
        if (params.readyToDraw) {
            this._render(params);
        }
        return this._shape;
    };
    DeltaIndicator.prototype._prepareDrawParams = function (options) {
        var container = this._container, params = { readyToDraw: false }, rectOptions = { left: 0, top: 0, right: 0, bottom: 0 };
        if (container.length) {
            rectOptions.right = container.width() || 0;
            rectOptions.bottom = container.height() || 0;
        }
        else if (options.rect) {
            rectOptions = options.rect;
        }
        params.rectangle = rectOptions;
        params.type = options.type || _consts_1.indicatorType.none;
        params.hasPositiveMeaning = !!(options.hasPositiveMeaning);
        params.readyToDraw = !!(this._renderer && rectOptions.right - rectOptions.left > 0 && rectOptions.bottom - rectOptions.top > 0);
        params.drawToContainer = !!(this._container.length);
        return params;
    };
    DeltaIndicator.prototype._render = function (params) {
        var rect = params.rectangle, shape;
        this._shape = null;
        if (params.drawToContainer) {
            this._renderer.resize(rect.right - rect.left, rect.bottom - rect.top);
            shape = this._drawShape(params);
            if (shape) {
                shape.append(this._renderer.root);
            }
        }
        else {
            shape = this._drawShape(params);
        }
        this._shape = shape;
    };
    DeltaIndicator.prototype._drawShape = function (params) {
        var shape = null, rect = params.rectangle, cx = (rect.left + rect.right) >> 1, cy = (rect.top + rect.bottom) >> 1, r = ~~(Math.min(rect.right - rect.left, rect.bottom - rect.top) / 2), coords = [], colorClassName = DeltaIndicator.getIndicatorColorType(params.type, params.hasPositiveMeaning);
        switch (params.type) {
            case _consts_1.indicatorType.none:
                break;
            case _consts_1.indicatorType.up:
                coords.push(rect.left);
                coords.push(rect.bottom);
                coords.push(cx);
                coords.push(rect.top);
                coords.push(rect.right);
                coords.push(rect.bottom);
                shape = this._renderer.path(coords, 'area').attr({ 'class': colorClassName });
                shape._useCSSTheme = true;
                break;
            case _consts_1.indicatorType.down:
                coords.push(rect.left);
                coords.push(rect.top);
                coords.push(cx);
                coords.push(rect.bottom);
                coords.push(rect.right);
                coords.push(rect.top);
                shape = this._renderer.path(coords, 'area').attr({ 'class': colorClassName });
                shape._useCSSTheme = true;
                break;
            case _consts_1.indicatorType.warning:
                shape = this._renderer.circle(cx, cy, r).attr({ 'class': colorClassName });
                shape._useCSSTheme = true;
                break;
        }
        return shape;
    };
    DeltaIndicator.getIndicatorColorType = function (type, hasPositiveMeaning, useDefaultColor) {
        var color;
        if (useDefaultColor) {
            color = 'dx-carditem-default-color';
        }
        else {
            switch (type) {
                case _consts_1.indicatorType.up:
                case _consts_1.indicatorType.down:
                    color = hasPositiveMeaning ? 'dx-carditem-positive-color' : 'dx-carditem-negative-color';
                    break;
                case _consts_1.indicatorType.warning:
                    color = 'dx-carditem-warning-color';
                    break;
                default:
                    color = 'dx-carditem-none-color';
                    break;
            }
        }
        return color;
    };
    return DeltaIndicator;
}());
exports.DeltaIndicator = DeltaIndicator;


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var resizeCallbacks = __webpack_require__(413);
var button_1 = __webpack_require__(169);
var popup_1 = __webpack_require__(247);
var $ = __webpack_require__(2);
var _utils_1 = __webpack_require__(3);
var _dashboard_layout_mode_helper_1 = __webpack_require__(77);
var _render_helper_1 = __webpack_require__(28);
exports.dialogClasses = {
    form: 'dx-dashboard-form',
    simpleDialog: 'dx-dashboard-simple-dialog',
    element: 'dx-dashboard-dialog-element',
    elementOffset: 'dx-dashboard-dialog-element-offset',
    name: 'dx-dashboard-dialog-element-name',
    disabledName: 'dx-dashboard-dialog-element-name-disabled',
    box: 'dx-dashboard-dialog-element-box',
    buttons: 'dx-dashboard-dialog-buttons',
    elementTextBox: 'dx-dashboard-dialog-element-text-box',
    elementNumberBox: 'dx-dashboard-dialog-element-number-box',
    elementLargeMarginTop: 'dx-dashboard-dialog-element-margin-top'
};
exports.dialogSizes = {
    width: 500,
    height: 500,
    minWidth: 350,
    minHeight: 200,
    elementsHeight: 172
};
var widgetMargin = 1;
var dialogForm = (function () {
    function dialogForm(options) {
        this.controlCreationCallbacks = $.Callbacks();
        this.options = options;
        this._initialize();
    }
    dialogForm.prototype.showDialog = function () {
        this.popupInstance.show();
    };
    dialogForm.prototype.hideDialog = function () {
        this.popupInstance.hide();
    };
    dialogForm.prototype.dispose = function () {
        if (this.popupInstance) {
            this.popupInstance.dispose();
        }
        if (this.options && this.options.disposeContent) {
            this.options.disposeContent();
        }
    };
    dialogForm.prototype._initialize = function () {
        var that = this, options = that.options, getMaxSize = function () {
            var windowHeight = _dashboard_layout_mode_helper_1.DashboardLayoutModeHelper.isMobile ? window.innerHeight : undefined;
            var height = $(options.dialogContainer).height();
            return !!windowHeight && (windowHeight > height) ? windowHeight : height;
        }, correctMaxSize = function () {
            that.popupInstance.option('maxHeight', getMaxSize());
            var popupContent = _utils_1.$unwrap(that.popupInstance.content());
            var scrollableContent = popupContent.querySelector('.dx-scrollable-container');
            if (scrollableContent) {
                scrollableContent.style.maxHeight = _utils_1.$unwrap(that.popupInstance.content()).style.maxHeight;
            }
        }, resizeHandler = function () {
            correctMaxSize();
        };
        var popupOptions = {
            title: options.title,
            showCloseButton: true,
            toolbarItems: [{ toolbar: 'bottom' }],
            animation: {
                show: {
                    type: 'fade',
                    from: 0, to: 1
                },
                hide: {
                    type: 'fade',
                    from: 1, to: 0
                }
            },
            position: {
                my: 'center',
                at: 'center',
                of: _dashboard_layout_mode_helper_1.DashboardLayoutModeHelper.isMobile ? window : options.dialogContainer
            },
            width: options.width,
            height: options.height,
            maxHeight: getMaxSize(),
            minWidth: exports.dialogSizes.minWidth,
            minHeight: exports.dialogSizes.minHeight,
            resizeEnabled: !options.allowScrolling,
            onInitialized: function (e) {
                resizeCallbacks.add(resizeHandler);
            },
            onDisposing: function (e) {
                resizeCallbacks.remove(resizeHandler);
            },
            onResize: function (e) {
                var dataGrid = e.component.content().children().data('dxDataGrid');
                if (!!dataGrid) {
                    dataGrid.updateDimensions();
                }
            },
            onContentReady: function (args) {
                if (that.options.buttons) {
                    var buttons = document.createElement('div');
                    buttons.classList.add(exports.dialogClasses.buttons);
                    that.options.buttons.forEach(function (button) {
                        var element = document.createElement('div');
                        element.classList.add(button.className);
                        buttons.appendChild(element);
                        new button_1.default(element, {
                            text: button.name,
                            onClick: function () {
                                button.func();
                                if (button.hide)
                                    that.popupInstance.hide();
                            },
                            type: button.isDefault ? 'default' : 'normal'
                        });
                    });
                    _utils_1.$unwrap(that.popupInstance.bottomToolbar()).appendChild(buttons);
                    var buttonsDeltaWidth = -$(buttons).width();
                    for (var i = 0; i < buttons.children.length; i++) {
                        buttonsDeltaWidth += _render_helper_1.RenderHelper.getElementBoxFloat(buttons.children[i]).width;
                    }
                    if (buttonsDeltaWidth > 0) {
                        this.option('minWidth', this.option('minWidth') + Math.ceil(buttonsDeltaWidth));
                    }
                }
                if (!options.deferredRendering) {
                    that._renderPopupContent(args.component);
                }
            },
            onShowing: function (args) {
                if (options.deferredRendering) {
                    that._renderPopupContent(args.component);
                }
                var formWidth = that._setLabelsWidth();
                that.options.setActualState(formWidth);
                options.onShowing && options.onShowing(args);
            },
            onHidden: options.onHidden,
            onShown: function (args) {
                correctMaxSize();
                options.onShown && options.onShown(args);
            }
        };
        popupOptions['bottomTemplate'] = function () { };
        popupOptions['container'] = options.dialogContainer;
        var popup = document.createElement('div');
        if (!options.allowScrolling) {
            popup.classList.add(exports.dialogClasses.simpleDialog);
        }
        options.dialogContainer.appendChild(popup);
        that.popupInstance = new popup_1.default(popup, popupOptions);
    };
    dialogForm.prototype._renderPopupContent = function (component) {
        this.options.disposeContent();
        var content = this.options.renderContent(this.controlCreationCallbacks);
        if (this.scrollableContent) {
            this.scrollableContent.innerHTML = '';
            this.scrollableContent.appendChild(content);
            this.controlCreationCallbacks.fire(component);
        }
        else {
            _utils_1.$unwrap(this.popupInstance.content()).appendChild(content);
            this.controlCreationCallbacks.fire(component);
            if (this.options.allowScrolling) {
                this.scrollableContent = _render_helper_1.RenderHelper.wrapScrollable(_utils_1.$unwrap(this.popupInstance.content()), 'auto', 'both');
            }
        }
    };
    dialogForm.prototype._setLabelsWidth = function () {
        var that = this, width = 0, maxWidth = 400, minWidth = 100, leftOffset = 10, $div = undefined, $span = undefined, $label = undefined, $labelsContainer = $('<div/>', {
            'class': 'dx-dashboard-labels-container'
        }).appendTo($('.dx-dashboard-container')), $controlContainer, boxWidth = 0;
        $.each(_utils_1.$wrap(that.popupInstance.content()).find('.' + exports.dialogClasses.form).children(), function (index, div) {
            $div = $(div);
            $span = $('<span/>').append($div.find('.' + exports.dialogClasses.name).text());
            $labelsContainer.append($span).append('<br/>');
            $controlContainer = $div.find('.' + exports.dialogClasses.box);
            boxWidth = Math.max(boxWidth, $controlContainer.outerWidth());
        });
        $.each($labelsContainer.children(), function (index, label) {
            $label = $(label);
            width = Math.max(width, $label.width());
        });
        width = Math.max(minWidth, Math.min(maxWidth, width)) + leftOffset;
        $labelsContainer.remove();
        $('.' + exports.dialogClasses.name).css('width', width);
        return width + boxWidth + _utils_1.pxToNumber($('.' + exports.dialogClasses.name).css('margin-right')) + 2 * widgetMargin;
    };
    return dialogForm;
}());
exports.dialogForm = dialogForm;


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var themes_1 = __webpack_require__(253);
var $ = __webpack_require__(2);
var _utils_1 = __webpack_require__(3);
var _z_index_1 = __webpack_require__(57);
var _map_item_1 = __webpack_require__(346);
var geoPointMapItemBase = (function (_super) {
    __extends(geoPointMapItemBase, _super);
    function geoPointMapItemBase(container, options) {
        var _this = _super.call(this, container, options) || this;
        var that = _this;
        that.raiseTimerClusterizationDataRequest = function () {
            var clientState = that._getClientContext();
            if (clientState.clientSize.width > 0 && clientState.clientSize.height > 0) {
                that._onDataRequest();
            }
            clearTimeout(that.timer);
            that.timer = false;
        };
        return _this;
    }
    geoPointMapItemBase.prototype.initialDataRequestUnsafe = function () {
        this._raiseClusterizationDataRequest();
    };
    geoPointMapItemBase.prototype.selectTupleUnsafe = function (tuple, state) {
        var that = this;
        $.each(that._getMarkerLayers(), function (_, layer) {
            $.each(layer.getElements(), function (_, item) {
                if (item.attribute('latSelection') == tuple[0].Value[0] && item.attribute('lonSelection') == tuple[0].Value[1]) {
                    item.selected(state);
                }
            });
        });
    };
    geoPointMapItemBase.prototype._setSelectionUnsafe = function (values) {
        _super.prototype._setSelectionUnsafe.call(this, values);
        var that = this;
        that.clearSelection();
        $.each(that._getMarkerLayers(), function (_, layer) {
            $.each(layer.getElements(), function (_, item) {
                $.each(values, function (i, value) {
                    if (item.attribute('latSelection') == value[0] && item.attribute('lonSelection') == value[1]) {
                        item.selected(true);
                    }
                });
            });
        });
    };
    geoPointMapItemBase.prototype.renderContentUnsafe = function (element, changeExisting, afterRenderCallback) {
        var options = _utils_1.deepExtend(this._getMapViewerOptions(), this._getGeoPointMapViewerOptions());
        this._renderContentInternal(element, changeExisting, options);
        return false;
    };
    geoPointMapItemBase.prototype.renderPartialContentUnsafe = function () {
        var viewModel = this.options.ViewModel;
        this._updateMarkerLayers(viewModel);
    };
    geoPointMapItemBase.prototype.resetClientViewport = function () {
        _super.prototype.resetClientViewport.call(this);
        this._raiseClusterizationDataRequest();
    };
    geoPointMapItemBase.prototype.updateContentStateUnsafe = function () {
        var that = this, layers = that.mapViewer.option('layers');
        $.each(layers, function (_, layer) {
            if (layer.type === 'marker')
                layer.hoverEnabled = that._getCustomHoverEnabled();
        });
        this.mapViewer.option('layers', layers);
    };
    geoPointMapItemBase.prototype.forceUpdateClientState = function () {
        if (this.hasWidget) {
            this._onClientStateUpdate(this._getClientContext());
        }
    };
    geoPointMapItemBase.prototype._getGeoPointMapViewerOptions = function () {
        var that = this, viewModel = that.options.ViewModel;
        return {
            layers: that._configureLayers(viewModel),
            onClick: function (e) {
                if (e.target && e.target.layer.type === 'marker')
                    that._raiseItemClick(e.target);
            },
            legends: that._getLegends(viewModel),
            tooltip: {
                enabled: true,
                zIndex: _z_index_1.zIndex.dashboardItemTooltips,
                container: _utils_1.tooltipContainerSelector,
                customizeTooltip: function (arg) {
                    var dimensionText, measureText, mainText, resultHtml = '';
                    if (arg.layer.type === 'marker') {
                        dimensionText = arg.attribute('dimensionsTooltip');
                        mainText = arg.attribute('tooltip');
                        measureText = arg.attribute('measuresTooltip');
                        if (dimensionText)
                            resultHtml += '<tr><td>' + dimensionText + '</td></tr>';
                        if (mainText)
                            resultHtml += '<tr><td>' + mainText + (measureText ? '' : '</td></tr>');
                        if (measureText)
                            resultHtml += (mainText ? '<br>' : '</td></tr>') + measureText + '</td></tr>';
                    }
                    return {
                        html: (resultHtml != '') ? '<table align="left">' + resultHtml + '</table>' : ''
                    };
                }
            }
        };
    };
    geoPointMapItemBase.prototype._getMarkerLayers = function () {
    };
    geoPointMapItemBase.prototype._configureLayers = function (viewModel) {
        var mapDataSource = this._getMapDataSource(viewModel.MapItems, viewModel.ShapeTitleAttributeName);
        return this._configureGeometryLayers(mapDataSource, this._getArea(viewModel)).concat(this._configureMarkerLayers(viewModel));
    };
    geoPointMapItemBase.prototype._configureMarkerLayers = function (viewModel) {
    };
    geoPointMapItemBase.prototype._updateMarkerLayers = function (viewModel) {
        var layers = this.mapViewer.option('layers'), markerLayers = this._configureMarkerLayers(viewModel);
        $.each(markerLayers, function (index, layer) {
            layers[index + 1] = layer;
        });
        this.mapViewer.option('layers', layers);
    };
    geoPointMapItemBase.prototype._getMarker = function (viewModel, markerDataSource) {
        var style;
        return {
            customize: function (items) {
                $.each(items, function (_, item) {
                    item.selected(item.attribute('selected'));
                    style = { color: item.attribute('color') };
                    var size = item.attribute('size');
                    if (size)
                        style.size = size;
                    item.applySettings(style);
                });
            },
            selectionMode: 'multiple'
        };
    };
    geoPointMapItemBase.prototype._getArea = function (viewModel) {
        var that = this;
        return __assign({}, that._getLabelSettings(viewModel), { hoverEnabled: false, selectionMode: that._selectionMode() });
    };
    geoPointMapItemBase.prototype._getLegends = function (viewModel) {
        var legends = [], colorLegend = this._getColorLegend(viewModel), sizeLegend = this._getWeightLegend(viewModel);
        if (colorLegend) {
            legends.push(colorLegend);
        }
        if (sizeLegend) {
            legends.push(sizeLegend);
        }
        return legends;
    };
    geoPointMapItemBase.prototype._getColorLegend = function (viewModel) {
        var legend = this._getLegend(viewModel.ColorLegend);
        if (legend) {
            legend.source = { grouping: 'color' };
        }
        return legend;
    };
    geoPointMapItemBase.prototype._getWeightLegend = function (viewModel) {
        var legend = this._getLegend(viewModel.WeightedLegend);
        if (legend) {
            legend.source = { grouping: 'size' };
            legend.markerShape = 'circle';
            legend.markerColor = themes_1.getTheme(themes_1.currentTheme()).map['layer:area'].color;
            legend.orientation = 'vertical';
        }
        return legend;
    };
    geoPointMapItemBase.prototype._getMinMaxValues = function (markerDataSource) {
        var min, max;
        if (markerDataSource.length > 0) {
            for (var i = 0; i < markerDataSource.length; i++) {
                if (max === undefined || markerDataSource[i].attributes.value !== undefined && (markerDataSource[i].attributes.value > max)) {
                    max = markerDataSource[i].attributes.value;
                }
                if (min === undefined || markerDataSource[i].attributes.value !== undefined && (markerDataSource[i].attributes.value < min)) {
                    min = markerDataSource[i].attributes.value;
                }
            }
        }
        return {
            min: min,
            max: max
        };
    };
    geoPointMapItemBase.prototype._pointsCountTooltip = function (count) {
        return '<b>' + count + ' points</b>';
    };
    geoPointMapItemBase.prototype._getElementInteractionValue = function (element, viewModel) {
        return [element.attribute('latSelection'), element.attribute('lonSelection')];
    };
    geoPointMapItemBase.prototype._getDimensionsTooltipHtml = function (tooltipDimensions) {
        var values = [];
        if (tooltipDimensions.length === 1) {
            if (tooltipDimensions[0].values) {
                for (var i = 0; i < tooltipDimensions[0].values.length; i++) {
                    values.push('<b>' + this._getHtml(tooltipDimensions[0].values[i]) + '</b>');
                }
                return values.join('<br>');
            }
        }
        else {
            for (var i = 0; i < tooltipDimensions.length; i++) {
                var tooltipDimension = tooltipDimensions[i];
                if (tooltipDimension.values) {
                    values.push('<b>' + this._getHtml(tooltipDimension.caption) + '</b>');
                    for (var j = 0; j < tooltipDimension.values.length; j++) {
                        values.push(this._getHtml(tooltipDimension.values[j]));
                    }
                }
            }
            return values.join('<br>');
        }
        return '';
    };
    geoPointMapItemBase.prototype._getMeasuresTooltipHtml = function (tooltipMeasures) {
        var result = [];
        for (var i = 0; i < tooltipMeasures.length; i++) {
            result.push(this._getToolTip(tooltipMeasures[i].caption, tooltipMeasures[i].value));
        }
        return result.join('<br>');
    };
    geoPointMapItemBase.prototype._getDataPoint = function (element) {
        var that = this, viewModel = that.options.ViewModel;
        return {
            getValues: function () {
                return that._getElementInteractionValue(element, viewModel);
            },
            getMeasureIds: function () {
                return that._getDataPointMeasureIds();
            },
            getDeltaIds: function () {
                return [];
            }
        };
    };
    geoPointMapItemBase.prototype._getDataPointMeasureIds = function () {
        return [];
    };
    geoPointMapItemBase.prototype._updateContentSizeUnsafe = function () {
        _super.prototype._updateContentSizeUnsafe.call(this);
        if (!!this.mapViewer) {
            this._raiseClusterizationDataRequest();
        }
    };
    geoPointMapItemBase.prototype._raiseClusterizationDataRequest = function () {
        if (this.options.ViewModel.EnableClustering) {
            var clientContext = this._getClientContext();
            this._onClientStateUpdate(clientContext);
            if (clientContext.clientSize.width > 0 && clientContext.clientSize.height > 0) {
                this._onDataRequest();
            }
        }
    };
    geoPointMapItemBase.prototype._onViewPortChanged = function () {
        _super.prototype._onViewPortChanged.call(this);
        if (this.options.ViewModel.EnableClustering && !this._isLocked() && !this.timer) {
            this.timer = setTimeout(this.raiseTimerClusterizationDataRequest, 500);
        }
    };
    geoPointMapItemBase.prototype._onInitialExtentUnsafe = function (viewport) {
        _super.prototype._onInitialExtentUnsafe.call(this, viewport);
        this._raiseClusterizationDataRequest();
    };
    return geoPointMapItemBase;
}(_map_item_1.mapItem));
exports.geoPointMapItemBase = geoPointMapItemBase;


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var _css_class_names_1 = __webpack_require__(63);
var _card_painter_1 = __webpack_require__(564);
exports.newCardMeasurements = {
    margin: 3,
    padding: 10,
    borderWidth: 1
};
var newCardItem = (function () {
    function newCardItem(properties, cardIndex, viewerOptions) {
        this.properties = properties;
        this.cardPainter = new _card_painter_1.cardPainter(properties.dataAccessor, viewerOptions.controlContainer);
        this.clickHandler = viewerOptions.clickHandler;
        this.hoverHandler = viewerOptions.hoverHandler;
        this.index = cardIndex;
        this.tag = properties.tag;
    }
    newCardItem.prototype.dispose = function () {
        this.itemDiv.remove();
        this.itemDiv = null;
    };
    newCardItem.prototype.selected = function () {
        return this.properties.isSelected;
    };
    newCardItem.prototype.setHoverEnabledState = function (hoverEnabled) {
        this.properties.hoverEnabled = hoverEnabled;
    };
    newCardItem.prototype.draw = function (container, cardArrangements, styleSettingsProvider) {
        if (!this.itemDiv) {
            var element = this.cardPainter.draw(cardArrangements, this.properties.layout, styleSettingsProvider);
            this.itemDiv = element;
            container.append(element);
            this.afterDraw();
        }
        return this.itemDiv;
    };
    newCardItem.prototype.clearSelection = function () {
        this.properties.isSelected = false;
        if (this.itemDiv) {
            this.itemDiv.removeClass(_css_class_names_1.cssClassNames.selectedItem);
        }
    };
    newCardItem.prototype.select = function () {
        this.properties.isSelected = true;
        if (this.itemDiv) {
            this.itemDiv.addClass(_css_class_names_1.cssClassNames.selectedItem);
        }
    };
    newCardItem.prototype.hover = function (isHover) {
        if (this.properties.hoverEnabled) {
            if (isHover) {
                this.itemDiv.addClass(_css_class_names_1.cssClassNames.hoveredItem);
            }
            else {
                this.itemDiv.removeClass(_css_class_names_1.cssClassNames.hoveredItem);
            }
        }
    };
    newCardItem.prototype.setClickHandler = function () {
        var that = this;
        if ($.isFunction(that.clickHandler) && that.itemDiv) {
            that.itemDiv.off('click.cardItem');
            that.itemDiv.on('click.cardItem', function () {
                that.clickHandler.call(null, { item: that });
            });
        }
    };
    newCardItem.prototype.setHoverHandler = function () {
        var that = this;
        if (that.itemDiv) {
            that.itemDiv.mouseenter(function () {
                that.hover(true);
                if ($.isFunction(that.hoverHandler)) {
                    that.hoverHandler.call(null, { item: that, state: true });
                }
            }).mouseleave(function () {
                that.hover(false);
                if ($.isFunction(that.hoverHandler)) {
                    that.hoverHandler.call(null, { item: that, state: false });
                }
            });
        }
    };
    newCardItem.prototype.afterDraw = function () {
        this.setClickHandler();
        this.setHoverHandler();
        this.applyExtraStyles();
    };
    newCardItem.prototype.applyExtraStyles = function () {
        this.properties.isSelected ? this.select() : this.clearSelection();
    };
    return newCardItem;
}());
exports.newCardItem = newCardItem;


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var _dashboard_viewer_constants_1 = __webpack_require__(217);
function _syncLayoutHelper(sourceArray, destArray, addHandler) {
    if (sourceArray) {
        destArray(sourceArray.peek().map(function (item) { return addHandler(item); }));
        return sourceArray.subscribe(function (changes) {
            changes.sort(function (a, b) { return a.status === 'deleted' ? -1 : 1; }).forEach(function (arrayChange) {
                var change = arrayChange;
                if (change.status === 'added') {
                    destArray.splice(change.index, 0, addHandler(change.value));
                }
                else if (change.status === 'deleted') {
                    var itemToDelete = destArray.peek()[change.index];
                    destArray.remove(itemToDelete);
                    itemToDelete.dispose();
                }
            });
        }, null, 'arrayChange');
    }
    return undefined;
}
exports._syncLayoutHelper = _syncLayoutHelper;
function setHoverLocation(hoverLayoutItem, location, dropBehavior) {
    if (location === void 0) { location = null; }
    if (dropBehavior === void 0) { dropBehavior = 'InsertBesideGroup'; }
    if (hoverLayoutItem) {
        if (hoverLayoutItem.viewModel.hasItem()) {
            if (dropBehavior === 'InsertIntoGroup') {
                setHoverLocationCore(hoverLayoutItem, location);
            }
            else {
                hoverLayoutItem.dragOverLocation(location);
            }
        }
        else {
            setHoverLocationCore(hoverLayoutItem, location);
        }
    }
}
exports.setHoverLocation = setHoverLocation;
function setHoverLocationCore(hoverLayoutItem, location) {
    if (location === void 0) { location = null; }
    var items = hoverLayoutItem.items().filter(function (item) { return item.visible(); });
    if (!location || hoverLayoutItem.viewModel.orientation() === 'Horizontal' && (location === 'top' || location === 'bottom') ||
        hoverLayoutItem.viewModel.orientation() === 'Vertical' && (location === 'left' || location === 'right')) {
        items.forEach(function (child) { return setHoverLocation(child, location); });
    }
    else {
        var index = (location === 'top' || location === 'left') ? 0 : items.length - 1;
        setHoverLocation(items[index], location);
    }
}
exports.SplitterSize = 6;
exports.DashboardItemHeaderHeight = 34;
exports.MinWeight = 0.00001;
var LayoutItem = (function () {
    function LayoutItem(viewModel, parent) {
        var _this = this;
        this.viewModel = viewModel;
        this._isUpdating = ko.observable(false);
        this._constraints = null;
        this._width = ko.observable(800);
        this._height = ko.observable(600);
        this._subscriptions = [];
        this.setConstraints = function (constraints) {
            var correctSize = function (value, addition) {
                return (Number.MAX_VALUE - value >= addition) ? value + addition : Number.MAX_VALUE;
            };
            _this._constraints.min.width(correctSize(constraints.min.width, exports.SplitterSize));
            _this._constraints.min.height(correctSize(constraints.min.height, exports.SplitterSize));
            _this._constraints.max.width(correctSize(constraints.max.width, exports.SplitterSize));
            _this._constraints.max.height(correctSize(constraints.max.height, exports.SplitterSize));
        };
        this.items = ko.observableArray([]);
        this.resizeHandles = ko.observable('none');
        this.isSelected = ko.observable(false);
        this.dragOverLocation = ko.observable();
        this.itemStyle = ko.computed(function () {
            var result = '';
            if (!!_this.dragOverLocation()) {
                result += ' dx-drag-over-' + _this.dragOverLocation();
            }
            if (_this.isSelected()) {
                result += ' dx-layout-selected';
            }
            return result;
        });
        this.coverClickHandler = function (e) {
            _this.onEvent && _this.onEvent(_this, 'click');
        };
        this.coverMouseOverHandler = function (e) {
            _this.onEvent && _this.onEvent(_this, 'mouseover');
        };
        this.resizeStarted = function () {
            _this.onEvent && _this.onEvent(_this, 'resize-started');
        };
        this.resizeCompleted = function () {
            _this.onEvent && _this.onEvent(_this, 'resize-completed');
        };
        this.getContext = function () {
            return _this.onEvent && _this.onEvent(_this, 'get-context');
        };
        this.getLocalContext = function () {
            return _this.onEvent && _this.onEvent(_this, 'get-local-context');
        };
        this.verticalPaddings = ko.observable(0);
        this.horizontalPaddings = ko.observable(0);
        this.repaintCallbacks = $.Callbacks();
        this.sizeController = {
            getWidth: function () { return _this.containerWidth(); },
            getHeight: function () { return _this.containerHeight(); },
            requestRepaint: this.repaintCallbacks,
            visible: this.visible,
            setConstraints: this.setConstraints
        };
        var self = this;
        this._parent = ko.observable(parent);
        if (!!this._parent()) {
            this.isDesignMode = this._parent().isDesignMode;
            this.isLayoutReady = this._parent().isLayoutReady;
        }
        else {
            this.isDesignMode = ko.observable(false);
            this.isLayoutReady = ko.observable(true);
        }
        this._constraints = {
            min: {
                width: ko.observable(viewModel.hasItem() ? _dashboard_viewer_constants_1.MIN_PANE_WIDTH : 0),
                height: ko.observable(viewModel.hasItem() ? _dashboard_viewer_constants_1.MIN_PANE_HEIGHT : 0)
            },
            max: {
                width: ko.observable(Number.MAX_VALUE),
                height: ko.observable(Number.MAX_VALUE)
            }
        };
        var visible = ko.observable(true);
        this.visible = ko.computed({
            read: function () {
                var atLeastOneChildVisible = _this.items().reduce(function (res, item) { return res || item.visible(); }, _this.items().length === 0 || !!_this.viewModel.hasItem());
                return atLeastOneChildVisible && visible();
            },
            write: function (val) {
                visible(val);
            }
        });
        this.minWidth = ko.computed(function () {
            var result = _this._constraints.min.width();
            if (_this.items().length > 0) {
                if (_this.viewModel.orientation() === 'Horizontal') {
                    var minFromChildren = _this.items().reduce(function (total, item) { return total + item.minWidth(); }, 0);
                    result = minFromChildren > result ? minFromChildren : result;
                }
                else {
                    _this.items().forEach(function (item) {
                        if (item.minWidth() > result) {
                            result = item.minWidth();
                        }
                    });
                }
            }
            return result + _this.horizontalPaddings();
        });
        this.minHeight = ko.computed(function () {
            var result = _this._constraints.min.height();
            if (_this.items().length > 0) {
                if (_this.viewModel.orientation() === 'Vertical') {
                    var minFromChildren = _this.items().reduce(function (total, item) { return total + item.minHeight(); }, 0);
                    result = Math.max(minFromChildren, result);
                }
                else {
                    _this.items().forEach(function (item) {
                        if (item.minHeight() > result) {
                            result = item.minHeight();
                        }
                    });
                }
            }
            return result + _this.verticalPaddings();
        });
        this.maxWidth = ko.computed(function () {
            return Math.min(Number.MAX_VALUE, _this._constraints.max.width());
        });
        this.maxHeight = ko.computed(function () {
            var result = _this._constraints.max.height();
            if (_this.items().length > 0 && !_this.viewModel.ignoreChildMaxHeight) {
                if (_this.viewModel.orientation() === 'Vertical') {
                    if (_this.items().some(function (item) { return item.maxHeight() === Number.MAX_VALUE; })) {
                        result = Number.MAX_VALUE;
                    }
                    else {
                        result = _this.items().reduce(function (total, item) { return total + item.maxHeight(); }, 0);
                    }
                }
                else {
                    result = _this.items().reduce(function (total, item) { return Math.max(total, item.maxHeight()); }, 0);
                }
            }
            return Math.min(Number.MAX_VALUE, result + _this.verticalPaddings());
        });
        this.width = ko.computed({
            read: function () {
                return _this._width() > _this.minWidth() ? _this._width() : _this.minWidth();
            },
            write: function (val) {
                if (_this._parent()) {
                    var newWeight = _this.viewModel.weight() * (val / _this._width() || 1);
                    _this._changeWeight(newWeight);
                }
                else {
                    _this._width(val);
                }
            }
        });
        this.height = ko.computed({
            read: function () {
                return _this._height() > _this.minHeight() ? _this._height() : _this.minHeight();
            },
            write: function (val) {
                if (_this._parent()) {
                    var newWeight = _this.viewModel.weight() * (val / _this._height() || 1);
                    _this._changeWeight(newWeight);
                }
                else {
                    _this._height(val);
                }
            }
        });
        this.contentWidth = ko.computed(function () { return _this.width() - _this.horizontalPaddings(); });
        this.contentHeight = ko.computed(function () { return _this.height() - _this.verticalPaddings(); });
        this.containerWidth = ko.computed(function () { return _this.width() - exports.SplitterSize; });
        this.containerHeight = ko.computed(function () { return _this.height() - exports.SplitterSize; });
        this.areChildrenSelected = ko.pureComputed(function () {
            var result = !!_this.viewModel.hasItem() && !!_this.visible() && _this.isSelected();
            _this.items().forEach(function (layoutItem) {
                result = result || layoutItem.areChildrenSelected();
            });
            return result;
        });
        this._subscriptions.push(_syncLayoutHelper(viewModel.visibleItems, this.items, function (model) { return new LayoutItem(model._createViewModel(), self); }));
        this._subscriptions.push(ko.computed(function () {
            if (!_this._isUpdating()) {
                _this._updateChildrenSize(_this.items().filter(function (item) { return item.visible(); }));
                _this._updateChildrenResizeHandles(_this.items());
            }
        }));
        this._subscriptions.push(ko.computed(function () {
            var isReady = _this.isLayoutReady(), width = _this.width(), height = _this.height();
            if (isReady) {
                _this.repaintCallbacks.fire();
            }
        }));
        var placeholderViewModel = this.viewModel.getPlaceholder && this.viewModel.getPlaceholder();
        if (placeholderViewModel) {
            this.placeholderItem = new LayoutItem(placeholderViewModel, this);
        }
        this._subscriptions.push(this.visible, this.minWidth, this.minHeight, this.maxWidth, this.maxHeight, this.width, this.height, this.areChildrenSelected);
    }
    LayoutItem.findLargestItem = function (layoutItem) {
        var _this = this;
        if (layoutItem.viewModel.hasItem()) {
            return { maxSquare: layoutItem.width() * layoutItem.height(), item: layoutItem };
        }
        var result = { maxSquare: 0, item: null };
        layoutItem.items().forEach(function (item) {
            var itemMaxSquare = _this.findLargestItem(item);
            if (result.maxSquare < itemMaxSquare.maxSquare) {
                result = itemMaxSquare;
            }
        });
        return result;
    };
    LayoutItem.prototype._changeWeight = function (newWeight) {
        this._parent() && this._parent()._isUpdating(true);
        try {
            this._changeWeightCore(newWeight);
        }
        finally {
            this._parent() && this._parent()._isUpdating(false);
        }
    };
    LayoutItem.prototype._changeWeightCore = function (newWeight) {
        var selfIndex = this._parent().items().indexOf(this);
        var neighbourItem = this._parent().items()[selfIndex + 1];
        var newNeighbourWeight = neighbourItem.viewModel.weight() - (newWeight - this.viewModel.weight());
        neighbourItem.viewModel.weight(this._correntWeight(newNeighbourWeight));
        this.viewModel.weight(this._correntWeight(newWeight));
    };
    LayoutItem.prototype._correntWeight = function (weight) {
        return weight < exports.MinWeight ? exports.MinWeight : weight;
    };
    LayoutItem.prototype._safeSetWidth = function (itemWidth) {
        var computedWidth = itemWidth;
        if (computedWidth < this.minWidth()) {
            computedWidth = this.minWidth();
        }
        if (computedWidth > this.maxWidth()) {
            computedWidth = this.maxWidth();
        }
        this._width(computedWidth);
    };
    LayoutItem.prototype._safeSetHeight = function (itemHeight) {
        var computedHeight = itemHeight;
        if (computedHeight < this.minHeight()) {
            computedHeight = this.minHeight();
        }
        if (computedHeight > this.maxHeight()) {
            computedHeight = this.maxHeight();
        }
        this._height(computedHeight);
    };
    LayoutItem.prototype._updateChildrenSize = function (items) {
        var _this = this;
        if (items.length > 0) {
            var totalWeight = items.reduce(function (total, item) { return total + item.viewModel.weight(); }, 0);
            var undistributedDelta = 0;
            if (this.viewModel.orientation() === 'Horizontal') {
                items.forEach(function (item) {
                    item._height(_this.contentHeight());
                    var itemDimension = _this.contentWidth() * item.viewModel.weight() / totalWeight;
                    item._safeSetWidth(itemDimension);
                    undistributedDelta += item._width.peek() - itemDimension;
                });
                items.reduceRight(function (_, item) {
                    if (undistributedDelta !== 0) {
                        var itemDimenstion = item._width.peek();
                        item._safeSetWidth(itemDimenstion - undistributedDelta);
                        undistributedDelta += item._width.peek() - itemDimenstion;
                    }
                }, {});
                if (undistributedDelta < 0) {
                    items[items.length - 1]._width(items[items.length - 1]._width.peek() - undistributedDelta);
                }
            }
            else {
                items.forEach(function (item) {
                    item._width(_this.contentWidth());
                    var itemDimension = _this.contentHeight() * item.viewModel.weight() / totalWeight;
                    item._safeSetHeight(itemDimension);
                    undistributedDelta += item._height.peek() - itemDimension;
                });
                items.reduceRight(function (_, item) {
                    if (undistributedDelta !== 0) {
                        var itemDimenstion = item._height.peek();
                        item._safeSetHeight(itemDimenstion - undistributedDelta);
                        undistributedDelta += item._height.peek() - itemDimenstion;
                    }
                }, {});
                if (undistributedDelta < 0) {
                    items[items.length - 1]._height(items[items.length - 1]._height.peek() - undistributedDelta);
                }
            }
        }
    };
    LayoutItem.prototype._updateChildrenResizeHandles = function (items) {
        var itemsCount = items.length;
        if (itemsCount > 0) {
            var handle = this.viewModel.orientation() === 'Horizontal' ? 'e' : 's';
            items.forEach(function (item, index) {
                item.resizeHandles(index < itemsCount - 1 ? handle : 'none');
            });
        }
    };
    LayoutItem.prototype.dispose = function () {
        this._parent(null);
        if (this.placeholderItem) {
            this.placeholderItem.dispose();
            this.placeholderItem = null;
        }
        this.repaintCallbacks.empty();
        this.items().forEach(function (i) { return i.dispose(); });
        this._subscriptions.forEach(function (subscription) { return subscription && subscription.dispose(); });
        this._subscriptions = [];
    };
    LayoutItem.prototype.isValidWidth = function (val) {
        if (this._parent()) {
            if (val < this.minWidth() || val > this.maxWidth()) {
                return false;
            }
            var selfIndex = this._parent().items().indexOf(this);
            if (selfIndex < this._parent().items().length - 1) {
                var neighbourItem = this._parent().items()[selfIndex + 1];
                var neighbourNewWidth = neighbourItem.width() - val + this.width();
                if (neighbourNewWidth < neighbourItem.minWidth() || neighbourNewWidth > neighbourItem.maxWidth()) {
                    return false;
                }
            }
        }
        return this.minWidth() !== this.maxWidth();
    };
    LayoutItem.prototype.isValidHeight = function (val) {
        if (this._parent()) {
            if (val < this.minHeight() || val > this.maxHeight()) {
                return false;
            }
            var selfIndex = this._parent().items().indexOf(this);
            if (selfIndex < this._parent().items().length - 1) {
                var neighbourItem = this._parent().items()[selfIndex + 1];
                var neighbourNewHeight = neighbourItem.height() - val + this.height();
                if (neighbourNewHeight < neighbourItem.minHeight() || neighbourNewHeight > neighbourItem.maxHeight()) {
                    return false;
                }
            }
        }
        return this.minHeight() !== this.maxHeight();
    };
    LayoutItem.prototype.getSelectionParentsList = function (location) {
        var current = this;
        var parent = current._parent();
        var result = [{ node: current, dropBehavior: 'InsertBesideGroup' }];
        var orientation = !!parent && parent.viewModel.orientation();
        do {
            if (!!parent && !parent.viewModel.hasItem()) {
                var items = parent.items().filter(function (item) { return item.visible(); });
                var itemIndex = items.indexOf(current);
                var firstItemIndex = 0;
                var lastItemIndex = items.length - 1;
                if (parent.viewModel.orientation() === 'Horizontal' && (location === 'left' || location === 'right')) {
                    if (items.length > 1 &&
                        (location === 'left' && itemIndex > firstItemIndex || location === 'right' && itemIndex < lastItemIndex
                            || location === 'left' && itemIndex === lastItemIndex || location === 'right' && itemIndex === firstItemIndex)) {
                        return result;
                    }
                    if (location === 'left' && itemIndex === firstItemIndex || location === 'right' && itemIndex === lastItemIndex) {
                        orientation = this._inverseOrientation(parent.viewModel.orientation());
                    }
                }
                if (parent.viewModel.orientation() === 'Vertical' && (location === 'top' || location === 'bottom')) {
                    if (items.length > 1 &&
                        (location === 'top' && itemIndex > firstItemIndex || location === 'bottom' && itemIndex < lastItemIndex
                            || location === 'top' && itemIndex === lastItemIndex || location === 'bottom' && itemIndex === firstItemIndex)) {
                        return result;
                    }
                    if (location === 'top' && itemIndex === firstItemIndex || location === 'bottom' && itemIndex === lastItemIndex) {
                        orientation = this._inverseOrientation(parent.viewModel.orientation());
                    }
                }
            }
            current = parent;
            parent = current && current._parent();
            if (!!current && !current.viewModel.hasItem() && orientation == current.viewModel.orientation()) {
                result.push({ node: current, dropBehavior: 'InsertBesideGroup' });
            }
            if (!!current && current.viewModel.hasItem()
                && current.viewModel.orientation() !== this._getRequiredOrientationByLocation(location)) {
                result.push({ node: current, dropBehavior: 'InsertIntoGroup' });
            }
        } while (!!current && !!parent && !current.viewModel.hasItem());
        return result;
    };
    LayoutItem.prototype._getRequiredOrientationByLocation = function (location) {
        return (location === 'left' || location === 'right') ? 'Horizontal' : 'Vertical';
    };
    LayoutItem.prototype._inverseOrientation = function (orientation) {
        return orientation === 'Horizontal' ? 'Vertical' : 'Horizontal';
    };
    LayoutItem.prototype.findLayoutItem = function (criteria) {
        var result = undefined;
        if (criteria(this)) {
            result = this;
        }
        if (!result) {
            this.items.peek().forEach(function (item) {
                result = item.findLayoutItem(criteria) || result;
            });
        }
        return result;
    };
    LayoutItem.prototype.findLayoutItemByItemModel = function (itemModel) {
        return this.findLayoutItem(function (item) {
            return item.viewModel.model === itemModel.model;
        });
    };
    LayoutItem.prototype.onEvent = function (item, event) {
        return this._parent() && this._parent().onEvent && this._parent().onEvent(item, event);
    };
    LayoutItem.prototype.updateSize = function (width, height) {
        try {
            this.isLayoutReady(false);
            this.width(width);
            this.height(height);
        }
        finally {
            this.isLayoutReady(true);
        }
    };
    LayoutItem.prototype.create = function (modelItemJson, location, insertBehavior) {
        var rootItem = this.getRoot();
        var createdItemViewModel = this.viewModel.create(modelItemJson, location, insertBehavior);
        var createdLayoutItem = rootItem.findLayoutItemByItemModel(createdItemViewModel);
        createdLayoutItem && createdLayoutItem.coverClickHandler(null);
        return createdLayoutItem;
    };
    LayoutItem.prototype.moveTo = function (layoutNode, location, insertBehavior) {
        var rootItem = this.getRoot();
        this.viewModel.moveTo(layoutNode.viewModel, location, insertBehavior);
        var createdLayoutItem = rootItem.findLayoutItemByItemModel(this.viewModel);
        createdLayoutItem && createdLayoutItem.coverClickHandler(null);
        return createdLayoutItem;
    };
    LayoutItem.prototype.delete = function () {
        this.viewModel.delete();
        this._parent(null);
    };
    LayoutItem.prototype.getRoot = function () {
        var root = this;
        while (root._parent()) {
            root = root._parent();
        }
        return root;
    };
    LayoutItem.prototype.canAttach = function (something) {
        return !!this._parent() && this.viewModel.canAttach(something);
    };
    LayoutItem.prototype.getPlaceholder = function () {
        return this.placeholderItem;
    };
    return LayoutItem;
}());
exports.LayoutItem = LayoutItem;
ko.components.register('dx-layout-item', {
    viewModel: function (params) {
        this.layoutItem = ko.computed(function () { return ko.unwrap(params.layoutItem); });
    },
    template: { element: 'dx-layout-item' }
});


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var _utils_1 = __webpack_require__(3);
var disposable_object_1 = __webpack_require__(11);
var _dashboard_title_toolbar_adapter_1 = __webpack_require__(337);
exports.maxFilterValuesCount = 20;
function masterFilterValues(dashboard) {
    if (dashboard && dashboard.title.visible() && dashboard.title.includeMasterFilter()) {
        var newMasterFilterValues = dashboard
            ._masterFilterItems()
            .reduce(function (acc, item) { return acc.concat(item._getDisplayFilterValues(exports.maxFilterValuesCount)); }, []);
        return newMasterFilterValues.length ? newMasterFilterValues : null;
    }
    return null;
}
exports.masterFilterValues = masterFilterValues;
var DashboardTitleModel = (function (_super) {
    __extends(DashboardTitleModel, _super);
    function DashboardTitleModel(context, dashboard, customizeToolbarOptions) {
        var _this = _super.call(this) || this;
        _this.context = context;
        _this.dashboard = dashboard;
        _this.customizeToolbarOptions = customizeToolbarOptions;
        _this.onUpdated = $.Callbacks();
        _this.toolbarOptions = ko.observable(null);
        _this.parametersExtension = context && context.parametersExtension || ko.computed(function () { return null; });
        _this.exportExtension = context && context.exportExtension || ko.computed(function () { return null; });
        _this.viewerApiExtension = context && context.viewerApiExtension || ko.computed(function () { return null; });
        _this.viewerApiExtension() && _this.viewerApiExtension()._title(_this);
        var showParametersButton = ko.computed(function () {
            return dashboard && dashboard.parameters().some(function (param) { return param.parameterVisible(); }) &&
                (_this.parametersExtension() && _utils_1.type.isDefined(_this.parametersExtension().showDialogButton()) ? _this.parametersExtension().showDialogButton() : false);
        });
        _this.allowShowExportDialog = ko.computed(function () {
            return _this.exportExtension() && _this.exportExtension().allowExportDashboard;
        });
        _this.masterFilterValues = ko.computed(function () {
            return masterFilterValues(dashboard);
        });
        _this.showTitle = ko.computed(function () {
            return dashboard ? dashboard.title.visible() : false;
        });
        _this.viewModel = ko.computed(function () {
            var titleModel = dashboard ? dashboard.title : undefined;
            if (titleModel && titleModel.visible()) {
                var imageViewModel = void 0;
                if (titleModel.image64()) {
                    imageViewModel = {
                        SourceBase64String: titleModel.image64(),
                        MimeType: 'image/png'
                    };
                }
                else if (titleModel.url()) {
                    imageViewModel = {
                        Url: titleModel.url()
                    };
                }
                var viewModel = {
                    Text: titleModel.text(),
                    Visible: titleModel.visible(),
                    ShowParametersButton: showParametersButton(),
                    IncludeMasterFilterValues: titleModel.includeMasterFilter(),
                    LayoutModel: {
                        Alignment: titleModel.alignment(),
                        ImageViewModel: imageViewModel
                    },
                };
                return viewModel;
            }
            return null;
        });
        _this.update();
        _this.toDispose(_this.viewModel.subscribe(function (newValue) { return _this.update(); }));
        _this.toDispose(_this.masterFilterValues.subscribe(function (newValue) { return _this.update(); }));
        _this.toDispose(_this.masterFilterValues);
        _this.toDispose(_this.showTitle);
        _this.toDispose(_this.viewModel);
        _this.toDispose(_this.allowShowExportDialog);
        _this.toDispose(showParametersButton);
        return _this;
    }
    DashboardTitleModel.prototype.update = function () {
        var _this = this;
        var showExportDialog = function (format) {
            _this.exportExtension() && _this.exportExtension().showExportDashboardDialog(format);
        };
        var showParametersDialog = function () {
            _this.parametersExtension() && _this.parametersExtension().show();
        };
        var options = _dashboard_title_toolbar_adapter_1.DashboardTitleToolbarAdapter.getTitleOptions(this.viewModel(), this.masterFilterValues(), showExportDialog, showParametersDialog, this.allowShowExportDialog());
        if (this.customizeToolbarOptions) {
            this.customizeToolbarOptions(options);
        }
        this._raiseUpdated(options);
        this.toolbarOptions({
            centerAligned: this.viewModel() ? this.viewModel().LayoutModel.Alignment === 'Center' : false,
            toolbarOptions: {
                staticItems: options.contentItems,
                actionItems: options.actionItems,
                navigationItems: options.navigationItems,
                stateItems: []
            },
        });
    };
    DashboardTitleModel.prototype.dispose = function () {
        this.viewerApiExtension() && this.viewerApiExtension()._title(null);
        _super.prototype.dispose.call(this);
    };
    DashboardTitleModel.prototype._raiseUpdated = function (option) {
        this.onUpdated.fire(option);
    };
    return DashboardTitleModel;
}(disposable_object_1.DisposableObject));
exports.DashboardTitleModel = DashboardTitleModel;


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var DashboardItemContext = (function () {
    function DashboardItemContext(options) {
        if (options === void 0) { options = {}; }
        this.addContextToolbarItems = $.Callbacks();
        this.viewerItemCreated = $.Callbacks();
        this.viewerItemDispose = $.Callbacks();
        this.beforeApplyViewerItemOptions = $.Callbacks();
        this.captionToolbarCreated = $.Callbacks();
        options.addContextToolbarItems && this.addContextToolbarItems.add(options.addContextToolbarItems);
        options.viewerItemCreated && this.viewerItemCreated.add(options.viewerItemCreated);
        options.viewerItemDispose && this.viewerItemDispose.add(options.viewerItemDispose);
        options.beforeApplyViewerItemOptions && this.beforeApplyViewerItemOptions.add(options.beforeApplyViewerItemOptions);
        this.createCaptionToolbar = options.createCaptionToolbar;
        this.itemFactory = options.itemFactory;
        this.ignoreDesignMode = options.ignoreDesignMode;
        this.disabled = options.disabled;
        this.visualMode = options.visualMode;
        this.boundaryContainer = options.boundaryContainer;
        this.itemCreatingType = options.itemCreatingType;
    }
    return DashboardItemContext;
}());
exports.DashboardItemContext = DashboardItemContext;


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var _parameters_helper_1 = __webpack_require__(55);
var _dx_designer_integration_1 = __webpack_require__(365);
exports.createItemFilterOptions = function (expression, item, _dataSourceBrowser, title) {
    return ko.computed(function () {
        var options = new dx_analytics_core_1.default.Analytics.Widgets.FilterStringOptions(expression, undefined, undefined, title);
        options.popupContainer = '.dx-dashboard-widget-container';
        options.helper.aceTheme = _dx_designer_integration_1.getAceTheme();
        if (_dataSourceBrowser && _dataSourceBrowser.parameters) {
            options.helper.parameters(_dataSourceBrowser.parameters().map(function (parameter) {
                var shortTypeName = parameter.type().split(',')[0];
                return { displayName: parameter.name(), name: parameter.name(), specifics: _parameters_helper_1.ParameterHelper.typeValues.filter(function (typeDescription) { return typeDescription.value === shortTypeName; })[0].specifics || 'string' };
            }));
            options.helper.canChoiceParameters = true;
        }
        if (item) {
            options['item'] = item;
        }
        return options;
    });
};


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dateLocalization = __webpack_require__(235);
var $ = __webpack_require__(2);
var _data_source_browser_1 = __webpack_require__(40);
var special_values_1 = __webpack_require__(39);
var _formatter_1 = __webpack_require__(25);
var data_item_1 = __webpack_require__(8);
var dimension_1 = __webpack_require__(43);
var _data_field_1 = __webpack_require__(14);
var _display_name_provider_1 = __webpack_require__(24);
exports.getRealDimensionType = function (dimension, dataField) {
    return exports.isCategoricalDateTime(dimension, dataField) ? 'Integer' : dataField.fieldType();
};
exports.isCategoricalDateTime = function (dimension, dataField) {
    return dataField.fieldType() === 'DateTime' && ['Year', 'Quarter', 'Month', 'Day', 'Hour', 'Minute', 'Second',
        'DayOfYear', 'DayOfWeek', 'WeekOfYear', 'WeekOfMonth'].indexOf(dimension.dateTimeGroupInterval() || 'Year') !== -1;
};
var ItemFilterItemsProvider = (function () {
    function ItemFilterItemsProvider(dataItemValuesProvider, dataFieldProvider, parameters, dataDashboardItem, filterPredicate) {
        if (filterPredicate === void 0) { filterPredicate = function () { return true; }; }
        this.dataItemValuesProvider = dataItemValuesProvider;
        this.dataFieldProvider = dataFieldProvider;
        this.parameters = parameters;
        this.dataDashboardItem = dataDashboardItem;
        this.filterPredicate = filterPredicate;
    }
    ItemFilterItemsProvider.formatValue = function (value, dataItem, fieldTypeName) {
        var getFormatViewModel = function (fieldTypeName) {
            var fieldType = data_item_1.DataItem.typesMap[fieldTypeName];
            switch (fieldType) {
                case data_item_1.DataItem.typesMap.DateTime:
                    return dataItem.dateTimeFormat._getViewModel(dataItem instanceof dimension_1.Dimension ? dataItem.dateTimeGroupInterval() : undefined);
                case data_item_1.DataItem.typesMap.Decimal:
                case data_item_1.DataItem.typesMap.Double:
                case data_item_1.DataItem.typesMap.Integer:
                    return dataItem.numericFormat._getViewModel();
                default:
                    return undefined;
            }
        };
        var formatViewModel = getFormatViewModel(fieldTypeName);
        return !!formatViewModel ? _formatter_1.format(value, formatViewModel) : value;
    };
    ItemFilterItemsProvider.prototype.getItems = function (pathRequest) {
        var _this = this;
        var deferred = $.Deferred();
        if (pathRequest.fullPath === 'Parameters') {
            deferred.resolve(this.parameters()
                .map(function (parameter) {
                return {
                    displayName: parameter.name(),
                    name: parameter.name()
                };
            }));
        }
        else {
            this._getDashboardItemDataFields().done(function (dataFields) {
                deferred.resolve(_this.dataDashboardItem
                    ._uniqueDataItems
                    .filter(_this.filterPredicate)
                    .map(function (dataItem) {
                    var dataField = dataFields.filter(function (dataField) { return dataField.dataMember() === dataItem.dataMember(); })[0];
                    var itemType = dataItem instanceof dimension_1.Dimension ? exports.getRealDimensionType(dataItem, dataField) : dataField.fieldType();
                    return {
                        displayName: _display_name_provider_1.getDataItemDisplayName(_this.dataFieldProvider, _this.dataDashboardItem, dataItem),
                        name: dataItem.uniqueName(),
                        specifics: data_item_1.DataItem.typesMap[itemType] || 'string'
                    };
                }));
            });
        }
        return deferred.promise();
    };
    ItemFilterItemsProvider.prototype.getValues = function (pathRequest) {
        var _this = this;
        var dataItem = this.dataDashboardItem._dimensions.filter(function (di) { return di.uniqueName() === pathRequest.path; })[0];
        var def = $.Deferred();
        if (!dataItem) {
            return def.resolve([]).promise();
        }
        this._getDashboardItemDataFields()
            .done(function (dataFields) {
            var dataField = dataFields.filter(function (dataField) { return dataField.dataMember() === dataItem.dataMember(); })[0];
            if (dataItem.dateTimeGroupInterval() === 'DayOfWeek' && dataField.fieldType() === 'DateTime') {
                def.resolve([0, 1, 2, 3, 4, 5, 6].map(function (index) { return ({
                    value: index,
                    display: dateLocalization.getDayNames()[index]
                }); }));
            }
            else if (_data_field_1.IsNumeric(dataField.fieldType()) || _data_field_1.IsTextual(dataField.fieldType()) || exports.isCategoricalDateTime(dataItem, dataField) ||
                dataItem.dateTimeGroupInterval() === 'WeekYear') {
                _this.dataItemValuesProvider.getDimensionUniqueValues(_this.dataDashboardItem.dataSource(), _this.dataDashboardItem.dataMember(), dataItem)
                    .done(function (values) {
                    def.resolve((values || [])
                        .filter(function (value) { return value !== special_values_1.specialValues.nullValueGuid; })
                        .map(function (value) {
                        if (dataField.fieldType() === 'Text') {
                            return value;
                        }
                        else {
                            return {
                                value: value,
                                display: ItemFilterItemsProvider.formatValue(value, dataItem, dataField.fieldType())
                            };
                        }
                    }));
                });
            }
            else {
                return def.resolve([]);
            }
        });
        return def.promise();
    };
    ItemFilterItemsProvider.prototype._getDashboardItemDataFields = function () {
        var fieldsNames = this.dataDashboardItem
            ._uniqueDataItems
            .filter(this.filterPredicate)
            .map(function (dataItem) { return dataItem.dataMember(); });
        return _data_source_browser_1.getDataFields(fieldsNames, this.dataDashboardItem.dataSource(), this.dataDashboardItem.dataMember(), this.dataFieldProvider);
    };
    return ItemFilterItemsProvider;
}());
exports.ItemFilterItemsProvider = ItemFilterItemsProvider;


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var _data_source_browser_1 = __webpack_require__(40);
var data_item_1 = __webpack_require__(8);
var olap_data_source_1 = __webpack_require__(139);
var ExpressionEditorItemsProvider = (function () {
    function ExpressionEditorItemsProvider(dataFieldsProvider, dataSourceProvider, parameters, dataSourceName, dataMember, filterPredicate) {
        if (filterPredicate === void 0) { filterPredicate = function () { return true; }; }
        this.dataFieldsProvider = dataFieldsProvider;
        this.dataSourceProvider = dataSourceProvider;
        this.parameters = parameters;
        this.dataSourceName = dataSourceName;
        this.dataMember = dataMember;
        this.filterPredicate = filterPredicate;
    }
    ExpressionEditorItemsProvider.prototype.getItems = function (pathRequest) {
        var _this = this;
        var items = [], fullPath = pathRequest.fullPath && pathRequest.fullPath.toLowerCase() || '';
        if (fullPath === '') {
            items = [{
                    displayName: 'Parameters',
                    name: 'Parameters',
                    isList: true,
                    specifics: 'parameters'
                }];
        }
        else if (fullPath === 'parameters') {
            items = (this.parameters && this.parameters || []).map(function (parameter) {
                return {
                    displayName: parameter.name(),
                    name: parameter.name(),
                    isList: false,
                    specifics: data_item_1.DataItem.typesMap[parameter.type().replace('System.', '')]
                };
            });
        }
        else {
            var deferred = $.Deferred(), fieldPath = pathRequest.path, dataSource = this.dataSourceProvider.findDataSource(this.dataSourceName());
            if (!!this.dataMember) {
                fieldPath = _data_source_browser_1.trimLeadingPathElement(fieldPath, this.dataMember());
            }
            this.dataFieldsProvider.getDataFieldsArray(this.dataSourceName(), this.dataMember(), fieldPath, _data_source_browser_1.isNonCollectionDataField)
                .done(function (dataFields) {
                items = dataFields.filter(_this.filterPredicate).map(function (field) {
                    return {
                        displayName: ko.unwrap(field.displayName),
                        name: dataSource instanceof olap_data_source_1.OlapDataSource ? field.dataMember() : field.name(),
                        field: field,
                        isList: !field.isDataFieldNode(),
                        hasItems: !field.isDataFieldNode(),
                        specifics: field.isDataFieldNode() ? data_item_1.DataItem.typesMap[field.fieldType()] || 'Default' : field.isList && field.isList() ? 'List' : 'Default'
                    };
                });
                deferred.resolve(items);
            });
            return deferred.promise();
        }
        return $.Deferred().resolve(items).promise();
    };
    return ExpressionEditorItemsProvider;
}());
exports.ExpressionEditorItemsProvider = ExpressionEditorItemsProvider;


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var data_item_1 = __webpack_require__(8);
var ParametersItemProvider = (function () {
    function ParametersItemProvider(dashboardParameters) {
        if (dashboardParameters === void 0) { dashboardParameters = []; }
        this.dashboardParameters = dashboardParameters;
    }
    ParametersItemProvider.prototype.getItems = function (pathRequest) {
        var items = [], fullPath = pathRequest.fullPath && pathRequest.fullPath.toLowerCase() || '';
        if (fullPath === '') {
            items = [{
                    displayName: 'Parameters',
                    name: 'Parameters',
                    isList: true,
                    specifics: 'parameters'
                }];
        }
        else if (fullPath === 'parameters') {
            items = this.dashboardParameters.map(function (parameter) {
                return {
                    displayName: parameter.name(),
                    name: parameter.name(),
                    isList: false,
                    specifics: data_item_1.DataItem.typesMap[parameter.type().replace('System.', '')]
                };
            });
        }
        return $.Deferred().resolve(items).promise();
    };
    return ParametersItemProvider;
}());
exports.ParametersItemProvider = ParametersItemProvider;


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _accordion_tab_1 = __webpack_require__(7);
var _shared_composers_1 = __webpack_require__(13);
var DeltaNumericFormatSurface = (function () {
    function DeltaNumericFormatSurface(model, propertiesController) {
        this.model = model;
        this.propertiesController = propertiesController;
        this._disposables = [];
        this.propertiesTabs = ko.observableArray([]);
    }
    DeltaNumericFormatSurface.prototype.updatePropertiesTabs = function () {
        this.propertiesTabs([new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.NumericFormat, this.model.title, _shared_composers_1.SharedComposers.getNumericFormatWrapper(this.model.numericFormat))
        ]);
        this.propertiesController.secondaryModel({
            displayText: this.model.title,
            data: this
        });
    };
    DeltaNumericFormatSurface.prototype.startEditing = function (args) {
        args.createImmediately = false;
        this.updatePropertiesTabs();
    };
    DeltaNumericFormatSurface.prototype.dispose = function () {
        this._disposables.forEach(function (d) {
            d.dispose();
        });
    };
    return DeltaNumericFormatSurface;
}());
exports.DeltaNumericFormatSurface = DeltaNumericFormatSurface;


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var _data_controller_base_1 = __webpack_require__(48);
var geoPointMapDataControllerBase = (function (_super) {
    __extends(geoPointMapDataControllerBase, _super);
    function geoPointMapDataControllerBase(options) {
        var _this = _super.call(this, options) || this;
        _this.axisPoints = [];
        _this._prepare();
        return _this;
    }
    geoPointMapDataControllerBase.prototype.getPoint = function (index, valueIndex) {
        var pointsCount = this._getPointsCount(index);
        return {
            lat: this._getLatitudeValue(index),
            lon: this._getLongitudeValue(index),
            latSel: this._getLatitudeUniqueValue(index),
            lonSel: this._getLongitudeUniqueValue(index),
            pointsCount: pointsCount,
            tooltipDimensions: pointsCount < 2 ? this._getTooltipDimensions(index) : [],
            tooltipMeasures: this._getTooltipMeasures(index)
        };
    };
    geoPointMapDataControllerBase.prototype.getCount = function () {
        return this.axisPoints.length;
    };
    geoPointMapDataControllerBase.prototype._prepare = function () {
        var dimensionId = this._getAxisPointDimensionDescriptorId(), axis = this.multiData.getAxis();
        this.axisPoints = dimensionId ? axis.getPointsByDimension(dimensionId) : [];
    };
    geoPointMapDataControllerBase.prototype._getAxisPointDimensionDescriptorId = function () {
        return this.viewModel.LongitudeDataId;
    };
    geoPointMapDataControllerBase.prototype._getMeasure = function (index, measureName) {
        var axisPoint = this._getAxisPoint(index);
        return this.multiData.getSlice(axisPoint).getMeasureValue(measureName);
    };
    geoPointMapDataControllerBase.prototype._getMeasureValue = function (index, measureName) {
        return this._getMeasure(index, measureName).getValue();
    };
    geoPointMapDataControllerBase.prototype._getMeasureDisplayText = function (index, measureName) {
        return this._getMeasure(index, measureName).getDisplayText();
    };
    geoPointMapDataControllerBase.prototype._getLatitude = function (index) {
        var point = this._getAxisPoint(index);
        return point.getParentByDimensionId(this.viewModel.LatitudeDataId);
    };
    geoPointMapDataControllerBase.prototype._getLatitudeValue = function (index) {
        return this._getLatitude(index).getValue();
    };
    geoPointMapDataControllerBase.prototype._getLatitudeUniqueValue = function (index) {
        return this._getLatitude(index).getUniqueValue();
    };
    geoPointMapDataControllerBase.prototype._getLongitude = function (index) {
        var point = this._getAxisPoint(index);
        return point.getParentByDimensionId(this.viewModel.LongitudeDataId);
    };
    geoPointMapDataControllerBase.prototype._getLongitudeValue = function (index) {
        return this._getLongitude(index).getValue();
    };
    geoPointMapDataControllerBase.prototype._getLongitudeUniqueValue = function (index) {
        return this._getLongitude(index).getUniqueValue();
    };
    geoPointMapDataControllerBase.prototype._getPointsCount = function (index) {
        var axisPoint = this._getAxisPoint(index).getParentByDimensionId(this.viewModel.LongitudeDataId);
        return this.multiData.getSlice(axisPoint).getMeasureValue(this.viewModel.PointsCountDataId).getValue();
    };
    geoPointMapDataControllerBase.prototype._getTooltipDimensions = function (index) {
        var tooltipDimensionsViewModel = this.viewModel.TooltipDimensions, tooltipDimensions = [], values, distinctValues;
        if (tooltipDimensionsViewModel) {
            for (var i = 0; i < tooltipDimensionsViewModel.length; i++) {
                values = this._getAxisPoint(index).getDisplayTextsByDimensionId(tooltipDimensionsViewModel[i].DataId);
                distinctValues = $.grep(values, function (el, index) {
                    return index === values.indexOf(el);
                });
                tooltipDimensions.push({
                    caption: tooltipDimensionsViewModel[i].Caption,
                    values: distinctValues
                });
            }
        }
        return tooltipDimensions;
    };
    geoPointMapDataControllerBase.prototype._getTooltipMeasures = function (index) {
        var tooltipMeasuresViewModel = this.viewModel.TooltipMeasures;
        var tooltipMeasures = [];
        if (tooltipMeasuresViewModel) {
            for (var i = 0; i < tooltipMeasuresViewModel.length; i++) {
                tooltipMeasures.push({
                    caption: tooltipMeasuresViewModel[i].Caption,
                    value: this._getMeasureDisplayText(index, tooltipMeasuresViewModel[i].DataId)
                });
            }
        }
        return tooltipMeasures;
    };
    geoPointMapDataControllerBase.prototype._getAxisPoint = function (index) {
        return this.axisPoints[index];
    };
    return geoPointMapDataControllerBase;
}(_data_controller_base_1.dataControllerBase));
exports.geoPointMapDataControllerBase = geoPointMapDataControllerBase;


/***/ }),
/* 164 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.ui.dxScrollView };

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var enums_1 = __webpack_require__(94);
var _item_data_axis_names_1 = __webpack_require__(34);
var _render_helper_1 = __webpack_require__(28);
var special_values_1 = __webpack_require__(39);
var _chart_helper_1 = __webpack_require__(95);
var _common_1 = __webpack_require__(35);
var _formatter_1 = __webpack_require__(25);
var _localization_ids_1 = __webpack_require__(21);
var _localizer_1 = __webpack_require__(16);
var _utils_1 = __webpack_require__(3);
var _chart_data_controller_base_1 = __webpack_require__(239);
var chartDataControllerProto = (function (_super) {
    __extends(chartDataControllerProto, _super);
    function chartDataControllerProto(options) {
        var _this = _super.call(this, options) || this;
        _this._legendSeriesPrefix = '__legend__series__';
        _this._argumentAxisPoints = _this.getArgumentAxisPoints();
        return _this;
    }
    chartDataControllerProto.prototype.getLegendSeriesName = function (seriesName) {
        return this._legendSeriesPrefix + seriesName;
    };
    chartDataControllerProto.prototype.getLegendSeriesDisplayName = function (seriesName) {
        return seriesName.indexOf(this._legendSeriesPrefix) !== -1 ? seriesName.replace(this._legendSeriesPrefix, '') : seriesName;
    };
    chartDataControllerProto.prototype.getDataSourceAndSeries = function (encodeHtml) {
        var _this = this;
        var that = this;
        if (!that.viewModel || that._argumentAxisPoints.length == 0) {
            return {
                dataSource: null,
                series: null,
                argumentAxis: {
                    categories: []
                }
            };
        }
        var seriesInfoList = that._getSeriesInfo(encodeHtml), legendInfoList = that.viewModel.Legend ? that._getLegendInfo() : [], result = {
            dataSource: [],
            series: [],
            argumentAxis: null
        };
        var dataSourceAndCategories = this.getDataSourceAndCategories(seriesInfoList);
        if (dataSourceAndCategories) {
            result.dataSource = dataSourceAndCategories.dataSource;
            if (dataSourceAndCategories.categories)
                result.argumentAxis = { categories: dataSourceAndCategories.categories };
        }
        if (seriesInfoList.length > 0) {
            seriesInfoList.forEach(function (seriesInfo) {
                if (seriesInfo.seriesItem) {
                    result.series.push(seriesInfo.seriesItem);
                }
            });
            legendInfoList.forEach(function (legendInfo) {
                result.series.push({
                    name: _this.getLegendSeriesName(legendInfo.name),
                    color: legendInfo.color,
                    type: legendInfo.type
                });
            });
        }
        return result;
    };
    chartDataControllerProto.prototype.getDataSourceAndCategories = function (seriesInfoList) {
        return this.getDataDefinedDataSourceAndCategories(seriesInfoList);
    };
    chartDataControllerProto.prototype.getDataDefinedDataSourceAndCategories = function (seriesInfoList) {
        var _this = this;
        var dataSource = [];
        var categories;
        if (seriesInfoList.length > 0) {
            categories = [];
            this._argumentAxisPoints.forEach(function (argumentAxisPoint, pointIndex) {
                var argument = _this.getArgumentBindingValue(argumentAxisPoint, pointIndex), dataSourceItem = {
                    x: argument
                };
                if (_this._isSelectionTagsRequired()) {
                    dataSourceItem.tag = {
                        axisPoint: argumentAxisPoint
                    };
                }
                if (_this.isDiscreteArgument()) {
                    categories.push(argument);
                }
                seriesInfoList.forEach(function (seriesInfo) {
                    if (seriesInfo.originalSeriesType === 'HighLowClose') {
                        dataSourceItem.nullColumn = null;
                    }
                    seriesInfo.valueFields.forEach(function (valueField) {
                        var value = valueField.getValue(argumentAxisPoint);
                        if (value === special_values_1.specialValues.errorValueGuid)
                            value = 0;
                        dataSourceItem[valueField.name] = value;
                    });
                });
                dataSource.push(dataSourceItem);
            });
        }
        else {
            categories = undefined;
        }
        return {
            dataSource: dataSource,
            categories: categories
        };
    };
    chartDataControllerProto.prototype.generatePaneName = function (paneName, paneIndex) {
        return paneName || 'Pane ' + paneIndex;
    };
    chartDataControllerProto.prototype._getSeriesInfo = function (encodeHtml) {
        var info;
        var that = this, seriesIndex = 0, seriesAxisPoints = this.getSeriesAxisPoints(), isGrandTotal = !this.viewModel.SummarySeriesMember, includeTags = that._isSelectionTagsRequired(), reversed = this.viewModel.AxisX && this.viewModel.AxisX.Reverse, result = [], add = function (info) {
            var canReverse = info.seriesItem.type !== 'stackedbar' && info.seriesItem.type !== 'fullstackedbar';
            if (reversed && canReverse)
                result.unshift(info);
            else
                result.push(info);
        };
        that._iterateSeriesTemplates(function (pane, seriesTemplate, paneIndex) {
            var paneName = pane ? that.generatePaneName(pane.Name, paneIndex) : undefined, specifyTitleByName = pane ? pane.SpecifySeriesTitlesWithSeriesName : false, pointLabelInfo = that._getPointLabelInfo(seriesTemplate.PointLabel);
            seriesAxisPoints.forEach(function (seriesAxisPoint) {
                info = {
                    name: seriesTemplate.Name,
                    dataId: seriesTemplate.DataId,
                    paneName: paneName,
                    pointVisible: that._showPointMarker(seriesTemplate),
                    seriesType: _chart_helper_1.chartHelper.convertSeriesType(seriesTemplate.SeriesType),
                    originalSeriesType: seriesTemplate.SeriesType,
                    plotOnSecondaryAxis: seriesTemplate.PlotOnSecondaryAxis,
                    ignoreEmptyPoints: seriesTemplate.IgnoreEmptyPoints,
                    axisPoint: seriesAxisPoint,
                    dataMembers: seriesTemplate.DataMembers,
                    colorMeasureId: seriesTemplate.ColorMeasureID,
                    valueFormats: [],
                    valueFields: [],
                    pointLabel: pointLabelInfo
                };
                info.dataMembers.forEach(function (dataMember) {
                    info.valueFormats.push(that.multiData.getMeasureFormat(dataMember));
                    info.valueFields.push({
                        name: 'y' + seriesIndex.toString(),
                        getValue: function (argumentAxisPoint) {
                            return that._getCrossSlice(argumentAxisPoint, seriesAxisPoint).getMeasureValue(dataMember).getValue();
                        }
                    });
                    seriesIndex++;
                });
                if (!isGrandTotal) {
                    info.title = that.getTitle(seriesAxisPoint);
                    if (specifyTitleByName) {
                        info.title += ' - ' + seriesTemplate.Name;
                    }
                }
                else {
                    info.title = seriesTemplate.Name;
                }
                info.seriesItem = that._createSeriesItem(info, includeTags, encodeHtml);
                add(info);
            });
        });
        return result;
    };
    chartDataControllerProto.prototype.customizeTooltipText = function (series, point, seriesFormats, encodeHtml) {
        if (!this._validatePoint(point, series.type))
            return null;
        var color = this._getCustomizeTooltipTextColor(point);
        return this._getTooltipHtml(series, point, seriesFormats, encodeHtml, color);
    };
    chartDataControllerProto.prototype._getTooltipHtml = function (series, point, seriesFormats, encodeHtml, color) {
        var text = this._getTooltipTextInternal(series, point, seriesFormats, encodeHtml);
        if (color) {
            text = '<div>' + _render_helper_1.RenderHelper.rectangle(color, 10, 10) + '&nbsp;&nbsp;' + text + '</div>';
        }
        return text;
    };
    chartDataControllerProto.prototype._getTooltipTextInternal = function (series, point, seriesFormats, encodeHtml) {
        var that = this, text = series.name + ': ';
        text = encodeHtml ? _utils_1.encodeHtml(text) : text;
        switch (series.type) {
            case 'rangebar':
            case 'rangearea':
                text += that._formatValuesList([point.originalMinValue, point.originalValue], seriesFormats, encodeHtml);
                break;
            case 'bubble':
                text += that._formatValuesList([point.originalValue, point.size], seriesFormats, encodeHtml);
                break;
            case 'stock':
            case 'candlestick':
                text += that._formatOpenHighLowCloseValues([point.originalOpenValue, point.originalHighValue, point.originalLowValue, point.originalCloseValue], seriesFormats, series.getOptions().openValueField !== 'nullColumn', encodeHtml, '<br>');
                break;
            default:
                text += that._formatValuesList([point.originalValue], seriesFormats, encodeHtml);
                break;
        }
        return text;
    };
    chartDataControllerProto.prototype.getTooltipArgumentText = function (obj) {
        return this.getArgumentText({ value: obj.originalArgument });
    };
    chartDataControllerProto.prototype.getZoomArguments = function () {
        var that = this, axisX = that.viewModel ? that.viewModel.AxisX : undefined;
        if (axisX && axisX.LimitVisiblePoints && that._argumentAxisPoints.length > axisX.VisiblePointsCount) {
            var endIndex = axisX.VisiblePointsCount - 1;
            return {
                start: that.getArgumentBindingValue(that._argumentAxisPoints[0], 0),
                end: that.getArgumentBindingValue(that._argumentAxisPoints[endIndex], endIndex)
            };
        }
    };
    chartDataControllerProto.prototype.getArgumentUniquePath = function (value) {
        var that = this;
        for (var i = 0; i < that._argumentAxisPoints.length; i++) {
            if (that.getArgument(that._argumentAxisPoints[i]) === value)
                return that._argumentAxisPoints[i].getUniquePath();
        }
    };
    chartDataControllerProto.prototype._getArgumentAutoFormat = function () {
        var that = this, min = 0, max = 1;
        if (that._argumentAxisPoints.length > 0) {
            min = that._argumentAxisPoints[0].getValue();
            max = that._argumentAxisPoints[that._argumentAxisPoints.length - 1].getValue();
        }
        return _formatter_1.getAxisFormat(min, max);
    };
    chartDataControllerProto.prototype._createArgumentFormat = function () {
        var that = this, argumentAxisLabelFormat = undefined, argument = that.viewModel ? that.viewModel.Argument : undefined;
        if (argument && !that.isDiscreteArgument()) {
            argumentAxisLabelFormat = _formatter_1.convertToFormat(argument.AxisXLabelFormat);
            if (that._isNumericDataType(argument.Type)) {
                if (!argumentAxisLabelFormat || !argument.AxisXLabelFormat.NumericFormat) {
                    argumentAxisLabelFormat = that._getArgumentAutoFormat();
                }
                else {
                    if (argument.AxisXLabelFormat.NumericFormat.Unit == 'Auto') {
                        argumentAxisLabelFormat = that._getArgumentAutoFormat();
                    }
                }
                argumentAxisLabelFormat.dateType = null;
            }
            if (argumentAxisLabelFormat) {
                argumentAxisLabelFormat.showTrailingZeros = false;
            }
        }
        else if (that.isSingleArgument()) {
            argumentAxisLabelFormat = that.getSingleArgumentDimensionFormat();
        }
        return argumentAxisLabelFormat;
    };
    chartDataControllerProto.prototype._createAxisXFormat = function () {
        if (this.viewModel.AxisX.Format && (this.viewModel.AxisX.Format.NumericFormat != null || this.viewModel.AxisX.Format.DateTimeFormat != null))
            return _formatter_1.convertToFormat(this.viewModel.AxisX.Format);
        return this.getArgumentFormat();
    };
    chartDataControllerProto.prototype.getArgumentFormat = function () {
        if (this._argumentFormat == null)
            this._argumentFormat = this._createArgumentFormat();
        return this._argumentFormat;
    };
    chartDataControllerProto.prototype.getAxisXFormat = function () {
        if (this._axisXFormat == null)
            this._axisXFormat = this._createAxisXFormat();
        return this._axisXFormat;
    };
    chartDataControllerProto.prototype.getArgumentText = function (argument) {
        var _this = this;
        return this._getArgumentText(argument.value, function () { return _this.getArgumentFormat(); });
    };
    chartDataControllerProto.prototype.getAxisXLabelText = function (axisValue) {
        var _this = this;
        return this._getArgumentText(axisValue.value, function () { return _this.getAxisXFormat(); });
    };
    chartDataControllerProto.prototype._getArgumentText = function (argumentValue, formatGetter) {
        if (this.isDiscreteArgument() || this.isQualitativeArgument()) {
            var axisPoint = this._argumentAxisPoints[argumentValue];
            if (this.viewModel.Argument.AxisXDateTimeFormatSupported)
                return _formatter_1.formatByFormatInfo(axisPoint.getValue(), formatGetter());
            return axisPoint ? this.getTitle(axisPoint, '\n') : argumentValue;
        }
        return _formatter_1.formatByFormatInfo(argumentValue, formatGetter());
    };
    chartDataControllerProto.prototype._validatePoint = function (point, seriesType) {
        switch (seriesType) {
            case 'rangebar':
            case 'rangearea':
                return !(point.originalMinValue === null && point.originalValue === null);
            case 'bubble':
                return !(point.originalValue === null && point.size === null);
            case 'stock':
            case 'candlestick':
                return !(point.originalOpenValue === null && point.originalHighValue === null && point.originalLowValue === null && point.originalCloseValue === null);
            default:
                return !(point.originalValue === null);
        }
    };
    chartDataControllerProto.prototype._getCustomizeTooltipTextColor = function (point) {
        if (point.getColor) {
            return point.getColor();
        }
    };
    chartDataControllerProto.prototype._getLegendInfo = function () {
        var _this = this;
        var that = this, values = [], result = [], colorMeasures = that.multiData.getColorMeasures(), argumentPoints = that.getArgumentAxisPoints(that.viewModel.ArgumentColorDimension), seriesPoints = that.getSeriesAxisPoints(that.viewModel.SeriesColorDimension), includeProc = function (axisPoint) {
            var dim = axisPoint.getDimension();
            return (dim && _this.viewModel.ColorPathMembers && _this.viewModel.ColorPathMembers.indexOf(dim.id) !== -1);
        }, getColorValuesProc = function (axisPoint) {
            return axisPoint.getValuePath(includeProc);
        }, getColorDisplayTextsProc = function (axisPoint) {
            return axisPoint.getDisplayPath(includeProc);
        };
        colorMeasures.forEach(function (colorMeasure) {
            argumentPoints.forEach(function (argumentPoint) {
                seriesPoints.forEach(function (seriesPoint) {
                    var color = that._getColorFromData(argumentPoint, seriesPoint, colorMeasure.id);
                    if (color) {
                        var valueSet = getColorValuesProc(argumentPoint).concat(getColorValuesProc(seriesPoint));
                        var displayTexts = getColorDisplayTextsProc(argumentPoint).concat(getColorDisplayTextsProc(seriesPoint));
                        if (colorMeasure.name) {
                            valueSet.push(colorMeasure);
                            displayTexts.push(colorMeasure.name);
                        }
                        if (!that._valuesContainsValueSet(values, valueSet)) {
                            values.push(valueSet);
                            var colorText = displayTexts.join(' - ');
                            if (!colorText || colorText == '') {
                                colorText = that._getDisplayTextBySeriesTemplates();
                            }
                            var transparentColor = !that.viewModel.ArgumentColorDimension && _chart_helper_1.chartHelper.isTransparentColorType(that._getLastSeriesType(colorMeasure.id));
                            result.push({
                                name: colorText,
                                color: color,
                                type: transparentColor ? 'bubble' : 'line',
                                argumentField: 'legendFakeArgument',
                                valueField: 'legendFakeValue'
                            });
                        }
                    }
                });
            });
        });
        return result;
    };
    chartDataControllerProto.prototype._valuesContainsValueSet = function (values, valueSet) {
        for (var i = 0; i < values.length; i++) {
            if (values[i].length !== valueSet.length)
                continue;
            var equal = true;
            for (var j = 0; j < values[i].length; j++) {
                if (values[i][j] !== valueSet[j]) {
                    equal = false;
                    break;
                }
            }
            if (equal)
                return true;
        }
        return false;
    };
    chartDataControllerProto.prototype._getLastSeriesType = function (colorMeasureId) {
        var panes = this.viewModel.Panes;
        for (var i = panes.length - 1; i >= 0; i--) {
            for (var j = panes[i].SeriesTemplates.length - 1; j >= 0; j--) {
                if (colorMeasureId === panes[i].SeriesTemplates[j].ColorMeasureID) {
                    return _chart_helper_1.chartHelper.convertSeriesType(panes[i].SeriesTemplates[j].SeriesType);
                }
            }
        }
    };
    chartDataControllerProto.prototype._getDisplayTextBySeriesTemplates = function () {
        var displayTexts = [];
        this._iterateSeriesTemplates(function (pane, seriesTemplate, paneIndex, templateIndex) {
            var name = seriesTemplate.Name;
            if (displayTexts.indexOf(name) === -1) {
                displayTexts.push(name);
            }
        });
        return displayTexts.join(', ');
    };
    chartDataControllerProto.prototype._iterateSeriesTemplates = function (proc) {
        this.viewModel.Panes.forEach(function (pane, paneIndex) {
            pane.SeriesTemplates.forEach(function (seriesTemplate) {
                proc(pane, seriesTemplate, paneIndex);
            });
        });
    };
    chartDataControllerProto.prototype._isSelectionTagsRequired = function () {
        return true;
    };
    chartDataControllerProto.prototype._createSeriesItem = function (seriesInfo, includeTags, encodeHtml) {
        var that = this, seriesItem = {
            argumentField: 'x',
            type: seriesInfo.seriesType,
            showInLegend: seriesInfo.seriesType === 'stock' || seriesInfo.seriesType === 'candlestick'
        }, setNamesListProc = function (names) {
            if (seriesInfo.originalSeriesType === 'HighLowClose') {
                seriesItem[names[0]] = 'nullColumn';
                names.splice(0, 1);
            }
            for (var i = 0; i < Math.min(names.length, seriesInfo.valueFields.length); i++) {
                seriesItem[names[i]] = seriesInfo.valueFields[i].name;
            }
        };
        if (_utils_1.type.isDefined(seriesInfo.title)) {
            seriesItem.name = seriesInfo.title;
        }
        if (_utils_1.type.isDefined(seriesInfo.paneName)) {
            seriesItem.pane = seriesInfo.paneName;
        }
        if (includeTags) {
            seriesItem.tag = {
                axisPoint: seriesInfo.axisPoint,
                dataMembers: seriesInfo.dataMembers,
                valueFormats: seriesInfo.valueFormats,
                colorMeasureId: seriesInfo.colorMeasureId
            };
        }
        if (seriesInfo.pointVisible) {
            seriesItem.point = {
                visible: seriesInfo.pointVisible
            };
        }
        seriesItem[_common_1.DashboardDataIdField] = seriesInfo.dataId;
        switch (seriesItem.type) {
            case 'rangebar':
            case 'rangearea':
                setNamesListProc(['rangeValue1Field', 'rangeValue2Field']);
                break;
            case 'bubble':
                setNamesListProc(['valueField', 'sizeField']);
                break;
            case 'stock':
            case 'candlestick':
                setNamesListProc(['openValueField', 'highValueField', 'lowValueField', 'closeValueField']);
                break;
            default:
                setNamesListProc(['valueField']);
                break;
        }
        seriesItem.axis = (seriesInfo.paneName || '') + (seriesInfo.plotOnSecondaryAxis ? 'secondary' : 'primary');
        if (seriesInfo.ignoreEmptyPoints) {
            seriesItem.ignoreEmptyPoints = seriesInfo.ignoreEmptyPoints;
        }
        if (that.showPointLabels(seriesInfo.pointLabel)) {
            var pointLabel = seriesInfo.pointLabel;
            seriesItem.label = {
                visible: true,
                rotationAngle: pointLabel.rotationAngle,
                customizeText: function () {
                    return that._customizePointLabelText(this, pointLabel, seriesInfo);
                }
            };
            if (seriesItem.type === 'bar') {
                seriesItem.label.showForZeroValues = pointLabel.showForZeroValues;
            }
            if (seriesItem.type === 'bar' || seriesItem.type === 'bubble') {
                seriesItem.label.position = pointLabel.position;
            }
            else if (seriesItem.type === 'fullstackedbar') {
                seriesItem.label.position = 'inside';
            }
        }
        var color = undefined;
        if (_utils_1.type.isDefined(seriesInfo.colorMeasureId)) {
            color = that._getColorFromData(that._argumentAxisPoints[0], seriesInfo.axisPoint, seriesInfo.colorMeasureId);
        }
        if (_chart_helper_1.chartHelper.isSeriesColorSupported(seriesItem.type)) {
            var argumentRootAxisPoint = this.multiData.getAxis(_item_data_axis_names_1.itemDataAxisNames.chartArgumentAxis).getRootPoint();
            color = that._getElementCustomColor(argumentRootAxisPoint, seriesInfo.axisPoint, seriesInfo.dataMembers, color);
        }
        if (color) {
            seriesItem.color = color;
        }
        if (_chart_helper_1.chartHelper.isStackedAreaType(seriesItem.type)) {
            seriesItem.opacity = 1;
        }
        return seriesItem;
    };
    chartDataControllerProto.prototype._customizePointLabelText = function (valueContainer, pointLabel, seriesInfo) {
        var that = this, contentType = pointLabel.contentType, formatArgumentProc = function () {
            return that.getArgumentText({ value: valueContainer.argument });
        }, formatValueProc = function () {
            var formats = seriesInfo.valueFormats;
            switch (seriesInfo.seriesType) {
                case 'rangebar':
                case 'rangearea':
                    return that._formatValuesList([valueContainer.value], [formats[valueContainer.index]], false);
                case 'bubble':
                    return that._formatValuesList([valueContainer.value, valueContainer.size], formats, false);
                case 'stock':
                case 'candlestick':
                    return that._formatOpenHighLowCloseValues([valueContainer.openValue, valueContainer.highValue, valueContainer.lowValue, valueContainer.closeValue], formats, seriesInfo.originalSeriesType !== 'HighLowClose', false, '\n\r');
                default:
                    return that._formatValuesList([valueContainer.value], formats, false);
            }
        };
        var hasArgument = (contentType & enums_1.PointLabelContentType.Argument) > 0, hasSeriesName = (contentType & enums_1.PointLabelContentType.SeriesName) > 0, hasValue = (contentType & enums_1.PointLabelContentType.Value) > 0, hasPercent = (contentType & enums_1.PointLabelContentType.Percent) > 0 && this._getPercentSupported(seriesInfo);
        var firstPart = '';
        var secondPart = '';
        var argument = hasArgument ? formatArgumentProc() : '';
        var series = hasSeriesName ? valueContainer.seriesName : '';
        var value = hasValue ? formatValueProc() : '';
        var percent = hasPercent ? _formatter_1.formatPercentValue(valueContainer.percent) : '';
        if (hasArgument) {
            firstPart = hasSeriesName ? argument + " (" + series + ")" : "" + argument;
        }
        else if (hasSeriesName) {
            firstPart = "" + series;
        }
        if (hasValue) {
            secondPart = hasPercent ? value + " (" + percent + ")" : "" + value;
        }
        else if (hasPercent) {
            secondPart = "" + percent;
        }
        return ["" + firstPart, "" + secondPart].filter(function (s) { return s != ''; }).join(': ');
    };
    chartDataControllerProto.prototype._getPercentSupported = function (seriesInfo) {
        var series = ['fullstackedbar', 'fullstackedline', 'fullstackedarea', 'fullstackedsplinearea'];
        return series.indexOf(seriesInfo.seriesType) >= 0;
    };
    chartDataControllerProto.prototype._formatOpenHighLowCloseValues = function (values, formats, hasOpenValueField, encodeHtml, delimiter) {
        var result = '', delimiter = delimiter || ' ', formatsLength = formats ? formats.length : 0, i, formatIndex, valueNames = [
            _localizer_1.localizer.getString(_localization_ids_1.localizationId.OpenCaption),
            _localizer_1.localizer.getString(_localization_ids_1.localizationId.HighCaption),
            _localizer_1.localizer.getString(_localization_ids_1.localizationId.LowCaption),
            _localizer_1.localizer.getString(_localization_ids_1.localizationId.CloseCaption)
        ];
        if (values && (formatsLength > 0) && (formatsLength <= values.length)) {
            for (formatIndex = 0, i = hasOpenValueField ? 0 : 1; formatIndex < formatsLength; formatIndex++, i++) {
                result += delimiter + valueNames[i] + ': ' + this._formatValue(values[i], formats[formatIndex], encodeHtml);
            }
        }
        return result;
    };
    chartDataControllerProto.prototype._formatValuesList = function (valuesList, formats, encodeHtml) {
        var result = '';
        if (formats && formats.length === valuesList.length) {
            for (var i = 0; i < valuesList.length; i++) {
                result = result + (i === 0 ? '' : ' - ') + this._formatValue(valuesList[i], formats[i], encodeHtml);
            }
        }
        return result;
    };
    chartDataControllerProto.prototype._formatValue = function (value, format, encodeHtml) {
        var text = _formatter_1.format(value ? value : 0, format);
        return encodeHtml ? _utils_1.encodeHtml(text) : text;
    };
    chartDataControllerProto.prototype._isNumericDataType = function (type) {
        return type == 'Integer' || type == 'Float' || type == 'Double' || type == 'Decimal';
    };
    chartDataControllerProto.prototype._convertContentType = function (typeModel) {
        return enums_1.parsePointLabelContentType(typeModel);
    };
    chartDataControllerProto.prototype._showPointMarker = function (seriesTemplate) {
        switch (seriesTemplate.SeriesType) {
            case 'Point':
                return true;
            case 'Line':
            case 'StackedLine':
            case 'FullStackedLine':
            case 'StepLine':
            case 'Spline':
            case 'Area':
            case 'StackedArea':
            case 'FullStackedArea':
            case 'StepArea':
            case 'SplineArea':
            case 'StackedSplineArea':
            case 'FullStackedSplineArea':
            case 'RangeArea':
                return seriesTemplate.ShowPointMarkers;
            default:
                false;
        }
    };
    chartDataControllerProto.prototype.checkSeriesTemplatePointLabels = function (seriesTemplateViewModel) {
        return this.showPointLabels(this._getPointLabelInfo(seriesTemplateViewModel.PointLabel));
    };
    chartDataControllerProto.prototype.showPointLabels = function (pointLabelInfo) {
        return pointLabelInfo && pointLabelInfo.contentType != enums_1.PointLabelContentType.None;
    };
    chartDataControllerProto.prototype._getPointLabelInfo = function (pointLabelViewModel) {
        if (pointLabelViewModel) {
            return {
                showPointLabels: pointLabelViewModel.ShowPointLabels,
                rotationAngle: _chart_helper_1.chartHelper.convertPointLabelRotationAngle(pointLabelViewModel.Orientation),
                position: _chart_helper_1.chartHelper.convertPointLabelPosition(pointLabelViewModel.Position),
                showForZeroValues: pointLabelViewModel.ShowForZeroValues,
                contentType: this._convertContentType(pointLabelViewModel.ContentType),
                scatterContent: pointLabelViewModel.ScatterContent
            };
        }
    };
    return chartDataControllerProto;
}(_chart_data_controller_base_1.chartDataControllerBase));
exports.chartDataControllerProto = chartDataControllerProto;


/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var special_values_1 = __webpack_require__(39);
var _formatter_1 = __webpack_require__(25);
exports.dataStorageSpecialIds = {
    DisplayText: '_DisplayText_{4873F9E9-65B2-4307-BB25-BFD09F6A2E54}',
    Value: '_Value_{E5597004-313E-4F79-B02E-DEA46EEB1BFE}'
};
var itemDataAxisPoint = (function () {
    function itemDataAxisPoint(levelInfo, dataRowKey) {
        this._info = levelInfo;
        this._dataRowKey = dataRowKey;
        this._children = [];
        this._parent = undefined;
    }
    itemDataAxisPoint.prototype._getSpecialValue = function (specialId) {
        var that = this, info = that._info;
        return info.getMetaDataValue(that._dataRowKey, specialId);
    };
    itemDataAxisPoint.prototype.getUniqueValue = function () {
        var that = this, info = that._info;
        return info.getBaseValue(that._dataRowKey);
    };
    itemDataAxisPoint.prototype.getValue = function () {
        var that = this;
        var value = that._getSpecialValue(exports.dataStorageSpecialIds.Value);
        if (value === null || value === undefined)
            value = that.getUniqueValue();
        if (value === special_values_1.specialValues.nullValueGuid)
            value = null;
        return value;
    };
    itemDataAxisPoint.prototype._getLevel = function () {
        return this._info.level;
    };
    itemDataAxisPoint.prototype._getServerText = function () {
        var that = this;
        return that._getSpecialValue(exports.dataStorageSpecialIds.DisplayText);
    };
    itemDataAxisPoint.prototype.getKey = function () {
        return this._dataRowKey;
    };
    itemDataAxisPoint.prototype.getAxisName = function () {
        return this._info.axisName;
    };
    itemDataAxisPoint.prototype.getChildren = function () {
        return this._children;
    };
    itemDataAxisPoint.prototype.getParent = function () {
        return this._parent;
    };
    itemDataAxisPoint.prototype.getAvaliableLeafPoints = function () {
        var children = this.getChildren();
        if (children && children.length) {
            return children.reduce(function (acc, child) {
                var lastLevelPoints = child.getAvaliableLeafPoints();
                if (lastLevelPoints && lastLevelPoints.length) {
                    acc = acc.concat(lastLevelPoints);
                }
                return acc;
            }, []);
        }
        return [this];
    };
    itemDataAxisPoint.prototype._setParent = function (parent) {
        this._parent = parent;
    };
    itemDataAxisPoint.prototype._setChildren = function (children) {
        this._children = children;
    };
    itemDataAxisPoint.prototype.getParentByDimensionId = function (dimensionId) {
        var current = this, dimension;
        while (current.getParent()) {
            dimension = current.getDimension();
            if (dimension && dimension.id == dimensionId) {
                return current;
            }
            current = current.getParent();
        }
        return dimensionId ? this : current;
    };
    itemDataAxisPoint.prototype.getDimensionValue = function (dimensionId) {
        var that = this, dimension = that.getDimension();
        if (!dimensionId || dimension && dimension.id == dimensionId) {
            return {
                getValue: function () {
                    return that.getValue();
                },
                getUniqueValue: function () {
                    return that.getUniqueValue();
                },
                getDisplayText: function () {
                    return that.getDisplayText();
                }
            };
        }
        else {
            var parent = that.getParent();
            return parent ? parent.getDimensionValue(dimensionId) : null;
        }
    };
    itemDataAxisPoint.prototype.getDisplayText = function () {
        var that = this, displayText = that._getServerText(), uniqueValue = that.getUniqueValue();
        if (uniqueValue === special_values_1.specialValues.olapNullValueGuid)
            return undefined;
        if (displayText == null) {
            var dimension = that.getDimension();
            if (dimension) {
                var format = that._info.metaData.getDimensionFormat(dimension.id), uniqueValue = this.getUniqueValue();
                displayText = uniqueValue === special_values_1.specialValues.nullValueGuid ?
                    _formatter_1.format(uniqueValue, format) :
                    _formatter_1.format(this.getValue(), format);
            }
        }
        return displayText;
    };
    itemDataAxisPoint.prototype.getDimension = function () {
        var that = this, axisName = that.getAxisName(), dimensions = that._info.metaData.getAxes()[axisName], dimension = dimensions[that._getLevel()];
        return dimension;
    };
    itemDataAxisPoint.prototype.getDimensions = function () {
        var that = this, parent = that.getParent();
        return parent ? parent.getDimensions().concat([that.getDimension()]) : [];
    };
    itemDataAxisPoint.prototype.getAxisPath = function () {
        return this._selectPath(undefined);
    };
    itemDataAxisPoint.prototype.getUniquePath = function () {
        return this._selectPath(function (point) {
            return point.getUniqueValue();
        });
    };
    itemDataAxisPoint.prototype.getValuePath = function (includeProc) {
        return this._selectIncludedPath(includeProc, function (point) {
            return point.getValue();
        });
    };
    itemDataAxisPoint.prototype.getDisplayPath = function (includeProc) {
        return this._selectIncludedPath(includeProc, function (point) {
            return point.getDisplayText();
        });
    };
    itemDataAxisPoint.prototype.getValues = function () {
        var value = [], axisPoint = this;
        while (axisPoint.getUniqueValue() != null) {
            value.push(axisPoint.getUniqueValue());
            if (this.getDimensions().length == 1)
                break;
            axisPoint = axisPoint.getParent();
        }
        value.reverse();
    };
    itemDataAxisPoint.prototype._selectIncludedPath = function (includeProc, pointProc) {
        return this._selectPath(function (point) {
            if (!includeProc || includeProc(point)) {
                return pointProc(point);
            }
            else {
                return undefined;
            }
        });
    };
    itemDataAxisPoint.prototype._selectPath = function (predicate) {
        var action = predicate ? predicate : function (axisPoint) {
            return axisPoint;
        }, buildParentsList = function (axisPoint) {
            var parent = axisPoint.getParent();
            if (parent) {
                var newValue = action(axisPoint);
                return buildParentsList(parent).concat(newValue == undefined ? [] : [newValue]);
            }
            else {
                return [];
            }
        };
        return buildParentsList(this);
    };
    itemDataAxisPoint.prototype.getPointsByDimensionId = function (dimensionId) {
        return this._getPointsByDimensionId(dimensionId, function (point) {
            return point;
        });
    };
    itemDataAxisPoint.prototype.getDisplayTextsByDimensionId = function (dimensionId) {
        return this._getPointsByDimensionId(dimensionId, function (point) {
            return point.getDisplayText();
        });
    };
    itemDataAxisPoint.prototype._getPointsByDimensionId = function (dimensionId, pointProc) {
        var result = [];
        this._findPoints(dimensionId, result, pointProc);
        return result;
    };
    itemDataAxisPoint.prototype._findPoints = function (dimensionId, result, pointProc) {
        var dimension = this.getDimension();
        if (dimension && dimension.id === dimensionId) {
            result.push(pointProc(this));
            return;
        }
        var children = this.getChildren();
        for (var i = 0; i < children.length; i++) {
            children[i]._findPoints(dimensionId, result, pointProc);
        }
    };
    return itemDataAxisPoint;
}());
exports.itemDataAxisPoint = itemDataAxisPoint;


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var data_1 = __webpack_require__(236);
var $ = __webpack_require__(2);
exports.itemDataAxisHelper = {
    eachPoint: function (point, _process) {
        var that = this, children = point.getChildren();
        if (_process(point) === false)
            return false;
        $.each(children, function (_, childPoint) {
            if (that.eachPoint(childPoint, _process) === false)
                return false;
        });
    },
    findFirstPoint: function (root, predicate) {
        var that = this, foundPoint = undefined;
        that.eachPoint(root, function (point) {
            var points = point.getAxisPath();
            if (predicate(points)) {
                foundPoint = point;
                return false;
            }
        });
        return foundPoint;
    },
    findFirstPointByUniqueValues: function (root, values) {
        var that = this;
        return that.findFirstPoint(root, function (points) {
            return that._equalPredicate(points, values, function (value, point) {
                return that._areEqual(value, point.getUniqueValue());
            });
        });
    },
    findFirstPointByValues: function (root, values) {
        var that = this;
        return that.findFirstPoint(root, function (points) {
            return that._equalPredicate(points, values, function (value, point) {
                return that._areEqual(value, point.getValue());
            });
        });
    },
    findFirstPointByUniqueValueAndDimension: function (root, value, dimensionId) {
        var that = this, foundPoint = undefined;
        that.eachPoint(root, function (point) {
            var dimension = point.getDimension();
            if (!!dimension && dimension.id === dimensionId && that._areEqual(value, point.getUniqueValue())) {
                foundPoint = point;
                return false;
            }
        });
        return foundPoint;
    },
    _areEqual: function (value1, value2) {
        return data_1.toComparable(value1, false) === data_1.toComparable(value2, false);
    },
    _equalPredicate: function (points, values, equal) {
        values = values || [];
        if (points.length != values.length)
            return false;
        var passes = true;
        $.each(values, function (index, value) {
            passes = passes && equal(value, points[index]);
            return passes;
        });
        return passes;
    },
    forSamePoints: function (baseItem, item, process) {
        var that = this;
        process(baseItem, item);
        $.each(baseItem.getChildren(), function (_, baseChild) {
            var child = that.findChildByUniqueValue(item, baseChild.getUniqueValue());
            if (child)
                that.forSamePoints(baseChild, child, process);
        });
    },
    findChildByUniqueValue: function (point, value) {
        var that = this, children = point.getChildren(), foundPoint = undefined;
        $.each(children, function (_, child) {
            if (that._areEqual(value, child.getUniqueValue())) {
                foundPoint = child;
                return false;
            }
        });
        return foundPoint;
    },
    getValuesByTuples: function (tuples, dimensionIds) {
        var values = [], dimensionCount = dimensionIds.length;
        $.each(tuples, function (index, tuple) {
            var value = [], axisPoint = tuple.getAxisPoint();
            while (axisPoint.getParent() != null) {
                value.push(axisPoint.getUniqueValue());
                if (dimensionCount == 1)
                    break;
                axisPoint = axisPoint.getParent();
            }
            value.reverse();
            values.push(value);
        });
        return values;
    }
};


/***/ }),
/* 168 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.data.ArrayStore };

/***/ }),
/* 169 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.ui.dxButton };

/***/ }),
/* 170 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.ui.dxCheckBox };

/***/ }),
/* 171 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.ui.dxList };

/***/ }),
/* 172 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.ui.dxOverlay };

/***/ }),
/* 173 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.ui.dxSelectBox };

/***/ }),
/* 174 */
/***/ (function(module, exports) {

module.exports = DevExpress.viz._dashboard;

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var DimensionFilterValues = (function () {
    function DimensionFilterValues(name) {
        if (name === void 0) { name = ''; }
        this.Name = name;
        this.Truncated = false;
        this.Values = [];
    }
    return DimensionFilterValues;
}());
exports.DimensionFilterValues = DimensionFilterValues;


/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var themes_1 = __webpack_require__(253);
exports.getBaseColorScheme = function () {
    var vizTheme = themes_1.currentTheme();
    return (vizTheme.indexOf('dark') !== -1) ? 'dark' : 'light';
};


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _custom_property_validation_1 = __webpack_require__(430);
function registerCustomProperty(meta) {
    if (exports._customPropertiesMeta.filter(function (existingMeta) { return existingMeta.ownerType === meta.ownerType && existingMeta.propertyName === meta.propertyName; })[0]) {
        throw new Error('Duplicated CustomPropertiesMeta');
    }
    _custom_property_validation_1.validateCustomPropertyName(meta.propertyName);
    exports._customPropertiesMeta.push(meta);
}
exports.registerCustomProperty = registerCustomProperty;
function _clearCustomPropertiesMeta() {
    exports._customPropertiesMeta = [];
}
exports._clearCustomPropertiesMeta = _clearCustomPropertiesMeta;
exports._customPropertiesMeta = [];
function _customMetadataContainsProperty(propertyName) {
    return !!(exports._customPropertiesMeta.filter(function (c) { return c.propertyName === propertyName; })[0]);
}
exports._customMetadataContainsProperty = _customMetadataContainsProperty;


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
var custom_properties_1 = __webpack_require__(431);
var custom_properties_metadata_1 = __webpack_require__(177);
function _convertCustomPropertiesMetadata(customPropertiesMeta) {
    return (customPropertiesMeta || [])
        .map(function (d) {
        var serializationInfo = {
            propertyName: d.propertyName,
            modelName: d.propertyName,
            defaultVal: d.defaultValue,
        };
        if (d.valueType === 'boolean') {
            serializationInfo.from = _base_metadata_1.parseBool;
        }
        if (d.valueType === 'number') {
            serializationInfo.from = _base_metadata_1.floatFromModel;
        }
        return serializationInfo;
    });
}
function _getCustomPropertiesSerializationInfoCore(customPropertiesMeta) {
    return {
        propertyName: 'customProperties',
        modelName: 'CustomProperties',
        category: _base_metadata_1.PropertyCategory.ViewModel,
        type: custom_properties_1.CustomProperties,
        info: _convertCustomPropertiesMetadata(customPropertiesMeta)
    };
}
exports._getCustomPropertiesSerializationInfoCore = _getCustomPropertiesSerializationInfoCore;
function getCustomPropertiesSerializationInfo(owner) {
    var filteredCustomProperties = custom_properties_metadata_1._customPropertiesMeta
        .filter(function (metadata) { return owner instanceof metadata.ownerType; });
    return _getCustomPropertiesSerializationInfoCore(filteredCustomProperties);
}
exports.getCustomPropertiesSerializationInfo = getCustomPropertiesSerializationInfo;


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var _utils_1 = __webpack_require__(3);
var _base_metadata_1 = __webpack_require__(4);
exports.formatTypeValues = {
    'Auto': 'DashboardStringId.NumericFormatFormatTypeAutoCaption',
    'General': 'DashboardStringId.NumericFormatFormatTypeGeneralCaption',
    'Number': 'DashboardStringId.NumericFormatFormatTypeNumberCaption',
    'Currency': 'DashboardStringId.NumericFormatFormatTypeCurrencyCaption',
    'Scientific': 'DashboardStringId.NumericFormatFormatTypeScientificCaption',
    'Percent': 'DashboardStringId.NumericFormatFormatTypePercentCaption',
    'Custom': 'Custom'
};
exports.customFormatString = { propertyName: 'customFormatString', modelName: '@CustomFormatString', displayName: 'Custom Format String', simpleFormAdapterItem: 'textBoxEditor' };
exports.formatType = { propertyName: 'formatType', modelName: '@FormatType', displayName: 'DashboardWebStringId.FormatType', simpleFormAdapterItem: 'selectBoxEditor', values: exports.formatTypeValues };
exports.unit = {
    propertyName: 'unit', modelName: '@Unit', displayName: 'DashboardStringId.NumericFormatUnitCaption', defaultVal: 'Auto', simpleFormAdapterItem: 'selectBoxEditor', values: {
        'Auto': 'DashboardStringId.NumericFormatUnitAutoCaption',
        'Ones': 'DashboardStringId.NumericFormatUnitOnesCaption',
        'Thousands': 'DashboardStringId.NumericFormatUnitThousandsCaption',
        'Millions': 'DashboardStringId.NumericFormatUnitMillionsCaption',
        'Billions': 'DashboardStringId.NumericFormatUnitBillionsCaption'
    }
};
exports.precision = { propertyName: 'precision', modelName: '@Precision', displayName: 'DashboardWebStringId.DataItem.Precision', simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel, validationRules: [{ type: 'custom', validationCallback: function (options) { return options.value >= 0; }, message: "Precision shouldn't be negative." }] };
exports.includeGroupSeparator = { propertyName: 'includeGroupSeparator', modelName: '@IncludeGroupSeparator', displayName: 'DashboardWebStringId.DataItem.IncludeGroupSeparator', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.dataItemCurrencyCultureName = { propertyName: 'currencyCultureName', modelName: '@CurrencyCultureName', displayName: 'DashboardStringId.NumericFormatFormatTypeCurrencyCaption', defaultVal: null };
var getNumericFormat = function (defaultFormatType, defaultPrecision) { return ([__assign({}, exports.formatType, { defaultVal: defaultFormatType }), exports.unit, __assign({}, exports.precision, { defaultVal: defaultPrecision }), exports.includeGroupSeparator,
    exports.dataItemCurrencyCultureName,
    exports.customFormatString
]); };
exports.dataItemNumericFormatSerializationsInfo = getNumericFormat('Auto', 2);
exports.absoluteVariationNumericFormatSerializationsInfo = getNumericFormat('Number', 0);
exports.percentVariationNumericFormatSerializationsInfo = getNumericFormat('Percent', 2);
exports.percentOfTargetNumericFormatSerializationsInfo = getNumericFormat('Percent', 2);
exports.yearFormat = {
    propertyName: 'yearFormat', modelName: '@YearFormat', displayName: 'DashboardWebStringId.FormatType', defaultVal: 'Default', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Default': 'DashboardStringId.DateTimeFormatYearFormatDefaultCaption',
        'Full': 'DashboardStringId.DateTimeFormatYearFormatFullCaption',
        'Abbreviated': 'DashboardStringId.DateTimeFormatYearFormatAbbreviatedCaption'
    }
};
exports.namelessYearFormat = _utils_1.deepExtend({}, exports.yearFormat);
delete exports.namelessYearFormat.displayName;
exports.quarterFormat = {
    propertyName: 'quarterFormat', modelName: '@QuarterFormat', displayName: 'DashboardWebStringId.FormatType', defaultVal: 'Default', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Default': 'DashboardStringId.DateTimeFormatQuarterFormatDefaultCaption',
        'Numeric': 'DashboardStringId.DateTimeFormatQuarterFormatNumericCaption',
        'Full': 'DashboardStringId.DateTimeFormatQuarterFormatFullCaption'
    }
};
exports.namelessQuarterFormat = _utils_1.deepExtend({}, exports.quarterFormat);
delete exports.namelessQuarterFormat.displayName;
exports.monthFormat = {
    propertyName: 'monthFormat', modelName: '@MonthFormat', displayName: 'DashboardWebStringId.FormatType', defaultVal: 'Default', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Default': 'DashboardStringId.DateTimeFormatMonthFormatDefaultCaption',
        'Full': 'DashboardStringId.DateTimeFormatMonthFormatFullCaption',
        'Abbreviated': 'DashboardStringId.DateTimeFormatMonthFormatAbbreviatedCaption',
        'Numeric': 'DashboardStringId.DateTimeFormatMonthFormatNumericCaption'
    }
};
exports.namelessMonthFormat = _utils_1.deepExtend({}, exports.monthFormat);
delete exports.namelessMonthFormat.displayName;
exports.dayOfWeekFormat = {
    propertyName: 'dayOfWeekFormat', modelName: '@DayOfWeekFormat', displayName: 'DashboardWebStringId.FormatType', defaultVal: 'Default', simpleFormAdapterItem: 'listEditor', values: {
        'Default': 'DashboardStringId.DateTimeFormatDayOfWeekFormatDefaultCaption',
        'Full': 'DashboardStringId.DateTimeFormatDayOfWeekFormatFullCaption',
        'Abbreviated': 'DashboardStringId.DateTimeFormatDayOfWeekFormatAbbreviatedCaption',
        'Numeric': 'DashboardStringId.DateTimeFormatDayOfWeekFormatNumericCaption'
    }
};
exports.namelessDayOfWeekFormat = _utils_1.deepExtend({}, exports.dayOfWeekFormat);
delete exports.namelessDayOfWeekFormat.displayName;
exports.dateFormat = {
    propertyName: 'dateFormat', modelName: '@DateFormat', displayName: 'DashboardWebStringId.FormatType', defaultVal: 'Default', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Default': 'DashboardStringId.DateTimeFormatDateFormatDefaultCaption',
        'Long': 'DashboardStringId.DateTimeFormatDateFormatLongCaption',
        'Short': 'DashboardStringId.DateTimeFormatDateFormatShortCaption'
    }
};
exports.namelessDateFormat = _utils_1.deepExtend({}, exports.dateFormat);
delete exports.namelessDateFormat.displayName;
exports.dateHourFormat = {
    propertyName: 'dateHourFormat', modelName: '@DateHourFormat', displayName: 'DashboardWebStringId.FormatType', defaultVal: 'Default', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Default': 'DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption',
        'Long': 'DashboardStringId.DateTimeFormatDateTimeFormatLongCaption',
        'Short': 'DashboardStringId.DateTimeFormatDateTimeFormatShortCaption',
        'TimeOnly': 'DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption'
    }
};
exports.namelessDateHourFormat = _utils_1.deepExtend({}, exports.dateHourFormat);
delete exports.namelessDateHourFormat.displayName;
exports.dateHourMinuteFormat = {
    propertyName: 'dateHourMinuteFormat', modelName: '@DateHourMinuteFormat', displayName: 'DashboardWebStringId.FormatType', defaultVal: 'Default', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Default': 'DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption',
        'Long': 'DashboardStringId.DateTimeFormatDateTimeFormatLongCaption',
        'Short': 'DashboardStringId.DateTimeFormatDateTimeFormatShortCaption',
        'TimeOnly': 'DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption'
    }
};
exports.namelessDateHourMinuteFormat = _utils_1.deepExtend({}, exports.dateHourMinuteFormat);
delete exports.namelessDateHourMinuteFormat.displayName;
exports.dateTimeWithSecondsFormat = {
    propertyName: 'dateTimeFormat', modelName: '@DateTimeFormat', displayName: 'DashboardWebStringId.FormatType', defaultVal: 'Default', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Default': 'DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption',
        'Long': 'DashboardStringId.DateTimeFormatDateTimeFormatLongCaption',
        'Short': 'DashboardStringId.DateTimeFormatDateTimeFormatShortCaption',
        'TimeOnly': 'DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption'
    }
};
exports.namelessDateTimeWithSecondsFormat = _utils_1.deepExtend({}, exports.dateTimeWithSecondsFormat);
delete exports.namelessDateTimeWithSecondsFormat.displayName;
exports.hourFormat = {
    propertyName: 'hourFormat', modelName: '@HourFormat', displayName: 'DashboardWebStringId.FormatType', defaultVal: 'Default', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Default': 'DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption',
        'Short': 'DashboardStringId.DateTimeFormatDateTimeFormatShortCaption',
        'Long': 'DashboardStringId.DateTimeFormatDateTimeFormatLongCaption'
    }
};
exports.namelessHourFormat = _utils_1.deepExtend({}, exports.hourFormat);
delete exports.namelessHourFormat.displayName;
exports.exactDateFormat = {
    propertyName: 'exactDateFormat', modelName: '@ExactDateFormat', displayName: 'DashboardWebStringId.FormatType', defaultVal: 'Day', simpleFormAdapterItem: 'listEditor', values: {
        'Year': 'DashboardStringId.ExactDateFormatYear',
        'Quarter': 'DashboardStringId.ExactDateFormatQuarter',
        'Month': 'DashboardStringId.ExactDateFormatMonth',
        'Day': 'DashboardStringId.ExactDateFormatDay',
        'Hour': 'DashboardStringId.ExactDateFormatHour',
        'Minute': 'DashboardStringId.ExactDateFormatMinute',
        'Second': 'DashboardStringId.ExactDateFormatSecond'
    }
};
exports.namelessExactDateFormat = _utils_1.deepExtend({}, exports.exactDateFormat);
delete exports.namelessExactDateFormat.displayName;
exports.dataItemDateTimeFormatSerializationsInfo = [exports.yearFormat, exports.quarterFormat, exports.monthFormat, exports.dayOfWeekFormat, exports.dateFormat, exports.dateHourFormat, exports.dateHourMinuteFormat, exports.dateTimeWithSecondsFormat, exports.hourFormat, exports.exactDateFormat];


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var color_1 = __webpack_require__(50);
var _style_settings_base_1 = __webpack_require__(72);
exports.appearanceType = {
    propertyName: 'appearanceType', modelName: '@AppearanceType', displayName: 'DashboardWebStringId.ConditionalFormatting.AppearanceType', defaultVal: _style_settings_base_1.emptyStyleType, simpleFormAdapterItem: 'selectBoxEditor', values: {
        'None': 'DashboardStringId.FormatConditionAppearanceNone',
        'Custom': 'DashboardStringId.FormatConditionAppearanceCustom',
        'PaleRed': 'DashboardStringId.FormatConditionAppearancePaleRed',
        'PaleYellow': 'DashboardStringId.FormatConditionAppearancePaleYellow',
        'PaleGreen': 'DashboardStringId.FormatConditionAppearancePaleGreen',
        'PaleBlue': 'DashboardStringId.FormatConditionAppearancePaleBlue',
        'PalePurple': 'DashboardStringId.FormatConditionAppearancePalePurple',
        'PaleCyan': 'DashboardStringId.FormatConditionAppearancePaleCyan',
        'PaleOrange': 'DashboardStringId.FormatConditionAppearancePaleOrange',
        'PaleGray': 'DashboardStringId.FormatConditionAppearancePaleGray',
        'Red': 'DashboardStringId.FormatConditionAppearanceRed',
        'Yellow': 'DashboardStringId.FormatConditionAppearanceYellow',
        'Green': 'DashboardStringId.FormatConditionAppearanceGreen',
        'Blue': 'DashboardStringId.FormatConditionAppearanceBlue',
        'Purple': 'DashboardStringId.FormatConditionAppearancePurple',
        'Cyan': 'DashboardStringId.FormatConditionAppearanceCyan',
        'Orange': 'DashboardStringId.FormatConditionAppearanceOrange',
        'Gray': 'DashboardStringId.FormatConditionAppearanceGray',
        'GradientRed': 'DashboardStringId.FormatConditionAppearanceGradientRed',
        'GradientYellow': 'DashboardStringId.FormatConditionAppearanceGradientYellow',
        'GradientGreen': 'DashboardStringId.FormatConditionAppearanceGradientGreen',
        'GradientBlue': 'DashboardStringId.FormatConditionAppearanceGradientBlue',
        'GradientPurple': 'DashboardStringId.FormatConditionAppearanceGradientPurple',
        'GradientCyan': 'DashboardStringId.FormatConditionAppearanceGradientCyan',
        'GradientOrange': 'DashboardStringId.FormatConditionAppearanceGradientOrange',
        'GradientTransparent': 'DashboardStringId.FormatConditionAppearanceGradientTransparent',
        'FontBold': 'DashboardStringId.FormatConditionAppearanceFontBold',
        'FontItalic': 'DashboardStringId.FormatConditionAppearanceFontItalic',
        'FontUnderline': 'DashboardStringId.FormatConditionAppearanceFontUnderline',
        'FontGrayed': 'DashboardStringId.FormatConditionAppearanceFontGrayed',
        'FontRed': 'DashboardStringId.FormatConditionAppearanceFontRed',
        'FontYellow': 'DashboardStringId.FormatConditionAppearanceFontYellow',
        'FontGreen': 'DashboardStringId.FormatConditionAppearanceFontGreen',
        'FontBlue': 'DashboardStringId.FormatConditionAppearanceFontBlue'
    }
};
exports.fontStyle = {
    propertyName: 'fontStyle', modelName: '@FontStyle', displayName: 'DashboardWebStringId.ConditionalFormatting.FontStyle', defaultVal: null, simpleFormAdapterItem: 'selectBoxEditor', values: {
        'Regular': 'DashboardWebStringId.ConditionalFormatting.FontRegular',
        'Bold': 'DashboardStringId.FormatConditionAppearanceFontBold',
        'Italic': 'DashboardStringId.FormatConditionAppearanceFontItalic',
        'Underline': 'DashboardStringId.FormatConditionAppearanceFontUnderline',
        'Strikeout': 'DashboardStringId.FormatConditionAppearanceFontStrikeout'
    }
};
exports.fontFamily = { propertyName: 'fontFamily', modelName: '@FontFamily', displayName: 'DashboardWebStringId.ConditionalFormatting.FontFamily', defaultVal: 'Segoe UI', simpleFormAdapterItem: 'textBoxEditor' };
exports.backColor = { propertyName: 'backColor', modelName: '@BackColor', displayName: 'DashboardWebStringId.ConditionalFormatting.Appearance.BackColor', defaultVal: null, from: color_1.Color._colorFromModel, toJsonObject: color_1.Color._colorToModel, simpleFormAdapterItem: 'numberBoxEditor' };
exports.foreColor = { propertyName: 'foreColor', modelName: '@ForeColor', displayName: 'DashboardWebStringId.ConditionalFormatting.Appearance.ForeColor', defaultVal: null, from: color_1.Color._colorFromModel, toJsonObject: color_1.Color._colorToModel, simpleFormAdapterItem: 'numberBoxEditor' };
exports.appearanceSettingsSerializationsInfo = _style_settings_base_1.styleSettingsBaseSerializationsInfo.concat([exports.appearanceType, exports.backColor, exports.foreColor, exports.fontFamily, exports.fontStyle]);


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _style_settings_base_1 = __webpack_require__(72);
exports.iconType = {
    propertyName: 'iconType', modelName: '@IconType', displayName: 'DashboardWebStringId.ConditionalFormatting.IconType', defaultVal: 'None', simpleFormAdapterItem: 'selectBoxEditor', values: {
        'None': 'DashboardWebStringId.ConditionalFormatting.IconType.None',
        'DirectionalGreenArrowUp': 'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenArrowUp',
        'DirectionalYellowUpInclineArrow': 'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowUpInclineArrow',
        'DirectionalYellowSideArrow': 'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowSideArrow',
        'DirectionalYellowDownInclineArrow': 'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDownInclineArrow',
        'DirectionalRedDownArrow': 'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedDownArrow',
        'DirectionalGrayArrowUp': 'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayArrowUp',
        'DirectionalGrayUpInclineArrow': 'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayUpInclineArrow',
        'DirectionalGraySideArrow': 'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGraySideArrow',
        'DirectionalGrayDownInclineArrow': 'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownInclineArrow',
        'DirectionalGrayDownArrow': 'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownArrow',
        'DirectionalYellowDash': 'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDash',
        'DirectionalRedTriangleDown': 'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedTriangleDown',
        'DirectionalGreenTriangleUp': 'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenTriangleUp',
        'RatingFullGrayStar': 'DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayStar',
        'RatingHalfGrayStar': 'DashboardWebStringId.ConditionalFormatting.IconType.RatingHalfGrayStar',
        'RatingEmptyGrayStar': 'DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayStar',
        'RatingFullGrayCircle': 'DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayCircle',
        'Rating1QuarterGrayCircle': 'DashboardWebStringId.ConditionalFormatting.IconType.Rating1QuarterGrayCircle',
        'Rating2QuartersGrayCircle': 'DashboardWebStringId.ConditionalFormatting.IconType.Rating2QuartersGrayCircle',
        'Rating3QuartersGrayCircle': 'DashboardWebStringId.ConditionalFormatting.IconType.Rating3QuartersGrayCircle',
        'RatingEmptyGrayCircle': 'DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayCircle',
        'Rating4Bars': 'DashboardWebStringId.ConditionalFormatting.IconType.Rating4Bars',
        'Rating3Bars': 'DashboardWebStringId.ConditionalFormatting.IconType.Rating3Bars',
        'Rating2Bars': 'DashboardWebStringId.ConditionalFormatting.IconType.Rating2Bars',
        'Rating1Bar': 'DashboardWebStringId.ConditionalFormatting.IconType.Rating1Bar',
        'Rating0Bars': 'DashboardWebStringId.ConditionalFormatting.IconType.Rating0Bars',
        'Rating4FilledBoxes': 'DashboardWebStringId.ConditionalFormatting.IconType.Rating4FilledBoxes',
        'Rating3FilledBoxes': 'DashboardWebStringId.ConditionalFormatting.IconType.Rating3FilledBoxes',
        'Rating2FilledBoxes': 'DashboardWebStringId.ConditionalFormatting.IconType.Rating2FilledBoxes',
        'Rating1FilledBox': 'DashboardWebStringId.ConditionalFormatting.IconType.Rating1FilledBox',
        'Rating0FilledBoxes': 'DashboardWebStringId.ConditionalFormatting.IconType.Rating0FilledBoxes',
        'ShapeGreenTrafficLight': 'DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenTrafficLight',
        'ShapeYellowTrafficLight': 'DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTrafficLight',
        'ShapeRedTrafficLight': 'DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedTrafficLight',
        'ShapeGreenCircle': 'DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenCircle',
        'ShapeYellowCircle': 'DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowCircle',
        'ShapeRedCircle': 'DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedCircle',
        'ShapeLightRedCircle': 'DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightRedCircle',
        'ShapeLightGrayCircle': 'DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightGrayCircle',
        'ShapeYellowTriangle': 'DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTriangle',
        'ShapeRedDiamond': 'DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedDiamond',
        'IndicatorGreenCheck': 'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenCheck',
        'IndicatorYellowExclamation': 'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowExclamation',
        'IndicatorRedCross': 'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedCross',
        'IndicatorCircledGreenCheck': 'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledGreenCheck',
        'IndicatorCircledYellowExclamation': 'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledYellowExclamation',
        'IndicatorCircledRedCross': 'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledRedCross',
        'IndicatorGreenFlag': 'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenFlag',
        'IndicatorYellowFlag': 'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowFlag',
        'IndicatorRedFlag': 'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedFlag'
    }
};
exports.iconSettingsSerializationsInfo = _style_settings_base_1.styleSettingsBaseSerializationsInfo.concat([exports.iconType]);


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.formatConditionBaseSerializationsInfo = [];


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
var _format_condition_style_base_1 = __webpack_require__(83);
exports.minimumType = {
    propertyName: 'minimumType', modelName: '@MinimumType', displayName: 'DashboardWebStringId.ConditionalFormatting.MinimumType', defaultVal: 'Automatic', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Automatic': 'DashboardStringId.FormatConditionAutomaticValueType',
        'Number': 'DashboardStringId.FormatConditionNumberValueType',
        'Percent': 'DashboardStringId.FormatConditionPercentValueType'
    }
};
exports.maximumType = {
    propertyName: 'maximumType', modelName: '@MaximumType', displayName: 'DashboardWebStringId.ConditionalFormatting.MaximumType', defaultVal: 'Automatic', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Automatic': 'DashboardStringId.FormatConditionAutomaticValueType',
        'Number': 'DashboardStringId.FormatConditionNumberValueType',
        'Percent': 'DashboardStringId.FormatConditionPercentValueType'
    }
};
exports.formatConditionMinimum = { propertyName: 'minimum', modelName: '@Minimum', displayName: 'DashboardWebStringId.ConditionalFormatting.ConditionMinimum', defaultVal: 0, simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel };
exports.formatConditionMaximum = { propertyName: 'maximum', modelName: '@Maximum', displayName: 'DashboardWebStringId.ConditionalFormatting.ConditionMaximum', defaultVal: 0, simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel };
exports.formatConditionMinMaxBaseSerializationsInfo = _format_condition_style_base_1.formatConditionStyleBaseSerializationsInfo.concat([exports.minimumType, exports.maximumType, exports.formatConditionMinimum, exports.formatConditionMaximum]);


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
var _format_condition_style_base_1 = __webpack_require__(83);
exports.rank = { propertyName: 'rank', modelName: '@Rank', displayName: 'DashboardStringId.SummaryTypeCount', defaultVal: 5, simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel, editorOptions: { min: 1 }, validationRules: [_base_metadata_1.integerValidationRule] };
exports.rankType = {
    propertyName: 'rankType', modelName: '@RankType', displayName: 'DashboardWebStringId.Calculations.RankType', defaultVal: 'Automatic', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Number': 'DashboardStringId.FormatConditionNumberValueType',
        'Percent': 'DashboardStringId.FormatConditionPercentValueType'
    }
};
exports.topBottom = {
    propertyName: 'topBottom', modelName: '@TopBottomType', displayName: 'DashboardWebStringId.TopNMode', defaultVal: 'Top', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Top': 'DashboardStringId.CommandFormatRuleTopN',
        'Bottom': 'DashboardStringId.CommandFormatRuleBottomN'
    }
};
exports.formatConditionTopBottomSerializationsInfo = _format_condition_style_base_1.formatConditionStyleBaseSerializationsInfo.concat([exports.rank, exports.rankType, exports.topBottom]);


/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var format_rules_common_1 = __webpack_require__(272);
var _format_condition_style_base_1 = __webpack_require__(83);
exports.conditionInCondition = {
    propertyName: 'condition', modelName: '@Condition', defaultVal: 'Equal', simpleFormAdapterItem: 'selectBoxEditor', values: {
        'Greater': 'DashboardStringId.CommandFormatRuleGreaterThan',
        'GreaterOrEqual': 'DashboardStringId.CommandFormatRuleGreaterThanOrEqualTo',
        'Less': 'DashboardStringId.CommandFormatRuleLessThan',
        'LessOrEqual': 'DashboardStringId.CommandFormatRuleLessThanOrEqualTo',
        'Equal': 'DashboardStringId.CommandFormatRuleEqualTo',
        'NotEqual': 'DashboardStringId.CommandFormatRuleNotEqualTo',
        'Between': 'DashboardStringId.CommandFormatRuleBetween',
        'NotBetween': 'DashboardStringId.CommandFormatRuleNotBetween',
        'BetweenOrEqual': 'DashboardStringId.CommandFormatRuleBetweenOrEqual',
        'NotBetweenOrEqual': 'DashboardStringId.CommandFormatRuleNotBetweenOrEqual',
        'ContainsText': 'DashboardStringId.CommandFormatRuleContains'
    }
};
exports.formatConditionValue1 = { propertyName: 'value1', modelName: 'Value1', displayName: 'DashboardStringId.Value1Caption', type: format_rules_common_1.ComplexValue };
exports.formatConditionValue2 = { propertyName: 'value2', modelName: 'Value2', displayName: 'DashboardStringId.Value2Caption', type: format_rules_common_1.ComplexValue };
exports.formatConditionValueSerializationsInfo = _format_condition_style_base_1.formatConditionStyleBaseSerializationsInfo.concat([exports.conditionInCondition, exports.formatConditionValue1, exports.formatConditionValue2]);


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var serializable_model_1 = __webpack_require__(5);
var appearance_settings_1 = __webpack_require__(67);
var bar_style_settings_1 = __webpack_require__(53);
var icon_settings_1 = __webpack_require__(73);
var format_condition_style_base_1 = __webpack_require__(66);
var _range_info_1 = __webpack_require__(275);
var rangeStyleSettingsTypesMap = {
    'AppearanceSettings': appearance_settings_1.AppearanceSettings,
    'IconSettings': icon_settings_1.IconSettings,
    'BarStyleSettings': bar_style_settings_1.BarStyleSettings
};
var RangeInfo = (function (_super) {
    __extends(RangeInfo, _super);
    function RangeInfo(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.styleSettings = ko.observable();
        _this._styleSettingsType = ko.observable();
        _this._styleSettingsType(Object.keys(rangeStyleSettingsTypesMap).filter(function (mapItem) { return !!modelJson && modelJson[mapItem]; })[0]);
        if (_this._styleSettingsType()) {
            _this.styleSettings(new rangeStyleSettingsTypesMap[_this._styleSettingsType()]((modelJson || {})[_this._styleSettingsType()]));
            delete _this['_model'][_this._styleSettingsType()];
        }
        _this.styleSettings.subscribe(function (styleSettings) {
            _this._styleSettingsType(Object.keys(rangeStyleSettingsTypesMap).filter(function (mapItem) { return styleSettings instanceof rangeStyleSettingsTypesMap[mapItem]; })[0]);
        });
        return _this;
    }
    RangeInfo.prototype.getInfo = function () {
        var styleSettingsInfo = format_condition_style_base_1.currentStyleSettingInfo(this._styleSettingsType);
        if (!styleSettingsInfo || styleSettingsInfo.length == 0 || !styleSettingsInfo[0].modelName) {
            styleSettingsInfo = [
                {
                    propertyName: 'styleSettings',
                    modelName: 'FakeSettingsForModelSubscriber',
                    from: function (json, serializer) { return undefined; },
                    toJsonObject: function (value, serializer, refs) { return null; }
                }
            ];
        }
        return _range_info_1.rangeInfoSerializationsInfo.concat(styleSettingsInfo);
    };
    RangeInfo.prototype.clone = function () {
        var rangeInfo = new RangeInfo();
        rangeInfo.value.setValue(this.value.value(), this.value.type());
        rangeInfo.styleSettings(this.styleSettings().clone());
        return rangeInfo;
    };
    RangeInfo.prototype._getDefaultItemType = function () {
        return 'RangeInfo';
    };
    return RangeInfo;
}(serializable_model_1.TypedSerializableModel));
exports.RangeInfo = RangeInfo;


/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _format_condition_range_base_1 = __webpack_require__(128);
exports.segmentNumber = { propertyName: 'segmentNumber', displayName: 'DashboardWebStringId.ConditionalFormatting.SegmentNumber', defaultVal: 10, simpleFormAdapterItem: 'numberBoxEditor' };
exports.formatConditionRangeGradientSerializationsInfo = _format_condition_range_base_1.formatConditionRangeBaseSerializationsInfo.concat([]);


/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var dashboard_item_format_rule_1 = __webpack_require__(262);
var _cells_item_format_rule_1 = __webpack_require__(85);
var CellsItemFormatRule = (function (_super) {
    __extends(CellsItemFormatRule, _super);
    function CellsItemFormatRule(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.dataItemApplyToName = ko.computed({
            read: function () { return _this._dataItemApplyToName() || _this.dataItemName(); },
            write: function (val) { return _this._dataItemApplyToName(val); }
        });
        return _this;
    }
    CellsItemFormatRule.prototype.getInfo = function () {
        return _cells_item_format_rule_1.cellsItemFormatRuleSerializationsInfo;
    };
    return CellsItemFormatRule;
}(dashboard_item_format_rule_1.DashboardItemFormatRule));
exports.CellsItemFormatRule = CellsItemFormatRule;


/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
exports.useGlobalColors = {
    propertyName: 'useGlobalColors', modelName: '@UseGlobalColors', displayName: 'DashboardWebStringId.Colorization.ColorSchemeType', defaultVal: true, simpleFormAdapterItem: 'buttonGroupEditor', from: _base_metadata_1.parseBool,
    valuesArray: [{
            value: true,
            displayValue: 'DashboardWebStringId.Coloring.Global'
        }, {
            value: false,
            displayValue: 'DashboardWebStringId.Coloring.Local'
        }],
    category: _base_metadata_1.PropertyCategory.Coloring
};
exports.measuresColoringMode = {
    propertyName: 'measuresColoringMode', modelName: '@MeasuresColoringMode', displayName: 'DashboardWebStringId.Coloring.MeasuresColoringMode', defaultVal: 'Default', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'Default': 'DashboardWebStringId.ColoringModeAuto',
        'None': 'DashboardWebStringId.ColoringModeOff',
        'Hue': 'DashboardWebStringId.ColoringModeOn'
    }
};
exports.dashboardItemColoringOptionsSerializationsInfo = [exports.useGlobalColors, exports.measuresColoringMode];


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var _knockout_utils_1 = __webpack_require__(17);
var _undo_engine_helper_1 = __webpack_require__(27);
var dashboard_item_1 = __webpack_require__(60);
var group_item_1 = __webpack_require__(131);
var dashboard_tab_page_1 = __webpack_require__(86);
var tab_container_item_1 = __webpack_require__(87);
var serializable_model_1 = __webpack_require__(5);
var _dashboard_layout_node_1 = __webpack_require__(287);
var DashboardLayoutNode = (function (_super) {
    __extends(DashboardLayoutNode, _super);
    function DashboardLayoutNode(dashboardLayoutItemJSON, serializer) {
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, dashboardLayoutItemJSON, serializer) || this;
        _this.parentNode = ko.observable();
        _this._dashboard = ko.observable();
        _this._item = ko.observable();
        _this._relativeWidth = ko.computed(function () {
            if (!_this.parentNode()) {
                return 1;
            }
            else if (_this.parentNode().orientation() === 'Horizontal')
                return _this.parentNode()._relativeWidth() * (_this.weight() / _this.parentNode().childNodes().reduce(function (acc, item) { return acc + item.weight(); }, 0));
            else
                return _this.parentNode()._relativeWidth();
        });
        _this._relativeHeight = ko.computed(function () {
            if (!_this.parentNode()) {
                return 1;
            }
            else if (_this.parentNode().orientation() === 'Vertical')
                return _this.parentNode()._relativeHeight() * (_this.weight() / _this.parentNode().childNodes().reduce(function (acc, item) { return acc + item.weight(); }, 0));
            else
                return _this.parentNode()._relativeHeight();
        });
        _this._relativeArea = ko.computed(function () {
            return _this._relativeWidth() * _this._relativeHeight();
        });
        _this._activeTabPage = ko.observable(undefined);
        _this._activeTabIndex = ko.observable(0);
        _knockout_utils_1.safeSubscribe({
            dashboard: _this._dashboard
        }, function (args) {
            if (args.dashboard) {
                return _knockout_utils_1.safeSubscribe({
                    allItems: args.dashboard._allItems,
                    componentName: _this.dashboardItem
                }, function (innerArgs) {
                    var dashboardItem = innerArgs.allItems.filter(function (item) { return item.componentName() === innerArgs.componentName; })[0] || null;
                    if (dashboardItem !== _this._item()) {
                        _this._item(dashboardItem);
                    }
                });
            }
            else {
                _this._item(null);
            }
        });
        ko.computed(function () {
            _this._dashboard(_this.parentNode() && _this.parentNode()._dashboard() || null);
        });
        _this.parentNode.subscribe(function (_) { return _this._ensureItemParentContainer(); });
        _this._item.subscribe(function (_) { return _this._ensureItemParentContainer(); });
        var _subscription;
        if (!_this.weight()) {
            _this.weight(1);
        }
        return _this;
    }
    DashboardLayoutNode._canAttach = function (parent, dashboardLayoutNode) {
        if (dashboardLayoutNode) {
            var containsParent = function (predicate) {
                var container = parent;
                while (!!container) {
                    if (predicate(container)) {
                        return true;
                    }
                    container = container.parentNode();
                }
                return false;
            };
            var itemType = dashboardLayoutNode instanceof DashboardLayoutNode ? dashboardLayoutNode._getDefaultItemType() : dashboardLayoutNode['@ItemType'];
            if (itemType === 'TabContainer' || itemType === 'LayoutTabContainer') {
                return !containsParent(function (container) { return container.item instanceof group_item_1.GroupItem; }) &&
                    !containsParent(function (container) { return container.item instanceof tab_container_item_1.TabContainerItem; });
            }
            var isVisbleGroup = function (node) {
                if (node instanceof DashboardLayoutNode) {
                    return !!node.dashboardItem();
                }
                else {
                    return true;
                }
            };
            if ((itemType === 'Group' || itemType === 'LayoutGroup') && isVisbleGroup(dashboardLayoutNode)) {
                return !containsParent(function (container) { return container.item instanceof group_item_1.GroupItem; });
            }
        }
        return true;
    };
    Object.defineProperty(DashboardLayoutNode.prototype, "item", {
        get: function () {
            return this._item();
        },
        set: function (newItem) {
            if (this.item !== newItem) {
                this._setItemCore(newItem);
            }
        },
        enumerable: true,
        configurable: true
    });
    DashboardLayoutNode.prototype.getInfo = function () {
        return _dashboard_layout_node_1.layoutItemSerializationsInfo;
    };
    DashboardLayoutNode.prototype.findLayoutItem = function (dashboardItem) {
        return this.item === dashboardItem ? this : undefined;
    };
    DashboardLayoutNode.prototype.insert = function (itemToInsert, position) {
        var layoutNodeToInsert = null;
        if (itemToInsert instanceof dashboard_item_1.DashboardItem)
            layoutNodeToInsert = this._dashboard() && this._dashboard()._createDashboardLayoutNode(itemToInsert) || null;
        else
            layoutNodeToInsert = itemToInsert;
        if (!layoutNodeToInsert || !this._canAttach(layoutNodeToInsert)) {
            return;
        }
        this._insertItemCore(layoutNodeToInsert, position);
    };
    DashboardLayoutNode.prototype.moveTo = function (targetItem, position) {
        this._moveTo(targetItem, position);
    };
    DashboardLayoutNode.prototype._moveTo = function (targetItem, position, insertionBehavior) {
        this.remove();
        targetItem._insertItemCore(this, position, insertionBehavior);
    };
    DashboardLayoutNode.prototype.remove = function () {
        if (this.parentNode()) {
            this.parentNode()._detachChild(this);
            this.parentNode(null);
        }
    };
    DashboardLayoutNode.prototype._create = function (modelItemJson, position, insertionBehavior) {
        var newItemModel = this._dashboard()._createDashboardLayoutItem(modelItemJson);
        if (!!this.weight()) {
            newItemModel.weight(this.weight());
        }
        this._insertItemCore(newItemModel, position, insertionBehavior);
        return newItemModel;
    };
    DashboardLayoutNode.prototype._validateParentNode = function (newParentNode) {
        this.parentNode(newParentNode);
    };
    DashboardLayoutNode.prototype._canAttach = function (itemToAttach) {
        return DashboardLayoutNode._canAttach(this.parentNode(), itemToAttach);
    };
    DashboardLayoutNode.prototype._createViewModel = function () {
        var _this = this;
        if (!this._viewModel) {
            this._viewModel = {
                model: this,
                dashboardItem: this.dashboardItem,
                template: this._template,
                hasItem: ko.computed(function () { return !!_this.item; }),
                item: ko.computed(function () {
                    if (_this.item instanceof dashboard_tab_page_1.DashboardTabPage) {
                        return _this._dashboard()._getDisplayDashboardItem(_this.item);
                    }
                    return _this.item;
                }),
                create: function (modelItemJson, location, insertionBehavior) {
                    var layoutItemModel = _this._create(modelItemJson, location, insertionBehavior);
                    return layoutItemModel && layoutItemModel._createViewModel() || null;
                },
                createTabPage: function () { return _this._createTabPage(); },
                moveTo: function (itemViewModel, location, insertionBehavior) {
                    _this._moveTo(itemViewModel.model, location, insertionBehavior);
                    return itemViewModel.model._createViewModel();
                },
                delete: function () { return _this._delete(); },
                canAttach: function (something) { return _this._canAttach(something.model ? something.model : something); },
                ignoreChildMaxHeight: this._ignoreChildMaxHeight,
                orientation: this._orientation,
                getPlaceholder: this._createPlaceholderFunc,
                weight: this.weight,
                visibleItems: this._visibleItems,
                childItems: this._childItems,
                activeTabPage: this._activeTabPage,
                activeTabIndex: this._activeTabIndex,
                dragOverInnerElementController: this._dragOverInnerElementController
            };
        }
        return this._viewModel;
    };
    Object.defineProperty(DashboardLayoutNode.prototype, "_template", {
        get: function () { return ''; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardLayoutNode.prototype, "_ignoreChildMaxHeight", {
        get: function () { return false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardLayoutNode.prototype, "_visibleItems", {
        get: function () { return ko.observableArray([]); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardLayoutNode.prototype, "_childItems", {
        get: function () { return ko.observableArray([]); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardLayoutNode.prototype, "_orientation", {
        get: function () { return ko.observable('Horizontal'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardLayoutNode.prototype, "_createPlaceholderFunc", {
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardLayoutNode.prototype, "_dragOverInnerElementController", {
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    DashboardLayoutNode.prototype._delete = function () {
        this._deleteDashbordItem();
        this.remove();
    };
    DashboardLayoutNode.prototype._insertItemCore = function (layoutNodeToInsert, position, insertionBehavior) {
        if (this.parentNode()) {
            this.parentNode()._attachChild(this, layoutNodeToInsert, position);
        }
    };
    DashboardLayoutNode.prototype._setItemCore = function (newItem) {
        this.dashboardItem(newItem.componentName());
    };
    DashboardLayoutNode.prototype._createTabPage = function () {
    };
    DashboardLayoutNode.prototype._ensureItemParentContainer = function () {
        if (!!this._item()) {
            var current = this.parentNode();
            while (!!current && !(current._item() instanceof group_item_1.GroupItem || current._item() instanceof dashboard_tab_page_1.DashboardTabPage)) {
                current = current.parentNode();
            }
            if (!!current && (current._item() instanceof group_item_1.GroupItem || current._item() instanceof dashboard_tab_page_1.DashboardTabPage)) {
                this._item().parentContainer(current._item().componentName());
            }
            else {
                this._item().parentContainer(undefined);
            }
        }
    };
    DashboardLayoutNode.prototype._deleteDashbordItem = function () {
    };
    __decorate([
        _undo_engine_helper_1.wrapWithUndoRedo
    ], DashboardLayoutNode.prototype, "insert", null);
    __decorate([
        _undo_engine_helper_1.wrapWithUndoRedo
    ], DashboardLayoutNode.prototype, "_moveTo", null);
    __decorate([
        _undo_engine_helper_1.wrapWithUndoRedo
    ], DashboardLayoutNode.prototype, "remove", null);
    __decorate([
        _undo_engine_helper_1.wrapWithUndoRedo
    ], DashboardLayoutNode.prototype, "_create", null);
    __decorate([
        _undo_engine_helper_1.wrapWithUndoRedo
    ], DashboardLayoutNode.prototype, "_delete", null);
    return DashboardLayoutNode;
}(serializable_model_1.TypedSerializableModel));
exports.DashboardLayoutNode = DashboardLayoutNode;


/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(124));
__export(__webpack_require__(434));
__export(__webpack_require__(469));
__export(__webpack_require__(82));
__export(__webpack_require__(288));
__export(__webpack_require__(470));
__export(__webpack_require__(471));
__export(__webpack_require__(472));
__export(__webpack_require__(20));
__export(__webpack_require__(179));
__export(__webpack_require__(71));
__export(__webpack_require__(70));
__export(__webpack_require__(473));
__export(__webpack_require__(474));
__export(__webpack_require__(433));
__export(__webpack_require__(475));
__export(__webpack_require__(476));
__export(__webpack_require__(51));
__export(__webpack_require__(477));
__export(__webpack_require__(478));
__export(__webpack_require__(479));
__export(__webpack_require__(480));
__export(__webpack_require__(438));
__export(__webpack_require__(435));
__export(__webpack_require__(289));
__export(__webpack_require__(481));
__export(__webpack_require__(437));
__export(__webpack_require__(61));
__export(__webpack_require__(482));
__export(__webpack_require__(483));
__export(__webpack_require__(484));
__export(__webpack_require__(485));
__export(__webpack_require__(486));
__export(__webpack_require__(487));
__export(__webpack_require__(488));
__export(__webpack_require__(265));
__export(__webpack_require__(267));
__export(__webpack_require__(266));
__export(__webpack_require__(182));
__export(__webpack_require__(268));
__export(__webpack_require__(270));
__export(__webpack_require__(183));
__export(__webpack_require__(83));
__export(__webpack_require__(184));
__export(__webpack_require__(185));
__export(__webpack_require__(128));
__export(__webpack_require__(449));
__export(__webpack_require__(187));
__export(__webpack_require__(452));
__export(__webpack_require__(276));
__export(__webpack_require__(275));
__export(__webpack_require__(448));
__export(__webpack_require__(85));
__export(__webpack_require__(52));
__export(__webpack_require__(54));
__export(__webpack_require__(455));
__export(__webpack_require__(282));
__export(__webpack_require__(283));
__export(__webpack_require__(180));
__export(__webpack_require__(440));
__export(__webpack_require__(181));
__export(__webpack_require__(72));
__export(__webpack_require__(290));
__export(__webpack_require__(490));
__export(__webpack_require__(195));
__export(__webpack_require__(491));
__export(__webpack_require__(293));
__export(__webpack_require__(292));
__export(__webpack_require__(495));
__export(__webpack_require__(134));
__export(__webpack_require__(135));
__export(__webpack_require__(295));
__export(__webpack_require__(497));
__export(__webpack_require__(198));
__export(__webpack_require__(199));
__export(__webpack_require__(461));
__export(__webpack_require__(463));
__export(__webpack_require__(297));
__export(__webpack_require__(298));
__export(__webpack_require__(88));
__export(__webpack_require__(299));
__export(__webpack_require__(300));
__export(__webpack_require__(301));
__export(__webpack_require__(302));
__export(__webpack_require__(498));
__export(__webpack_require__(303));
__export(__webpack_require__(304));
__export(__webpack_require__(305));
__export(__webpack_require__(467));
__export(__webpack_require__(192));
__export(__webpack_require__(194));
__export(__webpack_require__(500));
__export(__webpack_require__(308));
__export(__webpack_require__(201));
__export(__webpack_require__(306));
__export(__webpack_require__(136));
__export(__webpack_require__(506));
__export(__webpack_require__(68));
__export(__webpack_require__(44));
__export(__webpack_require__(307));
__export(__webpack_require__(505));
__export(__webpack_require__(309));
__export(__webpack_require__(202));
__export(__webpack_require__(196));
__export(__webpack_require__(74));
__export(__webpack_require__(26));
__export(__webpack_require__(137));
__export(__webpack_require__(107));
__export(__webpack_require__(203));
__export(__webpack_require__(75));
__export(__webpack_require__(189));
__export(__webpack_require__(133));
__export(__webpack_require__(130));
__export(__webpack_require__(193));
__export(__webpack_require__(310));
__export(__webpack_require__(311));
__export(__webpack_require__(312));
__export(__webpack_require__(313));
__export(__webpack_require__(204));
__export(__webpack_require__(200));
__export(__webpack_require__(314));
__export(__webpack_require__(315));
__export(__webpack_require__(286));
__export(__webpack_require__(466));
__export(__webpack_require__(316));
__export(__webpack_require__(287));
__export(__webpack_require__(4));
__export(__webpack_require__(510));
__export(__webpack_require__(511));
__export(__webpack_require__(205));
__export(__webpack_require__(317));
__export(__webpack_require__(318));
__export(__webpack_require__(321));


/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _data_item_1 = __webpack_require__(20);
var _base_metadata_1 = __webpack_require__(4);
var delta_options_1 = __webpack_require__(132);
exports.kpiItemdeltaOptions = { propertyName: 'deltaOptions', modelName: 'DeltaOptions', displayName: 'DashboardWebStringId.Grid.DeltaOptions', type: delta_options_1.DeltaOptions };
exports.kpiItemActualValue = { propertyName: _base_metadata_1.actualValuePropertyName, modelName: 'ActualValue', info: _data_item_1.dataItemLinkSerializationsInfo, displayName: 'DashboardStringId.ActualValueCaption' };
exports.kpiItemTargetValue = { propertyName: _base_metadata_1.targetValuePropertyName, modelName: 'TargetValue', info: _data_item_1.dataItemLinkSerializationsInfo, displayName: 'DashboardStringId.TargetValueCaption' };
exports.kpiElementSerializationsInfo = [_base_metadata_1.itemType, _base_metadata_1.name, exports.kpiItemdeltaOptions, exports.kpiItemActualValue, exports.kpiItemTargetValue, _data_item_1.absoluteVariationNumericFormat, _data_item_1.percentVariationNumericFormat, _data_item_1.percentOfTargetNumericFormat];


/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
exports.viewType = { propertyName: 'viewType', modelName: '@ViewType', displayName: 'DashboardWebStringId.Sparkline.ViewType', defaultVal: 'Line' };
exports.highlightMinMaxPoints = { propertyName: 'highlightMinMaxPoints', modelName: '@HighlightMinMaxPoints', displayName: 'DashboardWebStringId.Sparkline.HighlightMinMaxPoints', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.highlightStartEndPoints = { propertyName: 'highlightStartEndPoints', modelName: '@HighlightStartEndPoints', displayName: 'DashboardWebStringId.Sparkline.HighlightStartEndPoints', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.sparklineOptionsSerializationsInfo = [exports.viewType, exports.highlightMinMaxPoints, exports.highlightStartEndPoints];


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
var _series_item_1 = __webpack_require__(107);
var interactivity_options_1 = __webpack_require__(32);
exports.kpiDashboardItemSerializationsInfo = _series_item_1.seriesDashboardItemSerializationsInfo.concat([_base_metadata_1.contentArrangementMode, _base_metadata_1.contentLineCount, interactivity_options_1._dashboardItemInteractivityOptionsMeta]);


/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
exports.templateId = { propertyName: 'templateID', modelName: '@TemplateID' };
exports.minWidth = { propertyName: 'minWidth', modelName: '@MinWidth', displayName: 'DashboardWebStringId.CardLayout.MinWidth', defaultVal: 200, from: _base_metadata_1.floatFromModel };
exports.maxWidth = { propertyName: 'maxWidth', modelName: '@MaxWidth', displayName: 'DashboardWebStringId.CardLayout.MaxWidth', defaultVal: NaN, from: _base_metadata_1.floatFromModel, toJsonObject: _base_metadata_1.nullableFloatToModel };
exports.cardRows = { propertyName: 'rows', modelName: 'CardRows', array: true };
exports.cardLayoutSerializationInfo = [_base_metadata_1.itemType, exports.minWidth, exports.maxWidth, exports.cardRows];


/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
var _coloring_options_1 = __webpack_require__(75);
var _series_item_1 = __webpack_require__(107);
exports.chartArgumentsMeta = { propertyName: _base_metadata_1.argumentsPropertyName, modelName: 'Arguments', displayName: 'DashboardStringId.ChartCalculationAlongArguments', array: true };
exports.chartItemBaseSerializationsInfo = _series_item_1.seriesDashboardItemSerializationsInfo.concat([exports.chartArgumentsMeta, _coloring_options_1.coloringOptions]);


/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var serializable_model_1 = __webpack_require__(5);
var _chart_axis_1 = __webpack_require__(134);
var ChartAxis = (function (_super) {
    __extends(ChartAxis, _super);
    function ChartAxis(JSON, serializer) {
        if (JSON === void 0) { JSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, JSON, serializer) || this;
    }
    ChartAxis.prototype.getInfo = function () {
        return _chart_axis_1.chartAxisSerializationsInfo;
    };
    return ChartAxis;
}(serializable_model_1.SerializableModel));
exports.ChartAxis = ChartAxis;
var ChartAxisX = (function (_super) {
    __extends(ChartAxisX, _super);
    function ChartAxisX(JSON, serializer) {
        if (JSON === void 0) { JSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, JSON, serializer) || this;
    }
    ChartAxisX.prototype.getInfo = function () {
        return _chart_axis_1.chartAxisXSerializationsInfo;
    };
    return ChartAxisX;
}(ChartAxis));
exports.ChartAxisX = ChartAxisX;
var ChartAxisY = (function (_super) {
    __extends(ChartAxisY, _super);
    function ChartAxisY(JSON, serializer) {
        if (JSON === void 0) { JSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, JSON, serializer) || this;
    }
    ChartAxisY.prototype.getInfo = function () {
        return _chart_axis_1.chartAxisYSerializationsInfo;
    };
    return ChartAxisY;
}(ChartAxis));
exports.ChartAxisY = ChartAxisY;
var ScatterChartAxisY = (function (_super) {
    __extends(ScatterChartAxisY, _super);
    function ScatterChartAxisY(JSON, serializer) {
        if (JSON === void 0) { JSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, JSON, serializer) || this;
    }
    ScatterChartAxisY.prototype.getInfo = function () {
        return _chart_axis_1.scatterChartAxisYSerializationsInfo;
    };
    return ScatterChartAxisY;
}(ChartAxisY));
exports.ScatterChartAxisY = ScatterChartAxisY;
var ChartSecondaryAxisY = (function (_super) {
    __extends(ChartSecondaryAxisY, _super);
    function ChartSecondaryAxisY(JSON, serializer) {
        if (JSON === void 0) { JSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, JSON, serializer) || this;
    }
    ChartSecondaryAxisY.prototype.getInfo = function () {
        return _chart_axis_1.chartSecondaryAxisYSerializationsInfo;
    };
    return ChartSecondaryAxisY;
}(ChartAxisY));
exports.ChartSecondaryAxisY = ChartSecondaryAxisY;


/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _data_item_1 = __webpack_require__(20);
var _base_metadata_1 = __webpack_require__(4);
var point_label_options_1 = __webpack_require__(296);
exports.plotOnSecondaryAxis = { propertyName: 'plotOnSecondaryAxis', modelName: '@PlotOnSecondaryAxis', displayName: 'DashboardWebStringId.Chart.PlotOnSecondaryAxis', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.ignoreEmptyPoints = { propertyName: 'ignoreEmptyPoints', modelName: '@IgnoreEmptyPoints', displayName: 'DashboardWebStringId.Chart.IgnoreEmptyPoints', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.showPointMarkers = { propertyName: 'showPointMarkers', modelName: '@ShowPointMarkers', displayName: 'DashboardWebStringId.Chart.ShowPointMarkers', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.chartSeriesPointLabelOptions = { propertyName: 'pointLabelOptions', modelName: 'PointLabelOptions', displayName: 'DashboardWebStringId.Chart.PointLabelOptions', type: point_label_options_1.PointLabelOptions };
exports.chartSeriesSerializationsInfo = [_base_metadata_1.itemType, _base_metadata_1.name, exports.plotOnSecondaryAxis, exports.ignoreEmptyPoints, exports.showPointMarkers, exports.chartSeriesPointLabelOptions];
exports.chartSeriesType = { propertyName: 'containerType', displayName: 'DashboardWebStringId.Chart.SeriesType' };
exports.simpleSeriesType = {
    propertyName: 'seriesType', modelName: '@SeriesType', defaultVal: 'Bar', values: {
        'Bar': 'DashboardStringId.SeriesTypeBar',
        'StackedBar': 'DashboardStringId.SeriesTypeStackedBar',
        'FullStackedBar': 'DashboardStringId.SeriesTypeFullStackedBar',
        'Point': 'DashboardStringId.SeriesTypePoint',
        'Line': 'DashboardStringId.SeriesTypeLine',
        'StackedLine': 'DashboardStringId.SeriesTypeStackedLine',
        'FullStackedLine': 'DashboardStringId.SeriesTypeFullStackedLine',
        'StepLine': 'DashboardStringId.SeriesTypeStepLine',
        'Spline': 'DashboardStringId.SeriesTypeSpline',
        'Area': 'DashboardStringId.SeriesTypeArea',
        'StackedArea': 'DashboardStringId.SeriesTypeStackedArea',
        'FullStackedArea': 'DashboardStringId.SeriesTypeFullStackedArea',
        'StepArea': 'DashboardStringId.SeriesTypeStepArea',
        'SplineArea': 'DashboardStringId.SeriesTypeSplineArea',
        'StackedSplineArea': 'DashboardStringId.SeriesTypeStackedSplineArea',
        'FullStackedSplineArea': 'DashboardStringId.SeriesTypeFullStackedSplineArea'
    }
};
exports.rangeSeriesType = {
    propertyName: 'seriesType', modelName: '@SeriesType', defaultVal: 'SideBySideRangeBar', values: {
        'SideBySideRangeBar': 'DashboardStringId.SeriesTypeSideBySideRangeBar',
        'RangeArea': 'DashboardStringId.SeriesTypeRangeArea'
    }
};
exports.openHighLowCloseSeriesType = {
    propertyName: 'seriesType', modelName: '@SeriesType', defaultVal: 'CandleStick', values: {
        'CandleStick': 'DashboardStringId.SeriesTypeCandleStick',
        'Stock': 'DashboardStringId.SeriesTypeStock'
    }
};
exports.chartSeriesValue = { propertyName: _base_metadata_1.valuePropertyName, modelName: 'Value', info: _data_item_1.dataItemLinkSerializationsInfo, displayName: 'DashboardWebStringId.Chart.Value' };
exports.value1 = { propertyName: '__value1', modelName: 'Value1', info: _data_item_1.dataItemLinkSerializationsInfo, displayName: 'DashboardStringId.Value1Caption' };
exports.value2 = { propertyName: '__value2', modelName: 'Value2', info: _data_item_1.dataItemLinkSerializationsInfo, displayName: 'DashboardStringId.Value2Caption' };
exports.chartSeriesWeight = { propertyName: _base_metadata_1.weightPropertyName, modelName: 'Weight', info: _data_item_1.dataItemLinkSerializationsInfo, displayName: 'DashboardStringId.WeightCaption' };
exports.open = { propertyName: '__open', modelName: 'Open', info: _data_item_1.dataItemLinkSerializationsInfo, displayName: 'DashboardStringId.OpenCaption' };
exports.high = { propertyName: '__high', modelName: 'High', info: _data_item_1.dataItemLinkSerializationsInfo, displayName: 'DashboardStringId.HighCaption' };
exports.low = { propertyName: '__low', modelName: 'Low', info: _data_item_1.dataItemLinkSerializationsInfo, displayName: 'DashboardStringId.LowCaption' };
exports.close = { propertyName: '__close', modelName: 'Close', info: _data_item_1.dataItemLinkSerializationsInfo, displayName: 'DashboardStringId.CloseCaption' };
exports.simpleSeriesSerializationsInfo = exports.chartSeriesSerializationsInfo.concat([exports.simpleSeriesType, exports.chartSeriesValue]);
exports.rangeSeriesSerializationsInfo = exports.chartSeriesSerializationsInfo.concat([exports.rangeSeriesType, exports.value1, exports.value2]);
exports.weightedSeriesSerializationsInfo = exports.chartSeriesSerializationsInfo.concat([exports.chartSeriesWeight, exports.chartSeriesValue]);
exports.highLowCloseSeriesSerializationsInfo = exports.chartSeriesSerializationsInfo.concat([exports.high, exports.low, exports.close]);
exports.openHighLowCloseSeriesSerializationsInfo = exports.chartSeriesSerializationsInfo.concat([exports.openHighLowCloseSeriesType, exports.open, exports.high, exports.low, exports.close]);


/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var enums_1 = __webpack_require__(94);
var _base_metadata_1 = __webpack_require__(4);
exports.showPointLabels = { propertyName: 'showPointLabels', modelName: '@Visible', displayName: 'DashboardWebStringId.Chart.ShowPointLablels', defaultVal: false, simpleFormAdapterItem: 'yesNoButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.pointLabelOrientation = {
    propertyName: 'orientation', modelName: '@Orientation', displayName: 'DashboardWebStringId.Chart.Orientation', defaultVal: 'Default', simpleFormAdapterItem: 'listEditor', values: {
        'Default': 'DashboardWebStringId.Chart.Orientation.Default',
        'RotateRight': 'DashboardWebStringId.Chart.Orientation.RotateRight',
        'RotateLeft': 'DashboardWebStringId.Chart.Orientation.RotateLeft'
    }
};
exports.overlappingMode = {
    propertyName: 'overlappingMode', modelName: '@OverlappingMode', displayName: 'DashboardWebStringId.Chart.OverlappingMode', defaultVal: 'Hide', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Hide': 'DashboardWebStringId.Chart.OverlappingMode.Hide',
        'None': 'DashboardWebStringId.Chart.OverlappingMode.None'
    }
};
exports.pointLabelOptionsBaseSerializationsInfo = [exports.showPointLabels, exports.pointLabelOrientation, exports.overlappingMode];
exports.showForZeroValues = { propertyName: 'showForZeroValues', modelName: '@ShowForZeroValues', displayName: 'DashboardWebStringId.Chart.ShowZeroValues', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.position = {
    propertyName: 'position', modelName: '@Position', displayName: 'DashboardWebStringId.Chart.Position', defaultVal: 'Outside', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Outside': 'DashboardWebStringId.Chart.Position.Outside',
        'Inside': 'DashboardWebStringId.Chart.Position.Inside'
    }
};
exports.contentType = {
    propertyName: 'contentType', modelName: '@ContentType', displayName: 'DashboardWebStringId.Chart.Content', defaultVal: 'None',
    from: function (st) { return ko.observable(enums_1.parsePointLabelContentType(st)); }, toJsonObject: enums_1.serializePointLabelContentType
};
exports.pointLabelOptionsSerializationsInfo = exports.pointLabelOptionsBaseSerializationsInfo.concat([exports.showForZeroValues, exports.position, exports.contentType]);


/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _data_item_1 = __webpack_require__(20);
var _base_metadata_1 = __webpack_require__(4);
var _dashboard_item_1 = __webpack_require__(74);
var _series_item_1 = __webpack_require__(107);
var interactivity_options_1 = __webpack_require__(32);
var _coloring_options_1 = __webpack_require__(75);
exports.defaultDateTimePeriodName = { propertyName: 'defaultDateTimePeriodName', displayName: 'DashboardStringId.DateTimeFormatYearFormatDefaultCaption', modelName: '@SelectedDateTimePeriodIndex', simpleFormAdapterItem: 'textBoxEditor', category: _base_metadata_1.PropertyCategory.ViewModel };
exports.dateTimePeriods = { propertyName: 'dateTimePeriods', modelName: 'DateTimePeriods', array: true };
exports.rangeSeries = { propertyName: 'series', modelName: 'Series', displayName: 'DashboardStringId.RangeFilterCalculationAlongSeries', array: true };
exports.argument = { propertyName: _base_metadata_1.argumentPropertyName, modelName: 'Argument', displayName: 'DashboardStringId.DescriptionItemArgument', info: _data_item_1.dataItemLinkSerializationsInfo };
exports.rangeFilterDashboardItemSerializationsInfo = _series_item_1.seriesDashboardItemSerializationsInfo
    .concat([exports.rangeSeries, exports.argument, interactivity_options_1._filterItemInteractivityOptionsMeta, _coloring_options_1.coloringOptions, exports.dateTimePeriods, exports.defaultDateTimePeriodName])
    .map(function (e) { return e === _dashboard_item_1.showCaption ? _dashboard_item_1.showCaptionDefaultFalse : e; });


/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _data_item_1 = __webpack_require__(20);
var _base_metadata_1 = __webpack_require__(4);
var _map_item_1 = __webpack_require__(44);
exports.maps = {
    propertyName: 'maps',
    modelName: 'Maps',
    displayName: 'DashboardWebStringId.Binding.Maps',
    array: true
};
exports.includeSummaryValueToShapeTitle = {
    propertyName: 'includeSummaryValueToShapeTitle',
    modelName: '@IncludeSummaryValueToShapeTitle',
    displayName: 'DashboardWebStringId.Map.IncludeSummaryValueToShapeTitle',
    defaultVal: false,
    simpleFormAdapterItem: 'yesNoButtonGroupEditor',
    from: _base_metadata_1.parseBool
};
exports.attributeDimension = {
    propertyName: '__attributeDimension',
    modelName: 'AttributeDimension',
    displayName: 'DashboardWebStringId.Map.AttributeDimension',
    info: _data_item_1.dataItemLinkSerializationsInfo
};
exports.attributeName = {
    propertyName: 'attributeName',
    modelName: '@AttributeName',
    displayName: 'DashboardWebStringId.Map.AttributeName',
    defaultVal: '',
    category: _base_metadata_1.PropertyCategory.Map
};
exports.tooltipAttributeName = {
    propertyName: 'tooltipAttributeName',
    modelName: '@ToolTopAttributeName',
    displayName: 'DashboardWebStringId.Map.TooltipAttribute',
    defaultVal: '',
    category: _base_metadata_1.PropertyCategory.Map
};
exports.choroplethMapDashboardItemSerializationsInfo = _map_item_1.mapDashboardItemSerializationsInfo.concat([exports.maps, exports.attributeDimension, exports.attributeName, exports.includeSummaryValueToShapeTitle, exports.tooltipAttributeName, _map_item_1.colorLegend]);


/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _data_item_1 = __webpack_require__(20);
var interactivity_options_1 = __webpack_require__(32);
var _data_dashboard_item_1 = __webpack_require__(26);
var _image_item_1 = __webpack_require__(137);
exports.imageItem = { propertyName: '__imageItem', modelName: 'ImageItem', displayName: 'DashboardStringId.DescriptionBoundImageAttribute', info: _data_item_1.dataItemLinkSerializationsInfo };
exports.dataBindingMode = {
    propertyName: 'dataBindingMode', modelName: '@DataBindingMode', displayName: 'DashboardWebStringId.Image.BindingMode', defaultVal: 'BinaryArray', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'BinaryArray': 'DashboardWebStringId.Image.BindingMode.BinaryArray',
        'Uri': 'DashboardWebStringId.Image.BindingMode.Uri'
    }
};
exports.uriPattern = { propertyName: 'uriPattern', modelName: '@UriPattern', displayName: 'DashboardWebStringId.RangeFilter.UriPattern', defaultVal: '', simpleFormAdapterItem: 'textBoxEditor', editorOptions: { placeholder: 'http://www.example.com/{0}.jpg' } };
exports.boundImageDashboardItemSerializationsInfo = _data_dashboard_item_1.dataDashboardItemSerializationsInfo.concat([
    exports.imageItem, exports.dataBindingMode, exports.uriPattern, interactivity_options_1._baseInteractivityOptionsMeta, _image_item_1.sizeMode, _image_item_1.horizontalAlignment, _image_item_1.verticalAlignment
]);


/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _base_metadata_1 = __webpack_require__(4);
var interactivity_options_1 = __webpack_require__(32);
var _data_dashboard_item_1 = __webpack_require__(26);
exports.textBoxText = {
    propertyName: 'text',
    modelName: 'Text',
    displayName: 'DashboardWebStringId.TextBox.Text',
    defaultVal: '',
    from: function (value) { return ko.observable(value); },
    toJsonObject: function (value) {
        return value.replace(/\0*$/g, '').trim();
    },
};
exports.textBoxValues = { propertyName: _base_metadata_1.valuesPropertyName, modelName: 'Values', displayName: 'DashboardStringId.DescriptionValues', array: true };
exports.textBoxDashboardItemSerializationsInfo = _data_dashboard_item_1.dataDashboardItemSerializationsInfo.concat([exports.textBoxValues, exports.textBoxText, interactivity_options_1._baseInteractivityOptionsMeta]);


/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
exports.flowIntervalOrderedValues = ['Year', 'Quarter', 'Month', 'Day', 'Hour', 'Minute', 'Second'];
exports.flowIntervalValues = {
    'Year': 'DashboardStringId.DateTimeIntervalYear',
    'Quarter': 'DashboardStringId.DateTimeIntervalQuarter',
    'Month': 'DashboardStringId.DateTimeIntervalMonth',
    'Day': 'DashboardStringId.DateTimeIntervalDay',
    'Hour': 'DashboardStringId.DateTimeIntervalHour',
    'Minute': 'DashboardStringId.DateTimeIntervalMinute',
    'Second': 'DashboardStringId.DateTimeIntervalSecond'
};
function convertDateTimeGroupInterval(groupInterval) {
    var map = {
        'Year': 'Year',
        'QuarterYear': 'Quarter',
        'MonthYear': 'Month',
        'DayMonthYear': 'Day',
        'DateHour': 'Hour',
        'DateHourMinute': 'Minute',
        'DateHourMinuteSecond': 'Second',
        'None': 'Second'
    };
    var dateTimeInterval = map[groupInterval];
    if (!dateTimeInterval) {
        throw Error('Argument exception');
    }
    return dateTimeInterval;
}
exports.convertDateTimeGroupInterval = convertDateTimeGroupInterval;
exports.interval = { propertyName: 'interval', modelName: '@Interval', defaultVal: 'Year' };
exports.offset = { propertyName: 'offset', modelName: '@Offset', defaultVal: 0, simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel };
exports.flowDateTimePeriodLimitSerializationsInfo = [exports.interval, exports.offset];
exports.date = { propertyName: 'date', modelName: '@Date', defaultVal: _base_metadata_1.fromDateToString(new Date()), from: _base_metadata_1.fromStringToDate, toJsonObject: _base_metadata_1.fromDateToString, simpleFormAdapterItem: 'dateBoxEditor' };
exports.fixedDateTimePeriodLimitSerializationsInfo = [exports.date];


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
exports.titleText = { propertyName: 'text', modelName: '@Text', displayName: 'DashboardWebStringId.Title.Text', simpleFormAdapterItem: 'textBoxEditor' };
exports.titleVisible = { propertyName: 'visible', displayName: 'DashboardWebStringId.Title.Visible', modelName: '@Visible', defaultVal: true, simpleFormAdapterItem: 'checkBoxEditor', from: _base_metadata_1.parseBool };
exports.includeMasterFilter = { propertyName: 'includeMasterFilter', displayName: 'DashboardWebStringId.Title.IncludeMasterFilter', modelName: '@IncludeMasterFilterState', defaultVal: true, simpleFormAdapterItem: 'checkBoxEditor', from: _base_metadata_1.parseBool };
exports.titleAlignment = {
    propertyName: 'alignment', modelName: '@Alignment', defaultVal: 'Center', displayName: 'DashboardWebStringId.Title.Aligment', simpleFormAdapterItem: 'listEditor', values: {
        'Left': 'DashboardWebStringId.Title.Aligment.Left',
        'Center': 'DashboardWebStringId.Title.Aligment.Center',
    }
};
exports.titleImage64 = { propertyName: 'image64', modelName: 'ImageData' };
exports.titleImageUrl = { propertyName: 'url', modelName: '@Url', simpleFormAdapterItem: 'textBoxEditor' };
exports.titleImageType = {
    propertyName: 'imageType', displayName: 'DashboardWebStringId.Title.Image', defaultVal: 'none', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'embedded': 'DashboardWebStringId.Title.ImageEmbedded',
        'linked': 'DashboardWebStringId.Title.ImageLinked',
        'none': 'DashboardWebStringId.Title.ImageNone'
    }
};
exports.dashboardTitleSerializationsInfo = [exports.titleText, exports.titleVisible, exports.titleAlignment, exports.includeMasterFilter, exports.titleImageType, exports.titleImage64, exports.titleImageUrl];


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var serializable_model_1 = __webpack_require__(5);
var _calculated_field_1 = __webpack_require__(289);
var CalculatedField = (function (_super) {
    __extends(CalculatedField, _super);
    function CalculatedField(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    CalculatedField.prototype.getInfo = function () {
        return _calculated_field_1.calculatedFieldSerializationsInfo;
    };
    return CalculatedField;
}(serializable_model_1.SerializableModel));
exports.CalculatedField = CalculatedField;


/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var serializable_model_1 = __webpack_require__(5);
var data_source_1 = __webpack_require__(62);
var _federation_data_source_1 = __webpack_require__(485);
var _data_source_factory_base_1 = __webpack_require__(513);
var FederationDataSource = (function (_super) {
    __extends(FederationDataSource, _super);
    function FederationDataSource(dataSourceJSON, serializer) {
        if (dataSourceJSON === void 0) { dataSourceJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, dataSourceJSON, serializer) || this;
        _this.queries = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(dataSourceJSON.Queries, function (json) { return new QueryNode(json, serializer); });
        _this.context = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(dataSourceJSON.Context, function (json) { return new ContextItem(json, serializer); });
        _this.sources = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(dataSourceJSON.Sources, function (json) { return new Source(json, serializer); });
        _this.hasCalculatedFields = true;
        _this.supportDataMembers = true;
        return _this;
    }
    FederationDataSource.prototype.getInfo = function () {
        return _federation_data_source_1.federationDataSourceSerializationsInfo;
    };
    FederationDataSource.prototype.getDisplayNamePrefix = function () {
        return '';
    };
    FederationDataSource.prototype._getDefaultItemType = function () {
        return 'FederationDataSource';
    };
    return FederationDataSource;
}(data_source_1.DataSource));
exports.FederationDataSource = FederationDataSource;
var QueryNode = (function (_super) {
    __extends(QueryNode, _super);
    function QueryNode(json, serializer) {
        if (json === void 0) { json = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, json, serializer) || this;
    }
    QueryNode.prototype.getInfo = function () {
        return _federation_data_source_1.queryNodeSerializationsInfo;
    };
    QueryNode.prototype._getDefaultItemType = function () {
        return 'QueryNode';
    };
    return QueryNode;
}(serializable_model_1.SerializableModel));
exports.QueryNode = QueryNode;
var ContextItem = (function (_super) {
    __extends(ContextItem, _super);
    function ContextItem(json, serializer) {
        if (json === void 0) { json = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, json, serializer) || this;
        _this.source = ko.observable(null);
        for (var key in _data_source_factory_base_1._baseDataSourceTypesMap) {
            var dataSourceJson = json[key];
            if (dataSourceJson !== undefined) {
                _this.source(new _data_source_factory_base_1._baseDataSourceTypesMap[key](dataSourceJson || {}));
                break;
            }
        }
        return _this;
    }
    ContextItem.prototype.getInfo = function () {
        return _federation_data_source_1.contextItemSerializationsInfo;
    };
    ContextItem.prototype._getDefaultItemType = function () {
        return 'ContextItem';
    };
    return ContextItem;
}(serializable_model_1.SerializableModel));
exports.ContextItem = ContextItem;
var Source = (function (_super) {
    __extends(Source, _super);
    function Source(json, serializer) {
        if (json === void 0) { json = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, json, serializer) || this;
    }
    Source.prototype.getInfo = function () {
        return _federation_data_source_1.sourceSerializationsInfo;
    };
    Source.prototype._getDefaultItemType = function () {
        return 'Source';
    };
    return Source;
}(serializable_model_1.SerializableModel));
exports.Source = Source;


/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var kpi_element_1 = __webpack_require__(324);
var card_layout_template_1 = __webpack_require__(209);
var _card_1 = __webpack_require__(290);
var emptyCardTemplate = new card_layout_template_1.CardEmptyLayoutTemplate();
var Card = (function (_super) {
    __extends(Card, _super);
    function Card(dataItemProvider, modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        var _this = _super.call(this, dataItemProvider, modelJson, serializer) || this;
        _this.layoutTemplate = ko.observable();
        ko.computed(function () {
            _this.__targetValue._specifics.skipFormatting = !!_this.__actualValue.uniqueName();
        });
        _this.layoutTemplate(Card._createTemplate(modelJson.LayoutTemplate, serializer));
        return _this;
    }
    Card._createTemplate = function (jsonModel, serializer) {
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return jsonModel ? new Card.templateTypes[jsonModel['@Type']](jsonModel, serializer) : emptyCardTemplate;
    };
    Card.prototype._getInfoCore = function () {
        return _card_1.cardSerializationsInfo;
    };
    Card.prototype._isTypeEmpty = function () {
        return this.layoutTemplate().getType() === emptyCardTemplate.getType();
    };
    Card.prototype._setTemplateSwitchingOptions = function (newTemplate) {
        if (this._isTypeEmpty()) {
            this._switchToCardDeltaOptions();
        }
        else if (newTemplate.getType() === emptyCardTemplate.getType()) {
            this._switchToKpiDeltaOptions();
        }
        this.layoutTemplate(newTemplate);
    };
    Card.prototype._switchToCardDeltaOptions = function () {
        this.cardDeltaOptions.resultIndicationMode(this.deltaOptions.resultIndicationMode());
        this.cardDeltaOptions.resultIndicationThreshold(this.deltaOptions.resultIndicationThreshold());
        this.cardDeltaOptions.resultIndicationThresholdType(this.deltaOptions.resultIndicationThresholdType());
    };
    Card.prototype._switchToKpiDeltaOptions = function () {
        this.deltaOptions.resultIndicationMode(this.cardDeltaOptions.resultIndicationMode());
        this.deltaOptions.resultIndicationThreshold(this.cardDeltaOptions.resultIndicationThreshold());
        this.deltaOptions.resultIndicationThresholdType(this.cardDeltaOptions.resultIndicationThresholdType());
    };
    Card.prototype._getDefaultItemType = function () { return 'Card'; };
    Card.templateTypes = {
        Stretched: card_layout_template_1.CardStretchedLayoutTemplate,
        Centered: card_layout_template_1.CardCenteredLayoutTemplate,
        Compact: card_layout_template_1.CardCompactLayoutTemplate,
        Lightweight: card_layout_template_1.CardLightweightLayoutTemplate,
        Custom: card_layout_template_1.CardCustomLayoutTemplate
    };
    return Card;
}(kpi_element_1.KpiElement));
exports.Card = Card;


/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var serializable_model_1 = __webpack_require__(5);
var _card_layout_template_1 = __webpack_require__(491);
var cardLayoutTypes = {
    Stretched: 'Stretched',
    Centered: 'Centered',
    Compact: 'Compact',
    Lightweight: 'Lightweight',
    Custom: 'Custom',
    None: 'None'
};
var cardLayoutTemplateNames = {
    Stretched: 'DashboardStringId.CardLayoutTemplateStretchedCaption',
    Centered: 'DashboardStringId.CardLayoutTemplateCenteredCaption',
    Compact: 'DashboardStringId.CardLayoutTemplateCompactCaption',
    Lightweight: 'DashboardStringId.CardLayoutTemplateLightweightCaption',
    Custom: 'DashboardStringId.CardLayoutTemplateCustomCaption',
    None: 'DashboardStringId.CardLayoutTemplateNoneCaption'
};
var CardLayoutTemplate = (function (_super) {
    __extends(CardLayoutTemplate, _super);
    function CardLayoutTemplate(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    CardLayoutTemplate.prototype.getInfo = function () {
        return _card_layout_template_1.templateSerializationInfo;
    };
    CardLayoutTemplate.prototype._resetToDefaults = function () { };
    CardLayoutTemplate.prototype.clone = function () {
        var clonedTemplate = this._createInstance();
        this._clone(this, clonedTemplate);
        return clonedTemplate;
    };
    CardLayoutTemplate.prototype._clone = function (target, source) {
        var serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer();
        serializer.deserialize(source, serializer.serialize(target));
    };
    return CardLayoutTemplate;
}(serializable_model_1.SerializableModel));
exports.CardLayoutTemplate = CardLayoutTemplate;
var CardEmptyLayoutTemplate = (function (_super) {
    __extends(CardEmptyLayoutTemplate, _super);
    function CardEmptyLayoutTemplate() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isEmpty = ko.observable(true);
        return _this;
    }
    Object.defineProperty(CardEmptyLayoutTemplate.prototype, "title", {
        get: function () {
            return cardLayoutTemplateNames[this.getType()];
        },
        enumerable: true,
        configurable: true
    });
    CardEmptyLayoutTemplate.prototype._collectProperties = function (dimensionNames) {
        return [];
    };
    CardEmptyLayoutTemplate.prototype.getType = function () {
        return cardLayoutTypes.None;
    };
    CardEmptyLayoutTemplate.prototype.getInfo = function () {
        return [];
    };
    CardEmptyLayoutTemplate.prototype._createInstance = function () {
        return this;
    };
    return CardEmptyLayoutTemplate;
}(CardLayoutTemplate));
exports.CardEmptyLayoutTemplate = CardEmptyLayoutTemplate;
var CardCustomLayoutTemplate = (function (_super) {
    __extends(CardCustomLayoutTemplate, _super);
    function CardCustomLayoutTemplate(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        !_this.type() && _this.type(cardLayoutTypes.Custom);
        _this.title = cardLayoutTemplateNames[_this.type()];
        return _this;
    }
    CardCustomLayoutTemplate.prototype.getInfo = function () {
        return _card_layout_template_1.customTemplateSerializationInfo;
    };
    CardCustomLayoutTemplate.prototype._collectProperties = function (dimensionNames) {
        return [];
    };
    CardCustomLayoutTemplate.prototype._resetToDefaults = function () { };
    CardCustomLayoutTemplate.prototype.getType = function () {
        return this.type();
    };
    CardCustomLayoutTemplate.prototype._createInstance = function () {
        return new CardCustomLayoutTemplate();
    };
    return CardCustomLayoutTemplate;
}(CardLayoutTemplate));
exports.CardCustomLayoutTemplate = CardCustomLayoutTemplate;
var CardCenteredLayoutTemplate = (function (_super) {
    __extends(CardCenteredLayoutTemplate, _super);
    function CardCenteredLayoutTemplate(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        !_this.type() && _this.type(cardLayoutTypes.Centered);
        _this.title = cardLayoutTemplateNames[_this.type()];
        return _this;
    }
    CardCenteredLayoutTemplate.prototype.getInfo = function () {
        return _card_layout_template_1.deltaCompactTemplateSerializationInfo;
    };
    CardCenteredLayoutTemplate.prototype._collectProperties = function (dimensionNames) {
        return [
            this.mainValue._createEditorModel(dimensionNames),
            this.subValue._createEditorModel(dimensionNames),
            this.bottomValue._createEditorModel(dimensionNames),
            this.bottomSubValue1._createEditorModel(dimensionNames),
            this.bottomSubValue2._createEditorModel(dimensionNames),
            this.deltaIndicator._createEditorModel(dimensionNames),
            this.sparkline._createEditorModel(dimensionNames)
        ];
    };
    CardCenteredLayoutTemplate.prototype._resetToDefaults = function () {
        this.mainValue._initDefault(true, 'Title');
        this.subValue._initDefault(true, 'Subtitle');
        this.bottomValue._initDefault(true, 'ActualValue');
        this.bottomSubValue1._initDefault(true, 'AbsoluteVariation');
        this.bottomSubValue2._initDefault(true, 'PercentVariation');
        this.deltaIndicator._initDefault(true);
        this.sparkline._initDefault(true);
        this.maxWidth(270);
    };
    CardCenteredLayoutTemplate.prototype.getType = function () {
        return this.type();
    };
    CardCenteredLayoutTemplate.prototype._createInstance = function () {
        return new CardCenteredLayoutTemplate();
    };
    return CardCenteredLayoutTemplate;
}(CardLayoutTemplate));
exports.CardCenteredLayoutTemplate = CardCenteredLayoutTemplate;
var CardStretchedLayoutTemplate = (function (_super) {
    __extends(CardStretchedLayoutTemplate, _super);
    function CardStretchedLayoutTemplate(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        !_this.type() && _this.type(cardLayoutTypes.Stretched);
        _this.title = cardLayoutTemplateNames[_this.type()];
        return _this;
    }
    CardStretchedLayoutTemplate.prototype.getInfo = function () {
        return _card_layout_template_1.autofitTemplateSerializationInfo;
    };
    CardStretchedLayoutTemplate.prototype._collectProperties = function (dimensionNames) {
        return [
            this.topValue._createEditorModel(dimensionNames),
            this.mainValue._createEditorModel(dimensionNames),
            this.subValue._createEditorModel(dimensionNames),
            this.bottomValue1._createEditorModel(dimensionNames),
            this.bottomValue2._createEditorModel(dimensionNames),
            this.deltaIndicator._createEditorModel(dimensionNames),
            this.sparkline._createEditorModel(dimensionNames)
        ];
    };
    CardStretchedLayoutTemplate.prototype._resetToDefaults = function () {
        this.topValue._initDefault(true, 'ActualValue');
        this.mainValue._initDefault(true, 'Title');
        this.subValue._initDefault(true, 'Subtitle');
        this.bottomValue1._initDefault(true, 'PercentVariation');
        this.bottomValue2._initDefault(true, 'AbsoluteVariation');
        this.deltaIndicator._initDefault(true);
        this.sparkline._initDefault(true);
    };
    CardStretchedLayoutTemplate.prototype.getType = function () {
        return this.type();
    };
    CardStretchedLayoutTemplate.prototype._createInstance = function () {
        return new CardStretchedLayoutTemplate();
    };
    return CardStretchedLayoutTemplate;
}(CardLayoutTemplate));
exports.CardStretchedLayoutTemplate = CardStretchedLayoutTemplate;
var CardLightweightLayoutTemplate = (function (_super) {
    __extends(CardLightweightLayoutTemplate, _super);
    function CardLightweightLayoutTemplate(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        !_this.type() && _this.type(cardLayoutTypes.Lightweight);
        _this.title = cardLayoutTemplateNames[_this.type()];
        return _this;
    }
    CardLightweightLayoutTemplate.prototype.getInfo = function () {
        return _card_layout_template_1.nameValueTemplateSerializationInfo;
    };
    CardLightweightLayoutTemplate.prototype._collectProperties = function (dimensionNames) {
        return [
            this.mainValue._createEditorModel(dimensionNames),
            this.subValue._createEditorModel(dimensionNames),
            this.bottomValue._createEditorModel(dimensionNames),
            this.deltaIndicator._createEditorModel(dimensionNames),
            this.sparkline._createEditorModel(dimensionNames)
        ];
    };
    CardLightweightLayoutTemplate.prototype._resetToDefaults = function () {
        this.mainValue._initDefault(true, 'ActualValue');
        this.subValue._initDefault(true, 'Title');
        this.bottomValue._initDefault(true, 'Subtitle');
        this.deltaIndicator._initDefault(false);
        this.sparkline._initDefault(false);
    };
    CardLightweightLayoutTemplate.prototype.getType = function () {
        return this.type();
    };
    CardLightweightLayoutTemplate.prototype._createInstance = function () {
        return new CardLightweightLayoutTemplate();
    };
    return CardLightweightLayoutTemplate;
}(CardLayoutTemplate));
exports.CardLightweightLayoutTemplate = CardLightweightLayoutTemplate;
var CardCompactLayoutTemplate = (function (_super) {
    __extends(CardCompactLayoutTemplate, _super);
    function CardCompactLayoutTemplate(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        !_this.type() && _this.type(cardLayoutTypes.Compact);
        _this.title = cardLayoutTemplateNames[_this.type()];
        return _this;
    }
    CardCompactLayoutTemplate.prototype.getInfo = function () {
        return _card_layout_template_1.deltaCompactTemplateSerializationInfo;
    };
    CardCompactLayoutTemplate.prototype._collectProperties = function (dimensionNames) {
        return [
            this.mainValue._createEditorModel(dimensionNames),
            this.subValue._createEditorModel(dimensionNames),
            this.bottomValue._createEditorModel(dimensionNames),
            this.bottomSubValue1._createEditorModel(dimensionNames),
            this.bottomSubValue2._createEditorModel(dimensionNames),
            this.deltaIndicator._createEditorModel(dimensionNames),
            this.sparkline._createEditorModel(dimensionNames)
        ];
    };
    CardCompactLayoutTemplate.prototype._resetToDefaults = function () {
        this.mainValue._initDefault(true, 'Title');
        this.subValue._initDefault(true, 'Subtitle');
        this.bottomValue._initDefault(true, 'ActualValue');
        this.bottomSubValue1._initDefault(true, 'AbsoluteVariation');
        this.bottomSubValue2._initDefault(true, 'PercentVariation');
        this.deltaIndicator._initDefault(true);
        this.sparkline._initDefault(true);
        this.maxWidth(270);
    };
    CardCompactLayoutTemplate.prototype.getType = function () {
        return this.type();
    };
    CardCompactLayoutTemplate.prototype._createInstance = function () {
        return new CardCompactLayoutTemplate();
    };
    return CardCompactLayoutTemplate;
}(CardLayoutTemplate));
exports.CardCompactLayoutTemplate = CardCompactLayoutTemplate;


/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var data_item_1 = __webpack_require__(8);
var _utils_1 = __webpack_require__(18);
var data_dashboard_item_1 = __webpack_require__(9);
var _series_item_1 = __webpack_require__(107);
var SeriesItem = (function (_super) {
    __extends(SeriesItem, _super);
    function SeriesItem(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.__seriesDimensions = ko.observableArray([]);
        _this.seriesDimensions = ko.observableArray([]);
        _this.__seriesDimensions(dx_analytics_core_1.default.Analytics.Utils.deserializeArray(modelJson.SeriesDimensions, function (item) { return new data_item_1.DataItemLink(_this, item, serializer); })());
        _this._subscribeDataItemLinkArrays(_series_item_1.seriesDimensions);
        return _this;
    }
    SeriesItem.prototype._getInfoCore = function () {
        return _series_item_1.seriesDashboardItemSerializationsInfo;
    };
    SeriesItem.prototype._clearBindings = function () {
        _super.prototype._clearBindings.call(this);
        this.__seriesDimensions.removeAll();
    };
    SeriesItem.prototype._getInteractivityDimensionLinks = function () {
        return this.__seriesDimensions();
    };
    __decorate([
        _utils_1.collectionItemType('SeriesDimension')
    ], SeriesItem.prototype, "__seriesDimensions", void 0);
    return SeriesItem;
}(data_dashboard_item_1.DataDashboardItem));
exports.SeriesItem = SeriesItem;


/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var _format_helper_1 = __webpack_require__(47);
var _formatter_1 = __webpack_require__(25);
var _datetime_period_converter_1 = __webpack_require__(533);
var _data_field_1 = __webpack_require__(14);
var _knockout_utils_1 = __webpack_require__(17);
var serializable_model_1 = __webpack_require__(5);
var _date_time_period_1 = __webpack_require__(312);
var _period_limit_1 = __webpack_require__(204);
var DateTimePeriod = (function (_super) {
    __extends(DateTimePeriod, _super);
    function DateTimePeriod(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.argumentInterval = ko.observable('Year');
        _this._firstDayOfWeek = ko.observable(0);
        _this._getPeriodTextValue = ko.pureComputed(function () {
            var range = _this.getDateTimeValue();
            var startTextValue = _this.format(range.startValue);
            var endTextValue = _this.format(range.endValue);
            if (startTextValue != null || endTextValue != null)
                return _formatter_1.constructIntervalFilterText({ left: startTextValue, right: endTextValue });
            return _default_1.getLocalizationById('DashboardStringId.EntireRangePeriodCaption');
        });
        ko.computed(function () {
            _this.start.argumentInterval(_this.argumentInterval());
            _this.end.argumentInterval(_this.argumentInterval());
        });
        return _this;
    }
    DateTimePeriod.prototype.getInfo = function () {
        return _date_time_period_1.dateTimePeriodSerializationsInfo;
    };
    DateTimePeriod.prototype._getDefaultItemType = function () { return 'DateTimePeriod'; };
    DateTimePeriod.prototype.getDateTimeValue = function () {
        var convertToLimit = function (limit) {
            if (limit.mode() === 'None')
                return undefined;
            var flowMode = limit.mode() === 'Flow';
            return {
                Relative: flowMode,
                Date: limit.mode() === 'Fixed' ? limit.fixed.date() : undefined,
                Interval: flowMode ? limit.flow.interval() : undefined,
                Offset: flowMode ? limit.flow.offset() : undefined
            };
        };
        var range = _datetime_period_converter_1.DateTimePeriodConverter.toRange({
            Start: convertToLimit(this.start),
            End: convertToLimit(this.end)
        }, this._firstDayOfWeek());
        return range;
    };
    DateTimePeriod.prototype.getDateFormat = function () {
        var argumentInterval = _period_limit_1.convertDateTimeGroupInterval(this.argumentInterval()), startInterval = this.start.getInterval() || argumentInterval, endInterval = this.end.getInterval() || argumentInterval;
        var dateFormat = ['year', 'quarterYear', 'monthYear', 'weekYear', 'dayMonthYear', 'dateHour', 'dateHourMinute', 'dateHourMinuteSecond'];
        return dateFormat[Math.max(_period_limit_1.flowIntervalOrderedValues.indexOf(startInterval), _period_limit_1.flowIntervalOrderedValues.indexOf(endInterval))];
    };
    DateTimePeriod.prototype.format = function (value) {
        if (value == null)
            return null;
        var dateFormatInfoType = this.getDateFormat(), correctedValue = value;
        switch (dateFormatInfoType) {
            case 'year':
                correctedValue = value.getFullYear();
                break;
        }
        return _format_helper_1.formatHelper.format(correctedValue, { dateType: 'short', format: dateFormatInfoType });
    };
    DateTimePeriod.prototype._subscribeToGroupInterval = function (dimension) {
        var _this = this;
        return _knockout_utils_1.safeSubscribe({
            dataMember: dimension.dataMember,
            groupInterval: dimension.dateTimeGroupInterval
        }, function (dim) {
            _this.argumentInterval(_data_field_1.DataField.isOlap(dim.dataMember) ? 'None' : dim.groupInterval);
        });
    };
    return DateTimePeriod;
}(serializable_model_1.TypedSerializableModel));
exports.DateTimePeriod = DateTimePeriod;


/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var kpi_element_1 = __webpack_require__(324);
var _gauge_1 = __webpack_require__(301);
var Gauge = (function (_super) {
    __extends(Gauge, _super);
    function Gauge(dataItemProvider, modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, dataItemProvider, modelJson, serializer) || this;
        _this.__targetValue._specifics.skipFormatting = true;
        return _this;
    }
    Gauge.prototype._getInfoCore = function () {
        return _gauge_1.gaugeSerializationsInfo;
    };
    Gauge.prototype._getDefaultItemType = function () { return 'Gauge'; };
    return Gauge;
}(kpi_element_1.KpiElement));
exports.Gauge = Gauge;


/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var data_item_1 = __webpack_require__(8);
var _dimension_filter_values_1 = __webpack_require__(175);
var _data_field_1 = __webpack_require__(14);
var _array_utils_1 = __webpack_require__(49);
var _utils_1 = __webpack_require__(18);
var _base_metadata_1 = __webpack_require__(4);
var map_item_1 = __webpack_require__(214);
var _geo_point_map_item_base_1 = __webpack_require__(68);
var GeoPointMapItemBase = (function (_super) {
    __extends(GeoPointMapItemBase, _super);
    function GeoPointMapItemBase(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.tooltipDimensions = ko.observableArray([]);
        _this._selectedClusters = ko.observable();
        _this._clustersContent = ko.observable();
        _this._processDataRequest = function () {
            var clientState = _this._clientState();
            if (clientState) {
                _this._dataRequestArgs(__assign({ unclusteredSelection: _this._selectionValues.peek() }, clientState));
            }
        };
        _this._actualSelectedValues = ko.computed(function () {
            return _this.enableClustering() && _this._selectedClusters() || _this._selectionValues();
        });
        _this.__tooltipDimensions = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(modelJson.TooltipDimensions, function (item) { return new data_item_1.DataItemLink(_this, item, serializer); });
        _this._subscribeDataItemLinkArrays(_geo_point_map_item_base_1.tooltipDimensions);
        _this._attachDataItem(_this, _geo_point_map_item_base_1.latitude.propertyName);
        _this._attachDataItem(_this, _geo_point_map_item_base_1.longitude.propertyName);
        _this.enableClustering.subscribe(function (newValue) {
            if (newValue) {
                _this._processDataRequest();
            }
        });
        return _this;
    }
    Object.defineProperty(GeoPointMapItemBase.prototype, "_actualSelectionValues", {
        get: function () {
            return this._actualSelectedValues;
        },
        enumerable: true,
        configurable: true
    });
    GeoPointMapItemBase.prototype._clearBindings = function () {
        _super.prototype._clearBindings.call(this);
        this.__tooltipDimensions.removeAll();
        this.__latitude.uniqueName(null);
        this.__longitude.uniqueName(null);
    };
    GeoPointMapItemBase.prototype._getInfoCore = function () {
        return _geo_point_map_item_base_1.geoPointMapDashboardItemBaseSerializationsInfo;
    };
    GeoPointMapItemBase.prototype._getInteractivityDimensionLinks = function () {
        return [this.__latitude, this.__longitude];
    };
    GeoPointMapItemBase.prototype._getExportingSelection = function () {
        return this._selectedClusters() || (this._outputFilter() && this._outputFilter().values);
    };
    GeoPointMapItemBase.prototype._getDisplayFilterValues = function (limitCount) {
        var _this = this;
        var metaData = this._dataManager() ? this._dataManager().getMetaData() : undefined, selection = this._getExportingSelection(), outFilterValues = [], latName = this.__latitude.uniqueName(), lonName = this.__longitude.uniqueName();
        var dataStorage = this._dataManager() ? this._dataManager().getDataStorage() : undefined;
        if (dataStorage && selection && this.__tooltipDimensions().length) {
            var slice = dataStorage.getSliceByIds(this._getSliceDimensions()
                .map(function (dataItemLink) { return dataItemLink.uniqueName(); })
                .filter(function (uniqueName) { return !!uniqueName; }));
            this.__tooltipDimensions().forEach(function (tooltipDimension) {
                var uniqueValues = {}, valueCount = 0, filterValues = new _dimension_filter_values_1.DimensionFilterValues(_this._getDimensionDisplayName(tooltipDimension.dataItem().uniqueName())), format = metaData ? metaData.getDimensionFormat(tooltipDimension.uniqueName()) : undefined, isOlap = _data_field_1.DataField.isOlap(tooltipDimension.dataItem().dataMember());
                slice.forEach(function (dataKey) {
                    var rowKey = dataKey.rowKey, latitudeValue = slice.getKeyValue(rowKey, latName), longitudeValue = slice.getKeyValue(rowKey, lonName);
                    selection.every(function (selectionValue) {
                        if (latitudeValue === selectionValue[0] && longitudeValue === selectionValue[1]) {
                            if (!!limitCount && valueCount >= limitCount) {
                                filterValues.Truncated = true;
                                return false;
                            }
                            var value = slice.getKeyValue(rowKey, tooltipDimension.uniqueName());
                            if (!uniqueValues[value]) {
                                uniqueValues[value] = value;
                                valueCount++;
                            }
                        }
                        return true;
                    });
                });
                filterValues.Values = Object.keys(uniqueValues).map(function (v) { return _this._createFormattableValue(tooltipDimension.dataItem(), v); });
                outFilterValues.push(filterValues);
            });
        }
        return outFilterValues;
    };
    GeoPointMapItemBase.prototype._getSliceDimensions = function () {
        return [this.__latitude, this.__longitude].concat(this.__tooltipDimensions());
    };
    GeoPointMapItemBase.prototype._updateContentViewModel = function (content) {
        _super.prototype._updateContentViewModel.call(this, content);
        var mapContent = this._paneContentHolder.getContent(_base_metadata_1.PropertyCategory.Data);
        this._clustersContent(mapContent.ClustersContent);
        if (content && content.SelectedValues) {
            this._setSelectionData(content.SelectedValues);
        }
    };
    GeoPointMapItemBase.prototype._setSelectionData = function (selection) {
        if (this._clustersContent()) {
            var realSelectionPoints_1 = [];
            this._clustersContent().forEach(function (clusterDto) {
                var x = clusterDto.Cluster.Latitude, y = clusterDto.Cluster.Longitude;
                if ((selection || []).filter(function (s) {
                    return s[0] === x && s[1] === y;
                })[0]) {
                    clusterDto.Points.forEach(function (pointInCluster) { return realSelectionPoints_1.push(pointInCluster); });
                }
            });
            this._selectedClusters(selection);
            selection = realSelectionPoints_1;
        }
        if (!_array_utils_1.arrayEquals(this._selectionValues(), selection)) {
            this._selectionValues(selection);
            if (this.enableClustering()) {
                this._processDataRequest();
            }
        }
    };
    GeoPointMapItemBase.prototype._isTopNEnabled = function (dataItem) {
        return this.tooltipDimensions.indexOf(dataItem) == -1 && this.hiddenDimensions().indexOf(dataItem) == -1;
    };
    __decorate([
        _utils_1.collectionItemType('TooltipDimension')
    ], GeoPointMapItemBase.prototype, "__tooltipDimensions", void 0);
    return GeoPointMapItemBase;
}(map_item_1.MapItem));
exports.GeoPointMapItemBase = GeoPointMapItemBase;


/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var data_item_1 = __webpack_require__(8);
var _array_utils_1 = __webpack_require__(49);
var _utils_1 = __webpack_require__(18);
var _base_metadata_1 = __webpack_require__(4);
var data_dashboard_item_1 = __webpack_require__(9);
var _custom_shape_file_data_1 = __webpack_require__(136);
var _map_item_1 = __webpack_require__(44);
var MapItem = (function (_super) {
    __extends(MapItem, _super);
    function MapItem(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.tooltipMeasures = ko.observableArray([]);
        _this._isGeometryChanged = false;
        _this._shapeFilesAttributeNameList = ko.observableArray();
        _this._initialExtentChanged = ko.observable(false);
        _this._isGeometryChangedCallback = function () {
            _this._isGeometryChanged = true;
            _this.viewport.createViewerPaddings(true);
        };
        _this.__tooltipMeasures = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(modelJson.TooltipMeasures, function (item) { return new data_item_1.DataItemLink(_this, item, serializer); });
        _this._subscribeDataItemLinkArrays(_map_item_1.tooltipMeasures);
        _this.__tooltipMeasures.subscribe(function (links) {
            _this._setLinkCollectionAcceptableShapingType(links, data_item_1.AcceptableShapingType.String);
        });
        _this._setLinkCollectionAcceptableShapingType(_this.__tooltipMeasures(), data_item_1.AcceptableShapingType.String);
        if (!modelJson[_map_item_1.viewport.modelName] &&
            !modelJson[_map_item_1.area.modelName] &&
            !modelJson[_custom_shape_file_data_1.shapeData.modelName]) {
            _this.viewport._set({
                'TopLatitude': 83.64513000000001,
                'BottomLatitude': -55.61182999999996,
                'CenterPointLatitude': 44.08908074480383,
                'CenterPointLongitude': 1.4210854715202004e-13,
                'LeftLongitude': -179.99999999999997,
                'RightLongitude': 180
            });
        }
        _this._supportedUIStates(['error', 'loading']);
        return _this;
    }
    MapItem.prototype._clearBindings = function () {
        _super.prototype._clearBindings.call(this);
        this.__tooltipMeasures.removeAll();
    };
    MapItem.prototype._getInfoCore = function () {
        return _map_item_1.mapDashboardItemSerializationsInfo;
    };
    MapItem.prototype._isCalculationSupported = function () {
        return false;
    };
    MapItem.prototype._getMasterFilterMode = function () { return this.interactivityOptions.masterFilterMode(); };
    MapItem.prototype._getDrillDownEnabled = function () { return false; };
    MapItem.prototype._getIgnoreMasterFilter = function () { return this.interactivityOptions.ignoreMasterFilters(); };
    MapItem.prototype._setClientState = function (clientState) {
        _super.prototype._setClientState.call(this, clientState);
    };
    MapItem.prototype._getContentCategories = function () {
        return _super.prototype._getContentCategories.call(this).concat([_base_metadata_1.PropertyCategory.Map]);
    };
    MapItem.prototype._updateContentViewModel = function (content) {
        _super.prototype._updateContentViewModel.call(this, content);
        var mapContent = this._paneContentHolder.getContent(_base_metadata_1.PropertyCategory.Map);
        if (!_array_utils_1.areArraysEqual(this._shapeFilesAttributeNameList(), mapContent.MapAttributesNames)) {
            this._shapeFilesAttributeNameList(mapContent.MapAttributesNames);
        }
        if (mapContent && mapContent.ViewModel) {
            content.ViewModel.MapItems = mapContent.ViewModel.MapItems;
            content.ViewModel.ShapeTitleAttributeName = mapContent.ViewModel.ShapeTitleAttributeName;
            content.ViewModel.LockNavigation = mapContent.ViewModel.LockNavigation;
            content.FullViewport = mapContent.FullViewport;
            if (this._isGeometryChanged) {
                this.viewport._set(mapContent.FullViewport);
                this._isGeometryChanged = false;
            }
        }
        content.ViewModel.Viewport = this.viewport._createViewModel();
    };
    MapItem.prototype._isSortingEnabled = function () {
        return false;
    };
    __decorate([
        _utils_1.collectionItemType('TooltipMeasure')
    ], MapItem.prototype, "__tooltipMeasures", void 0);
    return MapItem;
}(data_dashboard_item_1.DataDashboardItem));
exports.MapItem = MapItem;


/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(708);
__export(__webpack_require__(336));
__export(__webpack_require__(113));
__export(__webpack_require__(591));
__export(__webpack_require__(356));
__export(__webpack_require__(724));
__export(__webpack_require__(592));
__export(__webpack_require__(593));
__export(__webpack_require__(594));
__export(__webpack_require__(595));
__export(__webpack_require__(155));
__export(__webpack_require__(156));
__export(__webpack_require__(357));
__export(__webpack_require__(725));
__export(__webpack_require__(596));
__export(__webpack_require__(358));
__export(__webpack_require__(359));
__export(__webpack_require__(157));


/***/ }),
/* 216 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.ui.dxTooltip };

/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.MIN_PANE_HEIGHT = 20, exports.MIN_PANE_WIDTH = 50, exports.ELEMENTS_COUNT_ANIMATION_THRESHOLD = 7;


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var browser = __webpack_require__(99);
var overlay_1 = __webpack_require__(172);
var $ = __webpack_require__(2);
var _utils_1 = __webpack_require__(3);
var _z_index_1 = __webpack_require__(57);
var _caption_toolbar_arranger_1 = __webpack_require__(148);
var _caption_toolbar_base_1 = __webpack_require__(149);
var _caption_toolbar_css_classes_1 = __webpack_require__(31);
var FloatingCaptionToolbarBase = (function (_super) {
    __extends(FloatingCaptionToolbarBase, _super);
    function FloatingCaptionToolbarBase(_container, _controlContainer, _popupContainer, encodeHtml, _isBottomPosition) {
        var _this = _super.call(this, _container, _controlContainer, _popupContainer, encodeHtml) || this;
        _this._isBottomPosition = _isBottomPosition;
        _this.PREVIEW_TOOLBAR_WIDTH = 15;
        _this._maxWidth = undefined;
        return _this;
    }
    Object.defineProperty(FloatingCaptionToolbarBase.prototype, "isBottomFloatingTypePosition", {
        set: function (isBottom) {
            this._isBottomPosition = isBottom;
        },
        enumerable: true,
        configurable: true
    });
    FloatingCaptionToolbarBase.prototype.update = function (options) {
        this._maxWidth = undefined;
        return _super.prototype.update.call(this, options);
    };
    FloatingCaptionToolbarBase.prototype.calcHeight = function () {
        return 0;
    };
    FloatingCaptionToolbarBase.prototype.onResize = function () {
        _super.prototype.onResize.call(this);
        if (this._initialized) {
            this._floatingPanel.repaint();
        }
    };
    FloatingCaptionToolbarBase.prototype.showFloatingPanel = function () {
        this._floatingPanel.show();
        this._toolbar.repaint();
    };
    FloatingCaptionToolbarBase.prototype.hideFloatingPanel = function () {
        this._floatingPanel.hide();
        this._toolbar.repaint();
    };
    FloatingCaptionToolbarBase.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._floatingPanel && this._floatingPanel.dispose();
    };
    FloatingCaptionToolbarBase.prototype._appendToContainer = function (toolbarDiv) {
        var floadingPanelDiv = document.createElement('div');
        floadingPanelDiv.classList.add(_caption_toolbar_css_classes_1.cssClasses.floatingContainer);
        $(this._container).prepend(floadingPanelDiv);
        this._floatingPanel = this._createFloatingPanel(toolbarDiv, floadingPanelDiv, false);
        return floadingPanelDiv;
    };
    FloatingCaptionToolbarBase.prototype._updateToolbar = function () {
        _super.prototype._updateToolbar.call(this);
        this._repaintFloatingPanel();
    };
    FloatingCaptionToolbarBase.prototype._repaintFloatingPanel = function () {
        if (this._floatingPanel)
            this._floatingPanel.repaint();
    };
    FloatingCaptionToolbarBase.prototype._getVisibleItems = function () {
        return _caption_toolbar_arranger_1.arrangeFloatingToolbarItems(this._options);
    };
    FloatingCaptionToolbarBase.prototype._createInstance = function () {
        return new FloatingCaptionToolbarBase(undefined, undefined, undefined, this.encodeHtml, this._isBottomPosition);
    };
    FloatingCaptionToolbarBase.prototype._getToolbarItems = function (items) {
        var _this = this;
        return items.map(function (item) { return _this._adapter.createToolbarItem(item, _this._controlContainer, _this._popupContainer, function () { return _this.hideFloatingPanel(); }); }).filter(function (item) { return item !== undefined; });
    };
    FloatingCaptionToolbarBase.prototype._getToolbarWidth = function (floadingPanelDiv) {
        if (!this._maxWidth) {
            this._maxWidth = Math.min($(this._container).outerWidth(), $(floadingPanelDiv)
                .find('.dx-toolbar-items-container')
                .children()
                .toArray()
                .filter(function (child) { return !$(child).is(':empty'); })
                .reduce(function (acc, child) { return acc + $(child).outerWidth(); }, 0));
        }
        return this._maxWidth;
    };
    FloatingCaptionToolbarBase.prototype._createFloatingPanel = function (toolbarDiv, floadingPanelDiv, preview) {
        var _this = this;
        var position = this._isBottomPosition ? 'bottom right' : 'top right';
        var options = {
            shading: false,
            animation: false,
            width: function () {
                return preview ? _this.PREVIEW_TOOLBAR_WIDTH : _this._getToolbarWidth(floadingPanelDiv);
            },
            height: 'auto',
            contentTemplate: function (contentElement) {
                _utils_1.$unwrap(contentElement).appendChild(toolbarDiv);
            },
            closeOnOutsideClick: false,
            position: {
                boundary: this._container,
                my: position,
                at: position,
                offset: this._isBottomPosition ? '2 2' : '2 -2',
                of: this._container
            },
            onShowing: function (e) {
                var wrapper = _utils_1.$unwrap(e.component._$wrapper);
                var baseZIndex = _z_index_1.zIndex.floatingToolbar;
                wrapper.style.zIndex = (preview ? baseZIndex : baseZIndex + 1).toString();
                var overlayContent = wrapper.querySelector('.dx-overlay-content');
                if (overlayContent) {
                    overlayContent.style.zIndex = wrapper.style.zIndex + 1;
                }
            }
        };
        options = __assign({}, options, { target: this._container, container: this._container, closeOnSwipe: false, propagateOutsideClick: true });
        var isBrowserIE = !!browser.msie;
        var browserMajorVersion = parseInt(browser.version, 10);
        if (isBrowserIE && browserMajorVersion < 12) {
            options.onShown = function (e) {
                _this._toolbar.option(_this._getToolbarOptions());
            };
        }
        return new overlay_1.default(floadingPanelDiv, options);
    };
    return FloatingCaptionToolbarBase;
}(_caption_toolbar_base_1.DashboardCaptionToolbarBase));
exports.FloatingCaptionToolbarBase = FloatingCaptionToolbarBase;


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _caption_toolbar_arranger_1 = __webpack_require__(148);
var _caption_toolbar_base_1 = __webpack_require__(149);
var _caption_toolbar_css_classes_1 = __webpack_require__(31);
var StaticCaptionToolbar = (function (_super) {
    __extends(StaticCaptionToolbar, _super);
    function StaticCaptionToolbar(_container, _controlContainer, _popupContainer, encodeHtml, _className, _hasBorder, allowHideEmptyToolbar) {
        var _this = _super.call(this, _container, _controlContainer, _popupContainer, encodeHtml) || this;
        _this._className = _className;
        _this._hasBorder = _hasBorder;
        _this.allowHideEmptyToolbar = allowHideEmptyToolbar;
        return _this;
    }
    StaticCaptionToolbar.prototype.calcHeight = function (options) {
        if (this._visible(options)) {
            return _super.prototype.calcHeight.call(this, options);
        }
        else {
            return 0;
        }
    };
    StaticCaptionToolbar.prototype.calcMinWidth = function (options) {
        if (this._visible(options)) {
            return _super.prototype.calcMinWidth.call(this, options);
        }
        else {
            return 0;
        }
    };
    StaticCaptionToolbar.prototype.update = function (options) {
        var heightChanded = false;
        if (this._visible(options)) {
            heightChanded = _super.prototype.update.call(this, options);
            if (this._hasBorder) {
                this._toolbarDiv.classList.add(_caption_toolbar_css_classes_1.cssClasses.captionBorder);
            }
        }
        else if (this._initialized) {
            this.dispose();
            heightChanded = true;
        }
        return heightChanded;
    };
    StaticCaptionToolbar.prototype._getVisibleItems = function () {
        return _caption_toolbar_arranger_1.arrangeStaticToolbarItems(this._options, this._disabled);
    };
    StaticCaptionToolbar.prototype._createInstance = function () {
        return new StaticCaptionToolbar(undefined, undefined, undefined, this.encodeHtml, this._className, this._hasBorder, this.allowHideEmptyToolbar);
    };
    StaticCaptionToolbar.prototype._visible = function (options) {
        return !this.allowHideEmptyToolbar || options.actionItems.length > 0 || options.navigationItems.length > 0 || options.stateItems.length > 0 || options.staticItems.length > 0;
    };
    return StaticCaptionToolbar;
}(_caption_toolbar_base_1.DashboardCaptionToolbarBase));
exports.StaticCaptionToolbar = StaticCaptionToolbar;


/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SimpleIndicator = (function () {
    function SimpleIndicator() {
    }
    SimpleIndicator.getIndicator = function (type, hasPositiveMeaning) {
        return SimpleIndicator.svgIndicators[type + ((type === 'up' || type === 'down') && !hasPositiveMeaning ? '_negative' : '')];
    };
    SimpleIndicator._staticPartMarkup = '<svg viewBox="0 0 400 300" width="100%" height="100%" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0); display: block;"><path class="';
    SimpleIndicator.svgIndicators = {
        none: '<svg width="24" height="18" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0); display: block;"></svg>',
        up: SimpleIndicator._staticPartMarkup + 'dx-carditem-positive-color" d="M 0 300 L 200 0 L 400 300 Z"></path></svg>',
        up_negative: SimpleIndicator._staticPartMarkup + 'dx-carditem-negative-color" d="M 0 300 L 200 0 L 400 300 Z"></path></svg>',
        down: SimpleIndicator._staticPartMarkup + 'dx-carditem-positive-color" d="M 0 0 L 200 300 L 400 0 Z"></path></svg>',
        down_negative: SimpleIndicator._staticPartMarkup + 'dx-carditem-negative-color" d="M 0 0 L 200 300 L 400 0 Z"></path></svg>',
        warning: '<svg viewBox="0 0 18 18" width="100%" height="100%" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0); display: block;"><circle cx="9" cy="9" r="8.7" class="dx-carditem-warning-color"></circle></svg>'
    };
    return SimpleIndicator;
}());
exports.SimpleIndicator = SimpleIndicator;


/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var array_store_1 = __webpack_require__(168);
var data_source_1 = __webpack_require__(65);
var _filter_element_data_controller_1 = __webpack_require__(97);
var _base_item_1 = __webpack_require__(29);
var _interactivity_controller_1 = __webpack_require__(150);
var PAGE_SIZE = 100;
var filterElementBaseItem = (function (_super) {
    __extends(filterElementBaseItem, _super);
    function filterElementBaseItem(container, options) {
        return _super.call(this, container, options) || this;
    }
    filterElementBaseItem.prototype.dispose = function () {
        this.widget && this.widget.dispose();
    };
    filterElementBaseItem.prototype._setSelectionUnsafe = function (values) {
        _super.prototype._setSelectionUnsafe.call(this, values);
        this.dataController.update(values, this._isEncodeHtml(), true);
    };
    filterElementBaseItem.prototype.renderContentUnsafe = function (element, changeExisting, afterRenderCallback) {
        var opts = this._getOptions(true);
        this._raiseItemWidgetOptionsPrepared(opts);
        this._lock();
        try {
            if (changeExisting && this.widget && this.widget.NAME === this._getWidgetName()) {
                this.widget.option(opts);
            }
            else {
                var div = this._createWidgetDiv();
                element.innerHTML = '';
                element.appendChild(div);
                this.widget = this._createWidget(div, opts);
            }
        }
        finally {
            this._unlock();
        }
        return false;
    };
    filterElementBaseItem.prototype._createWidgetDiv = function () {
        return document.createElement('div');
    };
    filterElementBaseItem.prototype._initializeData = function (newOptions) {
        _super.prototype._initializeData.call(this, newOptions);
        if (this.options) {
            this.options.allowExport = false;
        }
    };
    Object.defineProperty(filterElementBaseItem.prototype, "allowMultiselection", {
        get: function () {
            return true;
        },
        set: function (value) {
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(filterElementBaseItem.prototype, "isMultiSelectable", {
        get: function () {
            return this.dataController ? this.dataController.isMultiselectable() : false;
        },
        enumerable: true,
        configurable: true
    });
    filterElementBaseItem.prototype._isPaneEmpty = function () {
        return _super.prototype._isPaneEmpty.call(this) || !this.hasCaption();
    };
    filterElementBaseItem.prototype.updateInteractivityOptions = function () {
        this.interactivityController.setOptions(this.isMultiSelectable ? _interactivity_controller_1.dashboardSelectionMode.multiple : _interactivity_controller_1.dashboardSelectionMode.single);
        this.interactivityController._allowSelectTuple = function (tuple) { return true; };
    };
    filterElementBaseItem.prototype.getDataSource = function () {
        return new data_source_1.default({
            paginate: true,
            pageSize: PAGE_SIZE,
            requireTotalCount: true,
            store: new array_store_1.default({
                data: this.dataController.dataSource,
                key: _filter_element_data_controller_1.KEY_EXPR
            }),
            searchOperation: 'contains',
            searchExpr: this._getDisplayExpr()
        });
    };
    Object.defineProperty(filterElementBaseItem.prototype, "_enableSearch", {
        get: function () {
            return !!this.options && !!this.options.ViewModel && this.options.ViewModel.EnableSearch;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(filterElementBaseItem.prototype, "_isBottomFloatingToolbarPosition", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    filterElementBaseItem.prototype._isBorderRequired = function () {
        return false;
    };
    filterElementBaseItem.prototype._getDisplayExpr = function () {
        return this._isEncodeHtml() ? 'text' : 'html';
    };
    filterElementBaseItem.prototype._getOptions = function (includeActions) {
        return {};
    };
    filterElementBaseItem.prototype._hasToggleSelectionModeButton = function () {
        return false;
    };
    filterElementBaseItem.prototype._resizeUnsafe = function () {
        _super.prototype._resizeUnsafe.call(this);
        if (this.widget.updateDimensions) {
            this.widget.updateDimensions();
        }
    };
    filterElementBaseItem.prototype._raiseItemClick = function (elements) {
        if (this._isLocked()) {
            return;
        }
        var axisName = this._getAxisNames()[0], newSelectedValues = this.dataController.getInteractionValues(elements, this._getSelectedValues()), tuples = !newSelectedValues ? null : newSelectedValues.map(function (v) { return [{ AxisName: axisName, Value: v }]; });
        this.interactivityController.clickAction(tuples, !newSelectedValues);
    };
    filterElementBaseItem.prototype._mustSelectingFired = function (values) {
        return true;
    };
    filterElementBaseItem.prototype._isUpdating = function (widget) {
        return !widget || widget._updateLockCount > 0;
    };
    filterElementBaseItem.prototype._applySelectionUnsafe = function () {
        var selectedValues = this._getSelectedValues();
        if (!!selectedValues) {
            this.setSelection(selectedValues);
        }
    };
    filterElementBaseItem.prototype._selectTuples = function (tuplesToSelect, unaffectedTuples, isSelect) {
    };
    filterElementBaseItem.prototype._getWidget = function () {
        return this.widget;
    };
    filterElementBaseItem.prototype._getWidgetName = function () {
        return '';
    };
    filterElementBaseItem.prototype._createWidget = function (div, opts) {
        return null;
    };
    return filterElementBaseItem;
}(_base_item_1.baseItem));
exports.filterElementBaseItem = filterElementBaseItem;


/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var _common_1 = __webpack_require__(35);
var _format_helper_1 = __webpack_require__(47);
var _formatter_1 = __webpack_require__(25);
var _base_item_1 = __webpack_require__(29);
var date_filter_widget_1 = __webpack_require__(715);
exports.cssDateFilterClassNames = {
    item: 'dx-dashboard-date-filter-item'
};
var dateFilterElement = (function (_super) {
    __extends(dateFilterElement, _super);
    function dateFilterElement(container, options) {
        return _super.call(this, container, options) || this;
    }
    Object.defineProperty(dateFilterElement.prototype, "_allowPreview", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    dateFilterElement.prototype._getMinContentHeight = function () {
        if (this.widget && this._isFixedHeight)
            return this.widget._getHeight();
        return 0;
    };
    dateFilterElement.prototype.renderContentUnsafe = function (element, changeExisting, afterRenderCallback) {
        _super.prototype.renderContentUnsafe.call(this, element, changeExisting, afterRenderCallback);
        var isFirstInitialization = !changeExisting || !this.widget;
        if (isFirstInitialization)
            this.widget = new date_filter_widget_1.DateFilterWidget(element, { useNativeScrolling: this.options.useNativeScrolling, overflow: this.options.overflow }, this._getBoundaryContainer());
        var options = this.getWidgetOptions();
        this._lock();
        this.widget._update(options);
        this._unlock();
        this.widget._updateSize($(this.contentRoot).width(), $(this.contentRoot).height());
        this._isFixedHeight = options.arrangementMode === 'AutoHeight';
        this.timePeriodMenuSelectedIndex = this.options.ViewModel.SelectedPeriodIndex;
        this._applySelectionToWidget();
        return false;
    };
    dateFilterElement.prototype.getInfoUnsafe = function () {
        return __assign({}, _super.prototype.getInfoUnsafe.call(this), { selectedPeriodName: this._getCurrentPredefinedRange() });
    };
    dateFilterElement.prototype._setSelectionUnsafe = function (values) {
        _super.prototype._setSelectionUnsafe.call(this, values);
        this._applySelectionToWidget();
    };
    dateFilterElement.prototype._clearSelectionUnsafe = function () {
        _super.prototype._clearSelectionUnsafe.call(this);
        if (this.widget) {
            this.timePeriodMenuSelectedIndex = undefined;
            this._clearSelectedValues();
        }
    };
    dateFilterElement.prototype._initializeData = function (newOptions) {
        _super.prototype._initializeData.call(this, newOptions);
        if (this.options) {
            this.options.allowExport = false;
        }
    };
    dateFilterElement.prototype._clearSelectedValues = function () {
        this._lock();
        this.widget._clearSelectedValues();
        this._unlock();
    };
    dateFilterElement.prototype._applySelectionToWidget = function () {
        var _this = this;
        this._lock();
        if (this.timePeriodMenuSelectedIndex !== undefined) {
            this.widget._setPeriod(this.timePeriodMenuSelectedIndex);
        }
        else {
            var selectedValues = this.options.SelectedValues && this.options.SelectedValues[0] && this.options.SelectedValues[0].map(function (v) { return _this._convertSelectedValues(v); });
            this.widget._setSelectedValues(selectedValues);
        }
        this._unlock();
        this.updateConstraints();
    };
    dateFilterElement.prototype.getWidgetOptions = function () {
        var _this = this;
        var multiData = this.options.multiData;
        var filterViewModel = this.options.ViewModel;
        var getValue = function (name) {
            return multiData && multiData.getMeasureValue(name).getValue();
        };
        return {
            filterType: filterViewModel.FilterType,
            arrangementMode: filterViewModel.ArrangementMode,
            datePickerLocation: filterViewModel.DatePickerLocation,
            displayTextPattern: filterViewModel.DisplayTextPattern,
            groupInterval: filterViewModel.GroupInterval,
            format: function (value) {
                var valueToFormat = value;
                if (filterViewModel.GroupInterval === 'Year')
                    valueToFormat = _this._ensureYearValue(valueToFormat);
                return _format_helper_1.formatHelper.format(valueToFormat, _formatter_1.convertToFormat({ DateTimeFormat: filterViewModel.DateTimeFormat }));
            },
            buttonClick: function (name) {
                if (!_this._isLocked()) {
                    for (var i = 0; i < filterViewModel.DateTimePeriods.length; i++) {
                        if (name === filterViewModel.DateTimePeriods[i].Name && (name !== _this._getCurrentPredefinedRange())) {
                            _this.predefinedRangeChanged && _this.predefinedRangeChanged(name);
                            break;
                        }
                    }
                }
            },
            buttonsInfo: filterViewModel.DateTimePeriods.map(function (period) { return period.Name; }),
            valueChanged: function (values) {
                if (!_this._isLocked())
                    _this.selected.fire(_this.getName(), _common_1.viewerActions.setMasterFilter, [values]);
            },
            minimum: getValue(filterViewModel.MinimumId),
            maximum: getValue(filterViewModel.MaximumId),
            clearAction: function () { return _this.clearMasterFilter.fire(_this.getName()); },
            hasOuterMargin: !this._isPaneEmpty() || this.visualMode === 'content',
            mobileLayout: this._mobileLayout()
        };
    };
    dateFilterElement.prototype._mobileLayout = function () {
        return false;
    };
    dateFilterElement.prototype._convertSelectedValues = function (value) {
        return value != null && this.options.ViewModel.GroupInterval == 'Year' && typeof value === 'number' ? new Date(value, 0, 1) : value;
    };
    dateFilterElement.prototype._getCurrentPredefinedRange = function () {
        return this.timePeriodMenuSelectedIndex !== undefined ? this.options.ViewModel.DateTimePeriods[this.timePeriodMenuSelectedIndex].Name : '';
    };
    dateFilterElement.prototype._setPredefinedRange = function (dateTimePeriodName) {
        if (dateTimePeriodName) {
            var dateTimePeriods = this.options.ViewModel.DateTimePeriods;
            var period = dateTimePeriods.filter(function (dateTimePeriod) { return dateTimePeriod.Name === dateTimePeriodName; })[0];
            if (period) {
                var index = dateTimePeriods.indexOf(period);
                this.timePeriodMenuSelectedIndex = index;
                this._applySelectionToWidget();
            }
        }
        else {
            this.timePeriodMenuSelectedIndex = undefined;
        }
    };
    dateFilterElement.prototype._ensureYearValue = function (value) {
        return value instanceof Date ? value.getFullYear() : value;
    };
    dateFilterElement.prototype._updateContentSizeUnsafe = function () {
        _super.prototype._updateContentSizeUnsafe.call(this);
        var width = $(this.contentRoot).width(), height = $(this.contentRoot).height();
        if (this.options.ViewModel.ArrangementMode === 'AutoHeight') {
            var oldHeight = this._getMinContentHeight();
            this.widget._updateSize(width, height);
            var newHeight = this._getMinContentHeight();
            if (oldHeight && oldHeight != newHeight) {
                this.updateConstraints();
                this.setSize(width, newHeight);
            }
        }
        else
            this.widget._updateSize(width, height);
    };
    dateFilterElement.prototype._getWidget = function () {
        return this.widget;
    };
    dateFilterElement.prototype._isBorderRequired = function () {
        return false;
    };
    dateFilterElement.prototype._isPaneEmpty = function () {
        return _super.prototype._isPaneEmpty.call(this) || !this.hasCaption();
    };
    dateFilterElement.prototype._isTransparentBackground = function () {
        return this._isPaneEmpty() && this.visualMode !== 'content';
    };
    dateFilterElement.prototype._generateInnerBorderClassesUnsafe = function (element) {
        var classes = _super.prototype._generateInnerBorderClassesUnsafe.call(this, element);
        if (!this._isPaneEmpty()) {
            classes.push(exports.cssDateFilterClassNames.item);
        }
        if (element) {
            if (this._isPaneEmpty()) {
                element.classList.remove(exports.cssDateFilterClassNames.item);
            }
            else {
                element.classList.add(exports.cssDateFilterClassNames.item);
            }
        }
        return classes;
    };
    dateFilterElement.MinMeasureId = 'DateFilterMin';
    dateFilterElement.MaxMeasureId = 'DateFilterMax';
    return dateFilterElement;
}(_base_item_1.baseItem));
exports.dateFilterElement = dateFilterElement;


/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _utils_1 = __webpack_require__(3);
var cardLayout = (function () {
    function cardLayout(apiHandlers) {
        var _this = this;
        this.apiHandlers = apiHandlers;
        this.rows = [];
        this._createCFFilter = function (elementType) { return (function (rule, applyToCardId) {
            var cardRule = rule;
            return _this._isValidCardId(cardRule, applyToCardId) && (!elementType || cardRule.ApplyToLayoutElement === elementType || cardRule.ApplyToRow === true);
        }); };
    }
    cardLayout.prototype.getCardBackgroundColor = function () {
        return this.apiHandlers && this.apiHandlers.cardBackColor;
    };
    cardLayout.prototype._isValidCardId = function (cardRule, applyToCardId) {
        if (cardRule.ApplyToCardId)
            return cardRule.ApplyToCardId === applyToCardId;
        return true;
    };
    cardLayout.prototype.fill = function (layoutModel) {
        var _this = this;
        this.minWidth = layoutModel.MinWidth;
        this.maxWidth = layoutModel.MaxWidth;
        layoutModel.Rows.forEach(function (rowModel, i) {
            var row = new cardRow();
            row.vAlignment = _this.convertVAlignment(rowModel.VAlignment);
            row.indent = rowModel.Indent;
            rowModel.Elements.forEach(function (elementModel, j) {
                if (elementModel.Type === 'Indicator') {
                    var indicatorElement = new cardIndicatorElement();
                    indicatorElement.getStyleSettings = function (data) {
                        return data.getStyleSettingsInfo(_this._createCFFilter(elementModel.Type));
                    };
                    indicatorElement.getIndicatorType = function (data) {
                        return _this.isDeltaType(elementModel.Type) && data.getIndicatorType();
                    };
                    indicatorElement.getIsGood = function (data) {
                        return _this.isDeltaType(elementModel.Type) && data.getIsGood();
                    };
                    indicatorElement.width = elementModel.Size;
                    indicatorElement.height = Math.round(elementModel.Size / elementModel.IndicatorWidthRatio);
                    indicatorElement.hAlignment = _this.convertHAlignment(elementModel.HAlignment);
                    row.elements.push(indicatorElement);
                }
                else if (elementModel.Type === 'Sparkline') {
                    var sparklineElement = new cardSparklineElement();
                    sparklineElement.height = elementModel.Size;
                    sparklineElement.getSparklineOptions = function (data) {
                        return data.getSparklineOptions();
                    };
                    row.elements.push(sparklineElement);
                }
                else {
                    var rowElement = new cardRowElement();
                    rowElement.getStyleSettings = function (data) {
                        return data.getStyleSettingsInfo(_this._createCFFilter(elementModel.Type));
                    };
                    rowElement.predefinedColor = elementModel.PredefinedColor;
                    rowElement.color = _this.convertElementColor(elementModel.Color);
                    rowElement.hAlignment = _this.convertHAlignment(elementModel.HAlignment);
                    rowElement.fontSize = elementModel.FontSize;
                    rowElement.fontFamily = elementModel.FontFamily;
                    rowElement.getValueArgs = function (data) {
                        return _this.getElementValue(data, elementModel);
                    };
                    rowElement.getText = function (data) {
                        var text;
                        var valueArgs = _this.getElementValue(data, elementModel);
                        if (_this.apiHandlers && _this.apiHandlers.onCustomizeText) {
                            text = _this.apiHandlers.onCustomizeText(valueArgs);
                        }
                        return text || valueArgs.getDefaultText();
                    };
                    rowElement.getIndicatorType = function (data) {
                        return _this.isDeltaType(elementModel.Type) ? data.getIndicatorType() : undefined;
                    };
                    rowElement.getIsGood = function (data) {
                        return _this.isDeltaType(elementModel.Type) && data.getIsGood();
                    };
                    row.elements.push(rowElement);
                }
            });
            _this.rows.push(row);
        });
        this.getStyleSettings = function (data) {
            return data.getStyleSettingsInfo(_this._createCFFilter());
        };
    };
    cardLayout.prototype.isDeltaType = function (elementType) {
        return elementType === 'AbsoluteVariation' ||
            elementType === 'PercentVariation' ||
            elementType === 'PercentOfTarget' ||
            elementType === 'ActualValue' ||
            elementType === 'TargetValue' ||
            elementType === 'Indicator';
    };
    cardLayout.prototype.convertElementColor = function (color) {
        return color ? _utils_1.toColor(color) : null;
    };
    cardLayout.prototype.getElementValue = function (data, elementModel) {
        var valueGetter = function () { return ''; };
        var displayTextGetter = function () { return ''; };
        switch (elementModel.Type) {
            case 'Title':
                valueGetter = data.getTitle;
                displayTextGetter = data.getTitle;
                break;
            case 'Subtitle':
                valueGetter = data.getSubtitle;
                displayTextGetter = data.getSubtitle;
                break;
            case 'Text':
                valueGetter = function (s) { return elementModel.Text; };
                displayTextGetter = function (s) { return elementModel.Text; };
                break;
            case 'ActualValue':
                valueGetter = data.getActualValue;
                displayTextGetter = data.getActualValueText;
                break;
            case 'AbsoluteVariation':
                valueGetter = data.getAbsoluteVariationValue;
                displayTextGetter = data.getAbsoluteVariationText;
                break;
            case 'PercentVariation':
                valueGetter = data.getPercentVariationValue;
                displayTextGetter = data.getPercentVariationText;
                break;
            case 'PercentOfTarget':
                valueGetter = data.getPercentOfTargetValue;
                displayTextGetter = data.getPercentOfTargetText;
                break;
            case 'TargetValue':
                valueGetter = data.getTargetValue;
                displayTextGetter = data.getTargetValueText;
                break;
            case 'Dimension':
                valueGetter = data.getDimensionValue;
                displayTextGetter = data.getDimensionValueText;
                break;
            case 'Measure':
                valueGetter = data.getMeasureValue;
                displayTextGetter = data.getMeasureDisplayText;
                break;
            case 'CardName':
                valueGetter = data.getCardName;
                displayTextGetter = data.getCardName;
                break;
        }
        return {
            getValue: function () {
                return valueGetter(elementModel.DataId);
            },
            getDefaultText: function () {
                return displayTextGetter(elementModel.DataId);
            }
        };
    };
    cardLayout.prototype.convertVAlignment = function (value) {
        switch (value) {
            case 'Top':
                return verticalAlignment.top;
            case 'Bottom':
                return verticalAlignment.bottom;
            case 'Center':
            default:
                return verticalAlignment.center;
        }
    };
    cardLayout.prototype.convertHAlignment = function (value) {
        switch (value) {
            case 'Center':
                return horizontalAlignment.center;
            case 'Right':
                return horizontalAlignment.right;
            case 'Left':
            default:
                return horizontalAlignment.left;
        }
    };
    return cardLayout;
}());
exports.cardLayout = cardLayout;
var cardRow = (function () {
    function cardRow() {
        this.elements = [];
    }
    return cardRow;
}());
exports.cardRow = cardRow;
var cardRowElementBase = (function () {
    function cardRowElementBase() {
    }
    return cardRowElementBase;
}());
exports.cardRowElementBase = cardRowElementBase;
var cardRowElement = (function (_super) {
    __extends(cardRowElement, _super);
    function cardRowElement() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return cardRowElement;
}(cardRowElementBase));
exports.cardRowElement = cardRowElement;
var cardIndicatorElement = (function (_super) {
    __extends(cardIndicatorElement, _super);
    function cardIndicatorElement() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return cardIndicatorElement;
}(cardRowElementBase));
exports.cardIndicatorElement = cardIndicatorElement;
var cardSparklineElement = (function (_super) {
    __extends(cardSparklineElement, _super);
    function cardSparklineElement() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return cardSparklineElement;
}(cardRowElementBase));
exports.cardSparklineElement = cardSparklineElement;
var sparklineOptions = (function () {
    function sparklineOptions(sparklineOptionsModel) {
        this.viewType = sparklineOptionsModel.ViewType;
        this.highlightMinMaxPoints = sparklineOptionsModel.HighlightMinMaxPoints;
        this.highlightStartEndPoints = sparklineOptionsModel.HighlightStartEndPoints;
    }
    return sparklineOptions;
}());
exports.sparklineOptions = sparklineOptions;
var horizontalAlignment;
(function (horizontalAlignment) {
    horizontalAlignment[horizontalAlignment["left"] = 0] = "left";
    horizontalAlignment[horizontalAlignment["right"] = 1] = "right";
    horizontalAlignment[horizontalAlignment["center"] = 2] = "center";
})(horizontalAlignment = exports.horizontalAlignment || (exports.horizontalAlignment = {}));
var verticalAlignment;
(function (verticalAlignment) {
    verticalAlignment[verticalAlignment["top"] = 0] = "top";
    verticalAlignment[verticalAlignment["center"] = 1] = "center";
    verticalAlignment[verticalAlignment["bottom"] = 2] = "bottom";
})(verticalAlignment = exports.verticalAlignment || (exports.verticalAlignment = {}));


/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var custom_properties_metadata_1 = __webpack_require__(177);
var _object_properties_wrapper_1 = __webpack_require__(10);
var _accordion_tab_1 = __webpack_require__(7);
var CustomTabOrderNo = 500000;
function _customizeTabs(tabs, customSectionOption, object) {
    customSectionOption.items.forEach(function (item) {
        if (item.dataField && !custom_properties_metadata_1._customMetadataContainsProperty(item.dataField) && !object.customProperties._isKnownProperty(item.dataField)) {
            console.warn("You cannot create an editor for the '" + item.dataField + "' because the custom property with this name is not registered. First, pass the corresponding custom property options to the registerCustomProperty method.");
        }
    });
    if (customSectionOption.items.some(function (formOption) { return !!object.customProperties._isKnownProperty(formOption.dataField); })) {
        var wrapper = new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: object.customProperties,
            properties: customSectionOption.items.map(function (formItem) {
                return {
                    propertyName: formItem.dataField,
                    dxFormItem: formItem
                };
            })
        });
        wrapper.onContentReady = customSectionOption.onContentReady;
        wrapper.onInitialized = customSectionOption.onInitialized;
        wrapper.onFieldDataChanged = customSectionOption.onFieldDataChanged;
        var tab = new _accordion_tab_1.AccordionTab(customSectionOption.title, customSectionOption.title, wrapper);
        tab.orderNo = CustomTabOrderNo;
        tabs.push(tab);
    }
}
exports._customizeTabs = _customizeTabs;


/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var ConfirmDialogViewModel = (function () {
    function ConfirmDialogViewModel() {
        this.confirmTitle = ko.observable('');
        this.confirmText = ko.observable('');
        this.confirmVisible = ko.observable(false);
        this.confirmButtons = ko.observable([]);
    }
    ConfirmDialogViewModel.prototype.confirm = function (title, message, okButtonText, cancelButtonText) {
        var _this = this;
        var deffered = $.Deferred();
        this.confirmTitle(title);
        this.confirmText(message);
        this.confirmButtons([
            {
                toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                    text: okButtonText,
                    type: 'default',
                    onClick: function () {
                        setTimeout(function () { _this.confirmVisible(false); }, 1);
                        deffered.resolve(true);
                    }
                }
            },
            {
                toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                    text: cancelButtonText,
                    onClick: function () {
                        setTimeout(function () { _this.confirmVisible(false); }, 1);
                        deffered.resolve(false);
                    }
                }
            }
        ]);
        this.confirmVisible(true);
        return deffered.promise();
    };
    return ConfirmDialogViewModel;
}());
exports.ConfirmDialogViewModel = ConfirmDialogViewModel;


/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var _display_name_provider_1 = __webpack_require__(24);
var ItemFilterDisplayNameProvider = (function () {
    function ItemFilterDisplayNameProvider(dashboardItem, dataSourceBrowser) {
        this.dashboardItem = dashboardItem;
        this.dataSourceBrowser = dataSourceBrowser;
    }
    ItemFilterDisplayNameProvider.prototype._mapDataItemProperties = function (getSourceProperty, getTargetProperty, value) {
        var dataItem = this.dashboardItem.dataItems().filter(function (di) { return getSourceProperty(di) === value; })[0];
        var result = '';
        if (dataItem) {
            result = getTargetProperty(dataItem);
        }
        else {
            result = value;
        }
        return $.Deferred().resolve(result).promise();
    };
    ItemFilterDisplayNameProvider.prototype.getDisplayNameByPath = function (path, dataMember) {
        var _this = this;
        return this._mapDataItemProperties(function (dataItem) { return dataItem.uniqueName(); }, function (dataItem) { return _display_name_provider_1.getDataItemDisplayName(_this.dataSourceBrowser, _this.dashboardItem, dataItem); }, dataMember);
    };
    ItemFilterDisplayNameProvider.prototype.getRealName = function (path, displayDataMember) {
        var _this = this;
        return this._mapDataItemProperties(function (dataItem) { return _display_name_provider_1.getDataItemDisplayName(_this.dataSourceBrowser, _this.dashboardItem, dataItem); }, function (dataItem) { return dataItem.uniqueName(); }, displayDataMember);
    };
    return ItemFilterDisplayNameProvider;
}());
exports.ItemFilterDisplayNameProvider = ItemFilterDisplayNameProvider;


/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var _data_source_browser_1 = __webpack_require__(40);
var data_item_1 = __webpack_require__(8);
var measure_1 = __webpack_require__(59);
var _data_field_1 = __webpack_require__(14);
var _undo_engine_helper_1 = __webpack_require__(27);
var _data_item_properties_composer_1 = __webpack_require__(116);
var DataItemSurface = (function () {
    function DataItemSurface(model, binding, container, dataSourceBrowser, propertiesController, unwrappedDataItem, fieldConstraint, extendTabsHandler) {
        var _this = this;
        this.model = model;
        this.binding = binding;
        this.propertiesController = propertiesController;
        this.unwrappedDataItem = unwrappedDataItem;
        this.fieldConstraint = fieldConstraint;
        this.extendTabsHandler = extendTabsHandler;
        this._disposables = [];
        this.propertiesTabs = ko.observableArray([]);
        this.choosenField = ko.observable();
        this.newItemCreated = $.Callbacks();
        this.itemSelected = $.Callbacks();
        var composer = new _data_item_properties_composer_1.DataItemsPropertiesComposer();
        var updatePropertiesTabs = function () {
            var result = composer.composeTabs(_this.model, {
                dataDashboardItem: container,
                choosenField: _this.choosenField,
                dataSourceBrowser: dataSourceBrowser,
                unwrappedDataItem: _this.unwrappedDataItem,
                constraint: _this.fullConstraint,
                propertiesController: _this.propertiesController
            });
            _this.extendTabsHandler && _this.extendTabsHandler(result, _this.model.dataItem());
            var promise = dataSourceBrowser.getDataFieldsArray(container.dataSource(), container.dataMember(), '', _data_source_browser_1.isNonCollectionDataField);
            promise.done(function () {
                var oldTabs = _this.propertiesTabs.peek();
                oldTabs && oldTabs.forEach(function (tab) { return tab.dispose(); });
                _this.propertiesTabs(result);
            });
        };
        var subscribeToFieldChanges = function () {
            _this._disposables.push(_this.choosenField.subscribe(function (newField) {
                if (model.dataItem() && model.dataItem().dataMember()) {
                    _this._changeExistingField(container, model, newField, updatePropertiesTabs);
                }
                else {
                    _this._changeNewField(container, newField, updatePropertiesTabs);
                }
            }));
            updatePropertiesTabs();
        };
        if (!!model.dataItem()) {
            dataSourceBrowser
                .findDataField(container.dataSource(), container.dataMember(), model.dataItem().dataMember())
                .done(function (field) {
                if (!!field && field !== _this.choosenField()) {
                    _this.choosenField(field);
                }
                subscribeToFieldChanges();
            });
        }
        else {
            subscribeToFieldChanges();
        }
        this._disposables.push({
            dispose: function () {
                _this.newItemCreated.empty();
            }
        });
    }
    DataItemSurface.prototype._changeNewField = function (container, newField, additionalFunc) {
        var _this = this;
        if (this.model.itemType() !== 'Seed') {
            if (!_data_field_1.IsOlapHierarchyField(newField)) {
                var dataItem = container._createDataItem(newField, this.binding);
                if (this.model._specifics.isAttribute && dataItem instanceof measure_1.Measure) {
                    dataItem.summaryType('Min');
                }
                this.model.uniqueName(dataItem.uniqueName());
                this.newItemCreated.fire(this.model, newField);
                this.itemSelected.fire(this.model, newField);
            }
            else {
                var groupIndex = newField.groupIndex();
                newField['groupDataItems'].forEach(function (groupItem, index) {
                    var dataItem = container._createDataItem(groupItem, _this.binding);
                    dataItem.groupIndex(groupIndex);
                    if (index === 0) {
                        _this.model.uniqueName(dataItem.uniqueName());
                        _this.newItemCreated.fire(_this.model, groupItem);
                    }
                    else {
                        var model = new data_item_1.DataItemLink(container);
                        model.uniqueName(dataItem.uniqueName());
                        _this.newItemCreated.fire(model, groupItem);
                    }
                });
                this.itemSelected.fire(this.model, newField['groupDataItems'][0]);
            }
        }
        else {
            this.newItemCreated.fire(this.model, newField);
            this.itemSelected.fire(this.model, newField);
        }
        additionalFunc();
    };
    DataItemSurface.prototype._changeExistingField = function (container, model, newField, additionalFunc) {
        var _this = this;
        if (!_data_field_1.IsOlapHierarchyField(newField)) {
            container._updateDataItem(model.dataItem(), this.binding, newField, model._specifics.acceptableShapingType);
        }
        else {
            var groupIndex = newField.groupIndex();
            newField['groupDataItems'].forEach(function (groupItem, index) {
                if (index === 0) {
                    container._updateDataItem(model.dataItem(), _this.binding, groupItem, model._specifics.acceptableShapingType);
                    model.dataItem().groupIndex(groupIndex);
                }
                else {
                    var dataItem = container._createDataItem(groupItem, _this.binding);
                    dataItem.groupIndex(groupIndex);
                    var dataItemLink = new data_item_1.DataItemLink(container);
                    dataItemLink.uniqueName(dataItem.uniqueName());
                    _this.newItemCreated.fire(dataItemLink, groupItem);
                }
            });
        }
        additionalFunc();
    };
    Object.defineProperty(DataItemSurface.prototype, "commonDataItemTypeConstraint", {
        get: function () {
            if (this.binding.dataItemType === 'Dimension') {
                return function (field) { return _data_field_1.DataField.ifOlapThenOnlyDimension(field) && !(field.isAggregate && field.isAggregate()); };
            }
            if (this.binding.dataItemType === 'Measure') {
                return function (field) { return _data_field_1.DataField.ifOlapThenOnlyMeasure(field); };
            }
            return function () { return true; };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataItemSurface.prototype, "fullConstraint", {
        get: function () {
            var _this = this;
            return function (field) {
                if (!_this.commonDataItemTypeConstraint(field))
                    return false;
                if (field.isDataFieldNode()) {
                    return !_this.fieldConstraint || _this.fieldConstraint(field);
                }
                else {
                    return true;
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    DataItemSurface.prototype.dispose = function () {
        this._disposables.forEach(function (d) {
            d.dispose();
        });
    };
    __decorate([
        _undo_engine_helper_1.wrapWithUndoRedo
    ], DataItemSurface.prototype, "_changeNewField", null);
    __decorate([
        _undo_engine_helper_1.wrapWithUndoRedo
    ], DataItemSurface.prototype, "_changeExistingField", null);
    return DataItemSurface;
}());
exports.DataItemSurface = DataItemSurface;


/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var model_1 = __webpack_require__(38);
var dimension_1 = __webpack_require__(43);
var measure_1 = __webpack_require__(59);
var enums_1 = __webpack_require__(94);
var format_condition_average_1 = __webpack_require__(263);
var format_condition_expression_1 = __webpack_require__(269);
var format_condition_top_bottom_1 = __webpack_require__(271);
var _format_condition_bar_1 = __webpack_require__(267);
var _format_condition_bar_options_1 = __webpack_require__(266);
var _format_condition_date_occuring_1 = __webpack_require__(268);
var _format_condition_expression_1 = __webpack_require__(270);
var _format_condition_min_max_base_1 = __webpack_require__(183);
var _format_condition_top_bottom_1 = __webpack_require__(184);
var _format_condition_value_1 = __webpack_require__(185);
var _format_condition_range_base_1 = __webpack_require__(128);
var _format_condition_range_gradient_1 = __webpack_require__(187);
var _cells_item_format_rule_1 = __webpack_require__(85);
var _dashboard_item_format_rule_1 = __webpack_require__(52);
var _format_rules_common_1 = __webpack_require__(54);
var _helper_classes_1 = __webpack_require__(36);
var _parameters_helper_1 = __webpack_require__(55);
var _filter_utils_1 = __webpack_require__(158);
var _item_filter_display_name_provider_1 = __webpack_require__(226);
var _item_filter_items_provider_1 = __webpack_require__(159);
var _form_adapter_editors_1 = __webpack_require__(22);
var _object_properties_wrapper_1 = __webpack_require__(10);
var _accordion_tab_1 = __webpack_require__(7);
var FormatRulePropertiesComposer = (function () {
    function FormatRulePropertiesComposer(_options) {
        this._options = _options;
    }
    FormatRulePropertiesComposer.prototype.composeTabs = function (model, args) {
        var commonTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.FormatRuleCommon, 'DashboardWebStringId.AccordionTab.Common');
        var conditionTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.FormatRuleCondition, 'DashboardWebStringId.ConditionalFormatting.Condition');
        var styleTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.FormatRuleMisc, 'DashboardWebStringId.ConditionalFormatting.Miscellaneous');
        this._fillCommonFormatRuleCommonWrapper(commonTab, model, args.dashboardItem, args.dataSourceBrowser, args.requestRecalculation, args.specificTypeChanged);
        if (ko.unwrap(model && model.condition)) {
            this._fillConditionWrapper(conditionTab, model, args.dashboardItem, args.dataSourceBrowser);
            this._fillMiscWrapper(styleTab, model, args.dashboardItem, args.dataSourceBrowser);
        }
        return [commonTab, conditionTab, styleTab];
    };
    FormatRulePropertiesComposer.prototype._fillCommonFormatRuleCommonWrapper = function (tab, formatRule, dashboardItem, dataSourceBrowser, requestRecalculation, specificTypeChanged) {
        var propertiesInfo = this._options.getCommonFormatRuleProperties(formatRule, dashboardItem, dataSourceBrowser, requestRecalculation);
        var disabledRules = {};
        var dataType = this._options.createDataTypeObservable(formatRule, dashboardItem, dataSourceBrowser);
        disabledRules[_cells_item_format_rule_1.formatRuleDataItem.propertyName] = function () { return !!ko.unwrap(formatRule.condition); };
        disabledRules['typeChooser'] = function () { return !!ko.unwrap(formatRule.condition); };
        var wrapper = new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: formatRule,
            visibilityFilterRules: propertiesInfo.visibilityFilterRules,
            properties: propertiesInfo.properties,
            disabledFilterRules: __assign({}, disabledRules, propertiesInfo.disabledFilterRules)
        });
        addConditionEditor(wrapper, dataType, formatRule, dashboardItem, requestRecalculation, specificTypeChanged, this._options.conditionTypeFilter);
        tab.tabModel(wrapper);
    };
    FormatRulePropertiesComposer.prototype._fillConditionWrapper = function (tab, model, dashboardItem, dataSourceBrowser) {
        var p = [];
        var visibilityRules = {};
        visibilityRules[_format_condition_range_base_1.rangeValueType.propertyName] = function () { return model.condition() && !model.condition().dateTimeGroupInterval(); };
        switch (model.condition() && model.condition().constructor) {
            case model_1.FormatConditionValue:
                p.push({
                    container: _dashboard_item_format_rule_1.condition,
                    properties: [{
                            container: _format_condition_value_1.formatConditionValue1,
                            properties: [
                                __assign({ simpleFormAdapterItem: _parameters_helper_1.ParameterHelper.getEditorType(model.condition()[_format_condition_value_1.formatConditionValue1.propertyName].type()), displayName: 'DashboardStringId.ValueCaption', replacementPropertyName: 'value1_value' }, _format_rules_common_1.complexValueValue)
                            ]
                        }, {
                            container: _format_condition_value_1.formatConditionValue2,
                            properties: [__assign({ simpleFormAdapterItem: _parameters_helper_1.ParameterHelper.getEditorType(model.condition()[_format_condition_value_1.formatConditionValue1.propertyName].type()), displayName: 'DashboardStringId.Value2Caption', replacementPropertyName: 'value2_value' }, _format_rules_common_1.complexValueValue)]
                        }, __assign({}, _format_rules_common_1.styleSettings, { formAdapterItem: _form_adapter_editors_1.styleSettingsEditor() }), _format_condition_value_1.conditionInCondition,
                    ]
                });
                visibilityRules['value2_value'] =
                    [_format_condition_value_1.conditionInCondition.propertyName, 'contains', 'Between'];
                visibilityRules[_format_condition_value_1.conditionInCondition.propertyName] = function () { return false; };
                break;
            case format_condition_top_bottom_1.FormatConditionTopBottom:
                p.push({
                    container: _dashboard_item_format_rule_1.condition,
                    properties: [
                        __assign({}, _format_rules_common_1.styleSettings, { formAdapterItem: _form_adapter_editors_1.styleSettingsEditor() }),
                        _format_condition_top_bottom_1.rank,
                        _format_condition_top_bottom_1.rankType
                    ]
                });
                break;
            case format_condition_average_1.FormatConditionAverage:
                p.push({
                    container: _dashboard_item_format_rule_1.condition,
                    properties: [
                        __assign({}, _format_rules_common_1.styleSettings, { formAdapterItem: _form_adapter_editors_1.styleSettingsEditor() }),
                    ]
                });
                break;
            case model_1.FormatConditionDateOccurring:
                p.push({
                    container: _dashboard_item_format_rule_1.condition,
                    properties: [
                        __assign({}, _format_rules_common_1.styleSettings, { formAdapterItem: _form_adapter_editors_1.styleSettingsEditor() }),
                        __assign({}, _format_condition_date_occuring_1.dateType, { formAdapterItem: _form_adapter_editors_1.flagsEnumTagBoxEditor({
                                values: _format_condition_date_occuring_1.dateTypeValues,
                                enumDeclaration: enums_1.FilterDateType
                            }) })
                    ]
                });
                break;
            case format_condition_expression_1.FormatConditionExpression:
                var expressionCondition = model.condition();
                var ruleExpressionEditorParams = {
                    fieldListProvider: ko.observable(new _item_filter_items_provider_1.ItemFilterItemsProvider(dataSourceBrowser, dataSourceBrowser, dataSourceBrowser.parameters, dashboardItem, function (di) { return dashboardItem._conditionFormattingExpressionEditorFilter(di); })),
                    options: _filter_utils_1.createItemFilterOptions(expressionCondition.expression, expressionCondition, dataSourceBrowser, { text: 'Expression', localizationId: 'DashboardStringId.CommandFormatRuleExpression' }),
                    displayNameProvider: new _item_filter_display_name_provider_1.ItemFilterDisplayNameProvider(dashboardItem, dataSourceBrowser)
                };
                p.push({
                    container: _dashboard_item_format_rule_1.condition,
                    properties: [
                        __assign({}, _format_condition_expression_1.formatConditionFilter, { formAdapterItem: _form_adapter_editors_1.filterEditor(ruleExpressionEditorParams) }),
                        __assign({}, _format_rules_common_1.styleSettings, { formAdapterItem: _form_adapter_editors_1.styleSettingsEditor() }),
                    ]
                });
                break;
            case model_1.FormatConditionBar:
                p.push({
                    container: _dashboard_item_format_rule_1.condition,
                    properties: [
                        _format_condition_min_max_base_1.minimumType,
                        _format_condition_min_max_base_1.formatConditionMinimum,
                        _format_condition_min_max_base_1.maximumType,
                        _format_condition_min_max_base_1.formatConditionMaximum,
                        _format_condition_bar_1.barCurrentStyleSettingsType,
                        __assign({}, _format_condition_bar_1.barCurrentStyleSettings, { formAdapterItem: _form_adapter_editors_1.styleSettingsEditor() }),
                        {
                            container: _format_rules_common_1.barOptions,
                            properties: [
                                _format_condition_bar_options_1.allowNegativeAxis,
                                _format_condition_bar_options_1.drawAxis,
                                _format_condition_bar_options_1.showBarOnly
                            ]
                        }
                    ]
                });
                visibilityRules[_format_condition_min_max_base_1.formatConditionMinimum.propertyName] = [_format_condition_min_max_base_1.minimumType.propertyName, '<>', 'Automatic'];
                visibilityRules[_format_condition_min_max_base_1.formatConditionMaximum.propertyName] = [_format_condition_min_max_base_1.maximumType.propertyName, '<>', 'Automatic'];
                break;
            case model_1.FormatConditionColorRangeBar:
                p.push({
                    container: _dashboard_item_format_rule_1.condition,
                    properties: [
                        _format_condition_range_base_1.rangeValueType,
                        __assign({}, _format_condition_range_base_1.rangeSet, { formAdapterItem: _form_adapter_editors_1.ruleRangesEditor(model.condition()) }),
                        {
                            container: _format_rules_common_1.barOptions,
                            properties: [
                                _format_condition_bar_options_1.allowNegativeAxis,
                                _format_condition_bar_options_1.drawAxis,
                                _format_condition_bar_options_1.showBarOnly
                            ]
                        }
                    ]
                });
                break;
            case model_1.FormatConditionGradientRangeBar:
                p.push({
                    container: _dashboard_item_format_rule_1.condition,
                    properties: [
                        _format_condition_range_base_1.rangeValueType,
                        _format_condition_range_gradient_1.segmentNumber,
                        __assign({}, _format_condition_range_base_1.rangeSet, { formAdapterItem: _form_adapter_editors_1.ruleRangesEditor(model.condition()) }),
                        {
                            container: _format_rules_common_1.barOptions,
                            properties: [
                                _format_condition_bar_options_1.allowNegativeAxis,
                                _format_condition_bar_options_1.drawAxis,
                                _format_condition_bar_options_1.showBarOnly
                            ]
                        }
                    ]
                });
                break;
            case model_1.FormatConditionRangeGradient:
                p.push({
                    container: _dashboard_item_format_rule_1.condition,
                    properties: [
                        _format_condition_range_base_1.rangeValueType,
                        _format_condition_range_gradient_1.segmentNumber,
                        __assign({}, _format_condition_range_base_1.rangeSet, { formAdapterItem: _form_adapter_editors_1.ruleRangesEditor(model.condition()) }),
                    ]
                });
                break;
            case model_1.FormatConditionRangeSet:
                p.push({
                    container: _dashboard_item_format_rule_1.condition,
                    properties: [
                        _format_condition_range_base_1.rangeValueType,
                        __assign({}, _format_condition_range_base_1.rangeSet, { formAdapterItem: _form_adapter_editors_1.ruleRangesEditor(model.condition()) }),
                    ]
                });
                break;
            case undefined:
                break;
            default:
                throw new Error('Unsupported formatting rule condition');
        }
        var additionProperties = this._options.getConditionFormatRuleProperties(model, dashboardItem, dataSourceBrowser);
        var wrapper = new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: p.concat(additionProperties.properties),
            visibilityFilterRules: __assign({}, visibilityRules, additionProperties.visibilityFilterRules),
            disabledFilterRules: additionProperties.disabledFilterRules,
            dynamicEditorRules: additionProperties.dynamicEditorRules
        });
        tab.tabModel(wrapper);
    };
    FormatRulePropertiesComposer.prototype._fillMiscWrapper = function (tab, model, dashboardItem, dataSourceBrowser) {
        var miscProperties = this._options.getMiscFormatRuleProperties(model, dashboardItem, dataSourceBrowser);
        var wrapper = new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: [
                _dashboard_item_format_rule_1.enabled
            ].concat(miscProperties.properties),
            disabledFilterRules: miscProperties.disabledFilterRules,
            dynamicEditorRules: miscProperties.dynamicEditorRules,
            visibilityFilterRules: miscProperties.visibilityFilterRules
        });
        tab.tabModel(wrapper);
    };
    return FormatRulePropertiesComposer;
}());
exports.FormatRulePropertiesComposer = FormatRulePropertiesComposer;
function createDeltaDataTypeObservable(model, dashboardItem, dataSourceBrowser) {
    var dataType = ko.observable(model.condition() && model.condition().dataType());
    var fillDataTypeForDelta = function () {
        var fillDataTypes = function (measure) {
            dataSourceBrowser.findDataField(dashboardItem.dataSource(), dashboardItem.dataMember(), measure.dataMember()).done(function (field) {
                var summaryType = measure.summaryType();
                if ((summaryType === 'Count') || (summaryType === 'CountDistinct')) {
                    dataType('Integer');
                    model.condition() && model.condition().dataType(dataType());
                }
                else if (['Sum', 'Average', 'StdDev', 'StdDevp', 'Var', 'VarP'].indexOf(summaryType) !== -1) {
                    dataType('Decimal');
                    model.condition() && model.condition().dataType(dataType());
                }
                else {
                    dataType(field.fieldType());
                    model.condition() && model.condition().dataType(dataType());
                }
            });
        };
        var kpiElement = dashboardItem.cards().filter(function (card) { return card._getDataId() === model.cardId(); })[0];
        var deltaValueType = model.deltaValueType();
        if (deltaValueType === 'ActualValue') {
            fillDataTypes(kpiElement.actualValue());
        }
        else if (deltaValueType === 'TargetValue') {
            fillDataTypes(kpiElement.targetValue());
        }
        else {
            dataType('Decimal');
            model.condition() && model.condition().dataType(dataType());
        }
    };
    fillDataTypeForDelta();
    model.cardId.subscribe(function (containerId) {
        fillDataTypeForDelta();
    });
    model.deltaValueType.subscribe(function (deltaValueTypeId) {
        fillDataTypeForDelta();
    });
    return { dataType: dataType, dateTimeGroupInterval: ko.observable() };
}
exports.createDeltaDataTypeObservable = createDeltaDataTypeObservable;
function createDataTypeObservable(formatRule, dashboardItem, dataSourceBrowser) {
    var dataItemCalculateBy = dashboardItem.dataItems().filter(function (d) { return formatRule.dataItemName() === d.uniqueName(); })[0];
    var dateTimeGroupInterval = ko.observable(dataItemCalculateBy instanceof dimension_1.Dimension ? dataItemCalculateBy.dateTimeGroupInterval() : undefined);
    var dataType = ko.observable(formatRule.condition() && formatRule.condition().dataType());
    var fillDataType = function (uniqueName) { return dashboardItem
        .dataItems()
        .filter(function (dataItem) { return uniqueName === dataItem.uniqueName() && !!dataItem.dataMember(); })
        .map(function (dataItem) { return ({
        dataItem: dataItem,
        fieldPromise: dataSourceBrowser.findDataField(dashboardItem.dataSource(), dashboardItem.dataMember(), dataItem.dataMember())
    }); })
        .forEach(function (d) { return d.fieldPromise.done(function (field) {
        var newDataType = field.fieldType();
        if (d.dataItem instanceof dimension_1.Dimension) {
            newDataType = _item_filter_items_provider_1.getRealDimensionType(d.dataItem, field);
            dateTimeGroupInterval(field.fieldType() === 'DateTime' ? d.dataItem.dateTimeGroupInterval() : undefined);
            formatRule.condition() && formatRule.condition().dateTimeGroupInterval(dateTimeGroupInterval());
        }
        if (d.dataItem instanceof measure_1.Measure) {
            var summaryType = d.dataItem.summaryType();
            if ((summaryType === 'Count') || (summaryType === 'CountDistinct')) {
                newDataType = 'Integer';
            }
            else if (['Sum', 'Average', 'StdDev', 'StdDevp', 'let', 'letp'].indexOf(summaryType) !== -1) {
                newDataType = 'Decimal';
            }
        }
        dataType(newDataType);
        formatRule.condition() && formatRule.condition().dataType(dataType());
    }); }); };
    if (!dataType() && formatRule.dataItemName())
        fillDataType(formatRule.dataItemName());
    formatRule.dataItemName.subscribe(fillDataType);
    return { dataType: dataType, dateTimeGroupInterval: dateTimeGroupInterval };
}
exports.createDataTypeObservable = createDataTypeObservable;
function addConditionEditor(wrapper, dataTypeInfo, formatRuleModel, dashboardItem, requestRecalculation, specificTypeChanged, conditionTypeFilter) {
    var originalConditionType = formatRuleModel._classId;
    var conditionType = ko.observable(formatRuleModel._classId).extend({ notify: 'always' });
    var specificType = ko.observable(formatRuleModel.condition() && formatRuleModel.condition().getSpecificType());
    wrapper.addProperty(ko.observable(), {
        propertyName: 'typeChooser',
        displayName: 'DashboardWebStringId.ConditionType',
        formAdapterItem: _form_adapter_editors_1.conditionTypeEditor({ dataType: dataTypeInfo.dataType, conditionType: conditionType, specificType: specificType, conditionTypeFilter: conditionTypeFilter })
    });
    specificType.subscribe(function (newSpecificType) {
        var condition = formatRuleModel.condition(), newRule = !condition, changedConditionType = originalConditionType !== conditionType(), realConditionType = conditionType().split('_')[0];
        if (newRule || changedConditionType) {
            formatRuleModel._changeConditionType(realConditionType);
            condition = formatRuleModel.condition();
            condition.dataType(dataTypeInfo.dataType());
            condition.dateTimeGroupInterval(dataTypeInfo.dateTimeGroupInterval());
        }
        condition.setSpecificType(newSpecificType);
        if (newRule) {
            formatRuleModel.name(_helper_classes_1.NameGenerator.generateName(_default_1.getLocalizationById('DashboardWebStringId.FormatRule') + ' ', dashboardItem.formatRules(), 'name', 1));
        }
        if (newRule || changedConditionType) {
            requestRecalculation.fire();
        }
        specificTypeChanged();
    });
}
exports.addConditionEditor = addConditionEditor;
function getCommonCellsFormatRuleProperties(formatRule, dashboardItem, getDataItems, getApplyToDataItems) {
    var dataItems = ko.pureComputed(function () { return getDataItems().map(function (m) { return ({ value: ko.unwrap(m.uniqueName), displayValueId: ko.unwrap(m.displayName) }); }); });
    var applyToDataItems = ko.pureComputed(function () { return getApplyToDataItems().map(function (m) { return ({ value: ko.unwrap(m.uniqueName), displayValueId: ko.unwrap(m.displayName) }); }); });
    if (!formatRule.dataItemName() && dataItems().length) {
        formatRule.dataItemName(ko.unwrap(dataItems()[0].value));
    }
    formatRule.dataItemName.subscribe(function (uniqueName) {
        if (!applyToDataItems().filter(function (di) { return ko.unwrap(di.value) === uniqueName; })[0]) {
            formatRule.dataItemApplyToName(ko.unwrap(applyToDataItems()[0].value));
        }
    });
    var commonProperties = [];
    commonProperties.push(__assign({}, _cells_item_format_rule_1.formatRuleDataItem, { formAdapterItem: _form_adapter_editors_1.dynamicSelectBoxEditor(dataItems) }));
    commonProperties.push(__assign({}, _cells_item_format_rule_1.dataItemApplyTo, { formAdapterItem: _form_adapter_editors_1.dynamicSelectBoxEditor(applyToDataItems) }));
    return {
        properties: commonProperties
    };
}
exports.getCommonCellsFormatRuleProperties = getCommonCellsFormatRuleProperties;


/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var card_item_delta_format_rule_1 = __webpack_require__(126);
var card_item_format_rule_1 = __webpack_require__(129);
var grid_item_format_rule_1 = __webpack_require__(280);
var pivot_item_format_rule_1 = __webpack_require__(281);
var _card_item_format_rule_properties_composer_1 = __webpack_require__(637);
var _grid_item_format_rule_properties_composer_1 = __webpack_require__(749);
var _pivot_item_format_rule_properties_composer_1 = __webpack_require__(750);
var FormatRuleSurface = (function () {
    function FormatRuleSurface(model, dashboardItem, dataSourceBrowser, propertiesController) {
        this.model = model;
        this.dashboardItem = dashboardItem;
        this.dataSourceBrowser = dataSourceBrowser;
        this.propertiesController = propertiesController;
        this._disposables = [];
    }
    FormatRuleSurface.prototype.updatePropertiesTabs = function (requestRecalculation) {
        var _this = this;
        var composer = null;
        if (this.model() instanceof card_item_delta_format_rule_1.CardItemDeltaFormatRule) {
            composer = _card_item_format_rule_properties_composer_1.createCardItemDeltaFormatRulePropertiesComposer(this.model);
        }
        else if (this.model() instanceof card_item_format_rule_1.CardItemFormatRule) {
            composer = _card_item_format_rule_properties_composer_1.createCardItemFormatRulePropertiesComposer(this.model);
        }
        else if (this.model() instanceof grid_item_format_rule_1.GridItemFormatRule) {
            composer = _grid_item_format_rule_properties_composer_1.createGridItemFormatRulePropertiesComposer();
        }
        else if (this.model() instanceof pivot_item_format_rule_1.PivotItemFormatRule) {
            composer = _pivot_item_format_rule_properties_composer_1.createPivotItemFormatRulePropertiesComposer();
        }
        var propertiesTabs = composer.composeTabs(this.model(), {
            dashboardItem: this.dashboardItem,
            dataSourceBrowser: this.dataSourceBrowser,
            requestRecalculation: requestRecalculation,
            specificTypeChanged: function () {
                _this.propertiesController.secondarySelectedIndex(1);
            }
        });
        this.propertiesController.secondaryModel({
            displayText: this.model()._classCaption,
            data: {
                model: this.model(),
                propertiesTabs: ko.observableArray(propertiesTabs)
            },
            containingCollection: this.dashboardItem.formatRules
        });
        if (this.model().condition()) {
            this.propertiesController.secondarySelectedIndex(1);
        }
    };
    FormatRuleSurface.prototype.startEditing = function (args) {
        var _this = this;
        args.createImmediately = false;
        this.updatePropertiesTabs(args.requestRecalculation);
        args.requestRecalculation.add(function () { return _this.updatePropertiesTabs(args.requestRecalculation); });
        this.model.subscribe(function () { return _this.updatePropertiesTabs(args.requestRecalculation); });
    };
    FormatRuleSurface.prototype.dispose = function () {
        this._disposables.forEach(function (d) {
            d.dispose();
        });
    };
    return FormatRuleSurface;
}());
exports.FormatRuleSurface = FormatRuleSurface;


/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_querybuilder_1 = __webpack_require__(1);
var $ = __webpack_require__(2);
var _default_1 = __webpack_require__(6);
var DashboardRequestWrapper = (function (_super) {
    __extends(DashboardRequestWrapper, _super);
    function DashboardRequestWrapper(dashboardControl) {
        var _this = _super.call(this) || this;
        _this.dashboardControl = dashboardControl;
        return _this;
    }
    DashboardRequestWrapper.prototype._sendRequest = function (settings) {
        return this.sendRequest(settings.action, settings.arg);
    };
    DashboardRequestWrapper.prototype.sendRequest = function (action, arg) {
        var _this = this;
        var def = $.Deferred();
        this.dashboardControl.remoteService.postToServer(this.dashboardControl._endpointCollection.dataSourceWizardUrls.DataSourceWizardAction, {
            actionKey: action,
            arg: arg
        }).done(function (data) {
            if (data.success) {
                def.resolve(data.result);
            }
            else {
                var errorText = data.error;
                _this.dashboardControl.notificationController.showError(_default_1.getLocalizationById('DashboardWebStringId.Notification.ErrorHasOccuredOn'), errorText);
                def.reject(errorText);
            }
        }).fail(function (request) {
            _this.dashboardControl.notificationController.showError(_default_1.getLocalizationById('DashboardWebStringId.Notification.ErrorHasOccuredOn'), request);
            def.reject();
        });
        return def.promise();
    };
    return DashboardRequestWrapper;
}(dx_querybuilder_1.default.QueryBuilder.Utils.RequestWrapper));
exports.DashboardRequestWrapper = DashboardRequestWrapper;
var DashboardDataSourceWizardOptions = (function (_super) {
    __extends(DashboardDataSourceWizardOptions, _super);
    function DashboardDataSourceWizardOptions() {
        var _this = _super.call(this) || this;
        _this.connectionStrings = __assign({}, _this.connectionStrings, { olap: [] });
        _this.wizardSettings = __assign({}, _this.wizardSettings, { enableOlapDataSource: false });
        return _this;
    }
    return DashboardDataSourceWizardOptions;
}(dx_querybuilder_1.default.Analytics.Wizard._DataSourceWizardOptions));
exports.DashboardDataSourceWizardOptions = DashboardDataSourceWizardOptions;
var DashboardMultiQueryDataSourceWizardOptions = (function (_super) {
    __extends(DashboardMultiQueryDataSourceWizardOptions, _super);
    function DashboardMultiQueryDataSourceWizardOptions() {
        var _this = _super.call(this) || this;
        _this.connectionStrings = __assign({}, _this.connectionStrings, { olap: [] });
        _this.wizardSettings = __assign({}, _this.wizardSettings, { enableOlapDataSource: false });
        return _this;
    }
    return DashboardMultiQueryDataSourceWizardOptions;
}(dx_querybuilder_1.default.Analytics.Wizard._MultiQueryDataSourceWizardOptions));
exports.DashboardMultiQueryDataSourceWizardOptions = DashboardMultiQueryDataSourceWizardOptions;


/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dx_querybuilder_1 = __webpack_require__(1);
exports.JsonDataSourceWizardSettings = {
    allowObjectPropertiesAsRoot: true
};
function _registerChooseJsonSchemaPage(factory, requestWrapper) {
    dx_querybuilder_1.default.Analytics.Wizard._registerChooseJsonSchemaPage(factory, requestWrapper);
    var chooseJsonSchemaPageMeta = factory.getMetadata(dx_querybuilder_1.default.Analytics.Wizard.JsonDataSourceWizardPageId.ChooseJsonSchemaPage);
    chooseJsonSchemaPageMeta.create = function () { return new dx_querybuilder_1.default.Analytics.Wizard.ChooseJsonSchemaPage(requestWrapper, exports.JsonDataSourceWizardSettings.allowObjectPropertiesAsRoot); };
}
exports._registerChooseJsonSchemaPage = _registerChooseJsonSchemaPage;


/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DataSourceWizardPageId = {
    ChooseDataSourceTypePage: 'dashboardChooseDataSourceTypePageId'
};
exports.OlapDataSourceWizardPageId = {
    ChooseConnectionPage: 'dashboardChooseOlapConnectionStringPageId'
};


/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(380);
__webpack_require__(681);
__webpack_require__(682);
__export(__webpack_require__(380));


/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var _default_1 = __webpack_require__(6);
function setLocalization(localization) {
    dx_analytics_core_1.default.Analytics.Localization.loadMessages(localization);
}
exports.setLocalization = setLocalization;
setLocalization(_default_1.getDefaultLocalization());


/***/ }),
/* 235 */
/***/ (function(module, exports) {

module.exports = DevExpress.localization.date;

/***/ }),
/* 236 */
/***/ (function(module, exports) {

module.exports = DevExpress.data.utils;

/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var globalCache = {};
function resetGlobalSizeCache() {
    globalCache = {};
}
exports.resetGlobalSizeCache = resetGlobalSizeCache;
function cacheable(cacheKey) {
    var _this = this;
    return function (target, propertyKey, descriptor) {
        if (typeof target !== 'function') {
            throw Error('The cacheable decorator can be applied only for static methods');
        }
        return {
            value: function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                if (!globalCache[cacheKey]) {
                    globalCache[cacheKey] = {};
                }
                var functionCache = globalCache[cacheKey];
                var argsKey = JSON.stringify(args);
                if (functionCache.hasOwnProperty(argsKey)) {
                    return functionCache[argsKey];
                }
                else {
                    var result = descriptor.value.apply(_this, args);
                    functionCache[argsKey] = result;
                    return result;
                }
            }
        };
    };
}
exports.cacheable = cacheable;


/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _item_data_axis_names_1 = __webpack_require__(34);
var _render_helper_1 = __webpack_require__(28);
var _common_1 = __webpack_require__(35);
var _data_controller_base_1 = __webpack_require__(48);
var kpiDataController = (function (_super) {
    __extends(kpiDataController, _super);
    function kpiDataController(options) {
        var _this = _super.call(this, options) || this;
        _this._initialize();
        return _this;
    }
    kpiDataController.prototype.getDataSource = function () {
        var that = this, axisPoints = that._axisPoints, sourceItem, dataSource = [], i;
        if (that.multiData) {
            that._iterateKpiItems(function (kpiElement) {
                if (axisPoints) {
                    for (i = 0; i < axisPoints.length; i++) {
                        sourceItem = that._createSourceItem(axisPoints[i], kpiElement);
                        dataSource.push(sourceItem);
                    }
                }
                else {
                    sourceItem = that._createSourceItem(null, kpiElement);
                    dataSource.push(sourceItem);
                }
            });
        }
        return dataSource;
    };
    kpiDataController.prototype._createSourceItem = function (axisPoint, kpiElement) {
        var _this = this;
        var that = this, deltaValue = that._getDeltaValue(axisPoint, kpiElement), measure = that.multiData.getMeasureById(kpiElement.ID), measureValue = that._getMeasureValue(axisPoint, kpiElement), sparklineValues = that._getSparklineValues(axisPoint, kpiElement), getDeltaValue = function (getter) {
            return deltaValue ? getter(deltaValue) : undefined;
        }, getCaptions = function () {
            if (axisPoint) {
                var axisName = axisPoint.getAxisName();
                if (that.drillDownState[axisName]) {
                    var text = axisPoint.getDisplayText();
                    return text == undefined ? [''] : [text];
                }
                else {
                    return axisPoint.getDisplayPath();
                }
            }
            else
                return [kpiElement.Title];
        }, properties = {
            getActualValue: function () {
                var value = getDeltaValue(function (d) { return d.getActualValue().getValue(); });
                return value || measureValue.getValue();
            },
            getActualValueText: function () {
                var text = getDeltaValue(function (d) { return d.getActualValue().getDisplayText(); });
                return text || measureValue.getDisplayText();
            },
            getTargetValue: function () {
                return getDeltaValue(function (d) { return d.getTargetValue().getValue(); });
            },
            getTargetValueText: function () {
                return getDeltaValue(function (d) { return d.getTargetValue().getDisplayText(); });
            },
            getAbsoluteVariationValue: function () {
                return getDeltaValue(function (d) { return d.getAbsoluteVariation().getValue(); });
            },
            getAbsoluteVariationText: function () {
                return getDeltaValue(function (d) { return d.getAbsoluteVariation().getDisplayText(); });
            },
            getPercentVariationValue: function () {
                return getDeltaValue(function (d) { return d.getPercentVariation().getValue(); });
            },
            getPercentVariationText: function () {
                return getDeltaValue(function (d) { return d.getPercentVariation().getDisplayText(); });
            },
            getPercentOfTargetValue: function () {
                return getDeltaValue(function (d) { return d.getPercentOfTarget().getValue(); });
            },
            getPercentOfTargetText: function () {
                return getDeltaValue(function (d) { return d.getPercentOfTarget().getDisplayText(); });
            },
            getDimensionValue: function (dataId) {
                return axisPoint.getParentByDimensionId(dataId).getValue();
            },
            getDimensionValueText: function (dataId) {
                return axisPoint.getParentByDimensionId(dataId).getDisplayText();
            },
            getIndicatorType: function () {
                return that._convertIndicatorType(getDeltaValue(function (d) { return d.getIndicatorType().getValue(); }));
            },
            getIsGood: function () {
                return getDeltaValue(function (d) { return d.getIsGood().getValue(); });
            },
            getMainValueText: function () {
                return getDeltaValue(function (d) { return d.getDisplayValue().getDisplayText(); });
            },
            getSubValue1Text: function () {
                return getDeltaValue(function (d) { return d.getDisplaySubValue1().getDisplayText(); });
            },
            getSubValue2Text: function () {
                return getDeltaValue(function (d) { return d.getDisplaySubValue2().getDisplayText(); });
            },
            getMeasureValue: function () {
                return measureValue.getValue();
            },
            getMeasureDisplayText: function () {
                return measureValue.getDisplayText();
            },
            getSparklineOptions: function () {
                var sparklineOptions = undefined;
                if (sparklineValues) {
                    sparklineOptions = that._generateSparklineOptions(sparklineValues, kpiElement.SparklineOptions, measure.format);
                }
                return sparklineOptions;
            },
            getSelectionValues: function () {
                return axisPoint ? axisPoint.getUniquePath() : null;
            },
            getCaptions: function () {
                return getCaptions();
            },
            getTitle: function () {
                var captions = getCaptions();
                if (captions.length > 0)
                    return captions.pop();
            },
            getSubtitle: function () {
                var captions = getCaptions();
                if (captions.length > 1)
                    captions.pop();
                return captions.join(_data_controller_base_1.DEFAULT_SUBTITLE_SEPARATOR);
            },
            getGaugeRange: function () {
                return that._getGaugeRange(kpiElement);
            },
            getCardName: function () {
                return kpiElement.Title;
            },
            getStyleSettingsInfo: function (ruleFilter) {
                return _this._getStyleSettingsInfo(axisPoint, kpiElement.ID, ruleFilter);
            },
        };
        var sourceItem = {};
        sourceItem[_common_1.DashboardDataIdField] = kpiElement.ID;
        sourceItem.onIncidentOccurred = _render_helper_1.RenderHelper.widgetIncidentOccurred;
        that.setSourceItemProperties(sourceItem, kpiElement, properties);
        return sourceItem;
    };
    kpiDataController.prototype._getDeltaValue = function (axisPoint, kpiElement) {
        var multiData = this.multiData, measureId = kpiElement.ID;
        if (!multiData.getDeltaById(measureId))
            return undefined;
        return axisPoint ? multiData.getDeltaValueByAxisPoints(measureId, [axisPoint]) : multiData.getDeltaValue(measureId);
    };
    kpiDataController.prototype._getMeasureValue = function (axisPoint, kpiElement) {
        var multiData = this.multiData, measureId = kpiElement.ID;
        return axisPoint ? multiData.getMeasureValueByAxisPoints(measureId, [axisPoint]) : multiData.getMeasureValue(measureId);
    };
    kpiDataController.prototype._getSparklineValues = function (axisPoint, kpiElement) {
        if (!this._sparklineAxisPoints)
            return;
        var that = this, values = [], measureValue, measureId = kpiElement.ID, multiData = that.multiData;
        that._sparklineAxisPoints.forEach(function (sparklinePoint) {
            measureValue = axisPoint ?
                multiData.getMeasureValueByAxisPoints(measureId, [axisPoint, sparklinePoint]) :
                multiData.getMeasureValueByAxisPoints(measureId, [sparklinePoint]);
            values.push(measureValue.getValue() || 0);
        });
        return values;
    };
    kpiDataController.prototype._getStyleSettingsInfo = function (axisPoint, kpiElementId, ruleFilter) {
        var rules = [], cellInfo = {
            axisPoint: axisPoint
        };
        rules = this.cfModel.RuleModels.filter(function (rule) { return ruleFilter(rule, kpiElementId); });
        return this._getStyleSettingsInfoCore(cellInfo, rules, this.viewModel.ColumnAxisName, _item_data_axis_names_1.itemDataAxisNames.defaultAxis);
    };
    kpiDataController.prototype._correctAxisPoint = function (axisPoint, ruleModel) {
        var correctAxisPoint = null;
        if (ruleModel.CalcByDataId)
            correctAxisPoint = this._findAxisPoint(ruleModel.CalcByDataId, axisPoint);
        return correctAxisPoint || axisPoint;
    };
    kpiDataController.prototype._getStyleIndexes = function (rule, cellInfo, points) {
        var axisPoint, currentStyleIndexes, styleIndexes = [];
        axisPoint = this._correctAxisPoint(cellInfo.axisPoint, rule);
        if (axisPoint)
            points.push(axisPoint);
        currentStyleIndexes = this._getMeasureValueByAxisPoints(points, rule.FormatConditionMeasureId);
        if (currentStyleIndexes) {
            styleIndexes = styleIndexes.concat(currentStyleIndexes);
        }
        return styleIndexes;
    };
    kpiDataController.prototype._initialize = function () {
        if (!this.multiData)
            return;
        var that = this, viewModel = that.viewModel, multiData = that.multiData;
        that._axisPoints = !!this.viewModel.SeriesAxisName ? multiData.getAxis(viewModel.SeriesAxisName).getPoints() : undefined;
        that._sparklineAxisPoints = !!this.viewModel.SparklineAxisName ? multiData.getAxis(viewModel.SparklineAxisName).getPoints() : undefined;
    };
    kpiDataController.prototype._iterateKpiItems = function (delegate) {
    };
    kpiDataController.prototype._getGaugeRange = function (element) {
    };
    return kpiDataController;
}(_data_controller_base_1.dataControllerBase));
exports.kpiDataController = kpiDataController;


/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Color = __webpack_require__(96);
var _item_data_axis_names_1 = __webpack_require__(34);
var _localization_ids_1 = __webpack_require__(21);
var _localizer_1 = __webpack_require__(16);
var _utils_1 = __webpack_require__(3);
var _data_controller_base_1 = __webpack_require__(48);
var chartDataControllerBase = (function (_super) {
    __extends(chartDataControllerBase, _super);
    function chartDataControllerBase(options) {
        var _this = _super.call(this, options) || this;
        _this.elementCustomColor = options.elementCustomColor;
        return _this;
    }
    chartDataControllerBase._getLegendSeriesName = function (seriesName) {
    };
    chartDataControllerBase._getLegendSeriesDisplayName = function (seriesName) {
    };
    chartDataControllerBase.prototype.getArgument = function (argumentAxisPoint) {
        if (this.isQualitativeArgument()) {
            return this.getTitle(argumentAxisPoint, '\n');
        }
        else if (this.isDiscreteArgument()) {
            if (argumentAxisPoint.getParent() != null) {
                return argumentAxisPoint.getDisplayText() || '';
            }
            else {
                return _localizer_1.localizer.getString(_localization_ids_1.localizationId.ChartTotalValue);
            }
        }
        else {
            return argumentAxisPoint.getValue();
        }
    };
    chartDataControllerBase.prototype.getArgumentAxisPoints = function (argumentId) {
        if (this.viewModel) {
            var id = argumentId ? argumentId : this.viewModel.Argument.SummaryArgumentMember, argumentAxis = this._getArgumentAxis();
            return argumentAxis ? argumentAxis.getPointsByDimension(id) : [];
        }
        else {
            return [];
        }
    };
    chartDataControllerBase.prototype.getSeriesAxisPoints = function (seriesId) {
        var seriesAxis = this._getSeriesAxis(), id = seriesId ? seriesId : this.viewModel.SummarySeriesMember;
        return seriesAxis ? seriesAxis.getPointsByDimension(id) : [];
    };
    chartDataControllerBase.prototype.getSingleArgumentDimensionFormat = function () {
        var argumentDimension = this._getSingleArgumentDimension();
        return argumentDimension ? argumentDimension.getFormat() : undefined;
    };
    chartDataControllerBase.prototype.getColor = function (argumentAxisPoint, seriesAxisPoint, measuesIds, colorMeasureId) {
        var that = this, color = that._getColorFromData(argumentAxisPoint, seriesAxisPoint, colorMeasureId);
        return that._getElementCustomColor(argumentAxisPoint, seriesAxisPoint, measuesIds, color);
    };
    chartDataControllerBase.prototype.isDiscreteArgument = function () {
        return this.viewModel && (this.viewModel.Argument.Type === 'String');
    };
    chartDataControllerBase.prototype.isQualitativeArgument = function () {
        return this._getArgumentAxisDimensions().length > 1 && !this.drillDownState[_item_data_axis_names_1.itemDataAxisNames.chartArgumentAxis];
    };
    chartDataControllerBase.prototype.isSingleArgument = function () {
        return this._getArgumentAxisDimensions().length == 1 || this.drillDownState[_item_data_axis_names_1.itemDataAxisNames.chartArgumentAxis] != null;
    };
    chartDataControllerBase.prototype.hasSeriesPoints = function () {
        return this.viewModel && !!this.viewModel.SummarySeriesMember;
    };
    chartDataControllerBase.prototype._getElementCustomColor = function (argumentAxisPoint, seriesAxisPoint, measuesIds, color) {
        var that = this, dxColor = new Color(color), newColor;
        if (that.elementCustomColor && color) {
            var customElementColorEventArgs = {
                targetElement: [argumentAxisPoint, seriesAxisPoint],
                measureIds: measuesIds,
                color: dxColor.toHex()
            };
            that.elementCustomColor(customElementColorEventArgs);
            newColor = new Color(customElementColorEventArgs.color);
            if (!newColor.colorIsInvalid && customElementColorEventArgs.color !== dxColor.toHex()) {
                return customElementColorEventArgs.color;
            }
        }
        return color;
    };
    chartDataControllerBase.prototype._getColorFromData = function (argumentAxisPoint, seriesAxisPoint, colorMeasureId) {
        var that = this, colorArgumentAxisPoint = argumentAxisPoint ? argumentAxisPoint.getParentByDimensionId(that.viewModel.ArgumentColorDimension) : undefined, colorSeriesAxisPoint = seriesAxisPoint.getParentByDimensionId(that.viewModel.SeriesColorDimension);
        if (_utils_1.type.isDefined(colorMeasureId)) {
            try {
                var colorValue = that._getCrossSlice(colorArgumentAxisPoint, colorSeriesAxisPoint).getColorMeasureValue(colorMeasureId);
                return colorValue !== null ? _utils_1.toColor(colorValue) : undefined;
            }
            catch (e) {
                return undefined;
            }
        }
        return undefined;
    };
    chartDataControllerBase.prototype._getCrossSlice = function (argumentAxisPoint, seriesAxisPoint) {
        var slice = this.multiData.getSlice(seriesAxisPoint);
        return argumentAxisPoint ? slice.getSlice(argumentAxisPoint) : slice;
    };
    chartDataControllerBase.prototype._getArgumentAxis = function () {
        return this.multiData ? this.multiData.getAxis(_item_data_axis_names_1.itemDataAxisNames.chartArgumentAxis) : undefined;
    };
    chartDataControllerBase.prototype._getSeriesAxis = function () {
        return this.multiData ? this.multiData.getAxis(_item_data_axis_names_1.itemDataAxisNames.chartSeriesAxis) : undefined;
    };
    chartDataControllerBase.prototype._getArgumentAxisDimensions = function () {
        var argumentAxis = this._getArgumentAxis(), dimensions = argumentAxis ? argumentAxis.getDimensions() : [];
        return dimensions ? dimensions : [];
    };
    chartDataControllerBase.prototype._getSingleArgumentDimension = function () {
        var argumentDimensions = this._getArgumentAxisDimensions();
        if (argumentDimensions.length > 0) {
            return argumentDimensions[argumentDimensions.length - 1];
        }
        else {
            return undefined;
        }
    };
    return chartDataControllerBase;
}(_data_controller_base_1.dataControllerBase));
exports.chartDataControllerBase = chartDataControllerBase;


/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _utils_1 = __webpack_require__(3);
var HashsetWrapper = (function () {
    function HashsetWrapper(array) {
        var _this = this;
        this.FNV_prime_32 = 16777619;
        this.FNV_offset_basis_32 = 2166136261;
        this.hashSet = {};
        array.forEach(function (item, index) {
            var hash = _this.getHash(item);
            var array = _this.hashSet[hash];
            if (array == null) {
                array = [];
                _this.hashSet[hash] = array;
            }
            array.push({ index: index, item: item });
        });
    }
    HashsetWrapper.prototype.contains = function (item) {
        return this.getItem(item) != null;
    };
    HashsetWrapper.prototype.getIntersection = function (array) {
        var _this = this;
        var result = [];
        array.forEach(function (item) {
            if (_this.contains(item))
                result.push(item);
        });
        return result;
    };
    HashsetWrapper.prototype.indexOf = function (item) {
        var found = this.getItem(item);
        return found != null ? found.index : -1;
    };
    HashsetWrapper.prototype.getItem = function (item) {
        var value = this.hashSet[this.getHash(item)];
        return value != null ? value.filter(function (val) { return _utils_1.arrayEquals(val.item, item); })[0] : undefined;
    };
    HashsetWrapper.prototype.getHash = function (obj) {
        var _this = this;
        if (Array.isArray(obj)) {
            return this.toHash(obj, function (item) { return _this.getHash(item); });
        }
        else {
            return this.toHash(String(obj).split(''), function (ch) { return ch.charCodeAt(0); });
        }
    };
    HashsetWrapper.prototype.toHash = function (arr, convertValue) {
        var _this = this;
        return arr.reduce(function (prev, curr) {
            return (prev ^ convertValue(curr)) * _this.FNV_prime_32;
        }, this.FNV_offset_basis_32);
    };
    return HashsetWrapper;
}());
exports.HashsetWrapper = HashsetWrapper;


/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var _utils_1 = __webpack_require__(3);
var _item_data_axis_point_1 = __webpack_require__(166);
exports.pivotAreaNames = {
    columns: 'Columns',
    rows: 'Rows'
};
exports.itemDataAxisBuilder = {
    build: function (name, storage, dimensions, sortOrderSlices, metaData, iterators) {
        var that = this;
        var keyIds = [];
        $.each(dimensions, function (_, dimension) {
            keyIds.push(dimension.id);
        });
        var allSlicesKeyIdsList = that._getKeyIdsList(keyIds), cache = {}, levelInfoList = [];
        $.each(allSlicesKeyIdsList, function (index, keyIds) {
            var baseKeyIds = keyIds.slice(-1), baseKeyId = baseKeyIds.length > 0 ? baseKeyIds[0] : null, metaDataSliceKey = storage.getSliceKey(baseKeyIds), dataSlice = storage.getOrCreateSlice(keyIds), level = index - 1;
            levelInfoList.push({
                axisName: name,
                metaData: metaData,
                dataSlice: dataSlice,
                level: level,
                getMetaDataValue: function (dataRowKey, valueId) {
                    if (metaDataSliceKey < 0)
                        return null;
                    var metaDataRowKey = storage.findDataRowKey(metaDataSliceKey, dataRowKey);
                    return storage.getValue(metaDataRowKey, valueId);
                },
                getBaseValue: function (dataRowKey) {
                    return (level >= 0) ? storage.getKeyValue(dataRowKey, baseKeyId) : null;
                }
            });
        });
        $.each(allSlicesKeyIdsList, function (_, keyIds) {
            if (keyIds.length > 0 && !that._isSortOrderSlice(keyIds, sortOrderSlices))
                return;
            var levelInfo = levelInfoList[keyIds.length];
            var slice = levelInfo.dataSlice;
            var iterator = (slice && iterators) ? iterators[slice.getKey()] : slice;
            if (iterator) {
                iterator.forEach(function (dataRowKey) {
                    var item = null, childItem = null;
                    do {
                        var level = dataRowKey.rowKey.length;
                        item = cache[dataRowKey.rowKey];
                        var exists = !!item;
                        if (!exists) {
                            var levelInfo = levelInfoList[level];
                            item = new _item_data_axis_point_1.itemDataAxisPoint(levelInfo, dataRowKey);
                            cache[dataRowKey.rowKey] = item;
                        }
                        if (childItem != null) {
                            item.getChildren().push(childItem);
                            childItem._setParent(item);
                        }
                        if (exists || level == 0)
                            break;
                        var prevSliceKey = levelInfoList[level - 1].dataSlice.getKey();
                        dataRowKey = storage.findDataRowKey(prevSliceKey, dataRowKey);
                        childItem = item;
                    } while (true);
                });
            }
        });
        return cache[[]];
    },
    _getKeyIdsList: function (keyIds) {
        var list = [[]];
        $.each(keyIds, function (i, _) {
            var slice = keyIds.slice(0, i + 1);
            list.push(slice);
        });
        return list;
    },
    _isSortOrderSlice: function (slice, sortOrderSlices) {
        var result = !sortOrderSlices || sortOrderSlices.length == 0;
        if (!result) {
            $.each(sortOrderSlices, function (_, orderSlice) {
                result = result || _utils_1.areNotOrderedListsEqual(slice, orderSlice);
                return !result;
            });
        }
        return result;
    }
};


/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var _item_data_axis_names_1 = __webpack_require__(34);
var _formatter_1 = __webpack_require__(25);
exports.deltaValueNames = {
    actualValue: 'actualValue',
    targetValue: 'targetValue',
    absoluteVariation: 'absoluteVariation',
    percentVariation: 'percentVariation',
    percentOfTarget: 'percentOfTarget',
    mainValue: 'mainValue',
    subValue1: 'subValue1',
    subValue2: 'subValue2',
    isGood: 'isGood',
    indicatorType: 'indicatorType'
};
exports.deltaValueTypes = {
    actualValue: 'ActualValue',
    absoluteVariation: 'AbsoluteVariation',
    percentVariation: 'PercentVariation',
    percentOfTarget: 'PercentOfTarget',
    targetValue: 'TargetValue'
};
var itemMetaData = (function () {
    function itemMetaData(metaDataDto) {
        this._metaDataDto = metaDataDto;
        this._data = {};
    }
    itemMetaData.prototype.initialize = function () {
        var data = this._data, metaDataDto = this._metaDataDto;
        data.measuresInfo = this._createMeasureInfo(metaDataDto.MeasureDescriptors);
        data.colorMeasuresInfo = this._createMeasureInfo(metaDataDto.ColorMeasureDescriptors);
        data.conditionalFormattingMeasuresInfo = this._createMeasureInfo(metaDataDto.FormatConditionMeasureDescriptors);
        data.deltaInfo = this._createDeltaInfo();
        data.axesInfo = this._createAxesInfo();
        data.dataSourceColumns = this._metaDataDto.DataSourceColumns;
    };
    itemMetaData.prototype._createMeasureInfo = function (descriptors) {
        var measures = [], formatByMeasureId = {};
        var expressionByMeasureId = {};
        var calculationByMeasureId = {};
        var windowDefinitionByMeasureId = {};
        if (descriptors) {
            $.each(descriptors, function (_, _measure) {
                var measure = {
                    id: _measure.ID,
                    name: _measure.Name,
                    dataMember: _measure.DataMember,
                    finalDataType: _measure.FinalDataType,
                    summaryType: _measure.SummaryType,
                    format: function (value) {
                        var format = _measure.Format, text = undefined;
                        if (format)
                            text = _formatter_1.format(value, format);
                        return text;
                    }
                };
                measures.push(measure);
                formatByMeasureId[measure.id] = _measure.Format;
                expressionByMeasureId[measure.id] = _measure.Expression;
                calculationByMeasureId[measure.id] = _measure.Calculation;
                windowDefinitionByMeasureId[measure.id] = _measure.WindowDefinition;
            });
        }
        return {
            measures: measures,
            formatByMeasureId: formatByMeasureId,
            expressionByMeasureId: expressionByMeasureId,
            calculationByMeasureId: calculationByMeasureId,
            windowDefinitionByMeasureId: windowDefinitionByMeasureId
        };
    };
    itemMetaData.prototype._createDeltaInfo = function () {
        var metaData = this._metaDataDto, names = exports.deltaValueNames, deltas = [], valueIdsByDeltaId = {}, formatsByDeltaId = {};
        if (metaData.DeltaDescriptors) {
            $.each(metaData.DeltaDescriptors, function (_, _delta) {
                var delta = {
                    id: _delta.ID,
                    name: _delta.Name,
                    actualMeasureId: _delta.ActualMeasureID,
                    targetMeasureId: _delta.TargetMeasureID
                }, ids = {}, formats = {};
                deltas.push(delta);
                ids[names.actualValue] = _delta.ActualValueID;
                ids[names.targetValue] = _delta.TargetValueID;
                ids[names.absoluteVariation] = _delta.AbsoluteVariationID;
                ids[names.percentVariation] = _delta.PercentVariationID;
                ids[names.percentOfTarget] = _delta.PercentOfTargetID;
                ids[names.isGood] = _delta.IsGoodID;
                ids[names.indicatorType] = _delta.IndicatorTypeID;
                formats[names.actualValue] = _delta.ActualValueFormat;
                formats[names.targetValue] = _delta.TargetValueFormat;
                formats[names.absoluteVariation] = _delta.AbsoluteVariationFormat;
                formats[names.percentVariation] = _delta.PercentVariationFormat;
                formats[names.percentOfTarget] = _delta.PercentOfTargetFormat;
                switch (_delta.DeltaValueType) {
                    case exports.deltaValueTypes.actualValue:
                        ids[names.mainValue] = ids[names.actualValue];
                        ids[names.subValue1] = ids[names.absoluteVariation];
                        ids[names.subValue2] = ids[names.percentVariation];
                        formats[names.mainValue] = formats[names.actualValue];
                        formats[names.subValue1] = formats[names.absoluteVariation];
                        formats[names.subValue2] = formats[names.percentVariation];
                        break;
                    case exports.deltaValueTypes.absoluteVariation:
                        ids[names.mainValue] = ids[names.absoluteVariation];
                        ids[names.subValue1] = ids[names.actualValue];
                        ids[names.subValue2] = ids[names.percentVariation];
                        formats[names.mainValue] = formats[names.absoluteVariation];
                        formats[names.subValue1] = formats[names.actualValue];
                        formats[names.subValue2] = formats[names.percentVariation];
                        break;
                    case exports.deltaValueTypes.percentVariation:
                        ids[names.mainValue] = ids[names.percentVariation];
                        ids[names.subValue1] = ids[names.actualValue];
                        ids[names.subValue2] = ids[names.absoluteVariation];
                        formats[names.mainValue] = formats[names.percentVariation];
                        formats[names.subValue1] = formats[names.actualValue];
                        formats[names.subValue2] = formats[names.absoluteVariation];
                        break;
                    case exports.deltaValueTypes.percentOfTarget:
                        ids[names.mainValue] = ids[names.percentOfTarget];
                        ids[names.subValue1] = ids[names.actualValue];
                        ids[names.subValue2] = ids[names.absoluteVariation];
                        formats[names.mainValue] = formats[names.percentOfTarget];
                        formats[names.subValue1] = formats[names.actualValue];
                        formats[names.subValue2] = formats[names.absoluteVariation];
                        break;
                    case exports.deltaValueTypes.targetValue:
                        ids[names.mainValue] = ids[names.targetValue];
                        ids[names.subValue1] = ids[names.absoluteVariation];
                        ids[names.subValue2] = ids[names.percentVariation];
                        formats[names.mainValue] = formats[names.targetValue];
                        formats[names.subValue1] = formats[names.absoluteVariation];
                        formats[names.subValue2] = formats[names.percentVariation];
                        break;
                }
                valueIdsByDeltaId[delta.id] = ids;
                formatsByDeltaId[delta.id] = formats;
            });
        }
        return {
            deltas: deltas,
            valueIdsByDeltaId: valueIdsByDeltaId,
            formatsByDeltaId: formatsByDeltaId
        };
    };
    itemMetaData.prototype._createAxesInfo = function () {
        var metaDataDto = this._metaDataDto, axes = {}, dimensionDescriptorsByAxisName = metaDataDto.DimensionDescriptors || {}, levelByDimensionId = {}, formatByDimensionId = {}, pivotAreaByAxisName = {};
        $.each(dimensionDescriptorsByAxisName, function (_name, _dimensions) {
            var dimensions = [];
            if (_dimensions) {
                $.each(_dimensions, function (_, _dimension) {
                    var dimension = {
                        id: _dimension.ID,
                        name: _dimension.Name,
                        dataMember: _dimension.DataMember,
                        finalDataType: _dimension.FinalDataType,
                        dateTimeGroupInterval: _dimension.DateTimeGroupInterval,
                        textGroupInterval: _dimension.TextGroupInterval,
                        getFormat: function () {
                            return _formatter_1.convertToFormat(_dimension.Format);
                        },
                        format: function (value) {
                            var format = _dimension.Format, text = undefined;
                            if (format)
                                text = _formatter_1.format(value, format);
                            return text;
                        }
                    };
                    levelByDimensionId[dimension.id] = _dimension.Level;
                    formatByDimensionId[dimension.id] = _dimension.Format;
                    dimensions.push(dimension);
                });
            }
            axes[_name] = dimensions;
        });
        if (metaDataDto.ColumnHierarchy)
            pivotAreaByAxisName[metaDataDto.ColumnHierarchy] = 'Columns';
        if (metaDataDto.RowHierarchy)
            pivotAreaByAxisName[metaDataDto.RowHierarchy] = 'Rows';
        return {
            axes: axes,
            levelByDimensionId: levelByDimensionId,
            formatByDimensionId: formatByDimensionId,
            pivotAreaByAxisName: pivotAreaByAxisName
        };
    };
    itemMetaData.prototype.getAxes = function () {
        return this._data.axesInfo.axes;
    };
    itemMetaData.prototype.getAxisNames = function () {
        var names = [];
        $.each(this.getAxes(), function (name) {
            names.push(name);
        });
        return names;
    };
    itemMetaData.prototype.getPivotAreaByAxisName = function (name) {
        return this._data.axesInfo.pivotAreaByAxisName[name];
    };
    itemMetaData.prototype.getColorMeasures = function () {
        return this._data.colorMeasuresInfo.measures;
    };
    itemMetaData.prototype.getConditionalFormattingMeasures = function () {
        return this._data.conditionalFormattingMeasuresInfo.measures;
    };
    itemMetaData.prototype.getDimensions = function (axisName) {
        return this.getAxes()[axisName === undefined ? _item_data_axis_names_1.itemDataAxisNames.defaultAxis : axisName];
    };
    itemMetaData.prototype.getMeasures = function () {
        return this._data.measuresInfo.measures;
    };
    itemMetaData.prototype.getDeltas = function () {
        return this._data.deltaInfo.deltas;
    };
    itemMetaData.prototype.getMeasureById = function (id) {
        var measures = this.getMeasures(), foundMeasures = $.grep(measures, function (measure, i) {
            return measure.id == id;
        });
        return foundMeasures[0];
    };
    itemMetaData.prototype.getDeltaById = function (id) {
        var deltas = this.getDeltas(), foundDeltas = $.grep(deltas, function (delta, i) {
            return delta.id == id;
        });
        return foundDeltas[0];
    };
    itemMetaData.prototype.getMeasureFormat = function (measureId) {
        return this._data.measuresInfo.formatByMeasureId[measureId];
    };
    itemMetaData.prototype.getMeasureExpression = function (measureId) {
        return this._data.measuresInfo.expressionByMeasureId[measureId];
    };
    itemMetaData.prototype.getMeasureCalculation = function (measureId) {
        return this._data.measuresInfo.calculationByMeasureId[measureId];
    };
    itemMetaData.prototype.getMeasureWindowDefinition = function (measureId) {
        return this._data.measuresInfo.windowDefinitionByMeasureId[measureId];
    };
    itemMetaData.prototype.getDeltaValueIds = function (deltaId) {
        return this._data.deltaInfo.valueIdsByDeltaId[deltaId];
    };
    itemMetaData.prototype.getDeltaFormats = function (deltaId) {
        return this._data.deltaInfo.formatsByDeltaId[deltaId];
    };
    itemMetaData.prototype.getDeltaValueType = function (deltaId) {
    };
    itemMetaData.prototype.getDimensionLevel = function (dimensionId) {
        return this._data.axesInfo.levelByDimensionId[dimensionId];
    };
    itemMetaData.prototype.getDimensionFormat = function (dimensionId) {
        return this._data.axesInfo.formatByDimensionId[dimensionId];
    };
    itemMetaData.prototype.getDataMembers = function () {
        return this._data.dataSourceColumns;
    };
    itemMetaData.prototype.getFinalDataType = function (dataItemId) {
        var dataItem = this.getMeasureById(dataItemId);
        if (!dataItem) {
            $.each(this.getAxes(), function (axisName, dimensions) {
                dataItem = dimensions.filter(function (d) { return d.id == dataItemId; })[0];
                if (!!dataItem) {
                    return false;
                }
            });
        }
        return !!dataItem ? dataItem.finalDataType : undefined;
    };
    return itemMetaData;
}());
exports.itemMetaData = itemMetaData;


/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _utils_1 = __webpack_require__(3);
var selectionHelper = (function () {
    function selectionHelper() {
    }
    selectionHelper.setSelectedArguments = function (widget, values, state) {
        if (!values) {
            return;
        }
        for (var valueIndex = 0; valueIndex < values.length; valueIndex++) {
            this._selectArgument(widget, values[valueIndex], state);
        }
    };
    selectionHelper.setSelectedSeries = function (widget, values, state) {
        if (!values) {
            return;
        }
        for (var valueIndex = 0; valueIndex < values.length; valueIndex++) {
            this._selectSeries(widget, values[valueIndex], state);
        }
    };
    selectionHelper.setSelectedPoint = function (widget, seriesValue, argumentValue, state) {
        var that = this;
        if (seriesValue != null && argumentValue == null) {
            that._selectSeries(widget, seriesValue, state);
        }
        if (seriesValue == null && argumentValue != null) {
            that._selectArgument(widget, argumentValue, state);
        }
        if (seriesValue != null && argumentValue != null) {
            var seriesList = widget.getAllSeries();
            for (var i = 0; i < seriesList.length; i++) {
                if (that._checkWidgetCorrespondsToValue(seriesList[i], seriesValue)) {
                    this._selectSeriesPoints(seriesList[i], argumentValue, state);
                }
            }
        }
    };
    selectionHelper.setSelectedWidgetViewer = function (widget, values, state) {
        if (!values) {
            return;
        }
        for (var valueIndex = 0; valueIndex < values.length; valueIndex++) {
            this._selectValue(widget, values[valueIndex], state);
        }
    };
    selectionHelper.selectWholePie = function (widgetViewer, state) {
        var seriesList = widgetViewer.getAllSeries();
        for (var i = 0; i < seriesList.length; i++) {
            this._selectWidget(seriesList[i], state);
        }
    };
    selectionHelper._selectSeries = function (widget, seriesValue, state) {
        var seriesList = widget.getAllSeries();
        for (var i = 0; i < seriesList.length; i++) {
            this._selectValue(seriesList[i], seriesValue, state);
        }
    };
    selectionHelper._selectArgument = function (widget, argumentValue, state) {
        var seriesList = widget.getAllSeries();
        for (var i = 0; i < seriesList.length; i++) {
            this._selectSeriesPoints(seriesList[i], argumentValue, state);
        }
    };
    selectionHelper._selectSeriesPoints = function (series, argumentValue, state) {
        var points = series.getAllPoints();
        for (var j = 0; j < points.length; j++) {
            this._selectValue(points[j], argumentValue, state);
        }
    };
    selectionHelper._selectValue = function (widget, value, state) {
        if (this._checkWidgetCorrespondsToValue(widget, value)) {
            this._selectWidget(widget, state);
        }
    };
    selectionHelper._selectWidget = function (widget, state) {
        if (state) {
            widget.select();
        }
        else {
            widget.clearSelection();
        }
    };
    selectionHelper._checkWidgetCorrespondsToValue = function (widget, value) {
        var tag = widget.tag;
        if (!tag || !value)
            return false;
        if (tag)
            tag = _utils_1.getTagValue(tag);
        if (tag && !Array.isArray(tag) && !Array.isArray(value)) {
            throw Error('Internal Error: incorrect values for selection');
        }
        return _utils_1.checkValuesAreEqual(tag, value);
    };
    return selectionHelper;
}());
exports.selectionHelper = selectionHelper;


/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(96);
__webpack_require__(412);
__webpack_require__(683);
__webpack_require__(119);
__webpack_require__(245);
__webpack_require__(99);
__webpack_require__(684);
__webpack_require__(236);
__webpack_require__(382);
__webpack_require__(413);
__webpack_require__(30);
__webpack_require__(414);
__webpack_require__(168);
__webpack_require__(120);
__webpack_require__(65);
__webpack_require__(415);
__webpack_require__(416);
__webpack_require__(383);
__webpack_require__(685);
__webpack_require__(686);
__webpack_require__(235);
__webpack_require__(384);
__webpack_require__(169);
__webpack_require__(170);
__webpack_require__(687);
__webpack_require__(246);
__webpack_require__(100);
__webpack_require__(417);
__webpack_require__(171);
__webpack_require__(172);
__webpack_require__(418);
__webpack_require__(247);
__webpack_require__(164);
__webpack_require__(173);
__webpack_require__(101);
__webpack_require__(121);
__webpack_require__(688);
__webpack_require__(419);
__webpack_require__(420);
__webpack_require__(421);
__webpack_require__(422);
__webpack_require__(423);
__webpack_require__(248);
__webpack_require__(249);
__webpack_require__(250);
__webpack_require__(251);
__webpack_require__(174);
__webpack_require__(174);
__webpack_require__(252);
__webpack_require__(424);
__webpack_require__(425);
__webpack_require__(122);
__webpack_require__(253);
__webpack_require__(426);
__webpack_require__(427);
__webpack_require__(428);
__webpack_require__(233);
__webpack_require__(38);
__webpack_require__(539);
__webpack_require__(738);
__export(__webpack_require__(739));
__export(__webpack_require__(539));


/***/ }),
/* 245 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.DOMComponent };

/***/ }),
/* 246 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.ui.dxDataGrid };

/***/ }),
/* 247 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.ui.dxPopup };

/***/ }),
/* 248 */
/***/ (function(module, exports) {

module.exports = DevExpress.ui.Widget;

/***/ }),
/* 249 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.viz.dxBullet };

/***/ }),
/* 250 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.viz.dxChart };

/***/ }),
/* 251 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.viz.dxCircularGauge };

/***/ }),
/* 252 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.viz.dxLinearGauge };

/***/ }),
/* 253 */
/***/ (function(module, exports) {

module.exports = DevExpress.viz;

/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _helper_classes_1 = __webpack_require__(36);
var DashboardUniqueNameGenerator = (function () {
    function DashboardUniqueNameGenerator(_propertyName, _startIndex) {
        var collections = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            collections[_i - 2] = arguments[_i];
        }
        var _this = this;
        this._propertyName = _propertyName;
        this._startIndex = _startIndex;
        this._disposables = [];
        this._componentsCollections = collections;
        this._componentsCollections.map(function (collection) {
            collection().forEach(function (item) { return _this._ensureUniqueName(item); });
            _this._disposables.push(collection.subscribe(function (changes) {
                changes.forEach(function (itemChange) {
                    var change = itemChange;
                    if (change.status === 'added') {
                        _this._ensureUniqueName(change.value);
                    }
                });
            }, null, 'arrayChange'));
        });
    }
    DashboardUniqueNameGenerator.prototype._ensureUniqueName = function (item) {
        var affectedItems = this._componentsCollections.reduce(function (result, collection) { return result.concat(collection()); }, []), itemIndex = affectedItems.indexOf(item), uniqueName = item[this._propertyName]();
        affectedItems.splice(itemIndex, 1);
        if (!!uniqueName && !_helper_classes_1.NameGenerator.isValidName(uniqueName, affectedItems, this._propertyName))
            throw new Error("Invalid Name \"" + uniqueName + "\": An item with the same name already exists. Check the name or set it to 'undefined' to generate a unique name automatically.");
        if (!uniqueName) {
            item[this._propertyName](_helper_classes_1.NameGenerator.generateName(item.getUniqueNamePrefix(), affectedItems, this._propertyName, this._startIndex));
        }
    };
    DashboardUniqueNameGenerator.prototype.dispose = function () {
        this._disposables.map(function (disposable) { return disposable.dispose(); });
    };
    return DashboardUniqueNameGenerator;
}());
exports.DashboardUniqueNameGenerator = DashboardUniqueNameGenerator;


/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var serializable_model_1 = __webpack_require__(5);
var _data_item_format_1 = __webpack_require__(179);
var DataItemNumericFormat = (function (_super) {
    __extends(DataItemNumericFormat, _super);
    function DataItemNumericFormat(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    DataItemNumericFormat.prototype.getInfo = function () {
        return _data_item_format_1.dataItemNumericFormatSerializationsInfo;
    };
    DataItemNumericFormat.prototype._getViewModel = function () {
        return {
            NumericFormat: {
                CurrencyCulture: this.currencyCultureName(),
                FormatType: this.formatType(),
                Precision: this.precision(),
                Unit: this.unit(),
                IncludeGroupSeparator: this.includeGroupSeparator()
            }
        };
    };
    return DataItemNumericFormat;
}(serializable_model_1.SerializableModel));
exports.DataItemNumericFormat = DataItemNumericFormat;
var AbsoluteVariationNumericFormat = (function (_super) {
    __extends(AbsoluteVariationNumericFormat, _super);
    function AbsoluteVariationNumericFormat(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    AbsoluteVariationNumericFormat.prototype.getInfo = function () {
        return _data_item_format_1.absoluteVariationNumericFormatSerializationsInfo;
    };
    return AbsoluteVariationNumericFormat;
}(DataItemNumericFormat));
exports.AbsoluteVariationNumericFormat = AbsoluteVariationNumericFormat;
var PercentVariationNumericFormat = (function (_super) {
    __extends(PercentVariationNumericFormat, _super);
    function PercentVariationNumericFormat(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    PercentVariationNumericFormat.prototype.getInfo = function () {
        return _data_item_format_1.percentVariationNumericFormatSerializationsInfo;
    };
    return PercentVariationNumericFormat;
}(DataItemNumericFormat));
exports.PercentVariationNumericFormat = PercentVariationNumericFormat;
var PercentOfTargetNumericFormat = (function (_super) {
    __extends(PercentOfTargetNumericFormat, _super);
    function PercentOfTargetNumericFormat(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    PercentOfTargetNumericFormat.prototype.getInfo = function () {
        return _data_item_format_1.percentOfTargetNumericFormatSerializationsInfo;
    };
    return PercentOfTargetNumericFormat;
}(DataItemNumericFormat));
exports.PercentOfTargetNumericFormat = PercentOfTargetNumericFormat;
var DataItemDateTimeFormat = (function (_super) {
    __extends(DataItemDateTimeFormat, _super);
    function DataItemDateTimeFormat(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    DataItemDateTimeFormat.prototype.getInfo = function () {
        return _data_item_format_1.dataItemDateTimeFormatSerializationsInfo;
    };
    DataItemDateTimeFormat.prototype._getViewModel = function (groupInterval) {
        return {
            DateTimeFormat: {
                GroupInterval: groupInterval || 'None',
                YearFormat: this.yearFormat(),
                QuarterFormat: this.quarterFormat(),
                MonthFormat: this.monthFormat(),
                DayOfWeekFormat: this.dayOfWeekFormat(),
                DateFormat: this.dateFormat(),
                DateHourFormat: this.dateHourFormat(),
                DateHourMinuteFormat: this.dateHourMinuteFormat(),
                DateTimeFormat: this.dateTimeFormat(),
                HourFormat: this.hourFormat(),
                ExactDateFormat: this.exactDateFormat()
            }
        };
    };
    return DataItemDateTimeFormat;
}(serializable_model_1.SerializableModel));
exports.DataItemDateTimeFormat = DataItemDateTimeFormat;


/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var ColorSchemeDefinition = (function () {
    function ColorSchemeDefinition(dataSource, dataMember, dimensionDefinitions, colorByMeasures, componentName, name) {
        if (colorByMeasures === void 0) { colorByMeasures = false; }
        if (componentName === void 0) { componentName = ''; }
        if (name === void 0) { name = ''; }
        var _this = this;
        this.dataSource = dataSource;
        this.dataMember = dataMember;
        this.dimensionDefinitions = dimensionDefinitions;
        this.colorByMeasures = colorByMeasures;
        this.componentName = componentName;
        this.name = name;
        this.dataItems = ko.computed(function () {
            return _this.dimensionDefinitions.map(function (definition) {
                return false ? undefined : definition.dataMember();
            }).concat(_this.colorByMeasures ? [_default_1.getLocalizationById('DashboardWebStringId.Colorization.MeasureNames')] : []);
        });
        this.typeText = ko.computed(function () {
            return !_this.componentName ? _default_1.getLocalizationById('DashboardWebStringId.Coloring.Global') : (_default_1.getLocalizationById('DashboardWebStringId.Coloring.Local') + '(' + _this.name + ')');
        });
        this.dataSourceText = ko.computed(function () {
            return _this.dataMember || _this.dataSource;
        });
        this.key = ko.computed(function () {
            return [_this.componentName, _this.dataMember, _this.dataSource].concat(_this.dimensionDefinitions.map(function (value) { return value.dataMember() + '(' + value.dateTimeGroupInterval() + ')'; }).sort()).concat(_this.colorByMeasures ? [_default_1.getLocalizationById('DashboardWebStringId.Colorization.MeasureNames')] : []).join('|');
        });
    }
    ColorSchemeDefinition.prototype.equals = function (definition) {
        return definition.key() === this.key();
    };
    return ColorSchemeDefinition;
}());
exports.ColorSchemeDefinition = ColorSchemeDefinition;


/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var _format_helper_1 = __webpack_require__(47);
var _localizer_1 = __webpack_require__(16);
var serializable_model_1 = __webpack_require__(5);
var _color_scheme_entry_1 = __webpack_require__(124);
var DimensionKey = (function (_super) {
    __extends(DimensionKey, _super);
    function DimensionKey(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer, _color_scheme_entry_1.dimensionKeySerializationInfo) || this;
        _this.displayText = ko.pureComputed(function () {
            var displayText = null;
            if (!!_this.value.value()) {
                if (_this.value.type() === 'System.DateTime') {
                    var groupInterval = _this.definition.dateTimeGroupInterval();
                    displayText = _format_helper_1.formatHelper.format(new Date(_this.value.value()), { dateType: 'short', format: groupInterval });
                }
                else {
                    displayText = _this.value.value().toString();
                }
            }
            var predefinedDisplayText = _localizer_1.localizer.getPredefinedString(displayText);
            if (predefinedDisplayText) {
                return predefinedDisplayText;
            }
            else {
                return displayText;
            }
        });
        return _this;
    }
    DimensionKey.prototype.getInfo = function () {
        return _color_scheme_entry_1.dimensionKeySerializationInfo;
    };
    return DimensionKey;
}(serializable_model_1.SerializableModel));
exports.DimensionKey = DimensionKey;


/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var serializable_model_1 = __webpack_require__(5);
var measure_calculation_1 = __webpack_require__(81);
var _calculation_1 = __webpack_require__(434);
exports._currentCalculationInfo = function (model) {
    if (!model.calculationType)
        return [];
    return [{
            propertyName: 'calculation',
            modelName: model.calculationType() || 'FakeCalculationForModelSubscriber',
            from: function (json, serializer) { return new measure_calculation_1.calculationsTypesMap[model.calculationType()](json, serializer); },
            toJsonObject: function (value, serializer, refs) {
                var result = serializer.serialize(value, null, refs);
                if (dx_analytics_core_1.default.Analytics.Internal.isEmptyObject(result)) {
                    return null;
                }
                return result;
            }
        }];
};
var Calculation = (function (_super) {
    __extends(Calculation, _super);
    function Calculation(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.calculationType = ko.observable();
        _this.calculation = ko.observable();
        _this.calculationType(Object.keys(measure_calculation_1.calculationsTypesMap).filter(function (mapItem) { return !!modelJson && modelJson[mapItem] !== undefined; })[0]);
        if (!!_this.calculationType()) {
            _this.calculation(new (measure_calculation_1.calculationsTypesMap[_this.calculationType()])((modelJson || {})[_this.calculationType()]));
            delete _this['_model'][_this.calculationType()];
        }
        _this.calculation.subscribe(function (calculation) {
            _this.calculationType(Object.keys(measure_calculation_1.calculationsTypesMap).filter(function (mapItem) { return calculation instanceof measure_calculation_1.calculationsTypesMap[mapItem]; })[0]);
        });
        return _this;
    }
    Calculation.prototype.getInfo = function () {
        return _calculation_1.calculationSerializationsInfo.concat(exports._currentCalculationInfo(this));
    };
    Calculation.prototype.isEmpty = function () {
        return !this.calculation();
    };
    return Calculation;
}(serializable_model_1.SerializableModel));
exports.Calculation = Calculation;


/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var serializable_model_1 = __webpack_require__(5);
var measure_calc_window_definition_1 = __webpack_require__(42);
var _window_definition_1 = __webpack_require__(435);
var currentwindowDefinitionInfo = function (model) {
    if (!model.windowDefinitionType)
        return [];
    return [{
            propertyName: 'windowDefinition',
            modelName: model.windowDefinitionType() || 'FakeWindowDefinitionForModelSubscriber',
            from: function (json, serializer) { return new measure_calc_window_definition_1.windowDefinitionsTypesMap[model.windowDefinitionType()](json, serializer); },
            toJsonObject: function (value, serializer, refs) {
                var result = serializer.serialize(value, null, refs);
                if (dx_analytics_core_1.default.Analytics.Internal.isEmptyObject(result)) {
                    return null;
                }
                return result;
            }
        }];
};
var WindowDefinition = (function (_super) {
    __extends(WindowDefinition, _super);
    function WindowDefinition(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.windowDefinitionType = ko.observable();
        _this.windowDefinition = ko.observable();
        _this.windowDefinitionType(Object.keys(measure_calc_window_definition_1.windowDefinitionsTypesMap).filter(function (mapItem) { return !!modelJson && modelJson[mapItem] !== undefined; })[0]);
        if (!!_this.windowDefinitionType()) {
            var type = measure_calc_window_definition_1.windowDefinitionsTypesMap[_this.windowDefinitionType()];
            _this.windowDefinition(new type((modelJson || {})[_this.windowDefinitionType()]));
            delete _this['_model'][_this.windowDefinitionType()];
        }
        _this.windowDefinition.subscribe(function (windowDefinition) {
            _this.windowDefinitionType(Object.keys(measure_calc_window_definition_1.windowDefinitionsTypesMap).filter(function (mapItem) { return windowDefinition instanceof measure_calc_window_definition_1.windowDefinitionsTypesMap[mapItem]; })[0]);
        });
        return _this;
    }
    WindowDefinition.prototype.getInfo = function () {
        return _window_definition_1.windowDefinitionSerializationsInfo.concat(currentwindowDefinitionInfo(this));
    };
    WindowDefinition.prototype.equals = function (def) {
        return (this.isEmpty() && def.isEmpty()) || this.windowDefinition().equals(def.windowDefinition());
    };
    WindowDefinition.prototype.isEmpty = function () {
        return !this.windowDefinition();
    };
    return WindowDefinition;
}(serializable_model_1.SerializableModel));
exports.WindowDefinition = WindowDefinition;


/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var string_1 = __webpack_require__(30);
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var _measure_1 = __webpack_require__(70);
var serializable_model_1 = __webpack_require__(5);
var _dimension_definition_1 = __webpack_require__(436);
var _color_scheme_entry_1 = __webpack_require__(124);
var MeasureDefinition = (function (_super) {
    __extends(MeasureDefinition, _super);
    function MeasureDefinition(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer, _color_scheme_entry_1.measureKeySerializationInfo) || this;
        _this.definitions = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(modelJson.Definitions, function (item) { return new _dimension_definition_1.DimensionDefinition(item, serializer); });
        _this.displayText = ko.computed(function () {
            if (!!_this.expression())
                return _default_1.getLocalizationById('DashboardWebStringId.Calculations.Expression');
            var prefix = !!_this.calculation.calculation() && _default_1.getLocalizationById(_this.calculation.calculation().name);
            var postfix = ' (' + _default_1.getLocalizationById(_measure_1.summaryTypeDict[_this.summaryType() || 'Sum']) + ')';
            var name = ((prefix && (prefix + ' ')) || '') + _this.dataMember() + postfix;
            if (_this.filterString())
                return MeasureDefinition._constructFilteredName(name);
            return name;
        });
        return _this;
    }
    MeasureDefinition._constructFilteredName = function (baseName) {
        return string_1.format(_default_1.getLocalizationById('DashboardStringId.MeasureFilterCaptionFormatString'), baseName);
    };
    MeasureDefinition.prototype.getInfo = function () {
        return _color_scheme_entry_1.measureKeySerializationInfo;
    };
    Object.defineProperty(MeasureDefinition.prototype, "_id", {
        get: function () {
            var serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer({ useRefs: false });
            return JSON.stringify(serializer.serialize(this, _color_scheme_entry_1.measureKeySerializationInfo));
        },
        enumerable: true,
        configurable: true
    });
    return MeasureDefinition;
}(serializable_model_1.SerializableModel));
exports.MeasureDefinition = MeasureDefinition;


/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var _array_utils_1 = __webpack_require__(49);
var _utils_1 = __webpack_require__(18);
var data_item_1 = __webpack_require__(8);
var measure_calc_window_definition_1 = __webpack_require__(42);
var _specific_calc_window_definition_1 = __webpack_require__(438);
var SpecificWindowDefinition = (function (_super) {
    __extends(SpecificWindowDefinition, _super);
    function SpecificWindowDefinition(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.dimensions = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(modelJson && modelJson.Dimensions, function (item) {
            return new data_item_1.DataItemLink(null, item, serializer);
        });
        return _this;
    }
    SpecificWindowDefinition.prototype.getInfo = function () {
        var dimensionsInfo = _specific_calc_window_definition_1.sliceTableDimensions;
        if (!!this._dimensionsInfoPatcher) {
            dimensionsInfo = this._dimensionsInfoPatcher(dimensionsInfo);
        }
        return _super.prototype.getInfo.call(this).concat([dimensionsInfo]);
    };
    SpecificWindowDefinition.prototype.equals = function (def) {
        return (def instanceof SpecificWindowDefinition) &&
            _array_utils_1.compareNotOrderedArrays(this.dimensions(), def.dimensions(), function (d1, d2) { return d1.uniqueName() === d2.uniqueName(); });
    };
    __decorate([
        _utils_1.collectionItemType('Dimension')
    ], SpecificWindowDefinition.prototype, "dimensions", void 0);
    return SpecificWindowDefinition;
}(measure_calc_window_definition_1.MeasureCalculationWindowDefinition));
exports.SpecificWindowDefinition = SpecificWindowDefinition;
measure_calc_window_definition_1.windowDefinitionsTypesMap['SpecificWindowDefinition'] = SpecificWindowDefinition;


/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var serializable_model_1 = __webpack_require__(5);
var _dashboard_item_format_rule_1 = __webpack_require__(52);
var icon_settings_1 = __webpack_require__(73);
var DashboardItemFormatRule = (function (_super) {
    __extends(DashboardItemFormatRule, _super);
    function DashboardItemFormatRule(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.condition = ko.computed({
            read: function () {
                var info = _dashboard_item_format_rule_1.conditionTypes.filter(function (ct) { return _this[ct.propertyName] && !_this[ct.propertyName].isEmpty(); })[0];
                if (info) {
                    return _this[info.propertyName];
                }
            },
            write: function (newCondition) {
                var info = _dashboard_item_format_rule_1.conditionTypes.filter(function (ct) { return newCondition instanceof ct.type; })[0];
            }
        });
        return _this;
    }
    Object.defineProperty(DashboardItemFormatRule.prototype, "_classCaption", {
        get: function () {
            var _this = this;
            var info = _dashboard_item_format_rule_1.conditionTypes.filter(function (t) { return _this.condition() instanceof t.type; })[0];
            return info && (this.name() + ': ' + _default_1.getLocalizationById(info.displayName));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardItemFormatRule.prototype, "_classId", {
        get: function () {
            var _this = this;
            var info = _dashboard_item_format_rule_1.conditionTypes.filter(function (t) { return _this.condition() instanceof t.type; })[0];
            var id = info && info.propertyName;
            if (id === 'conditionRangeSet') {
                if (this.condition().actualStyles.filter(function (style) { return style instanceof icon_settings_1.IconSettings; }).length > 0) {
                    id += '_icons';
                }
                else {
                    id += '_colors';
                }
            }
            return id;
        },
        enumerable: true,
        configurable: true
    });
    DashboardItemFormatRule.prototype.getInfo = function () {
        return _dashboard_item_format_rule_1.dashboardItemFormatRuleSerializationsInfo;
    };
    DashboardItemFormatRule.prototype._changeConditionType = function (propertyName) {
        var condition = this[propertyName];
        var oldCondition = this.condition();
        condition.init();
        oldCondition && oldCondition.isEmpty(true);
    };
    return DashboardItemFormatRule;
}(serializable_model_1.TypedSerializableModel));
exports.DashboardItemFormatRule = DashboardItemFormatRule;


/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var format_condition_style_base_1 = __webpack_require__(66);
var _format_condition_average_1 = __webpack_require__(265);
var FormatConditionAverage = (function (_super) {
    __extends(FormatConditionAverage, _super);
    function FormatConditionAverage(modelJson, serializer) {
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.getSpecificType = function () { return _this.averageType(); };
        _this.setSpecificType = function (type) {
            _this.averageType(type);
        };
        return _this;
    }
    FormatConditionAverage.prototype._getStyleSettingsInfo = function () {
        return _format_condition_average_1.formatConditionAverageSerializationsInfo;
    };
    return FormatConditionAverage;
}(format_condition_style_base_1.FormatConditionStyleBase));
exports.FormatConditionAverage = FormatConditionAverage;


/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var serializable_model_1 = __webpack_require__(5);
var _format_condition_base_1 = __webpack_require__(182);
var FormatConditionBase = (function (_super) {
    __extends(FormatConditionBase, _super);
    function FormatConditionBase(modelJson, serializer) {
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson || {}, serializer) || this;
        _this.dataType = ko.observable();
        _this.dateTimeGroupInterval = ko.observable();
        _this._empty = true;
        _this.isEmpty = ko.observable();
        _this.isEmpty(!modelJson);
        return _this;
    }
    Object.defineProperty(FormatConditionBase.prototype, "_isApplyToRowColumnRestricted", {
        get: function () { return false; },
        enumerable: true,
        configurable: true
    });
    FormatConditionBase.prototype.getInfo = function () {
        return _format_condition_base_1.formatConditionBaseSerializationsInfo;
    };
    FormatConditionBase.prototype.isValid = function () {
        return true;
    };
    FormatConditionBase.prototype.isRange = function () {
        return false;
    };
    FormatConditionBase.prototype.isGradient = function () {
        return false;
    };
    FormatConditionBase.prototype.init = function () {
        this.isEmpty(false);
    };
    return FormatConditionBase;
}(serializable_model_1.SerializableModel));
exports.FormatConditionBase = FormatConditionBase;


/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _format_condition_style_base_1 = __webpack_require__(83);
exports.averageType = {
    propertyName: 'averageType', modelName: '@AverageType', displayName: 'DashboardWebStringId.ConditionalFormatting.AverageType', defaultVal: 'Above', simpleFormAdapterItem: 'selectBoxEditor', values: {
        'Above': 'DashboardWebStringId.ConditionalFormatting.Above',
        'AboveOrEqual': 'DashboardWebStringId.ConditionalFormatting.AboveOrEqual',
        'Below': 'DashboardWebStringId.ConditionalFormatting.Below',
        'BelowOrEqual': 'DashboardWebStringId.ConditionalFormatting.BelowOrEqual'
    }
};
exports.formatConditionAverageSerializationsInfo = _format_condition_style_base_1.formatConditionStyleBaseSerializationsInfo.concat([exports.averageType]);


/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
exports.showBarOnly = { propertyName: 'showBarOnly', modelName: '@ShowBarOnly', displayName: 'DashboardStringId.FormatRuleShowBarOnly', defaultVal: false, simpleFormAdapterItem: 'yesNoButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.allowNegativeAxis = { propertyName: 'allowNegativeAxis', modelName: '@AllowNegativeAxis', displayName: 'DashboardStringId.FormatRuleAllowNegativeAxis', defaultVal: true, simpleFormAdapterItem: 'yesNoButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.drawAxis = { propertyName: 'drawAxis', modelName: '@DrawAxis', displayName: 'DashboardStringId.FormatRuleDrawAxis', defaultVal: false, simpleFormAdapterItem: 'yesNoButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.formatConditionBarOptionsSerializationsInfo = [exports.showBarOnly, exports.allowNegativeAxis, exports.drawAxis];


/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _format_rules_common_1 = __webpack_require__(54);
var bar_style_settings_1 = __webpack_require__(53);
var _format_condition_min_max_base_1 = __webpack_require__(183);
exports.barNegativeStyleSettings = { propertyName: 'negativeStyleSettings', modelName: 'NegativeStyleSettings', displayName: 'DashboardStringId.FormatRuleNegativeStyle', type: bar_style_settings_1.BarStyleSettings };
exports.barCurrentStyleSettingsType = {
    propertyName: 'currentStyleSettingsType', displayName: 'DashboardWebStringId.ConditionalFormatting.StyleSettingsType', defaultVal: 'Positive', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Positive': 'DashboardWebStringId.ConditionalFormatting.Positive',
        'Negative': 'DashboardWebStringId.ConditionalFormatting.Negative'
    }
};
exports.barCurrentStyleSettings = { propertyName: 'currentStyleSettings', type: bar_style_settings_1.BarStyleSettings };
exports.formatConditionBarSerializationsInfo = _format_condition_min_max_base_1.formatConditionMinMaxBaseSerializationsInfo.concat([exports.barNegativeStyleSettings, _format_rules_common_1.barOptions]);


/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _common_1 = __webpack_require__(35);
var enums_1 = __webpack_require__(94);
var _format_condition_style_base_1 = __webpack_require__(83);
var parseFilterDateType = function (typeModel) {
    return _common_1.parseFlagsEnumType(typeModel, enums_1.FilterDateType.None, FilterDateTypeDictionary);
};
var serializeFilterDateType = function (val) {
    return _common_1.serializeFlagsEnumType(val, 'None', FilterDateTypeDictionary);
};
var getFilterDateTypeValues = function (val) {
    return _common_1.getFlagsEnumTypeValues(val, FilterDateTypeDictionary, 'key');
};
var FilterDateTypeDictionary = {
    'BeyondThisYear': enums_1.FilterDateType.BeyondThisYear,
    'LaterThisYear': enums_1.FilterDateType.LaterThisYear,
    'LaterThisMonth': enums_1.FilterDateType.LaterThisMonth,
    'LaterThisWeek': enums_1.FilterDateType.LaterThisWeek,
    'NextWeek': enums_1.FilterDateType.NextWeek,
    'Tomorrow': enums_1.FilterDateType.Tomorrow,
    'Today': enums_1.FilterDateType.Today,
    'Yesterday': enums_1.FilterDateType.Yesterday,
    'EarlierThisWeek': enums_1.FilterDateType.EarlierThisWeek,
    'LastWeek': enums_1.FilterDateType.LastWeek,
    'EarlierThisMonth': enums_1.FilterDateType.EarlierThisMonth,
    'EarlierThisYear': enums_1.FilterDateType.EarlierThisYear,
    'PriorThisYear': enums_1.FilterDateType.PriorThisYear,
    'Empty': enums_1.FilterDateType.Empty,
    'Beyond': enums_1.FilterDateType.Beyond,
    'ThisWeek': enums_1.FilterDateType.ThisWeek,
    'ThisMonth': enums_1.FilterDateType.ThisMonth,
    'MonthAfter1': enums_1.FilterDateType.MonthAfter1,
    'MonthAfter2': enums_1.FilterDateType.MonthAfter2,
    'MonthAgo1': enums_1.FilterDateType.MonthAgo1,
    'MonthAgo2': enums_1.FilterDateType.MonthAgo2,
    'MonthAgo3': enums_1.FilterDateType.MonthAgo3,
    'MonthAgo4': enums_1.FilterDateType.MonthAgo4,
    'MonthAgo5': enums_1.FilterDateType.MonthAgo5,
    'MonthAgo6': enums_1.FilterDateType.MonthAgo6,
    'Earlier': enums_1.FilterDateType.Earlier
};
exports.dateTypeValues = [
    { value: enums_1.FilterDateType.BeyondThisYear, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DateType.BeyondThisYear' },
    { value: enums_1.FilterDateType.LaterThisYear, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DateType.LaterThisYear' },
    { value: enums_1.FilterDateType.LaterThisMonth, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DateType.LaterThisMonth' },
    { value: enums_1.FilterDateType.LaterThisWeek, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DateType.LaterThisWeek' },
    { value: enums_1.FilterDateType.NextWeek, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DateType.NextWeek' },
    { value: enums_1.FilterDateType.Tomorrow, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DateType.Tomorrow' },
    { value: enums_1.FilterDateType.Today, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DateType.Today' },
    { value: enums_1.FilterDateType.Yesterday, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DateType.Yesterday' },
    { value: enums_1.FilterDateType.EarlierThisWeek, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisWeek' },
    { value: enums_1.FilterDateType.LastWeek, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DateType.LastWeek' },
    { value: enums_1.FilterDateType.EarlierThisMonth, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisMonth' },
    { value: enums_1.FilterDateType.EarlierThisYear, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisYear' },
    { value: enums_1.FilterDateType.PriorThisYear, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DateType.PriorThisYear' },
    { value: enums_1.FilterDateType.Empty, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DateType.Empty' },
    { value: enums_1.FilterDateType.Beyond, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DateType.Beyond' },
    { value: enums_1.FilterDateType.ThisWeek, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DateType.ThisWeek' },
    { value: enums_1.FilterDateType.ThisMonth, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DateType.ThisMonth' },
    { value: enums_1.FilterDateType.MonthAfter1, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DateType.MonthAfter1' },
    { value: enums_1.FilterDateType.MonthAfter2, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DateType.MonthAfter2' },
    { value: enums_1.FilterDateType.MonthAgo1, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo1' },
    { value: enums_1.FilterDateType.MonthAgo2, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo2' },
    { value: enums_1.FilterDateType.MonthAgo3, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo3' },
    { value: enums_1.FilterDateType.MonthAgo4, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo4' },
    { value: enums_1.FilterDateType.MonthAgo5, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo5' },
    { value: enums_1.FilterDateType.MonthAgo6, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo6' },
    { value: enums_1.FilterDateType.Earlier, displayValueId: 'DashboardWebStringId.ConditionalFormatting.DateType.Earlier' }
];
exports.dateType = {
    propertyName: 'dateType', modelName: '@DateType', defaultVal: 'Yesterday',
    from: function (d) { return ko.observable(parseFilterDateType(d)); }, toJsonObject: serializeFilterDateType,
};
exports.FormatConditionDateOccurringSerializationsInfo = _format_condition_style_base_1.formatConditionStyleBaseSerializationsInfo.concat([exports.dateType]);


/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var format_condition_style_base_1 = __webpack_require__(66);
var _format_condition_expression_1 = __webpack_require__(270);
var FormatConditionExpression = (function (_super) {
    __extends(FormatConditionExpression, _super);
    function FormatConditionExpression(modelJson, serializer) {
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.getSpecificType = function () { return null; };
        _this.setSpecificType = function (type) { };
        return _this;
    }
    FormatConditionExpression.prototype._getStyleSettingsInfo = function () {
        return _format_condition_expression_1.formatConditionExpressionSerializationsInfo;
    };
    return FormatConditionExpression;
}(format_condition_style_base_1.FormatConditionStyleBase));
exports.FormatConditionExpression = FormatConditionExpression;


/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _format_condition_style_base_1 = __webpack_require__(83);
exports.formatConditionExpression = { propertyName: 'expression', modelName: '@Expression' };
exports.formatConditionFilter = { propertyName: 'expression' };
exports.formatConditionExpressionSerializationsInfo = _format_condition_style_base_1.formatConditionStyleBaseSerializationsInfo.concat([exports.formatConditionExpression]);


/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var format_condition_style_base_1 = __webpack_require__(66);
var _format_condition_top_bottom_1 = __webpack_require__(184);
var FormatConditionTopBottom = (function (_super) {
    __extends(FormatConditionTopBottom, _super);
    function FormatConditionTopBottom(modelJson, serializer) {
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.getSpecificType = function () { return _this.topBottom(); };
        _this.setSpecificType = function (type) {
            _this.topBottom(type);
        };
        return _this;
    }
    FormatConditionTopBottom.prototype._getStyleSettingsInfo = function () {
        return _format_condition_top_bottom_1.formatConditionTopBottomSerializationsInfo;
    };
    return FormatConditionTopBottom;
}(format_condition_style_base_1.FormatConditionStyleBase));
exports.FormatConditionTopBottom = FormatConditionTopBottom;


/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var _parameters_helper_1 = __webpack_require__(55);
var serializable_model_1 = __webpack_require__(5);
var _format_rules_common_1 = __webpack_require__(54);
var ComplexValue = (function (_super) {
    __extends(ComplexValue, _super);
    function ComplexValue(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        if (!_this.isEmpty() && !_this.isInfinity) {
            _this.value(_parameters_helper_1.ParameterHelper.convertSingleValue(_this.value(), _this.type()));
        }
        return _this;
    }
    ComplexValue.prototype.isEmpty = function () {
        return !this.value || !this.type || !this.type();
    };
    Object.defineProperty(ComplexValue.prototype, "isInfinity", {
        get: function () {
            return this.value() == _format_rules_common_1.negativeInfinity;
        },
        enumerable: true,
        configurable: true
    });
    ComplexValue.prototype.getInfo = function () {
        return _format_rules_common_1.complexValueInfo;
    };
    ComplexValue.prototype.setValue = function (value, type) {
        this.value(value);
        this.type(type);
    };
    return ComplexValue;
}(serializable_model_1.SerializableModel));
exports.ComplexValue = ComplexValue;


/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var format_condition_range_base_1 = __webpack_require__(274);
var _format_condition_range_set_1 = __webpack_require__(276);
var range_generator_1 = __webpack_require__(84);
var FormatConditionRangeSet = (function (_super) {
    __extends(FormatConditionRangeSet, _super);
    function FormatConditionRangeSet(modelJson, serializer) {
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    FormatConditionRangeSet.prototype.getInfo = function () {
        return _format_condition_range_set_1.formatConditionRangeSetSerializationsInfo;
    };
    FormatConditionRangeSet.prototype.getActualPredefinedType = function () {
        return range_generator_1.FormatConditionRangeGenerator.getPredefinedType(this.actualStyles, function (type) {
            var c = new FormatConditionRangeSet();
            range_generator_1.FormatConditionRangeGenerator.generateRangeSet(c, type);
            return c;
        });
    };
    FormatConditionRangeSet.prototype.setActualPredefinedType = function (type) {
        range_generator_1.FormatConditionRangeGenerator.generateRangeSet(this, type);
    };
    return FormatConditionRangeSet;
}(format_condition_range_base_1.FormatConditionRangeBase));
exports.FormatConditionRangeSet = FormatConditionRangeSet;


/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var _format_rules_common_1 = __webpack_require__(54);
var appearance_settings_1 = __webpack_require__(67);
var format_condition_base_1 = __webpack_require__(264);
var _format_condition_range_base_1 = __webpack_require__(128);
var FormatConditionRangeBase = (function (_super) {
    __extends(FormatConditionRangeBase, _super);
    function FormatConditionRangeBase(modelJson, serializer) {
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.getSpecificType = function () { return _this.getActualPredefinedType(); };
        _this.setSpecificType = function (specificType) { return _this.setActualPredefinedType(specificType); };
        return _this;
    }
    Object.defineProperty(FormatConditionRangeBase.prototype, "actualStyles", {
        get: function () {
            var _this = this;
            var ranges = this._getSortedRanges();
            return ranges.map(function (range, index) {
                var style = range.styleSettings();
                if (!style) {
                    style = _this._getRangeIndexSettings(index);
                }
                return style;
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormatConditionRangeBase.prototype, "stopStyles", {
        get: function () {
            return this._getSortedRanges().filter(function (range) { return !!range.styleSettings(); }).map(function (range) { return range.styleSettings(); });
        },
        enumerable: true,
        configurable: true
    });
    FormatConditionRangeBase.prototype.getInfo = function () {
        return _format_condition_range_base_1.formatConditionRangeBaseSerializationsInfo;
    };
    FormatConditionRangeBase.prototype.isValid = function () {
        return _super.prototype.isValid.call(this);
    };
    FormatConditionRangeBase.prototype.isRange = function () {
        return true;
    };
    FormatConditionRangeBase.prototype.setValues = function (values) {
        var _this = this;
        if (values.length > this.rangeSet.ranges().length)
            throw new Error('The number of values exceeds the number of ranges.');
        var index = 0;
        values.forEach(function (v) { return _this.rangeSet.ranges()[index++].value.setValue(v, _format_rules_common_1.fieldTypes[_this.dataType()]); });
    };
    FormatConditionRangeBase.prototype.createStyleSettings = function (styleListItem) {
        return new appearance_settings_1.AppearanceSettings({ '@AppearanceType': styleListItem });
    };
    FormatConditionRangeBase.prototype._getSortedRanges = function () {
        return this.rangeSet.ranges();
    };
    FormatConditionRangeBase.prototype._getRangeIndexSettings = function (index) {
        return null;
    };
    return FormatConditionRangeBase;
}(format_condition_base_1.FormatConditionBase));
exports.FormatConditionRangeBase = FormatConditionRangeBase;


/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
var format_rules_common_1 = __webpack_require__(272);
exports.rangeValue = { propertyName: 'value', modelName: 'Value', displayName: 'DashboardStringId.CommandFormatRuleValue', type: format_rules_common_1.ComplexValue };
exports.rangeValueComparison = {
    propertyName: 'valueComparison', modelName: '@ValueComparison', displayName: 'DashboardWebStringId.ConditionalFormatting.ValueComparison', defaultVal: 'GreaterOrEqual', simpleFormAdapterItem: 'selectBoxEditor', values: {
        'Greater': '>',
        'GreaterOrEqual': '≥'
    }
};
exports.rangeInfoSerializationsInfo = [_base_metadata_1.itemType, exports.rangeValue, exports.rangeValueComparison];


/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _format_condition_range_base_1 = __webpack_require__(128);
exports.formatConditionRangeSetSerializationsInfo = _format_condition_range_base_1.formatConditionRangeBaseSerializationsInfo.concat([]);


/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var FormatConditionRangeSetPredefinedType;
(function (FormatConditionRangeSetPredefinedType) {
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["None"] = 0] = "None";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["Custom"] = 1] = "Custom";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["Arrows2"] = 2] = "Arrows2";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["Arrows3"] = 3] = "Arrows3";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["Arrows4"] = 4] = "Arrows4";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["Arrows5"] = 5] = "Arrows5";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["ArrowsGray2"] = 6] = "ArrowsGray2";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["ArrowsGray3"] = 7] = "ArrowsGray3";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["ArrowsGray4"] = 8] = "ArrowsGray4";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["ArrowsGray5"] = 9] = "ArrowsGray5";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["PositiveNegative3"] = 10] = "PositiveNegative3";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["Stars3"] = 11] = "Stars3";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["Quarters5"] = 12] = "Quarters5";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["Bars4"] = 13] = "Bars4";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["Bars5"] = 14] = "Bars5";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["Boxes5"] = 15] = "Boxes5";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["TrafficLights3"] = 16] = "TrafficLights3";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["Circles2"] = 17] = "Circles2";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["Circles3"] = 18] = "Circles3";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["Circles4"] = 19] = "Circles4";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["CirclesRedToBlack4"] = 20] = "CirclesRedToBlack4";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["Signs3"] = 21] = "Signs3";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["Symbols2"] = 22] = "Symbols2";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["Symbols3"] = 23] = "Symbols3";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["SymbolsCircled2"] = 24] = "SymbolsCircled2";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["SymbolsCircled3"] = 25] = "SymbolsCircled3";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["Flags3"] = 26] = "Flags3";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["ColorsPaleRedGreen"] = 27] = "ColorsPaleRedGreen";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["ColorsPaleRedGreenBlue"] = 28] = "ColorsPaleRedGreenBlue";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["ColorsPaleRedYellowGreenBlue"] = 29] = "ColorsPaleRedYellowGreenBlue";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["ColorsPaleRedOrangeYellowGreenBlue"] = 30] = "ColorsPaleRedOrangeYellowGreenBlue";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["ColorsRedGreen"] = 31] = "ColorsRedGreen";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["ColorsRedGreenBlue"] = 32] = "ColorsRedGreenBlue";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["ColorsRedYellowGreenBlue"] = 33] = "ColorsRedYellowGreenBlue";
    FormatConditionRangeSetPredefinedType[FormatConditionRangeSetPredefinedType["ColorsRedOrangeYellowGreenBlue"] = 34] = "ColorsRedOrangeYellowGreenBlue";
})(FormatConditionRangeSetPredefinedType = exports.FormatConditionRangeSetPredefinedType || (exports.FormatConditionRangeSetPredefinedType = {}));
var FormatConditionRangeGradientPredefinedType;
(function (FormatConditionRangeGradientPredefinedType) {
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["None"] = 0] = "None";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["Custom"] = 1] = "Custom";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["GreenWhite"] = 2] = "GreenWhite";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["WhiteGreen"] = 3] = "WhiteGreen";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["RedWhite"] = 4] = "RedWhite";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["WhiteRed"] = 5] = "WhiteRed";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["YellowGreen"] = 6] = "YellowGreen";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["GreenYellow"] = 7] = "GreenYellow";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["YellowRed"] = 8] = "YellowRed";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["RedYellow"] = 9] = "RedYellow";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["BlueWhite"] = 10] = "BlueWhite";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["WhiteBlue"] = 11] = "WhiteBlue";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["BlueRed"] = 12] = "BlueRed";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["RedBlue"] = 13] = "RedBlue";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["YellowBlue"] = 14] = "YellowBlue";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["BlueYellow"] = 15] = "BlueYellow";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["GreenBlue"] = 16] = "GreenBlue";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["BlueGreen"] = 17] = "BlueGreen";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["GreenWhiteBlue"] = 18] = "GreenWhiteBlue";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["BlueWhiteGreen"] = 19] = "BlueWhiteGreen";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["BlueWhiteRed"] = 20] = "BlueWhiteRed";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["RedWhiteBlue"] = 21] = "RedWhiteBlue";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["GreenWhiteRed"] = 22] = "GreenWhiteRed";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["RedWhiteGreen"] = 23] = "RedWhiteGreen";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["GreenYellowRed"] = 24] = "GreenYellowRed";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["RedYellowGreen"] = 25] = "RedYellowGreen";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["BlueYellowRed"] = 26] = "BlueYellowRed";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["RedYellowBlue"] = 27] = "RedYellowBlue";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["GreenYellowBlue"] = 28] = "GreenYellowBlue";
    FormatConditionRangeGradientPredefinedType[FormatConditionRangeGradientPredefinedType["BlueYellowGreen"] = 29] = "BlueYellowGreen";
})(FormatConditionRangeGradientPredefinedType = exports.FormatConditionRangeGradientPredefinedType || (exports.FormatConditionRangeGradientPredefinedType = {}));
var FormatConditionIconGroups;
(function (FormatConditionIconGroups) {
    FormatConditionIconGroups[FormatConditionIconGroups["Directional"] = 0] = "Directional";
    FormatConditionIconGroups[FormatConditionIconGroups["Indicators"] = 1] = "Indicators";
    FormatConditionIconGroups[FormatConditionIconGroups["Flags"] = 2] = "Flags";
    FormatConditionIconGroups[FormatConditionIconGroups["Shapes"] = 3] = "Shapes";
    FormatConditionIconGroups[FormatConditionIconGroups["RatingsMonochrome"] = 4] = "RatingsMonochrome";
    FormatConditionIconGroups[FormatConditionIconGroups["RatingsColor"] = 5] = "RatingsColor";
})(FormatConditionIconGroups = exports.FormatConditionIconGroups || (exports.FormatConditionIconGroups = {}));
var FormatConditionRangeSetTypeGroups;
(function (FormatConditionRangeSetTypeGroups) {
    FormatConditionRangeSetTypeGroups[FormatConditionRangeSetTypeGroups["Ranges2"] = 0] = "Ranges2";
    FormatConditionRangeSetTypeGroups[FormatConditionRangeSetTypeGroups["Ranges3"] = 1] = "Ranges3";
    FormatConditionRangeSetTypeGroups[FormatConditionRangeSetTypeGroups["Ranges4"] = 2] = "Ranges4";
    FormatConditionRangeSetTypeGroups[FormatConditionRangeSetTypeGroups["Ranges5"] = 3] = "Ranges5";
})(FormatConditionRangeSetTypeGroups || (FormatConditionRangeSetTypeGroups = {}));
var FormatConditionRangeGradientTypeGroups;
(function (FormatConditionRangeGradientTypeGroups) {
    FormatConditionRangeGradientTypeGroups[FormatConditionRangeGradientTypeGroups["TwoColors"] = 0] = "TwoColors";
    FormatConditionRangeGradientTypeGroups[FormatConditionRangeGradientTypeGroups["ThreeColors"] = 1] = "ThreeColors";
})(FormatConditionRangeGradientTypeGroups || (FormatConditionRangeGradientTypeGroups = {}));
var FormatConditionConverter = (function () {
    function FormatConditionConverter() {
    }
    FormatConditionConverter.getStyleList = function (type) {
        var styleList = {};
        var iconTypes = FormatConditionConverter.toIconTypes(type);
        if (iconTypes) {
            styleList.list = iconTypes;
            styleList.isIcon = true;
        }
        else {
            styleList.list = FormatConditionConverter.toColorTypes(type);
            styleList.isIcon = false;
        }
        return styleList;
    };
    FormatConditionConverter.toColorTypes = function (colorRangeSetType) {
        switch (colorRangeSetType) {
            case FormatConditionRangeSetPredefinedType.ColorsPaleRedGreen:
                return ['PaleRed', 'PaleGreen'];
            case FormatConditionRangeSetPredefinedType.ColorsPaleRedGreenBlue:
                return ['PaleRed', 'PaleGreen', 'PaleBlue'];
            case FormatConditionRangeSetPredefinedType.ColorsPaleRedYellowGreenBlue:
                return ['PaleRed', 'PaleYellow', 'PaleGreen', 'PaleBlue'];
            case FormatConditionRangeSetPredefinedType.ColorsPaleRedOrangeYellowGreenBlue:
                return ['PaleRed', 'PaleOrange', 'PaleYellow', 'PaleGreen', 'PaleBlue'];
            case FormatConditionRangeSetPredefinedType.ColorsRedGreen:
                return ['Red', 'Green'];
            case FormatConditionRangeSetPredefinedType.ColorsRedGreenBlue:
                return ['Red', 'Green', 'Blue'];
            case FormatConditionRangeSetPredefinedType.ColorsRedYellowGreenBlue:
                return ['Red', 'Yellow', 'Green', 'Blue'];
            case FormatConditionRangeSetPredefinedType.ColorsRedOrangeYellowGreenBlue:
                return ['Red', 'Orange', 'Yellow', 'Green', 'Blue'];
            default:
                return null;
        }
    };
    FormatConditionConverter.toIconTypes = function (iconRangeSetType) {
        switch (iconRangeSetType) {
            case FormatConditionRangeSetPredefinedType.Arrows2:
                return ['DirectionalRedDownArrow', 'DirectionalGreenArrowUp'];
            case FormatConditionRangeSetPredefinedType.Arrows3:
                return ['DirectionalRedDownArrow', 'DirectionalYellowSideArrow', 'DirectionalGreenArrowUp'];
            case FormatConditionRangeSetPredefinedType.Arrows4:
                return ['DirectionalRedDownArrow', 'DirectionalYellowDownInclineArrow', 'DirectionalYellowUpInclineArrow', 'DirectionalGreenArrowUp'];
            case FormatConditionRangeSetPredefinedType.Arrows5:
                return ['DirectionalRedDownArrow', 'DirectionalYellowDownInclineArrow', 'DirectionalYellowSideArrow', 'DirectionalYellowUpInclineArrow', 'DirectionalGreenArrowUp'];
            case FormatConditionRangeSetPredefinedType.ArrowsGray2:
                return ['DirectionalGrayDownArrow', 'DirectionalGrayArrowUp'];
            case FormatConditionRangeSetPredefinedType.ArrowsGray3:
                return ['DirectionalGrayDownArrow', 'DirectionalGraySideArrow', 'DirectionalGrayArrowUp'];
            case FormatConditionRangeSetPredefinedType.ArrowsGray4:
                return ['DirectionalGrayDownArrow', 'DirectionalGrayDownInclineArrow', 'DirectionalGrayUpInclineArrow', 'DirectionalGrayArrowUp'];
            case FormatConditionRangeSetPredefinedType.ArrowsGray5:
                return ['DirectionalGrayDownArrow', 'DirectionalGrayDownInclineArrow', 'DirectionalGraySideArrow', 'DirectionalGrayUpInclineArrow', 'DirectionalGrayArrowUp'];
            case FormatConditionRangeSetPredefinedType.PositiveNegative3:
                return ['DirectionalRedTriangleDown', 'DirectionalYellowDash', 'DirectionalGreenTriangleUp'];
            case FormatConditionRangeSetPredefinedType.Stars3:
                return ['RatingEmptyGrayStar', 'RatingHalfGrayStar', 'RatingFullGrayStar'];
            case FormatConditionRangeSetPredefinedType.Quarters5:
                return ['RatingEmptyGrayCircle', 'Rating3QuartersGrayCircle', 'Rating2QuartersGrayCircle', 'Rating1QuarterGrayCircle', 'RatingFullGrayCircle'];
            case FormatConditionRangeSetPredefinedType.Bars4:
                return ['Rating1Bar', 'Rating2Bars', 'Rating3Bars', 'Rating4Bars'];
            case FormatConditionRangeSetPredefinedType.Bars5:
                return ['Rating0Bars', 'Rating1Bar', 'Rating2Bars', 'Rating3Bars', 'Rating4Bars'];
            case FormatConditionRangeSetPredefinedType.Boxes5:
                return ['Rating0FilledBoxes', 'Rating1FilledBox', 'Rating2FilledBoxes', 'Rating3FilledBoxes', 'Rating4FilledBoxes'];
            case FormatConditionRangeSetPredefinedType.TrafficLights3:
                return ['ShapeRedTrafficLight', 'ShapeYellowTrafficLight', 'ShapeGreenTrafficLight'];
            case FormatConditionRangeSetPredefinedType.Circles2:
                return ['ShapeRedCircle', 'ShapeGreenCircle'];
            case FormatConditionRangeSetPredefinedType.Circles3:
                return ['ShapeRedCircle', 'ShapeYellowCircle', 'ShapeGreenCircle'];
            case FormatConditionRangeSetPredefinedType.Circles4:
                return ['RatingFullGrayCircle', 'ShapeRedCircle', 'ShapeYellowCircle', 'ShapeGreenCircle'];
            case FormatConditionRangeSetPredefinedType.CirclesRedToBlack4:
                return ['RatingFullGrayCircle', 'ShapeLightGrayCircle', 'ShapeLightRedCircle', 'ShapeRedCircle'];
            case FormatConditionRangeSetPredefinedType.Signs3:
                return ['ShapeRedDiamond', 'ShapeYellowTriangle', 'ShapeGreenCircle'];
            case FormatConditionRangeSetPredefinedType.Symbols2:
                return ['IndicatorRedCross', 'IndicatorGreenCheck'];
            case FormatConditionRangeSetPredefinedType.Symbols3:
                return ['IndicatorRedCross', 'IndicatorYellowExclamation', 'IndicatorGreenCheck'];
            case FormatConditionRangeSetPredefinedType.SymbolsCircled2:
                return ['IndicatorCircledRedCross', 'IndicatorCircledGreenCheck'];
            case FormatConditionRangeSetPredefinedType.SymbolsCircled3:
                return ['IndicatorCircledRedCross', 'IndicatorCircledYellowExclamation', 'IndicatorCircledGreenCheck'];
            case FormatConditionRangeSetPredefinedType.Flags3:
                return ['IndicatorRedFlag', 'IndicatorYellowFlag', 'IndicatorGreenFlag'];
            default:
                return null;
        }
    };
    FormatConditionConverter.toAppearanceTypes = function (gradientType) {
        switch (gradientType) {
            case FormatConditionRangeGradientPredefinedType.GreenWhite:
                return ['GradientGreen', 'GradientTransparent'];
            case FormatConditionRangeGradientPredefinedType.WhiteGreen:
                return ['GradientTransparent', 'GradientGreen'];
            case FormatConditionRangeGradientPredefinedType.RedWhite:
                return ['GradientRed', 'GradientTransparent'];
            case FormatConditionRangeGradientPredefinedType.WhiteRed:
                return ['GradientTransparent', 'GradientRed'];
            case FormatConditionRangeGradientPredefinedType.GreenYellow:
                return ['GradientGreen', 'GradientYellow'];
            case FormatConditionRangeGradientPredefinedType.YellowGreen:
                return ['GradientYellow', 'GradientGreen'];
            case FormatConditionRangeGradientPredefinedType.RedYellow:
                return ['GradientRed', 'GradientYellow'];
            case FormatConditionRangeGradientPredefinedType.YellowRed:
                return ['GradientYellow', 'GradientRed'];
            case FormatConditionRangeGradientPredefinedType.BlueWhite:
                return ['GradientBlue', 'GradientTransparent'];
            case FormatConditionRangeGradientPredefinedType.WhiteBlue:
                return ['GradientTransparent', 'GradientBlue'];
            case FormatConditionRangeGradientPredefinedType.BlueRed:
                return ['GradientBlue', 'GradientRed'];
            case FormatConditionRangeGradientPredefinedType.RedBlue:
                return ['GradientRed', 'GradientBlue'];
            case FormatConditionRangeGradientPredefinedType.BlueYellow:
                return ['GradientBlue', 'GradientYellow'];
            case FormatConditionRangeGradientPredefinedType.YellowBlue:
                return ['GradientYellow', 'GradientBlue'];
            case FormatConditionRangeGradientPredefinedType.BlueGreen:
                return ['GradientBlue', 'GradientGreen'];
            case FormatConditionRangeGradientPredefinedType.GreenBlue:
                return ['GradientGreen', 'GradientBlue'];
            case FormatConditionRangeGradientPredefinedType.GreenWhiteBlue:
                return ['GradientGreen', 'GradientTransparent', 'GradientBlue'];
            case FormatConditionRangeGradientPredefinedType.BlueWhiteGreen:
                return ['GradientBlue', 'GradientTransparent', 'GradientGreen'];
            case FormatConditionRangeGradientPredefinedType.RedWhiteBlue:
                return ['GradientRed', 'GradientTransparent', 'GradientBlue'];
            case FormatConditionRangeGradientPredefinedType.BlueWhiteRed:
                return ['GradientBlue', 'GradientTransparent', 'GradientRed'];
            case FormatConditionRangeGradientPredefinedType.GreenWhiteRed:
                return ['GradientGreen', 'GradientTransparent', 'GradientRed'];
            case FormatConditionRangeGradientPredefinedType.RedWhiteGreen:
                return ['GradientRed', 'GradientTransparent', 'GradientGreen'];
            case FormatConditionRangeGradientPredefinedType.GreenYellowRed:
                return ['GradientGreen', 'GradientYellow', 'GradientRed'];
            case FormatConditionRangeGradientPredefinedType.RedYellowGreen:
                return ['GradientRed', 'GradientYellow', 'GradientGreen'];
            case FormatConditionRangeGradientPredefinedType.BlueYellowRed:
                return ['GradientBlue', 'GradientYellow', 'GradientRed'];
            case FormatConditionRangeGradientPredefinedType.RedYellowBlue:
                return ['GradientRed', 'GradientYellow', 'GradientBlue'];
            case FormatConditionRangeGradientPredefinedType.GreenYellowBlue:
                return ['GradientGreen', 'GradientYellow', 'GradientBlue'];
            case FormatConditionRangeGradientPredefinedType.BlueYellowGreen:
                return ['GradientBlue', 'GradientYellow', 'GradientGreen'];
            default:
                return null;
        }
    };
    FormatConditionConverter.toGroupIconTypes = function (iconsGroup) {
        switch (iconsGroup) {
            case FormatConditionIconGroups.Directional:
                return ['DirectionalGreenArrowUp',
                    'DirectionalYellowUpInclineArrow',
                    'DirectionalYellowSideArrow',
                    'DirectionalYellowDownInclineArrow',
                    'DirectionalRedDownArrow',
                    'DirectionalGrayArrowUp',
                    'DirectionalGrayUpInclineArrow',
                    'DirectionalGraySideArrow',
                    'DirectionalGrayDownInclineArrow',
                    'DirectionalGrayDownArrow',
                    'DirectionalYellowDash',
                    'DirectionalRedTriangleDown',
                    'DirectionalGreenTriangleUp'];
            case FormatConditionIconGroups.RatingsMonochrome:
                return ['RatingFullGrayCircle',
                    'Rating1QuarterGrayCircle',
                    'Rating2QuartersGrayCircle',
                    'Rating3QuartersGrayCircle',
                    'RatingEmptyGrayCircle',
                    'RatingFullGrayStar',
                    'RatingHalfGrayStar',
                    'RatingEmptyGrayStar'];
            case FormatConditionIconGroups.RatingsColor:
                return ['Rating4Bars',
                    'Rating3Bars',
                    'Rating2Bars',
                    'Rating1Bar',
                    'Rating0Bars',
                    'Rating4FilledBoxes',
                    'Rating3FilledBoxes',
                    'Rating2FilledBoxes',
                    'Rating1FilledBox',
                    'Rating0FilledBoxes'];
            case FormatConditionIconGroups.Indicators:
                return ['IndicatorGreenCheck',
                    'IndicatorYellowExclamation',
                    'IndicatorRedCross',
                    'IndicatorCircledGreenCheck',
                    'IndicatorCircledYellowExclamation',
                    'IndicatorCircledRedCross',
                    'ShapeYellowTriangle',
                    'ShapeRedDiamond'];
            case FormatConditionIconGroups.Flags:
                return ['IndicatorGreenFlag',
                    'IndicatorYellowFlag',
                    'IndicatorRedFlag'];
            case FormatConditionIconGroups.Shapes:
                return ['ShapeGreenTrafficLight',
                    'ShapeYellowTrafficLight',
                    'ShapeRedTrafficLight',
                    'ShapeGreenCircle',
                    'ShapeYellowCircle',
                    'ShapeRedCircle',
                    'ShapeLightRedCircle',
                    'ShapeLightGrayCircle'];
            default:
                throw new Error('Undefined icon group type');
        }
    };
    return FormatConditionConverter;
}());
exports.FormatConditionConverter = FormatConditionConverter;


/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var appearance_settings_1 = __webpack_require__(67);
var range_index_settings_1 = __webpack_require__(450);
var format_condition_range_base_1 = __webpack_require__(274);
var _format_condition_range_gradient_1 = __webpack_require__(187);
var range_generator_1 = __webpack_require__(84);
var range_info_1 = __webpack_require__(186);
var FormatConditionRangeGradient = (function (_super) {
    __extends(FormatConditionRangeGradient, _super);
    function FormatConditionRangeGradient(modelJson, serializer) {
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.getSpecificType = function () { return _this.getActualPredefinedType(); };
        _this.setSpecificType = function (specificType) { return _this.setActualPredefinedType(specificType); };
        _this.segmentNumber = ko.computed({
            read: function () { return _this.rangeSet.ranges().length; },
            write: function (value) {
                _this._generateByDefault(value);
            }
        });
        return _this;
    }
    FormatConditionRangeGradient.isGradientStop = function (predefined, color) {
        return predefined == 'Custom' && !!color || predefined != 'None' && predefined.indexOf('Gradient') != -1;
    };
    FormatConditionRangeGradient.prototype.isGradient = function () {
        return true;
    };
    FormatConditionRangeGradient.prototype.getInfo = function () {
        return _format_condition_range_gradient_1.formatConditionRangeGradientSerializationsInfo;
    };
    FormatConditionRangeGradient.prototype.getActualPredefinedType = function () {
        return range_generator_1.FormatConditionRangeGenerator.getGradientPredefinedType(this.actualStyles, function (type) {
            var c = new FormatConditionRangeGradient();
            range_generator_1.FormatConditionRangeGenerator.generateGradientByType(c, type, 10);
            return c;
        });
    };
    FormatConditionRangeGradient.prototype.setActualPredefinedType = function (type) {
        range_generator_1.FormatConditionRangeGenerator.generateGradientByType(this, type, 10);
    };
    FormatConditionRangeGradient.prototype._generateByDefault = function (segmentNumber) {
        range_generator_1.FormatConditionRangeGenerator.generateGradientByStyles(this, this.stopStyles, segmentNumber);
    };
    FormatConditionRangeGradient.prototype.generateAsPercent = function (startStyle, endStyle, segmentNumber) {
        if (segmentNumber >= this.stopStyles.length) {
            this.valueType('Percent');
            this._generate(startStyle, endStyle, segmentNumber);
            this.setValues(range_generator_1.FormatConditionRangeGenerator.calculateRangePercentValues(segmentNumber));
        }
    };
    FormatConditionRangeGradient.prototype.generateAsNumber = function (startStyle, endStyle, values) {
        var segmentNumber = values.length;
        if (segmentNumber >= this.stopStyles.length) {
            this.valueType('Number');
            this._generate(startStyle, endStyle, segmentNumber);
            this.setValues(values);
        }
    };
    FormatConditionRangeGradient.prototype._getRangeIndexSettings = function (index) {
        return new range_index_settings_1.RangeIndexSettings(index);
    };
    FormatConditionRangeGradient.prototype._getSortedRanges = function () {
        var ranges = this.rangeSet.ranges();
        ranges.sort(function (a, b) {
            var aValue = a.value.value(), bValue = b.value.value();
            var c = range_generator_1.FormatConditionRangeGenerator.compareValues(aValue, bValue, true);
            if (c != 0)
                return c;
            if (a.valueComparison() == b.valueComparison())
                return 0;
            if (a.valueComparison() == 'Greater')
                return 1;
            return -1;
        });
        return ranges;
    };
    FormatConditionRangeGradient.prototype._generate = function (startStyle, endStyle, rangeCount) {
        var ranges = [];
        for (var i = 0; i < rangeCount; i++) {
            ranges.push(new range_info_1.RangeInfo());
        }
        ranges[0].styleSettings(this._validateStyle(startStyle));
        ranges[ranges.length - 1].styleSettings(this._validateStyle(endStyle));
        this.rangeSet.ranges(ranges);
    };
    FormatConditionRangeGradient.prototype._isGradientStop = function (style) {
        if (style instanceof appearance_settings_1.AppearanceSettings) {
            return FormatConditionRangeGradient.isGradientStop(style.appearanceType(), style.backColor());
        }
        else {
            return false;
        }
    };
    FormatConditionRangeGradient.prototype._validateStyle = function (style) {
        if (!this._isGradientStop(style))
            throw new Error("Use colors with the 'Gradient' prefix from the FormatConditionAppearanceType enumeration to initialize the AppearanceSettings.appearanceType property or set the AppearanceSettings.appearanceType property to 'Custom' and specify the AppearanceSettings.backColor property.");
        return style;
    };
    return FormatConditionRangeGradient;
}(format_condition_range_base_1.FormatConditionRangeBase));
exports.FormatConditionRangeGradient = FormatConditionRangeGradient;


/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _dashboard_item_format_rule_1 = __webpack_require__(52);
exports.layoutItemApplyTo = { propertyName: 'layoutItemApplyTo', modelName: '@LayoutItemApplyTo', displayName: 'DashboardStringId.FormatRuleApplyTo', defaultVal: 'Title' };
exports.cardItemFormatRuleSerializationsInfoBase = _dashboard_item_format_rule_1.dashboardItemFormatRuleSerializationsInfo.concat([exports.layoutItemApplyTo]);


/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var cells_item_format_rule_1 = __webpack_require__(188);
var _grid_item_format_rule_1 = __webpack_require__(455);
var GridItemFormatRule = (function (_super) {
    __extends(GridItemFormatRule, _super);
    function GridItemFormatRule(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    GridItemFormatRule.prototype.getInfo = function () {
        return _grid_item_format_rule_1.gridItemFormatRuleSerializationsInfo;
    };
    GridItemFormatRule.prototype._getDefaultItemType = function () {
        return 'GridItemFormatRule';
    };
    return GridItemFormatRule;
}(cells_item_format_rule_1.CellsItemFormatRule));
exports.GridItemFormatRule = GridItemFormatRule;


/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var cells_item_format_rule_1 = __webpack_require__(188);
var _pivot_item_format_rule_1 = __webpack_require__(282);
var PivotItemFormatRule = (function (_super) {
    __extends(PivotItemFormatRule, _super);
    function PivotItemFormatRule(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    PivotItemFormatRule.prototype.getInfo = function () {
        return _pivot_item_format_rule_1.pivotItemFormatRuleSerializationsInfo;
    };
    PivotItemFormatRule.prototype._getDefaultItemType = function () {
        return 'PivotItemFormatRule';
    };
    return PivotItemFormatRule;
}(cells_item_format_rule_1.CellsItemFormatRule));
exports.PivotItemFormatRule = PivotItemFormatRule;


/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
var pivot_item_format_rule_level_1 = __webpack_require__(456);
var _cells_item_format_rule_1 = __webpack_require__(85);
exports.applyToColumn = { propertyName: 'applyToColumn', modelName: '@ApplyToColumn', displayName: 'DashboardStringId.FormatRuleApplyToColumn', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.intersectionLevelModeValues = {
    'Auto': 'DashboardStringId.IntersectionLevelModeAuto',
    'FirstLevel': 'DashboardStringId.IntersectionLevelModeFirst',
    'LastLevel': 'DashboardStringId.IntersectionLevelModeLast',
    'AllLevels': 'DashboardStringId.IntersectionLevelModeAll',
    'SpecificLevel': 'DashboardStringId.IntersectionLevelModeSpecific'
};
exports.restrictedIntersectionLevelModeValues = __assign({}, exports.intersectionLevelModeValues);
delete exports.restrictedIntersectionLevelModeValues['AllLevels'];
exports.intersectionLevelMode = {
    propertyName: 'intersectionLevelMode', modelName: '@IntersectionLevelMode', displayName: 'DashboardWebStringId.ConditionalFormatting.IntersectionLevelMode', defaultVal: 'Auto'
};
exports.pivotLevel = { propertyName: 'level', modelName: 'PivotItemFormatRuleLevel', type: pivot_item_format_rule_level_1.PivotItemFormatRuleLevel };
exports.pivotItemFormatRuleSerializationsInfo = _cells_item_format_rule_1.cellsItemFormatRuleSerializationsInfo.concat([exports.applyToColumn, exports.intersectionLevelMode, exports.pivotLevel]);


/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.pivotLevelColumn = { propertyName: 'column', modelName: '@Column', displayName: 'DashboardWebStringId.ConditionalFormatting.IntersectionColumnDimension', simpleFormAdapterItem: 'selectBoxEditor' };
exports.pivotLevelRow = { propertyName: 'row', modelName: '@Row', displayName: 'DashboardWebStringId.ConditionalFormatting.IntersectionRowDimension', simpleFormAdapterItem: 'selectBoxEditor' };
exports.pivotItemFormatRuleLevelSerializationsInfo = [exports.pivotLevelColumn, exports.pivotLevelRow];


/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _base_metadata_1 = __webpack_require__(4);
var categoriesCompatibilityInfo = {};
categoriesCompatibilityInfo[_base_metadata_1.PropertyCategory.Initialize] = [_base_metadata_1.PropertyCategory.Data, _base_metadata_1.PropertyCategory.Initialize, _base_metadata_1.PropertyCategory.Interactivity, _base_metadata_1.PropertyCategory.ClientState, _base_metadata_1.PropertyCategory.Coloring];
categoriesCompatibilityInfo[_base_metadata_1.PropertyCategory.Data] = [_base_metadata_1.PropertyCategory.Data, _base_metadata_1.PropertyCategory.Initialize, _base_metadata_1.PropertyCategory.Interactivity, _base_metadata_1.PropertyCategory.ClientState, _base_metadata_1.PropertyCategory.Coloring];
categoriesCompatibilityInfo[_base_metadata_1.PropertyCategory.Interactivity] = [_base_metadata_1.PropertyCategory.Data, _base_metadata_1.PropertyCategory.Initialize, _base_metadata_1.PropertyCategory.Interactivity, _base_metadata_1.PropertyCategory.ClientState, _base_metadata_1.PropertyCategory.Coloring];
categoriesCompatibilityInfo[_base_metadata_1.PropertyCategory.ClientState] = [_base_metadata_1.PropertyCategory.Data, _base_metadata_1.PropertyCategory.Initialize, _base_metadata_1.PropertyCategory.Interactivity, _base_metadata_1.PropertyCategory.ClientState, _base_metadata_1.PropertyCategory.Coloring];
categoriesCompatibilityInfo[_base_metadata_1.PropertyCategory.Coloring] = [_base_metadata_1.PropertyCategory.Data, _base_metadata_1.PropertyCategory.Initialize, _base_metadata_1.PropertyCategory.Interactivity, _base_metadata_1.PropertyCategory.ClientState, _base_metadata_1.PropertyCategory.Coloring];
var localProcessedCategories = [_base_metadata_1.PropertyCategory.ViewModel];
var categoryContentNames = {
    Data: 'data',
    Initialize: 'data',
    Interactivity: 'data',
    ClientState: 'data',
    Map: 'map',
    ViewModel: 'viewModel',
};
function getCategoryContentName(category) {
    var catName = _base_metadata_1.PropertyCategory[category];
    return categoryContentNames[catName] || 'data';
}
exports.getCategoryContentName = getCategoryContentName;
var PaneContentHolder = (function () {
    function PaneContentHolder() {
        var _this = this;
        this._content = ko.observableArray();
        this.valid = ko.computed(function () {
            return _this._content().length && _this._content().filter(function (content) { return content.requestsInProgress() !== 0 || !content.content(); }).length === 0;
        });
    }
    PaneContentHolder.prototype._getContentInfo = function (category) {
        var compatibleCategories = this.getCompatibleCategories(category);
        var catName = getCategoryContentName(compatibleCategories[0]);
        var content = this._content().filter(function (contentItem) { return contentItem.category === catName; })[0];
        if (!content) {
            content = {
                category: catName,
                content: ko.observable(),
                requestsInProgress: ko.observable(0),
                needAnotherRequest: false
            };
            this._content.push(content);
        }
        return content;
    };
    PaneContentHolder.prototype.getContent = function (category) {
        return this._getContentInfo(category).content();
    };
    PaneContentHolder.prototype.isValid = function (category) {
        var content = this._getContentInfo(category);
        return content.requestsInProgress() === 0 && !!content.content();
    };
    PaneContentHolder.prototype.isWaitingForContent = function (category) {
        var contents = category ? [this._getContentInfo(category)] : this._content();
        return contents.some(function (content) { return content.requestsInProgress() !== 0; });
    };
    PaneContentHolder.prototype.getCompatibleCategories = function (category) {
        return categoriesCompatibilityInfo[category] || [category];
    };
    PaneContentHolder.prototype.needRequestContentFromServer = function (category) {
        return localProcessedCategories.indexOf(category) === -1;
    };
    PaneContentHolder.prototype.itemChanged = function (category) {
        var content = this._getContentInfo(category);
        content.needAnotherRequest = this.isWaitingForContent(category);
        content.content(undefined);
    };
    PaneContentHolder.prototype.beginRequest = function (category) {
        var content = this._getContentInfo(category);
        content.requestsInProgress(content.requestsInProgress() + 1);
    };
    PaneContentHolder.prototype.endRequest = function (args) {
        var content = this._getContentInfo(args.category);
        if (!content.needAnotherRequest) {
            content.content(args.response);
        }
        content.needAnotherRequest = false;
        content.requestsInProgress(content.requestsInProgress() - 1);
    };
    return PaneContentHolder;
}());
exports.PaneContentHolder = PaneContentHolder;


/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _knockout_utils_1 = __webpack_require__(17);
exports._subscribeToDimension = function (dimension, dateTimePeriods) {
    _knockout_utils_1.safeSubscribe({
        dimension: dimension,
        dateTimePeriods: dateTimePeriods
    }, function (args) {
        var subscriptions = args.dimension ?
            args.dateTimePeriods.map(function (curPeriod) { return curPeriod._subscribeToGroupInterval(args.dimension); }) : [];
        return { dispose: function () { subscriptions.forEach(function (s) { return s.dispose(); }); } };
    });
};


/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
var _dashboard_item_1 = __webpack_require__(74);
var interactivity_options_1 = __webpack_require__(32);
exports.showItemAsTabPage = { propertyName: 'showItemAsTabPage', modelName: '@ShowItemAsTabPage', displayName: 'DashboardWebStringId.DisplayItemAsPage', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool, category: _base_metadata_1.PropertyCategory.ViewModel };
exports.tabPageSerializationInfo = _dashboard_item_1.dashboardItemSerializationsInfo.concat([interactivity_options_1._tabItemInteractivityOptions, exports.showItemAsTabPage]);


/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
exports.dashboardItem = { propertyName: 'dashboardItem', modelName: '@DashboardItem' };
exports.orientation = { propertyName: 'orientation', modelName: '@Orientation', displayName: 'DashboardWebStringId.Chart.Orientation', defaultVal: 'Horizontal', simpleFormAdapterItem: 'textBoxEditor' };
exports.layoutWeight = { propertyName: 'weight', modelName: '@Weight', defaultVal: 1, displayName: 'DashboardStringId.WeightCaption', simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel };
exports.layoutItemsSerializable = { propertyName: 'childNodes', modelName: 'LayoutItems', displayName: 'DashboardWebStringId.Dashboard.LayoutItems', array: true };
exports.layoutItemSerializationsInfo = [_base_metadata_1.itemType, exports.layoutWeight, exports.orientation, exports.layoutItemsSerializable, exports.dashboardItem];


/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
var _measure_calculation_1 = __webpack_require__(82);
exports.summaryType = {
    propertyName: 'summaryType', modelName: '@SummaryType', displayName: 'DashboardWebStringId.SummaryType', defaultVal: 'Sum', simpleFormAdapterItem: 'selectBoxEditor', values: {
        'Count': 'DashboardStringId.SummaryTypeCount',
        'Sum': 'DashboardStringId.SummaryTypeSum',
        'Min': 'DashboardStringId.SummaryTypeMin',
        'Max': 'DashboardStringId.SummaryTypeMax',
        'Average': 'DashboardStringId.SummaryTypeAverage',
        'StdDev': 'DashboardStringId.SummaryTypeStdDev',
        'StdDevp': 'DashboardStringId.SummaryTypeStdDevp',
        'Var': 'DashboardStringId.SummaryTypeVar',
        'Varp': 'DashboardStringId.SummaryTypeVarp',
        'CountDistinct': 'DashboardStringId.SummaryTypeCountDistinct',
        'Median': 'DashboardStringId.SummaryTypeMedian',
        'Mode': 'DashboardStringId.SummaryTypeMode'
    }
};
exports.previousValuesCount = { propertyName: 'previousValuesCount', modelName: '@PreviousValuesCount', displayName: 'DashboardWebStringId.Calculations.PreviousValuesCount', defaultVal: 2, simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel };
exports.nextValuesCount = { propertyName: 'nextValuesCount', modelName: '@NextValuesCount', displayName: 'DashboardWebStringId.Calculations.NextValuesCount', defaultVal: 0, simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel };
exports.movingCalculationSerializationsInfo = _measure_calculation_1.measureCalculationSerializationsInfo.concat([exports.summaryType, exports.previousValuesCount, exports.nextValuesCount]);


/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
exports.calcFieldDataMember = { propertyName: 'dataMember', modelName: '@DataMember' };
exports.calcFieldExpression = { propertyName: 'expression', modelName: '@Expression', defaultVal: '' };
exports.calcFieldExpressionEditable = { propertyName: 'expressionEditable', displayName: 'DashboardStringId.CalculationTypeExpression' };
exports.calculatedFieldType = {
    propertyName: 'fieldType', modelName: '@DataType', displayName: 'DevExpressWebStringId.CalculatedFieldDataType', defaultVal: 'String', simpleFormAdapterItem: 'selectBoxEditor', values: {
        'Auto': 'DashboardStringId.CalculatedFieldTypeAuto',
        'String': 'DashboardStringId.CalculatedFieldTypeString',
        'Integer': 'DashboardStringId.CalculatedFieldTypeLong',
        'Double': 'DashboardStringId.CalculatedFieldTypeDouble',
        'Decimal': 'DashboardStringId.CalculatedFieldTypeDecimal',
        'Boolean': 'DashboardStringId.CalculatedFieldTypeBoolean',
        'DateTime': 'DashboardStringId.CalculatedFieldTypeDateTime',
        'Object': 'DashboardStringId.CalculatedFieldTypeObject'
    }
};
exports.calculatedFieldSerializationsInfo = [_base_metadata_1.itemType, _base_metadata_1.name, exports.calcFieldExpression, exports.calculatedFieldType, exports.calcFieldDataMember];


/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
var _kpi_element_1 = __webpack_require__(192);
var delta_options_1 = __webpack_require__(132);
var sparkline_options_1 = __webpack_require__(291);
exports.cardDeltaOptions = { propertyName: 'cardDeltaOptions', modelName: 'CardDeltaOptions', displayName: 'DashboardWebStringId.Grid.DeltaOptions', type: delta_options_1.CardDeltaOptions };
exports.cardSparklineOptions = { propertyName: 'sparklineOptions', modelName: 'SparklineOptions', displayName: 'DashboardWebStringId.Card.SparklineOptions', type: sparkline_options_1.SparklineOptions };
exports.showSparkline = { propertyName: 'showSparkline', modelName: '@ShowStartEndValues', displayName: 'DashboardWebStringId.Card.SparklineVisible', defaultVal: true, simpleFormAdapterItem: 'yesNoButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.layoutTemplate = { propertyName: 'layoutTemplate', modelName: 'LayoutTemplate' };
exports.cardSerializationsInfo = _kpi_element_1.kpiElementSerializationsInfo.concat([exports.cardDeltaOptions, exports.cardSparklineOptions, exports.showSparkline, exports.layoutTemplate]);


/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var serializable_model_1 = __webpack_require__(5);
var _sparkline_options_1 = __webpack_require__(193);
var SparklineOptions = (function (_super) {
    __extends(SparklineOptions, _super);
    function SparklineOptions(JSON, serializer) {
        if (JSON === void 0) { JSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, JSON, serializer) || this;
    }
    SparklineOptions.prototype.getInfo = function () {
        return _sparkline_options_1.sparklineOptionsSerializationsInfo;
    };
    return SparklineOptions;
}(serializable_model_1.SerializableModel));
exports.SparklineOptions = SparklineOptions;


/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
exports.vAlignment = { propertyName: 'vAlignment', modelName: '@VAlignment' };
exports.indent = { propertyName: 'indent', modelName: '@Indent' };
exports.cardRowBaseSerializationInfo = [exports.vAlignment, exports.indent, _base_metadata_1.itemType];
exports.elements = { propertyName: 'elements', modelName: 'CardRowElements', array: true };
exports.cardRowSerializationInfo = exports.cardRowBaseSerializationInfo.concat([exports.elements]);
exports.height = { propertyName: 'height', modelName: '@Height' };
exports.cardSparklineRowOptions = { propertyName: 'sparklineOptions', modelName: 'sparklineOptions' };
exports.cardSparklineRowSerializationInfo = exports.cardRowBaseSerializationInfo.concat([exports.height, exports.cardSparklineRowOptions]);


/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
exports.cardRowElementTypeValuesMapBase = {
    'Title': 'DashboardStringId.CardRowDataElementTypeTitleCaption',
    'Subtitle': 'DashboardStringId.CardRowDataElementTypeSubtitleCaption',
    'ActualValue': 'DashboardStringId.CardRowDataElementTypeActualValueCaption',
    'TargetValue': 'DashboardStringId.CardRowDataElementTypeTargetValueCaption',
    'AbsoluteVariation': 'DashboardStringId.CardRowDataElementTypeAbsoluteVariationCaption',
    'PercentVariation': 'DashboardStringId.CardRowDataElementTypePercentVariationCaption',
    'PercentOfTarget': 'DashboardStringId.CardRowDataElementTypePercentOfTargetCaption',
    'CardName': 'DashboardStringId.CardRowDataElementTypeCardNameCaption',
};
exports.сardRowDataElementTypeValuesMap = __assign({}, exports.cardRowElementTypeValuesMapBase, { 'DimensionValue': 'DashboardStringId.CardRowDataElementTypeDimensionValueCaption' });
exports.сardFormatRuleLayoutElementValuesMap = __assign({ 'AllElements': 'DashboardStringId.FormatRuleApplyToAllElements' }, exports.cardRowElementTypeValuesMapBase, { 'Indicator': 'DashboardStringId.CardRowDataElementTypeDeltaIndicatorCaption' });
exports.сardRowDataElementTypeValuesMapEx = __assign({}, exports.сardRowDataElementTypeValuesMap, { 'DeltaIndicator': 'DashboardStringId.CardRowDataElementTypeDeltaIndicatorCaption', 'Sparkline': 'DashboardStringId.CardRowDataElementTypeSparklineCaption' });
exports.cardLayoutVisible = { propertyName: 'visible', modelName: '@Visible', from: _base_metadata_1.parseBool };
exports.dimensionIndex = { propertyName: 'dimensionIndex', modelName: '@DimensionIndex', from: _base_metadata_1.floatFromModel };
exports.cardLayoutValueType = { propertyName: 'valueType', modelName: '@ValueType', simpleFormAdapterItem: 'listEditor' };
exports.cardLayoutTemplateElementBaseSerializationInfo = [exports.cardLayoutVisible];
exports.cardLayoutTemplateDataElementSerializationInfo = exports.cardLayoutTemplateElementBaseSerializationInfo.concat([exports.cardLayoutValueType, exports.dimensionIndex]);


/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var serializable_model_1 = __webpack_require__(5);
var _chart_legend_1 = __webpack_require__(295);
var ChartLegend = (function (_super) {
    __extends(ChartLegend, _super);
    function ChartLegend(JSON, serializer) {
        if (JSON === void 0) { JSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, JSON, serializer) || this;
    }
    ChartLegend.prototype.getInfo = function () {
        return _chart_legend_1.chartLegendSerializationsInfo;
    };
    return ChartLegend;
}(serializable_model_1.SerializableModel));
exports.ChartLegend = ChartLegend;


/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
exports.outsidePosition = {
    propertyName: 'outsidePosition', modelName: '@OutsidePosition', displayName: 'DashboardWebStringId.Chart.Position', defaultVal: 'TopRightHorizontal', simpleFormAdapterItem: 'selectBoxEditor', values: {
        'TopLeftVertical': 'DashboardWebStringId.Chart.Position.TopLeftVertical',
        'TopLeftHorizontal': 'DashboardWebStringId.Chart.Position.TopLeftHorizontal',
        'TopCenterHorizontal': 'DashboardWebStringId.Chart.Position.TopCenterHorizontal',
        'TopRightVertical': 'DashboardWebStringId.Chart.Position.TopRightVertical',
        'TopRightHorizontal': 'DashboardWebStringId.Chart.Position.TopRightHorizontal',
        'BottomLeftVertical': 'DashboardWebStringId.Chart.Position.BottomLeftVertical',
        'BottomLeftHorizontal': 'DashboardWebStringId.Chart.Position.BottomLeftHorizontal',
        'BottomCenterHorizontal': 'DashboardWebStringId.Chart.Position.BottomCenterHorizontal',
        'BottomRightVertical': 'DashboardWebStringId.Chart.Position.BottomRightVertical',
        'BottomRightHorizontal': 'DashboardWebStringId.Chart.Position.BottomRightHorizontal'
    }
};
exports.insidePosition = {
    propertyName: 'insidePosition', modelName: '@InsidePosition', displayName: 'DashboardWebStringId.Chart.Position', defaultVal: 'TopRightHorizontal', simpleFormAdapterItem: 'selectBoxEditor', values: {
        'TopLeftVertical': 'DashboardWebStringId.Chart.Position.TopLeftVertical',
        'TopLeftHorizontal': 'DashboardWebStringId.Chart.Position.TopLeftHorizontal',
        'TopCenterHorizontal': 'DashboardWebStringId.Chart.Position.TopCenterHorizontal',
        'TopCenterVertical': 'DashboardWebStringId.Chart.Position.TopCenterVertical',
        'TopRightVertical': 'DashboardWebStringId.Chart.Position.TopRightVertical',
        'TopRightHorizontal': 'DashboardWebStringId.Chart.Position.TopRightHorizontal',
        'BottomLeftVertical': 'DashboardWebStringId.Chart.Position.BottomLeftVertical',
        'BottomLeftHorizontal': 'DashboardWebStringId.Chart.Position.BottomLeftHorizontal',
        'BottomCenterHorizontal': 'DashboardWebStringId.Chart.Position.BottomCenterHorizontal',
        'BottomCenterVertical': 'DashboardWebStringId.Chart.Position.BottomCenterVertical',
        'BottomRightVertical': 'DashboardWebStringId.Chart.Position.BottomRightVertical',
        'BottomRightHorizontal': 'DashboardWebStringId.Chart.Position.BottomRightHorizontal'
    }
};
exports.isInsideDiagram = { propertyName: 'isInsideDiagram', modelName: '@IsInsidePosition', displayName: 'DashboardWebStringId.Chart.IsInsideOfDiagram', defaultVal: false, simpleFormAdapterItem: 'yesNoButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.chartLegendVisible = { propertyName: 'visible', modelName: '@Visible', displayName: 'DashboardWebStringId.Chart.ShowLegend', defaultVal: true, simpleFormAdapterItem: 'yesNoButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.chartLegendSerializationsInfo = [exports.outsidePosition, exports.insidePosition, exports.isInsideDiagram, exports.chartLegendVisible];


/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var serializable_model_1 = __webpack_require__(5);
var _point_label_options_1 = __webpack_require__(199);
var PointLabelOptionsBase = (function (_super) {
    __extends(PointLabelOptionsBase, _super);
    function PointLabelOptionsBase(JSON, serializer) {
        if (JSON === void 0) { JSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, JSON, serializer) || this;
    }
    PointLabelOptionsBase.prototype.getInfo = function () {
        return _point_label_options_1.pointLabelOptionsBaseSerializationsInfo;
    };
    PointLabelOptionsBase.prototype.grabFrom = function (options) {
        this.showPointLabels(options.showPointLabels());
        this.orientation(options.orientation());
        this.overlappingMode(options.overlappingMode());
    };
    return PointLabelOptionsBase;
}(serializable_model_1.SerializableModel));
exports.PointLabelOptionsBase = PointLabelOptionsBase;
var PointLabelOptions = (function (_super) {
    __extends(PointLabelOptions, _super);
    function PointLabelOptions(JSON, serializer) {
        if (JSON === void 0) { JSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, JSON, serializer) || this;
    }
    PointLabelOptions.prototype.getInfo = function () {
        return _point_label_options_1.pointLabelOptionsSerializationsInfo;
    };
    PointLabelOptions.prototype.grabFrom = function (options) {
        _super.prototype.grabFrom.call(this, options);
        this.showForZeroValues(options.showForZeroValues());
        this.position(options.position());
        this.contentType(options.contentType());
    };
    return PointLabelOptions;
}(PointLabelOptionsBase));
exports.PointLabelOptions = PointLabelOptions;


/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _filter_element_item_base_1 = __webpack_require__(88);
exports.comboBoxType = {
    propertyName: 'comboBoxType', modelName: '@ComboBoxType', displayName: 'DashboardWebStringId.FilterItem.Type', defaultVal: 'Standard', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Standard': 'DashboardWebStringId.FilterItem.Type.Standard',
        'Checked': 'DashboardWebStringId.FilterItem.Type.Checked'
    }
};
exports.comboBoxDashboardItemSerializationsInfo = _filter_element_item_base_1.filterElementItemBaseSerializationInfo.concat([exports.comboBoxType, _filter_element_item_base_1.showAllValue]);


/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _data_item_1 = __webpack_require__(20);
var _data_dashboard_item_1 = __webpack_require__(26);
var interactivity_options_1 = __webpack_require__(32);
var _range_filter_item_1 = __webpack_require__(200);
exports.filterType = {
    propertyName: 'filterType', modelName: '@FilterType', displayName: 'DashboardWebStringId.DateFilter.FilterType', defaultVal: 'Between', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'After': 'DashboardWebStringId.DateFilter.FilterTypeAfter',
        'Before': 'DashboardWebStringId.DateFilter.FilterTypeBefore',
        'Exact': 'DashboardWebStringId.DateFilter.FilterTypeExact',
        'Between': 'DashboardWebStringId.DateFilter.FilterTypeBetween'
    }
};
exports.arrangementMode = {
    propertyName: 'arrangementMode', modelName: '@ArrangementMode', displayName: 'DashboardWebStringId.DateFilter.ArrangementMode', defaultVal: 'AutoHeight', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'AutoHeight': 'DashboardWebStringId.DateFilter.ArrangementModeAutoHeight',
        'Horizontal': 'DashboardWebStringId.DateFilter.ArrangementModeHorizontal',
        'Vertical': 'DashboardWebStringId.DateFilter.ArrangementModeVertical'
    }
};
exports.datePickerLocation = {
    propertyName: 'datePickerLocation', modelName: '@DatePickerLocation', displayName: 'DashboardWebStringId.DateFilter.DatePickerLocation', defaultVal: 'Far', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Far': 'DashboardWebStringId.DateFilter.DatePickerLocationFar',
        'Near': 'DashboardWebStringId.DateFilter.DatePickerLocationNear',
        'Hidden': 'DashboardWebStringId.DateFilter.DatePickerLocationHidden'
    }
};
exports.displayTextPattern = { propertyName: 'displayTextPattern', modelName: '@DisplayTextPattern', displayName: 'DashboardStringId.DateFilterDisplayTextPattern', defaultVal: '', simpleFormAdapterItem: 'textBoxEditor', editorOptions: { placeholder: 'DashboardStringId.FromToDatePeriodCaption' } };
exports.dateFilterDimension = { propertyName: '__dimension', modelName: 'Dimension', displayName: 'DashboardStringId.DescriptionItemDimension', info: _data_item_1.dataItemLinkSerializationsInfo };
exports.dateFilterDashboardItemSerializationsInfo = _data_dashboard_item_1.dataDashboardItemSerializationsInfo.concat([exports.dateFilterDimension, _range_filter_item_1.dateTimePeriods, exports.filterType, exports.arrangementMode, exports.datePickerLocation, exports.displayTextPattern, _range_filter_item_1.defaultDateTimePeriodName, interactivity_options_1._filterItemInteractivityOptionsMeta]);


/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _filter_element_item_base_1 = __webpack_require__(88);
exports.listBoxType = {
    propertyName: 'listBoxType', modelName: '@ListBoxType', displayName: 'DashboardWebStringId.FilterItem.Type', defaultVal: 'Checked', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Checked': 'DashboardWebStringId.FilterItem.Type.Checked',
        'Radio': 'DashboardWebStringId.FilterItem.Type.Radio'
    }
};
exports.listBoxDashboardItemSerializationsInfo = _filter_element_item_base_1.filterElementItemBaseSerializationInfo.concat([exports.listBoxType, _filter_element_item_base_1.showAllValue]);


/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
var _filter_element_item_base_1 = __webpack_require__(88);
exports.autoExpand = { propertyName: 'autoExpand', modelName: '@AutoExpand', displayName: 'DashboardWebStringId.TreeView.AutoExpand', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.treeViewDashboardItemSerializationsInfo = _filter_element_item_base_1.filterElementItemBaseSerializationInfo.concat([exports.autoExpand]);


/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var data_item_format_1 = __webpack_require__(255);
var _base_metadata_1 = __webpack_require__(4);
var _kpi_element_1 = __webpack_require__(192);
exports.minimum = { propertyName: 'minimum', modelName: '@Minimum', displayName: 'DashboardWebStringId.Gauge.Min', defaultVal: NaN, from: _base_metadata_1.floatFromModel, toJsonObject: _base_metadata_1.nullableFloatToModel };
exports.maximum = { propertyName: 'maximum', modelName: '@Maximum', displayName: 'DashboardWebStringId.Gauge.Max', defaultVal: NaN, from: _base_metadata_1.floatFromModel, toJsonObject: _base_metadata_1.nullableFloatToModel };
exports.scaleLabelNumericFormat = { propertyName: 'scaleLabelNumericFormat', modelName: 'ScaleLabelNumericFormat', displayName: 'DashboardWebStringId.TextBoxFormatText', type: data_item_format_1.DataItemNumericFormat };
exports.gaugeSerializationsInfo = _kpi_element_1.kpiElementSerializationsInfo.concat([exports.minimum, exports.maximum, exports.scaleLabelNumericFormat]);


/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
var _kpi_item_1 = __webpack_require__(194);
exports.gauges = { propertyName: 'gauges', modelName: 'Gauges', displayName: 'DashboardStringId.DefaultNameGaugeItem', array: true };
exports.gaugeViewType = {
    propertyName: 'viewType', modelName: '@ViewType', displayName: 'DashboardWebStringId.Gauge.Type', defaultVal: 'CircularFull', valuesArray: [
        { value: 'CircularFull', displayValue: 'DashboardWebStringId.Gauge.Type.FullQuarterGauge' },
        { value: 'CircularHalf', displayValue: 'DashboardWebStringId.Gauge.Type.HalfCircular' },
        { value: 'CircularQuarterLeft', displayValue: 'DashboardWebStringId.Gauge.Type.LeftQuarterCircular' },
        { value: 'CircularQuarterRight', displayValue: 'DashboardWebStringId.Gauge.Type.RightQuarterCircular' },
        { value: 'CircularThreeFourth', displayValue: 'DashboardWebStringId.Gauge.Type.ThreeFourthCircular' },
        { value: 'LinearHorizontal', displayValue: 'DashboardWebStringId.Gauge.Type.LinearHorizontal' },
        { value: 'LinearVertical', displayValue: 'DashboardWebStringId.Gauge.Type.LinearVertical' }
    ]
};
exports.showGaugeCaptions = { propertyName: 'showGaugeCaptions', modelName: '@ShowGaugeCaptions', displayName: 'DashboardWebStringId.Gauge.Captions', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.gaugeDashboardItemSerializationsInfo = _kpi_item_1.kpiDashboardItemSerializationsInfo.concat([exports.gauges, exports.gaugeViewType, exports.showGaugeCaptions]);


/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _data_item_1 = __webpack_require__(20);
var _base_metadata_1 = __webpack_require__(4);
var delta_options_1 = __webpack_require__(132);
var sparkline_options_1 = __webpack_require__(291);
exports.columnType = { propertyName: 'containerType', displayName: 'DashboardWebStringId.Grid.ColumnType' };
exports.displayMode = {
    propertyName: 'displayMode', modelName: '@DisplayMode', displayName: 'DashboardWebStringId.Grid.DisplayMode', defaultVal: 'Value', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Value': 'DashboardWebStringId.Grid.DisplayMode.Value',
        'Bar': 'DashboardWebStringId.Grid.DisplayMode.Bar'
    }
};
exports.columnWeight = { propertyName: 'weight', modelName: '@Weight', displayName: 'DashboardStringId.WeightCaption', defaultVal: 75, simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel, category: _base_metadata_1.PropertyCategory.ViewModel,
    isTwoWay: true
};
exports.fixedWidth = { propertyName: 'fixedWidth', modelName: '@FixedWidth', displayName: 'DashboardWebStringId.Grid.FixedWidth', defaultVal: 0, simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel, category: _base_metadata_1.PropertyCategory.ViewModel };
exports.widthType = {
    propertyName: 'widthType', modelName: '@WidthType', displayName: 'DashboardWebStringId.Grid.WidthType', defaultVal: 'Weight', simpleFormAdapterItem: 'listEditor', category: _base_metadata_1.PropertyCategory.ViewModel, values: {
        'Weight': 'DashboardWebStringId.Grid.WidthType.Weight',
        'FitToContent': 'DashboardWebStringId.Grid.WidthType.FitToContent',
        'FixedWidth': 'DashboardWebStringId.Grid.FixedWidth'
    },
    isTwoWay: true
};
exports.totalsTemplate = { propertyName: 'totals', modelName: 'Totals', array: true };
exports.gridColumnBaseSerializationsInfo = [_base_metadata_1.itemType, _base_metadata_1.name, exports.columnWeight, exports.fixedWidth, exports.widthType, exports.totalsTemplate];
exports.dimension = { propertyName: '__dimension', modelName: 'Dimension', info: _data_item_1.dataItemLinkSerializationsInfo, displayName: 'DashboardStringId.DescriptionItemDimension' };
exports.dimensionDisplayMode = {
    propertyName: 'displayMode', modelName: '@DisplayMode', displayName: 'DashboardWebStringId.Grid.DisplayMode', defaultVal: 'Text', simpleFormAdapterItem: 'selectBoxEditor', values: {
        'Text': 'DashboardWebStringId.Grid.DisplayMode.Text',
        'Image': 'DashboardWebStringId.Grid.DisplayMode.Image'
    }
};
exports.gridDimensionColumnSerializationsInfo = exports.gridColumnBaseSerializationsInfo.concat([exports.dimensionDisplayMode, exports.dimension]);
exports.alwaysShowZeroLevel = { propertyName: 'alwaysShowZeroLevel', modelName: '@AlwaysShowZeroLevel', displayName: 'DashboardWebStringId.Chart.AlwaysShowZeroLevel', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.measure = { propertyName: '__measure', modelName: 'Measure', info: _data_item_1.dataItemLinkSerializationsInfo, displayName: 'DashboardStringId.DescriptionItemMeasure' };
exports.gridMeasureColumnSerializationsInfo = exports.gridColumnBaseSerializationsInfo.concat([exports.displayMode, exports.alwaysShowZeroLevel, exports.measure]);
exports.gridColumnDeltaOptions = { propertyName: 'deltaOptions', modelName: 'DeltaOptions', displayName: 'DashboardWebStringId.Grid.DeltaOptions', type: delta_options_1.DeltaOptions };
exports.gridColumnActualValue = { propertyName: _base_metadata_1.actualValuePropertyName, modelName: 'ActualValue', info: _data_item_1.dataItemLinkSerializationsInfo, displayName: 'DashboardStringId.ActualValueCaption' };
exports.gridColumnTargetValue = { propertyName: _base_metadata_1.targetValuePropertyName, modelName: 'TargetValue', info: _data_item_1.dataItemLinkSerializationsInfo, displayName: 'DashboardStringId.TargetValueCaption' };
exports.gridDeltaColumnSerializationsInfo = exports.gridColumnBaseSerializationsInfo.concat([exports.gridColumnDeltaOptions, exports.displayMode, exports.alwaysShowZeroLevel, exports.gridColumnActualValue, exports.gridColumnTargetValue, _data_item_1.absoluteVariationNumericFormat, _data_item_1.percentVariationNumericFormat, _data_item_1.percentOfTargetNumericFormat]);
exports.showStartEndValues = { propertyName: 'showStartEndValues', modelName: '@ShowStartEndValues', displayName: 'DashboardWebStringId.Grid.ShowStartEndValues', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.sparkline = { propertyName: '__measure', modelName: 'SparklineValue', info: _data_item_1.dataItemLinkSerializationsInfo, displayName: 'DashboardWebStringId.Binding.Sparkline' };
exports.sparklineOptions = { propertyName: 'sparklineOptions', modelName: 'SparklineOptions', displayName: 'DashboardWebStringId.Card.SparklineOptions', type: sparkline_options_1.SparklineOptions };
exports.gridSparklineColumnSerializationsInfo = exports.gridColumnBaseSerializationsInfo.concat([exports.showStartEndValues, exports.sparkline, exports.sparklineOptions]);
exports.uri = { propertyName: '__uriAttribute', modelName: 'UriAttribute', info: _data_item_1.dataItemLinkSerializationsInfo, displayName: 'DashboardStringId.UriCaption' };
exports.displayValue = { propertyName: '__displayValue', modelName: 'DisplayValue', info: _data_item_1.dataItemLinkSerializationsInfo, displayName: 'DashboardStringId.DisplayValueCaption' };
function checkGridUriPattern(value) {
    var removes = [];
    var result = '';
    for (var i = 0; i < value.length; i++) {
        if (value[i] == '{') {
            if (value.length < i + 2 || value[i + 1] != '0' || value[i + 2] != '}')
                removes.push(i);
        }
        if (value[i] == '}') {
            if (i < 2 || value[i - 1] != '0' || value[i - 2] != '{')
                removes.push(i);
        }
    }
    for (var i = 0; i < value.length; i++) {
        if (removes.indexOf(i) == -1)
            result = result + value[i];
    }
    return result;
}
exports.checkGridUriPattern = checkGridUriPattern;
function validateGridUriPattern(value) {
    var newValue = checkGridUriPattern(value);
    return newValue.length == value.length;
}
exports.validateGridUriPattern = validateGridUriPattern;
function gridValidateUriPattern(uriPattern) {
    return validateGridUriPattern(uriPattern);
}
exports.gridValidateUriPattern = gridValidateUriPattern;
exports.uriPatternValidationRules = [{ type: 'custom', validationCallback: function (options) { return gridValidateUriPattern(options.value); }, message: 'DashboardStringId.GridHyperlinkUriPatternErrorMessage' }];
exports.gridColumnUriPattern = { propertyName: 'uriPattern', modelName: '@UriPattern', displayName: 'DashboardStringId.UriPatternCaption', simpleFormAdapterItem: 'textBoxEditor', validateBeforeSet: true, editorOptions: { placeholder: '{0}' }, validationRules: exports.uriPatternValidationRules };
exports.gridHyperlinkColumnSerializationsInfo = exports.gridColumnBaseSerializationsInfo.concat([exports.uri, exports.displayValue, exports.gridColumnUriPattern]);


/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _data_item_1 = __webpack_require__(20);
var _base_metadata_1 = __webpack_require__(4);
var _data_dashboard_item_1 = __webpack_require__(26);
var interactivity_options_1 = __webpack_require__(32);
var grid_options_1 = __webpack_require__(499);
exports.gridOptions = { propertyName: 'gridOptions', modelName: 'GridOptions', displayName: 'DashboardWebStringId.Grid.Options', type: grid_options_1.GridOptions };
exports.gridColumns = { propertyName: 'columns', modelName: 'GridColumns', displayName: 'DashboardStringId.PivotCalculationAlongColumns', array: true };
exports.sparklineArgument = { propertyName: _base_metadata_1.sparklineArgumentPropertyName, modelName: 'SparklineArgument', displayName: 'DashboardStringId.GridCalculationAlongSparklineArgument', info: _data_item_1.dataItemLinkSerializationsInfo };
exports.dashboardGridItemSerializationsInfo = _data_dashboard_item_1.dataDashboardItemSerializationsInfo.concat(exports.gridColumns, exports.sparklineArgument, exports.gridOptions, interactivity_options_1._dashboardItemInteractivityOptionsMeta);


/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
exports.allowCellMerge = { propertyName: 'allowCellMerge', modelName: '@AllowGridCellMerge', displayName: 'DashboardWebStringId.Grid.MergeCells', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool, category: _base_metadata_1.PropertyCategory.ViewModel };
exports.columnWidthMode = {
    propertyName: 'columnWidthMode', modelName: '@ColumnWidthMode', displayName: 'DashboardWebStringId.Grid.ColumnWidthMode', defaultVal: 'AutoFitToGrid', simpleFormAdapterItem: 'listEditor', category: _base_metadata_1.PropertyCategory.ViewModel, values: {
        'AutoFitToContents': 'DashboardWebStringId.Grid.AutoFitToContentsColumnWidthMode',
        'AutoFitToGrid': 'DashboardWebStringId.Grid.AutoFitToGridColumnWidthMode',
        'Manual': 'DashboardWebStringId.Grid.ManualGridColumnWidthMode'
    }
};
exports.enableBandedRows = { propertyName: 'enableBandedRows', modelName: '@EnableBandedRows', displayName: 'DashboardWebStringId.Grid.BandedRows', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool, category: _base_metadata_1.PropertyCategory.ViewModel };
exports.showVerticalLines = { propertyName: 'showVerticalLines', modelName: '@ShowVerticalLines', displayName: 'DashboardWebStringId.Grid.VerticalLines', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool, category: _base_metadata_1.PropertyCategory.ViewModel };
exports.showHorizontalLines = { propertyName: 'showHorizontalLines', modelName: '@ShowHorizontalLines', displayName: 'DashboardWebStringId.Grid.HorizontalLines', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool, category: _base_metadata_1.PropertyCategory.ViewModel };
exports.showColumnHeaders = { propertyName: 'showColumnHeaders', modelName: '@ShowColumnHeaders', displayName: 'DashboardWebStringId.Grid.ColumnHeaders', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool, category: _base_metadata_1.PropertyCategory.ViewModel };
exports.wordWrap = { propertyName: 'wordWrap', modelName: '@WordWrap', displayName: 'DashboardWebStringId.Grid.WordWrap', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool, category: _base_metadata_1.PropertyCategory.ViewModel };
exports.gridOptionsSerializationsInfo = [exports.enableBandedRows, exports.showVerticalLines, exports.showHorizontalLines, exports.allowCellMerge, exports.showColumnHeaders, exports.columnWidthMode, exports.wordWrap];


/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
var custom_shape_file_data_1 = __webpack_require__(502);
exports.customShapefileUrl = { propertyName: 'url', modelName: '@Url', displayName: 'DashboardWebStringId.Map.CustomMapUrl', defaultVal: undefined, simpleFormAdapterItem: 'textBoxEditor', editorOptions: { placeholder: 'http://www.example.com/map.shp' }, category: _base_metadata_1.PropertyCategory.Map };
exports.customShapefileData = { propertyName: 'data', modelName: 'Data', type: custom_shape_file_data_1.CustomShapefileData };
exports.customShapefileSerializationsInfo = [exports.customShapefileUrl, exports.customShapefileData];


/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
exports.legendVisible = { propertyName: 'visible', modelName: '@Visible', displayName: 'DashboardWebStringId.Map.ShowLegend', defaultVal: false, simpleFormAdapterItem: 'yesNoButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.legendPosition = {
    propertyName: 'position', modelName: '@Position', displayName: 'DashboardWebStringId.WeightedLegendGalleryGroup', defaultVal: 'TopLeft', simpleFormAdapterItem: 'listEditor', values: {
        'TopLeft': 'DashboardWebStringId.Map.Position.TopLeft',
        'TopCenter': 'DashboardWebStringId.Map.Position.TopCenter',
        'TopRight': 'DashboardWebStringId.Map.Position.TopRight',
        'BottomLeft': 'DashboardWebStringId.Map.Position.BottomLeft',
        'BottomCenter': 'DashboardWebStringId.Map.Position.BottomCenter',
        'BottomRight': 'DashboardWebStringId.Map.Position.BottomRight'
    }
};
exports.mapLegendBaseSerializationsInfo = [exports.legendVisible, exports.legendPosition];
exports.legendType = {
    propertyName: 'type', modelName: '@WeightedLegendType', displayName: 'DashboardWebStringId.Map.WeightedLegendType', defaultVal: 'Linear', values: {
        'Linear': 'DashboardWebStringId.Map.WeightedLegendType.Linear',
        'Nested': 'DashboardWebStringId.Map.WeightedLegendType.Nested'
    }
};
exports.weightedLegendSerializationsInfo = exports.mapLegendBaseSerializationsInfo.concat([exports.legendType]);
exports.legendOrientation = {
    propertyName: 'orientation', modelName: '@Orientation', displayName: 'DashboardWebStringId.Chart.Orientation', defaultVal: 'Vertical', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Vertical': 'DashboardWebStringId.Map.Orientation.Vertical',
        'Horizontal': 'DashboardWebStringId.Map.Orientation.Horizontal'
    }
};
exports.mapLegendSerializationsInfo = exports.mapLegendBaseSerializationsInfo.concat([exports.legendOrientation]);


/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _data_item_1 = __webpack_require__(20);
var _base_metadata_1 = __webpack_require__(4);
var delta_options_1 = __webpack_require__(132);
exports.valueName = { propertyName: 'valueName', modelName: '@ValueName', displayName: 'DashboardWebStringId.Map.TooltipCaption', simpleFormAdapterItem: 'textBoxEditor' };
exports.chorolpethMapValue = { propertyName: _base_metadata_1.valuePropertyName, modelName: 'Value', info: _data_item_1.dataItemLinkSerializationsInfo };
exports.valueMapSerializationsInfo = [_base_metadata_1.itemType, _base_metadata_1.name, exports.chorolpethMapValue, exports.valueName];
exports.deltaMapActualValue = { propertyName: _base_metadata_1.actualValuePropertyName, modelName: 'ActualValue', displayName: 'DashboardStringId.ActualValueCaption', info: _data_item_1.dataItemLinkSerializationsInfo };
exports.deltaMapTargetValue = { propertyName: _base_metadata_1.targetValuePropertyName, modelName: 'TargetValue', displayName: 'DashboardStringId.TargetValueCaption', info: _data_item_1.dataItemLinkSerializationsInfo };
exports.deltaMapDeltaOptions = { propertyName: 'deltaOptions', modelName: 'DeltaOptions', displayName: 'DashboardWebStringId.Grid.DeltaOptions', type: delta_options_1.DeltaOptions };
exports.actualValueName = { propertyName: 'actualValueName', modelName: '@ActualValueName', displayName: 'DashboardWebStringId.Map.TooltipActualValueCaption', simpleFormAdapterItem: 'textBoxEditor' };
exports.deltaName = { propertyName: 'deltaName', modelName: '@DeltaName', displayName: 'DashboardWebStringId.Map.TooltipDeltaCaption', simpleFormAdapterItem: 'textBoxEditor' };
exports.deltaMapSerializationsInfo = [_base_metadata_1.itemType, _base_metadata_1.name, exports.deltaMapActualValue, exports.deltaMapTargetValue, exports.actualValueName, exports.deltaName, exports.deltaMapDeltaOptions, _data_item_1.absoluteVariationNumericFormat, _data_item_1.percentVariationNumericFormat, _data_item_1.percentOfTargetNumericFormat];


/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _data_item_1 = __webpack_require__(20);
var _base_metadata_1 = __webpack_require__(4);
var _coloring_options_1 = __webpack_require__(75);
var _geo_point_map_item_base_1 = __webpack_require__(68);
var _map_item_1 = __webpack_require__(44);
exports.pieMapArgument = { propertyName: _base_metadata_1.argumentPropertyName, modelName: 'Argument', displayName: 'DashboardStringId.DescriptionItemArgument', info: _data_item_1.dataItemLinkSerializationsInfo };
exports.pieMapValues = { propertyName: _base_metadata_1.valuesPropertyName, modelName: 'Values', displayName: 'DashboardStringId.DescriptionValues', array: true };
exports.isWeighted = { propertyName: 'isWeighted', modelName: '@IsWeighted', displayName: 'DashboardWebStringId.PieMapIsWeighted', defaultVal: true, simpleFormAdapterItem: 'yesNoButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.pieMapDashboardItemSerializationsInfo = _geo_point_map_item_base_1.geoPointMapDashboardItemBaseSerializationsInfo.concat([exports.pieMapArgument, exports.pieMapValues, exports.isWeighted, _map_item_1.colorLegend, _map_item_1.weightedLegend, _coloring_options_1.coloringOptions]);


/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
var _chart_item_base_1 = __webpack_require__(196);
var interactivity_options_1 = __webpack_require__(32);
exports.pieValues = { propertyName: _base_metadata_1.valuesPropertyName, modelName: 'Values', displayName: 'DashboardWebStringId.Binding.Values', array: true };
exports.labelContentType = {
    propertyName: 'labelContentType', modelName: '@LabelContentType', displayName: 'DashboardWebStringId.Chart.LabelContent', defaultVal: 'ArgumentAndPercent', simpleFormAdapterItem: 'listEditor', values: {
        'None': 'DashboardWebStringId.Pie.LabelContentType.None',
        'Argument': 'DashboardWebStringId.Pie.LabelContentType.Argument',
        'Percent': 'DashboardWebStringId.Pie.LabelContentType.Percent',
        'ArgumentAndPercent': 'DashboardWebStringId.Pie.LabelContentType.ArgumentAndPercent',
        'Value': 'DashboardWebStringId.Pie.LabelContentType.Value',
        'ArgumentAndValue': 'DashboardWebStringId.Pie.LabelContentType.ArgumentAndValue',
        'ValueAndPercent': 'DashboardWebStringId.Pie.LabelContentType.ValueAndPercent',
        'ArgumentValueAndPercent': 'DashboardWebStringId.Pie.LabelContentType.ArgumentValueAndPercent'
    }
};
exports.tooltipContentType = {
    propertyName: 'tooltipContentType', modelName: '@TooltipContentType', displayName: 'DashboardWebStringId.Chart.TooltipContent', defaultVal: 'ArgumentValueAndPercent', simpleFormAdapterItem: 'listEditor', values: {
        'None': 'DashboardWebStringId.Pie.LabelContentType.None',
        'Argument': 'DashboardWebStringId.Pie.LabelContentType.Argument',
        'Percent': 'DashboardWebStringId.Pie.LabelContentType.Percent',
        'ArgumentAndPercent': 'DashboardWebStringId.Pie.LabelContentType.ArgumentAndPercent',
        'Value': 'DashboardWebStringId.Pie.LabelContentType.Value',
        'ArgumentAndValue': 'DashboardWebStringId.Pie.LabelContentType.ArgumentAndValue',
        'ValueAndPercent': 'DashboardWebStringId.Pie.LabelContentType.ValueAndPercent',
        'ArgumentValueAndPercent': 'DashboardWebStringId.Pie.LabelContentType.ArgumentValueAndPercent'
    }
};
exports.pieType = {
    propertyName: 'pieType', modelName: '@PieType', displayName: 'DashboardWebStringId.Pie.Type', defaultVal: 'Pie', valuesArray: [
        { value: 'Pie', displayValue: 'DashboardWebStringId.Pie' },
        { value: 'Donut', displayValue: 'DashboardWebStringId.Pie.Donut' }
    ]
};
exports.showPieCaptions = { propertyName: 'showPieCaptions', modelName: '@ShowPieCaptions', displayName: 'DashboardWebStringId.Pie.ShowCaptions', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.labelPosition = {
    propertyName: 'labelPosition', modelName: '@LabelPosition', displayName: 'DashboardWebStringId.Pie.LabelPosition', defaultVal: 'Outside', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Outside': 'DashboardWebStringId.Pie.LabelPositionOutside',
        'Inside': 'DashboardWebStringId.Pie.LabelPositionInside'
    }
};
exports.pieDashboardItemSerializationsInfo = _chart_item_base_1.chartItemBaseSerializationsInfo.concat([exports.pieValues, exports.labelContentType, exports.tooltipContentType, exports.pieType, _base_metadata_1.contentArrangementMode, _base_metadata_1.contentLineCount, exports.showPieCaptions, interactivity_options_1._chartItemInteractivityOptionsMeta, exports.labelPosition]);


/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
var _data_dashboard_item_1 = __webpack_require__(26);
var interactivity_options_1 = __webpack_require__(32);
exports.pivotColumns = { propertyName: _base_metadata_1.columnsPropertyName, modelName: 'Columns', displayName: 'DashboardStringId.DescriptionColumns', array: true };
exports.pivotRows = { propertyName: _base_metadata_1.rowsPropertyName, modelName: 'Rows', displayName: 'DashboardStringId.DescriptionRows', array: true };
exports.pivotValues = { propertyName: _base_metadata_1.valuesPropertyName, modelName: 'Values', displayName: 'DashboardStringId.DescriptionValues', array: true };
exports.autoExpandColumnGroups = { propertyName: 'autoExpandColumnGroups', modelName: 'AutoExpandColumnGroups', displayName: 'DashboardWebStringId.PivotGrid.AutoExpandColumnGroups', defaultVal: false, simpleFormAdapterItem: 'yesNoButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.autoExpandRowGroups = { propertyName: 'autoExpandRowGroups', modelName: 'AutoExpandRowGroups', displayName: 'DashboardWebStringId.PivotGrid.AutoExpandRowGroups', defaultVal: false, simpleFormAdapterItem: 'yesNoButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.showColumnGrandTotals = { propertyName: 'showColumnGrandTotals', modelName: 'ShowColumnGrandTotals', displayName: 'DashboardWebStringId.PivotGrid.ColumnGrandTotals', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.showRowGrandTotals = { propertyName: 'showRowGrandTotals', modelName: 'ShowRowGrandTotals', displayName: 'DashboardWebStringId.PivotGrid.RowGrandTotals', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.showColumnTotals = { propertyName: 'showColumnTotals', modelName: 'ShowColumnTotals', displayName: 'DashboardWebStringId.PivotGrid.ColumnTotals', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.showRowTotals = { propertyName: 'showRowTotals', modelName: 'ShowRowTotals', displayName: 'DashboardWebStringId.PivotGrid.RowTotals', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.valuesPosition = {
    propertyName: 'valuesPosition', modelName: 'ValuesPosition', displayName: 'DashboardWebStringId.PivotGrid.ValuesPosition', defaultVal: 'Columns', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'Columns': 'DashboardWebStringId.PivotGrid.ValuesPositionColumns',
        'Rows': 'DashboardWebStringId.PivotGrid.ValuesPositionRows'
    }
};
exports.rowTotalsPosition = {
    propertyName: 'rowTotalsPosition', modelName: 'RowTotalsPosition', displayName: 'DashboardWebStringId.PivotGrid.RowTotalsPosition', defaultVal: 'Bottom', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'Bottom': 'DashboardWebStringId.PivotGrid.RowTotalsPositionBottom',
        'Top': 'DashboardWebStringId.PivotGrid.RowTotalsPositionTop'
    }
};
exports.columnTotalsPosition = {
    propertyName: 'columnTotalsPosition', modelName: 'ColumnTotalsPosition', displayName: 'DashboardWebStringId.PivotGrid.ColumnTotalsPosition', defaultVal: 'Far', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'Far': 'DashboardWebStringId.PivotGrid.ColumnTotalsPositionFar',
        'Near': 'DashboardWebStringId.PivotGrid.ColumnTotalsPositionNear'
    }
};
exports.layoutType = {
    propertyName: 'layoutType', modelName: 'LayoutType', displayName: 'DashboardWebStringId.PivotGrid.LayoutType', defaultVal: 'Compact', simpleFormAdapterItem: 'buttonGroupEditor',
    values: {
        'Compact': 'DashboardWebStringId.PivotGrid.LayoutTypeCompact',
        'Tabular': 'DashboardWebStringId.PivotGrid.LayoutTypeTabular'
    }
};
exports.pivotDashboardItemSerializationsInfo = _data_dashboard_item_1.dataDashboardItemSerializationsInfo.concat([exports.pivotColumns, exports.pivotRows, exports.pivotValues, exports.autoExpandColumnGroups, exports.autoExpandRowGroups, exports.showColumnGrandTotals, exports.showRowGrandTotals, exports.showColumnTotals, exports.showRowTotals, exports.valuesPosition, exports.rowTotalsPosition, exports.columnTotalsPosition, exports.layoutType, interactivity_options_1._baseInteractivityOptionsMeta]);


/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var _base_metadata_1 = __webpack_require__(4);
var limit_container_1 = __webpack_require__(507);
function limitContainerFromJson(json, serializer) {
    if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
    return new limit_container_1.LimitContainer(json, serializer);
}
function limitContainerToJson(limitContainer, serializer) {
    if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
    var limitContainerJson = serializer.serialize(limitContainer);
    if (!limitContainer.fixed.isEmpty() && !limitContainerJson.hasOwnProperty('FixedDateTimePeriodLimit')) {
        limitContainerJson.FixedDateTimePeriodLimit = null;
    }
    if (!limitContainer.flow.isEmpty() && !limitContainerJson.hasOwnProperty('FlowDateTimePeriodLimit')) {
        limitContainerJson.FlowDateTimePeriodLimit = null;
    }
    return limitContainerJson;
}
exports.startLimit = { propertyName: 'start', modelName: 'StartLimit', type: limit_container_1.LimitContainer, from: limitContainerFromJson, toJsonObject: limitContainerToJson };
exports.endLimit = { propertyName: 'end', modelName: 'EndLimit', type: limit_container_1.LimitContainer, from: limitContainerFromJson, toJsonObject: limitContainerToJson };
exports.dateTimePeriodSerializationsInfo = [_base_metadata_1.itemType, _base_metadata_1.name, exports.startLimit, exports.endLimit];
exports.mode = {
    propertyName: 'mode', defaultVal: 'None', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'None': 'DashboardWebStringId.RangeFilter.None',
        'Fixed': 'DashboardWebStringId.RangeFilter.Fixed',
        'Flow': 'DashboardWebStringId.RangeFilter.Flow'
    }
};


/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var period_limit_1 = __webpack_require__(508);
exports.fixedDateTimePeriodLimitProperty = {
    propertyName: 'fixed', modelName: 'FixedDateTimePeriodLimit', type: period_limit_1.FixedDateTimePeriodLimit
};
exports.flowDateTimePeriodLimitProperty = {
    propertyName: 'flow', modelName: 'FlowDateTimePeriodLimit', type: period_limit_1.FlowDateTimePeriodLimit
};
exports.limitContainer = [exports.fixedDateTimePeriodLimitProperty, exports.flowDateTimePeriodLimitProperty];


/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _data_item_1 = __webpack_require__(20);
var _base_metadata_1 = __webpack_require__(4);
var chart_axis_1 = __webpack_require__(197);
var chart_legend_1 = __webpack_require__(294);
var _data_dashboard_item_1 = __webpack_require__(26);
var interactivity_options_1 = __webpack_require__(32);
var _coloring_options_1 = __webpack_require__(75);
var scatter_point_label_options_1 = __webpack_require__(509);
exports.scatterArgumentsMeta = { propertyName: _base_metadata_1.argumentsPropertyName, modelName: 'Dimensions', array: true };
exports.rotated = { propertyName: 'rotated', modelName: '@Rotated', displayName: 'DashboardWebStringId.Chart.Rotated', defaultVal: false, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool };
exports.legend = { propertyName: 'legend', modelName: 'ChartLegend', displayName: 'DashboardWebStringId.Chart.Legend', type: chart_legend_1.ChartLegend };
exports.axisX = { propertyName: 'axisX', modelName: 'AxisX', displayName: 'DashboardWebStringId.Chart.AxisX', type: chart_axis_1.ChartAxisY };
exports.axisY = { propertyName: 'axisY', modelName: 'AxisY', displayName: 'DashboardWebStringId.Chart.AxisY', type: chart_axis_1.ScatterChartAxisY };
exports.pointLabelOptions = { propertyName: 'pointLabelOptions', modelName: 'PointLabelOptions', displayName: 'DashboardWebStringId.Chart.PointLabelOptions', type: scatter_point_label_options_1.ScatterPointLabelOptions };
exports.axisXMeasure = { propertyName: '__axisXMeasure', modelName: 'MeasureX', displayName: 'DashboardWebStringId.Chart.AxisXMeasure', info: _data_item_1.dataItemLinkSerializationsInfo };
exports.axisYMeasure = { propertyName: '__axisYMeasure', modelName: 'MeasureY', displayName: 'DashboardWebStringId.Chart.AxisYMeasure', info: _data_item_1.dataItemLinkSerializationsInfo };
exports.scatterChartWeight = { propertyName: _base_metadata_1.weightPropertyName, modelName: 'MeasureWeight', displayName: 'DashboardWebStringId.Chart.Weight', info: _data_item_1.dataItemLinkSerializationsInfo };
exports.scatterChartDashboardItemSerializationsInfo = _data_dashboard_item_1.dataDashboardItemSerializationsInfo.concat([exports.scatterArgumentsMeta, interactivity_options_1._dashboardItemInteractivityOptionsMeta, exports.rotated, exports.legend, exports.axisX, exports.axisY, exports.pointLabelOptions, exports.axisXMeasure, exports.axisYMeasure, exports.scatterChartWeight, _coloring_options_1.coloringOptions]);


/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _point_label_options_1 = __webpack_require__(199);
exports.content = {
    propertyName: 'content', modelName: '@Content', displayName: 'DashboardWebStringId.Chart.Content', defaultVal: 'Argument', simpleFormAdapterItem: 'listEditor', values: {
        'Argument': 'DashboardWebStringId.Binding.Argument',
        'Weight': 'DashboardWebStringId.Chart.Weight',
        'Values': 'DashboardWebStringId.Binding.Values',
        'ArgumentAndWeight': 'DashboardWebStringId.Chart.ArgumentAndWeight',
        'ArgumentAndValues': 'DashboardWebStringId.Chart.ArgumentAndValues'
    }
};
exports.scatterPointLabelOptionsSerializationsInfo = _point_label_options_1.pointLabelOptionsBaseSerializationsInfo.concat([exports.content, _point_label_options_1.position]);


/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
var _data_dashboard_item_1 = __webpack_require__(26);
var interactivity_options_1 = __webpack_require__(32);
var _coloring_options_1 = __webpack_require__(75);
exports.treeMapvalues = { propertyName: _base_metadata_1.valuesPropertyName, modelName: 'Values', displayName: 'DashboardWebStringId.Binding.Values', array: true };
exports.treeMapArgumentsMeta = { propertyName: _base_metadata_1.argumentsPropertyName, modelName: 'Arguments', array: true };
exports.layoutAlgorithm = {
    propertyName: 'layoutAlgorithm', modelName: '@LayoutAlgorithm', displayName: 'DashboardWebStringId.TreemapLayoutAlgorithm', defaultVal: 'Squarified', simpleFormAdapterItem: 'listEditor', values: {
        'SliceAndDice': 'DashboardWebStringId.Treemap.SliceAndDiceLayoutAlgorithm',
        'Squarified': 'DashboardWebStringId.Treemap.SquarifiedLayoutAlgorithm',
        'Striped': 'DashboardWebStringId.Treemap.StripedLayoutAlgorithm'
    }
};
exports.layoutDirection = {
    propertyName: 'layoutDirection', modelName: '@LayoutDirection', displayName: 'DashboardWebStringId.Treemap.LayoutDirection', defaultVal: 'TopLeftToBottomRight', simpleFormAdapterItem: 'listEditor', values: {
        'BottomLeftToTopRight': 'DashboardWebStringId.Treemap.BottomLeftToTopRightLayoutDirection',
        'BottomRightToTopLeft': 'DashboardWebStringId.Treemap.BottomRightToTopLeftLayoutDirection',
        'TopLeftToBottomRight': 'DashboardWebStringId.Treemap.TopLeftToBottomRightLayoutDirection',
        'TopRightToBottomLeft': 'DashboardWebStringId.Treemap.TopRightToBottomLeftLayoutDirection'
    }
};
exports.tilesLabelContentType = {
    propertyName: 'tilesLabelContentType', modelName: '@TilesLabelContentType', displayName: 'DashboardWebStringId.TilesLabelContentType', defaultVal: 'Argument', simpleFormAdapterItem: 'listEditor', values: {
        'None': 'DashboardWebStringId.Treemap.TileLabelsNone',
        'Argument': 'DashboardWebStringId.Treemap.TileLabelsArgument',
        'Value': 'DashboardWebStringId.Treemap.TileLabelsValue',
        'ArgumentAndValue': 'DashboardWebStringId.Treemap.TileLabelsArgumentAndValue'
    }
};
exports.tilesTooltipContentType = {
    propertyName: 'tilesTooltipContentType', modelName: '@TilesTooltipContentType', displayName: 'DashboardWebStringId.TilesTooltipContentType', defaultVal: 'ArgumentAndValue', simpleFormAdapterItem: 'listEditor', values: {
        'None': 'DashboardWebStringId.Treemap.TileTooltipsNone',
        'Argument': 'DashboardWebStringId.Treemap.TileTooltipsArgument',
        'Value': 'DashboardWebStringId.Treemap.TileTooltipsValue',
        'ArgumentAndValue': 'DashboardWebStringId.Treemap.TileTooltipsArgumentAndValue'
    }
};
exports.groupsLabelContentType = {
    propertyName: 'groupsLabelContentType', modelName: '@GroupsLabelContentType', displayName: 'DashboardWebStringId.GroupsLabelContentType', defaultVal: 'Argument', simpleFormAdapterItem: 'listEditor', values: {
        'None': 'DashboardWebStringId.Treemap.GroupLabelsNone',
        'Argument': 'DashboardWebStringId.Treemap.GroupLabelsArgument',
        'Value': 'DashboardWebStringId.Treemap.GroupLabelsValue',
        'ArgumentAndValue': 'DashboardWebStringId.Treemap.GroupLabelsArgumentAndValue'
    }
};
exports.groupsTooltipContentType = {
    propertyName: 'groupsTooltipContentType', modelName: '@GroupsTooltipContentType', displayName: 'DashboardWebStringId.GroupsTooltipContentType', defaultVal: 'ArgumentAndValue', simpleFormAdapterItem: 'listEditor', values: {
        'None': 'DashboardWebStringId.Treemap.GroupTooltipsNone',
        'Argument': 'DashboardWebStringId.Treemap.GroupTooltipsArgument',
        'Value': 'DashboardWebStringId.Treemap.GroupTooltipsValue',
        'ArgumentAndValue': 'DashboardWebStringId.Treemap.GroupTooltipsArgumentAndValue'
    }
};
exports.treemapDashboardItemSerializationsInfo = _data_dashboard_item_1.dataDashboardItemSerializationsInfo.concat([exports.treeMapvalues, exports.treeMapArgumentsMeta, exports.layoutAlgorithm, exports.layoutDirection, exports.tilesLabelContentType, exports.tilesTooltipContentType, exports.groupsLabelContentType, exports.groupsTooltipContentType, interactivity_options_1._dashboardItemInteractivityOptionsMeta, _coloring_options_1.coloringOptions]);


/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.dataSourceNameSerialization = { propertyName: 'dataSource', modelName: '@DataSourceName', defaultVal: null };
exports.dataMemberSerialization = { propertyName: 'dataMember', modelName: '@DataMember', defaultVal: null };
exports.valueMemberSerialization = { propertyName: 'valueMemberName', modelName: '@ValueMember', displayName: 'DevExpress.DashboardCommon.DynamicListLookUpSettings.ValueMember', defaultVal: null };
exports.displayMemberSerialization = { propertyName: 'displayMemberName', modelName: '@DisplayMember', displayName: 'DevExpress.DashboardCommon.DynamicListLookUpSettings.DisplayMember', defaultVal: null };
exports.sortByMember = { propertyName: 'sortByMember', modelName: '@SortByMember', displayName: 'DashboardWebStringId.Parameters.SortByMember', defaultVal: null };
exports.sortOrder = {
    propertyName: 'sortOrder', modelName: '@SortOrder', displayName: 'DevExpress.DashboardCommon.DynamicListLookUpSettings.SortOrder', defaultVal: 'Ascending', simpleFormAdapterItem: 'listEditor', values: {
        'Ascending': 'DevExpress.DashboardCommon.DimensionSortOrder.Ascending',
        'Descending': 'DevExpress.DashboardCommon.DimensionSortOrder.Descending',
        'None': 'DevExpress.DashboardCommon.DimensionSortOrder.None'
    }
};
exports._dataMemberSerialization = { propertyName: '_dataMember', displayName: 'DevExpress.DashboardCommon.DynamicListLookUpSettings.DataMember' };
exports._dataSourceNameSerialization = { propertyName: '_dataSource', displayName: 'DevExpress.DashboardCommon.DynamicListLookUpSettings.DataSource' };
exports.dynamicListLookUpSettingsSerializationsInfo = [exports._dataSourceNameSerialization, exports.dataSourceNameSerialization, exports._dataMemberSerialization, exports.dataMemberSerialization, exports.valueMemberSerialization, exports.displayMemberSerialization, exports.sortByMember, exports.sortOrder];


/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var _base_metadata_1 = __webpack_require__(4);
var dynamic_list_lookup_settings_1 = __webpack_require__(319);
var static_list_lookup_settings_1 = __webpack_require__(320);
var _parameters_helper_1 = __webpack_require__(55);
exports.parameterVisible = { propertyName: 'parameterVisible', modelName: '@Visible', displayName: 'DevExpress.DashboardCommon.DashboardParameter.Visible', defaultVal: true, simpleFormAdapterItem: 'checkBoxEditor', from: _base_metadata_1.parseBool };
exports.description = { propertyName: 'description', modelName: '@Description', displayName: 'DevExpress.DashboardCommon.DashboardParameter.Description', defaultVal: '', simpleFormAdapterItem: 'textBoxEditor' };
exports.allowMultiselect = { propertyName: 'allowMultiselect', modelName: '@AllowMultiselect', displayName: 'DevExpress.DashboardCommon.DashboardParameter.AllowMultiselect', defaultVal: false, simpleFormAdapterItem: 'checkBoxEditor', from: _base_metadata_1.parseBool };
exports.allowNull = { propertyName: 'allowNull', modelName: '@AllowNull', displayName: 'DevExpress.DashboardCommon.DashboardParameter.AllowNull', defaultVal: false, simpleFormAdapterItem: 'checkBoxEditor', from: _base_metadata_1.parseBool };
exports.parameterName = { propertyName: 'name', modelName: '@Name', displayName: 'DashboardWebStringId.DataSources.CalculatedField.Name', defaultVal: '', simpleFormAdapterItem: 'textBoxEditor', validationRules: dx_analytics_core_1.default.Analytics.Internal.nameValidationRules };
exports.defaultValue = { propertyName: 'defaultValue', modelName: '@Value', displayName: 'DashboardWebStringId.Parameters.DefaultValue', externalDependencies: ['lookUpSourceType'] };
exports.parameterTypeSerialization = { propertyName: '_type', modelName: '@Type', defaultVal: 'System.String' };
exports.parameterTypePropertyGrid = { propertyName: 'type', displayName: 'DashboardWebStringId.FilterItem.Type', simpleFormAdapterItem: 'selectBoxEditor', valuesArray: (_parameters_helper_1.ParameterHelper.typeValues) };
exports.lookUpSourceType = {
    propertyName: 'lookUpSourceType', displayName: 'DashboardWebStringId.Parameters.LookUpSettingsType', values: {
        'None': 'DashboardWebStringId.Parameters.LookUpSettingsType.NoLookUp',
        'StaticListLookUpSettings': 'DashboardWebStringId.Parameters.LookUpSettingsType.StaticList',
        'DynamicListLookUpSettings': 'DashboardWebStringId.Parameters.LookUpSettingsType.DynamicList'
    }
};
exports.defaultValues = { propertyName: 'defaultValues', modelName: 'Values', array: true, displayName: 'DashboardWebStringId.Parameters.DefaultValue' };
exports.selectAllValues = { propertyName: 'selectAllValues', modelName: '@SelectAllValues', displayName: 'DevExpress.DashboardCommon.DashboardParameter.SelectAllValues', defaultVal: false, simpleFormAdapterItem: 'checkBoxEditor', from: _base_metadata_1.parseBool };
exports.dashboardParameterSerializationsInfo = [_base_metadata_1.itemType, exports.parameterName, exports.description, exports.parameterVisible, exports.allowNull, exports.allowMultiselect, exports.parameterTypeSerialization, exports.parameterTypePropertyGrid, exports.defaultValue, exports.selectAllValues, exports.lookUpSourceType, static_list_lookup_settings_1._staticListLookUpSettingsSerializationInfo, dynamic_list_lookup_settings_1._dynamicListLookUpSettingsSerializationInfo, exports.defaultValues];


/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var serializable_model_1 = __webpack_require__(5);
var _dynamic_list_lookup_settings_1 = __webpack_require__(317);
var DynamicListLookUpSettings = (function (_super) {
    __extends(DynamicListLookUpSettings, _super);
    function DynamicListLookUpSettings(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        var clearMembers = function () {
            _this.valueMemberName(null);
            _this.displayMemberName(null);
            _this.sortByMember(null);
        };
        _this._dataSource = ko.computed({
            read: function () {
                return _this.dataSource();
            },
            write: function (val) {
                _this.dataMember(null);
                clearMembers();
                _this.dataSource(val);
            }
        });
        _this._dataMember = ko.computed({
            read: function () {
                return _this.dataMember();
            },
            write: function (val) {
                clearMembers();
                _this.dataMember(val);
            }
        });
        return _this;
    }
    DynamicListLookUpSettings.prototype.getInfo = function () {
        return _dynamic_list_lookup_settings_1.dynamicListLookUpSettingsSerializationsInfo;
    };
    DynamicListLookUpSettings.prototype.equals = function (target) {
        return this.dataMember() === target.dataMember() &&
            this.dataSource() === target.dataSource() &&
            this.valueMemberName() === target.valueMemberName() &&
            this.displayMemberName() === target.displayMemberName() &&
            this.sortByMember() === target.sortByMember() &&
            this.sortOrder() === target.sortOrder();
    };
    DynamicListLookUpSettings.prototype.isPropertyDisabled = function (propertyName) {
        if (propertyName === _dynamic_list_lookup_settings_1.sortOrder.propertyName) {
            return !this.sortByMember();
        }
        return false;
    };
    DynamicListLookUpSettings.modelName = 'DynamicListLookUpSettings';
    return DynamicListLookUpSettings;
}(serializable_model_1.SerializableModel));
exports.DynamicListLookUpSettings = DynamicListLookUpSettings;
exports._dynamicListLookUpSettingsSerializationInfo = { propertyName: 'dynamicListLookUpSettings', displayName: 'DashboardWebStringId.Parameters.DynamicListLookUpSettings', type: DynamicListLookUpSettings, defaultVal: null, alwaysSerialize: true };


/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var _utils_1 = __webpack_require__(18);
var serializable_model_1 = __webpack_require__(5);
var look_up_value_1 = __webpack_require__(108);
var _static_list_lookup_settings_1 = __webpack_require__(321);
var _parameters_helper_1 = __webpack_require__(55);
var StaticListLookUpSettings = (function (_super) {
    __extends(StaticListLookUpSettings, _super);
    function StaticListLookUpSettings(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this._valueType = ko.observable();
        _this.values = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(modelJson.Values, function (item) { return new look_up_value_1.LookUpValue(item, serializer); });
        return _this;
    }
    StaticListLookUpSettings.prototype.getInfo = function () {
        return _static_list_lookup_settings_1.staticListLookUpSettingsSerializationsInfo;
    };
    StaticListLookUpSettings.prototype._updateValuesType = function (newType) {
        this._valueType(newType);
        if (this.values() && this.values().length > 0) {
            this.values().forEach(function (lookUpValue) {
                lookUpValue.valueType(newType);
                lookUpValue.value(_parameters_helper_1.ParameterHelper.convertSingleValue(lookUpValue.value(), newType));
            });
        }
    };
    StaticListLookUpSettings.modelName = 'StaticListLookUpSettings';
    __decorate([
        _utils_1.collectionItemType('Value')
    ], StaticListLookUpSettings.prototype, "values", void 0);
    return StaticListLookUpSettings;
}(serializable_model_1.SerializableModel));
exports.StaticListLookUpSettings = StaticListLookUpSettings;
exports._staticListLookUpSettingsSerializationInfo = { propertyName: 'staticListLookUpSettings', displayName: 'DashboardWebStringId.Parameters.StaticListLookUpSettings', type: StaticListLookUpSettings, defaultVal: null, alwaysSerialize: true };


/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var look_up_value_1 = __webpack_require__(108);
exports.lookUpValue = { propertyName: 'value', modelName: '#text', displayName: 'DashboardStringId.ParametersFormValueColumnCaption', simpleFormAdapterItem: 'textBoxEditor' };
exports.lookUpvalues = { propertyName: 'values', modelName: 'Values', displayName: 'DevExpress.DashboardCommon.StaticListLookUpSettings.Values', array: true, addHandler: function () { return new look_up_value_1.LookUpValue({}); } };
exports.staticListLookUpSettingsSerializationsInfo = [exports.lookUpvalues];


/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var data_source_1 = __webpack_require__(62);
var _json_data_source_1 = __webpack_require__(695);
var JsonDataSource = (function (_super) {
    __extends(JsonDataSource, _super);
    function JsonDataSource(dataSourceJSON, serializer) {
        if (dataSourceJSON === void 0) { dataSourceJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, dataSourceJSON, serializer) || this;
        _this.hasCalculatedFields = true;
        _this.hasFilter = true;
        return _this;
    }
    JsonDataSource.prototype.getInfo = function () {
        return _json_data_source_1.jsonDataSourceSerializationsInfo;
    };
    JsonDataSource.prototype.getDisplayNamePrefix = function () {
        return 'DashboardStringId.DefaultJsonDataSourceName';
    };
    JsonDataSource.prototype._getDefaultItemType = function () {
        return 'JsonDataSource';
    };
    return JsonDataSource;
}(data_source_1.DataSource));
exports.JsonDataSource = JsonDataSource;


/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var data_source_1 = __webpack_require__(62);
var _object_data_source_1 = __webpack_require__(486);
var ObjectDataSource = (function (_super) {
    __extends(ObjectDataSource, _super);
    function ObjectDataSource(dataSourceJSON, serializer) {
        if (dataSourceJSON === void 0) { dataSourceJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, dataSourceJSON, serializer) || this;
        _this.hasCalculatedFields = true;
        _this.hasFilter = true;
        return _this;
    }
    ObjectDataSource.prototype.getInfo = function () {
        return _object_data_source_1.objectDataSourceSerializationsInfo;
    };
    ObjectDataSource.prototype.getDisplayNamePrefix = function () {
        return 'DashboardStringId.DefaultObjectDataSourceName';
    };
    ObjectDataSource.prototype._getDefaultItemType = function () {
        return 'ObjectDataSource';
    };
    return ObjectDataSource;
}(data_source_1.DataSource));
exports.ObjectDataSource = ObjectDataSource;


/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var data_item_container_1 = __webpack_require__(141);
var _kpi_element_1 = __webpack_require__(192);
var KpiElement = (function (_super) {
    __extends(KpiElement, _super);
    function KpiElement(dataItemProvider, modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this._displayNameSeparator = 'vs';
        dataItemProvider._attachDataItem(_this, _kpi_element_1.kpiItemActualValue.propertyName);
        dataItemProvider._attachDataItem(_this, _kpi_element_1.kpiItemTargetValue.propertyName);
        return _this;
    }
    KpiElement.prototype._getDataId = function () {
        var dataItem = this.actualValue() || this.targetValue();
        return dataItem && dataItem.uniqueName() || null;
    };
    KpiElement.prototype._getInfoCore = function () {
        return _kpi_element_1.kpiElementSerializationsInfo;
    };
    KpiElement.prototype._getBindingModel = function () {
        return [
            {
                propertyName: _kpi_element_1.kpiItemActualValue.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.ActualValueCaption'
            },
            {
                propertyName: _kpi_element_1.kpiItemTargetValue.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.TargetValueCaption'
            }
        ];
    };
    return KpiElement;
}(data_item_container_1.DataItemContainer));
exports.KpiElement = KpiElement;


/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var series_item_1 = __webpack_require__(210);
var _kpi_item_1 = __webpack_require__(194);
var KpiItem = (function (_super) {
    __extends(KpiItem, _super);
    function KpiItem(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    KpiItem.prototype._getInfoCore = function () {
        return _kpi_item_1.kpiDashboardItemSerializationsInfo;
    };
    KpiItem.prototype._getMasterFilterMode = function () { return this.interactivityOptions.masterFilterMode(); };
    KpiItem.prototype._getDrillDownEnabled = function () { return this.interactivityOptions.isDrillDownEnabled(); };
    KpiItem.prototype._getIgnoreMasterFilter = function () { return this.interactivityOptions.ignoreMasterFilters(); };
    return KpiItem;
}(series_item_1.SeriesItem));
exports.KpiItem = KpiItem;


/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var _item_data_tuple_1 = __webpack_require__(98);
var _item_data_axis_names_1 = __webpack_require__(34);
var data_item_1 = __webpack_require__(8);
var _knockout_utils_1 = __webpack_require__(17);
var _utils_1 = __webpack_require__(18);
var _base_metadata_1 = __webpack_require__(4);
var data_dashboard_item_1 = __webpack_require__(9);
var _chart_item_base_1 = __webpack_require__(196);
var series_item_1 = __webpack_require__(210);
var ChartItemBase = (function (_super) {
    __extends(ChartItemBase, _super);
    function ChartItemBase(dashboardItemJSON, serializer) {
        if (dashboardItemJSON === void 0) { dashboardItemJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, dashboardItemJSON, serializer) || this;
        _this.__arguments = ko.observableArray([]);
        _this.arguments = ko.observableArray([]);
        _this.__arguments(dx_analytics_core_1.default.Analytics.Utils.deserializeArray(dashboardItemJSON.Arguments, function (item) { return new data_item_1.DataItemLink(_this, item, serializer); })());
        _this._subscribeDataItemLinkArrays(_chart_item_base_1.chartArgumentsMeta);
        _knockout_utils_1.subscribeAndPerform(_this.__seriesDimensions, function (newValue) {
            data_dashboard_item_1.DataDashboardItem._addColoringMeta(newValue);
        });
        _knockout_utils_1.subscribeAndPerform(_this.__arguments, function (newValue) {
            data_dashboard_item_1.DataDashboardItem._addColoringMeta(newValue);
        });
        return _this;
    }
    ChartItemBase.prototype._getInfoCore = function () {
        return _chart_item_base_1.chartItemBaseSerializationsInfo;
    };
    ChartItemBase.prototype._clearBindings = function () {
        _super.prototype._clearBindings.call(this);
        this.__arguments.removeAll();
    };
    ChartItemBase.prototype._getInteractivityDimensionLinks = function () {
        var targetDimensions = this._getTargetDimensions();
        if (targetDimensions) {
            if (targetDimensions === 'Arguments') {
                return this.__arguments();
            }
            else if (targetDimensions === 'Points') {
                return this.__arguments().concat(this.__seriesDimensions());
            }
        }
        return _super.prototype._getInteractivityDimensionLinks.call(this);
    };
    ChartItemBase.prototype._getTargetDimensions = function () {
        return 'Arguments';
    };
    ChartItemBase.prototype._getItemDataAxis = function () {
        if (this.interactivityOptions.targetDimensions() === 'Series') {
            return _item_data_axis_names_1.itemDataAxisNames.chartSeriesAxis;
        }
        else if (this.interactivityOptions.targetDimensions() === 'Arguments') {
            return _item_data_axis_names_1.itemDataAxisNames.chartArgumentAxis;
        }
        else if (this.interactivityOptions.targetDimensions() === 'Points') {
            return _item_data_axis_names_1.itemDataAxisNames.chartArgumentAxis;
        }
        else {
            throw Error('Unsupported interactivity type');
        }
    };
    ChartItemBase.prototype._getCurrentFilterValues = function () {
        var that = this, data = that._getItemData(), argumentNames = that.arguments().map(function (dim) { return dim.uniqueName(); }), seriesNames = that.seriesDimensions().map(function (dim) { return dim.uniqueName(); }), selectedValues = that._getSelectedValuesByItemName();
        if (!data)
            return;
        if (this.interactivityOptions.targetDimensions() === 'Arguments') {
            return data && data.getCurrentFilterValues(argumentNames, _item_data_axis_names_1.itemDataAxisNames.chartArgumentAxis, selectedValues);
        }
        else if (this.interactivityOptions.targetDimensions() === 'Series') {
            return data.getCurrentFilterValues(seriesNames, _item_data_axis_names_1.itemDataAxisNames.chartSeriesAxis, selectedValues);
        }
        else if (this.interactivityOptions.targetDimensions() === 'Points') {
            var argumentPoints = data.getCurrentFilterValues(that.arguments().map(function (dim) { return dim.uniqueName(); }), _item_data_axis_names_1.itemDataAxisNames.chartArgumentAxis, selectedValues.map(function (val) { return [val[0]]; }));
            var seriesPoints = data.getCurrentFilterValues(that.seriesDimensions().map(function (dim) { return dim.uniqueName(); }), _item_data_axis_names_1.itemDataAxisNames.chartSeriesAxis, selectedValues.map(function (val) { return [val[1]]; }));
            var tuples = [];
            argumentPoints.forEach(function (arg, index) {
                tuples.push(new _item_data_tuple_1.itemDataTuple([arg.getAxisPoint(_item_data_axis_names_1.itemDataAxisNames.chartArgumentAxis), seriesPoints[index].getAxisPoint(_item_data_axis_names_1.itemDataAxisNames.chartSeriesAxis)]));
            });
            return tuples;
        }
    };
    ChartItemBase.prototype._itemInteractivityByColumnAxis = function () {
        return this.interactivityOptions.targetDimensions() === 'Arguments';
    };
    ChartItemBase.prototype._getInteractivityAxisDimensionCount = function () {
        return this._itemInteractivityByColumnAxis() ? this.arguments().length : this.seriesDimensions().length;
    };
    ChartItemBase.prototype._getCanColorByMeasures = function () { return true; };
    ChartItemBase.prototype._getCanColorByDimensions = function () { return true; };
    ChartItemBase.prototype._getColorizableDataItemsInfo = function () {
        return [{
                items: this.__arguments(),
                prefixId: _base_metadata_1.BindingSectionTitles.Arguments
            }, {
                items: this.__seriesDimensions(),
                prefixId: _base_metadata_1.BindingSectionTitles.SeriesDimension
            }];
    };
    __decorate([
        _utils_1.collectionItemType('Argument')
    ], ChartItemBase.prototype, "__arguments", void 0);
    return ChartItemBase;
}(series_item_1.SeriesItem));
exports.ChartItemBase = ChartItemBase;


/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var serializable_model_1 = __webpack_require__(5);
var chart_series_creator_1 = __webpack_require__(109);
var _chart_pane_1 = __webpack_require__(497);
var ChartPane = (function (_super) {
    __extends(ChartPane, _super);
    function ChartPane(dataItemProvider, dashboardItemJSON, serializer) {
        if (dashboardItemJSON === void 0) { dashboardItemJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, dashboardItemJSON, serializer) || this;
        _this.createSeriesByViewType = chart_series_creator_1.ChartSeriesCreator.getSeriesCreator(dataItemProvider);
        _this.series = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(dashboardItemJSON.Series, function (item) { return chart_series_creator_1.ChartSeriesCreator.createSeries(dataItemProvider, item, serializer); });
        return _this;
    }
    ChartPane.prototype.getInfo = function () {
        return _chart_pane_1.chartPaneSerializationsInfo;
    };
    return ChartPane;
}(serializable_model_1.SerializableModel));
exports.ChartPane = ChartPane;


/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var serializable_model_1 = __webpack_require__(5);
var filter_element_item_base_1 = __webpack_require__(110);
var _combo_box_item_1 = __webpack_require__(297);
var ComboBoxItem = (function (_super) {
    __extends(ComboBoxItem, _super);
    function ComboBoxItem(dashboardItemJSON, serializer) {
        if (dashboardItemJSON === void 0) { dashboardItemJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, dashboardItemJSON, serializer) || this;
    }
    ComboBoxItem.prototype._getInfoCore = function () {
        return _combo_box_item_1.comboBoxDashboardItemSerializationsInfo;
    };
    ComboBoxItem.prototype._getDefaultItemType = function () {
        return 'ComboBox';
    };
    ComboBoxItem.prototype._allowAllValue = function () { return this._isMultiselectable() || this.showAllValue(); };
    ComboBoxItem.prototype._isMultiselectable = function () { return this.comboBoxType() === 'Checked'; };
    return ComboBoxItem;
}(filter_element_item_base_1.FilterElementItemBase));
exports.ComboBoxItem = ComboBoxItem;
serializable_model_1.itemTypesMap['ComboBox'] = { type: ComboBoxItem, groupName: 'filter', title: 'DashboardStringId.DefaultNameComboBoxItem', index: 320 };


/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _utils_1 = __webpack_require__(3);
var dashboard_state_1 = __webpack_require__(125);
var _dimension_filter_values_1 = __webpack_require__(175);
var _date_utils_1 = __webpack_require__(41);
var RangeStateController = (function () {
    function RangeStateController(item) {
        this.item = item;
    }
    Object.defineProperty(RangeStateController.prototype, "defaultDateTimePeriodName", {
        get: function () { return this.item.defaultDateTimePeriodName; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RangeStateController.prototype, "currentSelectedDateTimePeriodName", {
        get: function () { return this.item.currentSelectedDateTimePeriodName; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RangeStateController.prototype, "dateTimePeriods", {
        get: function () { return this.item.dateTimePeriods; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RangeStateController.prototype, "_selectionValues", {
        get: function () { return this.item._selectionValues; },
        enumerable: true,
        configurable: true
    });
    RangeStateController.prototype._getSelectionByPeriod = function (period) {
        return this.item._getSelectionByPeriod(period);
    };
    RangeStateController.prototype._setSelection = function (stateSelection) {
        this.item._setSelection(stateSelection);
    };
    RangeStateController.prototype.initialize = function () {
        var _this = this;
        if (this.defaultDateTimePeriodName()) {
            this.item._processItemSetPredefinedPeriod(this.defaultDateTimePeriodName());
        }
        this.dateTimePeriods.subscribe(function (newPeriods) {
            if (!newPeriods.filter(function (p) { return p.name() === _this.defaultDateTimePeriodName(); })[0]) {
                _this.defaultDateTimePeriodName(undefined);
            }
        });
        var subscribeOnDefaultPeriodNameChange = function () {
            _this.item._defaultDateTimePeriodIndexSubscription && _this.item._defaultDateTimePeriodIndexSubscription.dispose();
            _this.item._defaultDateTimePeriodIndexSubscription = null;
            var newPeriod = _this.dateTimePeriods().filter(function (p) { return p.name() === _this.defaultDateTimePeriodName(); })[0];
            if (newPeriod) {
                _this.item._defaultDateTimePeriodIndexSubscription = newPeriod.name.subscribe(function (changedName) {
                    _this.defaultDateTimePeriodName(changedName);
                });
            }
        };
        this.defaultDateTimePeriodName.subscribe(function (newName) {
            subscribeOnDefaultPeriodNameChange();
            _this.item._processItemSetPredefinedPeriod(newName);
        });
        subscribeOnDefaultPeriodNameChange();
        this.item._state = ko.computed(function () {
            var state = new dashboard_state_1.ItemState();
            if (_this.currentSelectedDateTimePeriodName()) {
                if (_this.currentSelectedDateTimePeriodName() !== _this.defaultDateTimePeriodName()) {
                    state.RangeFilterState = {
                        PeriodName: _this.currentSelectedDateTimePeriodName()
                    };
                }
            }
            else {
                var selection = _date_utils_1.toStringArray(_this._selectionValues());
                if (selection && selection.length && (!!selection[0][0] || !!selection[0][1])) {
                    state.RangeFilterState = {
                        Selection: {
                            Minimum: selection[0][0],
                            Maximum: selection[0][1]
                        }
                    };
                }
            }
            return state;
        });
    };
    RangeStateController.prototype.setState = function (itemState) {
        var obsoleteItemState = itemState;
        var rangeFilterState = itemState.RangeFilterState;
        var selectedPeriod;
        var selection;
        if (rangeFilterState) {
            var rangeSelection = rangeFilterState.Selection;
            if (rangeFilterState.PeriodName) {
                var period = this.dateTimePeriods().filter(function (p) { return p.name() === rangeFilterState.PeriodName; })[0];
                if (period) {
                    selectedPeriod = rangeFilterState.PeriodName;
                    selection = this._getSelectionByPeriod(period);
                }
            }
            else if (rangeSelection) {
                if (!!rangeSelection.Minimum || !!rangeSelection.Maximum) {
                    selection = [[rangeSelection.Minimum, rangeSelection.Maximum]];
                }
            }
        }
        else {
            selection = itemState.MasterFilterValues || obsoleteItemState.Selection;
        }
        this.currentSelectedDateTimePeriodName(selectedPeriod);
        this._setSelection(selection);
    };
    RangeStateController.prototype.removeSelectionFromState = function (state) {
        var itemState = _utils_1.deepExtend({}, state);
        itemState.RangeFilterState = undefined;
        return itemState;
    };
    RangeStateController.prototype.setPredefinedPeriodToState = function (state, periodName) {
        var itemState = _utils_1.deepExtend({}, state);
        itemState.RangeFilterState = { PeriodName: periodName };
        return itemState;
    };
    RangeStateController.prototype.setSelectionToState = function (state, selection) {
        var itemState = _utils_1.deepExtend({}, state);
        if (!itemState.RangeFilterState) {
            itemState.RangeFilterState = new dashboard_state_1.RangeFilterState();
        }
        var rangeSelection = new dashboard_state_1.RangeFilterSelection();
        if (selection && selection.length > 0 && selection[0].length > 0) {
            rangeSelection.Minimum = selection[0][0];
            rangeSelection.Maximum = selection[0][1];
        }
        itemState.RangeFilterState.Selection = rangeSelection;
        return itemState;
    };
    RangeStateController.prototype.extendContentState = function (content) {
        var _this = this;
        if (this.currentSelectedDateTimePeriodName()) {
            var selectedPeriod = this.dateTimePeriods().filter(function (p) { return p.name() === _this.currentSelectedDateTimePeriodName(); })[0];
            if (selectedPeriod) {
                content.ViewModel.SelectedPeriodIndex = this.dateTimePeriods().indexOf(selectedPeriod);
            }
        }
    };
    RangeStateController.prototype._getDisplayFilterValues = function (limitCount) {
        var metaData = this.item._dataManager() ? this.item._dataManager().getMetaData() : undefined, selection = this.item._outputFilter(), outFilterValues = [], argumentDimension = selection && selection.dimensions && selection.dimensions[0];
        if (argumentDimension) {
            var dimensionId = argumentDimension['@DefaultId'];
            var format = metaData ? metaData.getDimensionFormat(dimensionId) : undefined;
            if (!_utils_1.arrayEquals(selection.range, this.item._fullRange())) {
                var filterValues = new _dimension_filter_values_1.DimensionFilterValues(this.item._getDimensionDisplayName(dimensionId));
                filterValues.Values.push({
                    Type: 'Range',
                    RangeLeft: selection.range[0],
                    RangeRight: selection.range[1],
                    Format: format
                });
                outFilterValues.push(filterValues);
            }
        }
        return outFilterValues;
    };
    return RangeStateController;
}());
exports.RangeStateController = RangeStateController;


/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
var serializable_model_1 = __webpack_require__(5);
var GridColumnTotal = (function (_super) {
    __extends(GridColumnTotal, _super);
    function GridColumnTotal(modelJson, serializer) {
        return _super.call(this, modelJson, serializer) || this;
    }
    GridColumnTotal.prototype.getInfo = function () {
        return exports._gridColumnTotalSerializationsInfo;
    };
    GridColumnTotal.prototype._getDefaultItemType = function () {
        return 'Total';
    };
    return GridColumnTotal;
}(serializable_model_1.TypedSerializableModel));
exports.GridColumnTotal = GridColumnTotal;
exports._totalTypeTemplate = {
    propertyName: 'totalType', modelName: '@Type', displayName: 'DashboardWebStringId.Grid.TotalType', defaultVal: 'Count', simpleFormAdapterItem: 'selectBoxEditor',
};
exports._gridColumnTotalSerializationsInfo = [_base_metadata_1.itemType, exports._totalTypeTemplate];


/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _base_metadata_1 = __webpack_require__(4);
var ModelSubscriber = (function () {
    function ModelSubscriber(_model) {
        this._model = _model;
        this.handlers = [];
        this._subscribe(_model);
    }
    ModelSubscriber.changePropertyQuietly = function (property, func) {
        try {
            property[ModelSubscriber.dxSubscriptionSuspend] = true;
            func();
        }
        finally {
            delete property[ModelSubscriber.dxSubscriptionSuspend];
        }
    };
    ModelSubscriber.prototype._unsubscribe = function (model) {
        var _this = this;
        var serializationsInfo = model.getInfo();
        serializationsInfo
            .filter(function (serializationInfo) { return !!serializationInfo.modelName; })
            .forEach(function (serializationInfo) {
            var property = model[serializationInfo.propertyName];
            var propertyValue = ko.unwrap(property);
            if (property[ModelSubscriber.dxSubscription]) {
                var subscription = property[ModelSubscriber.dxSubscription];
                subscription.dispose();
                delete property[ModelSubscriber.dxSubscription];
            }
            if (_this._isPropertySerializeModel(propertyValue)) {
                _this._unsubscribe(propertyValue);
            }
        });
    };
    ModelSubscriber.prototype._subscribe = function (model) {
        var _this = this;
        if (!model.getInfo) {
            return;
        }
        var serializationsInfo = model.getInfo();
        serializationsInfo
            .filter(function (serializationInfo) { return !!serializationInfo.modelName; })
            .forEach(function (serializationInfo) {
            var property = model[serializationInfo.propertyName];
            var category = !!serializationInfo['category'] ? serializationInfo['category'] : _base_metadata_1.PropertyCategory.Data;
            var propertyValue = ko.unwrap(property);
            if (Array.isArray(property)) {
                throw new Error('Non-observable arrays are not supported.');
            }
            if (category === _base_metadata_1.PropertyCategory.NoUpdate)
                return;
            if (Array.isArray(propertyValue) && !property[ModelSubscriber.dxSubscription]) {
                propertyValue.forEach(function (item) { return _this._subscribe(item); });
                property[ModelSubscriber.dxSubscription] = property.subscribe(function (arrayChanges) {
                    arrayChanges.forEach(function (arrayChange) {
                        var changedStatus = 'unknown';
                        if (arrayChange.status === 'added') {
                            _this._subscribe(arrayChange.value);
                            changedStatus = 'added';
                        }
                        if (arrayChange.status === 'deleted') {
                            _this._unsubscribe(arrayChange.value);
                            changedStatus = 'deleted';
                        }
                        if (property[ModelSubscriber.dxSubscriptionSuspend] !== true)
                            _this._propertyChanged(category, arrayChange.value, serializationInfo.propertyName, changedStatus);
                    });
                }, null, 'arrayChange');
            }
            else if (ko.isObservable(property) && !property[ModelSubscriber.dxSubscription]) {
                var getSubscribeHandler = function (prevModel) { return function (model) {
                    if (_this._isPropertySerializeModel(prevModel)) {
                        _this._unsubscribe(prevModel);
                    }
                    if (_this._isPropertySerializeModel(model)) {
                        _this._subscribe(model);
                    }
                }; };
                var subscriberHandler = getSubscribeHandler(propertyValue);
                property[ModelSubscriber.dxSubscription] = property.subscribe(function (val) {
                    if (property[ModelSubscriber.dxSubscriptionSuspend] !== true) {
                        _this._propertyChanged(category, model, serializationInfo.propertyName, 'changed');
                    }
                    if (category !== _base_metadata_1.PropertyCategory.NoUpdateByObservableValue) {
                        subscriberHandler(val);
                        subscriberHandler = getSubscribeHandler(val);
                    }
                });
                if (category !== _base_metadata_1.PropertyCategory.NoUpdateByObservableValue && _this._isPropertySerializeModel(propertyValue)) {
                    _this._subscribe(propertyValue);
                }
            }
            else if (!ko.isObservable(property) && _this._isPropertySerializeModel(propertyValue)) {
                _this._subscribe(propertyValue);
            }
        });
    };
    ModelSubscriber.prototype._propertyChanged = function (category, model, propertyName, status) {
        this.handlers.forEach(function (handler) { return handler(category, model, propertyName, status); });
    };
    ModelSubscriber.prototype.registerHandler = function (handler) {
        this.handlers.push(handler);
    };
    ModelSubscriber.prototype._isPropertySerializeModel = function (propertyValue) {
        return propertyValue && propertyValue['getInfo'];
    };
    ModelSubscriber.prototype.dispose = function () {
        this._unsubscribe(this._model);
    };
    ModelSubscriber.dxSubscription = '__dx_notifier_subscription';
    ModelSubscriber.dxSubscriptionSuspend = '__dx_notifier_subscription_suspend';
    return ModelSubscriber;
}());
exports.ModelSubscriber = ModelSubscriber;


/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var data_item_container_1 = __webpack_require__(141);
var _chorolpeth_map_1 = __webpack_require__(308);
var ChoroplethMap = (function (_super) {
    __extends(ChoroplethMap, _super);
    function ChoroplethMap(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this._displayNameSeparator = 'vs';
        return _this;
    }
    return ChoroplethMap;
}(data_item_container_1.DataItemContainer));
exports.ChoroplethMap = ChoroplethMap;
var ValueMap = (function (_super) {
    __extends(ValueMap, _super);
    function ValueMap(dataItemProvider, modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        dataItemProvider._attachDataItem(_this, _chorolpeth_map_1.chorolpethMapValue.propertyName);
        return _this;
    }
    ValueMap.prototype._getInfoCore = function () {
        return _chorolpeth_map_1.valueMapSerializationsInfo;
    };
    ValueMap.prototype._getDataId = function () {
        return this.value() && this.value().uniqueName() || null;
    };
    ValueMap.prototype._getBindingModel = function () {
        return [
            {
                propertyName: _chorolpeth_map_1.chorolpethMapValue.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardWebStringId.Binding.SetValue'
            }
        ];
    };
    ValueMap.prototype._getDefaultItemType = function () { return 'ValueMap'; };
    return ValueMap;
}(ChoroplethMap));
exports.ValueMap = ValueMap;
var DeltaMap = (function (_super) {
    __extends(DeltaMap, _super);
    function DeltaMap(dataItemProvider, modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        dataItemProvider._attachDataItem(_this, _chorolpeth_map_1.deltaMapActualValue.propertyName);
        dataItemProvider._attachDataItem(_this, _chorolpeth_map_1.deltaMapTargetValue.propertyName);
        return _this;
    }
    DeltaMap.prototype._getInfoCore = function () {
        return _chorolpeth_map_1.deltaMapSerializationsInfo;
    };
    DeltaMap.prototype._getDataId = function () {
        var dataItem = this.actualValue() && this.targetValue();
        return dataItem && dataItem.uniqueName() || null;
    };
    DeltaMap.prototype._getBindingModel = function () {
        return [
            {
                propertyName: _chorolpeth_map_1.deltaMapActualValue.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.ActualValueCaption'
            },
            {
                propertyName: _chorolpeth_map_1.deltaMapTargetValue.propertyName,
                dataItemType: 'Measure',
                emptyPlaceholder: 'DashboardStringId.TargetValueCaption'
            }
        ];
    };
    DeltaMap.prototype._getDefaultItemType = function () { return 'DeltaMap'; };
    return DeltaMap;
}(ChoroplethMap));
exports.DeltaMap = DeltaMap;


/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var _base_metadata_1 = __webpack_require__(4);
var serializable_model_1 = __webpack_require__(5);
var chorolpeth_map_1 = __webpack_require__(332);
var map_item_1 = __webpack_require__(214);
var _chorolpeth_map_item_1 = __webpack_require__(201);
var ChoroplethMapItem = (function (_super) {
    __extends(ChoroplethMapItem, _super);
    function ChoroplethMapItem(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.maps = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(modelJson.Maps, function (item) { return _this._createMap(item, serializer); });
        _this._attachDataItem(_this, _chorolpeth_map_item_1.attributeDimension.propertyName);
        _this._shapeFilesAttributeNameList.subscribe(function (list) {
            if ((!_this.attributeName() && list && list.length > 0) || list.indexOf(_this.attributeName()) === -1) {
                _this.attributeName(list[0]);
            }
        });
        return _this;
    }
    ChoroplethMapItem.prototype._getInteractivityDimensionLinks = function () {
        return [this.__attributeDimension];
    };
    ChoroplethMapItem.prototype._clearBindings = function () {
        _super.prototype._clearBindings.call(this);
        this.maps.removeAll();
    };
    ChoroplethMapItem.prototype._createMap = function (mapJSON, serializer) {
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var itemType = mapJSON['@ItemType'];
        return new ChoroplethMapItem.choroplethMapTypesMap[itemType].constructor(this, mapJSON, serializer);
    };
    ChoroplethMapItem.prototype._getInfoCore = function () {
        return _chorolpeth_map_item_1.choroplethMapDashboardItemSerializationsInfo;
    };
    ChoroplethMapItem.prototype._getDefaultItemType = function () {
        return 'ChoroplethMap';
    };
    ChoroplethMapItem.prototype._getLayersCount = function () {
        return !!this.maps ? this.maps().length : 0;
    };
    ChoroplethMapItem.prototype._getLayerName = function () {
        return this._getDataItemContainerDisplayName(this.maps()[this._selectedElementIndex() || 0]);
    };
    ChoroplethMapItem.prototype._updateContentViewModel = function (content) {
        _super.prototype._updateContentViewModel.call(this, content);
        var mapContent = this._paneContentHolder.getContent(_base_metadata_1.PropertyCategory.Map);
        if (mapContent && mapContent.ViewModel) {
            content.ViewModel.ToolTipAttributeName = mapContent.ViewModel.ToolTipAttributeName;
            if (mapContent.ViewModel.ChoroplethColorizer) {
                if (!content.ViewModel.ChoroplethColorizer)
                    content.ViewModel.ChoroplethColorizer = {};
                content.ViewModel.ChoroplethColorizer.AttributeName = mapContent.ViewModel.ChoroplethColorizer.AttributeName;
            }
        }
    };
    ChoroplethMapItem.choroplethMapTypesMap = {
        'ValueMap': {
            constructor: chorolpeth_map_1.ValueMap,
            displayName: 'DashboardWebStringId.Map.ValueMap',
            icon: 'dx-dashboard-grid-column-measure'
        },
        'DeltaMap': {
            constructor: chorolpeth_map_1.DeltaMap,
            displayName: 'DashboardWebStringId.Map.DeltaMap',
            icon: 'dx-dashboard-grid-column-delta'
        }
    };
    return ChoroplethMapItem;
}(map_item_1.MapItem));
exports.ChoroplethMapItem = ChoroplethMapItem;
serializable_model_1.itemTypesMap['ChoroplethMap'] = { type: ChoroplethMapItem, groupName: 'maps', title: 'DashboardWebStringId.DefaultNameChoroplethMapItem', index: 220 };


/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var data_item_1 = __webpack_require__(8);
var measure_1 = __webpack_require__(59);
var _data_item_1 = __webpack_require__(20);
var pivot_calc_window_definition_1 = __webpack_require__(527);
var _utils_1 = __webpack_require__(18);
var serializable_model_1 = __webpack_require__(5);
var data_dashboard_item_1 = __webpack_require__(9);
var _pivot_item_1 = __webpack_require__(311);
var PivotItem = (function (_super) {
    __extends(PivotItem, _super);
    function PivotItem(dashboardItemJSON, serializer) {
        if (dashboardItemJSON === void 0) { dashboardItemJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, dashboardItemJSON, serializer) || this;
        _this.columns = ko.observableArray([]);
        _this.rows = ko.observableArray([]);
        _this.values = ko.observableArray([]);
        _this.__columns = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(dashboardItemJSON.Columns, function (item) { return new data_item_1.DataItemLink(_this, item, serializer); });
        _this.__rows = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(dashboardItemJSON.Rows, function (item) { return new data_item_1.DataItemLink(_this, item, serializer); });
        _this.__values = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(dashboardItemJSON.Values, function (item) { return new data_item_1.DataItemLink(_this, item, serializer); });
        _this._subscribeDataItemLinkArrays(_pivot_item_1.pivotColumns, _pivot_item_1.pivotRows, _pivot_item_1.pivotValues);
        _this.__values.subscribe(function (newValue) {
            _this._setCustomOptionsPropertyOnMeasures(newValue);
            _this._setLinkCollectionAcceptableShapingType(newValue, data_item_1.AcceptableShapingType.String);
        });
        _this.__rows.subscribe(function (newValue) {
            _this._setCustomOptionsPropertyOnDimensions(newValue);
        });
        _this.__columns.subscribe(function (newValue) {
            _this._setCustomOptionsPropertyOnDimensions(newValue);
        });
        _this._setCustomOptionsPropertyOnMeasures(_this.__values());
        _this._setLinkCollectionAcceptableShapingType(_this.__values(), data_item_1.AcceptableShapingType.String);
        _this._setCustomOptionsPropertyOnDimensions(_this.__rows());
        _this._setCustomOptionsPropertyOnDimensions(_this.__columns());
        _this.autoExpandColumnGroups.subscribe(function () {
            _this._expandingManager.resetExpandingParams();
            _this._expandingManager.resetColumnViewState();
        });
        _this.autoExpandRowGroups.subscribe(function () {
            _this._expandingManager.resetExpandingParams();
            _this._expandingManager.resetRowViewState();
        });
        return _this;
    }
    PivotItem.prototype._clearBindings = function () {
        _super.prototype._clearBindings.call(this);
        this.__columns.removeAll();
        this.__rows.removeAll();
        this.__values.removeAll();
    };
    PivotItem.prototype._getInfoCore = function () {
        return _pivot_item_1.pivotDashboardItemSerializationsInfo;
    };
    PivotItem.prototype._canChangeDataItemVisibilityOptions = function (dataItem) {
        return this.__values().some(function (value) { return value.dataItem() === dataItem; }) || this.__rows().some(function (value) { return value.dataItem() === dataItem; }) || this.__columns().some(function (value) { return value.dataItem() === dataItem; });
    };
    PivotItem.prototype._isTotalsVisibilityOptionEnabled = function (dataItem) {
        if (dataItem instanceof measure_1.Measure)
            return true;
        var localRows = this.__rows();
        if (localRows.length > 0 && localRows.some(function (row) { return row.dataItem() == dataItem; })) {
            return localRows.length > 0 && this.layoutType() != 'Compact' && dataItem != localRows[localRows.length - 1].dataItem();
        }
        var localColumns = this.__columns();
        return localColumns.length > 0 && localColumns.some(function (column) { return column.dataItem() == dataItem; }) && dataItem != localColumns[localColumns.length - 1].dataItem();
    };
    PivotItem.prototype._setCustomOptionsPropertyOnMeasures = function (links) {
        links.forEach(function (value) {
            value._specifics.customOptionsProperties = [{
                    serializationInfo: _data_item_1.showValues
                }, {
                    serializationInfo: _data_item_1.showTotals
                }, {
                    serializationInfo: _data_item_1.showGrandTotals
                }];
        });
    };
    PivotItem.prototype._setCustomOptionsPropertyOnDimensions = function (links) {
        var _this = this;
        links.forEach(function (row) {
            row._specifics.customOptionsProperties = [{
                    serializationInfo: _data_item_1.showTotals,
                    filter: function (dataItem) { return _this._canChangeDataItemVisibilityOptions(dataItem); },
                    disabledRule: function (dataItem) { return !_this._isTotalsVisibilityOptionEnabled(dataItem); }
                }];
        });
    };
    PivotItem.prototype._getDefaultItemType = function () {
        return 'Pivot';
    };
    PivotItem.prototype._extendContentState = function (content) {
        content.PivotExpandViewState = this._expandingManager.getPivotExpandViewState();
    };
    PivotItem.prototype._getIgnoreMasterFilter = function () { return this.interactivityOptions.ignoreMasterFilters(); };
    PivotItem.prototype._getDefaultCalculationWindowDefinition = function () {
        return new pivot_calc_window_definition_1.PivotWindowDefinition();
    };
    __decorate([
        _utils_1.collectionItemType('Column')
    ], PivotItem.prototype, "__columns", void 0);
    __decorate([
        _utils_1.collectionItemType('Row')
    ], PivotItem.prototype, "__rows", void 0);
    __decorate([
        _utils_1.collectionItemType('Value')
    ], PivotItem.prototype, "__values", void 0);
    return PivotItem;
}(data_dashboard_item_1.DataDashboardItem));
exports.PivotItem = PivotItem;
serializable_model_1.itemTypesMap['Pivot'] = { type: PivotItem, groupName: 'common', title: 'DashboardStringId.DefaultNamePivotItem', index: 20 };


/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(37);
__webpack_require__(706);
__webpack_require__(707);
__webpack_require__(215);
__export(__webpack_require__(336));
__export(__webpack_require__(597));
__export(__webpack_require__(599));
__export(__webpack_require__(331));
__export(__webpack_require__(600));
__export(__webpack_require__(602));
__export(__webpack_require__(603));
__export(__webpack_require__(76));
__export(__webpack_require__(604));
__export(__webpack_require__(360));
__export(__webpack_require__(361));
__export(__webpack_require__(605));
__export(__webpack_require__(598));
__export(__webpack_require__(215));
__export(__webpack_require__(606));
__export(__webpack_require__(40));
__export(__webpack_require__(362));


/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(709);
__webpack_require__(710);
__webpack_require__(711);
__webpack_require__(712);
__export(__webpack_require__(123));
__export(__webpack_require__(112));
__export(__webpack_require__(540));
__export(__webpack_require__(541));
__export(__webpack_require__(337));
__export(__webpack_require__(713));
__export(__webpack_require__(91));
__export(__webpack_require__(542));
__export(__webpack_require__(546));
__export(__webpack_require__(340));
__export(__webpack_require__(552));
__export(__webpack_require__(551));
__export(__webpack_require__(221));
__export(__webpack_require__(553));
__export(__webpack_require__(222));
__export(__webpack_require__(344));
__export(__webpack_require__(556));
__export(__webpack_require__(533));
__export(__webpack_require__(144));
__export(__webpack_require__(557));
__export(__webpack_require__(29));
__export(__webpack_require__(559));
__export(__webpack_require__(560));
__export(__webpack_require__(347));
__export(__webpack_require__(573));
__export(__webpack_require__(574));
__export(__webpack_require__(575));
__export(__webpack_require__(576));
__export(__webpack_require__(577));
__export(__webpack_require__(153));
__export(__webpack_require__(351));
__export(__webpack_require__(345));
__export(__webpack_require__(150));
__export(__webpack_require__(348));
__export(__webpack_require__(346));
__export(__webpack_require__(578));
__export(__webpack_require__(579));
__export(__webpack_require__(580));
__export(__webpack_require__(720));
__export(__webpack_require__(581));
__export(__webpack_require__(582));
__export(__webpack_require__(583));
__export(__webpack_require__(349));
__export(__webpack_require__(721));
__export(__webpack_require__(217));
__export(__webpack_require__(584));
__export(__webpack_require__(34));
__export(__webpack_require__(543));
__export(__webpack_require__(148));
__export(__webpack_require__(149));
__export(__webpack_require__(31));
__export(__webpack_require__(341));
__export(__webpack_require__(218));
__export(__webpack_require__(342));
__export(__webpack_require__(547));
__export(__webpack_require__(548));
__export(__webpack_require__(549));
__export(__webpack_require__(550));
__export(__webpack_require__(352));
__export(__webpack_require__(339));
__export(__webpack_require__(219));
__export(__webpack_require__(338));
__export(__webpack_require__(545));
__export(__webpack_require__(586));
__export(__webpack_require__(353));
__export(__webpack_require__(587));
__export(__webpack_require__(588));
__export(__webpack_require__(558));
__export(__webpack_require__(152));
__export(__webpack_require__(354));
__export(__webpack_require__(723));
__export(__webpack_require__(343));
__export(__webpack_require__(151));
__export(__webpack_require__(220));
__export(__webpack_require__(562));
__export(__webpack_require__(563));
__export(__webpack_require__(566));
__export(__webpack_require__(569));
__export(__webpack_require__(223));
__export(__webpack_require__(565));
__export(__webpack_require__(564));
__export(__webpack_require__(567));
__export(__webpack_require__(561));
__export(__webpack_require__(154));
__export(__webpack_require__(570));
__export(__webpack_require__(350));
__export(__webpack_require__(63));
__export(__webpack_require__(571));
__export(__webpack_require__(572));
__export(__webpack_require__(568));
__export(__webpack_require__(28));
__export(__webpack_require__(237));
__export(__webpack_require__(77));
__export(__webpack_require__(147));
__export(__webpack_require__(355));
__export(__webpack_require__(118));


/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var _formatter_1 = __webpack_require__(25);
var _localization_ids_1 = __webpack_require__(21);
var _localizer_1 = __webpack_require__(16);
var _utils_1 = __webpack_require__(3);
var caption_toolbar_options_1 = __webpack_require__(64);
var _caption_toolbar_css_classes_1 = __webpack_require__(31);
var _dashboard_title_view_constants_1 = __webpack_require__(91);
var _filter_icon_tooptip_1 = __webpack_require__(542);
var DashboardTitleToolbarAdapter = (function () {
    function DashboardTitleToolbarAdapter() {
    }
    DashboardTitleToolbarAdapter.getTitleOptions = function (titleViewModel, masterFilterValues, showExportDialog, showParametersDialog, allowExport) {
        var _this = this;
        var contentItems = [];
        var actionItems = [];
        if (titleViewModel) {
            var imageViewModel_1 = titleViewModel.LayoutModel.ImageViewModel;
            var exportMenu = {
                title: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ExportTo),
                items: [],
                itemClick: function (itemData, itemElement, index) { showExportDialog(_caption_toolbar_css_classes_1._convertToExportFormat(itemData)); },
                type: 'icons'
            };
            exportMenu.items.push(_caption_toolbar_css_classes_1.cssClasses.iconExportToPDF);
            if (_caption_toolbar_css_classes_1.Settings.allowExportToImage)
                exportMenu.items.push(_caption_toolbar_css_classes_1.cssClasses.iconExportToImage);
            exportMenu.items.push(_caption_toolbar_css_classes_1.cssClasses.iconExportToExcel);
            if (imageViewModel_1) {
                contentItems.push({
                    name: caption_toolbar_options_1.dashboardToolbarItemNames.dashboardTitleImage,
                    template: function () {
                        var imageSrs = (imageViewModel_1.Url ? imageViewModel_1.Url : 'data:' + imageViewModel_1.MimeType + ';base64,' + imageViewModel_1.SourceBase64String);
                        var $image = $('<img>').attr('src', imageSrs).height(_dashboard_title_view_constants_1.titleHeight + 'px');
                        $image.on('load', function () {
                            var imageHeight = $image.height();
                            if (imageHeight > _dashboard_title_view_constants_1.titleHeight) {
                                $image.width(Math.floor($image.width() * (_dashboard_title_view_constants_1.titleHeight / imageHeight)));
                                $image.height(_dashboard_title_view_constants_1.titleHeight);
                            }
                            else {
                                $image.css('margin-top', Math.ceil((_dashboard_title_view_constants_1.titleHeight - imageHeight) / 2));
                            }
                            $image.css({ visibility: 'visible' });
                        });
                        return $image;
                    }
                });
            }
            if (titleViewModel.Text) {
                contentItems.push({
                    name: caption_toolbar_options_1.dashboardToolbarItemNames.dashboardTitle,
                    type: 'text',
                    text: titleViewModel.Text
                });
            }
            if (titleViewModel.IncludeMasterFilterValues && masterFilterValues && masterFilterValues.length == 1 && masterFilterValues[0].Values.length == 1)
                contentItems.push({
                    name: caption_toolbar_options_1.dashboardToolbarItemNames.titleFilterText,
                    template: function () {
                        return $('<div/>').text(_this._getMasterFilterText(masterFilterValues)).addClass([_caption_toolbar_css_classes_1.cssClasses.filterText, _caption_toolbar_css_classes_1.cssClasses.ellipsisText].join(' '));
                    }
                });
            if (titleViewModel.IncludeMasterFilterValues && masterFilterValues && (masterFilterValues.length > 1 || (masterFilterValues.length > 0 && masterFilterValues[0].Values.length > 1)))
                contentItems.push({
                    name: caption_toolbar_options_1.dashboardToolbarItemNames.titleFilterIcon,
                    icon: _caption_toolbar_css_classes_1.cssClasses.iconFilter,
                    type: 'button',
                    tooltip: {
                        template: function (contentElement) {
                            return _filter_icon_tooptip_1.FilterIconTooltip.getTooltipContent(_utils_1.$wrap(contentElement), masterFilterValues);
                        },
                    }
                });
            if (allowExport)
                actionItems.push({
                    name: caption_toolbar_options_1.dashboardToolbarItemNames.exportMenu,
                    menu: exportMenu,
                    icon: _caption_toolbar_css_classes_1.cssClasses.iconItemExport,
                    type: 'menu',
                    hint: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ExportTo)
                });
            if (titleViewModel.ShowParametersButton)
                actionItems.push({
                    name: caption_toolbar_options_1.dashboardToolbarItemNames.parameters,
                    click: function (element) { showParametersDialog(); },
                    icon: _caption_toolbar_css_classes_1.cssClasses.iconParameters,
                    type: 'button',
                    hint: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ParametersFormCaption)
                });
        }
        return {
            contentItems: contentItems,
            actionItems: actionItems,
            navigationItems: []
        };
    };
    DashboardTitleToolbarAdapter._getMasterFilterText = function (masterFilterValues) {
        if (masterFilterValues) {
            masterFilterValues.forEach(function (dimFilterValue) {
                dimFilterValue.Values.forEach(function (val) {
                    val.Format = val.Format || {};
                });
            });
            if (masterFilterValues.length == 1 && masterFilterValues[0].Values.length == 1) {
                return _formatter_1.formatFilterValue(masterFilterValues[0].Values[0]);
            }
        }
        return undefined;
    };
    return DashboardTitleToolbarAdapter;
}());
exports.DashboardTitleToolbarAdapter = DashboardTitleToolbarAdapter;


/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _caption_toolbar_arranger_1 = __webpack_require__(148);
var _caption_toolbar_base_1 = __webpack_require__(149);
var _caption_toolbar_css_classes_1 = __webpack_require__(31);
var DashboardTitleToolbar = (function (_super) {
    __extends(DashboardTitleToolbar, _super);
    function DashboardTitleToolbar(_container, _controlContainer, _popupContainer, encodeHtml, allowHideEmptyToolbar, _optionalClass) {
        if (allowHideEmptyToolbar === void 0) { allowHideEmptyToolbar = false; }
        var _this = _super.call(this, _container, _controlContainer, _popupContainer, encodeHtml) || this;
        _this.allowHideEmptyToolbar = allowHideEmptyToolbar;
        _this._optionalClass = _optionalClass;
        _this._showStaticItemsOnCenter = false;
        _this._className = _this._optionalClass ? [_this._optionalClass, _caption_toolbar_css_classes_1.cssClasses.title].join(' ') : _caption_toolbar_css_classes_1.cssClasses.title;
        return _this;
    }
    Object.defineProperty(DashboardTitleToolbar.prototype, "_staticItemsClass", {
        get: function () {
            return this._showStaticItemsOnCenter ? _caption_toolbar_css_classes_1.cssClasses.toolbarCenter : _caption_toolbar_css_classes_1.cssClasses.toolbarBefore;
        },
        enumerable: true,
        configurable: true
    });
    DashboardTitleToolbar.prototype.calcHeight = function (options) {
        if (this._visible(options)) {
            return _super.prototype.calcHeight.call(this, options);
        }
        else {
            return 0;
        }
    };
    DashboardTitleToolbar.prototype.update = function (options, showStaticItemsOnCenter) {
        this._showStaticItemsOnCenter = showStaticItemsOnCenter || false;
        var heightChanded = false;
        if (this._visible(options)) {
            heightChanded = _super.prototype.update.call(this, options);
        }
        else if (this._initialized) {
            this.dispose();
            heightChanded = true;
        }
        return heightChanded;
    };
    DashboardTitleToolbar.prototype._getVisibleItems = function () {
        return _caption_toolbar_arranger_1.arrangeTitleToolbarItems(this._options, this._showStaticItemsOnCenter);
    };
    DashboardTitleToolbar.prototype._createInstance = function () {
        return new DashboardTitleToolbar(undefined, undefined, undefined, this.encodeHtml, this.allowHideEmptyToolbar, this._optionalClass);
    };
    DashboardTitleToolbar.prototype._visible = function (options) {
        return !this.allowHideEmptyToolbar || options.actionItems.length > 0 || options.navigationItems.length > 0 || options.stateItems.length > 0 || options.staticItems.length > 0;
    };
    return DashboardTitleToolbar;
}(_caption_toolbar_base_1.DashboardCaptionToolbarBase));
exports.DashboardTitleToolbar = DashboardTitleToolbar;


/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var browser = __webpack_require__(99);
var list_1 = __webpack_require__(171);
var popover_1 = __webpack_require__(714);
__webpack_require__(544);
var tile_view_1 = __webpack_require__(544);
var _utils_1 = __webpack_require__(3);
var _caption_toolbar_css_classes_1 = __webpack_require__(31);
var PopupMenuCreator = (function () {
    function PopupMenuCreator() {
    }
    PopupMenuCreator.toggleMenu = function (element, menu, container, controlContainer, onMenuItemClick) {
        var _this = this;
        var popoverOptions = this._createPopoverOptions(element, menu, container, controlContainer);
        var onItemClick = function (data) {
            popover.hide();
            if (onMenuItemClick) {
                onMenuItemClick();
            }
            if (menu.itemClick)
                menu.itemClick(data.itemData, data.itemElement, data.itemIndex);
        };
        if (menu.type === 'icons') {
            popoverOptions.contentTemplate = function (contentElement) {
                var div = document.createElement('div');
                new tile_view_1.default(div, _this._createTileViewOptions(menu, onItemClick));
                return div;
            };
            var isBrowserIE = !!browser.msie;
            var browserMajorVersion = parseInt(browser.version, 10);
            if (isBrowserIE && browserMajorVersion < 12) {
                popoverOptions.onShown = function (data) {
                    var popupContent = _utils_1.$unwrap(data.component._$wrapper).querySelector('.dx-popup-content');
                    popupContent.innerHTML = '';
                    var div = document.createElement('div');
                    new tile_view_1.default(div, _this._createTileViewOptions(menu, onItemClick));
                    popupContent.appendChild(div);
                };
            }
        }
        else {
            popoverOptions.contentTemplate = function (contentElement) {
                return new list_1.default(document.createElement('div'), _this._createListOptions(menu, onItemClick)).element();
            };
        }
        var popoverContainer = this._getPopupContainer(element, menu.type);
        var popover = popover_1.default.getInstance(popoverContainer);
        if (popover) {
            popover.option(popoverOptions);
        }
        else {
            popover = new popover_1.default(popoverContainer, popoverOptions);
        }
        popover.toggle(!popover.option('visible'));
    };
    PopupMenuCreator._createPopoverOptions = function (element, menu, container, controlContainer) {
        return {
            width: 'auto',
            height: 'auto',
            target: element,
            toolbarItems: menu.type === 'icons' && menu.title ? [{ location: 'center', text: menu.title }] : [],
            animation: {
                show: { type: 'pop', from: { opacity: 1, scale: 0 }, to: { scale: 1 } },
                hide: { type: 'pop', from: { scale: 1 }, to: { scale: 0 } }
            },
            position: {
                my: 'top center',
                at: 'bottom center',
                collision: 'fit flip',
                boundary: controlContainer
            },
            container: container
        };
    };
    PopupMenuCreator._createTileViewOptions = function (menu, onItemClick) {
        var itemsCount = menu.items.length;
        var columnCount = menu.columnCount ? Math.min(menu.columnCount, itemsCount) : itemsCount;
        return {
            direction: 'horizontal',
            dataSource: menu.items,
            height: this._icon_menu_element_size * Math.ceil(itemsCount / columnCount),
            itemMargin: 0,
            baseItemHeight: this._icon_menu_element_size,
            baseItemWidth: this._icon_menu_element_size,
            itemTemplate: menu.itemTemplate ? menu.itemTemplate : function (itemData, itemIndex, itemElement) {
                return _utils_1.createSvgIconElement(menu.items[itemIndex]);
            },
            onItemClick: onItemClick
        };
    };
    PopupMenuCreator._createListOptions = function (menu, onItemClick) {
        var listOptions = {
            selectionMode: menu.selectionMode || 'none',
            selectedItems: menu.selectedItems || [],
            dataSource: menu.items,
            onItemClick: onItemClick
        };
        if (menu.itemTemplate) {
            listOptions.itemTemplate = menu.itemTemplate;
        }
        return listOptions;
    };
    PopupMenuCreator._getPopupContainer = function (element, type) {
        var popoverClass = type === 'icons' ? _caption_toolbar_css_classes_1.cssClasses.popoverIconMenuWrapper : _caption_toolbar_css_classes_1.cssClasses.popoverListWrapper;
        var popupContainer = element.querySelectorAll('.' + popoverClass);
        if (popupContainer.length > 1) {
            console.log('Multiple popovers');
        }
        else if (popupContainer.length === 0) {
            var div = document.createElement('div');
            div.classList.add(popoverClass);
            element.appendChild(div);
            return div;
        }
        else {
            return popupContainer[0];
        }
    };
    PopupMenuCreator._icon_menu_element_size = 65;
    return PopupMenuCreator;
}());
exports.PopupMenuCreator = PopupMenuCreator;


/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var string_1 = __webpack_require__(30);
var data_grid_1 = __webpack_require__(246);
var _default_1 = __webpack_require__(6);
var _common_1 = __webpack_require__(35);
var _localization_ids_1 = __webpack_require__(21);
var _localizer_1 = __webpack_require__(16);
var _utils_1 = __webpack_require__(3);
var _style_settings_provider_1 = __webpack_require__(112);
var _base_item_1 = __webpack_require__(29);
var _column_width_calculator_1 = __webpack_require__(546);
var _grid_column_painter_1 = __webpack_require__(552);
var MAX_CELL_COUNT = 2000, HEIGHT_DELTA_INDICATOR = 12, DATAGRID_CONTEXT_MENU_ICON = 'dashboard-datagriditem-resetcolumnwidths';
var dataGridItem = (function (_super) {
    __extends(dataGridItem, _super);
    function dataGridItem(container, options) {
        var _this = _super.call(this, container, options) || this;
        _this._updateLocked = false;
        _this._digits_string = '0123456789';
        _this.TextAlignment = {
            Left: 'left',
            Right: 'right',
            Center: 'center'
        };
        _this.DisplayMode = {
            Value: 'Value',
            Delta: 'Delta',
            Bar: 'Bar',
            Sparkline: 'Sparkline',
            Image: 'Image',
            Hyperlink: 'Hyperlink'
        };
        _this.SummaryType = {
            Count: 'Count',
            Min: 'Min',
            Max: 'Max',
            Avg: 'Avg',
            Sum: 'Sum'
        };
        _this.CssClasses = {
            wordWrap: 'dx-dashboard-word-wrap',
            gridAdaptiveCellValue: 'dx-adaptive-item-text'
        };
        _this._bestFitProvider = {
            getBestFit: function (index) {
                var bestFit = 0;
                var columnViewModel = _this.options.ViewModel.Columns[index];
                if (columnViewModel.DisplayMode === _this.DisplayMode.Sparkline) {
                    var columnName = _this.options.Name + columnViewModel.DataId;
                    var startValues = _utils_1.$unwrap(_this._dataGrid.element()).querySelectorAll('.' + columnName + '_startValue');
                    var endValues = _utils_1.$unwrap(_this._dataGrid.element()).querySelectorAll('.' + columnName + '_endValue');
                    var maxStartWidth = _grid_column_painter_1.GridColumnPainter.calcMaxWidth(startValues);
                    var maxEndWidth = _grid_column_painter_1.GridColumnPainter.calcMaxWidth(endValues);
                    bestFit = Math.round(_this._getDefaultBestCharacterCount(index) * _this.charWidth) + maxStartWidth + maxEndWidth;
                }
                else if (columnViewModel.DisplayMode === _this.DisplayMode.Bar) {
                    bestFit = Math.round(_this._getDefaultBestCharacterCount(index) * _this.charWidth);
                }
                else {
                    bestFit = _this._dataGrid.columnOption(index, 'bestFitWidth');
                }
                return bestFit;
            }
        };
        _this._clientStateUpdateDebounced = _utils_1.debounce(function (widthOptions) {
            _this.gridWidthOptionsChanged && _this.gridWidthOptionsChanged({
                widthOptions: widthOptions
            });
        }, 300);
        _this._customizeViewOptions = function (opts) {
            opts.columnAutoWidth = true;
        };
        _this._calculator = new _column_width_calculator_1.ColumnWidthCalculator();
        _this._styleSettingsProvider = new _style_settings_provider_1.styleSettingsProvider();
        _this._styleSettingsProvider.initialize(_this.options.ConditionalFormattingModel, _this.options.ViewModel ? _this.options.ViewModel.WordWrap : false);
        return _this;
    }
    Object.defineProperty(dataGridItem.prototype, "_captionToolbarSeparatorRequired", {
        get: function () {
            return !this.hasParentContainer() || (this.hasParentContainer() && this.visualMode === 'caption');
        },
        enumerable: true,
        configurable: true
    });
    dataGridItem.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._dataGrid && this._dataGrid.dispose();
    };
    dataGridItem.prototype._clearSelectionUnsafe = function () {
        this._dataGrid.clearSelection();
    };
    dataGridItem.prototype._setSelectionUnsafe = function (values) {
        _super.prototype._setSelectionUnsafe.call(this, values);
        this.clearSelection();
        if (values)
            this._setGridSelection(values);
    };
    dataGridItem.prototype._selectTuplesCore = function (tuples, updateTupleDelegate, state) {
        var that = this, currentSelection = that._dataGrid.getSelectedRowKeys(), values = [], processKeys = function (keys) {
            keys.forEach(function (key) {
                if (state) {
                    currentSelection.push(key);
                }
                else {
                    currentSelection.splice(currentSelection.indexOf(key), 1);
                }
            });
            return currentSelection;
        };
        tuples.forEach(function (tuple) {
            var res = updateTupleDelegate(tuple);
            if (res != null && res[0] != null) {
                values.push(res[0].Value);
            }
        });
        that._setGridSelection(values, processKeys);
    };
    dataGridItem.prototype.renderContentUnsafe = function (element, changeExisting, afterRenderCallback) {
        if (!this.options)
            return false;
        var opts = this._getViewOptions();
        if (this.options.ViewModel && this.options.ViewModel.WordWrap) {
            element.classList.add(this.CssClasses.wordWrap);
        }
        else {
            element.classList.remove(this.CssClasses.wordWrap);
        }
        if (changeExisting && this._dataGrid) {
            if (this.resetClientStateOnUpdate) {
                this._resetColumnWidths();
            }
            _utils_1.deepExtend(opts, this._getCommonOptions());
            this._raiseItemWidgetOptionsPrepared(opts);
            this._dataGrid.option(opts);
        }
        else {
            var options = __assign({}, opts, this._getCommonOptions());
            this._raiseItemWidgetOptionsPrepared(options);
            this._dataGrid = new data_grid_1.default(element, options);
            this._updateCharWidth();
        }
        return false;
    };
    dataGridItem.prototype.getInfoUnsafe = function () {
        var that = this, gridScroll = this._dataGrid.getScrollable(), isVScrollbarVisible = that._dataGrid.isScrollbarVisible(), isHScrollbarVisible = gridScroll.scrollWidth() > gridScroll.clientWidth(), scrollRowData = that._dataGrid.getTopVisibleRowData(), combinedFilter = that._dataGrid.getCombinedFilter(), topPath = [], leftPath = [];
        if (scrollRowData) {
            that.options.ViewModel.RowIdentificatorDataMembers.forEach(function (dataMember) {
                var value = scrollRowData[dataMember];
                topPath.push(value);
            });
            leftPath.push(this._calculator.getLeftPrintingColumnIndex(gridScroll.scrollLeft()));
        }
        return _utils_1.deepExtend(_super.prototype.getInfoUnsafe.call(this), {
            scroll: {
                horizontal: isHScrollbarVisible,
                vertical: isVScrollbarVisible,
                topPath: topPath,
                leftPath: leftPath
            },
            sortInfo: that._getSortInfo(),
            combinedFilter: combinedFilter !== undefined ? that._parseFilter(combinedFilter, undefined) : '',
            widthOptions: that._calculator.getClientWidthOptions()
        });
    };
    dataGridItem.prototype._parseFilter = function (filterItems, columnIndex) {
        var that = this, resultFilterString = '';
        if (_utils_1.type.isFunction(filterItems[0])) {
            var exprColumnIndex = columnIndex === undefined ? filterItems.columnIndex : columnIndex;
            resultFilterString += that._parseFilterOperatorPart(filterItems, exprColumnIndex);
        }
        else {
            for (var i = 0; i < filterItems.length; i++) {
                var filterItem = filterItems[i];
                resultFilterString += _utils_1.type.isString(filterItem) ? filterItem : that._parseFilter(filterItem, filterItems.columnIndex) + ' ';
            }
        }
        return '(' + resultFilterString + ')';
    };
    dataGridItem.prototype._parseFilterOperatorPart = function (filterItemPart, exprColumnIndex) {
        var that = this, partOperator = filterItemPart[1], value = filterItemPart[2], column = that._dataGrid.getVisibleColumns()[exprColumnIndex], dataField = column.dataField, unaryOperator = 'not', binaryOperators = [
            'contains',
            'startswith',
            'endswith'
        ], format = function (fmtstr) {
            var argArray = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                argArray[_i - 1] = arguments[_i];
            }
            var args = Array.prototype.slice.call(arguments, 1);
            return fmtstr.replace(/\{(\d+)\}/g, function (match, index) {
                return args[index];
            });
        };
        if (partOperator.indexOf(unaryOperator) != -1) {
            filterItemPart[1] = partOperator.replace(unaryOperator, '').trim();
            var builder = that._parseFilterOperatorPart(filterItemPart, exprColumnIndex);
            return format('{0}({1})', unaryOperator, builder);
        }
        if (binaryOperators.indexOf(partOperator) != -1)
            return format("{1}([{0}], '{2}')", dataField, partOperator, value);
        if (_utils_1.type.isNumeric(value) || _utils_1.type.isBoolean(value))
            return format('[{0}] {1} {2}', dataField, partOperator, value);
        if (column.dataType === 'date')
            return format('[{0}] {1} #{2}#', dataField, partOperator, this.dateToString(value));
        return format("[{0}] {1} '{2}'", dataField, partOperator, value);
    };
    dataGridItem.prototype._getSortInfo = function () {
        var that = this, sortInfo = [];
        that._dataGrid.getVisibleColumns().forEach(function (info) {
            if (info.sortIndex != undefined && info.sortOrder != undefined) {
                sortInfo.push({
                    dataField: info.dataField,
                    sortIndex: info.sortIndex,
                    sortOrder: info.sortOrder
                });
            }
        });
        sortInfo.sort(function (a, b) {
            return a.sortIndex - b.sortIndex;
        });
        return sortInfo;
    };
    dataGridItem.prototype._initializeData = function (newOptions) {
        _super.prototype._initializeData.call(this, newOptions);
        var isResetColumnWidthsRequired = !!this.options && !!this.options.ViewModel && !!newOptions.ViewModel && this.options.ViewModel.ColumnWidthMode !== newOptions.ViewModel.ColumnWidthMode;
        if (isResetColumnWidthsRequired) {
            this._resetColumnWidths();
        }
        if (this._styleSettingsProvider) {
            this._styleSettingsProvider.initialize(this.options.ConditionalFormattingModel, this.options.ViewModel ? this.options.ViewModel.WordWrap : false);
        }
    };
    dataGridItem.prototype.getValueItem = function (columnName, index) {
        return this.dataController.getValueItem(columnName, index);
    };
    dataGridItem.prototype._resetColumnWidths = function () {
        this._calculator.reset(this.options.ViewModel, this._getColumnWidthMode());
        var columnsWidth = this._calculator.calcColumnsWidth(this._bestFitProvider, (_utils_1.$wrap(this._dataGrid.element())).width() - this._dataGrid.getScrollbarWidth(), this.charWidth);
        this._updateColumnsWidth(columnsWidth);
        this._applySelection();
    };
    dataGridItem.prototype._updateColumnsWidth = function (columnWidths) {
        var _this = this;
        this._beginResize();
        columnWidths.forEach(function (width, i) {
            _this._dataGrid.columnOption(i, _this._getColumnWidthProperty(), width);
        });
        this._endResize();
    };
    dataGridItem.prototype._getColumnWidthProperty = function () {
        return 'visibleWidth';
    };
    dataGridItem.prototype._getColumnWidthMode = function () {
        return this.options.ViewModel.ColumnWidthMode;
    };
    dataGridItem.prototype._getDefaultBestCharacterCount = function (index) {
        return this.options.ViewModel.Columns[index].DefaultBestCharacterCount;
    };
    dataGridItem.prototype._beginResize = function () {
        this._updateLocked = true;
        this._dataGrid.beginUpdate();
    };
    dataGridItem.prototype._endResize = function () {
        this._dataGrid.endUpdate();
        this._updateLocked = false;
    };
    dataGridItem.prototype._updateCharWidth = function () {
        var span = document.createElement('span');
        span.classList.add('dx-widget');
        span.style.display = 'inline-block';
        span.innerText = this._digits_string;
        document.body.appendChild(span);
        this.charWidth = _utils_1.getWidth(span) / 10;
        document.body.removeChild(span);
    };
    dataGridItem.prototype._onColumnsChanging = function (e) {
        var grid = e.component, columnResized = e.optionNames.width, gridResized = e.optionNames.visibleWidth && grid.columnOption(0, 'visibleWidth') !== undefined, viewModel = this.options.ViewModel;
        if (this._updateLocked || !viewModel || !viewModel.Columns ||
            viewModel.Columns.length == 0 || grid.columnCount() !== viewModel.Columns.length) {
            return;
        }
        if (grid.getController('data').isLoaded() && gridResized && !columnResized) {
            this._calculator.onDataLoaded(viewModel, this._getColumnWidthMode());
        }
        if (columnResized) {
            var leftColumnIndex = grid.getController('columnsResizer')._resizingInfo.currentColumnIndex;
            var leftColumnWidth = this._dataGrid.columnOption(leftColumnIndex, 'width');
            var rightColumnWidth = this._dataGrid.columnOption(leftColumnIndex + 1, 'width');
            var columnWidths = this._calculator.onColumnResized(leftColumnIndex, leftColumnWidth, rightColumnWidth);
            this._updateColumnsWidth(columnWidths);
            this._clientStateUpdateDebounced(this._calculator.widthOptions);
        }
        else if (gridResized) {
            var columnsWidth = this._calculator.calcColumnsWidth(this._bestFitProvider, _utils_1.$wrap(this._dataGrid.element()).width() - this._dataGrid.getScrollbarWidth(), this.charWidth);
            this._updateColumnsWidth(columnsWidth);
        }
    };
    dataGridItem.prototype._getViewOptions = function () {
        var that = this;
        var viewModel = that.options.ViewModel;
        if (!viewModel)
            return {};
        var dataSource = that.dataController.getDataSource(), columns = that._getColumns();
        var hasSlowColumns = columns.some(function (c) { return c.displayMode == that.DisplayMode.Bar || c.displayMode == that.DisplayMode.Sparkline || c.displayMode == that.DisplayMode.Image; });
        var viewOptions = {
            dataSource: dataSource,
            columns: columns,
            summary: {
                totalItems: that._getTotals(),
                calculateCustomSummary: function () { return ''; }
            },
            scrolling: {
                mode: hasSlowColumns || dataSource.store.data.length * (columns.length || 1) >= MAX_CELL_COUNT ? 'virtual' : 'standard'
            },
            rowAlternationEnabled: viewModel.EnableBandedRows,
            showRowLines: viewModel.ShowHorizontalLines,
            showColumnLines: viewModel.ShowVerticalLines,
            wordWrapEnabled: viewModel.WordWrap,
            showColumnHeaders: viewModel.ShowColumnHeaders,
            allowColumnResizing: this._getColumnWidthMode() !== 'AutoFitToContents',
        };
        this._customizeViewOptions(viewOptions);
        return viewOptions;
    };
    dataGridItem.prototype._getCommonOptions = function () {
        var _this = this;
        var that = this, commonOptions = {};
        commonOptions.remoteOperations = { summary: true };
        commonOptions.paging = { enabled: false };
        commonOptions.sorting = {
            mode: 'multiple',
            ascendingText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.GridSortAscending),
            descendingText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.GridSortDescending),
            clearText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.GridClearSorting)
        };
        if (this.manualyResetClientState) {
            commonOptions.onContextMenuPreparing = function (options) {
                if (options.target === 'content' && _this._calculator.columnsResized) {
                    options.items = [{
                            text: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.GridResetColumnWidths),
                            icon: DATAGRID_CONTEXT_MENU_ICON,
                            onItemClick: function () {
                                _this._resetColumnWidths();
                            }
                        }];
                }
            };
        }
        commonOptions.onContentReady = function () { return that._styleSettingsProvider.draw(); };
        commonOptions.noDataText = _localizer_1.localizer.getString(_localization_ids_1.localizationId.MessageGridHasNoData);
        commonOptions.onCellClick = function (data) {
            var columnType = data.column && data.column.type || null;
            if (data.rowType === 'data' && columnType !== 'adaptive')
                that._raiseItemClick(data);
        };
        commonOptions.onCellHoverChanged = function (data) {
            that._raiseItemHover(data, data.eventType == 'mouseover');
        };
        commonOptions['onColumnsChanging'] = function (e) { return _this._onColumnsChanging(e); };
        commonOptions.width = '100%';
        commonOptions.cellHintEnabled = true;
        commonOptions.loadPanel = { enabled: false };
        commonOptions.searchPanel = { visible: false };
        commonOptions.keyboardNavigation = { enabled: false };
        return commonOptions;
    };
    dataGridItem.prototype._getRowsValues = function (data) {
        var that = this, selectionMembers = that.options.ViewModel.SelectionDataMembers, visibleValues = [], value;
        selectionMembers.forEach(function (member) {
            value = that.getValueItem(member, data.index).getUniqueValue();
            if (value !== undefined) {
                visibleValues.push(value);
            }
        });
        return that.dataController.getSelectionValues(visibleValues);
    };
    dataGridItem.prototype._getSelectedRowIndices = function () {
        var selectedValues = this._getSelectedValues();
        return selectedValues ? this.dataController.getSelectedRowKeys(selectedValues) : [];
    };
    dataGridItem.prototype._getTotalCaptionTemplate = function (totalType) {
        if (totalType == 'Auto') {
            return _default_1.getLocalizationById('DashboardStringId.GridTotalAutoTemplate');
        }
        else {
            var id = void 0;
            switch (totalType) {
                case 'Min':
                    id = 'DashboardStringId.GridTotalTypeMin';
                    break;
                case 'Max':
                    id = 'DashboardStringId.GridTotalTypeMax';
                    break;
                case 'Avg':
                    id = 'DashboardStringId.GridTotalTypeAvg';
                    break;
                case 'Sum':
                    id = 'DashboardStringId.GridTotalTypeSum';
                    break;
                default:
                    id = 'DashboardStringId.GridTotalTypeCount';
                    break;
            }
            return string_1.format(_default_1.getLocalizationById('DashboardStringId.GridTotalTemplate'), _default_1.getLocalizationById(id), _default_1.getLocalizationById('DashboardStringId.GridTotalValueTemplate'));
        }
    };
    dataGridItem.prototype._getTotals = function () {
        var _this = this;
        var that = this, res = [], columns = that.options.ViewModel.Columns || [];
        columns.forEach(function (column) {
            var columnName = column.DataId, totalsViewModel = column.Totals || [];
            totalsViewModel.forEach(function (totalModel) {
                res.push({
                    column: columnName,
                    summaryType: 'custom',
                    displayFormat: string_1.format(_this._getTotalCaptionTemplate(totalModel.TotalType), that.dataController.getTotalValue(totalModel.DataId))
                });
            });
        });
        return res;
    };
    dataGridItem.prototype._calculateCustomSummary = function (options) {
        options.totalValue = 0;
    };
    dataGridItem.prototype._getColumns = function () {
        var that = this, res = [], gridName = that.options.Name, columns = that.options.ViewModel.Columns || [], popupContainer = this.options.controlContainer, columnsCount = columns.length;
        columns.forEach(function (column, columnIndex) {
            var fieldName = column.DataId, columnName = gridName + fieldName, gridColumn = {
                dataField: fieldName,
                encodeHtml: that._isEncodeHtml(),
                caption: column.Caption,
                alignment: column.HorzAlignment === 'Right' ? that.TextAlignment.Right : that.TextAlignment.Left
            };
            gridColumn[_common_1.DashboardDataIdField] = column.DataId;
            gridColumn.headerAlignment = that.TextAlignment.Left;
            gridColumn.displayMode = column.DisplayMode;
            switch (column.DisplayMode) {
                case that.DisplayMode.Value:
                    gridColumn.cellTemplate = function (containerElement, options) {
                        var container = _utils_1.$unwrap(containerElement);
                        var valueItem = that.getValueItem(fieldName, options.data.index);
                        _grid_column_painter_1.GridColumnPainter.renderValue(container, valueItem.getData().displayText, that._isEncodeHtml());
                        var isDetail = that._isDetail(options.rowType);
                        var colummPrefix = isDetail ? columnName + '_detail' : columnName;
                        that._styleSettingsProvider.applyStyleSettings(container, popupContainer, valueItem.getStyleSettingsInfo(), false, colummPrefix, isDetail);
                        if (isDetail)
                            container.classList.add(that.CssClasses.gridAdaptiveCellValue);
                    };
                    gridColumn.resized = function () {
                        var visibleWidthReset = that._dataGrid && (that._dataGrid.columnOption(columnIndex, 'visibleWidth') === undefined);
                        if (!visibleWidthReset) {
                            that._styleSettingsProvider.updateBarWidth(columnName);
                            that._styleSettingsProvider.updateBarWidth(columnName + '_detail');
                        }
                    };
                    break;
                case that.DisplayMode.Delta:
                    gridColumn.cellTemplate = function (containerElement, options) {
                        var container = _utils_1.$unwrap(containerElement);
                        var valueItem = that.getValueItem(fieldName, options.data.index);
                        var isDetail = that._isDetail(options.rowType);
                        _grid_column_painter_1.GridColumnPainter.renderDelta(container, valueItem.getData(), isDetail);
                        that._styleSettingsProvider.applyStyleSettings(container, popupContainer, valueItem.getStyleSettingsInfo(), true);
                        if (isDetail)
                            container.classList.add(that.CssClasses.gridAdaptiveCellValue);
                    };
                    break;
                case that.DisplayMode.Hyperlink:
                    gridColumn.cellTemplate = function (containerElement, options) {
                        var container = _utils_1.$unwrap(containerElement);
                        var valueItem = that.getValueItem(fieldName, options.data.index), uri = fieldName ? string_1.format(!!column.UriPattern ? column.UriPattern : '{0}', valueItem.getUriValue()) : undefined;
                        _grid_column_painter_1.GridColumnPainter.renderHyperlink(container, uri, valueItem.getData().displayText, that._isEncodeHtml());
                        that._styleSettingsProvider.applyStyleSettings(container, popupContainer, valueItem.getStyleSettingsInfo(), false, columnName);
                        if (that._isDetail(options.rowType))
                            container.classList.add(that.CssClasses.gridAdaptiveCellValue);
                    };
                    break;
                case that.DisplayMode.Sparkline:
                    gridColumn.alignment = that.TextAlignment.Left;
                    gridColumn.cssClass = 'dx-dashboard-datagrid-column-visible-cell-content';
                    gridColumn.cellTemplate = function (containerElement, options) {
                        var container = _utils_1.$unwrap(containerElement);
                        var valueItem = that.getValueItem(fieldName, options.data.index);
                        _grid_column_painter_1.GridColumnPainter.renderSparkline(columnName, column.ShowStartEndValues, container, valueItem.getData());
                        that._styleSettingsProvider.applyStyleSettings(container, popupContainer, valueItem.getStyleSettingsInfo(), true);
                        if (that._isDetail(options.rowType))
                            container.classList.add(that.CssClasses.gridAdaptiveCellValue);
                    };
                    gridColumn.resized = function () {
                        var gridRootElement = that._dataGrid ? _utils_1.$unwrap(that._dataGrid.element()) : undefined;
                        if (gridRootElement) {
                            _grid_column_painter_1.GridColumnPainter.changeGridSparklineColumnsWidth(gridRootElement, columnName);
                        }
                    };
                    break;
                case that.DisplayMode.Bar:
                    gridColumn.alignment = that.TextAlignment.Left;
                    gridColumn.cssClass = 'dx-dashboard-datagrid-column-visible-cell-content';
                    gridColumn.cellTemplate = function (containerElement, options) {
                        var container = _utils_1.$unwrap(containerElement);
                        var valueItem = that.getValueItem(fieldName, options.data.index);
                        var barData = valueItem.getData();
                        _grid_column_painter_1.GridColumnPainter.renderBar(columnName, container, barData.text, barData.normalizedValue, barData.zeroValue);
                        that._styleSettingsProvider.applyStyleSettings(container, popupContainer, valueItem.getStyleSettingsInfo(), true);
                        if (that._isDetail(options.rowType))
                            container.classList.add(that.CssClasses.gridAdaptiveCellValue);
                    };
                    gridColumn.resized = function () {
                        var gridRootElement = that._dataGrid ? _utils_1.$unwrap(that._dataGrid.element()) : undefined;
                        if (gridRootElement) {
                            _grid_column_painter_1.GridColumnPainter.changeGridBarColumnsWidth(gridRootElement, columnName);
                        }
                    };
                    break;
                case that.DisplayMode.Image:
                    gridColumn.cellTemplate = function (containerElement, options) {
                        var container = _utils_1.$unwrap(containerElement);
                        var valueItem = that.getValueItem(fieldName, options.data.index);
                        _grid_column_painter_1.GridColumnPainter.renderImage(container, valueItem.getData());
                        that._styleSettingsProvider.applyStyleSettings(container, popupContainer, valueItem.getStyleSettingsInfo(), true);
                        if (that._isDetail(options.rowType))
                            container.classList.add(that.CssClasses.gridAdaptiveCellValue);
                    };
                    break;
            }
            res.push(gridColumn);
        });
        return res;
    };
    dataGridItem.prototype._isDetail = function (rowType) {
        return rowType === 'detailAdaptive';
    };
    dataGridItem.prototype._applySelectionUnsafe = function () {
        this.setSelection(this.options.SelectedValues);
    };
    dataGridItem.prototype._resizeUnsafe = function () {
        _super.prototype._resizeUnsafe.call(this);
        this._dataGrid.resize();
    };
    dataGridItem.prototype._getDataPoint = function (element) {
        var that = this;
        return {
            getValues: function (name) {
                return (name === 'Default') ? that.dataController.getDimensionValues(element.data.index) : null;
            },
            getDeltaIds: function () {
                return that._getColumnDataIdsByColumnType('Delta');
            },
            getMeasureIds: function () {
                return that._getColumnDataIdsByColumnType('Measure');
            },
            getSelectionValues: function (name) {
                return that._getRowsValues(element.data);
            }
        };
    };
    dataGridItem.prototype._getColumnsByColumnType = function (columnType) {
        var columns = this.options.ViewModel.Columns, foundColumns = [];
        columns.forEach(function (column) {
            if (column.ColumnType === columnType)
                foundColumns.push(column);
        });
        return foundColumns;
    };
    dataGridItem.prototype._getColumnDataIdsByColumnType = function (columnType) {
        var that = this, columns = that._getColumnsByColumnType(columnType), ids = [];
        columns.forEach(function (column) {
            ids.push(column.DataId);
        });
        return ids;
    };
    dataGridItem.prototype._getElementInteractionValue = function (element, viewModel) {
        return this._getRowsValues(element.data);
    };
    dataGridItem.prototype._getWidget = function () {
        return this._dataGrid;
    };
    dataGridItem.prototype._setGridSelection = function (values, keyProcessingDelegate) {
        if (values && values.length > 0) {
            var that = this, selectionKeys = that.dataController.getSelectedRowKeys(values);
            that._selectRows(keyProcessingDelegate ? keyProcessingDelegate(selectionKeys) : selectionKeys);
        }
    };
    dataGridItem.prototype._selectRows = function (data) {
        if (this._dataGrid) {
            this._dataGrid.selectRows(data);
        }
    };
    dataGridItem.prototype._isMultiDataSupported = function () {
        return true;
    };
    return dataGridItem;
}(_base_item_1.baseItem));
exports.dataGridItem = dataGridItem;


/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = __webpack_require__(69);
var _z_index_1 = __webpack_require__(57);
var _floating_toolbar_base_1 = __webpack_require__(218);
var ClickableFloatingCaptionToolbar = (function (_super) {
    __extends(ClickableFloatingCaptionToolbar, _super);
    function ClickableFloatingCaptionToolbar(_container, _controlContainer, _popupContainer, encodeHtml, isBottomPosition, itemHasOwnContent) {
        var _this = _super.call(this, _container, _controlContainer, _popupContainer, encodeHtml, isBottomPosition) || this;
        _this._itemHasOwnContent = itemHasOwnContent;
        return _this;
    }
    ClickableFloatingCaptionToolbar.registerToolbar = function (toolbar) {
        if (ClickableFloatingCaptionToolbar._toolbars.indexOf(toolbar) === -1) {
            ClickableFloatingCaptionToolbar._toolbars.push(toolbar);
        }
    };
    ClickableFloatingCaptionToolbar.unregisterToolbar = function (toolbar) {
        var toolbarIndex = ClickableFloatingCaptionToolbar._toolbars.indexOf(toolbar);
        if (toolbarIndex > -1) {
            ClickableFloatingCaptionToolbar._toolbars.splice(toolbarIndex, 1);
        }
    };
    ClickableFloatingCaptionToolbar.activateToolbar = function (toolbar) {
        ClickableFloatingCaptionToolbar._toolbars
            .filter(function (t) { return t !== toolbar; })
            .forEach(function (t) { return t.hideFloatingPanel(); });
    };
    ClickableFloatingCaptionToolbar.prototype.update = function (options) {
        var heightChanded = _super.prototype.update.call(this, options);
        if (this._getVisibleItems().length > 0) {
            if (this._floatingPanel.option('visible')) {
                this._disableShield();
            }
            else {
                this._enableShield();
            }
        }
        else {
            this._disableShield();
        }
        return heightChanded;
    };
    ClickableFloatingCaptionToolbar.prototype.showFloatingPanel = function () {
        _super.prototype.showFloatingPanel.call(this);
        this._disableShield();
        ClickableFloatingCaptionToolbar.activateToolbar(this);
    };
    ClickableFloatingCaptionToolbar.prototype.hideFloatingPanel = function () {
        _super.prototype.hideFloatingPanel.call(this);
        this._enableShield();
    };
    ClickableFloatingCaptionToolbar.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        events_1.off(this._shieldDiv, 'click.shield');
        ClickableFloatingCaptionToolbar.unregisterToolbar(this);
    };
    ClickableFloatingCaptionToolbar.prototype._createInstance = function () {
        return new ClickableFloatingCaptionToolbar(undefined, undefined, undefined, this.encodeHtml, this._isBottomPosition, this._itemHasOwnContent);
    };
    ClickableFloatingCaptionToolbar.prototype._appendToContainer = function (toolbarDiv) {
        var floadingPanelDiv = _super.prototype._appendToContainer.call(this, toolbarDiv);
        this._shieldDiv = document.createElement('div');
        this._shieldDiv.style.left = '0';
        this._shieldDiv.style.top = '0';
        this._shieldDiv.style.bottom = '0';
        this._shieldDiv.style.right = '0';
        this._shieldDiv.style.display = 'block';
        if (this._itemHasOwnContent) {
            this._shieldDiv.style.zIndex = (_z_index_1.zIndex.floatingToolbar - 1).toString();
        }
        this._shieldDiv.style.position = 'absolute';
        this._subscribeOnShieldEvents();
        this._container.appendChild(this._shieldDiv);
        ClickableFloatingCaptionToolbar.registerToolbar(this);
        return floadingPanelDiv;
    };
    ClickableFloatingCaptionToolbar.prototype._subscribeOnShieldEvents = function () {
        var _this = this;
        events_1.on(this._shieldDiv, 'click.shield', function () { return _this.showFloatingPanel(); });
    };
    ClickableFloatingCaptionToolbar.prototype._disableShield = function () {
        this._shieldDiv && (this._shieldDiv.style.display = 'none');
    };
    ClickableFloatingCaptionToolbar.prototype._enableShield = function () {
        if (this._getVisibleItems().length > 0) {
            this._shieldDiv && (this._shieldDiv.style.display = 'block');
        }
    };
    ClickableFloatingCaptionToolbar._toolbars = [];
    return ClickableFloatingCaptionToolbar;
}(_floating_toolbar_base_1.FloatingCaptionToolbarBase));
exports.ClickableFloatingCaptionToolbar = ClickableFloatingCaptionToolbar;


/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var HiddenCaptionToolbar = (function () {
    function HiddenCaptionToolbar() {
        this.element = document.createElement('div');
        this.disabled = false;
    }
    HiddenCaptionToolbar.prototype.calcHeight = function (options) {
        return 0;
    };
    HiddenCaptionToolbar.prototype.calcMinWidth = function (options) {
        return 0;
    };
    HiddenCaptionToolbar.prototype.update = function (options) {
        return false;
    };
    HiddenCaptionToolbar.prototype.onResize = function () {
    };
    HiddenCaptionToolbar.prototype.dispose = function () {
    };
    return HiddenCaptionToolbar;
}());
exports.HiddenCaptionToolbar = HiddenCaptionToolbar;


/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.indicatorType = {
    none: 'none',
    up: 'up',
    down: 'down',
    warning: 'warning'
};


/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var list_1 = __webpack_require__(171);
var _filter_element_data_controller_1 = __webpack_require__(97);
var _default_1 = __webpack_require__(6);
var _localization_ids_1 = __webpack_require__(21);
var _localizer_1 = __webpack_require__(16);
var _utils_1 = __webpack_require__(3);
var _base_element_1 = __webpack_require__(221);
exports.cssListBoxClassNames = {
    borderVisible: 'dx-list-border-visible',
    separatorHidden: 'dx-list-item-separator-hidden',
    list: 'dx-dashboard-list',
    item: 'dx-dashboard-list-item',
    emptyMessage: 'dx-dashboard-empty-message',
};
var listFilterElement = (function (_super) {
    __extends(listFilterElement, _super);
    function listFilterElement(container, options) {
        return _super.call(this, container, options) || this;
    }
    listFilterElement.prototype._setSelectionUnsafe = function (values) {
        _super.prototype._setSelectionUnsafe.call(this, values);
        this._lock();
        try {
            this.widget.option('selectedItems', this._getSelection());
        }
        finally {
            this._unlock();
        }
    };
    listFilterElement.prototype._clearSelectionUnsafe = function () {
        if (!!this.options.useNeutralFilterMode) {
            this._lock();
            try {
                this.widget.unselectAll();
            }
            finally {
                this._unlock();
            }
        }
    };
    listFilterElement.prototype._generateInnerBorderClassesUnsafe = function (element) {
        var classes = _super.prototype._generateInnerBorderClassesUnsafe.call(this, element);
        if (!this._isPaneEmpty()) {
            classes.push(exports.cssListBoxClassNames.item);
        }
        if (element) {
            if (this._isPaneEmpty()) {
                element.classList.remove(exports.cssListBoxClassNames.item);
            }
            else {
                element.classList.add(exports.cssListBoxClassNames.item);
            }
        }
        return classes;
    };
    listFilterElement.prototype.renderContentUnsafe = function (element, changeExisting, afterRenderCallback) {
        _super.prototype.renderContentUnsafe.call(this, element, changeExisting, afterRenderCallback);
        var widgetElement = _utils_1.$unwrap(this.widget.element());
        widgetElement.classList.add(exports.cssListBoxClassNames.separatorHidden);
        if (this._isPaneEmpty() && this.visualMode !== 'content') {
            widgetElement.classList.add(exports.cssListBoxClassNames.borderVisible);
        }
        else {
            widgetElement.classList.remove(exports.cssListBoxClassNames.borderVisible);
        }
        return false;
    };
    listFilterElement.prototype._getWidgetName = function () {
        return 'dxList';
    };
    listFilterElement.prototype._createWidget = function (div, opts) {
        div.classList.add(exports.cssListBoxClassNames.list, exports.cssListBoxClassNames.emptyMessage);
        return new list_1.default(div, opts);
    };
    listFilterElement.prototype._getSelection = function () {
        return !this.isMultiSelectable && this.dataController.selection.length > 1 ? [this.dataController.selection[0]] : this.dataController.selection;
    };
    listFilterElement.prototype._getOptions = function (includeActions) {
        var that = this;
        return {
            dataSource: that.getDataSource(),
            selectedItems: that._getSelection(),
            showSelectionControls: true,
            focusStateEnabled: false,
            hoverStateEnabled: true,
            keyExpr: _filter_element_data_controller_1.KEY_EXPR,
            searchEnabled: that._enableSearch,
            searchEditorOptions: {
                placeholder: _localizer_1.localizer.getString(_localization_ids_1.localizationId.SearchNullValuePrompt)
            },
            noDataText: _default_1.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'),
            selectionMode: that.isMultiSelectable ? 'all' : 'single',
            selectAllMode: 'allPages',
            selectAllText: _localizer_1.ALL_ELEMENT.text,
            pageLoadMode: 'scrollBottom',
            onOptionChanged: function (e) {
                if (e.name == 'searchEnabled')
                    e.component.option('searchValue', undefined);
            },
            onSelectionChanged: !includeActions ? undefined : function (e) {
                if (that.isMultiSelectable && e.removedItems.length > 0) {
                    that._raiseItemClick(e.removedItems);
                }
                else {
                    that._raiseItemClick(e.addedItems);
                }
            }
        };
    };
    return listFilterElement;
}(_base_element_1.filterElementBaseItem));
exports.listFilterElement = listFilterElement;


/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var _utils_1 = __webpack_require__(3);
var _base_item_1 = __webpack_require__(29);
var BASE64_STRING_PREFIX = 'data:image/png;base64,';
var imageItem = (function (_super) {
    __extends(imageItem, _super);
    function imageItem(container, options) {
        return _super.call(this, container, options) || this;
    }
    imageItem.prototype._initializeData = function (newOptions) {
        _super.prototype._initializeData.call(this, newOptions);
        this.imgSrc = this._getImageSource(this.options.ViewModel ? this.options.ViewModel.ImageViewModel : undefined);
    };
    imageItem.prototype.renderContentUnsafe = function (element, changeExisting, afterRenderCallback) {
        var that = this;
        if (!changeExisting || !that.img) {
            that.img = $('<img>').bind('load', function () {
                that._loadImage();
            });
            $(element).append(that.img);
        }
        that.img.attr('src', that.imgSrc);
        return false;
    };
    imageItem.prototype._loadImage = function () {
        this._clearImgTag();
        this._initialWidth = this.img.width();
        this._initialHeight = this.img.height();
        this._loadedImgProcessing();
    };
    imageItem.prototype._clearImgTag = function () {
        var that = this, $contentRoot = $(that.contentRoot), $img = $contentRoot.find('img');
        $contentRoot.css({ overflow: '' });
        $img.removeAttr('style');
        $img.removeAttr('align');
    };
    imageItem.prototype._loadedImgProcessing = function () {
        var that = this, $contentRoot = $(that.contentRoot), containerWidth = $contentRoot.width(), containerHeight = $contentRoot.height(), img = $contentRoot.find('img'), viewModel = that.options.ViewModel, sizeMode = viewModel.SizeMode, horizontalAlignment = viewModel.HorizontalAlignment || 'Right', verticalAlignment = viewModel.VerticalAlignment || 'Top', centeringDirect, curImgHeight, curImgWidth;
        switch (sizeMode) {
            case 'Clip':
                $contentRoot.css({ overflow: 'hidden' });
                that._setHorizontalAlignment(img, horizontalAlignment);
                that._setVerticalAlignment(img, verticalAlignment);
                break;
            case 'Stretch':
                img.css({ width: '100%', height: '100%' });
                break;
            case 'Squeeze': {
                curImgHeight = img.height();
                curImgWidth = img.width();
                if ((curImgHeight >= containerHeight && curImgHeight <= that._initialHeight) || (curImgWidth >= containerWidth && curImgWidth <= that._initialWidth)) {
                    centeringDirect = that._setImgSizeWithProportions(img, containerHeight / containerWidth);
                    img.css({ marginTop: 0, marginLeft: 0 });
                }
                else {
                    img.css({
                        width: '',
                        height: ''
                    });
                    that._setHorizontalAlignment(img, horizontalAlignment);
                    that._setVerticalAlignment(img, verticalAlignment);
                }
                break;
            }
            case 'Zoom': {
                centeringDirect = that._setImgSizeWithProportions(img, containerHeight / containerWidth);
                break;
            }
            default: break;
        }
        if (centeringDirect === 'horizontalCentering') {
            that._setHorizontalAlignment(img, horizontalAlignment);
        }
        if (centeringDirect === 'verticalCentering') {
            that._setVerticalAlignment(img, verticalAlignment);
        }
    };
    imageItem.prototype._setHorizontalAlignment = function ($img, horizontalAlignment) {
        if (horizontalAlignment === 'Center') {
            $img.css({ marginLeft: ($(this.contentRoot).width() - $img.width()) / 2 });
            return;
        }
        $img.attr('align', horizontalAlignment.toLowerCase());
    };
    imageItem.prototype._setVerticalAlignment = function ($img, verticalAlignment) {
        var verticalOffsetCoeff, differenceTop = $(this.contentRoot).height() - $img.height();
        switch (verticalAlignment) {
            case 'Bottom':
                verticalOffsetCoeff = 1;
                break;
            case 'Center':
                verticalOffsetCoeff = 0.5;
                break;
            case 'Top':
                verticalOffsetCoeff = 0;
                break;
        }
        $img.css({ marginTop: Math.floor(differenceTop * verticalOffsetCoeff) + 'px' });
    };
    imageItem.prototype._setImgSizeWithProportions = function ($img, containerProportion) {
        var imgProportion = this._initialHeight / this._initialWidth;
        if (imgProportion > containerProportion) {
            $img.height('100%');
            $img.width(Math.floor($img.height() / imgProportion));
            return 'horizontalCentering';
        }
        else {
            $img.width('100%');
            $img.height(Math.floor($img.width() * imgProportion));
            return 'verticalCentering';
        }
    };
    imageItem.prototype._getImageSource = function (imageViewModel) {
        if (imageViewModel) {
            var url = imageViewModel.Url, sourceBase64String = imageViewModel.SourceBase64String, mimeType = imageViewModel.MimeType || '';
            if (sourceBase64String) {
                return 'data:' + mimeType + ';base64,' + sourceBase64String;
            }
            if (url) {
                return url;
            }
        }
        return '';
    };
    imageItem.prototype._resizeUnsafe = function () {
        _super.prototype._resizeUnsafe.call(this);
        this._loadImage();
    };
    imageItem.prototype._getWidget = function () {
        return this.img && _utils_1.wrapPublicElement(this.img[0]) || null;
    };
    return imageItem;
}(_base_item_1.baseItem));
exports.imageItem = imageItem;


/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var string_1 = __webpack_require__(30);
var vector_map_1 = __webpack_require__(427);
var projection_1 = __webpack_require__(428);
var $ = __webpack_require__(2);
var _localization_ids_1 = __webpack_require__(21);
var _localizer_1 = __webpack_require__(16);
var _utils_1 = __webpack_require__(3);
var caption_toolbar_options_1 = __webpack_require__(64);
var _caption_toolbar_css_classes_1 = __webpack_require__(31);
var _base_item_1 = __webpack_require__(29);
var projection = (function () {
    var parameters = projection_1.projection.get('mercator').source(), _to = parameters.to, _from = parameters.from;
    parameters.to = function (coordinates) {
        var coords = _to(coordinates);
        return [clamp(coords[0], -1, +1), coords[1]];
    };
    parameters.from = function (coordinates) {
        var coords = [clamp(coordinates[0], -1, +1), coordinates[1]];
        return _from(coords);
    };
    return projection_1.projection(parameters);
    function clamp(value, min, max) {
        return Math.min(Math.max(value, min), max);
    }
}());
var mapItem = (function (_super) {
    __extends(mapItem, _super);
    function mapItem($container, options) {
        var _this = _super.call(this, $container, options) || this;
        _this.isInitialExtentChanged = false;
        return _this;
    }
    mapItem.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.mapViewer && this.mapViewer.dispose();
    };
    mapItem.prototype._renderContentInternal = function (element, changeExisting, options) {
        this._raiseItemWidgetOptionsPrepared(options);
        if (changeExisting && this.mapViewer) {
            this._unsubscribeItemEvents();
            this.mapViewer.option(options);
            if (this._shouldResetClientViewport(this.options.ViewModel.Viewport)) {
                this.resetClientViewport();
            }
        }
        else {
            this.mapViewer = new vector_map_1.default(element, options);
        }
        this._updatePreviousViewport(this.options.ViewModel.Viewport);
        this._subscribeItemEvents();
    };
    mapItem.prototype.resetClientViewport = function () {
        this.clientState = null;
        this._onClientStateUpdate(this._getClientContext());
    };
    mapItem.prototype._shouldResetClientViewport = function (viewportViewModel) {
        if (this.previousViewportViewModel) {
            var viewportChanged = !this._viewportEquals(this.previousViewportViewModel, viewportViewModel) || this.previousViewportViewModel.CreateViewerPaddings !== viewportViewModel.CreateViewerPaddings;
            if (viewportChanged && this.clientState && this._viewportEquals(this.clientState.viewport, viewportViewModel) && !viewportViewModel.CreateViewerPaddings)
                return false;
            return viewportChanged;
        }
        return false;
    };
    mapItem.prototype._viewportEquals = function (viewport1, viewport2) {
        return viewport1.RightLongitude === viewport2.RightLongitude && viewport1.LeftLongitude === viewport2.LeftLongitude
            && viewport1.BottomLatitude === viewport2.BottomLatitude && viewport1.TopLatitude === viewport2.TopLatitude
            && viewport1.CenterPointLongitude === viewport2.CenterPointLongitude && viewport1.CenterPointLatitude === viewport2.CenterPointLatitude;
    };
    mapItem.prototype._updatePreviousViewport = function (viewport) {
        this.previousViewportViewModel = {
            RightLongitude: viewport.RightLongitude,
            LeftLongitude: viewport.LeftLongitude,
            BottomLatitude: viewport.BottomLatitude,
            TopLatitude: viewport.TopLatitude,
            CenterPointLongitude: viewport.CenterPointLongitude,
            CenterPointLatitude: viewport.CenterPointLatitude,
            CreateViewerPaddings: viewport.CreateViewerPaddings
        };
    };
    mapItem.prototype._clearSelectionUnsafe = function () {
        this.mapViewer.clearSelection();
    };
    mapItem.prototype.getInfoUnsafe = function () {
        return _utils_1.deepExtend(_super.prototype.getInfoUnsafe.call(this), {
            viewport: this._getViewport()
        });
    };
    mapItem.prototype._getSpecificStatePanelItems = function () {
        var _this = this;
        if (this.options.ViewModel.LockNavigation !== true && this.isInitialExtentChanged) {
            return [{
                    name: caption_toolbar_options_1.dashboardToolbarItemNames.initialExtent,
                    click: function (element) {
                        _this._toggleInitialExtentChanged(false);
                    },
                    icon: _caption_toolbar_css_classes_1.cssClasses.iconInitialExtent,
                    type: 'button',
                    hint: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.InitialExtent)
                }];
        }
        else
            return [];
    };
    mapItem.prototype._getMapViewerOptions = function () {
        var that = this, viewModel = that.options.ViewModel;
        return {
            projection: projection,
            encodeHtml: that._isEncodeHtml(),
            background: { borderWidth: 0, borderColor: 'none' },
            controlBar: { enabled: false },
            zoomFactor: that._calculateZoomFactor(viewModel.Viewport, $(that.contentRoot).width(), $(that.contentRoot).height()),
            maxZoomFactor: 1 << 18,
            center: [viewModel.Viewport.CenterPointLongitude, viewModel.Viewport.CenterPointLatitude],
            panningEnabled: viewModel.LockNavigation !== true,
            zoomingEnabled: viewModel.LockNavigation !== true
        };
    };
    mapItem.prototype._getLabelSettings = function (viewModel) {
        return {
            label: {
                enabled: !!viewModel.ShapeTitleAttributeName || viewModel.IncludeSummaryValueToShapeTitle,
                dataField: 'title'
            }
        };
    };
    mapItem.prototype._calculateZoomFactor = function (viewport, width, height) {
        var min = width < height ? width : height, mapWidth = this._translateLon(viewport.RightLongitude, min) - this._translateLon(viewport.LeftLongitude, min), mapHeight = this._translateLat(viewport.BottomLatitude, min) - this._translateLat(viewport.TopLatitude, min), latitudeZoom = width / mapWidth, longitudeZoom = height / mapHeight, zoom = latitudeZoom < longitudeZoom ? latitudeZoom : longitudeZoom;
        if (viewport.CreateViewerPaddings) {
            zoom *= 0.95;
        }
        return zoom;
    };
    mapItem.prototype._translateLon = function (lon, size) {
        var lon_ = lon * Math.PI / 180;
        return (size / 2) + (size / (2 * Math.PI)) * lon_;
    };
    mapItem.prototype._translateLat = function (lat, size) {
        var lat_ = lat * Math.PI / 180;
        return (size / 2) - (size / (2 * Math.PI)) * Math.log(Math.tan(Math.PI / 4 + lat_ / 2));
    };
    mapItem.prototype._getMapDataSource = function (mapItems, titleName) {
        var mapDataSource = [], data, type, points, boundary, point, segments, segmentData, pushAction;
        for (var i = 0; i < mapItems.length; i++) {
            data = [];
            type = 'area';
            if (mapItems[i].Latitude && mapItems[i].Longitude && mapItems[i].Size) {
                data.push([mapItems[i].Longitude, mapItems[i].Latitude]);
            }
            if (mapItems[i].Segments) {
                segments = mapItems[i].Segments;
                for (var j = 0; j < segments.length; j++) {
                    pushAction = function (row) {
                        if (segments[j].IsClosed && row.length > 1) {
                            var first = row[0], last = row[row.length - 1];
                            if (first[0] != last[0] || first[1] != last[1])
                                row.push(first);
                        }
                        data.push(row);
                    };
                    if (!segments[j].IsFilled)
                        type = 'line';
                    points = segments[j].Points;
                    segmentData = [];
                    for (var k = 0; k < points.length; k++) {
                        segmentData.push([points[k].Longitude, points[k].Latitude]);
                    }
                    pushAction(segmentData);
                    for (var l = 0; l < segments[j].Boundaries.length; l++) {
                        segmentData = [];
                        boundary = segments[j].Boundaries[l];
                        for (var m = 0; m < boundary.Points.length; m++) {
                            point = boundary.Points[m];
                            segmentData.push([point.Longitude, point.Latitude]);
                        }
                        pushAction(segmentData);
                    }
                }
            }
            mapDataSource.push({
                coordinates: data,
                type: type,
                attributes: []
            });
            for (var j = 0; j < mapItems[i].Attributes.length; j++) {
                if (mapItems[i].Attributes[j].Name === titleName) {
                    mapDataSource[i].attributes.title = mapItems[i].Attributes[j].Value;
                    break;
                }
            }
        }
        return mapDataSource;
    };
    mapItem.prototype._configureGeometryLayers = function (mapDataSource, areaSettings) {
        var areaDataSource = [], lineDataSource = [], layers = [];
        for (var i = 0; i < mapDataSource.length; i++) {
            if (mapDataSource[i].type === 'line')
                lineDataSource.push(mapDataSource[i]);
            else
                areaDataSource.push(mapDataSource[i]);
        }
        layers.push(__assign({ name: 'area', type: 'area', dataSource: areaDataSource }, areaSettings));
        if (lineDataSource.length > 0)
            layers.push({ name: 'line', type: 'line', dataSource: lineDataSource });
        return layers;
    };
    mapItem.prototype._getLegend = function (legendModel) {
        var legend = legendModel && !!legendModel.Visible ? {} : undefined;
        if (legend) {
            this._updateLegendPosition(legend, legendModel);
        }
        return legend;
    };
    mapItem.prototype._updateLegendPosition = function (legend, legendModel) {
        switch (legendModel.Orientation) {
            case 'Vertical':
                legend.orientation = 'vertical';
                legend.inverted = true;
                break;
            case 'Horizontal':
                legend.orientation = 'horizontal';
                break;
            default:
                break;
        }
        switch (legendModel.Position) {
            case 'TopLeft':
                legend.verticalAlignment = 'top';
                legend.horizontalAlignment = 'left';
                break;
            case 'TopCenter':
                legend.verticalAlignment = 'top';
                legend.horizontalAlignment = 'center';
                break;
            case 'TopRight':
                legend.verticalAlignment = 'top';
                legend.horizontalAlignment = 'right';
                break;
            case 'BottomLeft':
                legend.verticalAlignment = 'bottom';
                legend.horizontalAlignment = 'left';
                break;
            case 'BottomCenter':
                legend.verticalAlignment = 'bottom';
                legend.horizontalAlignment = 'center';
                break;
            case 'BottomRight':
                legend.verticalAlignment = 'bottom';
                legend.horizontalAlignment = 'right';
                break;
            default:
                break;
        }
    };
    mapItem.prototype._isSelected = function (current) {
        var selectedValues = this._getSelectedValues(), selected = false, equals;
        if (selectedValues && selectedValues.length > 0 && selectedValues[0].length === current.length) {
            for (var i = 0; i < selectedValues.length; i++) {
                equals = true;
                for (var j = 0; j < current.length; j++) {
                    if (selectedValues[i][j] !== current[j]) {
                        equals = false;
                        break;
                    }
                }
                if (equals) {
                    selected = true;
                    break;
                }
            }
        }
        return selected;
    };
    mapItem.prototype._getToolTip = function (name, value) {
        return string_1.format('{0}: {1}', this._getHtml(name), this._getHtml(value));
    };
    mapItem.prototype._getColors = function (colorModels) {
        var colors;
        if (colorModels) {
            colors = [];
            for (var i = 0; i < colorModels.length; i++) {
                colors.push('rgb(' + colorModels[i].R + ', ' + colorModels[i].G + ', ' + colorModels[i].B + ')');
            }
            return colors;
        }
    };
    mapItem.prototype._updateRangeStops = function (rangeStops, min, max, percent) {
        var res = [];
        for (var i = 0; i < rangeStops.length; i++) {
            res.push(rangeStops[i]);
        }
        if (percent) {
            this._updatePercentRangeStops(res, min, max);
        }
        if (res.length > 0 && res[0] > min) {
            res[0] = min;
        }
        if (res[res.length - 1] < max) {
            res.push(max);
        }
        else {
            res.push(res[res.length - 1] + 1);
        }
        return res;
    };
    mapItem.prototype._updatePercentRangeStops = function (rangeStops, min, max) {
        for (var i = 0; i < rangeStops.length; i++) {
            rangeStops[i] = min + (rangeStops[i] / 100) * (max - min);
        }
    };
    mapItem.prototype._getViewport = function () {
        var topLeft = this.mapViewer.convertCoordinates(0, 0), bottomRight = this.mapViewer.convertCoordinates($(this.contentRoot).width(), $(this.contentRoot).height()), viewport = this.mapViewer.viewport(), center = this.mapViewer.center();
        return {
            LeftLongitude: !!topLeft[0] ? topLeft[0] : viewport[0],
            TopLatitude: !!topLeft[1] ? topLeft[1] : viewport[1],
            RightLongitude: !!bottomRight[0] ? bottomRight[0] : viewport[2],
            BottomLatitude: !!bottomRight[1] ? bottomRight[1] : viewport[3],
            CenterPointLongitude: center[0],
            CenterPointLatitude: center[1]
        };
    };
    mapItem.prototype._getClientContext = function () {
        return {
            viewport: this._getViewport(),
            clientSize: {
                width: $(this.contentRoot).width(),
                height: $(this.contentRoot).height()
            }
        };
    };
    mapItem.prototype._updateClientStateUnsafe = function (clientState) {
        this._updateViewport(clientState.viewport);
    };
    mapItem.prototype._updateViewport = function (viewport) {
        this._lock();
        try {
            this.mapViewer.zoomFactor(this._calculateZoomFactor(viewport, $(this.contentRoot).width(), $(this.contentRoot).height()));
            this.mapViewer.center([viewport.CenterPointLongitude, viewport.CenterPointLatitude]);
        }
        finally {
            this._unlock();
        }
    };
    mapItem.prototype._updateContentSizeUnsafe = function () {
        _super.prototype._updateContentSizeUnsafe.call(this);
        if (!!this.mapViewer) {
            var viewport = this.clientState ? this.clientState.viewport : this.options.ViewModel.Viewport;
            this._updateViewport(viewport);
            this.mapViewer.render();
            this._onClientStateUpdate(this._getClientContext());
        }
    };
    mapItem.prototype._onViewPortChanged = function () {
        if (!this._isLocked()) {
            this.clientState = this._getClientContext();
            this.viewportChangedCallback && this.viewportChangedCallback(this.clientState.viewport);
            this._onClientStateUpdate(this.clientState);
            this._toggleInitialExtentChanged(true);
        }
    };
    mapItem.prototype.onInitialExtent = function (newViewport) {
        if (this.hasWidget) {
            this._onInitialExtentUnsafe(newViewport);
        }
        else {
            this._onInitialExtentBase(newViewport);
        }
    };
    mapItem.prototype._onInitialExtentUnsafe = function (newViewport) {
        this._updateViewport(newViewport || this.options.ViewModel.Viewport);
        this.clientState = null;
        this._onClientStateUpdate(this._getClientContext());
    };
    mapItem.prototype._onInitialExtentBase = function (newViewport) {
        this.clientState = null;
    };
    mapItem.prototype._getWidget = function () {
        return this.mapViewer;
    };
    mapItem.prototype._subscribeItemEvents = function () {
        var that = this;
        this.mapViewer.option('onCenterChanged', function () { that._onViewPortChanged(); });
        this.mapViewer.option('onZoomFactorChanged', function () { that._onViewPortChanged(); });
    };
    mapItem.prototype._unsubscribeItemEvents = function () {
        this.mapViewer.option('onCenterChanged', null);
        this.mapViewer.option('onZoomFactorChanged', null);
    };
    mapItem.prototype._toggleInitialExtentChanged = function (changed) {
        if (this.isInitialExtentChanged != changed) {
            this.isInitialExtentChanged = changed;
            this.initialExtentChanged && this.initialExtentChanged(this.isInitialExtentChanged);
        }
    };
    return mapItem;
}(_base_item_1.baseItem));
exports.mapItem = mapItem;


/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _utils_1 = __webpack_require__(3);
var _style_settings_provider_1 = __webpack_require__(112);
var _card_layout_1 = __webpack_require__(223);
var _cards_viewer_1 = __webpack_require__(561);
var _card_widget_implementation_1 = __webpack_require__(719);
var _base_item_1 = __webpack_require__(29);
var _kpi_item_1 = __webpack_require__(348);
var cardsItem = (function (_super) {
    __extends(cardsItem, _super);
    function cardsItem(container, options) {
        var _this = _super.call(this, container, options) || this;
        _this.useNewViewer = options.ViewModel.HasLayout;
        _this._hasSparkline = false;
        _this.apiHandlers = new _card_widget_implementation_1.CardWidgetImplementation(function () { _this.renderContentUnsafe(_this.contentRoot, true, function () { }); });
        _this._styleSettingsProvider = new _style_settings_provider_1.cardItemStyleSettingsProvider();
        _this._styleSettingsProvider.initialize(_this.options.ConditionalFormattingModel, _this.options.ViewModel ? _this.options.ViewModel.WordWrap : false);
        return _this;
    }
    cardsItem.prototype._initializeData = function (newOptions) {
        _super.prototype._initializeData.call(this, newOptions);
        if (this._styleSettingsProvider) {
            this._styleSettingsProvider.initialize(this.options.ConditionalFormattingModel, this.options.ViewModel ? this.options.ViewModel.WordWrap : false);
        }
    };
    cardsItem.prototype.renderContentUnsafe = function (element, changeExisting, afterRenderCallback) {
        this._hasSparkline = false;
        if (this.options.ViewModel.HasLayout != this.useNewViewer && this.widgetsViewer != null) {
            this.widgetsViewer.clear();
            this.widgetsViewer = null;
        }
        this.useNewViewer = this.options.ViewModel.HasLayout;
        this.initializeLayoutCollection();
        _super.prototype.renderContentUnsafe.call(this, element, changeExisting, afterRenderCallback);
        this.apiHandlers._element = this.widgetsViewer.element();
        return false;
    };
    cardsItem.prototype.createWidgetViewer = function (element, options) {
        if (this.useNewViewer)
            return new _cards_viewer_1.cardsViewer(element, options);
        else
            return _super.prototype.createWidgetViewer.call(this, element, options);
    };
    cardsItem.prototype.initializeLayoutCollection = function () {
        var _this = this;
        this.layoutCollection = {};
        if (this.options.ViewModel.HasLayout) {
            var cards = this.options.ViewModel.Cards;
            cards.forEach(function (card) {
                var layout = new _card_layout_1.cardLayout(_this.apiHandlers);
                layout.fill(card.Layout);
                _this.layoutCollection[card.ID] = layout;
            });
        }
    };
    cardsItem.prototype._isPaneEmpty = function () {
        return _super.prototype._isPaneEmpty.call(this) || !this.hasCaption();
    };
    cardsItem.prototype._isBorderRequired = function () {
        return false;
    };
    cardsItem.prototype._isTransparentBackground = function () {
        return this._isPaneEmpty() && this.visualMode !== 'content';
    };
    cardsItem.prototype._getSpecificWidgetViewerOptions = function () {
        var specificOptions = {};
        specificOptions.viewer = {
            ignorePadding: this._getIgnorePadding(),
            controlContainer: this.options.controlContainer,
        };
        var layoutsArray = [];
        for (var layoutKey in this.layoutCollection) {
            layoutsArray.push(this.layoutCollection[layoutKey]);
        }
        specificOptions.itemOptions = {
            hasSparkline: this._hasSparkline,
            layouts: layoutsArray
        };
        specificOptions.styleSettingsProvider = this._styleSettingsProvider;
        return _utils_1.deepExtend(specificOptions, _super.prototype._getSpecificWidgetViewerOptions.call(this));
    };
    cardsItem.prototype._getIgnorePadding = function () {
        return this._isPaneEmpty() && this.visualMode !== 'content';
    };
    cardsItem.prototype._getWidgetType = function () {
        return 'card';
    };
    cardsItem.prototype._getElementsName = function () {
        return 'Cards';
    };
    cardsItem.prototype.setOldCardProperties = function (sourceItem, cardModel, props) {
        var captions = props.getCaptions(), sparklineOptions, indicatorType, isGood;
        if (cardModel.DataItemType === _utils_1.KpiValueMode.Measure) {
            sourceItem.mainValue = {
                type: undefined,
                hasPositiveMeaning: undefined,
                text: {
                    value: props.getMeasureDisplayText(),
                    useDefaultColor: cardModel.IgnoreDeltaColor
                }
            };
        }
        else {
            indicatorType = props.getIndicatorType();
            isGood = props.getIsGood();
            sourceItem.mainValue = {
                type: indicatorType,
                hasPositiveMeaning: isGood,
                text: {
                    value: props.getMainValueText(),
                    useDefaultColor: cardModel.IgnoreDeltaColor
                }
            };
            sourceItem.variableValue1 = {
                type: indicatorType,
                hasPositiveMeaning: isGood,
                text: {
                    value: props.getSubValue1Text(),
                    useDefaultColor: cardModel.IgnoreSubValue1DeltaColor
                }
            };
            sourceItem.variableValue2 = {
                type: indicatorType,
                hasPositiveMeaning: isGood,
                text: {
                    value: props.getSubValue2Text(),
                    useDefaultColor: cardModel.IgnoreSubValue2DeltaColor
                }
            };
        }
        if (cardModel.ShowSparkline) {
            sparklineOptions = props.getSparklineOptions();
            this._hasSparkline = !!sparklineOptions;
            if (this._hasSparkline) {
                sourceItem.sparklineOptions = sparklineOptions;
            }
        }
        if (captions.length > 0) {
            sourceItem.title = captions.pop();
            sourceItem.subTitle = captions.length != 0 ? captions.join(' - ') : undefined;
        }
    };
    cardsItem.prototype.setNewCardProperties = function (sourceItem, cardModel, props) {
        sourceItem.layout = this.layoutCollection[cardModel.ID];
        sourceItem.dataAccessor = props;
    };
    cardsItem.prototype._setSourceItemProperties = function (sourceItem, cardModel, props) {
        _super.prototype._setSourceItemProperties.call(this, sourceItem, cardModel, props);
        if (this.useNewViewer)
            this.setNewCardProperties(sourceItem, cardModel, props);
        else
            this.setOldCardProperties(sourceItem, cardModel, props);
    };
    cardsItem.prototype._getWidget = function () {
        return this.useNewViewer ? this.apiHandlers : undefined;
    };
    cardsItem.prototype._generateInnerBorderClassesUnsafe = function (element) {
        var classes = _super.prototype._generateInnerBorderClassesUnsafe.call(this, element);
        var cardWithoutBackground = !this.hasParentContainer() && !this.hasCaption();
        if (cardWithoutBackground) {
            classes.push(_base_item_1.cssClassNamesBaseItem.cardWihtoutBackground);
        }
        if (element) {
            cardWithoutBackground ?
                element.classList.add(_base_item_1.cssClassNamesBaseItem.cardWihtoutBackground) :
                element.classList.remove(_base_item_1.cssClassNamesBaseItem.cardWihtoutBackground);
        }
        return classes;
    };
    return cardsItem;
}(_kpi_item_1.kpiItem));
exports.cardsItem = cardsItem;


/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var _utils_1 = __webpack_require__(3);
var _widget_viewer_item_1 = __webpack_require__(349);
var kpiItem = (function (_super) {
    __extends(kpiItem, _super);
    function kpiItem(container, options) {
        return _super.call(this, container, options) || this;
    }
    kpiItem.prototype.renderContentUnsafe = function (element, changeExisting, afterRenderCallback) {
        var result = _super.prototype.renderContentUnsafe.call(this, element, changeExisting, afterRenderCallback);
        element.classList.add('dx-dashboard-widget-viewer-item');
        return result;
    };
    kpiItem.prototype._showTitle = function () {
        return true;
    };
    kpiItem.prototype._getElementsName = function () {
    };
    kpiItem.prototype.selectTupleUnsafe = function (tuple, state) {
        $.each(this.widgetsViewer.itemsList, function (index, viewer) {
            if (_utils_1.checkValuesAreEqual(viewer.tag, tuple[0].Value)) {
                if (state) {
                    viewer.select();
                }
                else {
                    viewer.clearSelection();
                }
            }
        });
    };
    kpiItem.prototype._setSelectionUnsafe = function (values) {
        _super.prototype._setSelectionUnsafe.call(this, values);
        this.clearSelection();
        this._applySelection();
    };
    kpiItem.prototype._getDataPoint = function (element) {
        var that = this, viewModel = that.options.ViewModel, elementTag = element.tag, titleValues = elementTag ? elementTag : [], elementIndex = elementTag ? 0 : element.index, elViewModel = viewModel[that._getElementsName()][elementIndex];
        return {
            getValues: function (name) {
                return (name == 'Default') ? titleValues : null;
            },
            getDeltaIds: function () {
                return elViewModel.DataItemType === 'Delta' ? [elViewModel.ID] : [];
            },
            getMeasureIds: function () {
                return elViewModel.DataItemType === 'Measure' ? [elViewModel.ID] : [];
            },
            getSelectionValues: function () {
                return elementTag;
            }
        };
    };
    kpiItem.prototype._isMultiDataSupported = function () {
        return true;
    };
    kpiItem.prototype._setSourceItemProperties = function (sourceItem, elementModel, props) {
        var selectionValues = props.getSelectionValues(), serverSelection = this.options.SelectedValues, currentLine, isSelected = function () {
            if (serverSelection && selectionValues) {
                for (var i = 0; i < serverSelection.length; i++) {
                    currentLine = serverSelection[i];
                    if (_utils_1.checkValuesAreEqual(selectionValues, currentLine))
                        return true;
                }
            }
            return false;
        };
        _utils_1.extend(sourceItem, this._configureHover(selectionValues));
        sourceItem.tag = selectionValues;
        sourceItem.isSelected = isSelected();
    };
    kpiItem.prototype._applySelectionUnsafe = function () {
        var that = this;
        that.getSelectedTuples().forEach(function (tuple) { return that.selectTuple(tuple, true); });
    };
    return kpiItem;
}(_widget_viewer_item_1.widgetViewerItem));
exports.kpiItem = kpiItem;


/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _utils_1 = __webpack_require__(3);
var _widgets_viewer_1 = __webpack_require__(568);
var _base_item_1 = __webpack_require__(29);
var widgetViewerItem = (function (_super) {
    __extends(widgetViewerItem, _super);
    function widgetViewerItem(container, options) {
        return _super.call(this, container, options) || this;
    }
    widgetViewerItem.prototype._clearSelectionUnsafe = function () {
        this.widgetsViewer.clearSelections();
    };
    widgetViewerItem.prototype.getInfoUnsafe = function () {
        return _utils_1.deepExtend(_super.prototype.getInfoUnsafe.call(this), this.widgetsViewer.getSizeParams());
    };
    widgetViewerItem.prototype.renderContentUnsafe = function (element, changeExisting, afterRenderCallback) {
        var that = this, options = that._getWidgetViewerOptions(), isInAsyncRendering = true;
        options.viewer.onAllItemsRenderComplete = function () {
            if (that.widgetsViewer) {
                afterRenderCallback();
            }
            else {
                isInAsyncRendering = false;
            }
        };
        if (changeExisting && that.widgetsViewer) {
            that.widgetsViewer.option(options);
        }
        else {
            that.widgetsViewer = that.createWidgetViewer(element, options);
        }
        return isInAsyncRendering;
    };
    widgetViewerItem.prototype.createWidgetViewer = function (element, options) {
        return new _widgets_viewer_1.dxWidgetsViewer(element, options);
    };
    widgetViewerItem.prototype._getContainerPositionUnsafe = function () {
        var that = this, position = _super.prototype._getContainerPositionUnsafe.call(this), itemInfo = that.getInfo(), scrollSize = itemInfo && itemInfo.scroll && itemInfo.scroll.vertical ? itemInfo.scroll.size : 0;
        position.offsetX -= scrollSize;
        return position;
    };
    widgetViewerItem.prototype._getSpecificWidgetViewerOptions = function () {
        var _this = this;
        return {
            itemOptions: {
                encodeHtml: this._isEncodeHtml(),
                itemWidgetOptionsPrepared: function (options) { return _this._raiseItemWidgetOptionsPrepared(options); }
            }
        };
    };
    widgetViewerItem.prototype._getWidgetType = function () {
        return;
    };
    widgetViewerItem.prototype._isHoverEnabled = function () {
        return this._selectionMode() !== 'none';
    };
    widgetViewerItem.prototype._configureHover = function (selectionValues) {
        var hoverEnabled = selectionValues !== null && this._isHoverEnabled() && _utils_1.allowSelectValue(selectionValues);
        return {
            hoverEnabled: hoverEnabled,
            cursor: hoverEnabled ? 'pointer' : 'default'
        };
    };
    widgetViewerItem.prototype._getWidgetViewerOptions = function () {
        var _this = this;
        var viewModel = this.options.ViewModel, contentDescription = viewModel ? viewModel.ContentDescription : undefined, commonOptions = {
            viewer: {
                redrawOnResize: false
            }
        };
        if (this.dataController)
            this.dataController.setSourceItemProperties = function (sourceItem, element, properties) { return _this._setSourceItemProperties(sourceItem, element, properties); };
        commonOptions.dataSource = this._getDataSource();
        commonOptions.viewer.onclick = this._getOnClickHandler();
        commonOptions.viewer.onhover = this._getOnHoverHandler();
        commonOptions.viewer.widgetType = this._getWidgetType();
        commonOptions.viewer.method = contentDescription ? this._convertContentArrangementMode(contentDescription.ArrangementMode) : 'auto';
        commonOptions.viewer.count = contentDescription ? contentDescription.LineCount : 1;
        commonOptions.viewer.supportAnimation = this._supportAnimation();
        var resultOptions = _utils_1.deepExtend(commonOptions, this._getSpecificWidgetViewerOptions());
        this._ensureOptions(resultOptions);
        return resultOptions;
    };
    widgetViewerItem.prototype._supportAnimation = function () {
        return false;
    };
    widgetViewerItem.prototype._getDataSource = function () {
        if (this.dataController)
            return this.dataController.getDataSource();
    };
    widgetViewerItem.prototype._getElementInteractionValue = function (element, viewModel) {
        return element.tag;
    };
    widgetViewerItem.prototype._getOnClickHandler = function () {
        var that = this;
        return function (e) {
            that._raiseItemClick(e.item);
        };
    };
    widgetViewerItem.prototype._getOnHoverHandler = function () {
        var that = this;
        return function (e) {
            that._raiseItemHover(e.item, e.state);
        };
    };
    widgetViewerItem.prototype._convertContentArrangementMode = function (contentArrangementMode) {
        switch (contentArrangementMode) {
            case 'FixedColumnCount':
                return 'column';
            case 'FixedRowCount':
                return 'row';
            default:
                return 'auto';
        }
    };
    widgetViewerItem.prototype._resizeUnsafe = function () {
        _super.prototype._resizeUnsafe.call(this);
        this.widgetsViewer.redraw();
    };
    widgetViewerItem.prototype.updateContentStateUnsafe = function () {
        var _this = this;
        this.widgetsViewer.itemsList.forEach(function (viewer) {
            viewer.setHoverEnabledState(_this._getCustomHoverEnabled());
        });
    };
    widgetViewerItem.prototype._setSourceItemProperties = function (sourceItem, elementModel, props) {
    };
    widgetViewerItem.prototype._isMultiDataSupported = function () {
        return true;
    };
    widgetViewerItem.prototype._ensureOptions = function (options) {
    };
    return widgetViewerItem;
}(_base_item_1.baseItem));
exports.widgetViewerItem = widgetViewerItem;


/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = __webpack_require__(69);
var _utils_1 = __webpack_require__(3);
var _css_class_names_1 = __webpack_require__(63);
function patchStyles(options) {
    options.style.borderWidth = options.borderWidth || 0;
    options.selectionStyle.borderWidth = options.borderWidth || 0;
    options.hoverStyle.borderWidth = options.borderWidth || 0;
}
var BaseWidgetItem = (function () {
    function BaseWidgetItem(options) {
        this._options = _utils_1.deepExtend({}, this._getDefaultOptions(), options);
        this._type = this._options.type || 'unknown';
        this._isSelected = !!this._options.isSelected;
        this.tag = this._options.tag;
        patchStyles(this._options);
        this._hoverEnabled = !!this._options.hoverEnabled;
    }
    BaseWidgetItem.prototype._getDefaultOptions = function () {
        return {
            cursor: 'default',
            isSelected: false,
            hoverEnabled: false,
            style: {
                backgroundColor: '#ffffff',
                borderStyle: 'solid',
                borderColor: '#C8C8CC'
            },
            selectionStyle: {
                backgroundColor: 'rgba(95,139,149,0.35)',
                borderStyle: 'solid',
                borderColor: '#5F8B95'
            },
            hoverStyle: {
                backgroundColor: 'rgba(95,139,149,0.25)',
                borderStyle: 'solid',
                borderColor: '#5F8B95'
            }
        };
    };
    BaseWidgetItem.prototype.dispose = function () {
        var that = this;
        that._type = null;
        that._isSelected = null;
        that.tag = null;
        that._hoverEnabled = null;
        this._disposeClickEvent();
        this._disposeHoverEvent();
        if (that._itemDiv && that._itemDiv.parentElement) {
            that._itemDiv.parentElement.removeChild(that._itemDiv);
        }
        that._itemDiv = null;
    };
    BaseWidgetItem.prototype._getStyle = function (isSelected) {
        return isSelected ? this._options.selectionStyle : this._options.style;
    };
    BaseWidgetItem.prototype.select = function () {
        var that = this;
        that._isSelected = true;
        if (that._itemDiv) {
            that._itemDiv.classList.add(_css_class_names_1.cssClassNames.selectedItem);
        }
    };
    BaseWidgetItem.prototype._hover = function (isHover) {
        var that = this;
        if (that._hoverEnabled) {
            if (isHover) {
                that._itemDiv.classList.add(_css_class_names_1.cssClassNames.hoveredItem);
            }
            else {
                that._itemDiv.classList.remove(_css_class_names_1.cssClassNames.hoveredItem);
            }
        }
    };
    BaseWidgetItem.prototype.clearSelection = function () {
        var that = this;
        that._isSelected = false;
        if (that._itemDiv) {
            that._itemDiv.classList.remove(_css_class_names_1.cssClassNames.selectedItem);
        }
    };
    BaseWidgetItem.prototype._disposeClickEvent = function () {
        if (this._itemDiv) {
            events_1.off(this._itemDiv, 'click.cardItem');
        }
    };
    BaseWidgetItem.prototype._disposeHoverEvent = function () {
        if (this._itemDiv) {
            events_1.off(this._itemDiv, 'mouseenter');
            events_1.off(this._itemDiv, 'mouseleave');
        }
    };
    BaseWidgetItem.prototype.setClickHandler = function (handler) {
        var that = this;
        if (typeof handler === 'function' && that._itemDiv) {
            this._disposeClickEvent();
            events_1.on(that._itemDiv, 'click.cardItem', function () {
                handler.call(null, { item: that });
            });
        }
    };
    BaseWidgetItem.prototype.setHoverHandler = function (handler) {
        var that = this;
        if (that._itemDiv) {
            this._disposeHoverEvent();
            events_1.on(that._itemDiv, 'mouseenter', function () {
                that._hover(true);
                if (typeof handler === 'function') {
                    handler.call(null, { item: that, state: true });
                }
            });
            events_1.on(that._itemDiv, 'mouseleave', function () {
                that._hover(false);
                if (typeof handler === 'function') {
                    handler.call(null, { item: that, state: false });
                }
            });
        }
    };
    BaseWidgetItem.prototype.draw = function (width, height, index, commonItemsOptions) {
        if (!this._itemDiv) {
            return this.initDraw(width, height, index);
        }
        return this._itemDiv;
    };
    BaseWidgetItem.prototype.initDraw = function (width, height, index) {
        var that = this, itemDiv;
        width = width || 0;
        height = height || 0;
        index = index || 0;
        that.index = index;
        this._disposeClickEvent();
        this._disposeHoverEvent();
        itemDiv = document.createElement('div');
        itemDiv.classList.add('dx-' + that._type);
        itemDiv.style.cursor = that._options.cursor;
        that._itemDiv = itemDiv;
        return itemDiv;
    };
    BaseWidgetItem.prototype._applyExtraStyles = function () {
        if (this._isSelected) {
            this.select();
        }
        else {
            this.clearSelection();
        }
    };
    BaseWidgetItem.prototype.toggleSelection = function () {
        if (this._isSelected) {
            this.clearSelection();
        }
        else {
            this.select();
        }
    };
    BaseWidgetItem.prototype.getWidget = function () {
        return null;
    };
    BaseWidgetItem.prototype.finishRender = function (params) {
        params = params || {};
        var that = this, clickHandler = params.clickHandler, hoverHandler = params.hoverHandler, drawOptions = params.drawOptions;
        that.setClickHandler(clickHandler);
        that.setHoverHandler(hoverHandler);
        that.rerender(drawOptions);
        that._applyExtraStyles();
    };
    BaseWidgetItem.prototype.getItemContainer = function () {
        var itemDiv = this._itemDiv;
        if (itemDiv) {
            return itemDiv;
        }
        return;
    };
    BaseWidgetItem.prototype._formStyle = function (selector, cssProperties) {
        var resultCss = '.dx-' + this._type + ' ' + selector + '{', cssProperty;
        for (cssProperty in cssProperties) {
            resultCss += cssProperty + ':' + cssProperties[cssProperty] + 'px;';
        }
        return resultCss + '}';
    };
    BaseWidgetItem.prototype.getCssStyle = function (width, height, _commonItemsOptions, prefix) {
        var styleOptions = { height: height };
        if (!this._options.ignoreProportions) {
            styleOptions['width'] = width;
        }
        return prefix + ' ' + this._formStyle('', styleOptions);
    };
    BaseWidgetItem.prototype.calcCommonItemSpecificOptions = function (width, height) {
    };
    BaseWidgetItem.prototype.resize = function (width, height, index, commonItemsOptions) {
    };
    BaseWidgetItem.prototype.rerender = function (drawOptions) {
    };
    BaseWidgetItem.prototype.detachItem = function () {
    };
    BaseWidgetItem.prototype.setHoverEnabledState = function (hoverEnabled) {
        this._hoverEnabled = hoverEnabled;
    };
    return BaseWidgetItem;
}());
exports.BaseWidgetItem = BaseWidgetItem;


/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _render_helper_1 = __webpack_require__(28);
var _base_item_1 = __webpack_require__(29);
var groupItem = (function (_super) {
    __extends(groupItem, _super);
    function groupItem(container, options) {
        return _super.call(this, container, options) || this;
    }
    groupItem.prototype.renderContentUnsafe = function (element, changeExisting, afterRenderCallback) {
        element.classList.add(_base_item_1.cssClassNamesBaseItem.groupItem);
        return false;
    };
    groupItem.prototype._itemHasOwnContent = function () {
        return false;
    };
    groupItem.prototype.updateState = function (state) {
    };
    groupItem.prototype.getOffset = function () {
        var borderSize = _render_helper_1.RenderHelper.getBorderSizeByClasses([_base_item_1.cssClassNamesBaseItem.groupItem]);
        return {
            width: borderSize.width,
            height: borderSize.height + this._calcHeaderAndFooterHeight()
        };
    };
    return groupItem;
}(_base_item_1.baseItem));
exports.groupItem = groupItem;


/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _caption_toolbar_css_classes_1 = __webpack_require__(31);
var _static_toolbar_1 = __webpack_require__(219);
var MobileLayoutCaptionToolbar = (function () {
    function MobileLayoutCaptionToolbar(_container, _controlContainer, _popupContainer, _encodeHtml, _className, _hasBorder) {
        if (_hasBorder === void 0) { _hasBorder = false; }
        this._container = _container;
        this._controlContainer = _controlContainer;
        this._popupContainer = _popupContainer;
        this._encodeHtml = _encodeHtml;
        this._className = _className;
        this._hasBorder = _hasBorder;
        this._disabled = false;
    }
    Object.defineProperty(MobileLayoutCaptionToolbar.prototype, "element", {
        get: function () {
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MobileLayoutCaptionToolbar.prototype, "disabled", {
        get: function () {
            return this._disabled;
        },
        enumerable: true,
        configurable: true
    });
    MobileLayoutCaptionToolbar.prototype.calcHeight = function (options) {
        var toolbar = this._createInstance();
        toolbar.update(options);
        var height = toolbar._contentToolbar.calcHeight(this._prepareContentToolbarOptions(options)) + toolbar._actionToolbar.calcHeight(this._prepareActionToolbarOptions(options));
        toolbar.dispose();
        return height;
    };
    MobileLayoutCaptionToolbar.prototype.calcMinWidth = function (options) {
        return 0;
    };
    MobileLayoutCaptionToolbar.prototype.update = function (options) {
        if (!this._contentToolbar) {
            this._contentToolbar = new _static_toolbar_1.StaticCaptionToolbar(this._container, this._controlContainer, this._popupContainer, this._encodeHtml, [this._className, _caption_toolbar_css_classes_1.cssClasses.contentToolbar].join(' '), this._hasBorder, true);
        }
        var contentToolbarOptions = this._prepareContentToolbarOptions(options);
        var contentToolbarHeightChanged = this._contentToolbar.update(contentToolbarOptions);
        if (!this._actionToolbar) {
            var contentToolbarIsHidden = !this._hasItems(contentToolbarOptions);
            this._actionToolbar = new _static_toolbar_1.StaticCaptionToolbar(this._container, this._controlContainer, this._popupContainer, this._encodeHtml, [this._className, _caption_toolbar_css_classes_1.cssClasses.actionToolbar].join(' '), contentToolbarIsHidden && this._hasBorder, true);
        }
        var actualToolbarHeightChanged = this._actionToolbar.update(this._prepareActionToolbarOptions(options));
        this._toolbars = [this._actionToolbar, this._contentToolbar];
        return contentToolbarHeightChanged || actualToolbarHeightChanged;
    };
    MobileLayoutCaptionToolbar.prototype.onResize = function () {
        this._toolbars.forEach(function (toolbar) { return toolbar.onResize(); });
    };
    MobileLayoutCaptionToolbar.prototype.dispose = function () {
        this._toolbars.forEach(function (toolbar) { return toolbar.dispose(); });
    };
    MobileLayoutCaptionToolbar.prototype._createInstance = function () {
        return new MobileLayoutCaptionToolbar(undefined, undefined, undefined, this._encodeHtml, this._className, this._hasBorder);
    };
    MobileLayoutCaptionToolbar.prototype._prepareContentToolbarOptions = function (options) {
        return options ? {
            staticItems: options.staticItems,
            actionItems: [],
            stateItems: [],
            navigationItems: []
        } : undefined;
    };
    MobileLayoutCaptionToolbar.prototype._prepareActionToolbarOptions = function (options) {
        return options ? {
            staticItems: options.navigationItems,
            actionItems: options.actionItems,
            stateItems: options.stateItems,
            navigationItems: []
        } : undefined;
    };
    MobileLayoutCaptionToolbar.prototype._hasItems = function (options) {
        return options.navigationItems.length > 0 || options.actionItems.length > 0 || options.stateItems.length > 0 || options.staticItems.length > 0;
    };
    return MobileLayoutCaptionToolbar;
}());
exports.MobileLayoutCaptionToolbar = MobileLayoutCaptionToolbar;


/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.paperKind = {};
exports.pageLayout = {};
exports.scaleMode = {};
exports.dashboardStatePosition = {};
exports.excelDashboardStatePosition = {};
exports.imageFormat = {};
exports.excelFormat = {};
exports.sizeMode = {};


/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var data_source_1 = __webpack_require__(65);
__webpack_require__(170);
var check_box_1 = __webpack_require__(170);
var data_grid_1 = __webpack_require__(246);
var date_box_1 = __webpack_require__(100);
var number_box_1 = __webpack_require__(589);
var select_box_1 = __webpack_require__(173);
var tag_box_1 = __webpack_require__(101);
var text_box_1 = __webpack_require__(121);
var $ = __webpack_require__(2);
var _localization_ids_1 = __webpack_require__(21);
var _localizer_1 = __webpack_require__(16);
var _utils_1 = __webpack_require__(3);
var _dashboard_layout_mode_helper_1 = __webpack_require__(77);
var _dialog_form_1 = __webpack_require__(152);
var PARAMETERDIALOG_GRID_ROW_HEIGHT = 34;
var dialogClasses = {
    allowNullCheckBox: 'dx-parameter-allownull-checkbox',
    allowNullCheckBoxSize: 'dx-datagrid-checkbox-size',
    valueEditor: 'dx-parameter-value-editor',
    multiselectValuePart: 'dx-dashboard-dialog-parameters-tag',
    theme: 'dx-dashboard-theme'
};
exports.parameterTypes = {
    string: 'String',
    int: 'Int',
    float: 'Float',
    bool: 'Bool',
    dateTime: 'DateTime',
    selector: 'Selector',
    multiselector: 'Multiselector',
    guid: 'Guid'
};
var parametersDialog = (function () {
    function parametersDialog(options) {
        this.valueChanged = $.Callbacks();
        this.options = options;
        if (this.options.getParametersCollection) {
            this.getParametersCollection = this.options.getParametersCollection;
        }
        if (this.options.submitParameters) {
            this.submitParameters = this.options.submitParameters;
        }
        this._initialize();
    }
    parametersDialog.prototype._initialize = function () {
        var _this = this;
        var that = this, options = that.options, numberOfParameters = that.getParametersCollection().getVisibleParameters().length, scroll = numberOfParameters > 8, dataGridActualHeight = (numberOfParameters + 1) * PARAMETERDIALOG_GRID_ROW_HEIGHT, allowNullColumn = that.allowNullColumn(), submitParameters = that.submitParameters, parameterEntities = [];
        that.dialogForm = new _dialog_form_1.dialogForm({
            title: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ParametersFormCaption),
            fullScreenMode: options.fullScreenMode,
            dialogContainer: options.parametersDialogContainer,
            width: allowNullColumn ? _dialog_form_1.dialogSizes.width : _dialog_form_1.dialogSizes.minWidth,
            height: scroll ? _dialog_form_1.dialogSizes.height : dataGridActualHeight + _dialog_form_1.dialogSizes.elementsHeight,
            allowScrolling: false,
            deferredRendering: false,
            onShowing: options.onShowing,
            onShown: options.onShown,
            onHidden: options.onHidden,
            buttons: [{
                    name: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ButtonReset), func: function () { return that.resetParameterValues(); }
                }, {
                    name: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ButtonSubmit), hide: true, func: function () { return that.submitParameterValues(); }, isDefault: true
                }, {
                    name: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ButtonCancel), hide: true, func: function () { }
                }],
            renderContent: function (controlCreationCallbacks) {
                var parametersForm = document.createElement('div');
                parametersForm.classList.add(_dialog_form_1.dialogClasses.form);
                _this._dataGrid = that._generateContent(parametersForm, controlCreationCallbacks);
                return parametersForm;
            },
            disposeContent: function () {
                _this._disposeGrid();
            },
            setActualState: function () {
                that.setActualState();
            }
        });
    };
    parametersDialog.prototype._disposeGrid = function () {
        if (this._dataGrid) {
            this._dataGrid.option('dataSource').forEach(function (entry) { return entry.dispose(); });
            this._dataGrid.dispose();
        }
    };
    parametersDialog.prototype.appendNullGridColumn = function (gridColumns) {
        if (this.allowNullColumn())
            gridColumns.push(this.createNullColumn());
    };
    parametersDialog.prototype.allowNullColumn = function () {
        var allowNullValues;
        this.getParametersCollection().getVisibleParameters().forEach(function (parameter) {
            if (parameter.getAllowNull())
                allowNullValues = true;
        });
        return allowNullValues;
    };
    parametersDialog.prototype.createNullColumn = function () {
        return {
            dataField: 'divAllowNull',
            caption: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ParametersFormAllowNullColumnCaption),
            width: '20%',
            alignment: 'center',
            cellTemplate: function (container, options) {
                _utils_1.$unwrap(container).appendChild(_utils_1.$unwrap(options.value));
            }
        };
    };
    parametersDialog.prototype.createGridColumns = function () {
        var allowNullColumn = this.allowNullColumn();
        var gridColumns = [{
                dataField: 'description',
                caption: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ParametersFormNameColumnCaption),
                dataType: 'string',
                width: allowNullColumn ? '40%' : '50%'
            }, {
                dataField: 'divValueEditor',
                caption: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ParametersFormValueColumnCaption),
                width: allowNullColumn ? '40%' : '50%',
                cssClass: 'dx-parameter-value-editor',
                showEditorAlways: true,
                editCellTemplate: function (cellElement, cellInfo) {
                    _utils_1.$unwrap(cellElement).appendChild(_utils_1.$unwrap(cellInfo.data.divValueEditor));
                }
            }];
        this.appendNullGridColumn(gridColumns);
        return gridColumns;
    };
    parametersDialog.prototype._generateContent = function (element, controlCreationCallbacks, subscribeValueChanged) {
        if (subscribeValueChanged === void 0) { subscribeValueChanged = false; }
        var that = this, parameterEntities = that.getParametersCollection().getVisibleParameters().map(function (parameter) {
            var parameterEntity = that._getParameterEntity(parameter, controlCreationCallbacks);
            if (subscribeValueChanged) {
                parameterEntity.valueChanged.add(function (e) { return that.valueChanged.fire(); });
            }
            return parameterEntity;
        });
        this.submitParameterValues = function () {
            that.submitParameters(parameterEntities.map(function (parameterEntity) { return parameterEntity.wrapParameter(); }));
        };
        this.resetParameterValues = function () {
            var parametersCollection = that.getParametersCollection();
            parameterEntities.forEach(function (parameterEntity) {
                parameterEntity.setValue(parametersCollection.getParameterDefaultValue(parameterEntity.name));
            });
        };
        this.setActualState = function () {
            var parametersCollection = that.getParametersCollection();
            parameterEntities.forEach(function (parameterEntity) {
                var parameter = parametersCollection.getParameterByName(parameterEntity.name);
                if (parameter) {
                    var lookUpValues = parameter.getLookUpValues();
                    if (lookUpValues !== null)
                        parameterEntity.setLookUpValues(lookUpValues);
                    parameterEntity.setValue(parameter.getValue());
                }
            });
        };
        return new data_grid_1.default(element, {
            dataSource: parameterEntities,
            columns: that.createGridColumns(),
            width: '100%',
            height: '100%',
            showColumnLines: true,
            showRowLines: true,
            allowColumnResizing: true,
            loadPanel: {
                enabled: false
            },
            paging: { enabled: false },
            sorting: { mode: 'none' },
            scrolling: {
                mode: 'standard'
            }
        });
    };
    parametersDialog.prototype.generateContent = function (element, disposeCallback) {
        var _this = this;
        var controlCreationCallbacks = $.Callbacks();
        this._disposeGrid();
        this._dataGrid = this._generateContent(element, controlCreationCallbacks, true);
        var prepareActualValues = function (controlCreationCallbacks) {
            controlCreationCallbacks.fire();
            _this.setActualState();
        };
        this._dataGrid.option('onContentReady', function (e) {
            prepareActualValues(controlCreationCallbacks);
        });
        prepareActualValues(controlCreationCallbacks);
        return {
            grid: this._dataGrid,
            submitParameterValues: function () { return _this.submitParameterValues(); },
            resetParameterValues: function () { return _this.resetParameterValues(); },
            valueChanged: this.valueChanged,
            dispose: function () {
                _this.dispose();
                disposeCallback && disposeCallback();
            }
        };
    };
    parametersDialog.prototype.show = function () {
        this.dialogForm.showDialog();
    };
    parametersDialog.prototype.hide = function () {
        this.dialogForm.hideDialog();
    };
    parametersDialog.prototype.dispose = function () {
        this.dialogForm && this.dialogForm.dispose();
        this._disposeGrid();
    };
    parametersDialog.prototype._getParameterEntity = function (parameter, controlCreationCallbacks) {
        var _this = this;
        var that = this, entityOptions = {
            name: parameter.getName(),
            description: parameter.getDescription(),
            defaultValue: parameter.getDefaultValue(),
            controlCreationCallbacks: controlCreationCallbacks,
            allowNull: parameter.getAllowNull(),
            allowMultiselect: parameter.getAllowMultiselect(),
            type: parameter.getType(),
            value: parameter.getValue()
        };
        if (parameter.getLookUpValues() !== null) {
            if (entityOptions.allowMultiselect) {
                return new ParameterEntity(__assign({}, entityOptions, { valueName: 'value', createControl: function (element) { return new tag_box_1.default(element, {
                        showDropDownButton: true,
                        showSelectionControls: true,
                        selectAllMode: 'allPages',
                        itemTemplate: function (item) { return item.displayValue; },
                        multiline: false,
                        tagTemplate: function (data, $element) {
                            var element = _utils_1.$unwrap($element);
                            if (element) {
                                element.innerText = $(element).is(':first-child') ? data.displayValue : ', ' + data.displayValue;
                                element.classList.add(dialogClasses.multiselectValuePart);
                                return element;
                            }
                            return undefined;
                        },
                        searchEnabled: true,
                        displayExpr: 'displayValue',
                        valueExpr: 'value',
                        searchExpr: 'displayValue',
                        placeholder: _localizer_1.localizer.getString(_localization_ids_1.localizationId.ParametersSelectorText),
                        dropDownOptions: {
                            container: _this.options.parametersDialogContainer
                        }
                    }); } }));
            }
            else {
                return new ParameterEntity(__assign({}, entityOptions, { valueName: 'value', createControl: function (element) { return new select_box_1.default(element, {
                        itemTemplate: function (item) { return item.displayValue; },
                        searchEnabled: true,
                        displayExpr: 'displayValue',
                        valueExpr: 'value',
                        searchExpr: 'displayValue',
                        placeholder: _localizer_1.localizer.getString(_localization_ids_1.localizationId.ParametersSelectorText),
                        dropDownOptions: {
                            container: _this.options.parametersDialogContainer
                        }
                    }); } }));
            }
        }
        else {
            switch (parameter.getType()) {
                case exports.parameterTypes.string:
                    return new ParameterEntity(__assign({}, entityOptions, { valueName: 'value', createControl: function (element) { return new text_box_1.default(element); } }));
                case exports.parameterTypes.int:
                    return new ParameterEntity(__assign({}, entityOptions, { valueName: 'value', createControl: function (element) { return new number_box_1.default(element, {
                            showSpinButtons: true,
                            step: 1
                        }); } }));
                case exports.parameterTypes.float:
                    return new ParameterEntity(__assign({}, entityOptions, { valueName: 'value', createControl: function (element) { return new number_box_1.default(element, {
                            showSpinButtons: true,
                            step: 0.1
                        }); } }));
                case exports.parameterTypes.bool:
                    return new ParameterEntity(__assign({}, entityOptions, { valueName: 'value', createControl: function (element) { return new check_box_1.default(element, {
                            width: '100%'
                        }); } }));
                case exports.parameterTypes.dateTime:
                    return new ParameterEntity(__assign({}, entityOptions, { valueName: 'value', createControl: function (element) { return new date_box_1.default(element, {
                            pickerType: _dashboard_layout_mode_helper_1.DashboardLayoutModeHelper.isTouch ? 'rollers' : 'calendar',
                            width: '100%',
                            applyButtonText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ButtonOK),
                            cancelButtonText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ButtonCancel),
                            placeholder: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.SelectDate),
                            dropDownOptions: {
                                container: _this.options.parametersDialogContainer
                            },
                            onPopupInitialized: function (e) {
                                var popup = e.popup;
                                if (popup) {
                                    var todayBtn = {
                                        widget: 'dxButton', toolbar: 'bottom', location: 'center',
                                        options: {
                                            text: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ParametersFormCalendarTodayButton),
                                            onClick: function () {
                                                var dateBox = e.component;
                                                if (dateBox) {
                                                    var todate = new Date();
                                                    todate.setHours(0, 0, 0, 0);
                                                    dateBox.option('value', todate);
                                                }
                                            }
                                        }
                                    };
                                    if (_dashboard_layout_mode_helper_1.DashboardLayoutModeHelper.isTouch) {
                                        popup.option('toolbarItems').push(todayBtn);
                                    }
                                    else {
                                        popup.option('toolbarItems', [todayBtn]);
                                    }
                                }
                            }
                        }); } }));
                case exports.parameterTypes.guid:
                    return new ParameterEntity(__assign({}, entityOptions, { valueName: 'value', createControl: function (element) { return new text_box_1.default(element, {
                            mask: 'hhhhhhhh-hhhh-hhhh-hhhh-hhhhhhhhhhhh',
                            maskRules: { 'h': /[0-9A-Fa-f]/ },
                            useMaskedValue: true
                        }); } }));
            }
        }
    };
    return parametersDialog;
}());
exports.parametersDialog = parametersDialog;
var ParameterEntity = (function () {
    function ParameterEntity(options) {
        this.lookUpValues = [];
        this.valueChanged = $.Callbacks();
        this.name = options.name;
        this.type = options.type;
        this.description = options.description ? options.description : this.name;
        this.defaultValue = options.defaultValue;
        this.value = options.value;
        this.lookUpValues = [];
        this.allowNull = options.allowNull;
        this.allowMultiselect = options.allowMultiselect;
        this.createControl = options.createControl;
        this.valueName = options.valueName;
        this.controlCreationCallbacks = options.controlCreationCallbacks;
        this.divValueEditor = document.createElement('div');
        this.divValueEditor.classList.add(dialogClasses.valueEditor);
        this.divValueEditor.classList.add(dialogClasses.valueEditor + '-' + this.type.toLowerCase());
        this.divValueEditor.classList.add(dialogClasses.allowNullCheckBoxSize);
        if (this.allowNull) {
            this.divAllowNull = document.createElement('div');
            this.divAllowNull.classList.add(dialogClasses.allowNullCheckBox);
            this.divAllowNull.classList.add(dialogClasses.allowNullCheckBoxSize);
        }
        else {
            this.divAllowNull = document.createElement('center');
            this.divAllowNull.innerText = 'n/a';
        }
        this._addControl();
    }
    ParameterEntity.prototype.dispose = function () {
        if (this.allowNullControl) {
            this.allowNullControl.dispose();
        }
        if (this.control) {
            this.control.dispose();
        }
    };
    ParameterEntity.prototype.getValue = function () {
        if (this.allowNull && this.allowNullControl.option('value') === true)
            return null;
        else
            return this.control.option(this.valueName);
    };
    ParameterEntity.prototype.setValue = function (value) {
        if (this.allowMultiselect) {
            if ((value === null) || (value === undefined)) {
                value = [];
            }
            else if (!Array.isArray(value)) {
                value = [{ displayValue: value, value: value }];
            }
        }
        this.control.option('value', value);
    };
    ParameterEntity.prototype.setLookUpValues = function (values) {
        var newValues = [];
        values.forEach(function (value) {
            newValues.push({
                value: value.getValue(),
                displayValue: value.getDisplayText()
            });
        });
        this.lookUpValues = newValues;
        this.control.option('dataSource', new data_source_1.default(newValues));
    };
    ParameterEntity.prototype.wrapParameter = function () {
        return {
            Name: this.name,
            Value: this.getValue()
        };
    };
    ParameterEntity.prototype._addControl = function () {
        var _this = this;
        this.controlCreationCallbacks.add(function (component) {
            if (!_this.control) {
                _this.control = _this.createControl(_this.divValueEditor);
                _this.control.option('onValueChanged', _this.allowNull ?
                    function (e) {
                        var passNull = _this.allowNullControl.option('value'), value = _this.control.option('value');
                        if (_this.allowMultiselect) {
                            if (passNull === true && value.length > 0)
                                _this.allowNullControl.option('value', false);
                            else if (passNull === false && value.length === 0)
                                _this.allowNullControl.option('value', true);
                        }
                        else if (passNull === false && value === null)
                            _this.allowNullControl.option('value', true);
                        else if (passNull === true && value !== null)
                            _this.allowNullControl.option('value', false);
                        _this.valueChanged.fire();
                    } :
                    function (e) {
                        _this.valueChanged.fire();
                    });
                if (_this.allowNull) {
                    _this.allowNullControl = new check_box_1.default(_this.divAllowNull, {
                        value: _this.value === null,
                        onValueChanged: function (e) {
                            var value = _this.control.option('value');
                            if (e.value) {
                                _this.value = value;
                                if (_this.allowMultiselect && value !== [])
                                    _this.control.option('value', []);
                                else if (value !== null)
                                    _this.control.option('value', null);
                            }
                            else if (value === null || value.length === 0)
                                _this.control.option('value', _this.value);
                        }
                    });
                }
            }
        });
    };
    return ParameterEntity;
}());
exports.ParameterEntity = ParameterEntity;


/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _data_grid_item_1 = __webpack_require__(340);
var _combo_box_element_1 = __webpack_require__(553);
var _date_filter_element_1 = __webpack_require__(222);
var _list_element_1 = __webpack_require__(344);
var _tree_element_1 = __webpack_require__(556);
var _range_selector_item_1 = __webpack_require__(557);
var _bound_image_item_1 = __webpack_require__(559);
var _bubble_map_item_1 = __webpack_require__(560);
var _cards_item_1 = __webpack_require__(347);
var _chart_item_1 = __webpack_require__(573);
var _choropleth_map_item_1 = __webpack_require__(574);
var _custom_fake_item_1 = __webpack_require__(575);
var _gauges_item_1 = __webpack_require__(576);
var _geo_point_map_item_1 = __webpack_require__(577);
var _group_item_1 = __webpack_require__(351);
var _image_item_1 = __webpack_require__(345);
var _pie_item_1 = __webpack_require__(578);
var _pie_map_item_1 = __webpack_require__(579);
var _pivot_grid_item_1 = __webpack_require__(580);
var _tab_page_item_1 = __webpack_require__(581);
var _text_item_1 = __webpack_require__(582);
var _treemap_item_1 = __webpack_require__(583);
var _viewer_item_types_1 = __webpack_require__(118);
var ViewerItemFactory = (function () {
    function ViewerItemFactory() {
    }
    ViewerItemFactory.prototype.createItem = function (container, options) {
        switch (options.Type) {
            case _viewer_item_types_1.types.group:
                return new _group_item_1.groupItem(container, options);
            case _viewer_item_types_1.types.tabPage:
                return new _tab_page_item_1.tabPageItem(container, options);
            case _viewer_item_types_1.types.rangeFilter:
                return new _range_selector_item_1.rangeSelectorItem(container, options);
            case _viewer_item_types_1.types.chart:
            case _viewer_item_types_1.types.scatter:
                return new _chart_item_1.chartItem(container, options);
            case _viewer_item_types_1.types.pie:
                return new _pie_item_1.pieItem(container, options);
            case _viewer_item_types_1.types.card:
                return new _cards_item_1.cardsItem(container, options);
            case _viewer_item_types_1.types.grid:
                return new _data_grid_item_1.dataGridItem(container, options);
            case _viewer_item_types_1.types.pivot:
                return new _pivot_grid_item_1.pivotGridItem(container, options);
            case _viewer_item_types_1.types.gauge:
                return new _gauges_item_1.gaugesItem(container, options);
            case _viewer_item_types_1.types.text:
                return new _text_item_1.textItem(container, options);
            case _viewer_item_types_1.types.image:
                return new _image_item_1.imageItem(container, options);
            case _viewer_item_types_1.types.boundImage:
                return new _bound_image_item_1.boundImageItem(container, options);
            case _viewer_item_types_1.types.map:
            case _viewer_item_types_1.types.choroplethMap:
                return new _choropleth_map_item_1.choroplethMapItem(container, options);
            case _viewer_item_types_1.types.geoPointMap:
                return new _geo_point_map_item_1.geoPointMapItem(container, options);
            case _viewer_item_types_1.types.bubbleMap:
                return new _bubble_map_item_1.bubbleMapItem(container, options);
            case _viewer_item_types_1.types.pieMap:
                return new _pie_map_item_1.pieMapItem(container, options);
            case _viewer_item_types_1.types.treemap:
                return new _treemap_item_1.treemapItem(container, options);
            case _viewer_item_types_1.types.comboBox:
                return new _combo_box_element_1.comboBoxFilterElement(container, options);
            case _viewer_item_types_1.types.listBox:
                return new _list_element_1.listFilterElement(container, options);
            case _viewer_item_types_1.types.treeView:
                return new _tree_element_1.treeViewFilterElement(container, options);
            case _viewer_item_types_1.types.dateFilter:
                return new _date_filter_element_1.dateFilterElement(container, options);
            case _viewer_item_types_1.types.custom:
                return new _custom_fake_item_1.customFakeItem(container, options);
            default:
                return {};
        }
    };
    return ViewerItemFactory;
}());
exports.ViewerItemFactory = ViewerItemFactory;
exports.defaultViewerItemFactory = new ViewerItemFactory();


/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var _utils_1 = __webpack_require__(3);
var disposable_object_1 = __webpack_require__(11);
var index_internal_1 = __webpack_require__(58);
var custom_item_1 = __webpack_require__(103);
var _base_item_1 = __webpack_require__(29);
var _viewer_item_factory_1 = __webpack_require__(355);
var custom_viewer_item_1 = __webpack_require__(590);
var ItemViewerAdapterBase = (function (_super) {
    __extends(ItemViewerAdapterBase, _super);
    function ItemViewerAdapterBase(dashboardItem, element, context, localContext, beforeRender, onDisposed) {
        if (beforeRender === void 0) { beforeRender = function (item) { }; }
        if (onDisposed === void 0) { onDisposed = function () { }; }
        var _this = _super.call(this) || this;
        _this.dashboardItem = dashboardItem;
        _this.element = element;
        _this.context = context;
        _this.localContext = localContext;
        _this.beforeRender = beforeRender;
        _this.onDisposed = onDisposed;
        _this.modelSubscriptions = [];
        _this.itemUpdated = function (item) { };
        _this.updateServerContentHandler = function (newContent) {
            if (newContent) {
                _this.ensureViewerItem(!_this.item, newContent);
                _this.item.updateState({ loading: false, operations: { actions: true, exportTo: true } });
            }
            else if (!!_this.item) {
                _this.item.updateState({ loading: true, operations: { exportTo: true } });
            }
            _this.itemUpdated(_this.item);
        };
        return _this;
    }
    Object.defineProperty(ItemViewerAdapterBase.prototype, "name", {
        get: function () {
            return this.dashboardItem.componentName();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ItemViewerAdapterBase.prototype, "_isDesignMode", {
        get: function () {
            var ignoreDesignMode = this.localContext && this.localContext.ignoreDesignMode || false;
            if (ignoreDesignMode) {
                return false;
            }
            else {
                return this.context.isDesignMode();
            }
        },
        enumerable: true,
        configurable: true
    });
    ItemViewerAdapterBase.prototype.ensureViewerItem = function (onlyCreation, content) {
        this.ensureViewerItemCore(onlyCreation, content);
    };
    ItemViewerAdapterBase.prototype.initialize = function () {
        var content = this.dashboardItem._getFullServerContent();
        if (content) {
            this.ensureViewerItem(true, content);
            this.itemUpdated(this.item);
        }
        this.modelSubscriptions.push(this.dashboardItem._subcribeServerContent(this.updateServerContentHandler));
    };
    ItemViewerAdapterBase.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.modelSubscriptions.forEach(function (subscription) { return subscription.dispose(); });
        if (this.item) {
            if (!!this.context.viewerItemDispose) {
                this.context.viewerItemDispose.fire(this.dashboardItem, this.item);
            }
            if (this.localContext) {
                this.localContext.viewerItemDispose.fire(this.dashboardItem, this.item);
            }
            this.detachFromModel(this.item, this.dashboardItem);
            this.item.dispose();
        }
        this.item = null;
        this.onDisposed();
    };
    ItemViewerAdapterBase.prototype.resume = function () {
        this.modelSubscriptions.push(this.dashboardItem._subcribeServerContent(this.updateServerContentHandler));
        this.attachToModel(this.item, this.dashboardItem);
        this.ensureViewerItemCore(false, this.dashboardItem._getFullServerContent());
    };
    ItemViewerAdapterBase.prototype.suspend = function () {
        if (!!this.item) {
            this.detachFromModel(this.item, this.dashboardItem);
        }
    };
    ItemViewerAdapterBase.prototype.ensureViewerItemCore = function (onlyCreation, content, additionalData) {
        if (!!this.context.beforeApplyViewerItemOptions) {
            this.context.beforeApplyViewerItemOptions.fire(this.dashboardItem, content, onlyCreation, additionalData);
        }
        if (!!this.localContext) {
            this.localContext.beforeApplyViewerItemOptions.fire(this.dashboardItem, content, onlyCreation);
        }
        if (onlyCreation) {
            this.dashboardItem._viewerItemCreated(true);
            this.item = this.createDashboardViewerItem(this.element, content, this.dashboardItem);
        }
        else {
            this.updateItemContent(content);
        }
    };
    ItemViewerAdapterBase.prototype.updateItemContent = function (content) {
        this.item.updateContent(content);
    };
    ItemViewerAdapterBase.prototype.createDashboardViewerItem = function (element, content, dashboardItem) {
        var _this = this;
        element.innerHTML = '';
        content.parentContainer = $(element).closest('.dx-dashboard-container')[0];
        content.controlContainer = _base_item_1.getControlContainer(element);
        if (this.localContext && this.localContext.boundaryContainer) {
            content.boundaryContainer = this.localContext.boundaryContainer;
        }
        var visualMode = this.localContext && this.localContext.visualMode && this.localContext.visualMode() || null;
        var viewerItem;
        if (this.dashboardItem instanceof custom_item_1.CustomItem) {
            if (visualMode === 'caption') {
                viewerItem = new custom_viewer_item_1.CustomItemViewer(this.dashboardItem, _utils_1.wrapPublicElement(element), content);
            }
            else {
                var viewerItemCreator = this.context.viewerItemCreator[this.dashboardItem.customItemType()];
                if (!!viewerItemCreator) {
                    viewerItem = viewerItemCreator(this.dashboardItem, _utils_1.wrapPublicElement(element), content);
                }
            }
        }
        if (!viewerItem) {
            var viewerItemFactory = (this.localContext && this.localContext.itemFactory) || _viewer_item_factory_1.defaultViewerItemFactory;
            viewerItem = viewerItemFactory.createItem(element, content);
        }
        if (!viewerItem) {
            throw new Error('ViewerItem is not created.');
        }
        if (!!this.context.viewerItemCreated) {
            this.context.viewerItemCreated.fire(this.dashboardItem, viewerItem);
        }
        if (this.localContext) {
            if (this.localContext.visualMode) {
                viewerItem.visualMode = this.localContext.visualMode();
            }
            this.localContext.viewerItemCreated.fire(this.dashboardItem, viewerItem);
            viewerItem.addContextCaptionToolbarOptions = function (toolbarOptions) {
                _this.context.addContextToolbarItems.fire(toolbarOptions, _this.dashboardItem);
                _this.localContext.addContextToolbarItems.fire(toolbarOptions, _this.dashboardItem);
            };
            if (this.localContext.createCaptionToolbar) {
                viewerItem.createCaptionToolbar = this.localContext.createCaptionToolbar;
            }
        }
        this.attachToModel(viewerItem, dashboardItem);
        this.beforeRender(viewerItem);
        viewerItem.dateToString = index_internal_1.fromUtcDateToString;
        viewerItem.render();
        return viewerItem;
    };
    ItemViewerAdapterBase.prototype.attachToModel = function (viewerItem, dashboardItem) {
        viewerItem.allowMultiselection = dashboardItem._allowMultiselection();
        this.modelSubscriptions.push(dashboardItem._allowMultiselection.subscribe(function (newValue) {
            viewerItem.allowMultiselection = newValue;
            viewerItem.forceUpdateInteractivity();
        }));
        viewerItem.allowMultiselectionChanged = function (allowed) {
            dashboardItem._allowMultiselection(allowed);
        };
    };
    ItemViewerAdapterBase.prototype.detachFromModel = function (viewerItem, dashboardItem) {
        this.modelSubscriptions.forEach(function (subscription) { return subscription.dispose(); });
        viewerItem.allowMultiselectionChanged = function () { };
    };
    return ItemViewerAdapterBase;
}(disposable_object_1.DisposableObject));
exports.ItemViewerAdapterBase = ItemViewerAdapterBase;


/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var disposable_object_1 = __webpack_require__(11);
var _title_toolbar_1 = __webpack_require__(338);
var DashboardTitleContext = (function (_super) {
    __extends(DashboardTitleContext, _super);
    function DashboardTitleContext(encodeHtml, findExtension, allowExport) {
        if (allowExport === void 0) { allowExport = true; }
        var _this = _super.call(this) || this;
        _this.parametersExtension = ko.pureComputed(function () { return findExtension('dashboard-parameter-dialog'); });
        _this.exportExtension = ko.pureComputed(function () { return allowExport ? findExtension('dashboard-export') : null; });
        _this.viewerApiExtension = ko.pureComputed(function () { return findExtension('viewer-api'); });
        _this.toDispose(_this.exportExtension);
        _this.toDispose(_this.parametersExtension);
        _this.toDispose(_this.viewerApiExtension);
        return _this;
    }
    return DashboardTitleContext;
}(disposable_object_1.DisposableObject));
exports.DashboardTitleContext = DashboardTitleContext;
var DashboardTitleComponent = (function (_super) {
    __extends(DashboardTitleComponent, _super);
    function DashboardTitleComponent(params, container, controlContainer) {
        var _this = _super.call(this) || this;
        _this.params = params;
        _this.container = container;
        _this.controlContainer = controlContainer;
        return _this;
    }
    DashboardTitleComponent.prototype.initialize = function () {
        var _this = this;
        var toolbar = new _title_toolbar_1.DashboardTitleToolbar(this.container, this.controlContainer, this.container, this.params.encodeHtml, this.params.options().allowHideEmptyToolbar, this.params.className);
        toolbar.update(this.params.options().toolbarOptions, this.params.options().centerAligned);
        this.params.height(toolbar.calcHeight(this.params.options().toolbarOptions));
        this.toDispose(toolbar);
        this.toDispose(this.params.options.subscribe(function (newOptions) {
            toolbar.update(newOptions.toolbarOptions, newOptions.centerAligned);
            _this.params.height(toolbar.calcHeight(newOptions.toolbarOptions));
        }));
        this.toDispose(this.params.width.subscribe(function (newValue) { return toolbar.onResize(); }));
    };
    return DashboardTitleComponent;
}(disposable_object_1.DisposableObject));
exports.DashboardTitleComponent = DashboardTitleComponent;
ko.components.register('dashboard-title', {
    viewModel: {
        createViewModel: function (params, componentInfo) {
            var element = componentInfo.element;
            var titleComponent = new DashboardTitleComponent(params, element.querySelector('.dx-dsh-title'), $(element).closest('.dx-dashboard-widget-container')[0]);
            titleComponent.initialize();
            ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                titleComponent.dispose();
            });
        }
    },
    template: "<div class='dx-dsh-title'></div>"
});


/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function createItemSizeUpdater(item, sizeController) {
    var handler = function () {
        var width = sizeController.getWidth();
        var height = sizeController.getHeight();
        if (Math.abs(width - item.width()) > 1 || Math.abs(height - item.height()) > 1) {
            item.setSize(width, height);
        }
    };
    sizeController.requestRepaint.add(handler);
    return {
        dispose: function () { return sizeController.requestRepaint.remove(handler); }
    };
}
exports.createItemSizeUpdater = createItemSizeUpdater;
function createElementSizeUpdater(element, sizeController) {
    var handler = function () {
        setElementSize(element, sizeController);
    };
    sizeController.requestRepaint.add(handler);
    return {
        dispose: function () { return sizeController.requestRepaint.remove(handler); }
    };
}
exports.createElementSizeUpdater = createElementSizeUpdater;
function setElementSize(element, sizeController) {
    var width = sizeController.getWidth();
    var height = sizeController.getHeight();
    element.style.width = width + 'px';
    element.style.height = height + 'px';
    if (width === 0 || height === 0) {
        element.classList.add('dx-dashboard-hidden-element');
    }
    else {
        element.classList.remove('dx-dashboard-hidden-element');
    }
}
exports.setElementSize = setElementSize;


/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var _dashboard_title_view_constants_1 = __webpack_require__(91);
var _layout_1 = __webpack_require__(155);
var _dashboard_title_model_1 = __webpack_require__(156);
var FullscreenItemModel = (function () {
    function FullscreenItemModel(dashboardContext, localContext, repaintRequest) {
        if (repaintRequest === void 0) { repaintRequest = $.Callbacks(); }
        var _this = this;
        this.dashboardContext = dashboardContext;
        this.localContext = localContext;
        this.repaintRequest = repaintRequest;
        this._dashboardItem = ko.observable(null);
        this._visible = ko.observable(false);
        this.dashboardItem = ko.computed(function () { return _this._dashboardItem(); });
        this.visible = ko.computed(function () { return _this._visible(); });
        this.viewModel = ko.computed(function () {
            return {
                dashboardItem: _this.dashboardItem(),
                dashboardContext: _this.dashboardContext,
                localContext: _this.localContext,
                repaintRequest: _this.repaintRequest
            };
        });
    }
    Object.defineProperty(FullscreenItemModel.prototype, "maximizedItemName", {
        get: function () {
            if (this._visible() && this.dashboardItem()) {
                return this.dashboardItem().componentName();
            }
            else {
                return '';
            }
        },
        enumerable: true,
        configurable: true
    });
    FullscreenItemModel.prototype.maximizeItem = function (dashboardItem) {
        this._dashboardItem(dashboardItem);
        this._visible(true);
    };
    FullscreenItemModel.prototype.restoreDownItem = function () {
        this._visible(false);
    };
    return FullscreenItemModel;
}());
exports.FullscreenItemModel = FullscreenItemModel;
ko.components.register('dashboard-viewer', {
    viewModel: {
        createViewModel: function (params, componentInfo) {
            var $element = $(componentInfo.element);
            var viewModel = {};
            var disposables = [];
            var headerHeight = ko.observable(_dashboard_title_view_constants_1.titleHeight);
            var hostSize = ko.observable();
            var timers = {
                interval: 0,
                timer: 0
            };
            viewModel.dashboard = params.dashboard;
            viewModel.dataSourceBrowser = params.dataSourceBrowser;
            viewModel.layout = params.layout;
            viewModel.headerHeight = headerHeight;
            viewModel.encodeHtml = params.encodeHtml;
            viewModel.fullscreenItemModel = params.fullscreenItemModel;
            viewModel.encodeHtml = params.encodeHtml;
            var titleModel = new _dashboard_title_model_1.DashboardTitleModel(params.titleContext, params.dashboard);
            viewModel.toolbarOptions = titleModel.toolbarOptions;
            viewModel.showTitle = titleModel.showTitle;
            viewModel.left = _layout_1.SplitterSize / 2;
            viewModel.right = _layout_1.SplitterSize / 2;
            var layoutTop = ko.computed(function () {
                return titleModel.showTitle() ? headerHeight() : 0;
            });
            viewModel.layoutTop = layoutTop;
            var layout = ko.unwrap(viewModel.layout);
            var updateSize = function (force) {
                if (force === void 0) { force = false; }
                if (!!layout && layout.isLayoutReady()) {
                    if ((!hostSize() || Math.abs(hostSize().width - $element.width()) > 1 || Math.abs(hostSize().height - $element.height()) > 1) &&
                        document.body.contains($element[0])) {
                        hostSize({ width: $element.width(), height: $element.height() });
                        clearTimeout(timers.timer);
                        timers.timer = 0;
                        clearInterval(timers.interval);
                        timers.interval = 0;
                        var updateSize_1 = function () {
                            layout.updateSize($element.width(), $element.height() - layoutTop());
                        };
                        if (!force) {
                            timers.timer = window.setTimeout(function () {
                                updateSize_1();
                                startInterval();
                            }, 350);
                        }
                        else {
                            updateSize_1();
                            startInterval();
                        }
                    }
                }
            };
            var startInterval = function () {
                if (params.resizeByTimer()) {
                    timers.interval = window.setInterval(updateSize, 300);
                }
            };
            var forceRepaintCallback = function () { return updateSize(true); };
            params.repaintRequest.add(forceRepaintCallback);
            startInterval();
            updateSize(true);
            disposables.push(headerHeight.subscribe(function () { hostSize(undefined); updateSize(true); }));
            disposables.push(titleModel.showTitle.subscribe(function () { hostSize(undefined); updateSize(true); }));
            var disposeCallback = function () {
                params.repaintRequest.remove(forceRepaintCallback);
                titleModel.dispose();
                disposables.forEach(function (disposable) { return disposable.dispose(); });
                disposables = [];
                clearTimeout(timers.timer);
                timers.timer = 0;
                clearInterval(timers.interval);
                timers.interval = 0;
                window.removeEventListener('unload', disposeCallback);
            };
            ko.utils.domNodeDisposal.addDisposeCallback(componentInfo.element, disposeCallback);
            window.addEventListener('unload', disposeCallback);
            return viewModel;
        }
    },
    template: { element: 'dx-dashboard-viewer' }
});


/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var _list_element_1 = __webpack_require__(344);
var _viewer_item_factory_1 = __webpack_require__(355);
var _viewer_item_types_1 = __webpack_require__(118);
var MobileItemViewerFactory = (function (_super) {
    __extends(MobileItemViewerFactory, _super);
    function MobileItemViewerFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MobileItemViewerFactory.prototype.createItem = function (container, options) {
        if (options.Type === _viewer_item_types_1.types.comboBox)
            return new _list_element_1.listFilterElement(container, options);
        return _super.prototype.createItem.call(this, container, options);
    };
    return MobileItemViewerFactory;
}(_viewer_item_factory_1.ViewerItemFactory));
exports.MobileItemViewerFactory = MobileItemViewerFactory;
var PopupResizeController = (function () {
    function PopupResizeController(_repaintRequest) {
        var _this = this;
        this._repaintRequest = _repaintRequest;
        this._resizeHandler = null;
        this.onInitialized = function (e) {
            if (!_this._resizeHandler) {
                _this._resizeHandler = function () { return e.component.repaint(); };
                _this._repaintRequest.add(_this._resizeHandler);
            }
        };
        this.onDisposing = function (e) {
            _this._resizeHandler && _this._repaintRequest.remove(_this._resizeHandler);
        };
    }
    return PopupResizeController;
}());
exports.PopupResizeController = PopupResizeController;
exports.createFullscreenItemViewModel = function (fullscreenItemModel, masterFilters, repaintRequest) {
    var resizeController = new PopupResizeController(repaintRequest);
    return {
        itemViewModel: ko.computed(function () {
            var viewModel = fullscreenItemModel.viewModel();
            viewModel.repaintRequest = repaintRequest;
            return viewModel;
        }),
        visible: ko.computed(function () { return fullscreenItemModel.visible(); }),
        width: function () { return $(window).width(); },
        height: function () { return $(window).height(); },
        onInitialized: resizeController.onInitialized,
        onDisposing: resizeController.onDisposing
    };
};


/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var card_item_1 = __webpack_require__(531);
var _data_grid_item_1 = __webpack_require__(340);
var _date_filter_element_1 = __webpack_require__(222);
var _cards_item_1 = __webpack_require__(347);
var _caption_toolbar_css_classes_1 = __webpack_require__(31);
var _hidden_caption_toolbar_1 = __webpack_require__(342);
var _static_toolbar_1 = __webpack_require__(219);
var _viewer_interfaces_1 = __webpack_require__(157);
var MobileLayoutItemViewModel = (function () {
    function MobileLayoutItemViewModel(dashboardContext, repaintRequest, dashboardItem, _fullscreenItemModel) {
        var _this = this;
        this.dashboardContext = dashboardContext;
        this.repaintRequest = repaintRequest;
        this.dashboardItem = dashboardItem;
        this._fullscreenItemModel = _fullscreenItemModel;
        this._cachedItemWidth = 0;
        this._swipeToActionCoef = 100;
        this.itemOffsetInPixels = ko.observable(0);
        this.actionReadyCoef = ko.computed(function () {
            var offsetInPixels = _this.itemOffsetInPixels();
            if (offsetInPixels > 0) {
                var coef = Math.abs(offsetInPixels / _this._swipeToActionCoef);
                if (coef > 1)
                    coef = 1;
                return coef;
            }
            else {
                return 0;
            }
        });
        this.isReadyForAction = ko.computed(function () {
            return _this.actionReadyCoef() >= 1;
        });
        this.maximizeIconOpacity = ko.computed(function () {
            return _this.actionReadyCoef();
        });
        this.click = function (data, args) {
            _this._performShowFullscreenItem();
            _this.unselectItem(data, args);
        };
        this.selectItem = function (data, args) {
            if (_this.canMaximizeItem) {
                args.target.classList.add('dx-dashboard-mobile-layout-item-selected');
            }
        };
        this.unselectItem = function (data, args) {
            args.target.classList.remove('dx-dashboard-mobile-layout-item-selected');
        };
        this.swipestart = function (data, args) {
            _this._cachedItemWidth = $(_this._getStandaloneItemElement(args.target)).width();
        };
        this.swipeupdate = function (data, args) {
            if (args.offset > 0) {
                _this.itemOffsetInPixels(args.offset * _this._cachedItemWidth);
            }
            else {
                _this._reset();
            }
        };
        this.swipeend = function (data, args) {
            if (_this.isReadyForAction()) {
                _this._performShowFullscreenItem();
            }
            _this._reset();
        };
        this.localContext = new _viewer_interfaces_1.DashboardItemContext({
            addContextToolbarItems: function (options) {
                options.stateItems = [];
                options.actionItems = [];
                options.navigationItems = [];
            },
            createCaptionToolbar: function (viewerItem, container, controlContainer, popupContainer, viewOptions) {
                return viewOptions.hasCaption ? new _static_toolbar_1.StaticCaptionToolbar(container, controlContainer, popupContainer, viewOptions.encodeHtml, _caption_toolbar_css_classes_1.cssClasses.caption, viewOptions.captionToolbarSeparatorRequired, true) :
                    new _hidden_caption_toolbar_1.HiddenCaptionToolbar();
            },
            viewerItemCreated: function (dashboardItem, viewerItem) { return customizeMobileViewerItems(viewerItem); },
            beforeApplyViewerItemOptions: function (item, options, isCreation) {
                options.ParentContainer = undefined;
                setCardAutoArrangementMode(item, options);
            },
            itemCreatingType: 'secondary'
        });
    }
    Object.defineProperty(MobileLayoutItemViewModel.prototype, "canMaximizeItem", {
        get: function () {
            return this.dashboardItem._uiState() === 'live';
        },
        enumerable: true,
        configurable: true
    });
    MobileLayoutItemViewModel.prototype._reset = function () {
        this.itemOffsetInPixels(0);
    };
    MobileLayoutItemViewModel.prototype._performShowFullscreenItem = function () {
        if (this.canMaximizeItem) {
            this._fullscreenItemModel.maximizeItem(this.dashboardItem);
        }
    };
    MobileLayoutItemViewModel.prototype._getStandaloneItemElement = function (element) {
        return element.parentElement.querySelector('dashboard-standalone-item');
    };
    return MobileLayoutItemViewModel;
}());
exports.MobileLayoutItemViewModel = MobileLayoutItemViewModel;
function setCardAutoArrangementMode(item, options) {
    if (item instanceof card_item_1.CardItem) {
        options.ViewModel.ContentDescription.ArrangementMode = 'Auto';
    }
}
exports.setCardAutoArrangementMode = setCardAutoArrangementMode;
function customizeMobileViewerItems(viewerItem) {
    if (viewerItem instanceof _data_grid_item_1.dataGridItem) {
        viewerItem._customizeViewOptions = function (options) {
            options.columnHidingEnabled = true;
            options.allowColumnResizing = false;
        };
        viewerItem._getColumnWidthProperty = function () {
            return 'width';
        };
        viewerItem._getColumnWidthMode = function () {
            return 'AutoFitToContents';
        };
        viewerItem._getDefaultBestCharacterCount = function (index) {
            return 10;
        };
    }
    if (viewerItem instanceof _cards_item_1.cardsItem) {
        viewerItem._getIgnorePadding = function () {
            return false;
        };
    }
    if (viewerItem instanceof _date_filter_element_1.dateFilterElement) {
        viewerItem._mobileLayout = function () {
            return true;
        };
    }
}
exports.customizeMobileViewerItems = customizeMobileViewerItems;


/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var _utils_1 = __webpack_require__(3);
var data_dashboard_item_1 = __webpack_require__(9);
var parameter_1 = __webpack_require__(140);
var ViewerDataServiceClient = (function () {
    function ViewerDataServiceClient(_dashboardContainer, _errorHandler, _dataServiceUrls, _remoteService) {
        var _this = this;
        this._dashboardContainer = _dashboardContainer;
        this._errorHandler = _errorHandler;
        this._dataServiceUrls = _dataServiceUrls;
        this._remoteService = _remoteService;
        this.getColoringScheme = function (itemName) {
            if (itemName === void 0) { itemName = ''; }
            throw new Error(_default_1.getLocalizationById('DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode'));
        };
        this.getDashboardPalette = function () {
            throw new Error(_default_1.getLocalizationById('DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode'));
        };
        this.getItemData = function (item, isModeAllowsToReduceData) {
            return _this._performRequest(_this._dataServiceUrls.DashboardItemGetAction, {
                itemId: item.componentName(),
                query: _this._getItemDataQuery(item, isModeAllowsToReduceData)
            });
        };
        this.getBatchItemData = function (items, isModeAllowsToReduceData) {
            return _this._performRequest(_this._dataServiceUrls.DashboardItemBatchGetAction, {
                items: items.reduce(function (acc, item) {
                    acc[item.componentName()] = _this._getItemDataQuery(item, isModeAllowsToReduceData);
                    return acc;
                }, {})
            });
        };
        this.getMapShapeFile = function (itemName) {
            return _this._performRequest(_this._dataServiceUrls.GetMapShapeFileAction, {
                itemId: itemName
            });
        };
        this.getUnderlyingData = function (itemName, columnValues, rowValues, columnNames, dataQueryParams) {
            return _this._performRequest(_this._dataServiceUrls.GetUnderlyingDataAction, {
                itemId: itemName,
                query: dataQueryParams,
                columnValues: columnValues,
                rowValues: rowValues,
                columnNames: columnNames
            });
        };
        this.markDataSourcesForReload = function () {
            return _this._remoteService.postToServer(_this._dataServiceUrls.MarkDataSourcesForReloadAction, {
                dashboardId: _this._dashboardContainer.id
            });
        };
    }
    ViewerDataServiceClient.prototype.getParameterValues = function (dataSourceId, dataSource, dataMember, valueMember, displayMember, sortOrder, sortByMember, parameterType) {
        var _this = this;
        return this._performRequest(this._dataServiceUrls.ParameterValuesAction, {
            dataSourceId: dataSourceId,
            dataMember: dataMember,
            valueMember: valueMember,
            displayMember: displayMember,
            sortOrder: sortOrder,
            sortByMember: sortByMember,
            parameterType: parameterType
        })
            .fail(function (request) { return _this._errorHandler.showError(_default_1.getLocalizationById('DashboardWebStringId.Notification.AttemptToLoadParameterValues') + (dataSource && dataSource.name() || dataSourceId), request); });
    };
    ViewerDataServiceClient.prototype.performExport = function (exportInfo, exportModels) {
        var commonArgs = this._createCommonArgs();
        var args = JSON.stringify(__assign({ model: exportModels }, exportInfo, commonArgs));
        this._remoteService.performPostback(this._dataServiceUrls.PerformExportAction, args);
        return;
    };
    ViewerDataServiceClient.prototype.getDimensionUniqueValues = function (dataSource, dataMember, dimension) {
        throw new Error(_default_1.getLocalizationById('DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode'));
    };
    ViewerDataServiceClient.prototype.getDimensionFilterItems = function (dashboardItem, dimensionDataMember, previousState, branch) {
        throw new Error(_default_1.getLocalizationById('DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode'));
    };
    ViewerDataServiceClient.prototype.getDimensionFilterString = function (dashboardItem, dimensionDataMember, previousState) {
        throw new Error(_default_1.getLocalizationById('DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode'));
    };
    ViewerDataServiceClient.prototype.getFieldList = function (dataSource, dataMember, fieldPath) {
        throw new Error(_default_1.getLocalizationById('DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode'));
    };
    ViewerDataServiceClient.prototype.convertItem = function (item, destinationItemTypeName) {
        throw new Error(_default_1.getLocalizationById('DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode'));
    };
    ViewerDataServiceClient.prototype._getItemDataQuery = function (item, isModeAllowsToReduceData) {
        var dataQueryParams = _utils_1.deepExtend({}, item._getDataQueryParams());
        var isDataItem = item instanceof data_dashboard_item_1.DataDashboardItem;
        if (isDataItem && isModeAllowsToReduceData && item._limitDataState.enabled) {
            dataQueryParams.LimitVisibleData = true;
        }
        return dataQueryParams;
    };
    ViewerDataServiceClient.prototype._queryParamsToQueryString = function (dataQueryParams) {
        var urlQuery = {};
        if (dataQueryParams) {
            Object.keys(dataQueryParams).forEach(function (name) {
                var value = ko.unwrap(dataQueryParams[name]);
                if (!!value) {
                    if (typeof value === 'object') {
                        if (Object.keys(value).length > 0) {
                            urlQuery[name] = JSON.stringify(value);
                        }
                    }
                    else {
                        urlQuery[name] = value;
                    }
                }
            });
        }
        return $.isEmptyObject(urlQuery) ? '' : $.param(urlQuery);
    };
    ViewerDataServiceClient.prototype._createCommonArgs = function () {
        return {
            dashboardId: this._dashboardContainer.id,
            parameters: parameter_1._getParametersQuery(this._dashboardContainer.dashboard.parameters())
        };
    };
    ViewerDataServiceClient.prototype._performRequest = function (url, requestArgs) {
        var commonArgs = this._createCommonArgs();
        Object.keys(requestArgs).forEach(function (argsKey) {
            if (commonArgs[argsKey]) {
                throw Error("The '" + argsKey + "' request argument key is reserved for common event args");
            }
            else {
                commonArgs[argsKey] = requestArgs[argsKey];
            }
        });
        return this._performRequestCore(url, commonArgs);
    };
    ViewerDataServiceClient.prototype._performRequestCore = function (url, params) {
        var queryString = this._queryParamsToQueryString(params);
        if (queryString) {
            var urlSeparator = url.indexOf('?') == -1 ? '?' : '&';
            queryString = urlSeparator + queryString;
        }
        var fullUrl = url + queryString;
        if (fullUrl.length < ViewerDataServiceClient.maxQueryStringLength) {
            return this._remoteService.getFromServer(fullUrl);
        }
        else {
            return this._remoteService.postToServer(url, params);
        }
    };
    ViewerDataServiceClient.maxQueryStringLength = 2000;
    return ViewerDataServiceClient;
}());
exports.ViewerDataServiceClient = ViewerDataServiceClient;
var DesignerDataServiceClient = (function (_super) {
    __extends(DesignerDataServiceClient, _super);
    function DesignerDataServiceClient(_dashboardContainer, _errorHandler, _dataServiceUrls, _remoteService) {
        var _this = _super.call(this, _dashboardContainer, _errorHandler, _dataServiceUrls, _remoteService) || this;
        _this.getColoringScheme = function (itemName) {
            if (itemName === void 0) { itemName = ''; }
            return _this._performRequest(_this._dataServiceUrls.GetColoringSchemeAction, {
                itemId: itemName,
                query: itemName ? _this._dashboardContainer.dashboard._findDataItem(itemName)._getDataQueryParams() : {}
            })
                .fail(function (request) { _this._errorHandler.showError(_default_1.getLocalizationById('DashboardWebStringId.Notification.AttemptToGetColorScheme'), request); });
        };
        _this.getDashboardPalette = function () {
            return _this._remoteService.postToServer(_this._dataServiceUrls.GetDashboardPaletteAction, {
                dashboardId: _this._dashboardContainer.id
            });
        };
        return _this;
    }
    DesignerDataServiceClient.prototype.convertItem = function (item, destinationItemTypeName) {
        var _this = this;
        return this._performRequest(this._dataServiceUrls.ConvertItemAction, {
            itemId: item.componentName(),
            destinationItemTypeName: destinationItemTypeName
        })
            .fail(function (request) { _this._errorHandler.showError(_default_1.getLocalizationById('DashboardWebStringId.Notification.AttemptToConvertItemToType') + destinationItemTypeName, request); });
    };
    DesignerDataServiceClient.prototype.getDimensionUniqueValues = function (dataSource, dataMember, dimension) {
        var _this = this;
        return this._performRequest(this._dataServiceUrls.DimensionUniqueValuesAction, {
            dataSourceId: dataSource.componentName(),
            dimension: new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer({ useRefs: false }).serialize(dimension),
            dataMember: dataMember,
        })
            .fail(function (request) { _this._errorHandler.showError(_default_1.getLocalizationById('DashboardWebStringId.Notification.AttemptToLoadDimensionUniqueValues') + dataSource.name(), request); });
    };
    DesignerDataServiceClient.prototype.getDimensionFilterItems = function (item, dimensionDataMember, previousState, branch) {
        return this._performRequest(this._dataServiceUrls.DimensionFilterItemsAction, {
            itemId: item.componentName(),
            query: item._getDataQueryParams(),
            dimensionDataMember: dimensionDataMember,
            previousState: previousState,
            branch: branch
        });
    };
    DesignerDataServiceClient.prototype.getDimensionFilterString = function (item, dimensionDataMember, previousState) {
        return this._performRequest(this._dataServiceUrls.DimensionFilterStringAction, {
            itemId: item.componentName(),
            query: item._getDataQueryParams(),
            dimensionDataMember: dimensionDataMember,
            previousState: previousState,
            branch: null
        });
    };
    DesignerDataServiceClient.prototype.getFieldList = function (dataSource, dataMember, fieldPath) {
        var _this = this;
        return this._performRequest(this._dataServiceUrls.FieldListAction, {
            dataSourceId: dataSource.componentName(),
            dataMember: dataMember,
            fieldPath: fieldPath
        })
            .fail(function (request) { _this._errorHandler.showError(_default_1.getLocalizationById('DashboardWebStringId.Notification.AttemptToLoadFieldListForDataSource') + dataSource.name(), request); });
    };
    DesignerDataServiceClient.prototype._createCommonArgs = function () {
        return {
            dashboardId: this._dashboardContainer.id,
            dashboard: this._dashboardContainer.dashboard.getJSON(),
            parameters: parameter_1._getParametersQuery(this._dashboardContainer.dashboard.parameters())
        };
    };
    DesignerDataServiceClient.prototype._performRequestCore = function (url, data) {
        return this._remoteService.postToServer(url, data);
    };
    return DesignerDataServiceClient;
}(ViewerDataServiceClient));
exports.DesignerDataServiceClient = DesignerDataServiceClient;


/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var format_condition_style_base_1 = __webpack_require__(66);
var appearance_settings_1 = __webpack_require__(67);
var bar_style_settings_1 = __webpack_require__(53);
var icon_settings_1 = __webpack_require__(73);
var _icon_settings_1 = __webpack_require__(181);
var _style_settings_base_1 = __webpack_require__(72);
var _undo_engine_helper_1 = __webpack_require__(27);
var _style_settings_container_1 = __webpack_require__(364);
var StyleSettingsEditor = (function (_super) {
    __extends(StyleSettingsEditor, _super);
    function StyleSettingsEditor(target, params) {
        var _this = _super.call(this, params.isRange, params.isGradient, params.isEmptyAllowed) || this;
        _this.mode = ko.observable(null);
        _this.value = target;
        _this.selectedChanged = params.selectedChanged;
        _this.list = _style_settings_container_1.Palette.standard;
        _this.iconList = Object.keys(_icon_settings_1.iconType.values).slice(1);
        _this.closeEditCell = params.closeEditCell || (function () { });
        _this.selected = ko.computed(function () {
            if (!_this.value())
                return null;
            switch (_this.value().constructor) {
                case appearance_settings_1.AppearanceSettings:
                    return _this.value().appearanceType();
                case icon_settings_1.IconSettings:
                    return _this.value().iconType();
                case bar_style_settings_1.BarStyleSettings:
                    return _this.value().predefinedColor();
                default:
                    throw Error('Unsupported style settings');
            }
        });
        switch (_this.value() && _this.value().constructor) {
            case appearance_settings_1.AppearanceSettings:
                _this.mode('Appearance');
                break;
            case icon_settings_1.IconSettings:
                _this.mode('Icon');
                break;
            case bar_style_settings_1.BarStyleSettings:
                _this.mode('Bar');
                _this.list = _style_settings_container_1.Palette.bar;
                break;
            case undefined:
                _this.mode('Appearance');
                break;
            default:
                throw Error('Unsupported style settings');
        }
        if (_this.isGradient) {
            _this.list = _style_settings_container_1.Palette.gradient;
        }
        else if (_this.isRange) {
            _this.list = [_style_settings_base_1.emptyStyleType].concat(_this.list);
            _this.iconList = [_style_settings_base_1.emptyStyleType].concat(_this.iconList);
        }
        return _this;
    }
    StyleSettingsEditor.prototype.getIconClass = function (iconType) {
        var iconClass = this.isEmpty(iconType) ? 'dx-dashboard-appearance-item dx-dashboard-appearance-item-label dx-dashboard-appearance-item-empty' : 'dx-dashboard-icon-item ' + _super.prototype.getIconClass.call(this, iconType);
        return iconClass + (this.selected() === iconType ? ' dx-state-selected' : '');
    };
    StyleSettingsEditor.prototype.setStyleType = function (type) {
        var oldSelectedType = this.selected();
        var getTypeFromMode = function (mode) {
            if (mode === 'Icon') {
                return 'IconSettings';
            }
            else if (mode === 'Appearance') {
                return 'AppearanceSettings';
            }
            else {
                return 'StyleSettings';
            }
        };
        var realJsType = getTypeFromMode(this.mode());
        if (!(this.value() instanceof format_condition_style_base_1._styleSettingsTypesMap[realJsType])) {
            this.value(new format_condition_style_base_1._styleSettingsTypesMap[realJsType]({}));
        }
        this.value().setSpecificType(type);
        if (this.selectedChanged) {
            this.selectedChanged(oldSelectedType, type);
        }
        this.closeEditCell();
    };
    __decorate([
        _undo_engine_helper_1.wrapWithUndoRedo
    ], StyleSettingsEditor.prototype, "setStyleType", null);
    return StyleSettingsEditor;
}(_style_settings_container_1.StyleSettingsContainer));
exports.StyleSettingsEditor = StyleSettingsEditor;
ko.components.register('dx-dashboard-style-settings-editor', {
    viewModel: {
        createViewModel: function (params, componentInfo) {
            return new StyleSettingsEditor(ko.unwrap(params).target, ko.unwrap(params));
        }
    },
    template: { element: 'dx-dashboard-style-settings-editor' }
});


/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _default_1 = __webpack_require__(6);
var bar_style_settings_1 = __webpack_require__(53);
var icon_settings_1 = __webpack_require__(73);
var _appearance_settings_1 = __webpack_require__(180);
var _icon_settings_1 = __webpack_require__(181);
var _style_settings_base_1 = __webpack_require__(72);
var _appearance_settings_provider_1 = __webpack_require__(123);
var _style_settings_provider_1 = __webpack_require__(112);
exports.Palette = {
    standard: [
        'PaleRed',
        'PaleYellow',
        'PaleGreen',
        'PaleBlue',
        'PalePurple',
        'PaleCyan',
        'PaleOrange',
        'PaleGray',
        'Red',
        'Yellow',
        'Green',
        'Blue',
        'Purple',
        'Cyan',
        'Orange',
        'Gray',
        'FontBold',
        'FontItalic',
        'FontUnderline',
        'FontGrayed',
        'FontRed',
        'FontYellow',
        'FontGreen',
        'FontBlue'
    ],
    bar: [
        'PaleRed',
        'PaleYellow',
        'PaleGreen',
        'PaleBlue',
        'PalePurple',
        'PaleCyan',
        'PaleOrange',
        'PaleGray',
        'Red',
        'Yellow',
        'Green',
        'Blue',
        'Purple',
        'Cyan',
        'Orange',
        'Gray'
    ],
    gradient: [
        _style_settings_base_1.emptyStyleType,
        'GradientRed',
        'GradientYellow',
        'GradientGreen',
        'GradientBlue',
        'GradientPurple',
        'GradientCyan',
        'GradientOrange',
        'GradientTransparent'
    ],
    getLabelText: function (type, empty) {
        switch (type) {
            case _style_settings_base_1.emptyStyleType: return empty ? empty : 'No Style';
            case 'FontBold': return 'B';
            case 'FontItalic': return 'I';
            case 'FontUnderline': return 'U';
            case 'FontGrayed': return 'Gr';
            case 'FontRed': return 'R';
            case 'FontYellow': return 'Y';
            case 'FontGreen': return 'G';
            case 'FontBlue': return 'B';
            default: return '';
        }
    }
};
var StyleSettingsContainer = (function () {
    function StyleSettingsContainer(isRange, isGradient, isEmptyAllowed) {
        this.isRange = isRange;
        this.isGradient = isGradient;
        this.isEmptyAllowed = isEmptyAllowed;
    }
    StyleSettingsContainer.prototype.isEmpty = function (type) {
        return (this.isRange || this.isGradient) && type === _style_settings_base_1.emptyStyleType;
    };
    StyleSettingsContainer.prototype.isLabel = function (type) {
        return (type === 'GradientTransparent') || (this.getLabelText(type) !== '');
    };
    StyleSettingsContainer.prototype.isTransparent = function (type) {
        return type === 'GradientTransparent';
    };
    StyleSettingsContainer.prototype.isIconSettings = function (style) {
        return style instanceof icon_settings_1.IconSettings;
    };
    StyleSettingsContainer.prototype.getAppearanceOrBarStyleType = function (style) {
        return style instanceof bar_style_settings_1.BarStyleSettings ? style.predefinedColor() : style.appearanceType();
    };
    StyleSettingsContainer.prototype.getAppearanceOrBarStyleCSS = function (style) {
        if (!!style && !this.isIconSettings(style)) {
            var appearanceType = this.getAppearanceOrBarStyleType(style);
            if (appearanceType != _style_settings_base_1.emptyStyleType) {
                return _appearance_settings_provider_1.appearanceSettingsProvider.toCss(appearanceType);
            }
            else {
                var backColor = style instanceof bar_style_settings_1.BarStyleSettings ? style.color() : style.backColor();
                return backColor ? 'background-color: ' + backColor.css + ';' : '';
            }
        }
        else {
            return '';
        }
    };
    StyleSettingsContainer.prototype.getAppearanceStyleCSS = function (appearanceType) {
        var css = _appearance_settings_provider_1.appearanceSettingsProvider.toCss(appearanceType);
        if (!this.isEmptyAllowed && this.isEmpty(appearanceType)) {
            css += 'display: none;';
        }
        return css;
    };
    StyleSettingsContainer.prototype.getIconClass = function (iconType) {
        return _style_settings_provider_1.styleSettingsProvider.toIconCssClass(iconType);
    };
    StyleSettingsContainer.prototype.getLabelText = function (type) {
        return exports.Palette.getLabelText(type, this.isGradient ? '(Automatic)' : 'No Style');
    };
    StyleSettingsContainer.prototype.getAppearanceTypeLocalization = function (appearanceTypeId) {
        return _default_1.getLocalizationById(_appearance_settings_1.appearanceType.values[appearanceTypeId]);
    };
    StyleSettingsContainer.prototype.getIconTypeLocalization = function (iconTypeId) {
        return _default_1.getLocalizationById(_icon_settings_1.iconType.values[iconTypeId]);
    };
    return StyleSettingsContainer;
}());
exports.StyleSettingsContainer = StyleSettingsContainer;


/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _dx_devextreme_themes_integration_1 = __webpack_require__(176);
exports.getAceTheme = function () { return _dx_devextreme_themes_integration_1.getBaseColorScheme() === 'light' ? 'ace/theme/dreamweaver' : 'ace/theme/ambiance'; };


/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var windowFunctions = {
    display: 'Window Functions',
    localizationId: 'DashboardStringId.FunctionCategoryWindow',
    items: {
        First: [{
                paramCount: 1,
                text: 'First()',
                displayName: 'First()',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionFirst'
            }],
        Last: [{
                paramCount: 1,
                text: 'Last()',
                displayName: 'Last()',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionLast'
            }],
        Index: [{
                paramCount: 1,
                text: 'Index()',
                displayName: 'Index()',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionIndex'
            }],
        Size: [{
                paramCount: 1,
                text: 'Size()',
                displayName: 'Size()',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionSize'
            }],
        Lookup: [{
                paramCount: 2,
                text: 'Lookup(, )',
                displayName: 'Lookup(, )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionLookup'
            }],
        RankCompetition: [{
                paramCount: 2,
                text: 'RankCompetition(, )',
                displayName: 'RankCompetition(, )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionRankCompetition'
            }],
        RankDense: [{
                paramCount: 2,
                text: 'RankDense(, )',
                displayName: 'RankDense(, )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionRankDense'
            }],
        RankUnique: [{
                paramCount: 2,
                text: 'RankUnique(, )',
                displayName: 'RankUnique(, )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionRankUnique'
            }],
        RankModified: [{
                paramCount: 2,
                text: 'RankModified(, )',
                displayName: 'RankModified(, )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionRankModified'
            }],
        RankPercentile: [{
                paramCount: 2,
                text: 'RankPercentile(, )',
                displayName: 'RankPercentile(, )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionRankPercentile'
            }],
        RunningAvg: [{
                paramCount: 1,
                text: 'RunningAvg()',
                displayName: 'RunningAvg()',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionRunningAvg'
            }],
        RunningCount: [{
                paramCount: 1,
                text: 'RunningCount()',
                displayName: 'RunningCount()',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionRunningCount'
            }],
        RunningMax: [{
                paramCount: 1,
                text: 'RunningMax()',
                displayName: 'RunningMax()',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionRunningMax'
            }],
        RunningMin: [{
                paramCount: 1,
                text: 'RunningMin()',
                displayName: 'RunningMin()',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionRunningMin'
            }],
        RunningSum: [{
                paramCount: 1,
                text: 'RunningSum()',
                displayName: 'RunningSum()',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionRunningSum'
            }],
        WindowAvg: [{
                paramCount: 3,
                text: 'WindowAvg(, , )',
                displayName: 'WindowAvg(, , )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowAvg'
            }],
        WindowCount: [{
                paramCount: 3,
                text: 'WindowCount(, , )',
                displayName: 'WindowCount(, , )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowCount'
            }],
        WindowCountDistinct: [{
                paramCount: 3,
                text: 'WindowCountDistinct(, , )',
                displayName: 'WindowCountDistinct(, , )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowCountDistinct'
            }],
        WindowMax: [{
                paramCount: 3,
                text: 'WindowMax(, , )',
                displayName: 'WindowMax(, , )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowMax'
            }],
        WindowMin: [{
                paramCount: 3,
                text: 'WindowMin(, , )',
                displayName: 'WindowMin(, , )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowMin'
            }],
        WindowSum: [{
                paramCount: 3,
                text: 'WindowSum(, , )',
                displayName: 'WindowSum(, , )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowSum'
            }],
        WindowMedian: [{
                paramCount: 3,
                text: 'WindowMedian(, , )',
                displayName: 'WindowMedian(, , )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowMedian'
            }],
        WindowMode: [{
                paramCount: 3,
                text: 'WindowMode(, , )',
                displayName: 'WindowMode(, , )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowMode'
            }],
        WindowVar: [{
                paramCount: 3,
                text: 'WindowVar(, , )',
                displayName: 'WindowVar(, , )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowVar'
            }],
        WindowVarp: [{
                paramCount: 3,
                text: 'WindowVarp(, , )',
                displayName: 'WindowVarp(, , )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowVarp'
            }],
        WindowStdDev: [{
                paramCount: 3,
                text: 'WindowStdDev(, , )',
                displayName: 'WindowStdDev(, , )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowStdDev'
            }],
        WindowStdDevp: [{
                paramCount: 3,
                text: 'WindowStdDevp(, , )',
                displayName: 'WindowStdDevp(, , )',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowStdDevp'
            }],
        Total: [{
                paramCount: 0,
                text: 'Total()',
                displayName: 'Total()',
                descriptionStringId: 'DashboardStringId.FunctionDescriptionTotal'
            }]
    }
};
var dashboardAggrFunctions = {
    display: 'Aggregate',
    localizationId: 'DashboardStringId.FunctionCategoryAggregate',
    category: 'DashboardAggregate',
    items: {
        Avg: [{ paramCount: 1, text: 'Avg()', displayName: 'Avg()', descriptionStringId: 'XtraEditorsExpressionEditor.AvgAggregate.Description' }],
        Count: [{ paramCount: 1, text: 'Count()', displayName: 'Count()', descriptionStringId: 'XtraEditorsExpressionEditor.CountAggregate.Description' }],
        Max: [{ paramCount: 1, text: 'Max()', displayName: 'Max()', descriptionStringId: 'XtraEditorsExpressionEditor.MaxAggregate.Description' }],
        Min: [{ paramCount: 1, text: 'Min()', displayName: 'Min()', descriptionStringId: 'XtraEditorsExpressionEditor.MinAggregate.Description' }],
        Sum: [{ paramCount: 1, text: 'Sum()', displayName: 'Sum()', descriptionStringId: 'XtraEditorsExpressionEditor.SumAggregate.Description' }],
        CountNotNull: [{ paramCount: 1, text: 'CountNotNull()', displayName: 'CountNotNull()', descriptionStringId: 'DashboardStringId.AggregateExFunctionDescriptionCountNotNull' }],
        CountDistinct: [{ paramCount: 1, text: 'CountDistinct()', displayName: 'CountDistinct()', descriptionStringId: 'DashboardStringId.FunctionDescriptionCountDistinct' }],
        Median: [{ paramCount: 1, text: 'Median()', displayName: 'Median()', descriptionStringId: 'DashboardStringId.FunctionDescriptionMedian' }],
        Mode: [{ paramCount: 1, text: 'Mode()', displayName: 'Mode()', descriptionStringId: 'DashboardStringId.AggregateExFunctionDescriptionMode' }],
        StdDev: [{ paramCount: 1, text: 'StdDev()', displayName: 'StdDev()', descriptionStringId: 'DashboardStringId.FunctionDescriptionStdDev' }],
        StdDevp: [{ paramCount: 1, text: 'StdDevp()', displayName: 'StdDevp()', descriptionStringId: 'DashboardStringId.FunctionDescriptionStdDevp' }],
        Var: [{ paramCount: 1, text: 'Var()', displayName: 'Var()', descriptionStringId: 'DashboardStringId.FunctionDescriptionVar' }],
        Varp: [{ paramCount: 1, text: 'Varp()', displayName: 'Varp()', descriptionStringId: 'DashboardStringId.FunctionDescriptionVarp' }]
    }
};
var dashboardAdvancedFunctions = {
    display: 'Advanced',
    localizationId: 'DashboardStringId.FunctionCategoryAdvanced',
    category: 'Advanced',
    items: {
        aggr: [{ paramCount: 1, text: 'aggr()', displayName: 'aggr()', descriptionStringId: 'DashboardStringId.FunctionDescriptionAggr' }],
        asc: [{ paramCount: 1, text: 'asc()', displayName: 'asc()', descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowDefinitionOrderAsc' }],
        desc: [{ paramCount: 1, text: 'desc()', displayName: 'desc()', descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowDefinitionOrderDesc' }],
        orderBy: [{ paramCount: 1, text: 'orderBy()', displayName: 'orderBy()', descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowDefinitionOrderBy' }],
        partitionBy: [{ paramCount: 1, text: 'partitionBy()', displayName: 'partitionBy()', descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowDefinitionPartitionBy' }],
        w: [{ paramCount: 3, text: 'w( , partitionBy(), orderBy() )', displayName: 'w()', descriptionStringId: 'DashboardStringId.FunctionDescriptionWindowDefinition' }],
        filter: [{ paramCount: 2, text: 'filter( , )', displayName: 'filter()', descriptionStringId: 'DashboardStringId.FunctionDescriptionAggregateFilter' }],
        joinRule: [{ paramCount: 2, text: 'joinRule()', displayName: 'joinRule()', descriptionStringId: 'DashboardStringId.FunctionDescriptionAggrJoinRule' }]
    }
};
var dashboardAdditionalFunctions = {
    'Date-Time': {
        GetDateHour: [{ paramCount: 1, text: 'GetDateHour()', displayName: 'GetDateHour()', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHour' }],
        GetDateHourMinute: [{ paramCount: 1, text: 'GetDateHourMinute()', displayName: 'GetDateHourMinute()', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinute' }],
        GetDateHourMinuteSecond: [{ paramCount: 1, text: 'GetDateHourMinuteSecond()', displayName: 'GetDateHourMinuteSecond()', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinuteSecond' }],
        GetDateMonthYear: [{ paramCount: 1, text: 'GetDateMonthYear()', displayName: 'GetDateMonthYear()', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateMonthYear' }],
        GetDateWeekYear: [
            { paramCount: 1, text: 'GetDateWeekYear()', displayName: 'GetDateWeekYear()', descriptionStringId: 'DashboardStringId.FunctionDescriptionGetDateWeekYear' },
            { paramCount: 2, text: 'GetDateWeekYear(,)', displayName: 'GetDateWeekYear(,)', descriptionStringId: 'DashboardStringId.FunctionDescriptionGetDateWeekYear2' }
        ],
        GetDateQuarterYear: [{ paramCount: 1, text: 'GetDateQuarterYear()', displayName: 'GetDateQuarterYear()', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateQuarterYear' }],
        GetQuarter: [{ paramCount: 1, text: 'GetQuarter()', displayName: 'GetQuarter()', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionGetQuarter' }],
        GetWeekOfMonth: [{ paramCount: 1, text: 'GetWeekOfMonth()', displayName: 'GetWeekOfMonth()', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfMonth' }],
        GetWeekOfYear: [{ paramCount: 1, text: 'GetWeekOfYear()', displayName: 'GetWeekOfYear()', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfYear' }],
        ToDateTime: [{ paramCount: 1, text: 'ToDateTime()', displayName: 'ToDateTime()', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionToDateTime' }],
        MakeDateTime: [
            { paramCount: 3, text: 'MakeDateTime(,,)', displayName: 'MakeDateTime(,,)', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime3' },
            { paramCount: 4, text: 'MakeDateTime(,,,)', displayName: 'MakeDateTime(,,,)', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime4' },
            { paramCount: 5, text: 'MakeDateTime(,,,,)', displayName: 'MakeDateTime(,,,,)', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime5' },
            { paramCount: 6, text: 'MakeDateTime(,,,,,)', displayName: 'MakeDateTime(,,,,,)', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime6' }
        ]
    },
    'Logical': {
        ToBoolean: [{ paramCount: 1, text: 'ToBoolean()', displayName: 'ToBoolean()', descriptionStringId: 'DashboardStringId.FunctionOperatorExFunctionDescriptionToBoolean' }]
    },
    'String': {
        Join: null
    }
};
var ExpressionEditorFunctions = (function () {
    function ExpressionEditorFunctions() {
    }
    ExpressionEditorFunctions.customFunctions = [];
    return ExpressionEditorFunctions;
}());
exports.ExpressionEditorFunctions = ExpressionEditorFunctions;
function getExpressionEditorFunctions() {
    return [dashboardAdvancedFunctions,
        dashboardAggrFunctions]
        .concat(dx_analytics_core_1.default.Analytics.Widgets.Internal.functionDisplay.filter(function (category) { return category.display !== 'Aggregate'; }))
        .map(function (functionCategory) {
        var category = functionCategory.display;
        if (dashboardAdditionalFunctions[category]) {
            var clone = __assign({}, functionCategory);
            clone.items = __assign({}, clone.items, dashboardAdditionalFunctions[category]);
            return clone;
        }
        else {
            return functionCategory;
        }
    })
        .concat([windowFunctions])
        .concat(ExpressionEditorFunctions.customFunctions);
}
exports.getExpressionEditorFunctions = getExpressionEditorFunctions;


/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var dxDashboardFilePicker = (function (_super) {
    __extends(dxDashboardFilePicker, _super);
    function dxDashboardFilePicker(element, options) {
        return _super.call(this, element, options) || this;
    }
    dxDashboardFilePicker.prototype._clearButtonVisibility = function () {
        return this.option('showClearButton') && !!this.option('value');
    };
    dxDashboardFilePicker.prototype._clearValueHandler = function (e) {
        this['_input']().val('');
        _super.prototype['_clearValueHandler'].call(this, e);
    };
    return dxDashboardFilePicker;
}(dx_analytics_core_1.default.Analytics.Widgets.Internal.dxFileImagePicker));
exports.dxDashboardFilePicker = dxDashboardFilePicker;


/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var _helpers_1 = __webpack_require__(745);
var _measure_1 = __webpack_require__(70);
var _helpers_2 = __webpack_require__(630);
var _expression_utils_1 = __webpack_require__(631);
var _window_definition_editor_1 = __webpack_require__(632);
var _expression_editor_item_provider_1 = __webpack_require__(160);
var _form_adapter_editors_1 = __webpack_require__(22);
var _object_properties_wrapper_1 = __webpack_require__(10);
var _accordion_tab_1 = __webpack_require__(7);
var CalculationPropertiesComposer = (function () {
    function CalculationPropertiesComposer() {
    }
    CalculationPropertiesComposer.prototype.composeTabs = function (model, args) {
        var commonTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common');
        this.fillCommonWrapper(commonTab, model, args.dashboardItem, args.dataSourceBrowser);
        return [commonTab];
    };
    CalculationPropertiesComposer.prototype.fillCommonWrapper = function (tab, model, dashboardItem, dataSourceBrowser) {
        var p = [];
        var visibilityRules = {};
        p.push(__assign({}, _measure_1.windowDefinition, { formAdapterItem: _window_definition_editor_1.windowDefinitionEditor({ dataDashboardItem: dashboardItem, dataSourceBrowser: dataSourceBrowser }) }));
        if (!model.expression()) {
            p.push({
                container: _measure_1.calculation,
                properties: [{
                        container: (model.calculation.getInfo()[0]),
                        properties: (model.calculation.calculation().getInfo())
                    }]
            });
        }
        var wrapper = new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: p,
            visibilityFilterRules: visibilityRules
        });
        var expressionArgument = ko.observable();
        var getExpression = function () {
            if (!!model.expression()) {
                return model.expression();
            }
            return !!model.calculation.calculation() ? model.calculation.calculation()._getExpression(expressionArgument()) : '';
        };
        getCalculationArgumentExpression(model, dashboardItem, dataSourceBrowser)
            .done(function (expr) {
            expressionArgument(expr);
        });
        var expression = ko.computed({
            read: getExpression,
            write: function (val) {
                if (val !== getExpression()) {
                    model.expression(val);
                }
            }
        });
        var expressionOptions = {
            value: expression,
            path: ko.observable(dashboardItem.dataMember() ? [dashboardItem.dataSource(), dashboardItem.dataMember()].join('.') : dashboardItem.dataSource()),
            patchFieldName: function (fieldPath) {
                if (fieldPath.indexOf('Parameters.Parameters.') === 0) {
                    return 'Parameters.' + fieldPath.split('.')[2];
                }
                return fieldPath;
            },
        };
        var itemsProvider = new _expression_editor_item_provider_1.ExpressionEditorItemsProvider(dataSourceBrowser, dataSourceBrowser, dataSourceBrowser.parameters && dataSourceBrowser.parameters(), dashboardItem.dataSource, dashboardItem.dataMember);
        var collectionEditorOptions = {
            fieldListProvider: ko.observable(itemsProvider),
            options: ko.observable(expressionOptions)
        };
        wrapper.addProperty(ko.observable(), { propertyName: 'expressionOptions', displayName: 'DashboardStringId.CalculationTypeExpression', formAdapterItem: _form_adapter_editors_1.calculationExpressionEditor(collectionEditorOptions) });
        tab.tabModel(wrapper);
    };
    return CalculationPropertiesComposer;
}());
exports.CalculationPropertiesComposer = CalculationPropertiesComposer;
function getCalculationArgumentExpression(measure, dashboardItem, dataFieldProvider) {
    var deferred = $.Deferred();
    var summaryExpression = _helpers_2.getSummaryExpression(measure.dataMember(), measure.summaryType());
    if (!measure.filterString())
        return deferred.resolve(summaryExpression).promise();
    _helpers_1.getDimensionsExpressions(dashboardItem, dataFieldProvider)
        .done(function (dimnensionsExpressions) {
        var patchedExpression = _expression_utils_1.insertDimensionsExpressionsIntoFilterExpression(measure.filterString(), dimnensionsExpressions);
        deferred.resolve("filter(" + summaryExpression + ", " + patchedExpression + ")");
    });
    return deferred.promise();
}
exports.getCalculationArgumentExpression = getCalculationArgumentExpression;


/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _accordion_tab_1 = __webpack_require__(7);
var PropertiesController = (function () {
    function PropertiesController() {
        var _this = this;
        this._disposables = [];
        this.mainModel = ko.observable();
        this.secondaryModel = ko.observable();
        this.currentTab = ko.observable('');
        this.accordionDataSource = ko.observable([]);
        this.secondaryAccordionDataSource = ko.observable([]);
        this.computator = ko.computed(function () {
            var newTabs = [];
            var oldTabs = _this.accordionDataSource;
            if (_this.secondaryModel() && _this.secondaryModel().data) {
                newTabs = newTabs.concat(ko.unwrap(_this.secondaryModel().data.propertiesTabs));
                oldTabs = _this.secondaryAccordionDataSource;
            }
            else if (_this.mainModel() && _this.mainModel().data) {
                newTabs = newTabs.concat(ko.unwrap(_this.mainModel().data.propertiesTabs));
            }
            newTabs.forEach(function (tab, index) { if (!tab.orderNo)
                tab.orderNo = 100 + index; });
            newTabs = newTabs
                .sort(function (a, b) { return (a.orderNo) - (b.orderNo); });
            if ((newTabs.length === oldTabs().length)
                && newTabs.every(function (t) { return t instanceof _accordion_tab_1.AccordionTab; })
                && oldTabs().every(function (t) { return t instanceof _accordion_tab_1.AccordionTab; })) {
                var thesame = true;
                for (var i = 0; i < newTabs.length; i++) {
                    thesame = thesame && oldTabs()[i].name === newTabs[i].name;
                }
                if (thesame) {
                    for (var i = 0; i < newTabs.length; i++) {
                        oldTabs()[i].grabData(newTabs[i]);
                    }
                }
                else {
                    var tabsToDispose = oldTabs();
                    oldTabs(newTabs);
                    tabsToDispose.filter(function (tab) { return !newTabs.some(function (newTab) { return newTab === tab; }); }).forEach(function (tab) { return tab && tab.dispose(); });
                }
            }
            else {
                var tabsToDispose = oldTabs();
                oldTabs(newTabs);
                tabsToDispose.filter(function (tab) { return !newTabs.some(function (newTab) { return newTab === tab; }); }).forEach(function (tab) { return tab && tab.dispose(); });
            }
        });
        this.selectedIndex = ko.computed({
            read: function () {
                var newTabs = _this.accordionDataSource();
                var theSameTab = newTabs.filter(function (tab) { return (tab.category === _this.currentTab()) && tab.visible(); })[0];
                if (!theSameTab) {
                    theSameTab = newTabs.filter(function (tab) { return !tab.headerTemplate && tab.visible(); })[0];
                    theSameTab = theSameTab || newTabs[0];
                }
                return newTabs.indexOf(theSameTab);
            },
            write: function (index) {
                var newSelectedItem = _this.accordionDataSource()[index];
                if (!!newSelectedItem) {
                    _this.currentTab(newSelectedItem.category);
                }
                _this.secondaryModel(undefined);
            }
        }).extend({ notify: 'always', deferred: true });
        this.secondarySelectedIndex = ko.observable(0);
        this.processDataItemClick = function (data) {
            var model = data.item;
            if (!_this.mainModel() || !_this.mainModel().data || ko.unwrap(_this.mainModel().data.model) !== model) {
                data.click(model);
            }
            else {
                _this.mainModel(null);
            }
        };
        this._disposables.push(this.mainModel.subscribe(function () { return _this.secondaryModel(null); }, this, 'beforeChange'));
        this._disposables.push(this.mainModel.subscribe(function () {
            var newValue = _this.mainModel.peek();
            if (newValue && newValue.data && newValue.containingCollection) {
                _this._disposables.push(newValue.containingCollection.subscribe(function (changes) {
                    changes.forEach(function (arrayChange) {
                        var change = arrayChange;
                        if (change.status === 'deleted'
                            && _this.mainModel()
                            && ko.unwrap(_this.mainModel().data.model) === change.value) {
                            _this.mainModel(null);
                        }
                    });
                }, null, 'arrayChange'));
            }
            _this.secondaryModel(null);
        }));
        this._disposables.push(this.secondaryModel.subscribe(function () { return _this.secondarySelectedIndex(0); }, this, 'beforeChange'));
        this._disposables.push(this.secondaryModel.subscribe(function () {
            var newValue = _this.secondaryModel.peek();
            if (newValue && newValue.data && newValue.containingCollection) {
                _this._disposables.push(newValue.containingCollection.subscribe(function (changes) {
                    changes.forEach(function (arrayChange) {
                        var change = arrayChange;
                        if (change.status === 'deleted'
                            && _this.secondaryModel()
                            && ko.unwrap(_this.secondaryModel().data.model) === change.value) {
                            _this.secondaryModel(null);
                        }
                    });
                }, null, 'arrayChange'));
            }
        }));
        this._disposables.push(this.computator);
    }
    PropertiesController.prototype.dispose = function () {
        this.accordionDataSource().forEach(function (tab) { return tab && tab.dispose(); });
        this._disposables.forEach(function (d) {
            d.dispose();
        });
        this.selectedIndex.dispose();
    };
    return PropertiesController;
}());
exports.PropertiesController = PropertiesController;


/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var _expression_editor_item_provider_1 = __webpack_require__(160);
var FieldListPicker = (function () {
    function FieldListPicker(dataSourceBrowser, _value, model, disabled) {
        this.disabled = disabled;
        var self = this;
        this.treeListController = new DashboardTreeListFieldController(_value);
        this.pathToMembers = ko.computed(function () { return [model.dataSource(), model.dataMember()].filter(function (item) { return !!item; }).join('.'); });
        this.pathToMembers.subscribe(function () { return _value(null); });
        this.displayValue = ko.computed(function () {
            return !!_value() ? _value() : '';
        });
        this.value = ko.computed({
            read: function () {
                return _value();
            },
            write: function (val) {
                if (!val) {
                    _value(null);
                }
            }
        });
        this.itemsProvider = new _expression_editor_item_provider_1.ExpressionEditorItemsProvider(dataSourceBrowser, dataSourceBrowser, dataSourceBrowser.parameters && dataSourceBrowser.parameters(), model.dataSource, model.dataMember);
    }
    return FieldListPicker;
}());
exports.FieldListPicker = FieldListPicker;
var DashboardTreeListFieldController = (function (_super) {
    __extends(DashboardTreeListFieldController, _super);
    function DashboardTreeListFieldController(_value) {
        var _this = _super.call(this) || this;
        _this._value = _value;
        return _this;
    }
    DashboardTreeListFieldController.prototype.hasItems = function (item) {
        return item['hasItems'];
    };
    DashboardTreeListFieldController.prototype.canSelect = function (value) {
        return !value.hasItems;
    };
    DashboardTreeListFieldController.prototype.select = function (value) {
        this._value(value.data['field'].dataMember());
    };
    return DashboardTreeListFieldController;
}(dx_analytics_core_1.default.Analytics.Widgets.Internal.TreeListController));


/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var _data_source_browser_1 = __webpack_require__(40);
var _default_1 = __webpack_require__(6);
var calculated_field_1 = __webpack_require__(206);
var ef_data_source_1 = __webpack_require__(138);
var federation_data_source_1 = __webpack_require__(207);
var _calculated_field_1 = __webpack_require__(289);
var sql_data_source_1 = __webpack_require__(90);
var _helper_classes_1 = __webpack_require__(36);
var _base_metadata_1 = __webpack_require__(4);
var _expression_editor_item_provider_1 = __webpack_require__(160);
var CalcFieldEditor = (function () {
    function CalcFieldEditor(dataSourceBrowser) {
        this.dataSourceBrowser = dataSourceBrowser;
        this.viewModel = ko.observable(null);
    }
    CalcFieldEditor.prototype.canAddCalculatedField = function (dataSourceName) {
        var dataSource = this.dataSourceBrowser.findDataSource(dataSourceName);
        if (dataSource && dataSource.hasCalculatedFields) {
            if (dataSource instanceof sql_data_source_1.SqlDataSource) {
                return dataSource.queries().length > 0;
            }
            else if (dataSource instanceof ef_data_source_1.EFDataSource) {
                return dataSource._tables().length > 0;
            }
            else if (dataSource instanceof federation_data_source_1.FederationDataSource) {
                return dataSource.queries().length > 0;
            }
            return !!dataSource;
        }
        else {
            return false;
        }
    };
    CalcFieldEditor.prototype.showAddDialog = function (dataSourceName, dataMemberName) {
        var def = $.Deferred();
        if (this.canAddCalculatedField) {
            var dataSourceInstance = this.dataSourceBrowser.findDataSource(dataSourceName);
            var newCalculatedFieldName = _helper_classes_1.NameGenerator.generateName(_default_1.getLocalizationById('DashboardStringId.NewCalculatedFieldNamePrefix') + ' ', dataSourceInstance.calculatedFields(), 'name', 1);
            var newCalculatedField = new calculated_field_1.CalculatedField({ '@Name': newCalculatedFieldName, '@DataMember': dataMemberName, '@DataType': 'Auto' });
            this.show(newCalculatedField, dataSourceName, dataMemberName).then(function (calcField) { return def.resolve(calcField); }, function (calcField) { return def.reject(calcField); });
        }
        else {
            def.reject();
        }
        return def.promise();
    };
    CalcFieldEditor.prototype.showEditDialog = function (calculatedField, dataSourceName, dataMemberName) {
        return this.show(calculatedField, dataSourceName, dataMemberName);
    };
    CalcFieldEditor.prototype.removeCalcField = function (calculatedField, dataSourceName) {
        var dataSourceInstance = this.dataSourceBrowser.findDataSource(dataSourceName);
        var dataMemberName = calculatedField.dataMember();
        var pathInCache = [dataSourceName].concat(dataMemberName ? [dataMemberName] : []);
        this.dataSourceBrowser.clearFieldsCache(pathInCache.join('.'));
        dataSourceInstance.calculatedFields.remove(calculatedField);
        return $.Deferred().resolve(calculatedField).promise();
    };
    CalcFieldEditor.prototype.show = function (calculatedField, dataSourceName, dataMemberName) {
        var _this = this;
        var def = $.Deferred();
        var pathInCache = [dataSourceName].concat(dataMemberName ? [dataMemberName] : []);
        this.viewModel(new CalcFieldEditorViewModel(calculatedField, this.dataSourceBrowser, dataSourceName, function (calcField) {
            var dsi = _this.dataSourceBrowser.findDataSource(dataSourceName);
            if (dsi && dsi.calculatedFields.indexOf(calcField) === -1) {
                dsi.calculatedFields.push(calcField);
            }
            def.resolve(calcField);
        }, function () { return _this.dataSourceBrowser.clearFieldsCache(pathInCache.join('.')); }));
        return def.promise();
    };
    return CalcFieldEditor;
}());
exports.CalcFieldEditor = CalcFieldEditor;
var CalcFieldEditorViewModel = (function () {
    function CalcFieldEditorViewModel(calculatedField, dataSourceBrowser, dataSourceName, onSave, onBeforeSave) {
        var _this = this;
        this.toolbarItems = [];
        this.isCalcFieldNameValid = ko.observable(true);
        this.popupVisible = ko.observable(true);
        var dataSource = dataSourceBrowser.findDataSource(dataSourceName);
        this.getInfo = function () {
            return [_base_metadata_1.name, _calculated_field_1.calculatedFieldType, _calculated_field_1.calcFieldExpressionEditable];
        };
        this.nameValidationRules = [{
                type: 'required'
            }, {
                type: 'custom',
                validationCallback: function (params) {
                    var previousParams = false;
                    var dataSource = dataSourceBrowser.findDataSource(dataSourceName);
                    var dataMembers = [''];
                    if (dataSource instanceof sql_data_source_1.SqlDataSource) {
                        dataMembers = dataSource.queries().map(function (dm) { return dm.name(); });
                    }
                    else if (dataSource instanceof ef_data_source_1.EFDataSource) {
                        dataMembers = dataSource._tables().map(function (dm) { return dm.name(); });
                    }
                    else if (dataSource instanceof federation_data_source_1.FederationDataSource) {
                        dataMembers = dataSource.queries().map(function (dm) { return dm.alias(); });
                    }
                    var promises = dataMembers.map(function (dataMember) { return dataSourceBrowser.findDataField(dataSourceName, dataMember, params.value); });
                    $.when.apply($, promises).done(function () {
                        var fields = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            fields[_i] = arguments[_i];
                        }
                        previousParams = true;
                        params.rule.isValid = fields.reduce(function (result, curField) { return result && !curField; }, true);
                        params.validator.validate();
                    });
                    if (previousParams)
                        return params.rule.isValid;
                    return false;
                },
                message: _default_1.getLocalizationById('DashboardWebStringId.DataSources.CalculatedField.UniqueNameError')
            }];
        this.calculatedField = calculatedField;
        this.dataMember = ko.observable(calculatedField.dataMember());
        this.fieldType = ko.observable(calculatedField.fieldType());
        this.availableTypes = Object.keys(_calculated_field_1.calculatedFieldType.values);
        this.name = ko.observable(calculatedField.name());
        this.expression = ko.observable(calculatedField.expression());
        this.expressionEditable = {
            value: this.expression,
            path: ko.observable(calculatedField.dataMember() ? [dataSourceName, calculatedField.dataMember()].join('.') : dataSourceName),
            fieldName: calculatedField.name,
            patchFieldName: function (fieldPath) { return _data_source_browser_1.patchCalcFieldPath(dataSource, calculatedField, fieldPath); },
            saveHandler: ko.observable(),
            isValid: ko.observable(true),
            itemsProvider: new _expression_editor_item_provider_1.ExpressionEditorItemsProvider(dataSourceBrowser, dataSourceBrowser, dataSourceBrowser.parameters && dataSourceBrowser.parameters(), ko.pureComputed(function () { return dataSourceName; }), calculatedField.dataMember),
            customizeCategories: function (sender, categories, dblclick) {
                var treeList = categories[0].content.data.fields().treeListController;
                var putSelectionHandlerBase = treeList.putSelectionHandler;
                treeList.putSelectionHandler = function (data, element) {
                    if (!data.data.isList) {
                        putSelectionHandlerBase.call(treeList, data, element);
                    }
                };
            }
        };
        var saveHandler = function (sender) {
            if (_this.expressionEditable.saveHandler()(sender)) {
                onBeforeSave && onBeforeSave();
                calculatedField.expression(_this.expression());
                calculatedField.name(_this.name());
                calculatedField.fieldType(_this.fieldType());
                onSave && onSave(calculatedField);
                _this.popupVisible(false);
            }
        };
        this.toolbarItems = [
            {
                toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                    text: _default_1.getLocalizationById('DashboardWebStringId.DashboardMenuSave'),
                    onClick: saveHandler,
                    disabled: ko.computed(function () { return !_this.isCalcFieldNameValid(); }),
                    type: 'default'
                }
            },
            { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: _default_1.getLocalizationById('DashboardWebStringId.DataSources.Cancel'), onClick: function () { return _this.popupVisible(false); } } }
        ];
        this.popupVisible(true);
    }
    return CalcFieldEditorViewModel;
}());
exports.CalcFieldEditorViewModel = CalcFieldEditorViewModel;


/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var color_scheme_entry_1 = __webpack_require__(104);
var dimension_key_1 = __webpack_require__(257);
var measure_definition_1 = __webpack_require__(260);
var _dimension_definition_1 = __webpack_require__(436);
var calculation_1 = __webpack_require__(258);
var dimension_1 = __webpack_require__(43);
var window_definition_1 = __webpack_require__(259);
var _expression_utils_1 = __webpack_require__(631);
var ColorSchemeEntryCreator = (function () {
    function ColorSchemeEntryCreator() {
        this._entry = new color_scheme_entry_1.ColorSchemeEntry({});
    }
    ColorSchemeEntryCreator.createMeasureKey = function (dataMember, summaryType) {
        var measureDefinition = new measure_definition_1.MeasureDefinition({ '@ItemType': 'Definition' });
        measureDefinition.dataMember(dataMember);
        measureDefinition.summaryType(summaryType);
        return measureDefinition;
    };
    ColorSchemeEntryCreator.createMeasureDefinitionFromMeasure = function (measure, otherDataItems) {
        var _this = this;
        var measureDefinition = new measure_definition_1.MeasureDefinition({ '@ItemType': 'Definition' });
        var serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer();
        var calculationClone = new calculation_1.Calculation(serializer.serialize(measure.calculation));
        var windowDefinitionJson = serializer.serialize(measure.windowDefinition);
        var windowDefinitionClone = new window_definition_1.WindowDefinition(windowDefinitionJson);
        measureDefinition.dataMember(measure.dataMember());
        measureDefinition.summaryType(measure.summaryType());
        measureDefinition.calculation.calculation(calculationClone.calculation());
        measureDefinition.calculation.calculationType(calculationClone.calculationType());
        measureDefinition.expression(measure.expression());
        measureDefinition.windowDefinition.windowDefinition(windowDefinitionClone.windowDefinition());
        measureDefinition.windowDefinition.windowDefinitionType(windowDefinitionClone.windowDefinitionType());
        var filterString = measure.filterString();
        measureDefinition.filterString(filterString);
        if (filterString && otherDataItems && otherDataItems.length > 0) {
            var filterCriteria = _expression_utils_1.getFilterCriteria(filterString);
            var dimensions_1 = [];
            dx_analytics_core_1.default.Analytics.Criteria.Utils.criteriaForEach(filterCriteria, function (op) {
                if (op instanceof dx_analytics_core_1.default.Analytics.Criteria.OperandProperty) {
                    var prop_1 = op;
                    var dataItem = otherDataItems.filter(function (di) { return di.uniqueName() === prop_1.propertyName; })[0];
                    if (dataItem instanceof dimension_1.Dimension) {
                        dimensions_1.push(_this.createDimensionDefinitionFromDimension(dataItem));
                    }
                }
            });
            measureDefinition.definitions(dimensions_1);
        }
        return measureDefinition;
    };
    ColorSchemeEntryCreator.createDimensionDefinitionFromDimension = function (dimension) {
        var dimensionDefinition = new _dimension_definition_1.DimensionDefinition();
        dimensionDefinition.dataMember = dimension.dataMember;
        dimensionDefinition.dateTimeGroupInterval = dimension.dateTimeGroupInterval;
        return dimensionDefinition;
    };
    ColorSchemeEntryCreator.createMeasureDefinitionCopy = function (measureKey) {
        var serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer();
        return new measure_definition_1.MeasureDefinition(serializer.serialize(measureKey));
    };
    ColorSchemeEntryCreator.createDimensionKey = function (dataMember, groupInterval, valueType, value) {
        var dimensionKey = new dimension_key_1.DimensionKey({ '@ItemType': 'DimensionKey' });
        dimensionKey.definition = {
            dataMember: ko.observable(dataMember),
            dateTimeGroupInterval: ko.observable(groupInterval)
        };
        dimensionKey.value = {
            value: ko.observable(value),
            type: ko.observable(valueType)
        };
        return dimensionKey;
    };
    ColorSchemeEntryCreator.prototype.addColor = function (color) {
        this._entry.color(color);
        return this;
    };
    ColorSchemeEntryCreator.prototype.addItemComponentName = function (name) {
        this._entry.itemComponentName = name;
        return this;
    };
    ColorSchemeEntryCreator.prototype.addPaletteIndex = function (paletteIndex) {
        this._entry.paletteIndex(paletteIndex);
        return this;
    };
    ColorSchemeEntryCreator.prototype.addDataSourceName = function (dataSourceName) {
        this._entry.dataSource(dataSourceName);
        return this;
    };
    ColorSchemeEntryCreator.prototype.addDataMemberName = function (dataMember) {
        this._entry.dataMember(dataMember);
        return this;
    };
    ColorSchemeEntryCreator.prototype.addMeasureKey = function (dataMember, summaryType) {
        this._entry.measureKeys.push(ColorSchemeEntryCreator.createMeasureKey(dataMember, summaryType));
        return this;
    };
    ColorSchemeEntryCreator.prototype.addDimensionKey = function (dataMember, groupInterval, valueType, value) {
        this._entry.dimensionKeys.push(ColorSchemeEntryCreator.createDimensionKey(dataMember, groupInterval, valueType, value));
        return this;
    };
    ColorSchemeEntryCreator.prototype.getEntry = function () {
        return this._entry;
    };
    return ColorSchemeEntryCreator;
}());
exports.ColorSchemeEntryCreator = ColorSchemeEntryCreator;


/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _parameters_item_provider_1 = __webpack_require__(161);
function createQueryPageCallback(requestWrapper, parameters, customQueriesPreset) {
    if (customQueriesPreset === void 0) { customQueriesPreset = undefined; }
    return {
        customQueriesPreset: customQueriesPreset,
        customizeQBInitData: function (initData) {
            initData.data.parametersItemsProvider = new _parameters_item_provider_1.ParametersItemProvider(parameters());
            initData.data.requestWrapper = requestWrapper;
            return initData;
        },
        selectStatement: function (connection, query) { return requestWrapper.getSelectStatement(connection, query); },
        getItemsProviderCallback: function () { return new _parameters_item_provider_1.ParametersItemProvider(parameters()); }
    };
}
exports.createQueryPageCallback = createQueryPageCallback;


/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_querybuilder_1 = __webpack_require__(1);
var $ = __webpack_require__(2);
var _default_1 = __webpack_require__(6);
var _utils_1 = __webpack_require__(3);
var data_source_wizard_model_1 = __webpack_require__(375);
var _data_source_wizard_model_1 = __webpack_require__(230);
var choose_data_source_type_page_1 = __webpack_require__(376);
var choose_olap_connection_string_page_1 = __webpack_require__(377);
var _choose_json_schema_page_1 = __webpack_require__(231);
var _create_query_page_1 = __webpack_require__(373);
var _parameters_item_provider_1 = __webpack_require__(161);
var _data_source_wizard_page_iterator_1 = __webpack_require__(641);
var DashboardQueryWizardIterator = (function (_super) {
    __extends(DashboardQueryWizardIterator, _super);
    function DashboardQueryWizardIterator(_createNew, factory, stateManager) {
        var _this = _super.call(this, factory, stateManager) || this;
        _this._createNew = _createNew;
        return _this;
    }
    DashboardQueryWizardIterator.prototype.getInitialPage = function () {
        if (this._createNew) {
            return _super.prototype.getInitialPage.call(this);
        }
        return dx_querybuilder_1.default.Analytics.Wizard.SqlDataSourceWizardPageId.ConfigureQueryPage;
    };
    return DashboardQueryWizardIterator;
}(_data_source_wizard_page_iterator_1.DataSourceWizardPageIteratorBase));
exports.DashboardQueryWizardIterator = DashboardQueryWizardIterator;
var DashboardQueryWizard = (function (_super) {
    __extends(DashboardQueryWizard, _super);
    function DashboardQueryWizard() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.title = _default_1.getLocalizationById('DashboardWebStringId.DataSources.DashboardDataSourceWizard');
        _this._container = function (element) { return $(element).closest('.dx-dashboard-widget-container'); };
        _this._extendCssClass = 'dxrd-sqldatasource-wizard';
        return _this;
    }
    return DashboardQueryWizard;
}(dx_querybuilder_1.default.Analytics.Wizard.PopupWizard));
exports.DashboardQueryWizard = DashboardQueryWizard;
var DashboardDataSourceWizardState = (function () {
    function DashboardDataSourceWizardState() {
        this.sqlDataSourceWizard = {};
        this.jsonDataSourceWizard = {};
        this.olapDataSourceWizard = {};
        this.objectDataSourceWizard = {};
    }
    Object.defineProperty(DashboardDataSourceWizardState.prototype, "dashboardDataSourceType", {
        get: function () {
            return this.dataSourceType && data_source_wizard_model_1.ToDashboardDataSourceType(this.dataSourceType) || undefined;
        },
        set: function (value) {
            this.dataSourceType = data_source_wizard_model_1.ToDataSourceTypeNumber(value);
        },
        enumerable: true,
        configurable: true
    });
    return DashboardDataSourceWizardState;
}());
exports.DashboardDataSourceWizardState = DashboardDataSourceWizardState;
function createDashboardQueryWizard(requestWrapper, parameters, disableCustomSql, allowCreateNewJsonConnection, wizardSettings, dashboardConnectionStrings) {
    var factory = new dx_querybuilder_1.default.Analytics.Wizard.PageFactory();
    var wizardOptions = new _data_source_wizard_model_1.DashboardDataSourceWizardOptions();
    wizardOptions.callbacks = _create_query_page_1.createQueryPageCallback(requestWrapper, parameters);
    wizardOptions.disableCustomSql = disableCustomSql;
    wizardOptions.requestWrapper = requestWrapper;
    wizardOptions.wizardSettings.enableSqlDataSource = wizardSettings && _utils_1.type.isDefined(wizardSettings.enableSqlDataSource) ? wizardSettings.enableSqlDataSource : true;
    wizardOptions.wizardSettings.enableJsonDataSource = wizardSettings && _utils_1.type.isDefined(wizardSettings.enableJsonDataSource) ? wizardSettings.enableJsonDataSource : true;
    wizardOptions.wizardSettings.enableOlapDataSource = wizardSettings && _utils_1.type.isDefined(wizardSettings.enableOlapDataSource) ? wizardSettings.enableOlapDataSource : true;
    wizardOptions.wizardSettings.enableObjectDataSource = false;
    wizardOptions.allowCreateNewJsonConnection = allowCreateNewJsonConnection || false;
    wizardOptions.connectionStrings = dashboardConnectionStrings;
    choose_data_source_type_page_1._registerChooseDataSourceTypePage(factory, wizardOptions);
    dx_querybuilder_1.default.Analytics.Wizard._registerChooseSqlConnectionPage(factory, dashboardConnectionStrings.sql);
    choose_olap_connection_string_page_1._registerOlapConnectionStringsPage(factory, dashboardConnectionStrings.olap);
    dx_querybuilder_1.default.Analytics.Wizard._registerChooseJsonConnectionPage(factory, wizardOptions);
    dx_querybuilder_1.default.Analytics.Wizard._registerConfigureQueryPage(factory, wizardOptions);
    dx_querybuilder_1.default.Analytics.Wizard._registerConfigureParametersPage(factory, requestWrapper);
    dx_querybuilder_1.default.Analytics.Wizard._registerChooseJsonSourcePage(factory, requestWrapper, function () { return new _parameters_item_provider_1.ParametersItemProvider(parameters()); });
    _choose_json_schema_page_1._registerChooseJsonSchemaPage(factory, requestWrapper);
    dx_querybuilder_1.default.Analytics.Wizard._registerChooseObjectDataSourceTypesPage(factory, wizardOptions);
    dx_querybuilder_1.default.Analytics.Wizard._registerChooseObjectDataSourceDataMembersPage(factory, wizardOptions);
    dx_querybuilder_1.default.Analytics.Wizard._registerConfigureObjectDataSourceParametersPage(factory, function () { return new _parameters_item_provider_1.ParametersItemProvider(parameters()); });
    return new DashboardQueryWizard(factory);
}
exports.createDashboardQueryWizard = createDashboardQueryWizard;


/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dx_querybuilder_1 = __webpack_require__(1);
var OlapDataSourceType = 3099;
function ToDataSourceTypeNumber(dashboardType) {
    switch (dashboardType) {
        case 'Sql': return dx_querybuilder_1.default.Analytics.Wizard.DataSourceType.Sql;
        case 'Json': return dx_querybuilder_1.default.Analytics.Wizard.DataSourceType.Json;
        case 'Olap': return OlapDataSourceType;
    }
    throw new Error('Unknown dashboard datasource type: ' + dashboardType);
}
exports.ToDataSourceTypeNumber = ToDataSourceTypeNumber;
function ToDashboardDataSourceType(typeNumber) {
    switch (typeNumber) {
        case dx_querybuilder_1.default.Analytics.Wizard.DataSourceType.Sql: return 'Sql';
        case dx_querybuilder_1.default.Analytics.Wizard.DataSourceType.Json: return 'Json';
        case OlapDataSourceType: return 'Olap';
    }
    throw new Error('Unknown datasource type number: ' + typeNumber);
}
exports.ToDashboardDataSourceType = ToDashboardDataSourceType;


/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var dx_querybuilder_1 = __webpack_require__(1);
var data_source_wizard_model_1 = __webpack_require__(375);
var page_id_1 = __webpack_require__(232);
var _OlapSvgIconTemplate = {
    'dx-dashboard-svg-wizard-OlapDataSource': '<svg version="1.1" data-bind="svgAttrs" x="0px" y="0px" viewBox="0 0 96 96" style="enable-background:new 0 0 96 96;" xml:space="preserve"><style type="text/css"> .Black{fill:#727272;} .White{fill:#FFFFFF;} .Green{fill:#039C23;} .Blue{fill:#1177D7;} .Red{fill:#D11C1C;} .st0{opacity:0.75;} .st1{opacity:0.25;} .st2{opacity:0.5;}</style><g id="Layer_1"><g class="st1">	<ellipse class="Black" cx="44" cy="19.5" rx="26" ry="7.5"/></g><g class="st2"><path class="Black" d="M46,52.7v-0.2L70,40V21.4c0,4.2-11.6,7.6-26,7.6s-26-3.4-26-7.6v45c0,4.2,11.6,7.6,26,7.6c0.7,0,1.3,0,2,0 V52.7z"/></g><g class="st0"><polygon class="Blue" points="48,56 69,67 69,91 48,80"/></g><polygon class="Blue" points="92,56 71,67 71,91 92,80"/><g class="st2"><polygon class="Blue" points="70,42.2 48,53.7 70,65.3 92,53.7"/></g></g><g id="Layer_2"></g></svg>'
};
dx_analytics_core_1.default.Analytics.Widgets.Internal.SvgTemplatesEngine.addTemplates(_OlapSvgIconTemplate);
var DashboardChooseDataSourceTypePage = (function (_super) {
    __extends(DashboardChooseDataSourceTypePage, _super);
    function DashboardChooseDataSourceTypePage(_wizardOptions) {
        var _this = _super.call(this, _wizardOptions) || this;
        _this.connectionStrings = _wizardOptions.connectionStrings;
        return _this;
    }
    DashboardChooseDataSourceTypePage.prototype._createTypeItems = function () {
        var typeItems = [];
        var wizardSettings = this._dataSourceTypeOptions.wizardSettings;
        if (wizardSettings.enableSqlDataSource) {
            typeItems.push(new dx_querybuilder_1.default.Analytics.Wizard.TypeItem('Database', 'DataAccessUIStringId.DSTypeSql', 'sqldatasource', 'dxrd-svg-wizard-SqlDataSource', data_source_wizard_model_1.ToDataSourceTypeNumber('Sql')));
        }
        if (wizardSettings.enableJsonDataSource) {
            typeItems.push(new dx_querybuilder_1.default.Analytics.Wizard.TypeItem('JSON', 'DataAccessUIStringId.DSTypeJson', 'jsondatasource', 'dxrd-svg-wizard-JsonDataSource', data_source_wizard_model_1.ToDataSourceTypeNumber('Json')));
        }
        if (wizardSettings.enableOlapDataSource) {
            typeItems.push(new dx_querybuilder_1.default.Analytics.Wizard.TypeItem('OLAP Data Source', 'DashboardStringId.DefaultOlapDataSourceName', 'olapdatasource', 'dx-dashboard-svg-wizard-OlapDataSource', data_source_wizard_model_1.ToDataSourceTypeNumber('Olap')));
        }
        return typeItems;
    };
    return DashboardChooseDataSourceTypePage;
}(dx_querybuilder_1.default.Analytics.Wizard.ChooseDataSourceTypePage));
exports.DashboardChooseDataSourceTypePage = DashboardChooseDataSourceTypePage;
function _registerChooseDataSourceTypePage(factory, wizardOptions) {
    var chooseDataSourceTypePageMeta = factory.getMetadata(dx_querybuilder_1.default.Analytics.Wizard.DataSourceWizardPageId.ChooseDataSourceTypePage);
    if (!chooseDataSourceTypePageMeta) {
        dx_querybuilder_1.default.Analytics.Wizard._registerChooseDataSourceTypePage(factory, wizardOptions);
        chooseDataSourceTypePageMeta = factory.getMetadata(dx_querybuilder_1.default.Analytics.Wizard.DataSourceWizardPageId.ChooseDataSourceTypePage);
        factory.unregisterMetadata(dx_querybuilder_1.default.Analytics.Wizard.DataSourceWizardPageId.ChooseDataSourceTypePage);
    }
    factory.registerMetadata(page_id_1.DataSourceWizardPageId.ChooseDataSourceTypePage, {
        setState: function (data, state) {
            state.dataSourceType = data.dataSourceType;
        },
        getState: function (state) {
            return state;
        },
        resetState: function (state, defaultState) {
            state.dataSourceType = defaultState.dataSourceType;
        },
        create: function () { return new DashboardChooseDataSourceTypePage(wizardOptions); },
        description: chooseDataSourceTypePageMeta.description,
        template: chooseDataSourceTypePageMeta.template
    });
}
exports._registerChooseDataSourceTypePage = _registerChooseDataSourceTypePage;


/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_querybuilder_1 = __webpack_require__(1);
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var page_id_1 = __webpack_require__(232);
var DashboardChooseOlapConnectionStringPage = (function (_super) {
    __extends(DashboardChooseOlapConnectionStringPage, _super);
    function DashboardChooseOlapConnectionStringPage(connectionStrings) {
        var _this = _super.call(this) || this;
        _this._selectedConnectionString = ko.observableArray([]);
        _this._connectionStrings = connectionStrings;
        _this._disposables.push(_this._selectedConnectionString.subscribe(function () { return _this._onChange(); }));
        return _this;
    }
    DashboardChooseOlapConnectionStringPage.prototype.canNext = function () {
        return false;
    };
    DashboardChooseOlapConnectionStringPage.prototype.canFinish = function () {
        return this._selectedConnectionString().length !== 0;
    };
    DashboardChooseOlapConnectionStringPage.prototype.commit = function () {
        var deferred = $.Deferred();
        if (this._selectedConnectionString()[0]) {
            deferred.resolve({
                connectionName: this._selectedConnectionString()[0].name
            });
        }
        else {
            deferred.resolve();
        }
        return deferred.promise();
    };
    DashboardChooseOlapConnectionStringPage.prototype.initialize = function (state) {
        if (this._connectionStrings && this._connectionStrings.length === 1) {
            this._selectedConnectionString([this._connectionStrings[0]]);
        }
        else if (this._connectionStrings && this._connectionStrings.length > 0) {
            var matchingStrings = this._connectionStrings.filter(function (c) { return c.name == state.connectionName; });
            var selectedString = matchingStrings.length > 0 ? matchingStrings[0] : this._connectionStrings[0];
            this._selectedConnectionString(selectedString ? [selectedString] : []);
        }
        else {
            this._selectedConnectionString([]);
        }
        return $.Deferred().resolve().promise();
    };
    return DashboardChooseOlapConnectionStringPage;
}(dx_querybuilder_1.default.Analytics.Wizard.WizardPageBase));
exports.DashboardChooseOlapConnectionStringPage = DashboardChooseOlapConnectionStringPage;
function _registerOlapConnectionStringsPage(factory, connectionStrings) {
    var sqlConnectionStringsMeta = factory.getMetadata(dx_querybuilder_1.default.Analytics.Wizard.SqlDataSourceWizardPageId.ChooseConnectionPage);
    if (!sqlConnectionStringsMeta) {
        dx_querybuilder_1.default.Analytics.Wizard._registerChooseSqlConnectionPage(factory, undefined);
        sqlConnectionStringsMeta = factory.getMetadata(dx_querybuilder_1.default.Analytics.Wizard.SqlDataSourceWizardPageId.ChooseConnectionPage);
        factory.unregisterMetadata(dx_querybuilder_1.default.Analytics.Wizard.SqlDataSourceWizardPageId.ChooseConnectionPage);
    }
    factory.registerMetadata(page_id_1.OlapDataSourceWizardPageId.ChooseConnectionPage, {
        create: function () {
            return new DashboardChooseOlapConnectionStringPage(connectionStrings);
        },
        setState: function (result, state) {
            state.connectionName = result.connectionName;
        },
        getState: function (state) {
            return state.olapDataSourceWizard;
        },
        resetState: function (state, defaultState) {
            state.connectionName = defaultState.connectionName;
        },
        template: sqlConnectionStringsMeta.template,
        description: sqlConnectionStringsMeta.description
    });
}
exports._registerOlapConnectionStringsPage = _registerOlapConnectionStringsPage;


/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var chart_series_1 = __webpack_require__(142);
var chart_series_creator_1 = __webpack_require__(109);
var _chart_series_1 = __webpack_require__(198);
var _dashboard_item_coloring_options_1 = __webpack_require__(189);
var _base_metadata_1 = __webpack_require__(4);
var _object_properties_wrapper_1 = __webpack_require__(10);
var _accordion_tab_1 = __webpack_require__(7);
var _display_name_provider_1 = __webpack_require__(24);
var _container_type_selector_1 = __webpack_require__(92);
var _base_properties_composer_1 = __webpack_require__(12);
var _shared_composers_1 = __webpack_require__(13);
var ChartSeriesPropertiesComposer = (function (_super) {
    __extends(ChartSeriesPropertiesComposer, _super);
    function ChartSeriesPropertiesComposer(customizeHandler, _containerTypesMap, _allowConfigurePointLabels, _allowSecondaryAxis) {
        if (_containerTypesMap === void 0) { _containerTypesMap = chart_series_creator_1.ChartSeriesCreator.chartSeriesViewTypesMap; }
        if (_allowConfigurePointLabels === void 0) { _allowConfigurePointLabels = true; }
        if (_allowSecondaryAxis === void 0) { _allowSecondaryAxis = true; }
        var _this = _super.call(this, customizeHandler) || this;
        _this._containerTypesMap = _containerTypesMap;
        _this._allowConfigurePointLabels = _allowConfigurePointLabels;
        _this._allowSecondaryAxis = _allowSecondaryAxis;
        return _this;
    }
    ChartSeriesPropertiesComposer.prototype._composeTabsCore = function (model, args) {
        var typeTab = new _accordion_tab_1.TypeAccordionTab(_accordion_tab_1.KnownTabs.Type, 'DashboardWebStringId.Type'), commonTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.Options'), pointLabelsTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.PointLabels, 'DashboardWebStringId.AccordionTab.ScatterChartPointLabelOptions'), coloringTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ColoringOptions, 'DashboardWebStringId.ColoringOptions'), result = [typeTab, commonTab, coloringTab, pointLabelsTab];
        this._fillSeriesTypeWrapper(typeTab, model, args.containerType);
        this._fillSeriesGeneralTab(commonTab, model, args.dashboardItem, args.dataSourceBrowser);
        if (model && model[_chart_series_1.plotOnSecondaryAxis.propertyName]) {
            coloringTab.tabModel(new _object_properties_wrapper_1.ObjectPropertiesWrapper({
                model: args.dashboardItem.coloringOptions,
                properties: [_dashboard_item_coloring_options_1.measuresColoringMode]
            }));
        }
        if (this._allowConfigurePointLabels) {
            pointLabelsTab.tabModel(_shared_composers_1.SharedComposers.getLabelsWrapper(model));
        }
        return result;
    };
    ChartSeriesPropertiesComposer.prototype._fillSeriesTypeWrapper = function (tab, model, containerType) {
        if (model) {
            var hightlightedTypes = [
                'Bar',
                'StackedBar',
                'Point',
                'Line',
                'Area',
                'RangeArea'
            ];
            tab.tabModel(new _container_type_selector_1.ContainerTypeSelector(this._containerTypesMap, containerType, chart_series_creator_1.ChartSeriesCreator.chartSeriesGroupLocalization, hightlightedTypes));
        }
    };
    ChartSeriesPropertiesComposer.prototype._showPointMarkersVisible = function (model) {
        var allowedTypesForShowPointMarkers = ['Line', 'Spline', 'StepLine', 'StackedLine', 'FullStackedLine', 'SplineArea', 'Area', 'StepArea'];
        return (model instanceof chart_series_1.RangeSeries && model.seriesType() === 'RangeArea') ||
            (model instanceof chart_series_1.SimpleSeries && allowedTypesForShowPointMarkers.indexOf(model.seriesType()) !== -1);
    };
    ChartSeriesPropertiesComposer.prototype._showIgnoreEmptyPointsVisible = function (model) {
        var stackedTypes = ['FullStackedLine', 'StackedSplineArea', 'FullStackedSplineArea', 'StackedArea', 'FullStackedArea'];
        if (model instanceof chart_series_1.SimpleSeries && stackedTypes.indexOf(model.seriesType()) !== -1)
            return true;
        else
            return this._showPointMarkersVisible(model);
    };
    ChartSeriesPropertiesComposer.prototype._fillSeriesGeneralTab = function (tab, model, dashboardItem, dataSourceBrowser) {
        var _this = this;
        if (model) {
            var properties = [
                __assign({ editorOptions: { placeholder: _display_name_provider_1.getDataItemContainerDisplayName(dataSourceBrowser, dashboardItem, model) } }, _base_metadata_1.name),
                _chart_series_1.plotOnSecondaryAxis,
                _chart_series_1.ignoreEmptyPoints,
                _chart_series_1.showPointMarkers
            ];
            var visibilityFilterRules = {};
            visibilityFilterRules[_chart_series_1.ignoreEmptyPoints.propertyName] = function (propertiesWrapper) { return _this._showIgnoreEmptyPointsVisible(propertiesWrapper.model); };
            visibilityFilterRules[_chart_series_1.showPointMarkers.propertyName] = function (propertiesWrapper) { return _this._showPointMarkersVisible(propertiesWrapper.model); };
            visibilityFilterRules[_chart_series_1.plotOnSecondaryAxis.propertyName] = function (propertiesWrapper) { return _this._allowSecondaryAxis; };
            tab.tabModel(new _object_properties_wrapper_1.ObjectPropertiesWrapper({
                model: model,
                properties: properties,
                visibilityFilterRules: visibilityFilterRules
            }));
        }
    };
    return ChartSeriesPropertiesComposer;
}(_base_properties_composer_1.DataItemContainerPropertiesComposer));
exports.ChartSeriesPropertiesComposer = ChartSeriesPropertiesComposer;


/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var index_internal_1 = __webpack_require__(37);
var _date_time_period_1 = __webpack_require__(312);
var _limit_container_1 = __webpack_require__(313);
var _period_limit_1 = __webpack_require__(204);
var _base_metadata_1 = __webpack_require__(4);
var _form_adapter_editors_1 = __webpack_require__(22);
var _object_properties_wrapper_1 = __webpack_require__(10);
var _accordion_tab_1 = __webpack_require__(7);
var CustomRangePropertiesComposer = (function () {
    function CustomRangePropertiesComposer() {
    }
    CustomRangePropertiesComposer.prototype.composeTabs = function (model, args) {
        var commonTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', this.getCommonWrapper(model, args.argument, args.rangeFilterItem));
        return [commonTab];
    };
    CustomRangePropertiesComposer.prototype.getCommonWrapper = function (model, argument, rangeFilterItem) {
        var p = [], visibilityRules = {}, dateOnly = ['Year', 'MonthYear', 'QuarterYear', 'DayMonthYear'].indexOf(argument.dateTimeGroupInterval()) !== -1;
        p.push(__assign({}, _base_metadata_1.name, { validateBeforeSet: true, validationRules: [
                {
                    type: 'custom',
                    validationCallback: function (options) { return !rangeFilterItem.dateTimePeriods().filter(function (period) { return period.name() === options.value; })[0]; },
                    message: index_internal_1.getLocalizationById('DashboardStringId.UniqueNameValidationMessage')
                }
            ] }));
        p.push({
            container: _date_time_period_1.startLimit,
            properties: [__assign({ displayName: 'DashboardWebStringId.RangeFilter.StartMode', replacementPropertyName: 'start_mode' }, _date_time_period_1.mode), __assign({ displayName: 'DashboardWebStringId.RangeFilter.StartIntervalAndOffset', replacementPropertyName: 'start_flow_options' }, _limit_container_1.flowDateTimePeriodLimitProperty, { formAdapterItem: _form_adapter_editors_1.flowModeSettingsEditor() }), {
                    container: _limit_container_1.fixedDateTimePeriodLimitProperty,
                    properties: [__assign({ displayName: 'DashboardWebStringId.RangeFilter.StartDate', replacementPropertyName: 'start_date', editorOptions: {
                                type: dateOnly ? 'date' : 'datetime'
                            } }, _period_limit_1.date)]
                }]
        });
        visibilityRules['start_date'] = ['start_mode', '=', 'Fixed'];
        visibilityRules['start_flow_options'] = ['start_mode', '=', 'Flow'];
        p.push({
            container: _date_time_period_1.endLimit,
            properties: [__assign({ displayName: 'DashboardWebStringId.RangeFilter.EndMode', replacementPropertyName: 'end_mode' }, _date_time_period_1.mode), __assign({ displayName: 'DashboardWebStringId.RangeFilter.EndIntervalAndOffset', replacementPropertyName: 'end_flow_options' }, _limit_container_1.flowDateTimePeriodLimitProperty, { formAdapterItem: _form_adapter_editors_1.flowModeSettingsEditor() }), {
                    container: _limit_container_1.fixedDateTimePeriodLimitProperty,
                    properties: [__assign({ displayName: 'DashboardWebStringId.RangeFilter.EndDate', replacementPropertyName: 'end_date', editorOptions: {
                                type: dateOnly ? 'date' : 'datetime'
                            } }, _period_limit_1.date)]
                }]
        });
        visibilityRules['end_date'] = ['end_mode', '=', 'Fixed'];
        visibilityRules['end_flow_options'] = ['end_mode', '=', 'Flow'];
        p.push({
            propertyName: 'dateSampleFakeProperty',
            formAdapterItem: _form_adapter_editors_1.textPreviewEditor({ target: model._getPeriodTextValue }),
        });
        p.push({
            propertyName: 'buttonsFakeProperty',
            formAdapterItem: _form_adapter_editors_1.actionButtons([
                {
                    text: dx_analytics_core_1.default.Analytics.Internal.localize('DashboardWebStringId.RangeFilter.SetDefaultCustomPeriod'),
                    onClick: function () { return rangeFilterItem.defaultDateTimePeriodName(model.name()); },
                    visible: ko.computed(function () { return rangeFilterItem.defaultDateTimePeriodName() !== model.name(); })
                },
                {
                    text: dx_analytics_core_1.default.Analytics.Internal.localize('DashboardWebStringId.RangeFilter.ClearDefaultCustomPeriod'),
                    onClick: function () { return rangeFilterItem.defaultDateTimePeriodName(null); },
                    visible: ko.computed(function () { return rangeFilterItem.defaultDateTimePeriodName() === model.name(); })
                }
            ]),
        });
        var wrapper = new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: p,
            visibilityFilterRules: visibilityRules,
            modelExtention: { buttonsFakeProperty: {}, dateSampleFakeProperty: {} }
        });
        return wrapper;
    };
    return CustomRangePropertiesComposer;
}());
exports.CustomRangePropertiesComposer = CustomRangePropertiesComposer;


/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(37);
__export(__webpack_require__(39));


/***/ }),
/* 381 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.config };

/***/ }),
/* 382 */
/***/ (function(module, exports) {

module.exports = DevExpress.utils.date;

/***/ }),
/* 383 */
/***/ (function(module, exports) {

module.exports = DevExpress.formatHelper;

/***/ }),
/* 384 */
/***/ (function(module, exports) {

module.exports = DevExpress.localization.number;

/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _utils_1 = __webpack_require__(3);
var _geo_point_map_data_controller_base_1 = __webpack_require__(163);
var bubbleMapDataController = (function (_super) {
    __extends(bubbleMapDataController, _super);
    function bubbleMapDataController(options) {
        return _super.call(this, options) || this;
    }
    bubbleMapDataController.prototype.getPoint = function (index) {
        return _utils_1.deepExtend(_super.prototype.getPoint.call(this, index), {
            weight: this._getMeasureValue(index, this.viewModel.WeightId),
            color: this._getMeasureValue(index, this.viewModel.ColorId),
            weightText: this._getMeasureDisplayText(index, this.viewModel.WeightId),
            colorText: this._getMeasureDisplayText(index, this.viewModel.ColorId)
        });
    };
    bubbleMapDataController.prototype.formatColor = function (value) {
        var measure = this.multiData.getMeasureById(this.viewModel.ColorId);
        return measure ? measure.format(value) : value;
    };
    bubbleMapDataController.prototype.formatWeight = function (value) {
        var measure = this.multiData.getMeasureById(this.viewModel.WeightId);
        return measure ? measure.format(value) : value;
    };
    return bubbleMapDataController;
}(_geo_point_map_data_controller_base_1.geoPointMapDataControllerBase));
exports.bubbleMapDataController = bubbleMapDataController;


/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var _kpi_data_controller_1 = __webpack_require__(238);
var cardDataController = (function (_super) {
    __extends(cardDataController, _super);
    function cardDataController(options) {
        return _super.call(this, options) || this;
    }
    cardDataController.prototype._iterateKpiItems = function (delegate) {
        var that = this;
        if (that.viewModel) {
            $.each(that.viewModel.Cards, function (_, card) {
                delegate(card);
            });
        }
    };
    return cardDataController;
}(_kpi_data_controller_1.kpiDataController));
exports.cardDataController = cardDataController;


/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _localization_ids_1 = __webpack_require__(21);
var _localizer_1 = __webpack_require__(16);
var _chart_data_controller_proto_1 = __webpack_require__(165);
var chartDataController = (function (_super) {
    __extends(chartDataController, _super);
    function chartDataController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    chartDataController.prototype.getArgumentBindingValue = function (argumentPoint, pointIndex) {
        if (this.isQualitativeArgument() || this.isDiscreteArgument()) {
            if (argumentPoint.getParent() != null) {
                return pointIndex.toString();
            }
            else {
                return _localizer_1.localizer.getString(_localization_ids_1.localizationId.ChartTotalValue);
            }
        }
        return argumentPoint.getValue();
    };
    return chartDataController;
}(_chart_data_controller_proto_1.chartDataControllerProto));
exports.chartDataController = chartDataController;


/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var _data_controller_base_1 = __webpack_require__(48);
var choroplethMapDataController = (function (_super) {
    __extends(choroplethMapDataController, _super);
    function choroplethMapDataController(options) {
        var _this = _super.call(this, options) || this;
        _this.axisHash = {};
        _this.isEmpty = true;
        _this._prepare();
        return _this;
    }
    choroplethMapDataController.prototype._prepare = function () {
        var attributeId = this.viewModel.AttributeDimensionId, axis = this.multiData.getAxis(), axisPoints = attributeId ? axis.getPointsByDimension(attributeId) : [];
        this.isEmpty = axisPoints.length == 0;
        for (var i = 0; i < axisPoints.length; i++)
            this.axisHash[axisPoints[i].getValue()] = axisPoints[i];
    };
    choroplethMapDataController.prototype.hasRecords = function () {
        return !this.isEmpty;
    };
    choroplethMapDataController.prototype.getDeltaValue = function (attribute, deltaId) {
        var axisPoint = this.axisHash[attribute];
        return axisPoint ? this.multiData.getSlice(axisPoint).getDeltaValue(deltaId) : null;
    };
    choroplethMapDataController.prototype.getValue = function (attribute, measureName) {
        var measureValue = this._getMeasureValue(attribute, measureName);
        return measureValue ? measureValue.getValue() : null;
    };
    choroplethMapDataController.prototype.getDisplayText = function (attribute, measureName) {
        var measureValue = this._getMeasureValue(attribute, measureName);
        return measureValue ? measureValue.getDisplayText() : null;
    };
    choroplethMapDataController.prototype.getUniqueValue = function (attribute) {
        var axisPoint = this.axisHash[attribute];
        return axisPoint ? axisPoint.getUniqueValue() : null;
    };
    choroplethMapDataController.prototype.getMinMax = function (measureName) {
        var that = this, min, max, value;
        $.each(this.axisHash, function (key, axisPoint) {
            value = that.multiData.getSlice(axisPoint).getMeasureValue(measureName).getValue();
            if (min == null || value < min)
                min = value;
            if (max == null || value > max)
                max = value;
        });
        return {
            min: min,
            max: max
        };
    };
    choroplethMapDataController.prototype.getMeasureDescriptorById = function (valueId) {
        return this.multiData.getMeasureById(valueId);
    };
    choroplethMapDataController.prototype._getMeasureValue = function (attribute, measureName) {
        var axisPoint = this.axisHash[attribute];
        return axisPoint ? this.multiData.getSlice(axisPoint).getMeasureValue(measureName) : null;
    };
    return choroplethMapDataController;
}(_data_controller_base_1.dataControllerBase));
exports.choroplethMapDataController = choroplethMapDataController;


/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _gauge_range_calculator_1 = __webpack_require__(390);
var _utils_1 = __webpack_require__(3);
var _kpi_data_controller_1 = __webpack_require__(238);
var gaugeDataController = (function (_super) {
    __extends(gaugeDataController, _super);
    function gaugeDataController(options) {
        var _this = _super.call(this, options) || this;
        _this._gaugeRanges = {};
        return _this;
    }
    gaugeDataController.prototype._iterateKpiItems = function (delegate) {
        var that = this;
        if (that.viewModel) {
            that.viewModel.Gauges.forEach(function (gauge) {
                delegate(gauge);
            });
        }
    };
    gaugeDataController.prototype._getGaugeRange = function (element) {
        var elementId = element.ID, range = this._gaugeRanges[elementId], calculator;
        if (!range) {
            calculator = new _gauge_range_calculator_1.gaugeRangeCalculator({
                values: this._getGaugeValues(element),
                gaugeModel: {
                    Type: this._gaugeViewType,
                    MinValue: element.MinValue,
                    MaxValue: element.MaxValue
                }
            });
            range = calculator.getGaugeRange();
            this._gaugeRanges[elementId] = range;
        }
        return range;
    };
    gaugeDataController.prototype._getGaugeValues = function (element) {
        var multiData = this.multiData, gaugeValues = [], axisPoints = this._axisPoints || [null], getMeasureValue = function (axisPoint) {
            var getMeasure = axisPoint ? multiData.getMeasureValueByAxisPoints : multiData.getMeasureValue;
            gaugeValues.push(getMeasure.call(multiData, element.ID, [axisPoint]).getValue());
        }, getDeltaValue = function (axisPoint) {
            var getDelta = axisPoint ? multiData.getDeltaValueByAxisPoints : multiData.getDeltaValue, deltaValue = getDelta.call(multiData, element.ID, [axisPoint]), actualValue = deltaValue.getActualValue(), targetValue = deltaValue.getTargetValue();
            gaugeValues.push(actualValue.getValue());
            gaugeValues.push(targetValue.getValue());
        }, getter = element.DataItemType === _utils_1.KpiValueMode.Measure ? getMeasureValue : getDeltaValue;
        axisPoints.forEach(function (axisPoint) {
            getter(axisPoint);
        });
        return gaugeValues;
    };
    gaugeDataController.prototype._initialize = function () {
        _super.prototype._initialize.call(this);
        this._gaugeViewType = this.viewModel ? this.viewModel.ViewType : undefined;
    };
    return gaugeDataController;
}(_kpi_data_controller_1.kpiDataController));
exports.gaugeDataController = gaugeDataController;


/***/ }),
/* 390 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _utils_1 = __webpack_require__(3);
var gaugeRangeCalculator = (function () {
    function gaugeRangeCalculator(options) {
        this._values = options.values;
        this._gaugeViewType = options.gaugeModel.Type;
        this._customMin = options.gaugeModel.MinValue;
        this._customMax = options.gaugeModel.MaxValue;
        this._minDefined = this._customMin != null;
        this._maxDefined = this._customMax != null;
        this._defineMinMaxTicks();
    }
    gaugeRangeCalculator.prototype.getGaugeRange = function () {
        this._defineMinMax();
        this._setRangeStart();
        this._extendRange();
        var left = Math.min(this._min, this._max), right = Math.max(this._min, this._max), rangeLength = right - left, scaleReversed = this._min > this._max, majorTickCount, minorTickCount, stepCount, step, delta, fit, currentStep, currentDelta, currentFit;
        if (rangeLength === 0) {
            majorTickCount = 1;
            minorTickCount = 0;
        }
        else {
            stepCount = this._minTickCount - 1;
            step = this._chooseMultiplier(rangeLength / stepCount);
            delta = step * stepCount - rangeLength;
            fit = this._isFit(left, right, step, stepCount);
            for (var i = stepCount + 1; i < this._maxTickCount; i++) {
                currentStep = this._chooseMultiplier(rangeLength / i);
                currentDelta = currentStep * i - rangeLength;
                currentFit = this._isFit(left, right, currentStep, i);
                if (currentFit && (currentDelta < delta || !fit)) {
                    delta = currentDelta;
                    step = currentStep;
                    fit = currentFit;
                    stepCount = i;
                }
            }
            left = this._getLeft(left, step);
            right = this._getRight(right, step);
            this._min = !scaleReversed ? left : right;
            this._max = !scaleReversed ? right : left;
            majorTickCount = stepCount + 1;
            if (step % 5 === 0)
                minorTickCount = 4;
            else if (step % 3 === 0)
                minorTickCount = 2;
            else
                minorTickCount = 3;
            return {
                minorTickCount: minorTickCount,
                majorTickCount: majorTickCount,
                min: this._min,
                max: this._max
            };
        }
    };
    gaugeRangeCalculator.prototype._getLeft = function (left, step) {
        var sign = left > 0 ? 1 : -1;
        if (this._equalSign && left > 0)
            return Math.floor(Math.abs(left) / step) * step * sign;
        else
            return Math.ceil(Math.abs(left) / step) * step * sign;
    };
    gaugeRangeCalculator.prototype._getRight = function (right, step) {
        var sign = right > 0 ? 1 : -1;
        if (this._equalSign && right < 0)
            return Math.floor(Math.abs(right) / step) * step * sign;
        else
            return Math.ceil(Math.abs(right) / step) * step * sign;
    };
    gaugeRangeCalculator.prototype._isFit = function (left, right, step, tickCount) {
        var leftAbs = Math.abs(left), rigthAbs = Math.abs(right), isFit = false;
        if (!this._signsEqual(left, right)) {
            isFit = (Math.ceil(leftAbs / step) + Math.ceil(rigthAbs / step)) <= tickCount;
        }
        else {
            var minAbs = Math.min(leftAbs, rigthAbs), maxAbs = Math.max(leftAbs, rigthAbs);
            isFit = Math.ceil(maxAbs / step) - Math.floor(minAbs / step) <= tickCount;
        }
        return isFit;
    };
    gaugeRangeCalculator.prototype._extendRange = function () {
        var that = this, extendMin = function (coef) {
            if (!that._minDefined)
                that._min *= coef;
        }, extendMax = function (coef) {
            if (!that._maxDefined)
                that._max *= coef;
        };
        if (this._equalSign) {
            if (Math.abs(this._min) < Math.abs(this._max)) {
                extendMin(0.95);
                extendMax(1.05);
            }
            else {
                extendMin(1.05);
                extendMax(0.95);
            }
        }
        else {
            extendMin(1.05);
            extendMax(1.05);
        }
        if (this._min === this._max) {
            if (this._min !== 0)
                this._max *= 1.4;
            else
                this._max = 1;
        }
    };
    gaugeRangeCalculator.prototype._setRangeStart = function () {
        if (this._equalSign) {
            if (this._min === this._max) {
                if (this._min > 0) {
                    if (!this._minDefined)
                        this._min = 0;
                }
                else {
                    if (!this._maxDefined)
                        this._max = 0;
                }
            }
            if (Math.abs(this._min) <= Math.abs(this._max)) {
                if (!this._minDefined)
                    this._min = 0;
            }
            else {
                if (!this._maxDefined)
                    this._max = 0;
            }
        }
    };
    gaugeRangeCalculator.prototype._defineMinMax = function () {
        if (this._minDefined)
            this._min = this._customMin;
        else
            this._min = this._values.length > 0 ? Math.min.apply(Math, this._values) : 0;
        if (this._maxDefined)
            this._max = this._customMax;
        else
            this._max = this._values.length > 0 ? Math.max.apply(Math, this._values) : 1;
        this._equalSign = this._signsEqual(this._min, this._max);
    };
    gaugeRangeCalculator.prototype._signsEqual = function (number1, number2) {
        return (number1 >= 0 && number2 >= 0) || (number1 < 0 && number2 < 0);
    };
    gaugeRangeCalculator.prototype._defineMinMaxTicks = function () {
        switch (this._gaugeViewType) {
            case _utils_1.gaugeViewType.CircularFull:
                this._minTickCount = 6;
                this._maxTickCount = 9;
                break;
            case _utils_1.gaugeViewType.LinearHorizontal:
                this._minTickCount = 3;
                this._maxTickCount = 3;
                break;
            default:
                this._minTickCount = 4;
                this._maxTickCount = 6;
                break;
        }
    };
    gaugeRangeCalculator.prototype._chooseMultiplier = function (delta) {
        var multipliers = [1, 2, 3, 5], result, exp, scale, normDelta, newResult, i;
        if (delta > 1) {
            for (var factor = 1;; factor *= 10) {
                for (i = 0; i < multipliers.length; i++) {
                    result = multipliers[i] * factor;
                    if (delta <= result)
                        return result;
                }
            }
        }
        else {
            result = 10;
            exp = Math.floor(Math.log(Math.abs(delta)) / Math.LN10);
            scale = Math.pow(10, -exp);
            normDelta = delta * scale;
            for (i = multipliers.length - 1; i >= 0; i--) {
                newResult = multipliers[i];
                if (normDelta > newResult) {
                    break;
                }
                result = newResult;
            }
            return result / scale;
        }
    };
    return gaugeRangeCalculator;
}());
exports.gaugeRangeCalculator = gaugeRangeCalculator;


/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _utils_1 = __webpack_require__(3);
var _geo_point_map_data_controller_base_1 = __webpack_require__(163);
var geoPointMapDataController = (function (_super) {
    __extends(geoPointMapDataController, _super);
    function geoPointMapDataController(options) {
        return _super.call(this, options) || this;
    }
    geoPointMapDataController.prototype.getPoint = function (index) {
        return _utils_1.deepExtend(_super.prototype.getPoint.call(this, index), {
            text: this._getMeasureDisplayText(index, this.viewModel.ValueId)
        });
    };
    return geoPointMapDataController;
}(_geo_point_map_data_controller_base_1.geoPointMapDataControllerBase));
exports.geoPointMapDataController = geoPointMapDataController;


/***/ }),
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var _item_data_axis_names_1 = __webpack_require__(34);
var _grid_bar_calculator_1 = __webpack_require__(393);
var _utils_1 = __webpack_require__(3);
var _data_controller_base_1 = __webpack_require__(48);
var GridColumnType = {
    Dimension: 'Dimension',
    Measure: 'Measure',
    Delta: 'Delta',
    Sparkline: 'Sparkline',
    Hyperlink: 'Hyperlink'
};
var gridDataController = (function (_super) {
    __extends(gridDataController, _super);
    function gridDataController(options) {
        var _this = _super.call(this, options) || this;
        var pushColumn = function (columnName, columnViewModel) {
            _this._columnRepository[columnName] = {
                columnName: columnName,
                column: columnViewModel,
                barCalculator: columnViewModel.BarViewModel ? new _grid_bar_calculator_1.GridBarCalculator(columnViewModel.BarViewModel.AlwaysShowZeroLevel) : null
            };
            if (_this.viewModel.SelectionDataMembers && _this.viewModel.SelectionDataMembers.indexOf(columnName) !== -1) {
                _this._selectionMembers.push(columnName);
            }
        };
        _this._columnRepository = {};
        _this._selectionMembers = [];
        if (!!_this.multiData) {
            if (!!_this.viewModel.HasDimensionColumns) {
                _this._axisColumnPoints = _this.multiData.getAxis(_this.viewModel.ColumnAxisName).getPoints();
            }
            if (!!_this.viewModel.SparklineAxisName) {
                _this._axisSparklinePoints = _this.multiData.getAxis(_this.viewModel.SparklineAxisName).getPoints();
            }
            (_this.viewModel.Columns || []).forEach(function (columnViewModel) {
                pushColumn(columnViewModel.DataId, columnViewModel);
            });
        }
        return _this;
    }
    gridDataController.prototype.getDataSource = function () {
        var that = this, list = [], listItem, hasColumns = (that.viewModel.Columns || []).length > 0, axisPointsCount = !!that._axisColumnPoints ? that._axisColumnPoints.length : +hasColumns;
        for (var rowIndex = 0; rowIndex < axisPointsCount; rowIndex++) {
            listItem = { index: rowIndex };
            $.each(that._columnRepository, function (columnName, columnInfo) {
                var valueItem = that._getValueItem(columnInfo, rowIndex);
                listItem[columnName] = valueItem.getValue();
                if (columnInfo.column.ColumnType === GridColumnType.Hyperlink && !!columnInfo.column.DataAttributeId) {
                    listItem[columnName + '_' + columnInfo.column.DataAttributeId] = valueItem.getUriValue();
                }
            });
            list.push(listItem);
        }
        return {
            store: {
                type: 'array',
                data: list,
                key: 'index'
            }
        };
    };
    gridDataController.prototype.getValueItem = function (columnName, rowIndex) {
        return this._getValueItem(this._columnRepository[columnName], rowIndex);
    };
    gridDataController.prototype._getValueItem = function (columnInfo, rowIndex) {
        var that = this;
        var columnName = columnInfo.columnName;
        switch (columnInfo.column.ColumnType) {
            case GridColumnType.Measure:
                if (columnInfo.column.DisplayMode === 'Bar') {
                    return this._getBarCellValue(columnName, rowIndex, columnInfo.barCalculator);
                }
                else {
                    return this._getMeasureCellValue(columnName, rowIndex);
                }
            case GridColumnType.Delta:
                return that._getDeltaValue(columnName, rowIndex, columnInfo.column.DisplayMode === 'Bar' ? columnInfo.barCalculator : null, columnInfo.column.DeltaValueType, columnInfo.column.IgnoreDeltaColor);
            case GridColumnType.Sparkline:
                return that._getSparklineCellValues(columnName, rowIndex, columnInfo.column.SparklineOptions);
            case GridColumnType.Hyperlink:
                return that._getCellValue(columnName, columnInfo.column.DataAttributeId, rowIndex);
            case GridColumnType.Dimension:
                return that._getCellValue(columnName, null, rowIndex);
        }
    };
    gridDataController.prototype.getSelectionValues = function (values) {
        var that = this, point, resultPoint, result = [], selectionMembers = that._selectionMembers, fit, columns = that.viewModel.Columns, visibleDimensions = columns.map(function (column) { return column.DataId; });
        if (values.length > selectionMembers.length)
            values = values.slice(-selectionMembers.length);
        $.each(that._axisColumnPoints, function (index, axisPoint) {
            fit = false;
            $.each(selectionMembers, function (memberIndex, member) {
                point = that._findAxisPoint(member, axisPoint);
                if (point && values.length > memberIndex) {
                    if (!_utils_1.checkValuesAreEqual(point.getUniqueValue(), values[memberIndex])) {
                        fit = false;
                        return false;
                    }
                    resultPoint = point;
                }
                fit = true;
            });
            if (fit && resultPoint) {
                result = resultPoint._selectPath(function (point) {
                    var index = visibleDimensions.indexOf(point.getDimension().id);
                    if (index === -1 || columns[index].DisplayMode != 'Image')
                        return point.getUniqueValue();
                    else
                        return;
                });
                return;
            }
        });
        return result;
    };
    gridDataController.prototype.getSelectedRowKeys = function (valuesSet) {
        var that = this, keys = [], selectionMembers = that._selectionMembers, checkAxisPoint = function (axisPoint, values) {
            var point;
            for (var i = 0; i < values.length; i++) {
                point = that._findAxisPoint(selectionMembers[i], axisPoint);
                if (!_utils_1.checkValuesAreEqual(point.getUniqueValue(), values[i]))
                    return false;
            }
            return true;
        };
        $.each(that._axisColumnPoints, function (index, axisPoint) {
            $.each(valuesSet, function (_, values) {
                if (values.length > selectionMembers.length)
                    values = values.slice(-selectionMembers.length);
                if (checkAxisPoint(axisPoint, values)) {
                    keys.push(index);
                    return;
                }
            });
        });
        return keys;
    };
    gridDataController.prototype.getDimensionValues = function (rowIndex) {
        return this._axisColumnPoints[rowIndex].getUniquePath();
    };
    gridDataController.prototype.getTotalValue = function (measureId) {
        return this.multiData.getMeasureValue(measureId).getDisplayText();
    };
    gridDataController.prototype._getBarCellValue = function (columnName, rowIndex, barCalculator) {
        var that = this, item = this.multiData.getMeasureValueByAxisPoints(columnName, that._getPointArray(rowIndex));
        barCalculator.addValue(item);
        return {
            getValue: function () {
                return item.getValue();
            },
            getData: function () {
                return that._getBarData(barCalculator, item, rowIndex);
            },
            getStyleSettingsInfo: function () {
                return that._getStyleSettingsInfo(columnName, rowIndex);
            }
        };
    };
    gridDataController.prototype._getBarData = function (barCalculator, item, rowIndex) {
        return {
            zeroValue: barCalculator.getZeroPosition(),
            normalizedValue: barCalculator.getNormalizedValue(rowIndex || 0),
            text: item.getDisplayText()
        };
    };
    gridDataController.prototype._getMeasureCellValue = function (columnName, rowIndex) {
        var that = this, item = that.multiData.getMeasureValueByAxisPoints(columnName, that._getPointArray(rowIndex)), value = item.getValue();
        return {
            getValue: function () {
                return value;
            },
            getData: function () {
                return {
                    value: item.getValue(),
                    displayText: item.getDisplayText()
                };
            },
            getStyleSettingsInfo: function () {
                return that._getStyleSettingsInfo(columnName, rowIndex);
            }
        };
    };
    gridDataController.prototype._getCellValue = function (columnName, uriColumnName, rowIndex) {
        var that = this, item = undefined, uriItem = !!uriColumnName ? that.multiData.getMeasureValueByAxisPoints(uriColumnName, that._getPointArray(rowIndex)) : null, obtainItem = function () {
            if (item === undefined) {
                item = that._findAxisPoint(columnName, that._getColumnAxisPoint(rowIndex)) || {
                    getValue: function () {
                        return undefined;
                    },
                    getUniqueValue: function () {
                        return undefined;
                    },
                    getDisplayText: function () {
                        return '';
                    }
                };
            }
            return item;
        };
        var cellValue = {
            getValue: function () {
                return obtainItem().getValue();
            },
            getUniqueValue: function () {
                return obtainItem().getUniqueValue();
            },
            getData: function () {
                return {
                    value: obtainItem().getValue(),
                    displayText: obtainItem().getDisplayText()
                };
            },
            getStyleSettingsInfo: function () {
                return that._getStyleSettingsInfo(columnName, rowIndex);
            }
        };
        cellValue.getUriValue = function () {
            return !!uriItem ? uriItem.getValue() : obtainItem().getDisplayText();
        };
        return cellValue;
    };
    gridDataController.prototype._getStyleSettingsInfo = function (columnName, rowIndex) {
        var that = this, rules = [], cellInfo = {
            rowIndex: rowIndex
        };
        if (that.cfModel) {
            rules = $.grep(that.cfModel.RuleModels, function (rule) {
                return rule.ApplyToRow || rule.ApplyToDataId === columnName;
            });
        }
        return that._getStyleSettingsInfoCore(cellInfo, rules, that.viewModel.ColumnAxisName, _item_data_axis_names_1.itemDataAxisNames.defaultAxis);
    };
    gridDataController.prototype._getStyleIndexes = function (rule, cellInfo, points) {
        var that = this, axisPoint, currentStyleIndexes, styleIndexes = [];
        axisPoint = cellInfo.rowIndex !== undefined ? that._getAxisPoint(cellInfo.rowIndex, rule.CalcByDataId) : undefined;
        if (axisPoint)
            points.push(axisPoint);
        currentStyleIndexes = that._getMeasureValueByAxisPoints(points, rule.FormatConditionMeasureId);
        if (currentStyleIndexes) {
            styleIndexes = styleIndexes.concat(currentStyleIndexes);
        }
        return styleIndexes;
    };
    gridDataController.prototype._getAxisPoint = function (rowIndex, columnInfo) {
        var axisPoint = rowIndex !== undefined && !!this._axisColumnPoints ? this._axisColumnPoints[rowIndex] : undefined, correctAxisPoint = axisPoint ? this._findAxisPoint(columnInfo, axisPoint) : undefined;
        return correctAxisPoint || axisPoint;
    };
    gridDataController.prototype._getDeltaValue = function (columnName, rowIndex, barCalculator, deltaType, useDefaultColor) {
        var that = this, deltaValue = null, deltaValueItem = null, measureValue = null, deltaDesriptor = that.multiData.getDeltaById(columnName), measureItem, idBarDisplayMode = !!barCalculator, getStyleSettingsInfo = function (columnName, rowIndex) {
            return that._getStyleSettingsInfo(columnName, rowIndex);
        };
        if (deltaDesriptor) {
            deltaValue = that.multiData.getDeltaValueByAxisPoints(columnName, that._getPointArray(rowIndex));
            deltaValueItem = that._getDeltaValueItem(deltaValue, deltaType);
            if (idBarDisplayMode)
                barCalculator.addValue(deltaValueItem);
            return {
                getValue: function () {
                    return deltaValueItem.getValue();
                },
                getData: function () {
                    if (idBarDisplayMode) {
                        return that._getBarData(barCalculator, deltaValueItem, rowIndex);
                    }
                    else {
                        return {
                            type: that._convertIndicatorType(deltaValue.getIndicatorType().getValue()),
                            hasPositiveMeaning: deltaValue.getIsGood().getValue(),
                            text: {
                                value: deltaValueItem.getDisplayText(),
                                useDefaultColor: useDefaultColor
                            }
                        };
                    }
                },
                getStyleSettingsInfo: function () {
                    return that._getStyleSettingsInfo(columnName, rowIndex);
                }
            };
        }
        else {
            measureItem = that.multiData.getMeasureValueByAxisPoints(columnName, that._getPointArray(rowIndex));
            if (idBarDisplayMode)
                barCalculator.addValue(measureItem);
            return {
                getValue: function () {
                    return measureItem.getValue();
                },
                getData: function () {
                    if (idBarDisplayMode) {
                        return that._getBarData(barCalculator, measureItem, rowIndex);
                    }
                    else {
                        return {
                            type: null,
                            hasPositiveMeaning: null,
                            text: {
                                value: measureItem.getDisplayText(),
                                useDefaultColor: null
                            }
                        };
                    }
                },
                getStyleSettingsInfo: function () {
                    return that._getStyleSettingsInfo(columnName, rowIndex);
                }
            };
        }
    };
    gridDataController.prototype._getDeltaValueItem = function (deltaValue, deltaValueType) {
        switch (deltaValueType) {
            case 'ActualValue':
                return deltaValue.getActualValue();
            case 'AbsoluteVariation':
                return deltaValue.getAbsoluteVariation();
            case 'PercentVariation':
                return deltaValue.getPercentVariation();
            case 'PercentOfTarget':
                return deltaValue.getPercentOfTarget();
            case 'TargetValue':
                return deltaValue.getTargetValue();
        }
    };
    gridDataController.prototype._getSparklineCellValues = function (columnName, rowIndex, sparklineOptions) {
        var that = this, measureDescriptor = that.multiData.getMeasureById(columnName), axisPoint = that._getPointArray(rowIndex), getValues = function (getter) {
            var result = [];
            if (!!that._axisSparklinePoints) {
                $.each(that._axisSparklinePoints, function (_, sparklinePoint) {
                    result.push(getter(that.multiData.getMeasureValueByAxisPoints(columnName, axisPoint.concat(sparklinePoint))));
                });
            }
            else {
                result.push(getter(that.multiData.getMeasureValueByAxisPoints(columnName, axisPoint)));
            }
            return result;
        }, values = getValues(function (item) {
            var value = item.getValue();
            return value || 0;
        });
        return {
            getValue: function () {
                return values;
            },
            getData: function () {
                var valuesItems = getValues(function (item) {
                    return item;
                }), startValue = valuesItems[0].getValue(), endValue = valuesItems[valuesItems.length - 1].getValue();
                return {
                    sparkline: that._generateSparklineOptions(values, sparklineOptions, measureDescriptor.format),
                    startText: startValue ? valuesItems[0].getDisplayText() : measureDescriptor.format(0),
                    endText: endValue ? valuesItems[valuesItems.length - 1].getDisplayText() : measureDescriptor.format(0)
                };
            },
            getStyleSettingsInfo: function () {
                return that._getStyleSettingsInfo(columnName, rowIndex);
            }
        };
    };
    gridDataController.prototype._getColumnAxisPoint = function (rowIndex) {
        return !!this._axisColumnPoints ? this._axisColumnPoints[rowIndex] : undefined;
    };
    gridDataController.prototype._getPointArray = function (rowIndex) {
        var point = this._getColumnAxisPoint(rowIndex), array = [];
        if (point)
            array.push(point);
        return array;
    };
    return gridDataController;
}(_data_controller_base_1.dataControllerBase));
exports.gridDataController = gridDataController;


/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var startPercent = 0.15;
var GridBarCalculator = (function () {
    function GridBarCalculator(showZeroLevel) {
        this._valueItems = [];
        this._alwaysShowZeroLevel = showZeroLevel;
    }
    GridBarCalculator.prototype.addValue = function (valueItem) {
        this._valueItems.push(valueItem);
        this._initialized = false;
        this._invalidate();
    };
    GridBarCalculator.prototype.getNormalizedValue = function (index) {
        if (!this._initialized)
            this._initialize();
        if (this._normalizedValues[index])
            return this._normalizedValues[index];
        var normalizedValue = this._normalizeValue(this._valueItems[index].getValue());
        this._normalizedValues[index] = normalizedValue;
        return normalizedValue;
    };
    GridBarCalculator.prototype.getZeroPosition = function () {
        if (!this._initialized)
            this._initialize();
        return this._zeroPosition;
    };
    GridBarCalculator.prototype._invalidate = function () {
        this._normalizedValues = [];
        this._range = null;
        this._min = null;
        this._max = null;
        this._zeroPosition = null;
        this._normalizationData = null;
        this._initialized = false;
    };
    GridBarCalculator.prototype._normalizeValue = function (value) {
        var showZero = this._normalizationData.showZero, minimum = this._normalizationData.minimum, ratio = this._normalizationData.ratio, range = this._normalizationData.range, sign = value >= 0 ? 1 : -1;
        return showZero || ratio === 0 ? value / range : sign * (startPercent + ratio * (Math.abs(value) - minimum));
    };
    GridBarCalculator.prototype._calcMinMax = function () {
        var values = [];
        this._valueItems.forEach(function (item) {
            values.push(item.getValue());
        });
        this._min = Math.min.apply(Math, values);
        this._max = Math.max.apply(Math, values);
    };
    GridBarCalculator.prototype._calcRange = function () {
        var min = this._min, minAbs = Math.abs(min), max = this._max, maxAbs = Math.abs(max);
        this._range = Math.max(max - min, minAbs, maxAbs);
    };
    GridBarCalculator.prototype._calcZeroPosition = function () {
        var min = this._min, minAbs = Math.abs(min), max = this._max, range = this._range;
        if (min < 0)
            if (max < 0)
                this._zeroPosition = 1;
            else {
                this._zeroPosition = range !== 0 ? minAbs / range : 0;
            }
        else
            this._zeroPosition = 0;
    };
    GridBarCalculator.prototype._calcNormalizationData = function () {
        var range = this._range || 1, min = this._min, max = this._max, equalSign = (min < 0 && max < 0) || (min >= 0 && max >= 0), minAbs = Math.abs(min), maxAbs = Math.abs(max), minimum = Math.min(minAbs, maxAbs), maximum = Math.max(minAbs, maxAbs), delta = maximum - minimum, ratio = delta !== 0 ? (1 - startPercent) / delta : 0, showZero = !equalSign || this._alwaysShowZeroLevel || (equalSign && minimum / maximum <= startPercent);
        this._normalizationData = {
            showZero: showZero,
            minimum: minimum,
            ratio: ratio,
            range: range
        };
    };
    GridBarCalculator.prototype._initialize = function () {
        this._calcMinMax();
        this._calcRange();
        this._calcZeroPosition();
        this._calcNormalizationData();
        this._initialized = true;
    };
    return GridBarCalculator;
}());
exports.GridBarCalculator = GridBarCalculator;


/***/ }),
/* 394 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _data_controller_base_1 = __webpack_require__(48);
var imageDataController = (function (_super) {
    __extends(imageDataController, _super);
    function imageDataController(options) {
        var _this = _super.call(this, options) || this;
        _this._imageAxisPoints = _this._getImageAxisPoints();
        return _this;
    }
    imageDataController.prototype._getImageAxisPoints = function () {
        var that = this, multiData = that.multiData, viewModel = that.viewModel;
        return multiData ? multiData.getPointsByDimensionId(viewModel.ImageDimensionId) : null;
    };
    imageDataController.prototype.getImageData = function () {
        return this._imageAxisPoints && this._imageAxisPoints.length ? this._imageAxisPoints[0].getValue() : undefined;
    };
    return imageDataController;
}(_data_controller_base_1.dataControllerBase));
exports.imageDataController = imageDataController;


/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _formatter_1 = __webpack_require__(25);
var _chart_data_controller_base_1 = __webpack_require__(239);
var PieSettingsType = {
    SeriesOnly: 'SeriesOnly',
    ArgumentsOnly: 'ArgumentsOnly',
    ArgumentsAndSeries: 'ArgumentsAndSeries',
    ElementSelection: 'ElementSelection'
};
var pieDataController = (function (_super) {
    __extends(pieDataController, _super);
    function pieDataController(options) {
        var _this = _super.call(this, options) || this;
        if (_this.multiData && _this.viewModel) {
            _this._measures = _this.multiData ? _this.multiData.getMeasures() : [];
            _this._argumentAxisPoints = _this.getArgumentAxisPoints();
            if (_this.viewModel.ProvideValuesAsArguments) {
                _this.settingsType = PieSettingsType.SeriesOnly;
            }
            else if (!_this.viewModel.SummarySeriesMember) {
                _this.settingsType = PieSettingsType.ArgumentsOnly;
            }
            else if (_this.viewModel.ContentDescription && _this.viewModel.ContentDescription.ElementSelectionEnabled) {
                _this.settingsType = PieSettingsType.ElementSelection;
            }
            else {
                _this.settingsType = PieSettingsType.ArgumentsAndSeries;
            }
        }
        return _this;
    }
    pieDataController.prototype.getPointDisplayTexts = function (pointTag, value, percent) {
        var that = this, valueDataMember = pointTag.dataMembers[0], measure = this.multiData.getMeasureById(valueDataMember);
        return {
            argumentText: (this.settingsType === PieSettingsType.SeriesOnly) ? measure.name : that.getTitle(pointTag.axisPoint, '\n'),
            valueText: pointTag.valueText,
            percentText: _formatter_1.formatNumeric(percent, this.viewModel.PercentFormatViewModel)
        };
    };
    pieDataController.prototype.isDiscreteArgument = function () {
        return true;
    };
    pieDataController.prototype.createDataSource = function (seriesAxisPoint, valueDataMember) {
        var that = this, viewModel = that.viewModel, dataSource = [];
        if (that.settingsType === PieSettingsType.SeriesOnly) {
            var argumentAxisPoint = that._getArgumentAxis().getRootPoint();
            that._measures
                .filter(function (measure) { return viewModel.ValueDataMembers && viewModel.ValueDataMembers.indexOf(measure.id) !== -1; })
                .forEach(function (measure, index) {
                var dataMember = measure.id, valueInfo = that._getCrossSlice(argumentAxisPoint, seriesAxisPoint).getMeasureValue(dataMember);
                dataSource.push({
                    x: measure.name,
                    y: that._getCorrectZeroValue(valueInfo.getValue()),
                    tag: {
                        axisPoint: argumentAxisPoint,
                        dataMembers: [dataMember],
                        colorMeasureId: that._getColorDataMemberByIndex(index),
                        valueText: valueInfo.getDisplayText()
                    }
                });
            });
        }
        else {
            that._argumentAxisPoints.forEach(function (argumentAxisPoint) {
                var valueInfo = that._getCrossSlice(argumentAxisPoint, seriesAxisPoint).getMeasureValue(valueDataMember);
                dataSource.push({
                    x: that.getArgument(argumentAxisPoint),
                    y: that._getCorrectZeroValue(valueInfo.getValue()),
                    tag: {
                        axisPoint: argumentAxisPoint,
                        dataMembers: [valueDataMember],
                        colorMeasureId: that._getColorDataMemberByMeasureId(valueDataMember),
                        valueText: valueInfo.getDisplayText()
                    }
                });
            });
        }
        return dataSource;
    };
    pieDataController.prototype.getValueDataMembers = function () {
        var viewModel = this.viewModel;
        switch (this.settingsType) {
            case PieSettingsType.SeriesOnly:
                return ['SeriesOnlyInternalFakeValueDataMember'];
            case PieSettingsType.ArgumentsOnly:
            case PieSettingsType.ArgumentsAndSeries:
                return viewModel.ValueDataMembers;
            case PieSettingsType.ElementSelection:
                return [viewModel.ValueDataMembers[viewModel.ContentDescription.SelectedElementIndex]];
        }
    };
    pieDataController.prototype.getValueDisplayNames = function (seriesAxisPoint, valueDataMemberIndex) {
        var viewModel = this.viewModel;
        switch (this.settingsType) {
            case PieSettingsType.ArgumentsOnly:
                return viewModel.ValueDisplayNames[valueDataMemberIndex];
            case PieSettingsType.SeriesOnly:
            case PieSettingsType.ArgumentsAndSeries:
            case PieSettingsType.ElementSelection:
                return this.getTitle(seriesAxisPoint);
        }
    };
    pieDataController.prototype._getCorrectZeroValue = function (value) {
        return value === 0 || value == null ? null : Math.abs(value);
    };
    pieDataController.prototype._getColorDataMemberByMeasureId = function (valueDataMember) {
        var viewModel = this.viewModel;
        switch (this.settingsType) {
            case PieSettingsType.ArgumentsOnly:
                var index = viewModel.ValueDataMembers ? viewModel.ValueDataMembers.indexOf(valueDataMember) : -1;
                return this._getColorDataMemberByIndex(index);
            case PieSettingsType.ArgumentsAndSeries:
                return this._getColorDataMemberByIndex(0);
            case PieSettingsType.ElementSelection:
                return this._getColorDataMemberByIndex(viewModel.ContentDescription.SelectedElementIndex);
            default:
                return undefined;
        }
    };
    pieDataController.prototype._getColorDataMemberByIndex = function (index) {
        var colorDataMembers = this.viewModel.ColorDataMembers;
        return (colorDataMembers.length == 1) ? colorDataMembers[0] : colorDataMembers[index];
    };
    return pieDataController;
}(_chart_data_controller_base_1.chartDataControllerBase));
exports.pieDataController = pieDataController;


/***/ }),
/* 396 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _utils_1 = __webpack_require__(3);
var _geo_point_map_data_controller_base_1 = __webpack_require__(163);
var pieMapDataController = (function (_super) {
    __extends(pieMapDataController, _super);
    function pieMapDataController(options) {
        var _this = _super.call(this, options) || this;
        _this.elementCustomColor = options.elementCustomColor;
        return _this;
    }
    pieMapDataController.prototype.getPoint = function (index, valueIndex) {
        var point = _super.prototype.getPoint.call(this, index), multiData = this.multiData, viewModel = this.viewModel, filledValues = viewModel.Values && viewModel.Values.length > 0, axisPoint = this._getAxisPoint(index), argument, argumentDisplayText, value, valueDisplayText, valueId, colorId, colorValue;
        if (viewModel.ArgumentDataId) {
            argument = axisPoint.getUniqueValue();
            argumentDisplayText = axisPoint.getDisplayText();
            if (filledValues) {
                valueId = viewModel.Values[0];
                value = this._getMeasureValue(index, valueId);
                valueDisplayText = this._getMeasureDisplayText(index, valueId);
            }
            else {
                value = point.pointsCount > 1 ? point.pointsCount : 1;
            }
            colorId = viewModel.ColorIds[0];
            colorValue = viewModel.ColorByArgument ? this._getMeasureValue(index, colorId) : multiData.getMeasureValue(colorId).getValue();
        }
        else {
            valueId = viewModel.Values[valueIndex];
            argument = multiData.getMeasureById(valueId).name;
            argumentDisplayText = argument;
            value = this._getMeasureValue(index, valueId);
            valueDisplayText = this._getMeasureDisplayText(index, valueId);
            colorValue = multiData.getMeasureValue(viewModel.ColorIds[valueIndex]).getValue();
        }
        return _utils_1.deepExtend(point, {
            argument: argument,
            argumentDisplayText: argumentDisplayText,
            value: Math.abs(value),
            valueDisplayText: valueDisplayText,
            color: _utils_1.toColor(colorValue),
            valueId: valueId,
            axisPoint: axisPoint
        });
    };
    pieMapDataController.prototype._getAxisPointDimensionDescriptorId = function () {
        return this.viewModel.ArgumentDataId || this.viewModel.LongitudeDataId;
    };
    pieMapDataController.prototype.formatValue = function (value) {
        var measure;
        if (this.viewModel.Values.length > 0) {
            measure = this.multiData.getMeasureById(this.viewModel.Values[0]);
        }
        return measure ? measure.format(value) : value;
    };
    return pieMapDataController;
}(_geo_point_map_data_controller_base_1.geoPointMapDataControllerBase));
exports.pieMapDataController = pieMapDataController;


/***/ }),
/* 397 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var _array_utils_1 = __webpack_require__(49);
var _item_data_axis_names_1 = __webpack_require__(34);
var special_values_1 = __webpack_require__(39);
var _localization_ids_1 = __webpack_require__(21);
var _localizer_1 = __webpack_require__(16);
var _utils_1 = __webpack_require__(3);
var _data_controller_base_1 = __webpack_require__(48);
var GT_UNIQUE_PATH = 'GT';
var pivotDataController = (function (_super) {
    __extends(pivotDataController, _super);
    function pivotDataController(options) {
        var _this = _super.call(this, options) || this;
        _this._columnPointsHash = options.axisPointHash ? options.axisPointHash.columnPointsHash : {};
        _this._rowPointsHash = options.axisPointHash ? options.axisPointHash.rowPointsHash : {};
        _this._measureIds = _this._getMeasureIds();
        _this._collapseStateCache = {};
        _this._conditionalFormattingInfoCache = [];
        return _this;
    }
    pivotDataController.prototype._createAreaFields = function (list, area) {
        var result = [];
        if (list && list.length > 0) {
            $.each(list, function (i, elem) {
                result.push({ caption: elem.Caption, area: area });
            });
        }
        return result;
    };
    pivotDataController.prototype._getFields = function () {
        var viewModel = this.viewModel;
        if (!viewModel) {
            return undefined;
        }
        return this._createAreaFields(viewModel.Columns, 'column')
            .concat(this._createAreaFields(viewModel.Rows, 'row'))
            .concat(this._createAreaFields(viewModel.Values, 'data'));
    };
    pivotDataController.prototype.getDataSource = function (viewState, isColumn, path) {
        var that = this, columnHeaders = [], rowHeaders = [], values = [];
        if (that.multiData && !that.multiData.isEmpty()) {
            var columnRoot = path && isColumn ? that._getColumnAxis().getPointByUniqueValues(path) : that._getColumnAxis().getRootPoint(), rowRoot = path && !isColumn ? that._getRowAxis().getPointByUniqueValues(path) : that._getRowAxis().getRootPoint(), columnIndexHash = [], rowIndexHash = [], columnHash = {}, rowHash = {};
            that._prepareHierarchy(columnRoot, columnHeaders, columnIndexHash, columnHash, path && isColumn, viewState && viewState.columns || null, this.viewModel.AutoExpandColumnGroups);
            that._prepareHierarchy(rowRoot, rowHeaders, rowIndexHash, rowHash, path && !isColumn, viewState && viewState.rows || null, this.viewModel.AutoExpandRowGroups);
            that._columnPointsHash = __assign({}, that._columnPointsHash, columnHash);
            that._rowPointsHash = __assign({}, that._rowPointsHash, rowHash);
            values = that._prepareCells(columnIndexHash, rowIndexHash, !!path);
        }
        return {
            fields: that._getFields(),
            columns: columnHeaders,
            rows: rowHeaders,
            values: values
        };
    };
    pivotDataController.prototype.getStyleSettingsInfo = function (cellItem, collapseStateCache, conditionalFormattingInfoCache) {
        if (this.cfModel && this.cfModel.RuleModels.length !== 0) {
            var cellInfo = this._getCellInfo(cellItem), rules = this._getFormatRules(cellItem, cellInfo);
            this._collapseStateCache = collapseStateCache;
            this._conditionalFormattingInfoCache = conditionalFormattingInfoCache;
            return this._getStyleSettingsInfoCore(cellInfo, rules, _item_data_axis_names_1.itemDataAxisNames.pivotColumnAxis, _item_data_axis_names_1.itemDataAxisNames.pivotRowAxis);
        }
    };
    pivotDataController.prototype.getAxisPointsHash = function () {
        return {
            columnPointsHash: this._columnPointsHash,
            rowPointsHash: this._rowPointsHash
        };
    };
    pivotDataController.prototype._prepareHierarchy = function (root, headers, areaIndexHash, areaHash, isPartial, expandCollapsePaths, isCollapsePaths) {
        var index = 0, currentItem, iteratePoints = function (rootPoint, headers, point, areaIndexHash, areaHash, item) {
            var children = point.getChildren(), child;
            var isCollapsed = false;
            if (expandCollapsePaths) {
                var isPathsContainsPoint = expandCollapsePaths.some(function (expandedPath) { return _array_utils_1.arrayEquals(expandedPath, point.getUniquePath()); });
                if (isCollapsePaths) {
                    isCollapsed = isPathsContainsPoint;
                }
                else {
                    isCollapsed = !isPathsContainsPoint;
                }
            }
            var childrenProperty = isCollapsed ? 'collapsedChildren' : 'children';
            if (children && children.length > 0) {
                for (var i = 0; i < children.length; i++) {
                    child = children[i];
                    currentItem = {
                        index: index++,
                        value: child.getUniqueValue(),
                        displayText: child.getUniqueValue() === special_values_1.specialValues.olapNullValueGuid ? _localizer_1.localizer.getString(_localization_ids_1.localizationId.OlapRaggedHierarchyNoneItemCaption) : child.getDisplayText()
                    };
                    areaHash[child.getUniquePath()] = child;
                    areaIndexHash.push(child);
                    if (item) {
                        if (!item[childrenProperty])
                            item[childrenProperty] = [];
                        item[childrenProperty].push(currentItem);
                    }
                    iteratePoints(rootPoint, headers, child, areaIndexHash, areaHash, currentItem);
                }
            }
            if (point.getParent() === rootPoint)
                headers.push(item);
        };
        iteratePoints(root, headers, root, areaIndexHash, areaHash);
        if (!isPartial) {
            areaHash[GT_UNIQUE_PATH] = root;
            areaIndexHash.push(root);
        }
    };
    pivotDataController.prototype._getMeasureIds = function () {
        var measureIds = [];
        for (var i = 0; i < this.viewModel.Values.length; i++)
            measureIds.push(this.viewModel.Values[i].DataId);
        return measureIds;
    };
    pivotDataController.prototype._prepareCells = function (columnHash, rowHash, partial) {
        var cells = [], mddata = this.multiData, measureIds = this._measureIds, rowIndex = 0, columnIndex = 0, dataIndex = 0, displayValue, columnPoint, rowPoint, fillCell = function () {
            columnPoint = columnHash[columnIndex];
            rowPoint = rowHash[rowIndex];
            displayValue = mddata.getMeasureValueByAxisPoints(measureIds[dataIndex], [columnPoint, rowPoint]).getDisplayText();
            if (displayValue || !partial) {
                if (!cells[rowIndex])
                    cells[rowIndex] = [];
                if (!cells[rowIndex][columnIndex])
                    cells[rowIndex][columnIndex] = [];
                cells[rowIndex][columnIndex][dataIndex] = displayValue;
            }
        };
        for (rowIndex = 0; rowIndex < rowHash.length; rowIndex++) {
            for (columnIndex = 0; columnIndex < columnHash.length; columnIndex++) {
                for (dataIndex = 0; dataIndex < measureIds.length; dataIndex++)
                    fillCell();
            }
        }
        return cells;
    };
    pivotDataController.prototype._getColumnAxis = function () {
        return this.multiData.getAxis(_item_data_axis_names_1.itemDataAxisNames.pivotColumnAxis);
    };
    pivotDataController.prototype._getRowAxis = function () {
        return this.multiData.getAxis(_item_data_axis_names_1.itemDataAxisNames.pivotRowAxis);
    };
    pivotDataController.prototype._getCellInfo = function (cellItem) {
        var columnAxisPoint, rowAxisPoint;
        if (cellItem.area === _utils_1.pivotArea.column || cellItem.area === _utils_1.pivotArea.data)
            columnAxisPoint = this._getAxisPointByPath(this._columnPointsHash, cellItem.columnPath, cellItem.columnType);
        if (cellItem.area === _utils_1.pivotArea.row || cellItem.area === _utils_1.pivotArea.data)
            rowAxisPoint = this._getAxisPointByPath(this._rowPointsHash, cellItem.rowPath, cellItem.rowType);
        return {
            columnAxisPoint: columnAxisPoint,
            rowAxisPoint: rowAxisPoint
        };
    };
    pivotDataController.prototype._getStyleIndexes = function (rule, cellInfo, points) {
        var that = this, currentStyleIndexes, styleIndexes = [];
        if (rule.ApplyToRow) {
            currentStyleIndexes = that._findStyleSettingsOnAxis(cellInfo.rowAxisPoint, cellInfo.columnAxisPoint, rule.FormatConditionMeasureId, true);
            if (currentStyleIndexes.length > 0)
                styleIndexes = styleIndexes.concat(currentStyleIndexes);
        }
        if (rule.ApplyToColumn) {
            currentStyleIndexes = that._findStyleSettingsOnAxis(cellInfo.rowAxisPoint, cellInfo.columnAxisPoint, rule.FormatConditionMeasureId, false);
            if (currentStyleIndexes.length > 0)
                styleIndexes = styleIndexes.concat(currentStyleIndexes);
        }
        if (!rule.ApplyToRow && !rule.ApplyToColumn) {
            if (cellInfo.columnAxisPoint)
                points.push(cellInfo.columnAxisPoint);
            if (cellInfo.rowAxisPoint)
                points.push(cellInfo.rowAxisPoint);
            currentStyleIndexes = that._getMeasureValueByAxisPoints(points, rule.FormatConditionMeasureId);
            if (currentStyleIndexes)
                styleIndexes = styleIndexes.concat(currentStyleIndexes);
        }
        return styleIndexes;
    };
    pivotDataController.prototype._findStyleSettingsOnAxis = function (rowAxisPoint, columnAxisPoint, measureId, isRowAxis) {
        var that = this, currentStyleIndexes, styleIndexes = [], rowPoint = rowAxisPoint ? rowAxisPoint : this._getRowAxis().getRootPoint(), columnPoint = columnAxisPoint ? columnAxisPoint : this._getColumnAxis().getRootPoint(), slicePoint = isRowAxis ? rowPoint : columnPoint, intersectingRootPoint, slice, intersectingPoints = [], cfAxisPoint, conditionalFormattingInfo = {
            slicePoint: slicePoint,
            measureId: measureId,
            styleIndexes: [],
            toString: function () {
                return this.slicePoint.getUniquePath() + this.measureId;
            }
        }, iteratePoints = function (intersectingPoints, point) {
            var children = point.getChildren(), child, collapseState = point.getUniquePath().concat(isRowAxis ? 'column' : 'row'), cachedCollapseState = that._collapseStateCache[collapseState];
            if (cachedCollapseState === undefined) {
                intersectingPoints.push(point);
                if (children && children.length > 0) {
                    for (var i = 0; i < children.length; i++) {
                        child = children[i];
                        iteratePoints(intersectingPoints, child);
                    }
                }
            }
        };
        cfAxisPoint = this._conditionalFormattingInfoCache[conditionalFormattingInfo];
        if (cfAxisPoint)
            return cfAxisPoint.styleIndexes;
        slice = this.multiData.getSlice(slicePoint);
        intersectingRootPoint = isRowAxis ? this._getColumnAxis().getRootPoint() : this._getRowAxis().getRootPoint();
        iteratePoints(intersectingPoints, intersectingRootPoint);
        $.each(intersectingPoints, function (_, intersectingPoint) {
            var finalSlice = slice.getSlice(intersectingPoint), currentStyleIndexes = finalSlice.getConditionalFormattingMeasureValue(measureId);
            if (currentStyleIndexes)
                styleIndexes = styleIndexes.concat(currentStyleIndexes);
        });
        conditionalFormattingInfo.styleIndexes = styleIndexes;
        this._conditionalFormattingInfoCache[conditionalFormattingInfo] = conditionalFormattingInfo;
        return styleIndexes;
    };
    pivotDataController.prototype._getFormatRules = function (cellItem, cellInfo) {
        var that = this, dataId, rules = [];
        switch (cellItem.area) {
            case _utils_1.pivotArea.column:
                dataId = that._getPointId(cellInfo.columnAxisPoint);
                rules = rules.concat(that._getFormatRulesByDataId(dataId));
                break;
            case _utils_1.pivotArea.row:
                dataId = that._getPointId(cellInfo.rowAxisPoint);
                rules = rules.concat(that._getFormatRulesByDataId(dataId));
                break;
            default: {
                dataId = that._measureIds[cellItem.cellIndex];
                rules = $.grep(that.cfModel.RuleModels, function (rule) {
                    return rule.ApplyToRow || (that._isRowValuePosition() && rule.ApplyToColumn) || rule.ApplyToDataId === dataId;
                });
                break;
            }
        }
        return rules;
    };
    pivotDataController.prototype._isRowValuePosition = function () {
        return this.viewModel.ValuesPosition === 'Rows';
    };
    pivotDataController.prototype._getAxisPointByPath = function (pointsHash, path, type) {
        var correctedPath = path, axisPoint;
        if (type === GT_UNIQUE_PATH)
            correctedPath = GT_UNIQUE_PATH;
        axisPoint = pointsHash[correctedPath];
        if (!axisPoint)
            axisPoint = this._getColumnAxis().getPointByUniqueValues(path);
        return axisPoint;
    };
    pivotDataController.prototype._getFormatRulesByDataId = function (dataId) {
        var that = this, formatRules = [];
        if (that.cfModel) {
            $.each(that.cfModel.RuleModels, function (_, rule) {
                if (rule.ApplyToDataId === dataId) {
                    formatRules.push(rule);
                }
            });
        }
        return formatRules;
    };
    pivotDataController.prototype._getPointId = function (point) {
        var dimension, columnPointId;
        if (point) {
            dimension = point.getDimension();
            columnPointId = dimension ? dimension.id : undefined;
        }
        return columnPointId;
    };
    return pivotDataController;
}(_data_controller_base_1.dataControllerBase));
exports.pivotDataController = pivotDataController;


/***/ }),
/* 398 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var _chart_helper_1 = __webpack_require__(95);
var _localization_ids_1 = __webpack_require__(21);
var _localizer_1 = __webpack_require__(16);
var _chart_data_controller_proto_1 = __webpack_require__(165);
var rangeFilterDataController = (function (_super) {
    __extends(rangeFilterDataController, _super);
    function rangeFilterDataController(options) {
        return _super.call(this, options) || this;
    }
    rangeFilterDataController.prototype.getArgument = function (argumentAxisPoint) {
        if (argumentAxisPoint.getParent() != null) {
            return argumentAxisPoint.getValue();
        }
        else {
            return _localizer_1.localizer.getString(_localization_ids_1.localizationId.ChartTotalValue);
        }
    };
    rangeFilterDataController.prototype._iterateSeriesTemplates = function (proc) {
        $.each(this.viewModel.SeriesTemplates, function (_, seriesTemplate) {
            proc(undefined, seriesTemplate);
        });
    };
    rangeFilterDataController.prototype._isSelectionTagsRequired = function () {
        return false;
    };
    rangeFilterDataController.prototype._getLastSeriesType = function (colorMeasureId) {
        var seriesTemplates = this.viewModel.SeriesTemplates;
        for (var i = seriesTemplates.length - 1; i >= 0; i--) {
            if (colorMeasureId === seriesTemplates[i].ColorMeasureID) {
                return _chart_helper_1.chartHelper.convertSeriesType(seriesTemplates[i].SeriesType);
            }
        }
    };
    rangeFilterDataController.prototype.showPointLabels = function (pointLabelInfo) {
        return false;
    };
    rangeFilterDataController.prototype.getArgumentBindingValue = function (argumentPoint, pointIndex) {
        return argumentPoint.getValue();
    };
    return rangeFilterDataController;
}(_chart_data_controller_proto_1.chartDataControllerProto));
exports.rangeFilterDataController = rangeFilterDataController;


/***/ }),
/* 399 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var _render_helper_1 = __webpack_require__(28);
var _formatter_1 = __webpack_require__(25);
var _utils_1 = __webpack_require__(3);
var _chart_data_controller_proto_1 = __webpack_require__(165);
var scatterChartDataController = (function (_super) {
    __extends(scatterChartDataController, _super);
    function scatterChartDataController(options) {
        return _super.call(this, options) || this;
    }
    scatterChartDataController.prototype.getArgument = function (argumentAxisPoint) {
        var measureId = this.viewModel.AxisXDataMember, slice = this.multiData.getSlice(argumentAxisPoint);
        return slice.getMeasureValue(measureId).getValue();
    };
    scatterChartDataController.prototype.getArgumentBindingValue = function (argumentPoint, pointIndex) {
        return this.getArgument(argumentPoint);
    };
    scatterChartDataController.prototype.getArgumentDisplayPath = function (axisPoint) {
        return axisPoint.getDisplayPath().reverse().join(', ');
    };
    scatterChartDataController.prototype.getArgumentFormat = function () {
        return this.multiData && this.multiData.getMeasureFormat(this.viewModel.AxisXDataMember);
    };
    scatterChartDataController.prototype.getArgumentText = function (argument) {
        if (this.viewModel.AxisXPercentValues)
            return _formatter_1.formatPercentValue(argument.value);
        if (this.viewModel.AxisXScientificValues)
            return _formatter_1.formatScientificAxisValue(argument.value);
        return _formatter_1.formatAxisValue(argument.value, argument.min, argument.max);
    };
    scatterChartDataController.prototype._getTooltipHtml = function (series, point, seriesFormats, encodeHtml, color) {
        var that = this, html = '', text, slice = that.multiData.getSlice(point.tag.axisPoint), measureIds = that._getMeasureIds();
        $.each(measureIds, function (index, measureId) {
            text = that.multiData.getMeasureById(measureId).name + ': ' + slice.getMeasureValue(measureId).getDisplayText();
            text = encodeHtml ? _utils_1.encodeHtml(text) : text;
            html += '<tr><td>' + (color && index === 0 ? _render_helper_1.RenderHelper.rectangle(color, 10, 10) : '') + '&nbsp;</td><td>' + text + '</td></tr>';
        });
        return '<table>' + html + '</table>';
    };
    scatterChartDataController.prototype._getMeasureIds = function () {
        var measureIds = [];
        measureIds.push(this.viewModel.AxisXDataMember);
        $.each(this.viewModel.Panes[0].SeriesTemplates[0].DataMembers, function (_, measureId) {
            measureIds.push(measureId);
        });
        return measureIds;
    };
    scatterChartDataController.prototype.getTooltipArgumentText = function (obj) {
        return this._getTooltipArgumentText(obj.point.tag.axisPoint);
    };
    scatterChartDataController.prototype._getTooltipArgumentText = function (axisPoint) {
        var axisName = axisPoint.getAxisName();
        if (this.drillDownState[axisName]) {
            return axisPoint.getDisplayText();
        }
        else {
            return this.getArgumentDisplayPath(axisPoint);
        }
    };
    scatterChartDataController.prototype._customizePointLabelText = function (valueContainer, pointLabel, seriesInfo) {
        var that = this, axisPoint = valueContainer.point.tag.axisPoint, argument = function () {
            return that._getTooltipArgumentText(axisPoint);
        }, weight = function () {
            var dataMembers = that.viewModel.Panes[0].SeriesTemplates[0].DataMembers;
            if (dataMembers.length > 1) {
                var measureId = dataMembers[1];
                var slice = that.multiData.getSlice(axisPoint);
                return slice.getMeasureValue(measureId).getDisplayText();
            }
            return null;
        }, values = function () {
            var text = '', measureIds = that._getMeasureIds(), slice = that.multiData.getSlice(axisPoint);
            $.each(measureIds, function (index, measureId) {
                text += (index > 0 ? ' - ' : '') + slice.getMeasureValue(measureId).getDisplayText();
            });
            return text;
        };
        switch (pointLabel.scatterContent) {
            case 'Argument':
                return argument();
            case 'Weight':
                return weight();
            case 'Values':
                return values();
            case 'ArgumentAndWeight':
                return argument() + ': ' + weight();
            case 'ArgumentAndValues':
                return argument() + ': ' + values();
            default:
                return null;
        }
    };
    scatterChartDataController.prototype.isQualitativeArgument = function () {
        return false;
    };
    scatterChartDataController.prototype.isDiscreteArgument = function () {
        return false;
    };
    scatterChartDataController.prototype.showPointLabels = function (pointLabelInfo) {
        return pointLabelInfo && pointLabelInfo.showPointLabels;
    };
    return scatterChartDataController;
}(_chart_data_controller_proto_1.chartDataControllerProto));
exports.scatterChartDataController = scatterChartDataController;


/***/ }),
/* 400 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var _data_controller_base_1 = __webpack_require__(48);
var textItemDataController = (function (_super) {
    __extends(textItemDataController, _super);
    function textItemDataController(options) {
        var _this = _super.call(this, options) || this;
        _this.displayTexts = {};
        _this._initialize();
        return _this;
    }
    textItemDataController.prototype._initialize = function () {
        var that = this, multiData = that.multiData;
        multiData && $.each(multiData.getMeasures(), function (_, measure) {
            that.displayTexts[measure.id] = multiData.getMeasureValue(measure.id).getDisplayText();
        });
    };
    textItemDataController.prototype.getDisplayText = function (id) {
        return this.displayTexts[id];
    };
    return textItemDataController;
}(_data_controller_base_1.dataControllerBase));
exports.textItemDataController = textItemDataController;


/***/ }),
/* 401 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var string_1 = __webpack_require__(30);
var $ = __webpack_require__(2);
var special_values_1 = __webpack_require__(39);
var _formatter_1 = __webpack_require__(25);
var _localization_ids_1 = __webpack_require__(21);
var _localizer_1 = __webpack_require__(16);
var _utils_1 = __webpack_require__(3);
var _data_controller_base_1 = __webpack_require__(48);
var treemapDataController = (function (_super) {
    __extends(treemapDataController, _super);
    function treemapDataController(options) {
        var _this = _super.call(this, options) || this;
        _this.elementCustomColor = options.elementCustomColor;
        _this._prepare();
        return _this;
    }
    treemapDataController.prototype._prepare = function () {
        var multiData = this.multiData;
        if (multiData) {
            var dimensions = multiData.getDimensions();
            this.last_dimension_id = dimensions.length > 0 ? dimensions[dimensions.length - 1].id : null;
        }
        this.nodeHash = {};
    };
    treemapDataController.prototype.getDataSource = function () {
        var that = this, dataSource = [], viewModel = that.viewModel, multiData = that.multiData, measureIndex = 0, contentDescription = viewModel.ContentDescription, measure, measureValue, elementColor, valueId;
        if (viewModel.ProvideValuesAsArguments) {
            for (var i = 0; i < viewModel.ValueDataMembers.length; i++) {
                valueId = viewModel.ValueDataMembers[i];
                measure = multiData.getMeasureById(valueId);
                measureValue = multiData.getMeasureValue(valueId);
                elementColor = _utils_1.toColor(multiData.getMeasureValue(viewModel.ColorDataMembers[i]).getValue());
                elementColor = that._getElementCustomColor(multiData.getAxis().getRootPoint(), elementColor, valueId);
                dataSource.push({
                    name: measure.name,
                    value: measureValue.getValue(),
                    valueText: measureValue.getDisplayText(),
                    color: elementColor
                });
            }
            if (viewModel.LayoutAlgorithm === 'SliceAndDice') {
                dataSource.sort(function (a, b) {
                    return b.value - a.value;
                });
            }
        }
        else {
            if (contentDescription != null && contentDescription.ElementSelectionEnabled)
                measureIndex = contentDescription.SelectedElementIndex;
            if (viewModel.ValueDataMembers.length > 0) {
                var root = multiData.getAxis().getRootPoint();
                dataSource = that._getChildren(root, measureIndex, viewModel.GroupArgumentDataMembers, null);
            }
        }
        return dataSource;
    };
    treemapDataController.prototype.getLabel = function (node, encodeHtml) {
        if (encodeHtml === void 0) { encodeHtml = true; }
        var viewModel = this.viewModel;
        return this._getNodeText(node, viewModel.TilesLabelContentType, viewModel.GroupsLabelContentType, encodeHtml);
    };
    treemapDataController.prototype.getTooltip = function (node, encodeHtml) {
        if (encodeHtml === void 0) { encodeHtml = true; }
        var viewModel = this.viewModel;
        return this._getNodeText(node, viewModel.TilesTooltipContentType, viewModel.GroupsTooltipContentType, encodeHtml);
    };
    treemapDataController.prototype.getChildrenNodesUniqueValues = function (value) {
        var node = this.nodeHash[value], res = [];
        this._fillChildrenNodesUniqueValues(res, node);
        return res;
    };
    treemapDataController.prototype._fillChildrenNodesUniqueValues = function (res, node) {
        if (node.items) {
            for (var i = 0; i < node.items.length; i++) {
                this._fillChildrenNodesUniqueValues(res, node.items[i]);
            }
        }
        else
            res.push(node.uniqueValue);
    };
    treemapDataController.prototype._getChildren = function (currentPoint, measureIndex, groupArgumentDataMembers, prevArgumentDataMember) {
        var that = this, viewModel = that.viewModel, items = [], currentArgumentDataMember = groupArgumentDataMembers[0], points, recoveredGroupArgumentDataMembers, node;
        if (groupArgumentDataMembers.length > 1) {
            recoveredGroupArgumentDataMembers = [];
            for (var i = 1; i < groupArgumentDataMembers.length; i++) {
                recoveredGroupArgumentDataMembers.push(groupArgumentDataMembers[i]);
            }
            points = currentPoint.getPointsByDimensionId(currentArgumentDataMember);
            $.each(points, function (__, point) {
                node = that._createNode(point, measureIndex, prevArgumentDataMember);
                node.items = that._getChildren(point, measureIndex, recoveredGroupArgumentDataMembers, currentArgumentDataMember);
                items.push(node);
            });
        }
        else {
            points = currentPoint.getPointsByDimensionId(that.last_dimension_id);
            $.each(points, function (__, point) {
                node = that._createNode(point, measureIndex, prevArgumentDataMember);
                node.color = that._getColor(point, measureIndex);
                items.push(node);
            });
        }
        return items;
    };
    treemapDataController.prototype._createNode = function (point, measureIndex, prevArgumentDataMember) {
        var viewModel = this.viewModel, multiData = this.multiData, valueDataMember = viewModel.ValueDataMembers[measureIndex], measureValue = multiData.getSlice(point).getMeasureValue(valueDataMember), uniqueValue = point.getUniquePath(), node = {
            name: this._getArgumentString(point, prevArgumentDataMember),
            value: measureValue.getValue(),
            valueText: measureValue.getDisplayText(),
            uniqueValue: uniqueValue,
            format: function (value) {
                return _formatter_1.format(value, multiData.getMeasureFormat(valueDataMember));
            }
        };
        this.nodeHash[node.uniqueValue] = node;
        return node;
    };
    treemapDataController.prototype._getNodeText = function (node, tileType, groupType, encodeHtml) {
        if (node.isLeaf()) {
            return this._getTextByContentType(tileType, node.data.name, node.data.valueText, encodeHtml);
        }
        else {
            return this._getTextByContentType(groupType, node.data.name, node.data.format(node.value()), encodeHtml);
        }
    };
    treemapDataController.prototype._getTextByContentType = function (contentType, argumentText, valueText, encodeHtml) {
        var argumentEncoded = encodeHtml ? _utils_1.encodeHtml(argumentText) : argumentText;
        var valueEncoded = encodeHtml ? _utils_1.encodeHtml(valueText) : valueText;
        switch (contentType) {
            case 'Argument':
                return argumentEncoded;
            case 'ArgumentAndValue':
                return string_1.format(_localizer_1.localizer.getString(_localization_ids_1.localizationId.TreemapLabelValueTemplate), argumentEncoded, valueEncoded);
            case 'Value':
                return valueEncoded;
        }
    };
    treemapDataController.prototype._getArgumentString = function (point, prevArgumentDataMember) {
        var argumentString, path = point.getAxisPath(), dimension;
        if (this.drillDownState[point.getAxisName()]) {
            return point.getDisplayText();
        }
        for (var i = path.length - 1; i >= 0; i--) {
            dimension = path[i].getDimension();
            if (prevArgumentDataMember && dimension && dimension.id === prevArgumentDataMember)
                break;
            if (path[i].getUniqueValue() !== special_values_1.specialValues.olapNullValueGuid) {
                if (argumentString) {
                    argumentString = string_1.format(_localizer_1.localizer.getString(_localization_ids_1.localizationId.TreemapLabelArgumentTemplate), path[i].getDisplayText(), argumentString);
                }
                else {
                    argumentString = path[i].getDisplayText();
                }
            }
        }
        return argumentString;
    };
    treemapDataController.prototype._getColor = function (point, measureIndex) {
        var that = this, viewModel = that.viewModel, multiData = that.multiData, colorId = viewModel.ColorDataMembers[measureIndex], color;
        if (viewModel.ColorArgument) {
            var colorPoint = point.getParentByDimensionId(viewModel.ColorArgument);
            multiData = multiData.getSlice(colorPoint);
        }
        color = _utils_1.toColor(multiData.getMeasureValue(colorId).getValue());
        return that._getElementCustomColor(point, color, viewModel.ValueDataMembers[measureIndex]);
    };
    treemapDataController.prototype._getElementCustomColor = function (point, color, valueId) {
        var that = this, viewModel = that.viewModel, newColor;
        if (that.elementCustomColor && color) {
            var customElementColorEventArgs = {
                targetElement: [point],
                measureIds: [valueId],
                color: color
            };
            that.elementCustomColor(customElementColorEventArgs);
            newColor = customElementColorEventArgs.color;
            if (!newColor.colorIsInvalid && newColor !== color) {
                return newColor;
            }
        }
        return color;
    };
    return treemapDataController;
}(_data_controller_base_1.dataControllerBase));
exports.treemapDataController = treemapDataController;


/***/ }),
/* 402 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var _utils_1 = __webpack_require__(3);
var dataSlice = (function () {
    function dataSlice(sliceKey, sliceDTO, decode, encode) {
        var keyIndexById = {}, valueIdByKey = {};
        $.each(sliceDTO.KeyIds, function (i, keyId) {
            keyIndexById[keyId] = i;
        });
        $.each(sliceDTO.ValueIds, function (valueId, key) {
            valueIdByKey[key] = valueId;
        });
        this._sliceKey = sliceKey;
        this._sliceDTO = sliceDTO;
        this._decode = decode;
        this._encode = encode;
        this._keyIndexById = keyIndexById;
        this._valueIdByKey = valueIdByKey;
    }
    dataSlice.prototype.getRowCount = function () {
        return Object.keys(this._sliceDTO.Data).length;
    };
    dataSlice.prototype.getKey = function () {
        return this._sliceKey;
    };
    dataSlice.prototype.getValue = function (rowKey, valueId) {
        var that = this, dto = that._sliceDTO, valueKey = dto.ValueIds[valueId], rowDTO = that._getRowDTO(rowKey), value = !!rowDTO && valueKey >= 0 ? rowDTO[valueKey] : null;
        return value === undefined ? null : value;
    };
    dataSlice.prototype.getRowValues = function (rowKey) {
        var that = this, values = {}, valueIdsByKey = that._valueIdByKey, rowDTO = that._getRowDTO(rowKey);
        $.each(rowDTO, function (key, value) {
            values[valueIdsByKey[key]] = value;
        });
        return values;
    };
    dataSlice.prototype.getRowKeyValues = function (rowKey) {
        var that = this, keyIds = that.getKeyIds(), keyValues = {};
        $.each(keyIds, function (_, keyId) {
            keyValues[keyId] = that.getKeyValue(rowKey, keyId);
        });
        return keyValues;
    };
    dataSlice.prototype._getRowDTO = function (rowKey) {
        var that = this;
        return that._sliceDTO.Data[that._stringifyKey(rowKey)];
    };
    dataSlice.prototype.getKeyValue = function (rowKey, keyId) {
        if (keyId === undefined)
            return null;
        var that = this, keyIndex = that._keyIndexById[keyId];
        return that._decode(keyId, rowKey[keyIndex]);
    };
    dataSlice.prototype.getKeyIds = function () {
        var that = this;
        return that._sliceDTO.KeyIds;
    };
    dataSlice.prototype.getValueIds = function () {
        return Object.keys(this._sliceDTO.ValueIds);
    };
    dataSlice.prototype.forEach = function (action) {
        var that = this;
        $.each(that._sliceDTO.Data, function (key) {
            return action({
                sliceKey: that._sliceKey,
                rowKey: that._parseKey(key)
            });
        });
    };
    dataSlice.prototype.append = function (slice) {
        var that = this, newRowKeys = [], iterator = {
            forEach: function (action) {
                $.each(newRowKeys, function (_, key) {
                    action({
                        sliceKey: that._sliceKey,
                        rowKey: key
                    });
                });
            }
        };
        slice.forEach(function (key) {
            var keyValues = slice.getRowKeyValues(key.rowKey), values = slice.getRowValues(key.rowKey), newRowKey = that.addRow(keyValues, values);
            newRowKeys.push(newRowKey);
        });
        return iterator;
    };
    dataSlice.prototype.addRow = function (keyValues, values) {
        var that = this, newRowKey = [], valueIds = that._sliceDTO.ValueIds, encode = that._encode;
        $.each(keyValues, function (keyId, keyValue) {
            newRowKey.push(encode(keyId, keyValue));
        });
        var valueDTO = {};
        $.each(values, function (valueId, value) {
            var valueKey = valueIds[valueId];
            if (valueKey === undefined) {
                var count = 0;
                $.each(valueIds, function () {
                    count++;
                });
                valueKey = count;
                valueIds[valueId] = valueKey;
            }
            valueDTO[valueKey] = value;
        });
        that._sliceDTO.Data[that._stringifyKey(newRowKey)] = valueDTO;
        return newRowKey;
    };
    dataSlice.prototype._parseKey = function (key) {
        return JSON.parse(key);
    };
    dataSlice.prototype._stringifyKey = function (key) {
        return '[' + key + ']';
    };
    return dataSlice;
}());
exports.dataSlice = dataSlice;
var sliceRepository = (function () {
    function sliceRepository(sliceListDTO, decode, encode) {
        this._sliceListDTO = sliceListDTO;
        this._sliceList = [];
        this._rowKeyConvertMap = {};
        this._sliceJoinCache = {};
        this._decode = decode;
        this._encode = encode;
        this._initialize(decode);
    }
    sliceRepository.prototype._initialize = function (decode) {
        var that = this;
        if (!that._sliceListDTO)
            return;
        $.each(that._sliceListDTO, function (index, sliceDTO) {
            var slice = new dataSlice(index, sliceDTO, decode, that._encode);
            that._sliceList.push(slice);
        });
    };
    sliceRepository.prototype.getAll = function () {
        return this._sliceList;
    };
    sliceRepository.prototype.getKey = function (keyIds) {
        var slice = this._getByKeyIds(keyIds);
        return slice ? this._sliceList.indexOf(slice) : -1;
    };
    sliceRepository.prototype.get = function (vsKey) {
        return this._sliceList[vsKey];
    };
    sliceRepository.prototype.getOrCreate = function (keyIds) {
        var that = this, slice = that._getByKeyIds(keyIds);
        if (!slice) {
            var sliceDTO = {
                KeyIds: keyIds,
                ValueIds: {},
                Data: {}
            };
            if (keyIds.length == 0) {
                sliceDTO.Data['[]'] = {};
            }
            slice = new dataSlice(that._sliceList.length, sliceDTO, that._decode, that._encode);
            that._sliceList.push(slice);
        }
        return slice;
    };
    sliceRepository.prototype.findDataRowKey = function (sliceKey, dataRowKey) {
        var that = this, newRowKey = [], map = that._getConvertMap(dataRowKey.sliceKey, sliceKey);
        for (var i = 0; i < map.length; i++) {
            newRowKey.push(dataRowKey.rowKey[map[i]]);
        }
        return {
            sliceKey: sliceKey,
            rowKey: newRowKey
        };
    };
    sliceRepository.prototype.getCrossValue = function (dataRows, valueId) {
        var that = this, dataRow1 = dataRows[0], dataRow2 = dataRows[1], sliceKey, value = null;
        if (!dataRow1)
            sliceKey = 0;
        else
            sliceKey = dataRow2 ? that._joinSliceKey(dataRow1.sliceKey, dataRow2.sliceKey) : dataRow1.sliceKey;
        if (sliceKey >= 0) {
            var newRowKey = [], map1 = null, map2 = null;
            if (dataRow1) {
                map1 = that._getConvertMap(dataRow1.sliceKey, sliceKey),
                    map2 = dataRow2 ? that._getConvertMap(dataRow2.sliceKey, sliceKey) : null;
                for (var i = 0; i < map1.length; i++) {
                    var index = map1[i], key = index >= 0 ? dataRow1.rowKey[index] : newRowKey[i];
                    newRowKey.push(key);
                }
                if (map2 != null) {
                    for (var i = 0; i < map2.length; i++) {
                        var index = map2[i], key = index >= 0 ? dataRow2.rowKey[index] : newRowKey[i];
                        newRowKey[i] = key;
                    }
                }
            }
            var slice = that.get(sliceKey);
            if (slice)
                value = slice.getValue(newRowKey, valueId);
        }
        return value;
    };
    sliceRepository.prototype.getKeyValue = function (dataRow, keyId) {
        var that = this, slice = that.get(dataRow.sliceKey), value = null;
        if (slice) {
            value = slice.getKeyValue(dataRow.rowKey, keyId);
        }
        return value;
    };
    sliceRepository.prototype.getValue = function (dataRow, valueId) {
        var that = this, slice = that.get(dataRow.sliceKey), value = null;
        if (slice) {
            value = slice.getValue(dataRow.rowKey, valueId);
        }
        return value;
    };
    sliceRepository.prototype.isEmpty = function () {
        return this._sliceList.filter(function (s) {
            if (s.getKeyIds().length === 0) {
                var values = s.getRowValues([]);
                return s.getValueIds().filter(function (id) { return values[id] !== null && values[id] !== undefined; }).length !== 0;
            }
            else {
                return s.getRowCount() !== 0;
            }
        }).length === 0;
    };
    sliceRepository.prototype._joinSliceKey = function (key1, key2) {
        var that = this, joinSliceCacheKey = [key1, key2];
        if (key2 < key1)
            joinSliceCacheKey = joinSliceCacheKey.reverse();
        var joinRes = that._sliceJoinCache[joinSliceCacheKey];
        if (joinRes == undefined) {
            var slice1 = that.get(key1), slice2 = that.get(key2), keyIds = slice1.getKeyIds().concat(slice2.getKeyIds());
            joinRes = that.getKey(keyIds);
            that._sliceJoinCache[joinSliceCacheKey] = joinRes;
        }
        return joinRes;
    };
    sliceRepository.prototype._getByKeyIds = function (keyIds) {
        var that = this, foundSlice = null;
        $.each(that._sliceList, function (_, slice) {
            if (_utils_1.areNotOrderedListsEqual(slice.getKeyIds(), keyIds)) {
                foundSlice = slice;
                return false;
            }
        });
        return foundSlice;
    };
    sliceRepository.prototype._getConvertMap = function (sliceFromKey, sliceToKey) {
        var that = this, convertMapCacheKey = [sliceFromKey, sliceToKey];
        var map = that._rowKeyConvertMap[convertMapCacheKey];
        if (!map) {
            var fromSlice = that.get(sliceFromKey), toSlice = that.get(sliceToKey);
            map = [];
            $.each(toSlice.getKeyIds(), function (_, keyId) {
                map.push(fromSlice.getKeyIds().indexOf(keyId));
            });
            that._rowKeyConvertMap[convertMapCacheKey] = map;
        }
        return map;
    };
    return sliceRepository;
}());
exports.sliceRepository = sliceRepository;


/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var _data_slice_1 = __webpack_require__(402);
var dataStorage = (function () {
    function dataStorage(dto) {
        this._sliceRep = this._createSliceRep(dto);
    }
    dataStorage.prototype._createSliceRep = function (dto) {
        var decodeMaps = dto.EncodeMaps, encodeMaps = {}, encodeCounters = {}, sliceListDTO = dto.Slices, decode = function (keyId, key) {
            return decodeMaps[keyId][key];
        }, encode = function (keyId, value) {
            var map = encodeMaps[keyId];
            if (!map) {
                map = {};
                var decodeMap = decodeMaps[keyId];
                if (!decodeMap) {
                    decodeMap = [];
                    decodeMaps[keyId] = decodeMap;
                }
                encodeCounters[keyId] = decodeMap.length;
                $.each(decodeMap, function (index, value) {
                    map[value] = index;
                });
                encodeMaps[keyId] = map;
            }
            var code = map[value];
            if (code === undefined) {
                var counter = encodeCounters[keyId];
                map[value] = counter;
                encodeCounters[keyId] = ++counter;
                decodeMaps[keyId].push(value);
            }
            return map[value];
        };
        return new _data_slice_1.sliceRepository(sliceListDTO, decode, encode);
    };
    dataStorage.prototype._initialize = function () {
    };
    dataStorage.prototype.getSlices = function () {
        return this._sliceRep.getAll();
    };
    dataStorage.prototype.getSlice = function (sliceKey) {
        return this._sliceRep.get(sliceKey);
    };
    dataStorage.prototype.getSliceKey = function (keyIds) {
        return this._sliceRep.getKey(keyIds);
    };
    dataStorage.prototype.getSliceByIds = function (keyIds) {
        return this._sliceRep._getByKeyIds(keyIds);
    };
    dataStorage.prototype.getOrCreateSlice = function (keyIds) {
        return this._sliceRep.getOrCreate(keyIds);
    };
    dataStorage.prototype.findDataRowKey = function (sliceKey, dataRowKey) {
        return this._sliceRep.findDataRowKey(sliceKey, dataRowKey);
    };
    dataStorage.prototype.getCrossValue = function (dataRowKeys, valueId) {
        return this._sliceRep.getCrossValue(dataRowKeys, valueId);
    };
    dataStorage.prototype.getKeyValue = function (dataRow, keyId) {
        return this._sliceRep.getKeyValue(dataRow, keyId);
    };
    dataStorage.prototype.getValue = function (dataRow, valueId) {
        return this._sliceRep.getValue(dataRow, valueId);
    };
    dataStorage.prototype.isEmpty = function () {
        return this._sliceRep.isEmpty();
    };
    dataStorage.prototype.insert = function (ds, sortOrderSlices) {
        var that = this, slices = ds.getSlices(), iterators = {};
        $.each(slices, function (i, slice) {
            var keyIds = slice.getKeyIds();
            var ownSlice = that.getOrCreateSlice(keyIds);
            iterators[ownSlice.getKey()] = ownSlice.append(slice);
        });
        return iterators;
    };
    return dataStorage;
}());
exports.dataStorage = dataStorage;


/***/ }),
/* 404 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _list_source_1 = __webpack_require__(405);
var DrillThroughDataWrapper = (function () {
    function DrillThroughDataWrapper(drillThroughData) {
        this._drillThroughData = drillThroughData;
    }
    DrillThroughDataWrapper.prototype.initialize = function () {
        var that = this;
        that._errorMessage = this._drillThroughData.ErrorMessage;
        if (that.isDataReceived()) {
            that._data = {};
            that._data.dataMembers = that._drillThroughData.DataMembers;
            that._data.displayNames = that._drillThroughData.DataMembersDisplayNames;
            that._data.listSource = new _list_source_1.listSource(that._drillThroughData.Data, that._data.dataMembers);
        }
    };
    DrillThroughDataWrapper.prototype.getRowCount = function () {
        return this._data.listSource.getRowCount();
    };
    DrillThroughDataWrapper.prototype.getRowValue = function (rowIndex, columnName) {
        return this._data.listSource.getRowValue(rowIndex, columnName);
    };
    DrillThroughDataWrapper.prototype.getDataMembers = function () {
        return this._data.dataMembers;
    };
    DrillThroughDataWrapper.prototype.getDisplayNames = function () {
        return this._data.data.displayNames;
    };
    DrillThroughDataWrapper.prototype.isDataReceived = function () {
        return this._drillThroughData && this._drillThroughData.Data != null;
    };
    DrillThroughDataWrapper.prototype.getRequestDataError = function () {
        return this._errorMessage;
    };
    return DrillThroughDataWrapper;
}());
exports.DrillThroughDataWrapper = DrillThroughDataWrapper;


/***/ }),
/* 405 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _formatter_1 = __webpack_require__(25);
var listSource = (function () {
    function listSource(dataSource, dataMembers) {
        this.dataSource = this._wrapIfRequired(dataSource, dataMembers);
        this.dataMembers = dataMembers;
        if (this.dataSource && this.dataMembers) {
            this.rowCount = this.dataSource.length;
            this.columnCount = this.dataMembers.length;
        }
        else {
            this.dataSource = [];
            this.dataMembers = [];
            this.rowCount = 0;
            this.columnCount = 0;
        }
    }
    listSource.prototype._wrapIfRequired = function (dataSource, dataMembers) {
        var dataRow, dataSourceWrapper = [], isWrapRequired = dataSource && dataSource.length > 0 && Array.isArray(dataSource) && Array.isArray(dataSource[0]);
        if (isWrapRequired) {
            for (var i = 0; i < dataSource.length; i++) {
                dataRow = dataSource[i];
                if (dataMembers && dataRow && dataRow.length === dataMembers.length) {
                    dataSourceWrapper[i] = {};
                    for (var j = 0; j < dataRow.length; j++) {
                        dataSourceWrapper[i][dataMembers[j]] = dataRow[j];
                    }
                }
                else {
                    isWrapRequired = false;
                    break;
                }
            }
        }
        return isWrapRequired ? dataSourceWrapper : dataSource;
    };
    listSource.prototype.getRowValue = function (rowIndex, dataMember) {
        return this.dataSource[rowIndex][dataMember];
    };
    listSource.prototype.getFormattedRowValue = function (rowIndex, dataMember, formatInfo) {
        var value = this.getRowValue(rowIndex, dataMember);
        return _formatter_1.formatNumeric(value, formatInfo);
    };
    listSource.prototype.getFormattedArgumentRowValue = function (rowIndex, dataMember, formatInfo) {
        var value = this.getRowValue(rowIndex, dataMember);
        return _formatter_1.format(value, formatInfo);
    };
    listSource.prototype.getColumnIndex = function (dataMember) {
        return this.dataMembers.indexOf(dataMember);
    };
    listSource.prototype.getRowCount = function () {
        return this.rowCount;
    };
    return listSource;
}());
exports.listSource = listSource;


/***/ }),
/* 406 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var _item_data_axis_names_1 = __webpack_require__(34);
var _data_storage_1 = __webpack_require__(403);
var _item_data_1 = __webpack_require__(407);
var _item_data_axis_builder_1 = __webpack_require__(241);
var _item_data_axis_helper_1 = __webpack_require__(167);
var _item_meta_data_1 = __webpack_require__(242);
var itemDataManager = (function () {
    function itemDataManager() {
    }
    itemDataManager.prototype.initialize = function (itemDataDTO) {
        var metaData = this._createMetaData(itemDataDTO.MetaData), dataStorage = new _data_storage_1.dataStorage(itemDataDTO.DataStorageDTO), items = {};
        $.each(metaData.getAxes(), function (name, dimensions) {
            items[name] = _item_data_axis_builder_1.itemDataAxisBuilder.build(name, dataStorage, dimensions, itemDataDTO.SortOrderSlices, metaData);
        });
        this._dataStorage = dataStorage;
        this._metaData = metaData;
        this._itemData = new _item_data_1.itemData({
            metaData: metaData,
            storage: dataStorage
        }, items);
        this._items = items;
    };
    itemDataManager.prototype.updateExpandedData = function (expandedItemDataDTO, expandInfo) {
        var that = this, areaNames = _item_data_axis_names_1.itemDataAxisNames, sortOrderSlices = expandedItemDataDTO.SortOrderSlices, area = expandInfo.pivotArea == _item_data_axis_builder_1.pivotAreaNames.columns ? areaNames.pivotColumnAxis : areaNames.pivotRowAxis, values = expandInfo.values, metaData = that._metaData, dataStorage = new _data_storage_1.dataStorage(expandedItemDataDTO.DataStorageDTO);
        var iterators = that._dataStorage.insert(dataStorage, sortOrderSlices);
        var expandedAreaNewRootItem = _item_data_axis_builder_1.itemDataAxisBuilder.build(area, that._dataStorage, metaData.getAxes()[area], sortOrderSlices, metaData, iterators);
        if (!!expandedAreaNewRootItem) {
            var expandedAreaRootItem = that._items[area], expandedItem = _item_data_axis_helper_1.itemDataAxisHelper.findFirstPointByUniqueValues(expandedAreaRootItem, values), expandedNewItem = _item_data_axis_helper_1.itemDataAxisHelper.findFirstPointByUniqueValues(expandedAreaNewRootItem, values);
            if (!!expandedNewItem) {
                var newChildren = expandedNewItem.getChildren();
                $.each(newChildren, function (_, child) {
                    child._setParent(expandedItem);
                });
                expandedItem._setChildren(newChildren);
            }
        }
    };
    itemDataManager.prototype.getDataStorage = function () {
        return this._dataStorage;
    };
    itemDataManager.prototype.getItemData = function () {
        return this._itemData;
    };
    itemDataManager.prototype.getMetaData = function () {
        return this._metaData;
    };
    itemDataManager.prototype._createMetaData = function (metaDataDTO) {
        var metaData = new _item_meta_data_1.itemMetaData(metaDataDTO);
        metaData.initialize();
        return metaData;
    };
    return itemDataManager;
}());
exports.itemDataManager = itemDataManager;


/***/ }),
/* 407 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var _item_data_axis_names_1 = __webpack_require__(34);
var _formatter_1 = __webpack_require__(25);
var _utils_1 = __webpack_require__(3);
var _item_meta_data_1 = __webpack_require__(242);
var _item_data_axis_1 = __webpack_require__(408);
var _item_data_axis_point_1 = __webpack_require__(166);
var _item_data_tuple_1 = __webpack_require__(98);
var itemData = (function () {
    function itemData(data, rootItems) {
        this._data = data;
        this._rootItems = rootItems;
    }
    itemData.prototype.isEmpty = function () {
        return this._data.storage.isEmpty();
    };
    itemData.prototype.getCurrentFilterValues = function (dimensionIds, axisName, selectedValues) {
        var that = this, dimensionCount = dimensionIds.length;
        if (dimensionCount > 0) {
            var axis = this.getAxis(axisName), tuples = [];
            if (selectedValues) {
                $.each(selectedValues, function (index, point) {
                    var value = point[0];
                    var axisPoint = $.grep(axis.getPointsByDimension(dimensionIds[0]), function (point) {
                        return _utils_1.checkValuesAreEqual(value, point.getUniqueValue());
                    })[0];
                    for (var i = 1; i < dimensionCount; i++) {
                        value = point[i];
                        axisPoint = $.grep(axisPoint.getChildren(), function (point) {
                            return _utils_1.checkValuesAreEqual(value, point.getUniqueValue());
                        })[0];
                    }
                    tuples.push(new _item_data_tuple_1.itemDataTuple([axisPoint]));
                });
            }
            return tuples;
        }
        return null;
    };
    itemData.prototype.getCurrentDrillDownValues = function (dimensionIds, axisName) {
        var that = this, dimensionCount = dimensionIds.length;
        if (dimensionCount > 0) {
            var axis = that.getAxis(axisName), axisPoints = axis.getPointsByDimension(dimensionIds[0]);
            if (axisPoints.length > 0) {
                var parentPoint = axisPoints[0].getParent();
                if (parentPoint.getParent() != null) {
                    return new _item_data_tuple_1.itemDataTuple([parentPoint]);
                }
                else {
                    return null;
                }
            }
            else {
                return null;
            }
        }
        return null;
    };
    itemData.prototype.getAvailableTuples = function (dimensionIds, axisName) {
        var that = this, dimensionCount = dimensionIds.length;
        if (dimensionCount > 0) {
            var axis = this.getAxis(axisName), tuple, tuples = [];
            $.each(axis.getPointsByDimension(dimensionIds[dimensionCount - 1]), function (index, axisPoint) {
                tuples.push(new _item_data_tuple_1.itemDataTuple([axisPoint]));
            });
            return tuples;
        }
        return null;
    };
    itemData.prototype.getAllSelectionValues = function (dimensionIds) {
        var multiData = this, allAxisNames = multiData.getAxisNames(), axisNames = [], selectionList = [], fillAvailableValues = function (axes, row, inputSelection) {
            var firstAxis = multiData.getAxis(axes[0]), nextAxes = axes.slice(1, axes.length), axisPoints = firstAxis.getPoints() || [];
            $.each(axisPoints, function (_, axisPoint) {
                var newRow = row.slice();
                $.each(axisPoint.getAxisPath(), function (__, pathPoint) {
                    if ($.grep(dimensionIds, function (id) { return id === pathPoint.getDimension().id; }).length > 0) {
                        newRow.push(pathPoint.getUniqueValue());
                    }
                });
                if (axes.length > 1) {
                    fillAvailableValues(nextAxes, newRow, inputSelection);
                }
                else {
                    inputSelection.push(newRow);
                }
            });
        };
        if (dimensionIds && dimensionIds.length > 0) {
            $.each(dimensionIds, function (_, id) {
                $.each(allAxisNames, function (__, axisName) {
                    if ($.grep(multiData.getAxis(axisName).getDimensions(), function (descr) {
                        return descr.id === id;
                    }).length > 0
                        && axisNames.indexOf(axisName) === -1) {
                        axisNames.push(axisName);
                    }
                });
            });
            fillAvailableValues(axisNames, [], selectionList);
        }
        return selectionList;
    };
    itemData.prototype.getMeasuresByIds = function (measureIds) {
        var that = this, measures = [];
        $.each(measureIds, function (i, id) {
            measures.push(that.getMeasureById(id));
        });
        return measures;
    };
    itemData.prototype.getAxisNames = function () {
        return this._data.metaData.getAxisNames();
    };
    itemData.prototype.getAxis = function (axisName) {
        if (axisName === undefined) {
            axisName = _item_data_axis_names_1.itemDataAxisNames.defaultAxis;
        }
        var dimensions = this.getDimensions(axisName), root = this._rootItems[axisName];
        return new _item_data_axis_1.itemDataAxis(dimensions, root);
    };
    itemData.prototype.getDimensions = function (axisName) {
        return this._data.metaData.getDimensions(axisName);
    };
    itemData.prototype.getColorMeasures = function () {
        return this._data.metaData.getColorMeasures();
    };
    itemData.prototype.getMeasures = function () {
        return this._data.metaData.getMeasures();
    };
    itemData.prototype.getDeltas = function () {
        return this._data.metaData.getDeltas();
    };
    itemData.prototype.getMeasureById = function (id) {
        return this._data.metaData.getMeasureById(id);
    };
    itemData.prototype.getDeltaById = function (id) {
        return this._data.metaData.getDeltaById(id);
    };
    itemData.prototype.getSlice = function (value) {
        return (value instanceof _item_data_tuple_1.itemDataTuple) ? this._getSliceByTuple(value) :
            (value instanceof _item_data_axis_point_1.itemDataAxisPoint) ? this._getSliceByAxisPoint(value) : null;
    };
    itemData.prototype.getMeasureFormat = function (measureId) {
        return this._data.metaData.getMeasureFormat(measureId);
    };
    itemData.prototype.getMeasureExpression = function (measureId) {
        return this._data.metaData.getMeasureExpression(measureId);
    };
    itemData.prototype.getMeasureCalculation = function (measureId) {
        return this._data.metaData.getMeasureCalculation(measureId);
    };
    itemData.prototype.getMeasureWindowDefinition = function (measureId) {
        return this._data.metaData.getMeasureWindowDefinition(measureId);
    };
    itemData.prototype.getDimensionFormat = function (dimensionId) {
        return this._data.metaData.getDimensionFormat(dimensionId);
    };
    itemData.prototype.getColorMeasureValue = function (colorMeasureId) {
        return this._getValue(colorMeasureId);
    };
    itemData.prototype.getConditionalFormattingMeasureValue = function (cfMeasureId) {
        return this._getValue(cfMeasureId);
    };
    itemData.prototype.getMeasureValue = function (measureId) {
        var that = this, format = that.getMeasureFormat(measureId);
        return that._getMeasureValueByKeys(that._getKeys(), measureId, format);
    };
    itemData.prototype.getPointsByDimensionId = function (dimensionId) {
        var points = [], root, axis;
        var that = this;
        $.each(that._data.metaData.getAxes(), function (axisName, dimensions) {
            var foundDimensions = $.grep(dimensions, function (dimension) {
                return dimension.id === dimensionId;
            });
            if (foundDimensions) {
                root = that._rootItems[axisName];
                axis = new _item_data_axis_1.itemDataAxis(dimensions, root);
                points = axis.getPointsByDimension(dimensionId);
                return false;
            }
        });
        return points;
    };
    itemData.prototype._getKeys = function (points) {
        var that = this, rootItems = that._rootItems, keysList = [];
        $.each(rootItems, function (axisName, root) {
            var userPoint = (points && points[axisName]), point = userPoint || root;
            keysList.push(point.getKey());
        });
        return keysList;
    };
    itemData.prototype._getValue = function (measureId) {
        var that = this;
        return that._getCellValue(that._getKeys(), measureId);
    };
    itemData.prototype._getMeasureValueByKeys = function (keys, mId, format) {
        var that = this;
        return {
            getValue: function () {
                return that._getCellValue(keys, mId);
            },
            getDisplayText: function () {
                return that._getCellDisplayText(keys, mId, format);
            }
        };
    };
    itemData.prototype._getDeltaValueByKeys = function (keys, deltaIds, formats) {
        var that = this, names = _item_meta_data_1.deltaValueNames, getValueItem = function (valueName) {
            return {
                getValue: function () {
                    return that._getCellValue(keys, deltaIds[valueName]);
                },
                getDisplayText: function () {
                    var format = formats[valueName];
                    if (format) {
                        format = {
                            NumericFormat: format
                        };
                    }
                    return that._getCellDisplayText(keys, deltaIds[valueName], format);
                }
            };
        };
        return {
            getActualValue: function () {
                return getValueItem(names.actualValue);
            },
            getTargetValue: function () {
                return getValueItem(names.targetValue);
            },
            getAbsoluteVariation: function () {
                return getValueItem(names.absoluteVariation);
            },
            getPercentVariation: function () {
                return getValueItem(names.percentVariation);
            },
            getPercentOfTarget: function () {
                return getValueItem(names.percentOfTarget);
            },
            getIsGood: function () {
                return getValueItem(names.isGood);
            },
            getIndicatorType: function () {
                return getValueItem(names.indicatorType);
            },
            getDisplayValue: function () {
                return getValueItem(names.mainValue);
            },
            getDisplaySubValue1: function () {
                return getValueItem(names.subValue1);
            },
            getDisplaySubValue2: function () {
                return getValueItem(names.subValue2);
            }
        };
    };
    itemData.prototype._createPointsHash = function (axisPoints) {
        var hash = {};
        for (var i = 0; i < axisPoints.length; i++) {
            var areaName = axisPoints[i].getAxisName();
            hash[areaName] = axisPoints[i];
        }
        return hash;
    };
    itemData.prototype.getMeasureValueByAxisPoints = function (measureId, axisPoints) {
        var that = this, format = that.getMeasureFormat(measureId), pointsHash = that._createPointsHash(axisPoints);
        return that._getMeasureValueByKeys(that._getKeys(pointsHash), measureId, format);
    };
    itemData.prototype.getDeltaValue = function (deltaId) {
        var that = this, metaData = that._data.metaData, deltaIds = metaData.getDeltaValueIds(deltaId), formats = metaData.getDeltaFormats(deltaId);
        return that._getDeltaValueByKeys(that._getKeys(), deltaIds, formats);
    };
    itemData.prototype.getDeltaValueByAxisPoints = function (deltaId, axisPoints) {
        var that = this, metaData = this._data.metaData, deltaIds = metaData.getDeltaValueIds(deltaId), formats = metaData.getDeltaFormats(deltaId), pointsHash = this._createPointsHash(axisPoints);
        return this._getDeltaValueByKeys(that._getKeys(pointsHash), deltaIds, formats);
    };
    itemData.prototype.getDataMembers = function () {
        return this._data.metaData.getDataMembers();
    };
    itemData.prototype.createTuple = function (values) {
        var that = this, axisPoints = [];
        if (values[0] instanceof _item_data_axis_point_1.itemDataAxisPoint) {
            axisPoints = values;
        }
        else {
            $.each(values, function (index, axisValue) {
                var axis = that.getAxis(axisValue.AxisName), axisPoint = axis.getPointByUniqueValues(axisValue.Value);
                axisPoints.push(axisPoint);
            });
        }
        return new _item_data_tuple_1.itemDataTuple(axisPoints);
    };
    itemData.prototype._getCellValue = function (keys, valueId) {
        return this._data.storage.getCrossValue(keys, valueId);
    };
    itemData.prototype._getCellDisplayText = function (keys, valueId, format) {
        return format ? _formatter_1.format(this._getCellValue(keys, valueId), format) : undefined;
    };
    itemData.prototype._getSliceByAxisPoint = function (axisPoint) {
        var that = this, rootItems = that._rootItems, newRootItems = {};
        $.each(rootItems, function (name, item) {
            newRootItems[name] = axisPoint.getAxisName() === name ? axisPoint : item;
        });
        return new itemData(that._data, newRootItems);
    };
    itemData.prototype._getSliceByTuple = function (tuple) {
        var data = this;
        $.each(tuple._axisPoints, function (_, axisPoint) {
            data = data._getSliceByAxisPoint(axisPoint);
        });
        return data;
    };
    return itemData;
}());
exports.itemData = itemData;


/***/ }),
/* 408 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _item_data_axis_helper_1 = __webpack_require__(167);
var helper = _item_data_axis_helper_1.itemDataAxisHelper;
var itemDataAxis = (function () {
    function itemDataAxis(dimensions, axisPoint) {
        this._dimensions = dimensions;
        this._axisPoint = axisPoint;
    }
    itemDataAxis.prototype.getDimensions = function () {
        return this._dimensions;
    };
    itemDataAxis.prototype.getRootPoint = function () {
        var getRoot = function (point) {
            var parent = point.getParent();
            if (parent)
                return getRoot(parent);
            return point;
        };
        return getRoot(this._axisPoint);
    };
    itemDataAxis.prototype.getPoints = function (ignoreRootPoint) {
        if (ignoreRootPoint === void 0) { ignoreRootPoint = false; }
        var dimensions = this.getDimensions(), lastLevelDimension = dimensions ? dimensions[dimensions.length - 1] : null;
        if (lastLevelDimension) {
            return this.getPointsByDimension(lastLevelDimension.id);
        }
        else {
            return ignoreRootPoint ? [] : [this.getRootPoint()];
        }
    };
    itemDataAxis.prototype.getAvaliableLeafPoints = function () {
        return this.getRootPoint().getAvaliableLeafPoints();
    };
    itemDataAxis.prototype.getPointsByDimension = function (dimensionId) {
        var root = this.getRootPoint(), points = [];
        if (dimensionId) {
            helper.eachPoint(root, function (point) {
                var dimension = point.getDimension();
                if (dimension && dimension.id == dimensionId) {
                    points.push(point);
                }
            });
        }
        else {
            points.push(root);
        }
        return points;
    };
    itemDataAxis.prototype.getPointByUniqueValues = function (values) {
        return helper.findFirstPointByUniqueValues(this.getRootPoint(), values);
    };
    itemDataAxis.prototype.getPointByUniqueValueAndDimension = function (value, dimensionId) {
        return helper.findFirstPointByUniqueValueAndDimension(this.getRootPoint(), value, dimensionId);
    };
    itemDataAxis.prototype.getPointByValues = function (values) {
        return helper.findFirstPointByValues(this.getRootPoint(), values);
    };
    return itemDataAxis;
}());
exports.itemDataAxis = itemDataAxis;


/***/ }),
/* 409 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _viewer_item_types_1 = __webpack_require__(118);
var _bubble_map_data_controller_1 = __webpack_require__(385);
var _card_data_controller_1 = __webpack_require__(386);
var _chart_data_controller_1 = __webpack_require__(387);
var _choropleth_map_data_controller_1 = __webpack_require__(388);
var _filter_element_data_controller_1 = __webpack_require__(97);
var _gauge_data_controller_1 = __webpack_require__(389);
var _geo_point_map_data_controller_1 = __webpack_require__(391);
var _grid_data_controller_1 = __webpack_require__(392);
var _image_data_controller_1 = __webpack_require__(394);
var _pie_data_controller_1 = __webpack_require__(395);
var _pie_map_data_controller_1 = __webpack_require__(396);
var _pivot_data_controller_1 = __webpack_require__(397);
var _range_filter_data_controller_1 = __webpack_require__(398);
var _scatter_chart_data_controller_1 = __webpack_require__(399);
var _text_item_data_controller_1 = __webpack_require__(400);
var _treemap_data_controller_1 = __webpack_require__(401);
var DataControllerFactory = (function () {
    function DataControllerFactory() {
    }
    DataControllerFactory.prototype.createDataController = function (type, options) {
        switch (type) {
            case _viewer_item_types_1.types.rangeFilter:
                return new _range_filter_data_controller_1.rangeFilterDataController(options);
            case _viewer_item_types_1.types.chart:
                return new _chart_data_controller_1.chartDataController(options);
            case _viewer_item_types_1.types.scatter:
                return new _scatter_chart_data_controller_1.scatterChartDataController(options);
            case _viewer_item_types_1.types.pie:
                return new _pie_data_controller_1.pieDataController(options);
            case _viewer_item_types_1.types.pivot:
                return new _pivot_data_controller_1.pivotDataController(options);
            case _viewer_item_types_1.types.choroplethMap:
                return new _choropleth_map_data_controller_1.choroplethMapDataController(options);
            case _viewer_item_types_1.types.grid:
                return new _grid_data_controller_1.gridDataController(options);
            case _viewer_item_types_1.types.card:
                return new _card_data_controller_1.cardDataController(options);
            case _viewer_item_types_1.types.gauge:
                return new _gauge_data_controller_1.gaugeDataController(options);
            case _viewer_item_types_1.types.geoPointMap:
                return new _geo_point_map_data_controller_1.geoPointMapDataController(options);
            case _viewer_item_types_1.types.bubbleMap:
                return new _bubble_map_data_controller_1.bubbleMapDataController(options);
            case _viewer_item_types_1.types.pieMap:
                return new _pie_map_data_controller_1.pieMapDataController(options);
            case _viewer_item_types_1.types.comboBox:
            case _viewer_item_types_1.types.listBox:
                return new _filter_element_data_controller_1.listViewDataController(options);
            case _viewer_item_types_1.types.treeView:
                return new _filter_element_data_controller_1.treeViewDataController(options);
            case _viewer_item_types_1.types.boundImage:
                return new _image_data_controller_1.imageDataController(options);
            case _viewer_item_types_1.types.text:
                return new _text_item_data_controller_1.textItemDataController(options);
            case _viewer_item_types_1.types.treemap:
                return new _treemap_data_controller_1.treemapDataController(options);
            default:
                return undefined;
        }
    };
    return DataControllerFactory;
}());
exports.DataControllerFactory = DataControllerFactory;
exports.defaultDataControllerFactory = new DataControllerFactory();


/***/ }),
/* 410 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _utils_1 = __webpack_require__(3);
var ParameterValue = (function () {
    function ParameterValue(value, displayText) {
        this._value = value;
        this._displayText = displayText;
    }
    ParameterValue.prototype.getValue = function () {
        return this._value;
    };
    ParameterValue.prototype.getDisplayText = function () {
        return this._displayText;
    };
    return ParameterValue;
}());
var Parameter = (function () {
    function Parameter(parameterViewModel) {
        this.parameterChanged = _utils_1.createJQueryCallbacks();
        this._name = parameterViewModel.Name;
        this._value = parameterViewModel.DefaultValue;
        this._defaultValue = parameterViewModel.DefaultValue;
        this._description = parameterViewModel.Description;
        this._type = parameterViewModel.Type;
        this._visible = parameterViewModel.Visible;
        this._allowNull = parameterViewModel.AllowNull;
        this._allowmultiselect = parameterViewModel.AllowMultiselect;
        this.setLookUpValues(parameterViewModel.Values, parameterViewModel.ContainsDisplayMember);
    }
    Parameter.prototype.getName = function () {
        return this._name;
    };
    Parameter.prototype.getAllowNull = function () {
        return this._allowNull;
    };
    Parameter.prototype.getAllowMultiselect = function () {
        return this._allowmultiselect;
    };
    Parameter.prototype.getValue = function () {
        return this._value;
    };
    Parameter.prototype.setValue = function (value) {
        if (!_utils_1.checkValuesAreEqual(this._value, value, true, true)) {
            this._value = value;
            this.parameterChanged.fire();
        }
    };
    Parameter.prototype.getDefaultValue = function () {
        return this._defaultValue;
    };
    Parameter.prototype.getDescription = function () {
        return this._description;
    };
    Parameter.prototype.getType = function () {
        return this._type;
    };
    Parameter.prototype.getLookUpValues = function () {
        return this._values;
    };
    Parameter.prototype.setLookUpValues = function (values, containsDisplayMember) {
        var that = this;
        if (values === null)
            that._values = values;
        else {
            that._values = [];
            if (values) {
                values.forEach(function (value) {
                    that._values.push(new ParameterValue(value.Value, containsDisplayMember ? value.DisplayText : value.Value));
                });
            }
        }
    };
    Parameter.prototype.isVisible = function () {
        return this._visible;
    };
    return Parameter;
}());
exports.Parameter = Parameter;
var ParametersCollection = (function () {
    function ParametersCollection(parametersViewModel) {
        this.collectionChanged = _utils_1.createJQueryCallbacks();
        this._parameters = [];
        var that = this;
        if (parametersViewModel) {
            parametersViewModel.forEach(function (parameterViewModel) {
                var parameter = new Parameter(parameterViewModel);
                parameter.parameterChanged.add(function () {
                    that.collectionChanged.fire();
                });
                that._parameters.push(parameter);
            });
        }
    }
    ParametersCollection.prototype.updateParameterValues = function (parametersViewModel) {
        var _this = this;
        parametersViewModel.forEach(function (parameterViewModel) {
            _this.getParameterByName(parameterViewModel.Name).setLookUpValues(parameterViewModel.Values, parameterViewModel.ContainsDisplayMember);
        });
    };
    ParametersCollection.prototype.setParameters = function (newParameters) {
        var _this = this;
        newParameters.forEach(function (newParameter) {
            var parameter = _this.getParameterByName(newParameter.Name);
            parameter.setValue(newParameter.Value);
        });
    };
    ParametersCollection.prototype.getParameterValues = function () {
        var parameterValues = [];
        this._parameters.forEach(function (parameter) {
            parameterValues.push({
                Name: parameter.getName(),
                Value: parameter.getValue()
            });
        });
        return parameterValues;
    };
    ParametersCollection.prototype.getParameterDefaultValue = function (name) {
        return this.getParameterByName(name).getDefaultValue();
    };
    ParametersCollection.prototype.getParameterValue = function (name) {
        return this.getParameterByName(name).getValue();
    };
    ParametersCollection.prototype.setParameterValue = function (name, value) {
        var parameter = this.getParameterByName(name);
        parameter.setValue(value);
    };
    ParametersCollection.prototype.getParameters = function () {
        return this.getParameterList();
    };
    ParametersCollection.prototype.getVisibleParameters = function () {
        return this._parameters.filter(function (parameter) { return parameter.isVisible(); });
    };
    ParametersCollection.prototype.getParameterList = function () {
        return this._parameters;
    };
    ParametersCollection.prototype.getParameterByName = function (name) {
        var that = this;
        return that._parameters.filter(function (parameter) { return parameter.getName() == name; })[0];
    };
    ParametersCollection.prototype.getParameterByIndex = function (index) {
        return this._parameters[index];
    };
    return ParametersCollection;
}());
exports.ParametersCollection = ParametersCollection;


/***/ }),
/* 411 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(244);
__webpack_require__(38);
__webpack_require__(611);
__export(__webpack_require__(611));


/***/ }),
/* 412 */
/***/ (function(module, exports) {

module.exports = DevExpress.Class;

/***/ }),
/* 413 */
/***/ (function(module, exports) {

module.exports = DevExpress.utils.resizeCallbacks;

/***/ }),
/* 414 */
/***/ (function(module, exports) {

module.exports = DevExpress.utils.support;

/***/ }),
/* 415 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.data.query };

/***/ }),
/* 416 */
/***/ (function(module, exports) {

module.exports = DevExpress.events.utils;

/***/ }),
/* 417 */
/***/ (function(module, exports) {

module.exports = DevExpress.ui.dialog;

/***/ }),
/* 418 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.ui.dxPivotGrid };

/***/ }),
/* 419 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.ui.dxToast };

/***/ }),
/* 420 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.ui.dxToolbar };

/***/ }),
/* 421 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.ui.dxTreeList };

/***/ }),
/* 422 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.ui.dxTreeView };

/***/ }),
/* 423 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.validationEngine };

/***/ }),
/* 424 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.viz.dxPieChart };

/***/ }),
/* 425 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.viz.dxRangeSelector };

/***/ }),
/* 426 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.viz.dxTreeMap };

/***/ }),
/* 427 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.viz.dxVectorMap };

/***/ }),
/* 428 */
/***/ (function(module, exports) {

module.exports = DevExpress.viz.map;

/***/ }),
/* 429 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(94);
__webpack_require__(58);
__webpack_require__(191);
__webpack_require__(690);
__webpack_require__(691);
__webpack_require__(692);
__webpack_require__(693);
__webpack_require__(694);
__export(__webpack_require__(50));
__export(__webpack_require__(256));
__export(__webpack_require__(104));
__export(__webpack_require__(257));
__export(__webpack_require__(260));
__export(__webpack_require__(431));
__export(__webpack_require__(177));
__export(__webpack_require__(89));
__export(__webpack_require__(125));
__export(__webpack_require__(258));
__export(__webpack_require__(517));
__export(__webpack_require__(81));
__export(__webpack_require__(518));
__export(__webpack_require__(519));
__export(__webpack_require__(520));
__export(__webpack_require__(521));
__export(__webpack_require__(8));
__export(__webpack_require__(255));
__export(__webpack_require__(43));
__export(__webpack_require__(59));
__export(__webpack_require__(522));
__export(__webpack_require__(523));
__export(__webpack_require__(432));
__export(__webpack_require__(524));
__export(__webpack_require__(525));
__export(__webpack_require__(42));
__export(__webpack_require__(526));
__export(__webpack_require__(527));
__export(__webpack_require__(528));
__export(__webpack_require__(529));
__export(__webpack_require__(261));
__export(__webpack_require__(259));
__export(__webpack_require__(206));
__export(__webpack_require__(489));
__export(__webpack_require__(62));
__export(__webpack_require__(138));
__export(__webpack_require__(514));
__export(__webpack_require__(515));
__export(__webpack_require__(207));
__export(__webpack_require__(323));
__export(__webpack_require__(139));
__export(__webpack_require__(90));
__export(__webpack_require__(11));
__export(__webpack_require__(94));
__export(__webpack_require__(188));
__export(__webpack_require__(263));
__export(__webpack_require__(442));
__export(__webpack_require__(441));
__export(__webpack_require__(264));
__export(__webpack_require__(444));
__export(__webpack_require__(269));
__export(__webpack_require__(443));
__export(__webpack_require__(66));
__export(__webpack_require__(271));
__export(__webpack_require__(445));
__export(__webpack_require__(274));
__export(__webpack_require__(446));
__export(__webpack_require__(278));
__export(__webpack_require__(451));
__export(__webpack_require__(273));
__export(__webpack_require__(277));
__export(__webpack_require__(84));
__export(__webpack_require__(186));
__export(__webpack_require__(447));
__export(__webpack_require__(262));
__export(__webpack_require__(272));
__export(__webpack_require__(280));
__export(__webpack_require__(281));
__export(__webpack_require__(456));
__export(__webpack_require__(67));
__export(__webpack_require__(53));
__export(__webpack_require__(73));
__export(__webpack_require__(450));
__export(__webpack_require__(127));
__export(__webpack_require__(530));
__export(__webpack_require__(208));
__export(__webpack_require__(531));
__export(__webpack_require__(492));
__export(__webpack_require__(209));
__export(__webpack_require__(496));
__export(__webpack_require__(493));
__export(__webpack_require__(494));
__export(__webpack_require__(326));
__export(__webpack_require__(197));
__export(__webpack_require__(532));
__export(__webpack_require__(294));
__export(__webpack_require__(327));
__export(__webpack_require__(142));
__export(__webpack_require__(109));
__export(__webpack_require__(296));
__export(__webpack_require__(103));
__export(__webpack_require__(462));
__export(__webpack_require__(60));
__export(__webpack_require__(9));
__export(__webpack_require__(328));
__export(__webpack_require__(143));
__export(__webpack_require__(110));
__export(__webpack_require__(534));
__export(__webpack_require__(698));
__export(__webpack_require__(212));
__export(__webpack_require__(535));
__export(__webpack_require__(330));
__export(__webpack_require__(145));
__export(__webpack_require__(146));
__export(__webpack_require__(499));
__export(__webpack_require__(131));
__export(__webpack_require__(699));
__export(__webpack_require__(324));
__export(__webpack_require__(325));
__export(__webpack_require__(700));
__export(__webpack_require__(332));
__export(__webpack_require__(333));
__export(__webpack_require__(501));
__export(__webpack_require__(502));
__export(__webpack_require__(701));
__export(__webpack_require__(213));
__export(__webpack_require__(214));
__export(__webpack_require__(503));
__export(__webpack_require__(504));
__export(__webpack_require__(702));
__export(__webpack_require__(460));
__export(__webpack_require__(132));
__export(__webpack_require__(32));
__export(__webpack_require__(291));
__export(__webpack_require__(703));
__export(__webpack_require__(334));
__export(__webpack_require__(211));
__export(__webpack_require__(507));
__export(__webpack_require__(508));
__export(__webpack_require__(111));
__export(__webpack_require__(329));
__export(__webpack_require__(536));
__export(__webpack_require__(509));
__export(__webpack_require__(210));
__export(__webpack_require__(86));
__export(__webpack_require__(87));
__export(__webpack_require__(537));
__export(__webpack_require__(704));
__export(__webpack_require__(105));
__export(__webpack_require__(516));
__export(__webpack_require__(190));
__export(__webpack_require__(705));
__export(__webpack_require__(538));
__export(__webpack_require__(319));
__export(__webpack_require__(108));
__export(__webpack_require__(140));
__export(__webpack_require__(320));
__export(__webpack_require__(5));
__export(__webpack_require__(512));


/***/ }),
/* 430 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _helper_classes_1 = __webpack_require__(36);
function validateCustomPropertyName(name) {
    if (!_helper_classes_1.isComponentNameValid(name))
        throw new Error("The property name '" + name + "' is invalid. It should contain only letters, numbers, and the underscore symbol and cannot start with a number.");
}
exports.validateCustomPropertyName = validateCustomPropertyName;
function validateCustomPropertyValueType(propertyName, value) {
    if (typeof value !== 'string' && typeof value !== 'number' && typeof value !== 'boolean' && value !== null && value !== undefined)
        throw new Error("The '" + propertyName + "' custom property value has incorrect type.");
}
exports.validateCustomPropertyValueType = validateCustomPropertyValueType;


/***/ }),
/* 431 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var serializable_model_1 = __webpack_require__(5);
var _custom_property_validation_1 = __webpack_require__(430);
var CustomProperties = (function (_super) {
    __extends(CustomProperties, _super);
    function CustomProperties(json, serializer, info) {
        var _this = _super.call(this, json, serializer, info) || this;
        info.forEach(function (propertyInfo) {
            _this[propertyInfo.propertyName].subscribe(function (value) {
                propertyInfo.alwaysSerialize = value !== null && value !== undefined;
            });
        });
        _this.getInfo = function () { return info; };
        return _this;
    }
    CustomProperties.prototype._isKnownProperty = function (propertyName) {
        return !!this.getInfo().filter(function (i) { return i.propertyName === propertyName; })[0];
    };
    CustomProperties.prototype.getValue = function (propertyName) {
        if (this._isKnownProperty(propertyName)) {
            return this[propertyName].peek();
        }
        else {
            return this._model[propertyName];
        }
    };
    CustomProperties.prototype.setValue = function (propertyName, propertyValue) {
        _custom_property_validation_1.validateCustomPropertyName(propertyName);
        _custom_property_validation_1.validateCustomPropertyValueType(propertyName, propertyValue);
        if (this._isKnownProperty(propertyName)) {
            this[propertyName](propertyValue);
        }
        else {
            this._model[propertyName] = propertyValue;
        }
    };
    return CustomProperties;
}(serializable_model_1.SerializableModel));
exports.CustomProperties = CustomProperties;


/***/ }),
/* 432 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var measure_calc_window_definition_1 = __webpack_require__(42);
var _custom_item_calc_window_definition_1 = __webpack_require__(433);
var CustomItemWindowDefinition = (function (_super) {
    __extends(CustomItemWindowDefinition, _super);
    function CustomItemWindowDefinition(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    CustomItemWindowDefinition.prototype.getInfo = function () {
        return _custom_item_calc_window_definition_1.customItemWindowDefinitionSerializationsInfo;
    };
    CustomItemWindowDefinition.prototype.equals = function (def) {
        return def instanceof CustomItemWindowDefinition;
    };
    return CustomItemWindowDefinition;
}(measure_calc_window_definition_1.MeasureCalculationWindowDefinition));
exports.CustomItemWindowDefinition = CustomItemWindowDefinition;
measure_calc_window_definition_1.windowDefinitionsTypesMap['CustomItemWindowDefinition'] = CustomItemWindowDefinition;


/***/ }),
/* 433 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _measure_calc_window_definition_1 = __webpack_require__(51);
exports.customItemWindowDefinitionSerializationsInfo = _measure_calc_window_definition_1.measureCalculationWindowDefinitionSerializationsInfo.concat([]);


/***/ }),
/* 434 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.calculationSerializationsInfo = [];


/***/ }),
/* 435 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.windowDefinitionSerializationsInfo = [];


/***/ }),
/* 436 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var serializable_model_1 = __webpack_require__(5);
var _color_scheme_entry_1 = __webpack_require__(124);
var DimensionDefinition = (function (_super) {
    __extends(DimensionDefinition, _super);
    function DimensionDefinition(model, serializer, info) {
        return _super.call(this, model, serializer, _color_scheme_entry_1.definitionInfo) || this;
    }
    DimensionDefinition.prototype.getInfo = function () {
        return _color_scheme_entry_1.definitionInfo;
    };
    return DimensionDefinition;
}(serializable_model_1.SerializableModel));
exports.DimensionDefinition = DimensionDefinition;


/***/ }),
/* 437 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _base_metadata_1 = __webpack_require__(4);
exports.dataFieldDataMember = { propertyName: 'dataMember', modelName: 'DataMember' };
exports.dataFieldName = { propertyName: 'name', modelName: 'Name' };
exports.nodeType = { propertyName: 'nodeType', modelName: 'NodeType' };
exports.groupIndex = { propertyName: 'groupIndex', modelName: 'GroupIndex' };
exports.dataFieldChildNodes = { propertyName: 'childNodes', modelName: 'ChildNodes', array: true };
exports.dataFieldDisplayName = { propertyName: 'displayName', modelName: 'DisplayName' };
exports.dataFieldFieldType = {
    propertyName: 'fieldType', modelName: 'FieldType', defaultVal: 'Unknown', from: function (value) { return ko.observable(value === 'String' ? 'Text' : value); }
};
exports.dataFieldIsDataFieldNode = { propertyName: 'isDataFieldNode', modelName: 'IsDataFieldNode', from: _base_metadata_1.parseBool };
exports.dataFieldIsAggregate = { propertyName: 'isAggregate', modelName: 'IsAggregateCalculatedField', from: _base_metadata_1.parseBool };
exports.dataFieldIsDataMemberNode = { propertyName: 'isDataMemberNode', modelName: 'IsDataMemberNode', from: _base_metadata_1.parseBool };
exports.dataFieldIsConvertible = { propertyName: 'isConvertible', modelName: 'IsConvertible', from: _base_metadata_1.parseBool };
exports.dataFieldIsComparable = { propertyName: 'isComparable', modelName: 'IsComparable', from: _base_metadata_1.parseBool };
exports.dataFieldIsList = { propertyName: 'isList', modelName: 'IsList', from: _base_metadata_1.parseBool };
exports.dataFieldIsCorruptedCalField = { propertyName: 'isCorruptedCalcField', modelName: 'IsCorruptedCalculatedField', from: _base_metadata_1.parseBool };
exports.dataFieldSerializationsInfo = [exports.dataFieldDataMember, exports.dataFieldName, exports.dataFieldChildNodes, exports.dataFieldDisplayName, exports.dataFieldFieldType, exports.dataFieldIsDataMemberNode, exports.dataFieldIsDataFieldNode, exports.dataFieldIsConvertible, exports.dataFieldIsComparable, exports.nodeType, exports.groupIndex, exports.dataFieldIsAggregate, exports.dataFieldIsList, exports.dataFieldIsCorruptedCalField];


/***/ }),
/* 438 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.sliceTableDimensions = { propertyName: 'dimensions', modelName: 'Dimensions', array: true };


/***/ }),
/* 439 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var dashboard_item_format_rule_1 = __webpack_require__(262);
var CardItemFormatRuleBase = (function (_super) {
    __extends(CardItemFormatRuleBase, _super);
    function CardItemFormatRuleBase(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    return CardItemFormatRuleBase;
}(dashboard_item_format_rule_1.DashboardItemFormatRule));
exports.CardItemFormatRuleBase = CardItemFormatRuleBase;


/***/ }),
/* 440 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var color_1 = __webpack_require__(50);
var _appearance_settings_1 = __webpack_require__(180);
var _style_settings_base_1 = __webpack_require__(72);
exports.predefinedColor = {
    propertyName: 'predefinedColor', modelName: '@PredefinedColor', displayName: 'DashboardWebStringId.ConditionalFormatting.PredefinedColor', defaultVal: _appearance_settings_1.appearanceType.defaultVal, simpleFormAdapterItem: _appearance_settings_1.appearanceType.simpleFormAdapterItem, values: _appearance_settings_1.appearanceType.values
};
exports.barStypeColor = { propertyName: 'color', modelName: '@Color', displayName: 'DashboardStringId.DescriptionItemColor', defaultVal: null, from: color_1.Color._colorFromModel, toJsonObject: color_1.Color._colorToModel, simpleFormAdapterItem: 'numberBoxEditor' };
exports.barStyleSettingsSerializationsInfo = _style_settings_base_1.styleSettingsBaseSerializationsInfo.concat([exports.barStypeColor, exports.predefinedColor]);


/***/ }),
/* 441 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var serializable_model_1 = __webpack_require__(5);
var _format_condition_bar_options_1 = __webpack_require__(266);
var FormatConditionBarOptions = (function (_super) {
    __extends(FormatConditionBarOptions, _super);
    function FormatConditionBarOptions(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    FormatConditionBarOptions.prototype.getInfo = function () {
        return _format_condition_bar_options_1.formatConditionBarOptionsSerializationsInfo;
    };
    return FormatConditionBarOptions;
}(serializable_model_1.SerializableModel));
exports.FormatConditionBarOptions = FormatConditionBarOptions;


/***/ }),
/* 442 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var format_condition_min_max_base_1 = __webpack_require__(443);
var _format_condition_bar_1 = __webpack_require__(267);
var FormatConditionBar = (function (_super) {
    __extends(FormatConditionBar, _super);
    function FormatConditionBar(modelJson, serializer) {
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.currentStyleSettingsType = ko.observable('Positive');
        _this.getSpecificType = function () { return null; };
        _this.setSpecificType = function (type) { };
        _this.currentStyleSettings = ko.computed(function () {
            return _this.currentStyleSettingsType() == 'Positive' ? _this.styleSettings() : _this.negativeStyleSettings;
        });
        return _this;
    }
    Object.defineProperty(FormatConditionBar.prototype, "_isApplyToRowColumnRestricted", {
        get: function () { return true; },
        enumerable: true,
        configurable: true
    });
    FormatConditionBar.prototype._getStyleSettingsInfo = function () {
        return _format_condition_bar_1.formatConditionBarSerializationsInfo;
    };
    FormatConditionBar.prototype.getDefaultStyleSettingsType = function () {
        return 'StyleSettings';
    };
    FormatConditionBar.prototype.init = function () {
        if (!!this.currentStyleSettings()) {
            this.currentStyleSettings().init();
        }
        this.isEmpty(false);
    };
    return FormatConditionBar;
}(format_condition_min_max_base_1.FormatConditionMinMaxBase));
exports.FormatConditionBar = FormatConditionBar;


/***/ }),
/* 443 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var format_condition_style_base_1 = __webpack_require__(66);
var _format_condition_min_max_base_1 = __webpack_require__(183);
var FormatConditionMinMaxBase = (function (_super) {
    __extends(FormatConditionMinMaxBase, _super);
    function FormatConditionMinMaxBase(modelJson, serializer) {
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    FormatConditionMinMaxBase.prototype._getStyleSettingsInfo = function () {
        return _format_condition_min_max_base_1.formatConditionMinMaxBaseSerializationsInfo;
    };
    return FormatConditionMinMaxBase;
}(format_condition_style_base_1.FormatConditionStyleBase));
exports.FormatConditionMinMaxBase = FormatConditionMinMaxBase;


/***/ }),
/* 444 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var format_condition_style_base_1 = __webpack_require__(66);
var _format_condition_date_occuring_1 = __webpack_require__(268);
var FormatConditionDateOccurring = (function (_super) {
    __extends(FormatConditionDateOccurring, _super);
    function FormatConditionDateOccurring(modelJson, serializer) {
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.getSpecificType = function () { return null; };
        _this.setSpecificType = function (type) { };
        return _this;
    }
    FormatConditionDateOccurring.prototype._getStyleSettingsInfo = function () {
        return _format_condition_date_occuring_1.FormatConditionDateOccurringSerializationsInfo;
    };
    return FormatConditionDateOccurring;
}(format_condition_style_base_1.FormatConditionStyleBase));
exports.FormatConditionDateOccurring = FormatConditionDateOccurring;


/***/ }),
/* 445 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var _parameters_helper_1 = __webpack_require__(55);
var _format_rules_common_1 = __webpack_require__(54);
var format_condition_style_base_1 = __webpack_require__(66);
var _format_condition_value_1 = __webpack_require__(185);
var FormatConditionValue = (function (_super) {
    __extends(FormatConditionValue, _super);
    function FormatConditionValue(modelJson, serializer) {
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.getSpecificType = function () { return _this.condition(); };
        _this.setSpecificType = function (type) {
            _this.condition(type);
            if (!_this.value1.type()) {
                _this.value1.type(_format_rules_common_1.fieldTypes[_this.dataType()]);
                var defaultValue = _parameters_helper_1.ParameterHelper.convertSingleValue(null, _this.value1.type());
                if (_this.value1.type() === 'System.String' && defaultValue === undefined) {
                    defaultValue = '';
                }
                _this.value1.value(defaultValue);
            }
            if (type.toLocaleLowerCase().indexOf('between') !== -1) {
                if (!_this.value2.type()) {
                    _this.value2.value(_this.value1.value());
                    _this.value2.type(_this.value1.type());
                }
            }
            else {
                _this.value2.type(null);
            }
        };
        return _this;
    }
    FormatConditionValue.prototype._getStyleSettingsInfo = function () {
        return _format_condition_value_1.formatConditionValueSerializationsInfo;
    };
    return FormatConditionValue;
}(format_condition_style_base_1.FormatConditionStyleBase));
exports.FormatConditionValue = FormatConditionValue;


/***/ }),
/* 446 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var bar_style_settings_1 = __webpack_require__(53);
var format_condition_range_set_1 = __webpack_require__(273);
var _format_condition_range_color_bar_1 = __webpack_require__(449);
var range_generator_1 = __webpack_require__(84);
var FormatConditionColorRangeBar = (function (_super) {
    __extends(FormatConditionColorRangeBar, _super);
    function FormatConditionColorRangeBar(modelJson, serializer) {
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    Object.defineProperty(FormatConditionColorRangeBar.prototype, "_isApplyToRowColumnRestricted", {
        get: function () { return true; },
        enumerable: true,
        configurable: true
    });
    FormatConditionColorRangeBar.prototype.getInfo = function () {
        return _format_condition_range_color_bar_1.formatConditionColorRangeBarSerializationsInfo;
    };
    FormatConditionColorRangeBar.prototype.getActualPredefinedType = function () {
        return range_generator_1.FormatConditionRangeGenerator.getPredefinedType(this.actualStyles, function (type) {
            var c = new FormatConditionColorRangeBar();
            range_generator_1.FormatConditionRangeGenerator.generateRangeSet(c, type);
            return c;
        });
    };
    FormatConditionColorRangeBar.prototype.setActualPredefinedType = function (type) {
        _super.prototype.setActualPredefinedType.call(this, type);
    };
    FormatConditionColorRangeBar.prototype.createStyleSettings = function (styleListItem) {
        return new bar_style_settings_1.BarStyleSettings({ '@PredefinedColor': styleListItem });
    };
    return FormatConditionColorRangeBar;
}(format_condition_range_set_1.FormatConditionRangeSet));
exports.FormatConditionColorRangeBar = FormatConditionColorRangeBar;


/***/ }),
/* 447 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var _utils_1 = __webpack_require__(18);
var serializable_model_1 = __webpack_require__(5);
var _range_set_1 = __webpack_require__(448);
var range_info_1 = __webpack_require__(186);
var RangeSet = (function (_super) {
    __extends(RangeSet, _super);
    function RangeSet(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.ranges = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(modelJson.Ranges, function (range) { return new range_info_1.RangeInfo(range, serializer); });
        return _this;
    }
    RangeSet.prototype.getInfo = function () {
        return _range_set_1.rangeSetSerializationsInfo;
    };
    __decorate([
        _utils_1.collectionItemType('RangeInfo')
    ], RangeSet.prototype, "ranges", void 0);
    return RangeSet;
}(serializable_model_1.SerializableModel));
exports.RangeSet = RangeSet;


/***/ }),
/* 448 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ranges = { propertyName: 'ranges', modelName: 'Ranges', displayName: 'DashboardWebStringId.ConditionalFormatting.Ranges', array: true };
exports.rangeSetSerializationsInfo = [exports.ranges];


/***/ }),
/* 449 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _format_rules_common_1 = __webpack_require__(54);
var _format_condition_range_set_1 = __webpack_require__(276);
exports.formatConditionColorRangeBarSerializationsInfo = _format_condition_range_set_1.formatConditionRangeSetSerializationsInfo.concat([_format_rules_common_1.barOptions]);


/***/ }),
/* 450 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var style_settings_base_1 = __webpack_require__(127);
var RangeIndexSettings = (function (_super) {
    __extends(RangeIndexSettings, _super);
    function RangeIndexSettings(index) {
        var _this = _super.call(this, null) || this;
        _this.index = ko.observable(-1);
        _this.isBarStyle = ko.observable(false);
        _this.index(index);
        return _this;
    }
    RangeIndexSettings.prototype.equals = function (style) {
        return (style instanceof RangeIndexSettings) && this.index() === style.index();
    };
    RangeIndexSettings.prototype.clone = function () {
        var style = new RangeIndexSettings(this.index());
        style.isBarStyle(this.isBarStyle());
        return style;
    };
    return RangeIndexSettings;
}(style_settings_base_1.StyleSettingsBase));
exports.RangeIndexSettings = RangeIndexSettings;


/***/ }),
/* 451 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var bar_style_settings_1 = __webpack_require__(53);
var format_condition_range_gradient_1 = __webpack_require__(278);
var _format_condition_range_gradient_bar_1 = __webpack_require__(452);
var range_generator_1 = __webpack_require__(84);
var FormatConditionGradientRangeBar = (function (_super) {
    __extends(FormatConditionGradientRangeBar, _super);
    function FormatConditionGradientRangeBar(modelJson, serializer) {
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    Object.defineProperty(FormatConditionGradientRangeBar.prototype, "_isApplyToRowColumnRestricted", {
        get: function () { return true; },
        enumerable: true,
        configurable: true
    });
    FormatConditionGradientRangeBar.prototype.getInfo = function () {
        return _format_condition_range_gradient_bar_1.formatConditionGradientRangeBarSerializationsInfo;
    };
    FormatConditionGradientRangeBar.prototype.getActualPredefinedType = function () {
        return range_generator_1.FormatConditionRangeGenerator.getGradientPredefinedType(this.actualStyles, function (type) {
            var c = new FormatConditionGradientRangeBar();
            range_generator_1.FormatConditionRangeGenerator.generateGradientByType(c, type, 5, true);
            return c;
        });
    };
    FormatConditionGradientRangeBar.prototype.setActualPredefinedType = function (type) {
        range_generator_1.FormatConditionRangeGenerator.generateGradientByType(this, type, 5, true);
    };
    FormatConditionGradientRangeBar.prototype._isGradientStop = function (style) {
        if (style instanceof bar_style_settings_1.BarStyleSettings) {
            return format_condition_range_gradient_1.FormatConditionRangeGradient.isGradientStop(style.predefinedColor(), style.color());
        }
        else {
            return false;
        }
    };
    FormatConditionGradientRangeBar.prototype._generateByDefault = function (segmentNumber) {
        range_generator_1.FormatConditionRangeGenerator.generateGradientByStyles(this, this.stopStyles, segmentNumber);
    };
    return FormatConditionGradientRangeBar;
}(format_condition_range_gradient_1.FormatConditionRangeGradient));
exports.FormatConditionGradientRangeBar = FormatConditionGradientRangeBar;


/***/ }),
/* 452 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _format_rules_common_1 = __webpack_require__(54);
var _format_condition_range_gradient_1 = __webpack_require__(187);
exports.formatConditionGradientRangeBarSerializationsInfo = _format_condition_range_gradient_1.formatConditionRangeGradientSerializationsInfo.concat([_format_rules_common_1.barOptions]);


/***/ }),
/* 453 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _card_item_format_rule_base_1 = __webpack_require__(279);
exports.deltaValueType = { propertyName: 'deltaValueType', modelName: '@DeltaValueType', defaultVal: 'AbsoluteVariation', displayName: 'DashboardWebStringId.Delta.ValueType' };
exports.cardId = { propertyName: 'cardId', modelName: '@CardId' };
exports.cardItemDeltaFormatRuleSerializationsInfo = _card_item_format_rule_base_1.cardItemFormatRuleSerializationsInfoBase.concat([exports.deltaValueType, exports.cardId]);


/***/ }),
/* 454 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _card_item_format_rule_base_1 = __webpack_require__(279);
exports.cardItemformatRuleDataItem = { propertyName: 'dataItemName', modelName: '@DataItem' };
exports.cardItemFormatRuleSerializationsInfo = _card_item_format_rule_base_1.cardItemFormatRuleSerializationsInfoBase.concat([exports.cardItemformatRuleDataItem]);


/***/ }),
/* 455 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _cells_item_format_rule_1 = __webpack_require__(85);
exports.gridItemFormatRuleSerializationsInfo = _cells_item_format_rule_1.cellsItemFormatRuleSerializationsInfo.concat([]);


/***/ }),
/* 456 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var serializable_model_1 = __webpack_require__(5);
var _pivot_item_format_rule_level_1 = __webpack_require__(283);
var PivotItemFormatRuleLevel = (function (_super) {
    __extends(PivotItemFormatRuleLevel, _super);
    function PivotItemFormatRuleLevel(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    PivotItemFormatRuleLevel.prototype.getInfo = function () {
        return _pivot_item_format_rule_level_1.pivotItemFormatRuleLevelSerializationsInfo;
    };
    return PivotItemFormatRuleLevel;
}(serializable_model_1.SerializableModel));
exports.PivotItemFormatRuleLevel = PivotItemFormatRuleLevel;


/***/ }),
/* 457 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _date_utils_1 = __webpack_require__(41);
var ExpandingManager = (function () {
    function ExpandingManager() {
        this._expandingParams = undefined;
        this._expandingState = undefined;
    }
    ExpandingManager.prototype.getPivotExpandViewState = function () {
        var state = this._expandingState;
        return state && {
            rows: _date_utils_1.toStringArray(state.rows),
            columns: _date_utils_1.toStringArray(state.columns)
        } || null;
    };
    ExpandingManager.prototype.setExpandingParams = function (expandingParams) {
        this._expandingParams = expandingParams;
    };
    ExpandingManager.prototype.onViewStateChanged = function (expandingState) {
        this._expandingState = expandingState;
    };
    ExpandingManager.prototype.canProvideExpandingState = function () {
        return this._expandingParams || this._expandingState;
    };
    ExpandingManager.prototype.calculateExpandingState = function () {
        var params = this._expandingParams;
        var state = this._expandingState;
        return {
            rows: state && _date_utils_1.toStringArray(state.rows) || [],
            columns: state && _date_utils_1.toStringArray(state.columns) || [],
            values: !!params ? _date_utils_1.toStringArray(params.values) : undefined,
            isColumn: !!params && params.isColumn
        };
    };
    ExpandingManager.prototype.resetExpandingParams = function () {
        this._expandingParams = undefined;
    };
    ExpandingManager.prototype.resetColumnViewState = function () {
        this._expandingState = { rows: this._expandingState.rows, columns: [] };
    };
    ExpandingManager.prototype.resetRowViewState = function () {
        this._expandingState = { rows: [], columns: this._expandingState.columns };
    };
    return ExpandingManager;
}());
exports.ExpandingManager = ExpandingManager;


/***/ }),
/* 458 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ObsoleteDashboardState = (function () {
    function ObsoleteDashboardState() {
    }
    return ObsoleteDashboardState;
}());
exports.ObsoleteDashboardState = ObsoleteDashboardState;
var ObsoleteItemState = (function () {
    function ObsoleteItemState() {
    }
    ObsoleteItemState.unwrapDilldownValues = function (values) {
        if (!values) {
            return null;
        }
        return values.map(function (value) { return value[0][0]; });
    };
    return ObsoleteItemState;
}());
exports.ObsoleteItemState = ObsoleteItemState;


/***/ }),
/* 459 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var LimitDataState = (function () {
    function LimitDataState() {
        this._visible = false;
        this._enabled = true;
    }
    Object.defineProperty(LimitDataState.prototype, "enabled", {
        get: function () {
            return this._enabled;
        },
        enumerable: true,
        configurable: true
    });
    LimitDataState.prototype.setReduced = function () {
        this._visible = true;
        this._enabled = true;
    };
    LimitDataState.prototype.getViewModel = function () {
        return {
            isReduceMode: this._visible,
            isReduced: this._enabled,
        };
    };
    LimitDataState.prototype.toggle = function () {
        this._enabled = !this._enabled;
    };
    LimitDataState.prototype.reset = function () {
        this._visible = false;
        this._enabled = true;
    };
    return LimitDataState;
}());
exports.LimitDataState = LimitDataState;


/***/ }),
/* 460 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var serializable_model_1 = __webpack_require__(5);
var _dashboard_item_coloring_options_1 = __webpack_require__(189);
var DashboardItemColoringOptions = (function (_super) {
    __extends(DashboardItemColoringOptions, _super);
    function DashboardItemColoringOptions(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    DashboardItemColoringOptions.prototype.getInfo = function () {
        return _dashboard_item_coloring_options_1.dashboardItemColoringOptionsSerializationsInfo;
    };
    return DashboardItemColoringOptions;
}(serializable_model_1.SerializableModel));
exports.DashboardItemColoringOptions = DashboardItemColoringOptions;


/***/ }),
/* 461 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
var _data_dashboard_item_1 = __webpack_require__(26);
exports.customItemType = { propertyName: 'customItemType', modelName: '@CustomItemType' };
exports.sliceTables = { propertyName: 'sliceTables', modelName: 'SliceTables', array: true, category: _base_metadata_1.PropertyCategory.Data };
exports.interactivityTargets = { propertyName: 'interactivityTargets', modelName: 'InteractivityTargets', array: true };
exports.coloringDimensions = { propertyName: 'coloringDimensions', modelName: 'ColoringDimensions', array: true };
exports.coloringMeasures = { propertyName: 'coloringMeasures', modelName: 'ColoringMeasures', array: true };
exports.customDashboardItemSerializationsInfo = _data_dashboard_item_1.dataDashboardItemSerializationsInfo.concat([exports.customItemType, exports.sliceTables, exports.interactivityTargets]);


/***/ }),
/* 462 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var data_item_1 = __webpack_require__(8);
var _utils_1 = __webpack_require__(18);
var serializable_model_1 = __webpack_require__(5);
var _slice_table_1 = __webpack_require__(463);
var SliceTable = (function (_super) {
    __extends(SliceTable, _super);
    function SliceTable(_dataItemProvider, modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this._dataItemProvider = _dataItemProvider;
        _this.dimensions = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(modelJson.Dimensions, function (item) { return new data_item_1.DataItemLink(_dataItemProvider, item, serializer); });
        _this.measures = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(modelJson.Measures, function (item) { return new data_item_1.DataItemLink(_dataItemProvider, item, serializer); });
        return _this;
    }
    SliceTable.prototype.getInfo = function () {
        return _slice_table_1.sliceTableSerializationsInfo;
    };
    SliceTable.prototype.push = function (bindings, dataItemType) {
        var _this = this;
        var targetArray = dataItemType === 'Dimension' ? this.dimensions : this.measures;
        targetArray.push.apply(targetArray, bindings.map(function (link) { return data_item_1.DataItemLink.create(_this._dataItemProvider, link); }));
    };
    __decorate([
        _utils_1.collectionItemType('Dimension')
    ], SliceTable.prototype, "dimensions", void 0);
    __decorate([
        _utils_1.collectionItemType('Measure')
    ], SliceTable.prototype, "measures", void 0);
    return SliceTable;
}(serializable_model_1.SerializableModel));
exports.SliceTable = SliceTable;


/***/ }),
/* 463 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.dimensions = { propertyName: 'dimensions', modelName: 'Dimensions', displayName: 'DashboardStringId.DescriptionDimensions', array: true };
exports.measures = { propertyName: 'measures', modelName: 'Measures', array: true };
exports.sliceTableName = { propertyName: 'name', modelName: '@Name', simpleFormAdapterItem: 'textBoxEditor' };
exports.sliceTableSerializationsInfo = [exports.dimensions, exports.measures, exports.sliceTableName];


/***/ }),
/* 464 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var serializable_model_1 = __webpack_require__(5);
var custom_item_1 = __webpack_require__(103);
function createDashboardItem(dashboardItemJSON, serializer) {
    var customItemTypeName = dashboardItemJSON['@CustomItemType'];
    if (!customItemTypeName) {
        var itemTypeName = dashboardItemJSON['@ItemType'];
        var itemType = serializable_model_1.itemTypesMap[itemTypeName].type;
        return new itemType(dashboardItemJSON, serializer);
    }
    else {
        var customItemType = !!serializable_model_1.itemTypesMap[customItemTypeName] ? serializable_model_1.itemTypesMap[customItemTypeName].type : custom_item_1.CustomItem;
        return new customItemType(serializable_model_1.itemTypesMap[customItemTypeName], dashboardItemJSON, serializer);
    }
}
exports.createDashboardItem = createDashboardItem;


/***/ }),
/* 465 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dashboard_tab_page_1 = __webpack_require__(86);
var tab_container_item_1 = __webpack_require__(87);
var dashboard_layout_group_1 = __webpack_require__(105);
var DashboardLayoutCreator = (function () {
    function DashboardLayoutCreator(_clientWidth, _clientHeight, _dashboard) {
        if (_clientWidth === void 0) { _clientWidth = 1; }
        if (_clientHeight === void 0) { _clientHeight = 1; }
        this._clientWidth = _clientWidth;
        this._clientHeight = _clientHeight;
        this._dashboard = _dashboard;
        this._layoutRoot = this._dashboard.layout();
        this.rebuildLayout();
    }
    DashboardLayoutCreator.prototype.rebuildLayout = function () {
        this._removeIncorrectLayoutNodes();
        if (this._layoutRoot.childNodes().length === 0) {
            this._layoutRoot.childNodes.push(new dashboard_layout_group_1.DashboardLayoutGroup());
        }
        this._createLayoutNodes(this._dashboard.items().filter(function (item) { return item instanceof tab_container_item_1.TabContainerItem; }));
        this._createLayoutNodes(this._dashboard._tabPages());
        this._createLayoutNodes(this._dashboard.groups());
        this._createLayoutNodes(this._dashboard.items());
    };
    DashboardLayoutCreator.prototype._removeIncorrectLayoutNodes = function () {
        var _this = this;
        var layoutNodesToRemove = this._layoutRoot.getNodesRecursive().filter(function (layoutNode) {
            if (layoutNode.dashboardItem()) {
                var dashboardItem = _this._dashboard.findItem(layoutNode.dashboardItem());
                if (!dashboardItem) {
                    return true;
                }
                else if (!!dashboardItem.parentContainer()) {
                    var parent_1 = layoutNode.parentNode();
                    while (parent_1 != _this._layoutRoot && parent_1.dashboardItem() == null)
                        parent_1 = parent_1.parentNode();
                    if (parent_1.dashboardItem() !== dashboardItem.parentContainer())
                        return true;
                }
            }
            else if (layoutNode instanceof dashboard_layout_group_1.DashboardLayoutGroup && layoutNode.childNodes().length === 0) {
                return true;
            }
            return false;
        });
        layoutNodesToRemove.forEach(function (layoutNode) { return layoutNode.remove(); });
    };
    DashboardLayoutCreator.prototype._getParentItem = function (dashboardItem) {
        if (dashboardItem instanceof dashboard_tab_page_1.DashboardTabPage) {
            return this._dashboard.items()
                .filter(function (item) { return item instanceof tab_container_item_1.TabContainerItem; })
                .filter(function (tabContainer) { return tabContainer.tabPages().indexOf(dashboardItem) !== -1; })[0];
        }
        return this._dashboard.findItem(dashboardItem.parentContainer());
    };
    DashboardLayoutCreator.prototype._createLayoutNodes = function (dashboardItems) {
        var _this = this;
        dashboardItems
            .filter(function (dashboardItem) { return !_this._layoutRoot.findLayoutItem(dashboardItem); })
            .forEach(function (dashboardItem) {
            var parentNode = null;
            var parentItem = _this._getParentItem(dashboardItem);
            if (parentItem) {
                parentNode = _this._layoutRoot.findLayoutItem(parentItem);
            }
            if (!parentNode) {
                parentNode = _this._layoutRoot.childNodes()[0];
            }
            _this._createLayoutNode(dashboardItem, parentNode);
        });
    };
    DashboardLayoutCreator.prototype._createLayoutNode = function (dashboardItem, layoutGroup) {
        if (layoutGroup.childNodes().length == 0 || this._getParentItem(dashboardItem) instanceof tab_container_item_1.TabContainerItem) {
            layoutGroup.childNodes.push(this._dashboard._createDashboardLayoutNode(dashboardItem));
            return;
        }
        var maxItem = layoutGroup.getItemsRecursive().reduce(function (acc, layoutNode) {
            if (acc === null) {
                return layoutNode;
            }
            else {
                if (acc._relativeArea() < layoutNode._relativeArea())
                    return layoutNode;
                return acc;
            }
        }, null);
        var newLayoutNode = this._dashboard._createDashboardLayoutNode(dashboardItem);
        if (maxItem == null) {
            layoutGroup.childNodes.push(newLayoutNode);
            return;
        }
        if (maxItem.parentNode().orientation() === 'Horizontal') {
            if (maxItem._relativeHeight() * this._clientHeight < maxItem._relativeWidth() * this._clientWidth) {
                maxItem.weight(maxItem.weight() / 2);
                newLayoutNode.weight(maxItem.weight());
                maxItem.insert(newLayoutNode, 'right');
            }
            else {
                newLayoutNode.weight(maxItem.weight());
                maxItem.insert(newLayoutNode, 'bottom');
            }
        }
        else {
            if (maxItem._relativeHeight() * this._clientHeight > maxItem._relativeWidth() * this._clientWidth) {
                maxItem.weight(maxItem.weight() / 2);
                newLayoutNode.weight(maxItem.weight());
                maxItem.insert(newLayoutNode, 'bottom');
            }
            else {
                newLayoutNode.weight(maxItem.weight());
                maxItem.insert(newLayoutNode, 'right');
            }
        }
    };
    return DashboardLayoutCreator;
}());
exports.DashboardLayoutCreator = DashboardLayoutCreator;


/***/ }),
/* 466 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
var _dashboard_item_1 = __webpack_require__(74);
exports.tabPages = { propertyName: 'tabPages', modelName: 'Pages', array: true, category: _base_metadata_1.PropertyCategory.NoUpdate };
exports.tabContainerItemSerializationInfo = _dashboard_item_1.dashboardItemSerializationsInfo.concat([exports.tabPages]);


/***/ }),
/* 467 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _dashboard_item_1 = __webpack_require__(74);
var interactivity_options_1 = __webpack_require__(32);
exports.groupItemSerializationInfo = _dashboard_item_1.dashboardItemSerializationsInfo.concat([interactivity_options_1._groupItemInteractivityOptionsMeta]);


/***/ }),
/* 468 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var dashboard_layout_node_1 = __webpack_require__(190);
var DashboardLayoutItemPlaceholder = (function (_super) {
    __extends(DashboardLayoutItemPlaceholder, _super);
    function DashboardLayoutItemPlaceholder(parent, serializer) {
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, {}, serializer) || this;
        _this.parentNode(parent);
        return _this;
    }
    Object.defineProperty(DashboardLayoutItemPlaceholder.prototype, "_template", {
        get: function () { return 'dx-dashboard-item-placeholder'; },
        enumerable: true,
        configurable: true
    });
    DashboardLayoutItemPlaceholder.prototype.moveTo = function (itemModel, location) { };
    DashboardLayoutItemPlaceholder.prototype._delete = function () { };
    DashboardLayoutItemPlaceholder.prototype._createViewModel = function () {
        var _this = this;
        var baseViewModel = _super.prototype._createViewModel.call(this);
        baseViewModel.create = function (modelItemJson, location) {
            var newItemModel = _this.parentNode()._dashboard()._createDashboardLayoutItem(modelItemJson);
            _this.parentNode()._addItem(newItemModel);
            return newItemModel._createViewModel();
        };
        baseViewModel.moveTo = function (itemModel, location) { };
        baseViewModel.hasItem = ko.observable(true);
        return baseViewModel;
    };
    DashboardLayoutItemPlaceholder.prototype._insertItemCore = function (layoutNodeToInsert, position) {
        if (this.parentNode()) {
            this.parentNode().childNodes.push(layoutNodeToInsert);
        }
    };
    DashboardLayoutItemPlaceholder.prototype._getDefaultItemType = function () { return ''; };
    return DashboardLayoutItemPlaceholder;
}(dashboard_layout_node_1.DashboardLayoutNode));
exports.DashboardLayoutItemPlaceholder = DashboardLayoutItemPlaceholder;


/***/ }),
/* 469 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _measure_calculation_1 = __webpack_require__(82);
exports.target = {
    propertyName: 'target', modelName: '@Target', displayName: 'DashboardStringId.TargetValueCaption', defaultVal: 'Previous', simpleFormAdapterItem: 'selectBoxEditor', values: {
        'Previous': 'DashboardStringId.DifferenceCalculationTargetPrevious',
        'Next': 'DashboardStringId.DifferenceCalculationTargetNext',
        'First': 'DashboardStringId.DifferenceCalculationTargetFirst',
        'Last': 'DashboardStringId.DifferenceCalculationTargetLast'
    }
};
exports.differenceType = {
    propertyName: 'differenceType', modelName: '@DifferenceType', displayName: 'DashboardWebStringId.Calculations.DifferenceType', defaultVal: 'Absolute', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Absolute': 'DashboardStringId.DeltaThresholdTypeAbsolute',
        'Percentage': 'DashboardStringId.DeltaThresholdTypePercent'
    }
};
exports.differenceCalculationSerializationsInfo = _measure_calculation_1.measureCalculationSerializationsInfo.concat([exports.target, exports.differenceType]);


/***/ }),
/* 470 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _measure_calculation_1 = __webpack_require__(82);
exports.percentOfTotalCalculationSerializationsInfo = _measure_calculation_1.measureCalculationSerializationsInfo.concat([]);


/***/ }),
/* 471 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _measure_calculation_1 = __webpack_require__(82);
exports.calculationRankType = {
    propertyName: 'rankType', modelName: '@RankType', displayName: 'DashboardWebStringId.Calculations.RankType', defaultVal: 'Competition', simpleFormAdapterItem: 'selectBoxEditor', values: {
        'Unique': 'DashboardStringId.RankTypeUnique',
        'Competition': 'DashboardStringId.RankTypeCompetition',
        'Dense': 'DashboardStringId.RankTypeDense',
        'Modified': 'DashboardStringId.RankTypeModified',
        'Percentile': 'DashboardStringId.RankTypePercentile'
    }
};
exports.calculationRankOrder = {
    propertyName: 'rankOrder', modelName: '@RankOrder', displayName: 'DashboardWebStringId.Calculations.RankOrder', defaultVal: 'Ascending', simpleFormAdapterItem: 'buttonGroupEditor', values: {
        'Ascending': 'DashboardStringId.RankOrderAscending',
        'Descending': 'DashboardStringId.RankOrderDescending'
    }
};
exports.rankCalculationSerializationsInfo = _measure_calculation_1.measureCalculationSerializationsInfo.concat([exports.calculationRankType, exports.calculationRankOrder]);


/***/ }),
/* 472 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _measure_calculation_1 = __webpack_require__(82);
var _moving_calculation_1 = __webpack_require__(288);
exports.runningTotalCalculationSerializationsInfo = _measure_calculation_1.measureCalculationSerializationsInfo.concat([_moving_calculation_1.summaryType]);


/***/ }),
/* 473 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _measure_calc_window_definition_1 = __webpack_require__(51);
exports.cardDefinitionMode = {
    propertyName: 'definitionMode', modelName: '@DefinitionMode', defaultVal: 'Cards', simpleFormAdapterItem: 'selectBoxEditor', values: {
        'Cards': 'DashboardStringId.CardCalculationAlongCards',
        'SparklineArgument': 'DashboardStringId.CardCalculationAlongSparklineArgument',
        'CardsAndSparklineArgument': 'DashboardStringId.CardCalculationAlongCardsAndSparklineArgument',
        'SparklineArgumentAndCards': 'DashboardStringId.CardCalculationAlongSparklineArgumentAndCards'
    }
};
exports.cardWindowDefinitionSerializationsInfo = _measure_calc_window_definition_1.measureCalculationWindowDefinitionSerializationsInfo.concat([exports.cardDefinitionMode]);


/***/ }),
/* 474 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _measure_calc_window_definition_1 = __webpack_require__(51);
exports.chartDefinitionMode = {
    propertyName: 'definitionMode', modelName: '@DefinitionMode', defaultVal: 'Arguments', simpleFormAdapterItem: 'selectBoxEditor', values: {
        'Arguments': 'DashboardStringId.ChartCalculationAlongArguments',
        'Series': 'DashboardStringId.ChartCalculationAlongSeries',
        'ArgumentsAndSeries': 'DashboardStringId.ChartCalculationAlongArgumentsAndSeries',
        'SeriesAndArguments': 'DashboardStringId.ChartCalculationAlongSeriesAndArguments'
    }
};
exports.chartWindowDefinitionSerializationsInfo = _measure_calc_window_definition_1.measureCalculationWindowDefinitionSerializationsInfo.concat([exports.chartDefinitionMode]);


/***/ }),
/* 475 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _measure_calc_window_definition_1 = __webpack_require__(51);
exports.gaugeWindowDefinitionSerializationsInfo = _measure_calc_window_definition_1.measureCalculationWindowDefinitionSerializationsInfo.concat([]);


/***/ }),
/* 476 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _measure_calc_window_definition_1 = __webpack_require__(51);
exports.gridDefinitionMode = {
    propertyName: 'definitionMode', modelName: '@DefinitionMode', defaultVal: 'Rows', simpleFormAdapterItem: 'selectBoxEditor', values: {
        'Rows': 'DashboardStringId.GridCalculationAlongRows',
        'SparklineArgument': 'DashboardStringId.GridCalculationAlongSparklineArgument',
        'RowsAndSparklineArgument': 'DashboardStringId.GridCalculationAlongRowsAndSparklineArgument',
        'SparklineArgumentAndRows': 'DashboardStringId.GridCalculationAlongSparklineArgumentAndRows'
    }
};
exports.gridWindowDefinitionSerializationsInfo = _measure_calc_window_definition_1.measureCalculationWindowDefinitionSerializationsInfo.concat([exports.gridDefinitionMode]);


/***/ }),
/* 477 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _measure_calc_window_definition_1 = __webpack_require__(51);
exports.pieDefinitionMode = {
    propertyName: 'definitionMode', modelName: '@DefinitionMode', defaultVal: 'Series', simpleFormAdapterItem: 'selectBoxEditor', values: {
        'Arguments': 'DashboardStringId.PieCalculationAlongArguments',
        'Series': 'DashboardStringId.PieCalculationAlongSeries',
        'ArgumentsAndSeries': 'DashboardStringId.PieCalculationAlongArgumentsAndSeries',
        'SeriesAndArguments': 'DashboardStringId.PieCalculationAlongSeriesAndArguments'
    }
};
exports.pieWindowDefinitionSerializationsInfo = _measure_calc_window_definition_1.measureCalculationWindowDefinitionSerializationsInfo.concat([exports.pieDefinitionMode]);


/***/ }),
/* 478 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _measure_calc_window_definition_1 = __webpack_require__(51);
exports.pivotDefinitionMode = {
    propertyName: 'definitionMode', modelName: '@DefinitionMode', defaultVal: 'Columns', simpleFormAdapterItem: 'selectBoxEditor', values: {
        'Columns': 'DashboardStringId.PivotCalculationAlongColumns',
        'Rows': 'DashboardStringId.PivotCalculationAlongRows',
        'ColumnsAndRows': 'DashboardStringId.PivotCalculationAlongColumnsAndRows',
        'RowsAndColumns': 'DashboardStringId.PivotCalculationAlongRowsAndColumns',
        'GroupsInColumns': 'DashboardStringId.PivotCalculationAlongGroupsInColumns',
        'GroupsInRows': 'DashboardStringId.PivotCalculationAlongGroupsInRows',
        'GroupsInColumnsAndRows': 'DashboardStringId.PivotCalculationAlongGroupsInColumnsAndRows',
        'GroupsInRowsAndColumns': 'DashboardStringId.PivotCalculationAlongGroupsInRowsAndColumns'
    }
};
exports.pivotWindowDefinitionSerializationsInfo = _measure_calc_window_definition_1.measureCalculationWindowDefinitionSerializationsInfo.concat([exports.pivotDefinitionMode]);


/***/ }),
/* 479 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _measure_calc_window_definition_1 = __webpack_require__(51);
exports.rangeFilterDefinitionMode = {
    propertyName: 'definitionMode', modelName: '@DefinitionMode', defaultVal: 'Argument', simpleFormAdapterItem: 'selectBoxEditor', values: {
        'Argument': 'DashboardStringId.RangeFilterCalculationAlongArgument',
        'Series': 'DashboardStringId.RangeFilterCalculationAlongSeries',
        'ArgumentAndSeries': 'DashboardStringId.RangeFilterCalculationAlongArgumentAndSeries',
        'SeriesAndArgument': 'DashboardStringId.RangeFilterCalculationAlongSeriesAndArgument'
    }
};
exports.rangeFilterWindowDefinitionSerializationsInfo = _measure_calc_window_definition_1.measureCalculationWindowDefinitionSerializationsInfo.concat([exports.rangeFilterDefinitionMode]);


/***/ }),
/* 480 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _measure_calc_window_definition_1 = __webpack_require__(51);
exports.scatterWindowDefinitionSerializationsInfo = _measure_calc_window_definition_1.measureCalculationWindowDefinitionSerializationsInfo.concat([]);


/***/ }),
/* 481 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
var fromAppConfig = { propertyName: 'fromAppConfig', modelName: '@FromAppConfig' };
exports.connectionSerializationsInfo = [_base_metadata_1.name, fromAppConfig];


/***/ }),
/* 482 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _data_source_1 = __webpack_require__(61);
exports.efDataSourceSerializationsInfo = _data_source_1.dataSourceSerializationsInfo;


/***/ }),
/* 483 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
var _data_source_1 = __webpack_require__(61);
exports.excelDataSourceSerializationsInfo = _data_source_1.dataSourceSerializationsInfo.concat([_base_metadata_1.filter]);


/***/ }),
/* 484 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _data_source_1 = __webpack_require__(61);
exports.extractDataSourceSerializationsInfo = _data_source_1.dataSourceSerializationsInfo;


/***/ }),
/* 485 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
var _data_source_1 = __webpack_require__(61);
exports.aliasProperty = { propertyName: 'alias', modelName: '@Alias' };
exports.queryNodeSerializationsInfo = [_base_metadata_1.itemType, exports.aliasProperty];
exports.queryNodes = { propertyName: 'queries', modelName: 'Queries', array: true };
exports.idProperty = { propertyName: 'id', modelName: '@ID' };
exports.contextItemSerializationsInfo = [_base_metadata_1.itemType, exports.idProperty];
exports.context = { propertyName: 'context', modelName: 'Context', array: true };
exports.dataSourceProperty = { propertyName: 'dataSource', modelName: 'DataSource' };
exports.dataMemberProperty = { propertyName: 'dataMember', modelName: 'DataMember' };
exports.sourceSerializationsInfo = [_base_metadata_1.itemType, exports.dataSourceProperty, exports.dataMemberProperty, _base_metadata_1.name];
exports.sources = { propertyName: 'sources', modelName: 'Sources', array: true };
exports.federationDataSourceSerializationsInfo = _data_source_1.dataSourceSerializationsInfo.concat([exports.queryNodes, exports.context, exports.sources]);


/***/ }),
/* 486 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
var _data_source_1 = __webpack_require__(61);
exports.objectDataSourceSerializationsInfo = _data_source_1.dataSourceSerializationsInfo.concat([_base_metadata_1.filter]);


/***/ }),
/* 487 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _data_source_1 = __webpack_require__(61);
exports.connectionName = { propertyName: 'connectionName', modelName: '@ConnectionName' };
exports.olapDataSourceSerializationsInfo = _data_source_1.dataSourceSerializationsInfo.concat([exports.connectionName]);


/***/ }),
/* 488 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var connection_1 = __webpack_require__(489);
var _data_source_1 = __webpack_require__(61);
exports.queries = { propertyName: 'queries', modelName: 'Queries', array: true };
exports.selectedTables = { propertyName: 'selectedTables', modelName: 'SelectedTables', array: true };
exports.connection = { propertyName: 'connection', modelName: 'Connection', type: connection_1.SqlConnection };
exports.sqlDataSourceSerializationsInfo = _data_source_1.dataSourceSerializationsInfo.concat([exports.queries, exports.connection]);


/***/ }),
/* 489 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var serializable_model_1 = __webpack_require__(5);
var _connection_1 = __webpack_require__(481);
var SqlConnection = (function (_super) {
    __extends(SqlConnection, _super);
    function SqlConnection(connectionJSON, serializer) {
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, connectionJSON, serializer) || this;
    }
    SqlConnection.prototype.getInfo = function () {
        return _connection_1.connectionSerializationsInfo;
    };
    return SqlConnection;
}(serializable_model_1.SerializableModel));
exports.SqlConnection = SqlConnection;


/***/ }),
/* 490 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _data_item_1 = __webpack_require__(20);
var _base_metadata_1 = __webpack_require__(4);
var _kpi_item_1 = __webpack_require__(194);
exports.cards = { propertyName: 'cards', modelName: 'Cards', displayName: 'DashboardStringId.DefaultNameCardItem', array: true };
exports.cardSparklineArgument = { propertyName: _base_metadata_1.sparklineArgumentPropertyName, modelName: 'SparklineArgument', displayName: 'DashboardStringId.CardCalculationAlongSparklineArgument', info: _data_item_1.dataItemLinkSerializationsInfo };
exports.cardDashboardItemSerializationsInfo = _kpi_item_1.kpiDashboardItemSerializationsInfo.concat([exports.cards, exports.cardSparklineArgument]);


/***/ }),
/* 491 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var card_layout_1 = __webpack_require__(492);
var card_layout_template_element_1 = __webpack_require__(496);
var _card_layout_1 = __webpack_require__(195);
exports.type = { propertyName: 'type', modelName: '@Type' };
exports.templateSerializationInfo = [_card_layout_1.minWidth, _card_layout_1.maxWidth, exports.type];
exports.cardLayout = { propertyName: 'layout', modelName: 'Layout', type: card_layout_1.CardLayout };
exports.customTemplateSerializationInfo = exports.templateSerializationInfo.concat([exports.cardLayout]);
exports.mainValue = { propertyName: 'mainValue', modelName: 'MainValue', type: card_layout_template_element_1.CardLayoutTemplateDataElement };
exports.subValue = { propertyName: 'subValue', modelName: 'SubValue', type: card_layout_template_element_1.CardLayoutTemplateDataElement };
exports.deltaIndicator = { propertyName: 'deltaIndicator', modelName: 'DeltaIndicator', type: card_layout_template_element_1.CardLayoutTemplateDeltaElement };
exports.cardLayoutSparkline = { propertyName: 'sparkline', modelName: 'Sparkline', type: card_layout_template_element_1.CardLayoutTemplateSparklineElement };
exports.bottomValue = { propertyName: 'bottomValue', modelName: 'BottomValue', type: card_layout_template_element_1.CardLayoutTemplateDataElement };
exports.bottomSubValue1 = { propertyName: 'bottomSubValue1', modelName: 'BottomSubValue1', type: card_layout_template_element_1.CardLayoutTemplateDataElement };
exports.bottomSubValue2 = { propertyName: 'bottomSubValue2', modelName: 'BottomSubValue2', type: card_layout_template_element_1.CardLayoutTemplateDataElement };
exports.deltaCompactTemplateSerializationInfo = exports.templateSerializationInfo.concat([exports.mainValue, exports.subValue, exports.bottomValue, exports.bottomSubValue1, exports.bottomSubValue2, exports.deltaIndicator, exports.cardLayoutSparkline]);
exports.topValue = { propertyName: 'topValue', modelName: 'TopValue', type: card_layout_template_element_1.CardLayoutTemplateDataElement };
exports.bottomValue1 = { propertyName: 'bottomValue1', modelName: 'BottomValue1', type: card_layout_template_element_1.CardLayoutTemplateDataElement };
exports.bottomValue2 = { propertyName: 'bottomValue2', modelName: 'BottomValue2', type: card_layout_template_element_1.CardLayoutTemplateDataElement };
exports.autofitTemplateSerializationInfo = exports.templateSerializationInfo.concat([exports.topValue, exports.mainValue, exports.subValue, exports.bottomValue1, exports.bottomValue2, exports.deltaIndicator, exports.cardLayoutSparkline]);
exports.nameValueTemplateSerializationInfo = exports.templateSerializationInfo.concat([exports.mainValue, exports.subValue, exports.bottomValue, exports.deltaIndicator, exports.cardLayoutSparkline]);
exports.ultraCompactTemplateSerializationInfo = exports.templateSerializationInfo.concat([exports.mainValue, exports.subValue, exports.bottomValue, exports.bottomSubValue1, exports.bottomSubValue2, exports.deltaIndicator, exports.cardLayoutSparkline]);


/***/ }),
/* 492 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var serializable_model_1 = __webpack_require__(5);
var card_row_1 = __webpack_require__(493);
var _card_layout_1 = __webpack_require__(195);
var CardLayout = (function (_super) {
    __extends(CardLayout, _super);
    function CardLayout(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.templateID = ko.observable(-1);
        _this.rows = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(modelJson.CardRows, function (item) { return _this.createRow(item, serializer); });
        return _this;
    }
    CardLayout.prototype.createRow = function (elementJSON, serializer) {
        var itemType = elementJSON['@ItemType'];
        return new CardLayout.rowTypes[itemType].constructor(elementJSON, serializer);
    };
    CardLayout.prototype.getInfo = function () {
        return _card_layout_1.cardLayoutSerializationInfo;
    };
    CardLayout.prototype.grabFrom = function (newLayout) {
        this.minWidth = newLayout.minWidth;
        this.maxWidth = newLayout.maxWidth;
        this.rows(newLayout.rows());
    };
    CardLayout.rowTypes = {
        'CardRow': {
            constructor: card_row_1.CardRow
        },
        'CardSparklineRow': {
            constructor: card_row_1.CardSparklineRow
        }
    };
    return CardLayout;
}(serializable_model_1.SerializableModel));
exports.CardLayout = CardLayout;


/***/ }),
/* 493 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var serializable_model_1 = __webpack_require__(5);
var card_row_element_1 = __webpack_require__(494);
var _card_row_1 = __webpack_require__(292);
var CardRowBase = (function (_super) {
    __extends(CardRowBase, _super);
    function CardRowBase(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    CardRowBase.prototype.getInfo = function () {
        return _card_row_1.cardRowBaseSerializationInfo;
    };
    return CardRowBase;
}(serializable_model_1.TypedSerializableModel));
exports.CardRowBase = CardRowBase;
var CardRow = (function (_super) {
    __extends(CardRow, _super);
    function CardRow(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.elements = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(modelJson.CardRowElements, function (item) { return _this.createRowElement(item, serializer); });
        return _this;
    }
    CardRow.prototype.createRowElement = function (elementJSON, serializer) {
        var itemType = elementJSON['@ItemType'];
        return new CardRow.elementItemTypes[itemType].constructor(elementJSON, serializer);
    };
    CardRow.prototype.getInfo = function () {
        return _card_row_1.cardRowSerializationInfo;
    };
    CardRow.prototype._getDefaultItemType = function () {
        return 'CardRow';
    };
    CardRow.elementItemTypes = {
        'CardRowDataElement': {
            constructor: card_row_element_1.CardRowDataElement
        },
        'CardRowIndicatorElement': {
            constructor: card_row_element_1.CardRowIndicatorElement
        },
        'CardRowTextElement': {
            constructor: card_row_element_1.CardRowTextElement
        }
    };
    return CardRow;
}(CardRowBase));
exports.CardRow = CardRow;
var CardSparklineRow = (function (_super) {
    __extends(CardSparklineRow, _super);
    function CardSparklineRow(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    CardSparklineRow.prototype.getInfo = function () {
        return _card_row_1.cardSparklineRowSerializationInfo;
    };
    CardSparklineRow.prototype._getDefaultItemType = function () {
        return 'CardSparklineRow';
    };
    return CardSparklineRow;
}(CardRowBase));
exports.CardSparklineRow = CardSparklineRow;


/***/ }),
/* 494 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var serializable_model_1 = __webpack_require__(5);
var _card_row_element_1 = __webpack_require__(495);
var CardRowElement = (function (_super) {
    __extends(CardRowElement, _super);
    function CardRowElement(modelJson, serializer) {
        return _super.call(this, modelJson, serializer) || this;
    }
    CardRowElement.prototype.getInfo = function () {
        return _card_row_element_1.cardRowElementSerializationsInfo;
    };
    return CardRowElement;
}(serializable_model_1.TypedSerializableModel));
exports.CardRowElement = CardRowElement;
var CardRowTextElementBase = (function (_super) {
    __extends(CardRowTextElementBase, _super);
    function CardRowTextElementBase(modelJson, serializer) {
        return _super.call(this, modelJson, serializer) || this;
    }
    CardRowTextElementBase.prototype.getInfo = function () {
        return _card_row_element_1.cardRowTextElementBaseSerializationInfo;
    };
    return CardRowTextElementBase;
}(CardRowElement));
exports.CardRowTextElementBase = CardRowTextElementBase;
var CardRowDataElement = (function (_super) {
    __extends(CardRowDataElement, _super);
    function CardRowDataElement(modelJson, serializer) {
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.title = ko.computed(function () { return _this.valueType(); });
        return _this;
    }
    CardRowDataElement.prototype.getInfo = function () {
        return _card_row_element_1.cardRowDataElementSerializationInfo;
    };
    CardRowDataElement.prototype._getDefaultItemType = function () {
        return 'CardRowDataElement';
    };
    return CardRowDataElement;
}(CardRowTextElementBase));
exports.CardRowDataElement = CardRowDataElement;
var CardRowTextElement = (function (_super) {
    __extends(CardRowTextElement, _super);
    function CardRowTextElement(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    CardRowTextElement.prototype.getInfo = function () {
        return _card_row_element_1.cardRowTextElementSerializationInfo;
    };
    CardRowTextElement.prototype._getDefaultItemType = function () {
        return 'CardRowTextElement';
    };
    return CardRowTextElement;
}(CardRowTextElementBase));
exports.CardRowTextElement = CardRowTextElement;
var CardRowIndicatorElement = (function (_super) {
    __extends(CardRowIndicatorElement, _super);
    function CardRowIndicatorElement(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    CardRowIndicatorElement.prototype.getInfo = function () {
        return _card_row_element_1.cardRowIndicatorElementSerializationInfo;
    };
    CardRowIndicatorElement.prototype._getDefaultItemType = function () {
        return 'CardRowIndicatorElement';
    };
    return CardRowIndicatorElement;
}(CardRowElement));
exports.CardRowIndicatorElement = CardRowIndicatorElement;


/***/ }),
/* 495 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
exports.hAlignment = { propertyName: 'hAlignment', modelName: '@HAlignment' };
exports.cardRowElementSerializationsInfo = [_base_metadata_1.itemType, exports.hAlignment];
exports.cardRowElementColor = { propertyName: 'color', modelName: '@ForeColor' };
exports.cardRowFontFamily = { propertyName: 'fontFamily', modelName: '@FontFamily' };
exports.cardRowFontSize = { propertyName: 'fontSize', modelName: '@FontSize' };
exports.predefinedForeColor = { propertyName: 'predefinedForeColor', modelName: 'PredefinedForeColor' };
exports.cardRowTextElementBaseSerializationInfo = exports.cardRowElementSerializationsInfo.concat([exports.cardRowElementColor, exports.cardRowFontFamily, exports.cardRowFontSize, exports.predefinedForeColor]);
exports.cardRowDataElementValueType = { propertyName: 'valueType', modelName: '@ValueType' };
exports.cardRowDataElementDimensionIndex = { propertyName: 'dimensionIndex', modelName: '@DimensionIndex' };
exports.cardRowDataElementSerializationInfo = exports.cardRowTextElementBaseSerializationInfo.concat([exports.cardRowDataElementValueType, exports.cardRowDataElementDimensionIndex]);
exports.text = { propertyName: 'text', modelName: '@Text' };
exports.cardRowTextElementSerializationInfo = exports.cardRowTextElementBaseSerializationInfo.concat([exports.text]);
exports.size = { propertyName: 'size', modelName: '@Size', defaultVal: 16 };
exports.cardRowIndicatorElementSerializationInfo = exports.cardRowElementSerializationsInfo.concat([exports.size]);


/***/ }),
/* 496 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var serializable_model_1 = __webpack_require__(5);
var _card_layout_template_element_1 = __webpack_require__(293);
var CardLayoutTemplateElementBase = (function (_super) {
    __extends(CardLayoutTemplateElementBase, _super);
    function CardLayoutTemplateElementBase(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    CardLayoutTemplateElementBase.prototype._createEditorModel = function (dimensionNames) {
        return {
            title: this._getTitle(dimensionNames),
            checked: this.visible
        };
    };
    CardLayoutTemplateElementBase.prototype.getInfo = function () {
        return _card_layout_template_element_1.cardLayoutTemplateElementBaseSerializationInfo;
    };
    CardLayoutTemplateElementBase.prototype._initDefault = function (visible, valueType, dimenstionIndex) {
        if (visible === void 0) { visible = true; }
        if (valueType === void 0) { valueType = null; }
        if (dimenstionIndex === void 0) { dimenstionIndex = 0; }
        this.visible(visible);
    };
    return CardLayoutTemplateElementBase;
}(serializable_model_1.SerializableModel));
exports.CardLayoutTemplateElementBase = CardLayoutTemplateElementBase;
var CardLayoutTemplateDeltaElement = (function (_super) {
    __extends(CardLayoutTemplateDeltaElement, _super);
    function CardLayoutTemplateDeltaElement(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    CardLayoutTemplateDeltaElement.prototype._getTitle = function () {
        return ko.computed(function () { return _default_1.getLocalizationById(_card_layout_template_element_1.сardRowDataElementTypeValuesMapEx.DeltaIndicator); });
    };
    return CardLayoutTemplateDeltaElement;
}(CardLayoutTemplateElementBase));
exports.CardLayoutTemplateDeltaElement = CardLayoutTemplateDeltaElement;
var CardLayoutTemplateSparklineElement = (function (_super) {
    __extends(CardLayoutTemplateSparklineElement, _super);
    function CardLayoutTemplateSparklineElement(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    CardLayoutTemplateSparklineElement.prototype._getTitle = function () {
        return ko.computed(function () { return _default_1.getLocalizationById(_card_layout_template_element_1.сardRowDataElementTypeValuesMapEx.Sparkline); });
    };
    return CardLayoutTemplateSparklineElement;
}(CardLayoutTemplateElementBase));
exports.CardLayoutTemplateSparklineElement = CardLayoutTemplateSparklineElement;
var CardLayoutTemplateDataElement = (function (_super) {
    __extends(CardLayoutTemplateDataElement, _super);
    function CardLayoutTemplateDataElement(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    CardLayoutTemplateDataElement.prototype._getTitle = function (dimensionNames) {
        var _this = this;
        return ko.computed(function () {
            var res = _default_1.getLocalizationById(_card_layout_template_element_1.сardRowDataElementTypeValuesMapEx[_this.valueType()]);
            if (_this.valueType() === 'DimensionValue') {
                res += ' ' + (dimensionNames[_this.dimensionIndex()] || ('[' + _this.dimensionIndex() + ']'));
            }
            return res;
        });
    };
    CardLayoutTemplateDataElement.prototype.getInfo = function () {
        return _card_layout_template_element_1.cardLayoutTemplateDataElementSerializationInfo;
    };
    CardLayoutTemplateDataElement.prototype._initDefault = function (visible, valueType, dimenstionIndex) {
        if (dimenstionIndex === void 0) { dimenstionIndex = 0; }
        _super.prototype._initDefault.call(this, visible);
        this.valueType(valueType);
        this.dimensionIndex(dimenstionIndex);
    };
    CardLayoutTemplateDataElement.prototype._getEditorProperty = function (valueType, dimensionIndex, dimensionNames) {
        if (dimensionIndex === void 0) { dimensionIndex = 0; }
        var displayText = _default_1.getLocalizationById(_card_layout_template_element_1.сardRowDataElementTypeValuesMapEx[valueType]);
        if (valueType === 'DimensionValue')
            displayText += ' ' + dimensionNames[dimensionIndex];
        return { value: valueType, displayText: displayText, dimensionIndex: dimensionIndex, key: valueType + dimensionIndex };
    };
    CardLayoutTemplateDataElement.prototype._createEditorModel = function (dimensionNames) {
        var _this = this;
        var items = ['Title', 'Subtitle', 'ActualValue', 'TargetValue', 'AbsoluteVariation', 'PercentVariation', 'PercentOfTarget', 'CardName']
            .map(function (valueType) { return _this._getEditorProperty(valueType); })
            .concat(dimensionNames.map(function (name, index) { return _this._getEditorProperty('DimensionValue', index, dimensionNames); }));
        return __assign({}, _super.prototype._createEditorModel.call(this, dimensionNames), { lookupDataSource: items, selectedItem: ko.pureComputed({
                read: function () {
                    var selectedItem = items.filter(function (i) { return i.value === _this.valueType() && i.dimensionIndex === _this.dimensionIndex(); })[0];
                    return selectedItem && selectedItem.key;
                },
                write: function (val) {
                    var newValue = items.filter(function (i) { return i.key === val; })[0];
                    _this.valueType(newValue.value);
                    _this.dimensionIndex(newValue.dimensionIndex);
                }
            }) });
    };
    return CardLayoutTemplateDataElement;
}(CardLayoutTemplateElementBase));
exports.CardLayoutTemplateDataElement = CardLayoutTemplateDataElement;


/***/ }),
/* 497 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var chart_axis_1 = __webpack_require__(197);
exports.chartSeries = { propertyName: 'series', modelName: 'Series', displayName: 'DashboardStringId.DescriptionItemSeries', array: true };
exports.primaryAxisY = { propertyName: 'primaryAxisY', modelName: 'AxisY', displayName: 'DashboardWebStringId.Chart.PrimaryAxisY', type: chart_axis_1.ChartAxisY };
exports.secondaryAxisY = { propertyName: 'secondaryAxisY', modelName: 'SecondaryAxisY', displayName: 'DashboardWebStringId.Chart.SecondaryAxisY', type: chart_axis_1.ChartSecondaryAxisY };
exports.chartPaneName = { propertyName: 'name', modelName: '@Name', displayName: 'DashboardWebStringId.Chart.Name', simpleFormAdapterItem: 'textBoxEditor' };
exports.chartPaneSerializationsInfo = [exports.chartSeries, exports.primaryAxisY, exports.secondaryAxisY, exports.chartPaneName];


/***/ }),
/* 498 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.totalTypeValues = {
    commonCountTypes: ['Count'],
    commonMinMaxTypes: ['Min', 'Max'],
    numericTypes: ['Avg', 'Sum'],
    autoTypes: ['Auto']
};


/***/ }),
/* 499 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var serializable_model_1 = __webpack_require__(5);
var _grid_options_1 = __webpack_require__(305);
var GridOptions = (function (_super) {
    __extends(GridOptions, _super);
    function GridOptions(JSON, serializer) {
        if (JSON === void 0) { JSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, JSON, serializer) || this;
    }
    GridOptions.prototype.getInfo = function () {
        return _grid_options_1.gridOptionsSerializationsInfo;
    };
    GridOptions.prototype._getViewModel = function () {
        return {
            AllowCellMerge: this.allowCellMerge(),
            ColumnWidthMode: this.columnWidthMode(),
            EnableBandedRows: this.enableBandedRows(),
            ShowHorizontalLines: this.showHorizontalLines(),
            ShowVerticalLines: this.showVerticalLines(),
            ShowColumnHeaders: this.showColumnHeaders(),
            WordWrap: this.wordWrap()
        };
    };
    return GridOptions;
}(serializable_model_1.SerializableModel));
exports.GridOptions = GridOptions;


/***/ }),
/* 500 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _data_item_1 = __webpack_require__(20);
var _base_metadata_1 = __webpack_require__(4);
var _geo_point_map_item_base_1 = __webpack_require__(68);
var _map_item_1 = __webpack_require__(44);
exports.bubbleMapWeight = { propertyName: _base_metadata_1.weightPropertyName, modelName: 'Weight', displayName: 'DashboardStringId.WeightCaption', info: _data_item_1.dataItemLinkSerializationsInfo };
exports.bubbleMapColor = { propertyName: _base_metadata_1.colorPropertyName, modelName: 'Color', displayName: 'DashboardStringId.DescriptionItemColor', info: _data_item_1.dataItemLinkSerializationsInfo };
exports.bubbleMapDashboardItemSerializationsInfo = _geo_point_map_item_base_1.geoPointMapDashboardItemBaseSerializationsInfo.concat([exports.bubbleMapWeight, exports.bubbleMapColor, _map_item_1.colorLegend, _map_item_1.weightedLegend]);


/***/ }),
/* 501 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var serializable_model_1 = __webpack_require__(5);
var _custom_shape_file_1 = __webpack_require__(306);
var _custom_shape_file_data_1 = __webpack_require__(136);
var CustomShapefile = (function (_super) {
    __extends(CustomShapefile, _super);
    function CustomShapefile(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.url.subscribe(function (newUrl) { return !!newUrl && _this.data.shapeData(_custom_shape_file_data_1.shapeData.defaultVal); });
        _this.data.shapeData.subscribe(function (newData) { return !!newData && _this.url(undefined); });
        return _this;
    }
    CustomShapefile.prototype.getInfo = function () {
        return _custom_shape_file_1.customShapefileSerializationsInfo;
    };
    return CustomShapefile;
}(serializable_model_1.SerializableModel));
exports.CustomShapefile = CustomShapefile;


/***/ }),
/* 502 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var serializable_model_1 = __webpack_require__(5);
var _custom_shape_file_data_1 = __webpack_require__(136);
var CustomShapefileData = (function (_super) {
    __extends(CustomShapefileData, _super);
    function CustomShapefileData(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.shapeData.subscribe(function (newData) { return !newData && _this.attributeData(_custom_shape_file_data_1.attributeData.defaultVal); });
        return _this;
    }
    CustomShapefileData.prototype.getInfo = function () {
        return _custom_shape_file_data_1.customShapefileDataSerializationsInfo;
    };
    return CustomShapefileData;
}(serializable_model_1.SerializableModel));
exports.CustomShapefileData = CustomShapefileData;


/***/ }),
/* 503 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var serializable_model_1 = __webpack_require__(5);
var _map_legend_1 = __webpack_require__(307);
var MapLegendBase = (function (_super) {
    __extends(MapLegendBase, _super);
    function MapLegendBase(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    MapLegendBase.prototype.getInfo = function () {
        return _map_legend_1.mapLegendBaseSerializationsInfo;
    };
    return MapLegendBase;
}(serializable_model_1.SerializableModel));
exports.MapLegendBase = MapLegendBase;
var WeightedLegend = (function (_super) {
    __extends(WeightedLegend, _super);
    function WeightedLegend(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    WeightedLegend.prototype.getInfo = function () {
        return _map_legend_1.weightedLegendSerializationsInfo;
    };
    return WeightedLegend;
}(MapLegendBase));
exports.WeightedLegend = WeightedLegend;
var MapLegend = (function (_super) {
    __extends(MapLegend, _super);
    function MapLegend(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    MapLegend.prototype.getInfo = function () {
        return _map_legend_1.mapLegendSerializationsInfo;
    };
    return MapLegend;
}(MapLegendBase));
exports.MapLegend = MapLegend;


/***/ }),
/* 504 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var _undo_engine_helper_1 = __webpack_require__(27);
var serializable_model_1 = __webpack_require__(5);
var _map_viewport_1 = __webpack_require__(505);
var MapViewport = (function (_super) {
    __extends(MapViewport, _super);
    function MapViewport(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    MapViewport.prototype.getInfo = function () {
        return _map_viewport_1.mapViewportSerializationsInfo;
    };
    MapViewport.prototype._set = function (viewport, paddings) {
        if (paddings === void 0) { paddings = true; }
        if (!!viewport) {
            this.topLatitude(viewport.TopLatitude);
            this.bottomLatitude(viewport.BottomLatitude);
            this.leftLongitude(viewport.LeftLongitude);
            this.rightLongitude(viewport.RightLongitude);
            this.centerPointLatitude(viewport.CenterPointLatitude);
            this.centerPointLongitude(viewport.CenterPointLongitude);
            this.createViewerPaddings(paddings);
        }
    };
    MapViewport.prototype._createViewModel = function () {
        return {
            TopLatitude: this.topLatitude(),
            BottomLatitude: this.bottomLatitude(),
            CenterPointLatitude: this.centerPointLatitude(),
            CenterPointLongitude: this.centerPointLongitude(),
            LeftLongitude: this.leftLongitude(),
            RightLongitude: this.rightLongitude(),
            CreateViewerPaddings: this.createViewerPaddings()
        };
    };
    __decorate([
        _undo_engine_helper_1.wrapWithUndoRedo
    ], MapViewport.prototype, "_set", null);
    return MapViewport;
}(serializable_model_1.SerializableModel));
exports.MapViewport = MapViewport;


/***/ }),
/* 505 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
exports.topLatitude = { propertyName: 'topLatitude', modelName: '@TopLatitude', displayName: 'DashboardWebStringId.Map.Viewport.TopLatitude', defaultVal: 90, simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel, category: _base_metadata_1.PropertyCategory.NoUpdate };
exports.bottomLatitude = { propertyName: 'bottomLatitude', modelName: '@BottomLatitude', displayName: 'DashboardWebStringId.Map.Viewport.BottomLatitude', defaultVal: -90, simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel, category: _base_metadata_1.PropertyCategory.NoUpdate };
exports.leftLongitude = { propertyName: 'leftLongitude', modelName: '@LeftLongitude', displayName: 'DashboardWebStringId.Map.Viewport.LeftLongitude', defaultVal: -180, simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel, category: _base_metadata_1.PropertyCategory.NoUpdate };
exports.rightLongitude = { propertyName: 'rightLongitude', modelName: '@RightLongitude', displayName: 'DashboardWebStringId.Map.Viewport.RightLongitude', defaultVal: 180, simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel, category: _base_metadata_1.PropertyCategory.NoUpdate };
exports.centerPointLatitude = { propertyName: 'centerPointLatitude', modelName: '@CenterPointLatitude', displayName: 'DashboardWebStringId.Map.Viewport.CenterPointLatitude', defaultVal: 0, simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel, category: _base_metadata_1.PropertyCategory.NoUpdate };
exports.centerPointLongitude = { propertyName: 'centerPointLongitude', modelName: '@CenterPointLongitude', displayName: 'DashboardWebStringId.Map.Viewport.CenterPointLongitude', defaultVal: 0, simpleFormAdapterItem: 'numberBoxEditor', from: _base_metadata_1.floatFromModel, category: _base_metadata_1.PropertyCategory.NoUpdate };
exports.createViewerPaddings = { propertyName: 'createViewerPaddings', modelName: '@CreateViewerPaddings', displayName: 'DashboardWebStringId.Map.Viewport.CreateViewerPaddings', defaultVal: true, simpleFormAdapterItem: 'onOffButtonGroupEditor', from: _base_metadata_1.parseBool, category: _base_metadata_1.PropertyCategory.NoUpdate };
exports.mapViewportSerializationsInfo = [exports.topLatitude, exports.bottomLatitude, exports.leftLongitude, exports.rightLongitude, exports.centerPointLatitude, exports.centerPointLongitude, exports.createViewerPaddings];


/***/ }),
/* 506 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _data_item_1 = __webpack_require__(20);
var _base_metadata_1 = __webpack_require__(4);
var _geo_point_map_item_base_1 = __webpack_require__(68);
exports.value = { propertyName: _base_metadata_1.valuePropertyName, modelName: 'Value', displayName: 'DashboardWebStringId.Chart.Value', info: _data_item_1.dataItemLinkSerializationsInfo };
exports.geoPointMapDashboardItemSerializationsInfo = _geo_point_map_item_base_1.geoPointMapDashboardItemBaseSerializationsInfo.concat([exports.value]);


/***/ }),
/* 507 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var serializable_model_1 = __webpack_require__(5);
var _limit_container_1 = __webpack_require__(313);
var LimitContainer = (function (_super) {
    __extends(LimitContainer, _super);
    function LimitContainer(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.mode = ko.observable();
        _this.argumentInterval = ko.observable('Year');
        _this.mode.subscribe(function (newMode) {
            if (newMode === 'None') {
                _this.flow.isEmpty(true);
                _this.fixed.isEmpty(true);
            }
            else if (newMode === 'Flow') {
                _this.flow.isEmpty(false);
                _this.fixed.isEmpty(true);
            }
            else if (newMode === 'Fixed') {
                _this.flow.isEmpty(true);
                _this.fixed.isEmpty(false);
            }
        });
        if (!modelJson.hasOwnProperty('FixedDateTimePeriodLimit')) {
            if (!modelJson.hasOwnProperty('FlowDateTimePeriodLimit')) {
                _this.mode('None');
            }
            else {
                _this.mode('Flow');
            }
        }
        else {
            _this.mode('Fixed');
        }
        ko.computed(function () {
            _this.flow.argumentInterval(_this.argumentInterval());
        });
        return _this;
    }
    LimitContainer.prototype.getInfo = function () {
        return _limit_container_1.limitContainer;
    };
    LimitContainer.prototype.isEmpty = function () {
        return this.mode() === 'None';
    };
    LimitContainer.prototype.getInterval = function () {
        if (this.mode() === 'Flow') {
            return this.flow.interval();
        }
        else {
            return null;
        }
    };
    return LimitContainer;
}(serializable_model_1.SerializableModel));
exports.LimitContainer = LimitContainer;


/***/ }),
/* 508 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var index_internal_1 = __webpack_require__(37);
var serializable_model_1 = __webpack_require__(5);
var _period_limit_1 = __webpack_require__(204);
var FixedDateTimePeriodLimit = (function (_super) {
    __extends(FixedDateTimePeriodLimit, _super);
    function FixedDateTimePeriodLimit(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.isEmpty = ko.observable(false);
        return _this;
    }
    FixedDateTimePeriodLimit.prototype.getInfo = function () {
        return _period_limit_1.fixedDateTimePeriodLimitSerializationsInfo;
    };
    FixedDateTimePeriodLimit.prototype.getDateTimeValue = function () {
        return this.date();
    };
    return FixedDateTimePeriodLimit;
}(serializable_model_1.SerializableModel));
exports.FixedDateTimePeriodLimit = FixedDateTimePeriodLimit;
var FlowDateTimePeriodLimit = (function (_super) {
    __extends(FlowDateTimePeriodLimit, _super);
    function FlowDateTimePeriodLimit(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.isEmpty = ko.observable(false);
        _this.argumentInterval = ko.observable('Year');
        return _this;
    }
    FlowDateTimePeriodLimit.prototype.getInfo = function () {
        return _period_limit_1.flowDateTimePeriodLimitSerializationsInfo;
    };
    FlowDateTimePeriodLimit.prototype._getAvailableIntervals = function () {
        return _period_limit_1.flowIntervalOrderedValues
            .slice(0, _period_limit_1.flowIntervalOrderedValues.indexOf(_period_limit_1.convertDateTimeGroupInterval(this.argumentInterval())) + 1)
            .map(function (value) {
            return {
                value: value,
                displayValue: index_internal_1.getLocalizationById(_period_limit_1.flowIntervalValues[value])
            };
        });
    };
    return FlowDateTimePeriodLimit;
}(serializable_model_1.SerializableModel));
exports.FlowDateTimePeriodLimit = FlowDateTimePeriodLimit;


/***/ }),
/* 509 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var point_label_options_1 = __webpack_require__(296);
var _scatter_point_label_options_1 = __webpack_require__(315);
var ScatterPointLabelOptions = (function (_super) {
    __extends(ScatterPointLabelOptions, _super);
    function ScatterPointLabelOptions(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    ScatterPointLabelOptions.prototype.getInfo = function () {
        return _scatter_point_label_options_1.scatterPointLabelOptionsSerializationsInfo;
    };
    return ScatterPointLabelOptions;
}(point_label_options_1.PointLabelOptionsBase));
exports.ScatterPointLabelOptions = ScatterPointLabelOptions;


/***/ }),
/* 510 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.editorTemplates = {
    radioGroup: 'radioGroup',
    image: 'image',
    text: 'text',
    bool: 'bool',
    boolYesNo: 'boolYesNo',
    boolVisibleHidden: 'boolVisibleHidden',
    boolDiscreteContinuous: 'boolDiscreteContinuous',
    checkBox: 'checkBox',
    list: 'list',
    numeric: 'numeric',
    date: 'data',
    combobox: 'combobox',
    buttonGroup: 'buttonGroup',
    guid: 'guid',
};


/***/ }),
/* 511 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var title_1 = __webpack_require__(512);
var _title_1 = __webpack_require__(205);
exports.currencyCultureName = { propertyName: 'currencyCultureName', modelName: '@CurrencyCulture' };
exports.dashboardTitle = { propertyName: 'title', modelName: 'Title', displayName: 'DashboardStringId.Title', type: title_1.DashboardTitle, info: _title_1.dashboardTitleSerializationsInfo };
exports.items = { propertyName: 'items', modelName: 'Items', displayName: 'DashboardWebStringId.Dashboard.Items', array: true };
exports.parameters = { propertyName: 'parameters', modelName: 'Parameters', displayName: 'DashboardWebStringId.DashboardParameters', array: true };
exports.colorScheme = { propertyName: 'colorScheme', modelName: 'ColorScheme', displayName: 'DashboardWebStringId.DashboardMenuColorScheme', array: true };
exports.groups = { propertyName: 'groups', modelName: 'Groups', displayName: 'DashboardWebStringId.Dashboard.Groups', array: true };
exports.dataSources = { propertyName: 'dataSources', modelName: 'DataSources', displayName: 'DashboardWebStringId.DashboardMenuDataSources', array: true };
exports.layout = { propertyName: 'layout', modelName: 'LayoutTree' };
exports.dashboardSerializationsInfo = [exports.dashboardTitle, exports.items, exports.groups, exports.dataSources, exports.currencyCultureName, exports.layout, exports.parameters, exports.colorScheme];


/***/ }),
/* 512 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _title_1 = __webpack_require__(205);
var serializable_model_1 = __webpack_require__(5);
var DashboardTitle = (function (_super) {
    __extends(DashboardTitle, _super);
    function DashboardTitle(model, serializer, info) {
        var _this = _super.call(this, model || {}, serializer, info) || this;
        _this.imageType = ko.observable('none');
        if (_this.image64()) {
            _this.imageType('embedded');
        }
        else if (_this.url()) {
            _this.imageType('linked');
        }
        else {
            _this.imageType('none');
        }
        _this.imageType.subscribe(function (imageType) {
            switch (imageType) {
                case 'embedded':
                    _this.url(null);
                    break;
                case 'linked':
                    _this.image64(null);
                    break;
                default:
                    _this.url(null);
                    _this.image64(null);
            }
        });
        return _this;
    }
    DashboardTitle.prototype.getInfo = function () {
        return _title_1.dashboardTitleSerializationsInfo;
    };
    return DashboardTitle;
}(serializable_model_1.SerializableModel));
exports.DashboardTitle = DashboardTitle;


/***/ }),
/* 513 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ef_data_source_1 = __webpack_require__(138);
var excel_data_source_1 = __webpack_require__(514);
var extract_data_source_1 = __webpack_require__(515);
var json_data_source_1 = __webpack_require__(322);
var object_data_source_1 = __webpack_require__(323);
var olap_data_source_1 = __webpack_require__(139);
var sql_data_source_1 = __webpack_require__(90);
var xpo_data_source_1 = __webpack_require__(696);
exports._baseDataSourceTypesMap = {
    'ObjectDataSource': object_data_source_1.ObjectDataSource,
    'SqlDataSource': sql_data_source_1.SqlDataSource,
    'OLAPDataSource': olap_data_source_1.OlapDataSource,
    'EFDataSource': ef_data_source_1.EFDataSource,
    'ExcelDataSource': excel_data_source_1.ExcelDataSource,
    'ExtractFileDataSource': extract_data_source_1.ExtractDataSource,
    'JsonDataSource': json_data_source_1.JsonDataSource,
    'XPObjectSource': xpo_data_source_1.XpoDataSource
};


/***/ }),
/* 514 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var data_source_1 = __webpack_require__(62);
var _excel_data_source_1 = __webpack_require__(483);
var ExcelDataSource = (function (_super) {
    __extends(ExcelDataSource, _super);
    function ExcelDataSource(dataSourceJSON, serializer) {
        if (dataSourceJSON === void 0) { dataSourceJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, dataSourceJSON, serializer) || this;
        _this.hasCalculatedFields = true;
        _this.hasFilter = true;
        return _this;
    }
    ExcelDataSource.prototype.getInfo = function () {
        return _excel_data_source_1.excelDataSourceSerializationsInfo;
    };
    ExcelDataSource.prototype.getDisplayNamePrefix = function () {
        return 'DashboardStringId.DefaultExcelDataSourceName';
    };
    ExcelDataSource.prototype._getDefaultItemType = function () {
        return 'ExcelDataSource';
    };
    return ExcelDataSource;
}(data_source_1.DataSource));
exports.ExcelDataSource = ExcelDataSource;


/***/ }),
/* 515 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var data_source_1 = __webpack_require__(62);
var _extract_data_source_1 = __webpack_require__(484);
var ExtractDataSource = (function (_super) {
    __extends(ExtractDataSource, _super);
    function ExtractDataSource(dataSourceJSON, serializer) {
        if (dataSourceJSON === void 0) { dataSourceJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, dataSourceJSON, serializer) || this;
        _this.hasCalculatedFields = true;
        return _this;
    }
    ExtractDataSource.prototype.getInfo = function () {
        return _extract_data_source_1.extractDataSourceSerializationsInfo;
    };
    ExtractDataSource.prototype.getDisplayNamePrefix = function () {
        return 'DashboardStringId.DefaultFileExtractDataSourceName';
    };
    ExtractDataSource.prototype._getDefaultItemType = function () {
        return 'ExtractFileDataSource';
    };
    return ExtractDataSource;
}(data_source_1.DataSource));
exports.ExtractDataSource = ExtractDataSource;


/***/ }),
/* 516 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var dashboard_layout_node_1 = __webpack_require__(190);
var _layout_utils_1 = __webpack_require__(106);
var DashboardLayoutItem = (function (_super) {
    __extends(DashboardLayoutItem, _super);
    function DashboardLayoutItem(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    Object.defineProperty(DashboardLayoutItem.prototype, "_template", {
        get: function () { return 'dx-dashboard-item'; },
        enumerable: true,
        configurable: true
    });
    DashboardLayoutItem.prototype._getDefaultItemType = function () { return 'LayoutItem'; };
    DashboardLayoutItem.prototype._deleteDashbordItem = function () {
        if (this._dashboard()) {
            this._dashboard().items.remove(this.item);
        }
    };
    return DashboardLayoutItem;
}(dashboard_layout_node_1.DashboardLayoutNode));
exports.DashboardLayoutItem = DashboardLayoutItem;
_layout_utils_1._layoutItemTypeMap['LayoutItem'] = DashboardLayoutItem;


/***/ }),
/* 517 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var measure_calculation_1 = __webpack_require__(81);
var _difference_calculation_1 = __webpack_require__(469);
var DifferenceCalculation = (function (_super) {
    __extends(DifferenceCalculation, _super);
    function DifferenceCalculation(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    DifferenceCalculation.getLookupShiftExpression = function (target) {
        switch (target) {
            case 'Previous':
                return '-1';
            case 'Next':
                return '1';
            case 'First':
                return 'First()';
            case 'Last':
                return 'First()';
            default:
                throw new Error('Unsupported Target');
        }
    };
    Object.defineProperty(DifferenceCalculation.prototype, "name", {
        get: function () {
            return 'DashboardWebStringId.Calculations.DifferenceCalculation';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DifferenceCalculation.prototype, "lookupShiftExpression", {
        get: function () {
            return DifferenceCalculation.getLookupShiftExpression(this.target());
        },
        enumerable: true,
        configurable: true
    });
    DifferenceCalculation.prototype.getInfo = function () {
        return _difference_calculation_1.differenceCalculationSerializationsInfo;
    };
    DifferenceCalculation.prototype._createInstance = function () {
        return new DifferenceCalculation();
    };
    DifferenceCalculation.prototype._getExpression = function (argument) {
        switch (this.differenceType()) {
            case 'Absolute':
                return argument + " - Lookup(" + argument + ", " + this.lookupShiftExpression + ")";
            case 'Percentage':
                return "ToDouble(" + argument + " - Lookup(" + argument + ", " + this.lookupShiftExpression + ")) / Lookup(" + argument + ", " + this.lookupShiftExpression + ")";
            default:
                throw new Error('Unexpected DifferenceType');
        }
    };
    return DifferenceCalculation;
}(measure_calculation_1.MeasureCalculation));
exports.DifferenceCalculation = DifferenceCalculation;
measure_calculation_1.calculationsTypesMap['DifferenceCalculation'] = DifferenceCalculation;


/***/ }),
/* 518 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var measure_calculation_1 = __webpack_require__(81);
var _moving_calculation_1 = __webpack_require__(288);
var MovingCalculation = (function (_super) {
    __extends(MovingCalculation, _super);
    function MovingCalculation(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    Object.defineProperty(MovingCalculation.prototype, "name", {
        get: function () {
            return 'DashboardWebStringId.Calculations.Moving';
        },
        enumerable: true,
        configurable: true
    });
    MovingCalculation.prototype.getInfo = function () {
        return _moving_calculation_1.movingCalculationSerializationsInfo;
    };
    MovingCalculation.prototype._createInstance = function () {
        return new MovingCalculation();
    };
    MovingCalculation.prototype._getExpression = function (argument) {
        return this._getAggrName(this.summaryType()) + "(" + argument + ", -" + this.previousValuesCount() + ", " + this.nextValuesCount() + ")";
    };
    return MovingCalculation;
}(measure_calculation_1.MeasureCalculation));
exports.MovingCalculation = MovingCalculation;
measure_calculation_1.calculationsTypesMap['Moving'] = MovingCalculation;


/***/ }),
/* 519 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var measure_calculation_1 = __webpack_require__(81);
var _percent_of_total_calculation_1 = __webpack_require__(470);
var PercentOfTotalCalculation = (function (_super) {
    __extends(PercentOfTotalCalculation, _super);
    function PercentOfTotalCalculation(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    Object.defineProperty(PercentOfTotalCalculation.prototype, "name", {
        get: function () {
            return 'DashboardWebStringId.Calculations.PercentOfTotal';
        },
        enumerable: true,
        configurable: true
    });
    PercentOfTotalCalculation.prototype.getInfo = function () {
        return _percent_of_total_calculation_1.percentOfTotalCalculationSerializationsInfo;
    };
    PercentOfTotalCalculation.prototype._createInstance = function () {
        return new PercentOfTotalCalculation();
    };
    PercentOfTotalCalculation.prototype._getExpression = function (argument) {
        return "ToDouble(" + argument + ") / Total(" + argument + ")";
    };
    return PercentOfTotalCalculation;
}(measure_calculation_1.MeasureCalculation));
exports.PercentOfTotalCalculation = PercentOfTotalCalculation;
measure_calculation_1.calculationsTypesMap['PercentOfTotal'] = PercentOfTotalCalculation;


/***/ }),
/* 520 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var measure_calculation_1 = __webpack_require__(81);
var _rank_calculation_1 = __webpack_require__(471);
var RankCalculation = (function (_super) {
    __extends(RankCalculation, _super);
    function RankCalculation(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    RankCalculation._getRankFunction = function (rankType) {
        switch (rankType) {
            case 'Competition':
                return 'RankCompetition';
            case 'Unique':
                return 'RankUnique';
            case 'Dense':
                return 'RankDense';
            case 'Modified':
                return 'RankModified';
            case 'Percentile':
                return 'RankPercentile';
            default:
                throw new Error('Unsupported RankType');
        }
    };
    Object.defineProperty(RankCalculation.prototype, "name", {
        get: function () {
            return 'DashboardWebStringId.Calculations.Rank';
        },
        enumerable: true,
        configurable: true
    });
    RankCalculation.prototype.getInfo = function () {
        return _rank_calculation_1.rankCalculationSerializationsInfo;
    };
    RankCalculation.prototype._createInstance = function () {
        return new RankCalculation();
    };
    RankCalculation.prototype._getExpression = function (argument) {
        var order = this.rankOrder() == 'Ascending' ? 'asc' : 'desc';
        return RankCalculation._getRankFunction(this.rankType()) + "(" + argument + ", '" + order + "')";
    };
    return RankCalculation;
}(measure_calculation_1.MeasureCalculation));
exports.RankCalculation = RankCalculation;
measure_calculation_1.calculationsTypesMap['Rank'] = RankCalculation;


/***/ }),
/* 521 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var measure_calculation_1 = __webpack_require__(81);
var _running_total_calculation_1 = __webpack_require__(472);
var RunningTotalCalculation = (function (_super) {
    __extends(RunningTotalCalculation, _super);
    function RunningTotalCalculation(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    Object.defineProperty(RunningTotalCalculation.prototype, "name", {
        get: function () {
            return 'DashboardWebStringId.Calculations.RunningTotal';
        },
        enumerable: true,
        configurable: true
    });
    RunningTotalCalculation.prototype.getInfo = function () {
        return _running_total_calculation_1.runningTotalCalculationSerializationsInfo;
    };
    RunningTotalCalculation.prototype._createInstance = function () {
        return new RunningTotalCalculation();
    };
    RunningTotalCalculation.prototype._getExpression = function (argument) {
        switch (this.summaryType()) {
            case 'Average':
                return "RunningAvg(" + argument + ")";
            case 'Count':
                return "RunningCount(" + argument + ")";
            case 'Max':
                return "RunningMax(" + argument + ")";
            case 'Min':
                return "RunningMin(" + argument + ")";
            case 'Sum':
                return "RunningSum(" + argument + ")";
            default:
                return this._getAggrName(this.summaryType()) + "(" + argument + ", First(), 0)";
        }
    };
    return RunningTotalCalculation;
}(measure_calculation_1.MeasureCalculation));
exports.RunningTotalCalculation = RunningTotalCalculation;
measure_calculation_1.calculationsTypesMap['RunningTotal'] = RunningTotalCalculation;


/***/ }),
/* 522 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var measure_calc_window_definition_1 = __webpack_require__(42);
var _card_calc_window_definition_1 = __webpack_require__(473);
var CardWindowDefinition = (function (_super) {
    __extends(CardWindowDefinition, _super);
    function CardWindowDefinition(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    CardWindowDefinition.prototype.getInfo = function () {
        return _card_calc_window_definition_1.cardWindowDefinitionSerializationsInfo;
    };
    CardWindowDefinition.prototype.equals = function (def) {
        return (def instanceof CardWindowDefinition) && (this.definitionMode() === def.definitionMode());
    };
    return CardWindowDefinition;
}(measure_calc_window_definition_1.MeasureCalculationWindowDefinition));
exports.CardWindowDefinition = CardWindowDefinition;
measure_calc_window_definition_1.windowDefinitionsTypesMap['CardWindowDefinition'] = CardWindowDefinition;


/***/ }),
/* 523 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var measure_calc_window_definition_1 = __webpack_require__(42);
var _chart_calc_window_definition_1 = __webpack_require__(474);
var ChartWindowDefinition = (function (_super) {
    __extends(ChartWindowDefinition, _super);
    function ChartWindowDefinition(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    ChartWindowDefinition.prototype.getInfo = function () {
        return _chart_calc_window_definition_1.chartWindowDefinitionSerializationsInfo;
    };
    ChartWindowDefinition.prototype.equals = function (def) {
        return (def instanceof ChartWindowDefinition) && (this.definitionMode() === def.definitionMode());
    };
    return ChartWindowDefinition;
}(measure_calc_window_definition_1.MeasureCalculationWindowDefinition));
exports.ChartWindowDefinition = ChartWindowDefinition;
measure_calc_window_definition_1.windowDefinitionsTypesMap['ChartWindowDefinition'] = ChartWindowDefinition;


/***/ }),
/* 524 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var measure_calc_window_definition_1 = __webpack_require__(42);
var _gauge_calc_window_definition_1 = __webpack_require__(475);
var GaugeWindowDefinition = (function (_super) {
    __extends(GaugeWindowDefinition, _super);
    function GaugeWindowDefinition(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    GaugeWindowDefinition.prototype.getInfo = function () {
        return _gauge_calc_window_definition_1.gaugeWindowDefinitionSerializationsInfo;
    };
    GaugeWindowDefinition.prototype.equals = function (def) {
        return def instanceof GaugeWindowDefinition;
    };
    return GaugeWindowDefinition;
}(measure_calc_window_definition_1.MeasureCalculationWindowDefinition));
exports.GaugeWindowDefinition = GaugeWindowDefinition;
measure_calc_window_definition_1.windowDefinitionsTypesMap['GaugeWindowDefinition'] = GaugeWindowDefinition;


/***/ }),
/* 525 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var measure_calc_window_definition_1 = __webpack_require__(42);
var _grid_calc_window_definition_1 = __webpack_require__(476);
var GridWindowDefinition = (function (_super) {
    __extends(GridWindowDefinition, _super);
    function GridWindowDefinition(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    GridWindowDefinition.prototype.getInfo = function () {
        return _grid_calc_window_definition_1.gridWindowDefinitionSerializationsInfo;
    };
    GridWindowDefinition.prototype.equals = function (def) {
        return (def instanceof GridWindowDefinition) && (this.definitionMode() === def.definitionMode());
    };
    return GridWindowDefinition;
}(measure_calc_window_definition_1.MeasureCalculationWindowDefinition));
exports.GridWindowDefinition = GridWindowDefinition;
measure_calc_window_definition_1.windowDefinitionsTypesMap['GridWindowDefinition'] = GridWindowDefinition;


/***/ }),
/* 526 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var measure_calc_window_definition_1 = __webpack_require__(42);
var _pie_calc_window_definition_1 = __webpack_require__(477);
var PieWindowDefinition = (function (_super) {
    __extends(PieWindowDefinition, _super);
    function PieWindowDefinition(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    PieWindowDefinition.prototype.getInfo = function () {
        return _pie_calc_window_definition_1.pieWindowDefinitionSerializationsInfo;
    };
    PieWindowDefinition.prototype.equals = function (def) {
        return (def instanceof PieWindowDefinition) && (this.definitionMode() === def.definitionMode());
    };
    return PieWindowDefinition;
}(measure_calc_window_definition_1.MeasureCalculationWindowDefinition));
exports.PieWindowDefinition = PieWindowDefinition;
measure_calc_window_definition_1.windowDefinitionsTypesMap['PieWindowDefinition'] = PieWindowDefinition;


/***/ }),
/* 527 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var measure_calc_window_definition_1 = __webpack_require__(42);
var _pivot_calc_window_definition_1 = __webpack_require__(478);
var PivotWindowDefinition = (function (_super) {
    __extends(PivotWindowDefinition, _super);
    function PivotWindowDefinition(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    PivotWindowDefinition.prototype.getInfo = function () {
        return _pivot_calc_window_definition_1.pivotWindowDefinitionSerializationsInfo;
    };
    PivotWindowDefinition.prototype.equals = function (def) {
        return (def instanceof PivotWindowDefinition) && (this.definitionMode() === def.definitionMode());
    };
    return PivotWindowDefinition;
}(measure_calc_window_definition_1.MeasureCalculationWindowDefinition));
exports.PivotWindowDefinition = PivotWindowDefinition;
measure_calc_window_definition_1.windowDefinitionsTypesMap['PivotWindowDefinition'] = PivotWindowDefinition;


/***/ }),
/* 528 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var measure_calc_window_definition_1 = __webpack_require__(42);
var _range_filter_calc_window_definition_1 = __webpack_require__(479);
var RangeFilterWindowDefinition = (function (_super) {
    __extends(RangeFilterWindowDefinition, _super);
    function RangeFilterWindowDefinition(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    RangeFilterWindowDefinition.prototype.getInfo = function () {
        return _range_filter_calc_window_definition_1.rangeFilterWindowDefinitionSerializationsInfo;
    };
    RangeFilterWindowDefinition.prototype.equals = function (def) {
        return (def instanceof RangeFilterWindowDefinition) && (this.definitionMode() === def.definitionMode());
    };
    return RangeFilterWindowDefinition;
}(measure_calc_window_definition_1.MeasureCalculationWindowDefinition));
exports.RangeFilterWindowDefinition = RangeFilterWindowDefinition;
measure_calc_window_definition_1.windowDefinitionsTypesMap['RangeFilterWindowDefinition'] = RangeFilterWindowDefinition;


/***/ }),
/* 529 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var measure_calc_window_definition_1 = __webpack_require__(42);
var _scatter_chart_calc_window_definition_1 = __webpack_require__(480);
var ScatterWindowDefinition = (function (_super) {
    __extends(ScatterWindowDefinition, _super);
    function ScatterWindowDefinition(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    ScatterWindowDefinition.prototype.getInfo = function () {
        return _scatter_chart_calc_window_definition_1.scatterWindowDefinitionSerializationsInfo;
    };
    ScatterWindowDefinition.prototype.equals = function (def) {
        return def instanceof ScatterWindowDefinition;
    };
    return ScatterWindowDefinition;
}(measure_calc_window_definition_1.MeasureCalculationWindowDefinition));
exports.ScatterWindowDefinition = ScatterWindowDefinition;
measure_calc_window_definition_1.windowDefinitionsTypesMap['ScatterWindowDefinition'] = ScatterWindowDefinition;


/***/ }),
/* 530 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var serializable_model_1 = __webpack_require__(5);
var data_dashboard_item_1 = __webpack_require__(9);
var _bound_image_item_1 = __webpack_require__(202);
var BoundImageItem = (function (_super) {
    __extends(BoundImageItem, _super);
    function BoundImageItem(dashboardItemJSON, serializer) {
        if (dashboardItemJSON === void 0) { dashboardItemJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, dashboardItemJSON, serializer) || this;
        _this._attachDataItem(_this, _bound_image_item_1.imageItem.propertyName);
        return _this;
    }
    BoundImageItem.prototype._getInfoCore = function () {
        return _bound_image_item_1.boundImageDashboardItemSerializationsInfo;
    };
    BoundImageItem.prototype._isCalculationSupported = function () {
        return false;
    };
    BoundImageItem.prototype._isSortingEnabled = function () {
        return false;
    };
    BoundImageItem.prototype._isTopNEnabled = function (dataItem) {
        return false;
    };
    BoundImageItem.prototype._getDefaultItemType = function () {
        return 'BoundImage';
    };
    BoundImageItem.prototype._getIgnoreMasterFilter = function () { return this.interactivityOptions.ignoreMasterFilters(); };
    BoundImageItem.prototype._updateContentViewModel = function (content) {
        _super.prototype._updateContentViewModel.call(this, content);
        content.ViewModel.SizeMode = this.sizeMode();
        content.ViewModel.HorizontalAlignment = this.horizontalAlignment();
        content.ViewModel.VerticalAlignment = this.verticalAlignment();
    };
    return BoundImageItem;
}(data_dashboard_item_1.DataDashboardItem));
exports.BoundImageItem = BoundImageItem;
serializable_model_1.itemTypesMap['BoundImage'] = { type: BoundImageItem, groupName: 'common', title: 'DashboardStringId.DefaultNameBoundImageItem', index: 100 };


/***/ }),
/* 531 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var card_calc_window_definition_1 = __webpack_require__(522);
var _utils_1 = __webpack_require__(18);
var serializable_model_1 = __webpack_require__(5);
var kpi_item_1 = __webpack_require__(325);
var card_1 = __webpack_require__(208);
var _card_item_1 = __webpack_require__(490);
var CardItem = (function (_super) {
    __extends(CardItem, _super);
    function CardItem(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.cards = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(modelJson.Cards, function (item) { return new card_1.Card(_this, item, serializer); });
        _this._attachDataItem(_this, _card_item_1.cardSparklineArgument.propertyName);
        return _this;
    }
    CardItem.prototype._getInfoCore = function () {
        return _card_item_1.cardDashboardItemSerializationsInfo;
    };
    CardItem.prototype._clearBindings = function () {
        _super.prototype._clearBindings.call(this);
        this.cards.removeAll();
    };
    CardItem.prototype._getDefaultItemType = function () {
        return 'Card';
    };
    CardItem.prototype._getLayersCount = function () {
        return !!this.__seriesDimensions && this.__seriesDimensions().length > 0 ? this.cards().length : 0;
    };
    CardItem.prototype._getLayerName = function () {
        return this._getDataItemContainerDisplayName(this.cards()[this._selectedElementIndex() || 0]);
    };
    CardItem.prototype._getDefaultCalculationWindowDefinition = function () {
        return new card_calc_window_definition_1.CardWindowDefinition();
    };
    CardItem.prototype._itemInteractivityByColumnAxis = function () {
        return false;
    };
    CardItem.prototype._getInteractivityAxisDimensionCount = function () {
        return this.seriesDimensions().length;
    };
    CardItem.prototype._conditionFormattingExpressionEditorFilter = function (dataItem) {
        var isHiddenMeasure = this.hiddenMeasures().filter(function (hm) { return hm.uniqueName() === dataItem.uniqueName(); }).length > 0;
        var isSeriesDimension = this.seriesDimensions().filter(function (sd) { return sd.uniqueName() === dataItem.uniqueName(); }).length > 0;
        return isHiddenMeasure || isSeriesDimension;
    };
    __decorate([
        _utils_1.collectionItemType('Card')
    ], CardItem.prototype, "cards", void 0);
    return CardItem;
}(kpi_item_1.KpiItem));
exports.CardItem = CardItem;
serializable_model_1.itemTypesMap['Card'] = { type: CardItem, groupName: 'common', title: 'DashboardStringId.DefaultNameCardItem', index: 60 };


/***/ }),
/* 532 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var _default_1 = __webpack_require__(6);
var _dimension_1 = __webpack_require__(71);
var chart_calc_window_definition_1 = __webpack_require__(523);
var _data_field_1 = __webpack_require__(14);
var index_internal_1 = __webpack_require__(58);
var _helper_classes_1 = __webpack_require__(36);
var serializable_model_1 = __webpack_require__(5);
var chart_item_base_1 = __webpack_require__(326);
var chart_pane_1 = __webpack_require__(327);
var chart_series_1 = __webpack_require__(142);
var _chart_item_1 = __webpack_require__(135);
var ChartItem = (function (_super) {
    __extends(ChartItem, _super);
    function ChartItem(dashboardItemJSON, serializer) {
        if (dashboardItemJSON === void 0) { dashboardItemJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, dashboardItemJSON, serializer) || this;
        _this.panes = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(dashboardItemJSON.Panes || {}, function (item) { return new chart_pane_1.ChartPane(_this, item, serializer); });
        if (_this.panes().length === 0) {
            _this._addNewPane();
        }
        index_internal_1.subscribeAndPerform(_this.__arguments, function (newValue) {
            newValue.forEach(function (argument) {
                argument._specifics.customDataShapingProperties = [{
                        serializationInfo: _dimension_1.isDiscreteNumericScale,
                        filter: function (dataField) { return _data_field_1.DataField.isNumeric(dataField); }
                    }];
            });
        });
        return _this;
    }
    ChartItem.prototype._clearBindings = function () {
        _super.prototype._clearBindings.call(this);
        this.panes.removeAll();
        this.panes.push(new chart_pane_1.ChartPane(this, {}));
    };
    ChartItem.prototype._getInfoCore = function () {
        return _chart_item_1.chartItemSerializationInfo;
    };
    ChartItem.prototype._getDefaultItemType = function () {
        return 'Chart';
    };
    ChartItem.prototype._updateContentViewModel = function (content) {
        _super.prototype._updateContentViewModel.call(this, content);
        content.ViewModel.Rotated = this.rotated();
    };
    ChartItem.prototype._getTargetDimensions = function () { return this.interactivityOptions.targetDimensions(); };
    ChartItem.prototype._getMasterFilterMode = function () { return this.interactivityOptions.masterFilterMode(); };
    ChartItem.prototype._getDrillDownEnabled = function () { return this.interactivityOptions.isDrillDownEnabled(); };
    ChartItem.prototype._getIgnoreMasterFilter = function () { return this.interactivityOptions.ignoreMasterFilters(); };
    ChartItem.prototype._getCanColorByDimensions = function () { return this._coloredSeries().length > 0; };
    ChartItem.prototype._getAreMeasuresColoredByDefault = function () {
        return this._coloredSeries().length > 1;
    };
    ChartItem.prototype._getIsDimensionColoredByDefault = function (dimension) {
        return !!this.__seriesDimensions().filter(function (link) { return link.dataItem() === dimension; })[0];
    };
    ChartItem.prototype._addNewPane = function () {
        var pane = new chart_pane_1.ChartPane(this, { '@ItemType': 'Pane' });
        pane.name(_helper_classes_1.NameGenerator.generateName(_default_1.getLocalizationById('DashboardStringId.DefaultNameChartPane') + ' ', this.panes(), 'name', 1));
        this.panes.push(pane);
    };
    ChartItem.prototype._coloredSeries = function () {
        return [].concat.apply([], this.panes().map(function (pane) { return pane.series(); })).filter(function (series) { return !(series instanceof chart_series_1.HighLowCloseSeries) && !(series instanceof chart_series_1.OpenHighLowCloseSeries); });
    };
    ChartItem.prototype._getDefaultCalculationWindowDefinition = function () {
        return new chart_calc_window_definition_1.ChartWindowDefinition();
    };
    return ChartItem;
}(chart_item_base_1.ChartItemBase));
exports.ChartItem = ChartItem;
serializable_model_1.itemTypesMap['Chart'] = { type: ChartItem, groupName: 'common', title: 'DashboardStringId.DefaultNameChartItem', index: 30 };


/***/ }),
/* 533 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _range_filter_selection_validator_1 = __webpack_require__(144);
function getFirstWeekDate(date, firstDayOfWeek) {
    var delta = (date.getDay() - firstDayOfWeek + 7) % 7;
    var result = new Date(date);
    result.setDate(date.getDate() - delta);
    return result;
}
var DateTimePeriodConverter = (function () {
    function DateTimePeriodConverter() {
    }
    DateTimePeriodConverter.toRange = function (period, firstDayOfWeek) {
        var now = new Date();
        var range = {
            startValue: this._getDateTime(period.Start, now, firstDayOfWeek),
            endValue: this._getDateTime(period.End, now, firstDayOfWeek)
        };
        var endLimit = period.Start && period.End && period.End < period.Start ? period.Start : period.End;
        range = _range_filter_selection_validator_1.RangeFilterSelectionValidator.validateLimitsOrder(range);
        if (endLimit && endLimit.Relative) {
            range.endValue.setMilliseconds(range.endValue.getMilliseconds() - 1);
            range = _range_filter_selection_validator_1.RangeFilterSelectionValidator.validateLimitsOrder(range);
        }
        return range;
    };
    DateTimePeriodConverter._getDateTime = function (limit, now, firstDayOfWeek) {
        if (limit) {
            if (!limit.Relative)
                return limit.Date;
            switch (limit.Interval) {
                case 'Year':
                    return new Date(now.getFullYear() + limit.Offset, 0, 1);
                case 'Quarter':
                    var quarterIndex = Math.floor(now.getMonth() / 3);
                    return new Date(now.getFullYear(), quarterIndex * 3 + 3 * limit.Offset, 1);
                case 'Month':
                    return new Date(now.getFullYear(), now.getMonth() + limit.Offset, 1);
                case 'Day':
                    return new Date(now.getFullYear(), now.getMonth(), now.getDate() + limit.Offset);
                case 'Hour':
                    return new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours() + limit.Offset, 0, 0, 0);
                case 'Minute':
                    return new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours(), now.getMinutes() + limit.Offset, 0, 0);
                case 'Second':
                    return new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours(), now.getMinutes(), now.getSeconds() + limit.Offset, 0);
            }
        }
    };
    return DateTimePeriodConverter;
}());
exports.DateTimePeriodConverter = DateTimePeriodConverter;


/***/ }),
/* 534 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var serializable_model_1 = __webpack_require__(5);
var filter_element_item_base_1 = __webpack_require__(110);
var _list_box_item_1 = __webpack_require__(299);
var ListBoxItem = (function (_super) {
    __extends(ListBoxItem, _super);
    function ListBoxItem(dashboardItemJSON, serializer) {
        if (dashboardItemJSON === void 0) { dashboardItemJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, dashboardItemJSON, serializer) || this;
    }
    ListBoxItem.prototype._getInfoCore = function () {
        return _list_box_item_1.listBoxDashboardItemSerializationsInfo;
    };
    ListBoxItem.prototype._getDefaultItemType = function () {
        return 'ListBox';
    };
    ListBoxItem.prototype._allowAllValue = function () { return this._isMultiselectable() || this.showAllValue(); };
    ListBoxItem.prototype._isMultiselectable = function () { return this.listBoxType() === 'Checked'; };
    return ListBoxItem;
}(filter_element_item_base_1.FilterElementItemBase));
exports.ListBoxItem = ListBoxItem;
serializable_model_1.itemTypesMap['ListBox'] = { type: ListBoxItem, groupName: 'filter', title: 'DashboardStringId.DefaultNameListBoxItem', index: 330 };


/***/ }),
/* 535 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var gauge_calc_window_definition_1 = __webpack_require__(524);
var _utils_1 = __webpack_require__(18);
var serializable_model_1 = __webpack_require__(5);
var kpi_item_1 = __webpack_require__(325);
var gauge_1 = __webpack_require__(212);
var _gauge_item_1 = __webpack_require__(302);
var GaugeItem = (function (_super) {
    __extends(GaugeItem, _super);
    function GaugeItem(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.gauges = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(modelJson.Gauges, function (item) { return new gauge_1.Gauge(_this, item, serializer); });
        return _this;
    }
    GaugeItem.prototype._clearBindings = function () {
        _super.prototype._clearBindings.call(this);
        this.gauges.removeAll();
    };
    GaugeItem.prototype._getInfoCore = function () {
        return _gauge_item_1.gaugeDashboardItemSerializationsInfo;
    };
    GaugeItem.prototype._getDefaultItemType = function () {
        return 'Gauge';
    };
    GaugeItem.prototype._getLayersCount = function () {
        return !!this.__seriesDimensions && this.__seriesDimensions().length > 0 ? this.gauges().length : 0;
    };
    GaugeItem.prototype._getLayerName = function () {
        return this._getDataItemContainerDisplayName(this.gauges()[this._selectedElementIndex() || 0]);
    };
    GaugeItem.prototype._getDefaultCalculationWindowDefinition = function () {
        return new gauge_calc_window_definition_1.GaugeWindowDefinition();
    };
    __decorate([
        _utils_1.collectionItemType('GaugeElement')
    ], GaugeItem.prototype, "gauges", void 0);
    return GaugeItem;
}(kpi_item_1.KpiItem));
exports.GaugeItem = GaugeItem;
serializable_model_1.itemTypesMap['Gauge'] = { type: GaugeItem, groupName: 'common', title: 'DashboardStringId.DefaultNameGaugeItem', index: 70 };


/***/ }),
/* 536 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var data_item_1 = __webpack_require__(8);
var scatter_chart_calc_window_definition_1 = __webpack_require__(529);
var _utils_1 = __webpack_require__(18);
var _base_metadata_1 = __webpack_require__(4);
var serializable_model_1 = __webpack_require__(5);
var data_dashboard_item_1 = __webpack_require__(9);
var _scatter_chart_item_1 = __webpack_require__(314);
var ScatterChartItem = (function (_super) {
    __extends(ScatterChartItem, _super);
    function ScatterChartItem(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.arguments = ko.observableArray([]);
        _this.__arguments = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(modelJson.Dimensions, function (item) { return new data_item_1.DataItemLink(_this, item, serializer); });
        _this._subscribeDataItemLinkArrays(_scatter_chart_item_1.scatterArgumentsMeta);
        _this.__arguments.subscribe(function (newValue) {
            data_dashboard_item_1.DataDashboardItem._addColoringMeta(newValue);
        });
        data_dashboard_item_1.DataDashboardItem._addColoringMeta(_this.__arguments());
        _this._attachDataItem(_this, _scatter_chart_item_1.scatterChartWeight.propertyName);
        _this._attachDataItem(_this, _scatter_chart_item_1.axisXMeasure.propertyName);
        _this._attachDataItem(_this, _scatter_chart_item_1.axisYMeasure.propertyName);
        return _this;
    }
    ScatterChartItem.prototype._clearBindings = function () {
        _super.prototype._clearBindings.call(this);
        this.__arguments.removeAll();
    };
    ScatterChartItem.prototype._getInfoCore = function () {
        return _scatter_chart_item_1.scatterChartDashboardItemSerializationsInfo;
    };
    ScatterChartItem.prototype._isCalculationSupported = function () {
        return true;
    };
    ScatterChartItem.prototype._getDefaultItemType = function () {
        return 'ScatterChart';
    };
    ScatterChartItem.prototype._getMasterFilterMode = function () { return this.interactivityOptions.masterFilterMode(); };
    ScatterChartItem.prototype._getDrillDownEnabled = function () { return this.interactivityOptions.isDrillDownEnabled(); };
    ScatterChartItem.prototype._getIgnoreMasterFilter = function () { return this.interactivityOptions.ignoreMasterFilters(); };
    ScatterChartItem.prototype._getInteractivityDimensionLinks = function () { return this.__arguments(); };
    ScatterChartItem.prototype._getCanColorByMeasures = function () { return false; };
    ScatterChartItem.prototype._getCanColorByDimensions = function () { return true; };
    ScatterChartItem.prototype._getColorizableDataItemsInfo = function () {
        return [{
                items: this.__arguments(),
                prefixId: _base_metadata_1.BindingSectionTitles.Arguments
            }];
    };
    ScatterChartItem.prototype._getDefaultCalculationWindowDefinition = function () {
        return new scatter_chart_calc_window_definition_1.ScatterWindowDefinition();
    };
    ScatterChartItem.prototype._isSortingEnabled = function () {
        return false;
    };
    __decorate([
        _utils_1.collectionItemType('Dimension')
    ], ScatterChartItem.prototype, "__arguments", void 0);
    return ScatterChartItem;
}(data_dashboard_item_1.DataDashboardItem));
exports.ScatterChartItem = ScatterChartItem;
serializable_model_1.itemTypesMap['ScatterChart'] = { type: ScatterChartItem, groupName: 'common', title: 'DashboardStringId.DefaultNameScatterChartItem', index: 50 };


/***/ }),
/* 537 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var data_item_1 = __webpack_require__(8);
var _utils_1 = __webpack_require__(18);
var serializable_model_1 = __webpack_require__(5);
var data_dashboard_item_1 = __webpack_require__(9);
var _text_box_item_1 = __webpack_require__(203);
var TextBoxItem = (function (_super) {
    __extends(TextBoxItem, _super);
    function TextBoxItem(dashboardItemJSON, serializer) {
        if (dashboardItemJSON === void 0) { dashboardItemJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, dashboardItemJSON, serializer) || this;
        _this.values = ko.observableArray([]);
        _this.__values = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(dashboardItemJSON.Values, function (item) { return new data_item_1.DataItemLink(_this, item, serializer); });
        _this._subscribeDataItemLinkArrays(_text_box_item_1.textBoxValues);
        _this.__values.subscribe(function (links) {
            _this._setLinkCollectionAcceptableShapingType(links, data_item_1.AcceptableShapingType.String);
        });
        _this._setLinkCollectionAcceptableShapingType(_this.__values(), data_item_1.AcceptableShapingType.String);
        _this._supportedUIStates(['error', 'loading']);
        return _this;
    }
    TextBoxItem.prototype._clearBindings = function () {
        _super.prototype._clearBindings.call(this);
        this.__values.removeAll();
    };
    TextBoxItem.prototype._getInfoCore = function () {
        return _text_box_item_1.textBoxDashboardItemSerializationsInfo;
    };
    TextBoxItem.prototype._isCalculationSupported = function () {
        return false;
    };
    TextBoxItem.prototype._getDefaultItemType = function () {
        return 'TextBox';
    };
    TextBoxItem.prototype._getIgnoreMasterFilter = function () { return this.interactivityOptions.ignoreMasterFilters(); };
    __decorate([
        _utils_1.collectionItemType('Value')
    ], TextBoxItem.prototype, "__values", void 0);
    return TextBoxItem;
}(data_dashboard_item_1.DataDashboardItem));
exports.TextBoxItem = TextBoxItem;
serializable_model_1.itemTypesMap['TextBox'] = { type: TextBoxItem, groupName: 'common', title: 'DashboardStringId.DefaultNameTextBoxItem', index: 80 };


/***/ }),
/* 538 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var dashboard_layout_group_1 = __webpack_require__(105);
var _layout_utils_1 = __webpack_require__(106);
var DashboardLayoutTabPage = (function (_super) {
    __extends(DashboardLayoutTabPage, _super);
    function DashboardLayoutTabPage(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, modelJson, serializer) || this;
    }
    Object.defineProperty(DashboardLayoutTabPage.prototype, "_template", {
        get: function () { return 'dx-layout-group-container'; },
        enumerable: true,
        configurable: true
    });
    DashboardLayoutTabPage.prototype._getDefaultItemType = function () { return 'LayoutTabPage'; };
    DashboardLayoutTabPage.prototype._deleteDashbordItem = function () {
        _super.prototype._deleteDashbordItem.call(this);
        var tabContainer = this.parentNode().item;
        var page = this.item;
        var deletedPageIndex = tabContainer.tabPages().indexOf(page);
        if (tabContainer._activeTabPage() === page) {
            var newIndex = deletedPageIndex === tabContainer.tabPages().length - 1 && tabContainer.tabPages().length > 1 ? deletedPageIndex - 1 : deletedPageIndex;
            tabContainer.tabPages.remove(page);
            tabContainer._activeTabPage(tabContainer.tabPages()[newIndex]);
        }
        else {
            tabContainer.tabPages.remove(page);
        }
    };
    return DashboardLayoutTabPage;
}(dashboard_layout_group_1.DashboardLayoutGroup));
exports.DashboardLayoutTabPage = DashboardLayoutTabPage;
_layout_utils_1._layoutItemTypeMap['LayoutTabPage'] = DashboardLayoutTabPage;


/***/ }),
/* 539 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(335);
__export(__webpack_require__(19));
__export(__webpack_require__(590));
__export(__webpack_require__(729));
__export(__webpack_require__(731));
__export(__webpack_require__(732));
__export(__webpack_require__(733));
__export(__webpack_require__(734));
__export(__webpack_require__(735));
__export(__webpack_require__(736));
__export(__webpack_require__(737));
__export(__webpack_require__(114));
__export(__webpack_require__(607));
__export(__webpack_require__(608));


/***/ }),
/* 540 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function calcTabHeadersWidth(tabsWidth, containerWidth, leftIndex, showCaption) {
    var actualTabsWidth = tabsWidth.map(function (width) { return 0; });
    var actualLeftIndex = leftIndex;
    var rightIndex = 0;
    if (showCaption) {
        var widthSum = 0;
        var actualWidthSum = 0;
        for (var i = leftIndex; i < tabsWidth.length; i++) {
            if (widthSum + tabsWidth[i] <= containerWidth) {
                widthSum += tabsWidth[i];
                rightIndex = i;
            }
            else {
                break;
            }
        }
        if (rightIndex === tabsWidth.length - 1) {
            for (var i = leftIndex - 1; i >= 0; i--) {
                if (widthSum + tabsWidth[i] <= containerWidth) {
                    widthSum += tabsWidth[i];
                    actualLeftIndex = i;
                }
                else {
                    break;
                }
            }
        }
        for (var i = actualLeftIndex; i <= rightIndex; i++) {
            var width = Math.floor(containerWidth * (tabsWidth[i] / widthSum));
            actualTabsWidth[i] = width;
            actualWidthSum += width;
        }
        var remainder = containerWidth - actualWidthSum;
        for (var i = rightIndex; i >= 0; i--) {
            if (remainder > 0) {
                actualTabsWidth[i]++;
                remainder--;
            }
            else {
                break;
            }
        }
    }
    else {
        rightIndex = leftIndex;
        actualTabsWidth[leftIndex] = containerWidth;
    }
    return {
        widths: actualTabsWidth,
        leftVisibleIndex: actualLeftIndex,
        rightVisibleIndex: rightIndex
    };
}
exports.calcTabHeadersWidth = calcTabHeadersWidth;


/***/ }),
/* 541 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _utils_1 = __webpack_require__(3);
exports.size = function (w, h) {
    return {
        width: w,
        height: h,
        plus: function (arg) {
            var correctSize = function (value, addition) {
                return (Number.MAX_VALUE - value >= addition) ? value + addition : Number.MAX_VALUE;
            };
            return exports.size(correctSize(this.width, arg.width), correctSize(this.height, arg.height));
        },
        minus: function (arg) {
            return exports.size(this.width - arg.width, this.height - arg.height);
        },
        compareByDirections: function (size) {
            if (!size) {
                return ['width', 'height'];
            }
            else {
                var differentDirections = [];
                if (size.width != this.width)
                    differentDirections.push('width');
                if (size.height != this.height)
                    differentDirections.push('height');
                return differentDirections;
            }
        },
        constrain: function (constraints) {
            var that = this, ensureDirection = function (direction) {
                return exports.ensureRange(that[direction], constraints.min[direction], constraints.max[direction]);
            };
            return exports.size(ensureDirection('width'), ensureDirection('height'));
        },
        clone: function () {
            return exports.size(this.width, this.height);
        }
    };
};
exports.constraints = function (pMin, pMax) {
    return {
        min: pMin,
        max: pMax,
        consolidate: function (sourceConstraints, consolidateDirection) {
            return exports.constraints(this._consolidatePart(sourceConstraints, consolidateDirection, 'min'), this._consolidatePart(sourceConstraints, consolidateDirection, 'max'));
        },
        isFixed: function (direction) {
            if (direction) {
                var differentDirections = this.min.compareByDirections(this.max);
                return differentDirections.indexOf(direction) === -1;
            }
            else {
                return false;
            }
        },
        _consolidatePart: function (sourceConstraints, consolidateDirection, part) {
            var that = this, resultSize = exports.size(), direction = consolidateDirection ? consolidateDirection : 'width', crossDirection = exports.getCrossDirection(direction), consolidateSumFunc = function (currentDirection) {
                var val1 = that[part][currentDirection], val2 = sourceConstraints[part][currentDirection];
                return (val1 === Number.MAX_VALUE || val2 === Number.MAX_VALUE) ? Number.MAX_VALUE : (val1 + val2);
            }, consolidateMaxMinFunc = function (currentDirection, isCross) {
                var val1 = that[part][currentDirection], val2 = sourceConstraints[part][currentDirection];
                return (part === 'min' || isCross) ? Math.max(val1, val2) : Math.min(val1, val2);
            };
            resultSize[direction] = consolidateDirection ? consolidateSumFunc(direction) : consolidateMaxMinFunc(direction, false);
            resultSize[crossDirection] = consolidateMaxMinFunc(crossDirection, !!consolidateDirection);
            return resultSize;
        }
    };
};
exports.nonClientElement = function (width, height) {
    var resultSize = exports.size(width, height);
    return {
        getBounds: function () {
            return resultSize.clone();
        }
    };
};
exports.getCrossDirection = function (direction) {
    return direction === 'width' ? 'height' : 'width';
};
exports.defConstraints = function (valueMin, valueMax) {
    var paramValueMin = valueMin === undefined ? 0 : valueMin, paramValueMax = valueMax === undefined ? Number.MAX_VALUE : valueMax;
    return new this.constraints(new this.size(paramValueMin, paramValueMin), new this.size(paramValueMax, paramValueMax));
};
exports.defSizeInPercents = function (direction, value) {
    var size = new this.size(1, 1);
    size[direction] = value;
    return size;
};
exports.checkRange = function (value, min, max) {
    return min <= value && value <= max;
};
exports.ensureRange = function (value, min, max) {
    return Math.max(Math.min(value, max), min);
};
exports.deepCloneObject = function (injectObject, sourceObject, noDeepCopyPropsValues) {
    var copyObj = {};
    _utils_1.extend(copyObj, sourceObject);
    for (var prop in noDeepCopyPropsValues)
        delete copyObj[prop];
    _utils_1.deepExtend(injectObject, copyObj);
    _utils_1.extend(injectObject, noDeepCopyPropsValues);
    return injectObject;
};


/***/ }),
/* 542 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var _formatter_1 = __webpack_require__(25);
var _render_helper_1 = __webpack_require__(28);
exports.titleTooltipClasses = {
    root: 'dx-dashboard-title-tooltip',
    list: 'dx-dashboard-title-tooltip-list',
    listText: 'dx-dashboard-title-tooltip-list-text',
    subList: 'dx-dashboard-title-tooltip-sublist',
    subListItem: 'dx-dashboard-title-tooltip-sublist-item'
};
var FilterIconTooltip = (function () {
    function FilterIconTooltip() {
    }
    FilterIconTooltip.getTooltipContent = function (contentElement, masterFilterValues) {
        var _this = this;
        contentElement.addClass(exports.titleTooltipClasses.root);
        var $tooltipList = $('<ul/>', { 'class': exports.titleTooltipClasses.list });
        masterFilterValues.forEach(function (argument, i) {
            var $tooltipListItem = $('<li/>').appendTo($tooltipList);
            $tooltipListItem.css({ 'padding-top': i == 0 ? 0 : _this.FILTER_LIST_SPACE + 'px' });
            _render_helper_1.RenderHelper.html($('<div/>', { 'class': exports.titleTooltipClasses.listText }).appendTo($tooltipListItem).get(0), argument.Name, true);
            var $tooltipSublist = $('<ul/>', { 'class': exports.titleTooltipClasses.subList }).appendTo($tooltipListItem);
            var maxFilterListValues = _this._calcMaxFilterListValues(masterFilterValues);
            var maxFilterValues = _this._calcMaxFilterValues(maxFilterListValues, masterFilterValues);
            for (var j = 0; j < maxFilterValues; j++) {
                if (j >= argument.Values.length && argument.Truncated
                    || j + 1 == maxFilterValues && (j + 1 < argument.Values.length
                        || argument.Truncated)) {
                    $('<li/>', { 'class': exports.titleTooltipClasses.subListItem }).appendTo($tooltipSublist).append('...');
                    break;
                }
                if (j >= argument.Values.length) {
                    break;
                }
                _render_helper_1.RenderHelper.html($('<li/>', { 'class': exports.titleTooltipClasses.subListItem }).appendTo($tooltipSublist).get(0), _formatter_1.formatFilterValue(argument.Values[j]), true);
            }
        });
        return $tooltipList;
    };
    FilterIconTooltip._calcMaxFilterListValues = function (masterFilterValues) {
        var that = this, lineHeightString = $('<div/>', { 'class': exports.titleTooltipClasses.root }).css('line-height'), lineHeightTmp = parseInt(lineHeightString, 10), lineHeight = lineHeightTmp && lineHeightString.length > 2 && lineHeightString.substr(lineHeightString.length - 2) == 'px' ? lineHeightTmp : this.DEFAULT_LINE_HEIGHT, maxHeight = this._calcMaxHeight();
        return Math.floor((maxHeight - (masterFilterValues.length - 1) * this.FILTER_LIST_SPACE) / lineHeight);
    };
    FilterIconTooltip._calcMaxFilterValues = function (maxFilterListValues, masterFilterValues) {
        var that = this, MIN_FILTER_VALUES = 4, MAX_FILTER_LIST_VALUES = 100, maxFilterValues, curFilterListValues;
        maxFilterListValues = Math.min(maxFilterListValues, MAX_FILTER_LIST_VALUES);
        for (maxFilterValues = Math.max(maxFilterListValues, MIN_FILTER_VALUES); maxFilterValues >= MIN_FILTER_VALUES; maxFilterValues--) {
            if (maxFilterValues == MIN_FILTER_VALUES) {
                break;
            }
            curFilterListValues = 0;
            $.each(masterFilterValues, function (index, dimensionFilterValues) {
                curFilterListValues += (maxFilterValues < dimensionFilterValues.Values.length ? maxFilterValues : dimensionFilterValues.Values.length) + 1;
                if (curFilterListValues > maxFilterListValues) {
                    return false;
                }
            });
            if (curFilterListValues <= maxFilterListValues) {
                break;
            }
        }
        return maxFilterValues;
    };
    FilterIconTooltip._calcMaxHeight = function () {
        return Math.floor($(window).height() * 0.75);
    };
    FilterIconTooltip.FILTER_LIST_SPACE = 8;
    FilterIconTooltip.DEFAULT_LINE_HEIGHT = 16;
    return FilterIconTooltip;
}());
exports.FilterIconTooltip = FilterIconTooltip;


/***/ }),
/* 543 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tooltip_1 = __webpack_require__(216);
var _utils_1 = __webpack_require__(3);
var _render_helper_1 = __webpack_require__(28);
var _caption_toolbar_css_classes_1 = __webpack_require__(31);
var _popup_menu_creator_1 = __webpack_require__(339);
var DashboardCaptionToolbarAdapter = (function () {
    function DashboardCaptionToolbarAdapter(_encodeHtml) {
        this._encodeHtml = _encodeHtml;
    }
    DashboardCaptionToolbarAdapter.prototype.createToolbarItem = function (item, controlContainer, popupContainer, onMenuItemClick) {
        var _this = this;
        if (item.isSeparator)
            return this._createSeparatorItem(item);
        this._validate(item);
        var toolbarItem = {
            location: item.location
        };
        if (item.type === 'button' || item.type === 'menu') {
            toolbarItem.widget = 'dxButton';
            toolbarItem.options = this._createToolbarItemOptions(item, controlContainer, popupContainer, onMenuItemClick);
        }
        else {
            if (item.template) {
                toolbarItem.template = item.template;
            }
            else if (item.text) {
                toolbarItem.template = function () {
                    var textDiv = document.createElement('div');
                    textDiv.classList.add(_caption_toolbar_css_classes_1.cssClasses.ellipsisText);
                    _render_helper_1.RenderHelper.html(textDiv, item.text, _this._encodeHtml);
                    return textDiv;
                };
            }
            else {
                return undefined;
            }
        }
        return toolbarItem;
    };
    DashboardCaptionToolbarAdapter.prototype._applyText = function (item, text) {
        if (this._encodeHtml === false) {
            item.html = text;
        }
        else {
            item.text = text;
        }
    };
    DashboardCaptionToolbarAdapter.prototype._createToolbarItemOptions = function (item, controlContainer, popupContainer, onMenuItemClick) {
        var _this = this;
        var itemOptions = {};
        if (item.template === undefined) {
            var classNames = this._fillCssClasses(item);
            if (classNames.length > 0) {
                itemOptions.elementAttr = {
                    class: classNames.join(' ')
                };
            }
        }
        if (item.tooltip) {
            itemOptions.onContentReady = function (data) {
                var options = _this._createTooltipOptions(item.tooltip, data.element, popupContainer);
                var toolTipElement = document.createElement('div');
                toolTipElement.classList.add(item.tooltip['className']);
                new tooltip_1.default(toolTipElement, options);
                _utils_1.$unwrap(data.element).appendChild(toolTipElement);
            };
        }
        else if (item.hint) {
            itemOptions.hint = item.hint;
        }
        if (item.template) {
            itemOptions.template = item.template;
        }
        else if (item.icon) {
            itemOptions.template = function (buttonData, contentElement) {
                return _utils_1.createSvgIconElement(item.icon);
            };
        }
        else if (item.text) {
            this._applyText(itemOptions, item.text);
        }
        if (item.type === 'button' && item.click) {
            itemOptions.onClick = function (data) { return item.click(data.element); };
        }
        else if (item.type === 'menu' && item.menu && (item.menu.items && item.menu.items.length > 0 || item.menu.itemTemplate)) {
            itemOptions.onClick = function (data) { return _popup_menu_creator_1.PopupMenuCreator.toggleMenu(_utils_1.$unwrap(data.element).querySelector('.dx-button-content'), item.menu, popupContainer, controlContainer, onMenuItemClick); };
        }
        if (!!item.disabled) {
            itemOptions.disabled = item.disabled;
        }
        return itemOptions;
    };
    DashboardCaptionToolbarAdapter.prototype._createTooltipOptions = function (tooltip, target, container) {
        var _this = this;
        var contentTemplate = typeof tooltip === 'string' ? function (element) { return _render_helper_1.RenderHelper.html(_utils_1.$unwrap(element), tooltip, _this._encodeHtml); } : tooltip.template;
        return {
            target: target,
            contentTemplate: contentTemplate,
            showEvent: 'mouseenter',
            hideEvent: 'mouseleave',
            container: container,
        };
    };
    DashboardCaptionToolbarAdapter.prototype._fillCssClasses = function (item) {
        var classNames = [];
        if (item.checked && item.type === 'button')
            classNames.push(_caption_toolbar_css_classes_1.cssClasses.checked);
        if (item.icon) {
            classNames.push(item.icon);
        }
        else if (item.text) {
            classNames.push(_caption_toolbar_css_classes_1.cssClasses.textButton);
        }
        return classNames;
    };
    DashboardCaptionToolbarAdapter.prototype._validate = function (item) {
        var menu = item.menu;
        var isIconMenuItem = item.type === 'menu' && menu && menu.type === 'icons';
        if (isIconMenuItem && menu.columnCount !== undefined && menu.columnCount < 1)
            throw new Error('The columnCount property must be greater than zero.');
    };
    DashboardCaptionToolbarAdapter.prototype._createSeparatorItem = function (item) {
        return {
            location: item.location,
            html: '<div class="' + _caption_toolbar_css_classes_1.cssClasses.captionPanelSeparator + '"></div>'
        };
    };
    return DashboardCaptionToolbarAdapter;
}());
exports.DashboardCaptionToolbarAdapter = DashboardCaptionToolbarAdapter;


/***/ }),
/* 544 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.ui.dxTileView };

/***/ }),
/* 545 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function calcMaxWidth(itemsWidth, sectionWidth, sectionMaxWidth) {
    var itemsMaxWidth = itemsWidth.map(function (item) { return undefined; });
    if (sectionWidth > sectionMaxWidth) {
        for (var i = itemsWidth.length - 1; i >= 0; i--) {
            var difference = sectionWidth - sectionMaxWidth;
            var itemWidth = itemsWidth[i];
            var itemMaxWidth = Math.max(0, itemWidth - difference);
            sectionWidth -= (itemWidth - itemMaxWidth);
            itemsMaxWidth[i] = itemMaxWidth;
            if (sectionWidth <= sectionMaxWidth) {
                break;
            }
        }
    }
    return itemsMaxWidth;
}
exports.calcMaxWidth = calcMaxWidth;


/***/ }),
/* 546 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var COLUMN_MIN_WIDTH = 10;
var ColumnWidthCalculator = (function () {
    function ColumnWidthCalculator() {
    }
    Object.defineProperty(ColumnWidthCalculator.prototype, "columnsResized", {
        get: function () {
            return this._columnWidthsStorage && this._columnWidthsStorage.columnsResized ? true : false;
        },
        enumerable: true,
        configurable: true
    });
    ColumnWidthCalculator.prototype.reset = function (viewModel, columnWidthMode) {
        this._resetWidthOptions(viewModel, columnWidthMode);
        this._columnWidthsStorage = undefined;
    };
    ColumnWidthCalculator.prototype.getLeftPrintingColumnIndex = function (hScrollPosition) {
        var that = this, columnIndex = 0, widthSum = 0;
        $.each(that._columnWidths, function (index, width) {
            if (hScrollPosition < widthSum + width / 2) {
                columnIndex = index;
                return false;
            }
            widthSum += width;
        });
        return columnIndex;
    };
    ColumnWidthCalculator.prototype.getClientWidthOptions = function () {
        var that = this, clientWidthOptions;
        if (that.widthOptions) {
            clientWidthOptions = {
                mode: that.widthOptions.mode,
                columnsOptions: []
            };
            $.each(that.widthOptions.columnsOptions, function (i, info) {
                clientWidthOptions.columnsOptions[i] = {
                    widthType: info.widthType,
                    weight: info.weight
                };
            });
        }
        return clientWidthOptions;
    };
    ColumnWidthCalculator.prototype.onDataLoaded = function (viewModel, columnWidthMode) {
        var that = this;
        this._resetWidthOptions(viewModel, columnWidthMode);
        if (that._columnWidthsStorage) {
            that.widthOptions.mode = that._columnWidthsStorage.mode;
            $.each(that.widthOptions.columnsOptions, function (i, info) {
                $.each(that._columnWidthsStorage.columnsOptions, function (j, storageWidthInfo) {
                    if (info.actualIndex === storageWidthInfo.actualIndex) {
                        info.widthType = storageWidthInfo.widthType;
                        info.weight = storageWidthInfo.weight;
                    }
                });
            });
        }
    };
    ColumnWidthCalculator.prototype.calcColumnsWidth = function (bestFitProvider, maxVisibleWidth, charWidth) {
        var _this = this;
        this._columnWidths = [];
        var widthInfo = this._createWidthInfo(bestFitProvider, charWidth);
        this._calcWidth(widthInfo, maxVisibleWidth);
        widthInfo.columnsOptions.forEach(function (columnInfo) {
            _this._columnWidths.push(columnInfo.actualWidth);
        });
        return this._columnWidths;
    };
    ColumnWidthCalculator.prototype.onColumnResized = function (leftColumnIndex, leftColumnWidth, rightColumnWidth) {
        this._unfixColumnWidth(leftColumnIndex);
        if (leftColumnWidth < COLUMN_MIN_WIDTH) {
            rightColumnWidth = leftColumnWidth + rightColumnWidth - COLUMN_MIN_WIDTH;
            leftColumnWidth = COLUMN_MIN_WIDTH;
        }
        else if (rightColumnWidth < COLUMN_MIN_WIDTH) {
            leftColumnWidth = leftColumnWidth + rightColumnWidth - COLUMN_MIN_WIDTH;
            rightColumnWidth = COLUMN_MIN_WIDTH;
        }
        this._columnWidths[leftColumnIndex] = leftColumnWidth;
        this._columnWidths[leftColumnIndex + 1] = rightColumnWidth;
        this._updateWeight(this.widthOptions.columnsOptions, this._columnWidths);
        this._updateColumnWidthsStorage();
        return this._columnWidths;
    };
    ColumnWidthCalculator.prototype._unfixColumnWidth = function (leftColumnIndex) {
        var that = this, leftColumnInfo = that.widthOptions.columnsOptions[leftColumnIndex], rightColumnInfo = that.widthOptions.columnsOptions[leftColumnIndex + 1], unfixColumnWidth = function (info) {
            info.widthType = 'Weight';
        };
        that.widthOptions.mode = 'Manual';
        if (that._isAllColumnsFixed()) {
            $.each(that.widthOptions.columnsOptions, function (_, info) {
                unfixColumnWidth(info);
            });
        }
        else {
            unfixColumnWidth(leftColumnInfo);
            unfixColumnWidth(rightColumnInfo);
        }
    };
    ColumnWidthCalculator.prototype._calcWidth = function (optionsInfo, maxVisibleWidth) {
        var actualWidthSum = 0, autoFitToContents = optionsInfo.mode === 'AutoFitToContents';
        $.each(optionsInfo.columnsOptions, function (_, info) {
            info.actualWidth = info.initialWidth;
            actualWidthSum += info.initialWidth;
        });
        if (actualWidthSum !== maxVisibleWidth && (!autoFitToContents || (autoFitToContents && actualWidthSum < maxVisibleWidth))) {
            actualWidthSum = this._scaleColumns(optionsInfo, false, maxVisibleWidth, actualWidthSum);
            if (actualWidthSum !== maxVisibleWidth) {
                this._scaleColumns(optionsInfo, true, maxVisibleWidth, actualWidthSum);
            }
        }
    };
    ColumnWidthCalculator.prototype._scaleColumns = function (optionsInfo, isFixed, maxVisibleWidth, actualWidthSum) {
        var that = this, scalingColumnSum, targetScalingColumnSum, updatedActualWidthSum, nonScalingColumnSum = 0;
        $.each(optionsInfo.columnsOptions, function (_, columnInfo) {
            if (!that._isScaledColumns(optionsInfo.mode, columnInfo.widthType, isFixed)) {
                nonScalingColumnSum += columnInfo.actualWidth;
            }
        });
        scalingColumnSum = actualWidthSum - nonScalingColumnSum;
        targetScalingColumnSum = Math.abs(maxVisibleWidth - nonScalingColumnSum);
        updatedActualWidthSum = nonScalingColumnSum;
        $.each(optionsInfo.columnsOptions, function (_, columnInfo) {
            if (that._isScaledColumns(optionsInfo.mode, columnInfo.widthType, isFixed)) {
                var correctedWidth = Math.round(targetScalingColumnSum * columnInfo.actualWidth / scalingColumnSum), actualWidth = Math.max(correctedWidth, COLUMN_MIN_WIDTH);
                columnInfo.actualWidth = actualWidth;
                updatedActualWidthSum += actualWidth;
            }
        });
        return that._spreadRemainder(optionsInfo, isFixed, maxVisibleWidth, updatedActualWidthSum);
    };
    ColumnWidthCalculator.prototype._spreadRemainder = function (optionsInfo, isFixed, maxVisibleWidth, actualWidthSum) {
        for (var i = optionsInfo.columnsOptions.length - 1; i >= 0; i--) {
            var columnInfo = optionsInfo.columnsOptions[i];
            var remainder = actualWidthSum - maxVisibleWidth;
            if (remainder === 0)
                return actualWidthSum;
            if (this._isScaledColumns(optionsInfo.mode, columnInfo.widthType, isFixed)) {
                columnInfo.actualWidth -= remainder;
                actualWidthSum -= remainder;
                if (columnInfo.actualWidth < COLUMN_MIN_WIDTH) {
                    actualWidthSum += Math.abs(columnInfo.actualWidth - COLUMN_MIN_WIDTH);
                    columnInfo.actualWidth = COLUMN_MIN_WIDTH;
                }
            }
        }
        return actualWidthSum;
    };
    ColumnWidthCalculator.prototype._isScaledColumns = function (widthMode, widthType, isFixed) {
        var isFixedWidth = function (widthMode, widthType) {
            return widthMode !== 'Manual' || widthType != 'Weight';
        };
        return isFixedWidth(widthMode, widthType) === isFixed;
    };
    ColumnWidthCalculator.prototype._resetWidthOptions = function (viewModel, columnWidthMode) {
        var that = this, columns = viewModel.Columns, isManualColumnWidthMode = columnWidthMode == 'Manual';
        that.widthOptions = {
            mode: columnWidthMode,
            columnsOptions: []
        };
        $.each(columns, function (i, column) {
            that.widthOptions.columnsOptions[i] = {
                actualIndex: column.ActualIndex,
                widthType: column.WidthType,
                weight: column.Weight,
                fixedWidth: column.FixedWidth
            };
        });
    };
    ColumnWidthCalculator.prototype._createWidthInfo = function (bestFitProvider, charWidth) {
        var that = this, isManualMode = that.widthOptions.mode == 'Manual', widthInfo = {
            mode: that.widthOptions.mode,
            columnsOptions: []
        };
        $.each(that.widthOptions.columnsOptions, function (i, info) {
            var initialWidth = 0;
            if (!isManualMode || info.widthType === 'FitToContent') {
                initialWidth = bestFitProvider.getBestFit(i);
            }
            else if (isManualMode && info.widthType === 'FixedWidth') {
                initialWidth = Math.round(info.fixedWidth * charWidth);
            }
            else {
                initialWidth = info.weight;
            }
            widthInfo.columnsOptions.push({
                widthType: info.widthType,
                initialWidth: initialWidth,
                actualWidth: 0,
            });
        });
        return widthInfo;
    };
    ColumnWidthCalculator.prototype._updateColumnWidthsStorage = function () {
        var that = this, found, res = {
            columnsResized: true,
            mode: that.widthOptions.mode,
            columnsOptions: []
        };
        for (var i = 0; i < that.widthOptions.columnsOptions.length; i++) {
            res.columnsOptions.push(that.widthOptions.columnsOptions[i]);
        }
        if (that._columnWidthsStorage) {
            for (var i = 0; i < that._columnWidthsStorage.columnsOptions.length; i++) {
                found = false;
                for (var j = 0; j < res.columnsOptions.length; j++) {
                    if (that._columnWidthsStorage.columnsOptions[i].actualIndex === res.columnsOptions[j].actualIndex) {
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    res.columnsOptions.push(that._columnWidthsStorage.columnsOptions[i]);
                }
            }
        }
        this._columnWidthsStorage = res;
    };
    ColumnWidthCalculator.prototype._isAllColumnsFixed = function () {
        var that = this, allColumnsFixed = true;
        $.each(that.widthOptions.columnsOptions, function (_, info) {
            if (info.widthType === 'Weight') {
                allColumnsFixed = false;
                return false;
            }
        });
        return allColumnsFixed;
    };
    ColumnWidthCalculator.prototype._updateWeight = function (columnsWidthInfo, columnWidths) {
        var widthSum = 0;
        var weightSum = 0;
        $.each(columnsWidthInfo, function (i, info) {
            if (info.widthType === 'Weight') {
                widthSum += columnWidths[i];
                weightSum += info.weight;
            }
        });
        $.each(columnsWidthInfo, function (i, info) {
            if (info.widthType === 'Weight') {
                info.weight = columnWidths[i] * weightSum / widthSum;
            }
        });
    };
    return ColumnWidthCalculator;
}());
exports.ColumnWidthCalculator = ColumnWidthCalculator;


/***/ }),
/* 547 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var _floating_toolbar_base_1 = __webpack_require__(218);
var HoveredFloatingCaptionToolbar = (function (_super) {
    __extends(HoveredFloatingCaptionToolbar, _super);
    function HoveredFloatingCaptionToolbar(_container, _controlContainer, _popupContainer, encodeHtml, isBottomPosition) {
        return _super.call(this, _container, _controlContainer, _popupContainer, encodeHtml, isBottomPosition) || this;
    }
    HoveredFloatingCaptionToolbar.prototype.calcMinWidth = function (options) {
        return 0;
    };
    HoveredFloatingCaptionToolbar.prototype.dispose = function () {
        if (this._popupContainer) {
            $(this._popupContainer).off('mouseenter.captionPanel');
            $(this._popupContainer).off('mouseleave.captionPanel');
        }
        _super.prototype.dispose.call(this);
    };
    HoveredFloatingCaptionToolbar.prototype._appendToContainer = function (toolbarDiv) {
        var _this = this;
        var element = _super.prototype._appendToContainer.call(this, toolbarDiv);
        $(this._popupContainer).on('mouseenter.captionPanel', function () { return _this.showFloatingPanel(); });
        $(this._popupContainer).on('mouseleave.captionPanel', function () { return _this.hideFloatingPanel(); });
        return element;
    };
    HoveredFloatingCaptionToolbar.prototype._createInstance = function () {
        return new HoveredFloatingCaptionToolbar(undefined, undefined, undefined, this.encodeHtml, this._isBottomPosition);
    };
    return HoveredFloatingCaptionToolbar;
}(_floating_toolbar_base_1.FloatingCaptionToolbarBase));
exports.HoveredFloatingCaptionToolbar = HoveredFloatingCaptionToolbar;


/***/ }),
/* 548 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var _caption_toolbar_arranger_1 = __webpack_require__(148);
var _caption_toolbar_base_1 = __webpack_require__(149);
var _caption_toolbar_css_classes_1 = __webpack_require__(31);
var HoveredDashboardCaptionToolbar = (function (_super) {
    __extends(HoveredDashboardCaptionToolbar, _super);
    function HoveredDashboardCaptionToolbar(_container, _controlContainer, _popupContainer, encodeHtml, _hasBorder) {
        var _this = _super.call(this, _container, _controlContainer, _popupContainer, encodeHtml) || this;
        _this._hasBorder = _hasBorder;
        _this._containerHovered = false;
        return _this;
    }
    HoveredDashboardCaptionToolbar.prototype.dispose = function () {
        if (this._popupContainer) {
            $(this._popupContainer).off('mouseenter.captionPanel');
            $(this._popupContainer).off('mouseleave.captionPanel');
        }
        _super.prototype.dispose.call(this);
    };
    HoveredDashboardCaptionToolbar.prototype._appendToContainer = function (toolbarDiv) {
        var _this = this;
        var toggleHoverState = function (hovered) {
            if (_this._containerHovered !== hovered) {
                _this._containerHovered = hovered;
                _this._updateToolbar();
            }
        };
        $(this._popupContainer).on('mouseenter.captionPanel', function () { return toggleHoverState(true); });
        $(this._popupContainer).on('mouseleave.captionPanel', function () { return toggleHoverState(false); });
        return _super.prototype._appendToContainer.call(this, toolbarDiv);
    };
    HoveredDashboardCaptionToolbar.prototype.update = function (options) {
        var heightChanded = _super.prototype.update.call(this, options);
        if (this._hasBorder) {
            this._toolbarDiv.classList.add(_caption_toolbar_css_classes_1.cssClasses.captionBorder);
        }
        return heightChanded;
    };
    HoveredDashboardCaptionToolbar.prototype._getVisibleItems = function () {
        return _caption_toolbar_arranger_1.arrangeHoveredToolbarItems(this._options, this._containerHovered, this.disabled);
    };
    HoveredDashboardCaptionToolbar.prototype._createInstance = function () {
        return new HoveredDashboardCaptionToolbar(undefined, undefined, undefined, this.encodeHtml, this._hasBorder);
    };
    HoveredDashboardCaptionToolbar.prototype._processToolbarBeforeGettingSize = function (toolbar) {
        toolbar.setHoverState(true);
    };
    HoveredDashboardCaptionToolbar.prototype.setHoverState = function (hovered) {
        this._containerHovered = hovered;
    };
    return HoveredDashboardCaptionToolbar;
}(_caption_toolbar_base_1.DashboardCaptionToolbarBase));
exports.HoveredDashboardCaptionToolbar = HoveredDashboardCaptionToolbar;


/***/ }),
/* 549 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = __webpack_require__(69);
var $ = __webpack_require__(2);
var _caption_toolbar_css_classes_1 = __webpack_require__(31);
var _clickable_floating_toolbar_1 = __webpack_require__(341);
var MinimizedClickableCaptionToolbar = (function (_super) {
    __extends(MinimizedClickableCaptionToolbar, _super);
    function MinimizedClickableCaptionToolbar(_container, _controlContainer, _popupContainer, encodeHtml, isBottomPosition, itemHasOwnContent) {
        return _super.call(this, _container, _controlContainer, _popupContainer, encodeHtml, isBottomPosition, itemHasOwnContent) || this;
    }
    MinimizedClickableCaptionToolbar.prototype.showPreviewFloatingPanel = function () {
        if (this._getVisibleItems().length > 0) {
            this._previewFloatingPanel.show();
            this._toolbar.repaint();
            this._disableShield();
            _clickable_floating_toolbar_1.ClickableFloatingCaptionToolbar.activateToolbar(this);
        }
    };
    MinimizedClickableCaptionToolbar.prototype.hideFloatingPanel = function () {
        _super.prototype.hideFloatingPanel.call(this);
        this._previewFloatingPanel.hide();
        this._toolbar.repaint();
        this._enableShield();
    };
    MinimizedClickableCaptionToolbar.prototype.dispose = function () {
        this._previewFloatingPanel && this._previewFloatingPanel.dispose();
        events_1.off(this._previewToolbarDiv, 'click.preview');
        _super.prototype.dispose.call(this);
    };
    MinimizedClickableCaptionToolbar.prototype._createInstance = function () {
        return new MinimizedClickableCaptionToolbar(undefined, undefined, undefined, this.encodeHtml, this._isBottomPosition, this._itemHasOwnContent);
    };
    MinimizedClickableCaptionToolbar.prototype._appendToContainer = function (toolbarDiv) {
        var _this = this;
        this._previewToolbarDiv = document.createElement('div');
        this._previewToolbarDiv.classList.add(_caption_toolbar_css_classes_1.cssClasses.toolbarPreview);
        var previewFloatingPanelDiv = document.createElement('div');
        previewFloatingPanelDiv.classList.add(_caption_toolbar_css_classes_1.cssClasses.floatingContainer);
        $(this._container).prepend(previewFloatingPanelDiv);
        this._previewFloatingPanel = this._createFloatingPanel(this._previewToolbarDiv, previewFloatingPanelDiv, true);
        this._previewToolbarDiv.appendChild($('<svg><use xlink:href="#' + _caption_toolbar_css_classes_1.cssClasses.ellipsisIcon + '" /></svg>').get(0));
        events_1.on(this._previewToolbarDiv, 'click.preview', function () { return _this.showFloatingPanel(); });
        return _super.prototype._appendToContainer.call(this, toolbarDiv);
    };
    MinimizedClickableCaptionToolbar.prototype._subscribeOnShieldEvents = function () {
        var _this = this;
        events_1.on(this._shieldDiv, 'click.shield', function () { return _this.showPreviewFloatingPanel(); });
    };
    return MinimizedClickableCaptionToolbar;
}(_clickable_floating_toolbar_1.ClickableFloatingCaptionToolbar));
exports.MinimizedClickableCaptionToolbar = MinimizedClickableCaptionToolbar;


/***/ }),
/* 550 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var _caption_toolbar_css_classes_1 = __webpack_require__(31);
var _floating_toolbar_base_1 = __webpack_require__(218);
var MinimizedToolbarState;
(function (MinimizedToolbarState) {
    MinimizedToolbarState[MinimizedToolbarState["Hidden"] = 0] = "Hidden";
    MinimizedToolbarState[MinimizedToolbarState["Minimim"] = 1] = "Minimim";
    MinimizedToolbarState[MinimizedToolbarState["Maximim"] = 2] = "Maximim";
})(MinimizedToolbarState = exports.MinimizedToolbarState || (exports.MinimizedToolbarState = {}));
var MinimizedHoveredCaptionToolbar = (function (_super) {
    __extends(MinimizedHoveredCaptionToolbar, _super);
    function MinimizedHoveredCaptionToolbar(_container, _controlContainer, _popupContainer, encodeHtml, isBottomPosition) {
        var _this = _super.call(this, _container, _controlContainer, _popupContainer, encodeHtml, isBottomPosition) || this;
        _this._toolbarState = MinimizedToolbarState.Hidden;
        _this._containerHovered = false;
        _this._onContainerHovered = function () {
            _this._containerHovered = true;
            _this._showPreviewFloatingPanel();
        };
        _this._onContainerLeave = function () {
            _this._containerHovered = false;
            _this._hidePreviewFloatingPanel();
        };
        _this._onPreviewHovered = function () {
            _this._hidePreviewFloatingPanel();
            _this.showFloatingPanel();
            _this._floatingPanel.repaint();
            _this._toolbarState = MinimizedToolbarState.Maximim;
        };
        _this._onToolbarLeave = function () {
            _this.hideFloatingPanel();
            _this._toolbarState = MinimizedToolbarState.Hidden;
            _this._showPreviewFloatingPanel();
        };
        return _this;
    }
    Object.defineProperty(MinimizedHoveredCaptionToolbar.prototype, "hasItems", {
        get: function () {
            return this._getVisibleItems().length > 0;
        },
        enumerable: true,
        configurable: true
    });
    MinimizedHoveredCaptionToolbar.prototype.calcMinWidth = function (options) {
        return 0;
    };
    MinimizedHoveredCaptionToolbar.prototype.dispose = function () {
        if (this._popupContainer) {
            this._popupContainer.removeEventListener('mouseenter', this._onContainerHovered);
            this._popupContainer.removeEventListener('mouseleave', this._onContainerLeave);
        }
        if (this._previewToolbarDiv) {
            this._previewToolbarDiv.removeEventListener('mouseenter', this._onPreviewHovered);
            this._toolbarDiv.removeEventListener('mouseleave', this._onToolbarLeave);
        }
        this._previewFloatingPanel && this._previewFloatingPanel.dispose();
        _super.prototype.dispose.call(this);
    };
    MinimizedHoveredCaptionToolbar.prototype.onResize = function () {
        _super.prototype.onResize.call(this);
        if (this._initialized) {
            this._previewFloatingPanel.repaint();
        }
    };
    MinimizedHoveredCaptionToolbar.prototype._appendToContainer = function (toolbarDiv) {
        var element = _super.prototype._appendToContainer.call(this, toolbarDiv);
        this._previewToolbarDiv = document.createElement('div');
        this._previewToolbarDiv.classList.add(_caption_toolbar_css_classes_1.cssClasses.toolbarPreview);
        var previewFloatingPanelDiv = document.createElement('div');
        previewFloatingPanelDiv.classList.add(_caption_toolbar_css_classes_1.cssClasses.floatingContainer);
        $(this._container).prepend(previewFloatingPanelDiv);
        this._previewFloatingPanel = this._createFloatingPanel(this._previewToolbarDiv, previewFloatingPanelDiv, true);
        this._previewToolbarDiv.appendChild($('<svg><use xlink:href="#' + _caption_toolbar_css_classes_1.cssClasses.ellipsisIcon + '" /></svg>').get(0));
        this._popupContainer.addEventListener('mouseenter', this._onContainerHovered);
        this._popupContainer.addEventListener('mouseleave', this._onContainerLeave);
        this._previewToolbarDiv.addEventListener('mouseenter', this._onPreviewHovered);
        this._toolbarDiv.addEventListener('mouseleave', this._onToolbarLeave);
        return element;
    };
    MinimizedHoveredCaptionToolbar.prototype._repaintFloatingPanel = function () {
        if (!this._floatingPanel || !this._previewFloatingPanel)
            return;
        if (this._containerHovered) {
            if (this._toolbarState === MinimizedToolbarState.Maximim) {
                if (this.hasItems) {
                    this._floatingPanel.repaint();
                }
                else {
                    this.hideFloatingPanel();
                    this._toolbarState = MinimizedToolbarState.Hidden;
                }
            }
            else {
                if (this.hasItems) {
                    this._showPreviewFloatingPanel();
                }
                else {
                    this._hidePreviewFloatingPanel();
                }
            }
        }
        else {
            this.hideFloatingPanel();
            this._hidePreviewFloatingPanel();
        }
    };
    MinimizedHoveredCaptionToolbar.prototype._showPreviewFloatingPanel = function () {
        if (this._toolbarState != MinimizedToolbarState.Maximim && this.hasItems) {
            this._previewFloatingPanel.show();
            this._toolbarState = MinimizedToolbarState.Minimim;
        }
    };
    MinimizedHoveredCaptionToolbar.prototype._hidePreviewFloatingPanel = function () {
        this._previewFloatingPanel.hide();
        if (this._toolbarState === MinimizedToolbarState.Minimim)
            this._toolbarState = MinimizedToolbarState.Hidden;
    };
    MinimizedHoveredCaptionToolbar.prototype._createInstance = function () {
        return new MinimizedHoveredCaptionToolbar(undefined, undefined, undefined, this.encodeHtml, this._isBottomPosition);
    };
    return MinimizedHoveredCaptionToolbar;
}(_floating_toolbar_base_1.FloatingCaptionToolbarBase));
exports.MinimizedHoveredCaptionToolbar = MinimizedHoveredCaptionToolbar;


/***/ }),
/* 551 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var overlay_1 = __webpack_require__(172);
__webpack_require__(419);
var $ = __webpack_require__(2);
var _default_1 = __webpack_require__(6);
var _utils_1 = __webpack_require__(3);
var _z_index_1 = __webpack_require__(57);
var ItemLoadingElement = (function () {
    function ItemLoadingElement() {
    }
    ItemLoadingElement.prototype.show = function (container) {
        if (!this._overlay) {
            var overlayDiv = document.createElement('div');
            overlayDiv.classList.add('dx-dashboard-loading-indicator');
            var contentTemplate = document.createElement('div');
            contentTemplate.classList.add('dx-dashboard-item-loading-panel');
            var h1 = document.createElement('h1');
            h1.innerText = _default_1.getLocalizationById('DashboardStringId.MessageLoading');
            contentTemplate.appendChild(h1);
            this._overlay = new overlay_1.default(overlayDiv, {
                shading: true,
                animation: {
                    show: { type: 'fade', duration: 150, from: 0, to: 1, delay: 150 },
                    hide: { type: 'fade', duration: 150, to: 0, delay: 150 }
                },
                width: 'auto',
                height: 'auto',
                target: container,
                container: container,
                contentTemplate: contentTemplate,
                closeOnOutsideClick: false,
                propagateOutsideClick: true,
                position: {
                    boundary: container,
                    my: 'bottom right',
                    at: 'bottom right',
                    offset: '-10 -10',
                    of: container
                },
                onShowing: function (e) {
                    var wrapper = _utils_1.$unwrap(e.component._$wrapper);
                    wrapper.style.zIndex = (_z_index_1.zIndex.dashboardItemShield - 2).toString();
                    var overlayContent = wrapper.querySelector('.dx-overlay-content');
                    if (overlayContent) {
                        overlayContent.style.zIndex = (_z_index_1.zIndex.dashboardItemShield - 1).toString();
                    }
                }
            });
            overlayDiv.style.zIndex = _z_index_1.zIndex.dashboardItemShield.toString();
            $(container).prepend(overlayDiv);
        }
        this._overlay.show();
    };
    ItemLoadingElement.prototype.hide = function () {
        if (this._overlay) {
            this._overlay.hide();
        }
    };
    ItemLoadingElement.prototype.resize = function () {
        if (this._overlay) {
            this._overlay.repaint();
        }
    };
    return ItemLoadingElement;
}());
exports.ItemLoadingElement = ItemLoadingElement;


/***/ }),
/* 552 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var string_1 = __webpack_require__(30);
__webpack_require__(249);
var bullet_1 = __webpack_require__(249);
__webpack_require__(122);
var sparkline_1 = __webpack_require__(122);
var $ = __webpack_require__(2);
var _utils_1 = __webpack_require__(3);
var _z_index_1 = __webpack_require__(57);
var _delta_indicator_1 = __webpack_require__(151);
var _simple_indicator_1 = __webpack_require__(220);
var _render_helper_1 = __webpack_require__(28);
var GridColumnPainter = (function () {
    function GridColumnPainter() {
    }
    GridColumnPainter.renderDelta = function (parentContainer, deltaValue, isDetail) {
        var container = document.createElement('div');
        container.classList.add(this.CssClasses.flexDeltaParent);
        container.classList.add(_delta_indicator_1.DeltaIndicator.getIndicatorColorType(deltaValue.type, deltaValue.hasPositiveMeaning, deltaValue.text.useDefaultColor));
        if (!isDetail) {
            container.classList.add(this.CssClasses.rightAlignment);
        }
        parentContainer.appendChild(container);
        var textDiv = document.createElement('div');
        textDiv.classList.add(this.CssClasses.truncated);
        textDiv.innerText = deltaValue.text.value;
        container.appendChild(textDiv);
        var indicatorDiv = document.createElement('div');
        indicatorDiv.classList.add(this.CssClasses.fixed);
        indicatorDiv.classList.add(this.CssClasses.deltaIndicator);
        indicatorDiv.innerHTML = _simple_indicator_1.SimpleIndicator.getIndicator(deltaValue.type, deltaValue.hasPositiveMeaning) || '';
        container.appendChild(indicatorDiv);
    };
    GridColumnPainter.renderSparkline = function (name, showStartEndValues, parentContainer, sparklineData) {
        var container = document.createElement('div');
        container.classList.add(name + '_sparkline-container');
        container.classList.add(this.CssClasses.flexParent);
        parentContainer.appendChild(container);
        var sparklineDiv = document.createElement('div');
        sparklineDiv.classList.add(name + '_sparkline');
        container.appendChild(sparklineDiv);
        if (showStartEndValues) {
            var startDiv = document.createElement('div');
            startDiv.classList.add(this.CssClasses.sparklineStartValue);
            startDiv.classList.add(name + '_startValue');
            startDiv.innerText = sparklineData.startText;
            $(startDiv).prependTo(container);
            var endDiv = document.createElement('div');
            endDiv.classList.add(name + '_endValue');
            endDiv.innerText = sparklineData.endText;
            container.appendChild(endDiv);
        }
        _utils_1.extend(sparklineData.sparkline, {
            size: {
                height: 20,
                width: 10
            },
            pointSize: 1
        });
        new sparkline_1.default(sparklineDiv, sparklineData.sparkline);
    };
    GridColumnPainter.renderBar = function (columnName, parentContainer, tooltipText, value, zeroValue) {
        var zerovalue = zeroValue;
        var barContainer = document.createElement('div');
        barContainer.classList.add(this.CssClasses.flexParent);
        barContainer.classList.add(columnName + '_bar-container');
        parentContainer.appendChild(barContainer);
        var barDiv = document.createElement('div');
        barDiv.classList.add(columnName + '_bar');
        barContainer.appendChild(barDiv);
        new bullet_1.default(barDiv, {
            startScaleValue: -zerovalue,
            endScaleValue: 1 - zerovalue,
            value: value,
            showZeroLevel: value !== 0 && zerovalue !== 0 && zerovalue !== 1,
            showTarget: false,
            onIncidentOccurred: _render_helper_1.RenderHelper.widgetIncidentOccurred,
            tooltip: {
                container: _utils_1.tooltipContainerSelector,
                customizeTooltip: function () {
                    return {
                        text: tooltipText
                    };
                },
                zIndex: _z_index_1.zIndex.dashboardItemTooltips
            },
            size: {
                height: 20,
                width: 10
            }
        });
    };
    GridColumnPainter.renderImage = function (container, imageData) {
        var img = document.createElement('img');
        img.src = 'data:image/png;base64,' + imageData.value;
        container.appendChild(img);
    };
    GridColumnPainter.renderHyperlink = function (container, uri, displayValue, isEncodeHtml) {
        if (uri) {
            var a = document.createElement('a');
            a.target = '_blank';
            a.onclick = function (event) { return event.stopPropagation(); };
            a.rel = 'noopener noreferrer';
            a.href = _utils_1.isVulnerable(uri) ? '' : uri;
            _render_helper_1.RenderHelper.html(a, displayValue, isEncodeHtml);
            container.appendChild(a);
        }
        else {
            _render_helper_1.RenderHelper.html(container, displayValue, isEncodeHtml);
        }
    };
    GridColumnPainter.renderValue = function (container, text, isEncodeHtml) {
        if (string_1.isEmpty(text)) {
            _render_helper_1.RenderHelper.html(container, '&nbsp;', false);
        }
        else {
            _render_helper_1.RenderHelper.html(container, text, isEncodeHtml);
        }
    };
    GridColumnPainter.changeGridSparklineColumnsWidth = function (gridRootElement, columnName) {
        var that = this, startValues = gridRootElement.querySelectorAll('.' + columnName + '_startValue'), endValues = gridRootElement.querySelectorAll('.' + columnName + '_endValue'), maxStartWidth = that.calcMaxWidth(startValues), maxEndWidth = that.calcMaxWidth(endValues), sparklineDivs = gridRootElement.querySelectorAll('.' + columnName + '_sparkline'), firstsparklineContainer = $(gridRootElement.querySelectorAll('.' + columnName + '_sparkline-container')).filter(':visible').get(0), columnWidth = firstsparklineContainer ? $(firstsparklineContainer).width() : 0, sparklineWidth = columnWidth - (maxStartWidth + maxEndWidth);
        if (sparklineWidth >= 0) {
            $(startValues).width(maxStartWidth);
            $(endValues).width(maxEndWidth);
            $(startValues).show();
            $(endValues).show();
            for (var i = 0; i < sparklineDivs.length; i++) {
                var sparklineContainer = sparklineDivs[i];
                var sparkline = sparkline_1.default.getInstance(sparklineContainer);
                sparkline.option('size', { width: sparklineWidth });
                $(sparklineContainer).show();
            }
        }
        else {
            $.each(sparklineDivs, function (_, sparklineDiv) {
                $(sparklineDiv).hide();
            });
            if (columnWidth >= maxStartWidth + maxEndWidth) {
                $(startValues).show();
            }
            else {
                $(startValues).hide();
                if (columnWidth >= maxEndWidth) {
                    $(endValues).show();
                }
                else {
                    $(endValues).hide();
                }
            }
        }
    };
    GridColumnPainter.calcMaxWidth = function (values) {
        var maxWidth = 0;
        var nodeLen = values.length;
        for (var i = 0; i < nodeLen; ++i) {
            maxWidth = Math.max(maxWidth, values[i].offsetWidth);
        }
        return maxWidth;
    };
    GridColumnPainter.changeGridBarColumnsWidth = function (gridRootElement, columnName) {
        var that = this, bars = gridRootElement.querySelectorAll('.' + columnName + '_bar'), firstBarContainer = $(gridRootElement.querySelectorAll('.' + columnName + '_bar-container')).filter(':visible').get(0), columnWidth = firstBarContainer ? $(firstBarContainer).width() : 0;
        for (var i = 0; i < bars.length; ++i) {
            var barContainer = bars[i];
            if (columnWidth > 0) {
                $(barContainer).show();
                var bullet = bullet_1.default.getInstance(barContainer);
                bullet.option('size', {
                    width: columnWidth
                });
            }
            else {
                $(barContainer).hide();
            }
        }
    };
    GridColumnPainter.CssClasses = {
        flexParent: 'dx-dashboard-flex-parent',
        flexDeltaParent: 'dx-dashboard-flex-delta-parent',
        sparklineStartValue: 'dx-dashboard-sparkline-start-value',
        deltaIndicator: 'dx-dashboard-delta-indicator',
        truncated: 'dx-dashboard-truncated',
        fixed: 'dx-dashboard-fixed',
        rightAlignment: 'dx-dashboard-flex-right'
    };
    return GridColumnPainter;
}());
exports.GridColumnPainter = GridColumnPainter;


/***/ }),
/* 553 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var select_box_1 = __webpack_require__(173);
var tag_box_1 = __webpack_require__(101);
var _filter_element_data_controller_1 = __webpack_require__(97);
var index_internal_1 = __webpack_require__(37);
var _localization_ids_1 = __webpack_require__(21);
var _localizer_1 = __webpack_require__(16);
var _utils_1 = __webpack_require__(3);
var _render_helper_1 = __webpack_require__(28);
var _base_element_1 = __webpack_require__(221);
var MULTITAG_COUNT = 9;
exports.cssComboBoxClassNames = {
    item: 'dx-dashboard-combobox-filter-item',
    multiText: 'dx-dashboard-filter-item-multitext',
    margins: 'dx-dashboard-combobox-margins'
};
var comboBoxFilterElement = (function (_super) {
    __extends(comboBoxFilterElement, _super);
    function comboBoxFilterElement(container, options) {
        var _this = _super.call(this, container, options) || this;
        _this._isFixedHeight = true;
        return _this;
    }
    Object.defineProperty(comboBoxFilterElement.prototype, "_shouldApplySelectionOnInitialRender", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    comboBoxFilterElement.prototype._setSelectionUnsafe = function (values) {
        _super.prototype._setSelectionUnsafe.call(this, values);
        this._lock();
        try {
            this.widget.option('value', this._getSelection());
        }
        finally {
            this._unlock();
        }
    };
    comboBoxFilterElement.prototype._clearSelectionUnsafe = function () {
        if (!!this.options.useNeutralFilterMode) {
            this._lock();
            try {
                this.widget.option('value', null);
            }
            finally {
                this._unlock();
            }
        }
    };
    Object.defineProperty(comboBoxFilterElement.prototype, "_isBottomFloatingToolbarPosition", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(comboBoxFilterElement.prototype, "_allowPreview", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    comboBoxFilterElement.prototype._getWidgetName = function () {
        return this.isMultiSelectable ? 'dxTagBox' : 'dxSelectBox';
    };
    comboBoxFilterElement.prototype._createWidgetDiv = function () {
        var div = _super.prototype._createWidgetDiv.call(this);
        if (this.visualMode === 'content')
            div.classList.add(exports.cssComboBoxClassNames.margins);
        return div;
    };
    comboBoxFilterElement.prototype._createWidget = function (div, opts) {
        return this.isMultiSelectable ? new tag_box_1.default(div, opts) : new select_box_1.default(div, opts);
    };
    comboBoxFilterElement.prototype._getMinContentHeight = function () {
        var element = document.createElement('div');
        this._createWidget(element, this._getOptions(false));
        return _render_helper_1.RenderHelper.getElementBox(element).height;
    };
    comboBoxFilterElement.prototype._generateInnerBorderClassesUnsafe = function (element) {
        var classes = _super.prototype._generateInnerBorderClassesUnsafe.call(this, element);
        if (!this._isPaneEmpty()) {
            classes.push(exports.cssComboBoxClassNames.item);
        }
        if (element) {
            if (this._isPaneEmpty()) {
                element.classList.remove(exports.cssComboBoxClassNames.item);
            }
            else {
                element.classList.add(exports.cssComboBoxClassNames.item);
            }
        }
        return classes;
    };
    comboBoxFilterElement.prototype._getSelection = function () {
        if (this.isMultiSelectable) {
            return this.dataController.selection;
        }
        else {
            return !this.dataController.selection || !this.dataController.selection.length ? null : this.dataController.selection[0];
        }
    };
    comboBoxFilterElement.prototype._getOptions = function (includeActions) {
        var that = this;
        var addtionalOptions = that.isMultiSelectable ?
            {
                value: that._getSelection(),
                onSelectionChanged: !includeActions ? undefined : function (e) {
                    that._raiseItemClick(e.removedItems.length > 0 ? e.removedItems : e.addedItems);
                },
                placeholder: '',
                showSelectionControls: that.isMultiSelectable,
                showDropDownButton: true,
                multiline: false
            }
            : {
                value: that._getSelection(),
                placeholder: _localizer_1.localizer.getString(_localization_ids_1.localizationId.FilterElementRadioComboBoxNoDataCaption),
                onValueChanged: !includeActions ? undefined : function (e) {
                    if (e.value != null)
                        that._raiseItemClick([e.value]);
                }
            };
        var options = {
            dataSource: that.getDataSource(),
            displayExpr: that._getDisplayExpr(),
            valueExpr: 'this',
            noDataText: index_internal_1.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'),
            itemTemplate: function (item, _, element) {
                var node = _utils_1.$unwrap(element);
                var expr = that._getDisplayExpr();
                if (expr === 'html') {
                    node.innerHTML = item[expr];
                }
                else {
                    node.innerText = item[expr];
                }
            },
            onMultiTagPreparing: function (args) {
                if (that.dataController.dataSource.length === args.selectedItems.length)
                    args.text = _localizer_1.ALL_ELEMENT.text;
                else if (args.selectedItems.length < MULTITAG_COUNT)
                    args.cancel = true;
            },
            maxDisplayedTags: 1,
            selectAllMode: 'allPages',
            searchEnabled: this._enableSearch
        };
        return __assign({}, options, addtionalOptions, { keyExpr: _filter_element_data_controller_1.KEY_EXPR, multiSelectEnabled: that.isMultiSelectable, selectAllText: _localizer_1.ALL_ELEMENT.text, pageLoadMode: 'scrollBottom', dropDownOptions: {
                container: this.controlContainer
            } });
    };
    comboBoxFilterElement.prototype._resizeUnsafe = function () {
        _super.prototype._resizeUnsafe.call(this);
        this.widget.repaint();
    };
    return comboBoxFilterElement;
}(_base_element_1.filterElementBaseItem));
exports.comboBoxFilterElement = comboBoxFilterElement;


/***/ }),
/* 554 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.ui.dxButtonGroup };

/***/ }),
/* 555 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var CalendarHelper = (function () {
    function CalendarHelper() {
    }
    CalendarHelper.getCalendarMaxZoomLevel = function (groupInterval) {
        switch (groupInterval) {
            case 'Year':
                return 'decade';
            case 'QuarterYear':
            case 'MonthYear':
                return 'year';
            case 'WeekYear':
            case 'DayMonthYear':
            case 'DateHour':
            case 'DateHourMinute':
            case 'DateHourMinuteSecond':
            case 'None':
            default:
                return 'month';
        }
    };
    CalendarHelper.getCalendarType = function (groupInterval) {
        switch (groupInterval) {
            case 'DateHour':
            case 'DateHourMinute':
            case 'DateHourMinuteSecond':
            case 'None':
                return 'datetime';
            case 'Year':
            case 'QuarterYear':
            case 'MonthYear':
            case 'WeekYear':
            case 'DayMonthYear':
            default:
                return 'date';
        }
    };
    return CalendarHelper;
}());
exports.CalendarHelper = CalendarHelper;


/***/ }),
/* 556 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var tree_list_1 = __webpack_require__(421);
var tree_view_1 = __webpack_require__(422);
var $ = __webpack_require__(2);
var _filter_element_data_controller_1 = __webpack_require__(97);
var _default_1 = __webpack_require__(6);
var special_values_1 = __webpack_require__(39);
var _localization_ids_1 = __webpack_require__(21);
var _localizer_1 = __webpack_require__(16);
var _utils_1 = __webpack_require__(3);
var legacy_settings_1 = __webpack_require__(80);
var _base_element_1 = __webpack_require__(221);
exports.cssTreeViewClassNames = {
    borderVisible: 'dx-treeview-border-visible',
    topBorder: 'dx-dashboard-top-border',
    item: 'dx-dashboard-tree-item'
};
var treeViewFilterElement = (function (_super) {
    __extends(treeViewFilterElement, _super);
    function treeViewFilterElement() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    treeViewFilterElement.prototype._setSelectionUnsafe = function (values) {
        var _this = this;
        _super.prototype._setSelectionUnsafe.call(this, values);
        var selection = this.dataController.selection;
        if (!legacy_settings_1.LegacySettings.useLegacyTreeView && this.widget != null && this.widget.getSelectedRowKeys('leavesOnly').sort().toString() !== selection.sort().toString()) {
            this._lock();
            this.widget.selectRows(selection).always(function () {
                return _this._unlock();
            });
        }
    };
    treeViewFilterElement.prototype._generateInnerBorderClassesUnsafe = function (element) {
        var classes = _super.prototype._generateInnerBorderClassesUnsafe.call(this, element);
        if (!this._isPaneEmpty()) {
            classes.push(exports.cssTreeViewClassNames.item);
        }
        if (element) {
            if (this._isPaneEmpty()) {
                element.classList.remove(exports.cssTreeViewClassNames.item);
            }
            else {
                element.classList.add(exports.cssTreeViewClassNames.item);
            }
        }
        return classes;
    };
    treeViewFilterElement.prototype._clearSelectionUnsafe = function () {
        var _this = this;
        if (!!this.options.useNeutralFilterMode) {
            this._lock();
            this.widget.selectRows([]).always(function () {
                return _this._unlock();
            });
        }
    };
    treeViewFilterElement.prototype.renderContentUnsafe = function (element, changeExisting, afterRenderCallback) {
        _super.prototype.renderContentUnsafe.call(this, element, changeExisting, afterRenderCallback);
        var widgetElement = _utils_1.$unwrap(this.widget.element());
        if (legacy_settings_1.LegacySettings.useLegacyTreeView && this._isPaneEmpty() && this.visualMode !== 'content') {
            widgetElement.classList.add(exports.cssTreeViewClassNames.borderVisible);
        }
        else {
            widgetElement.classList.remove(exports.cssTreeViewClassNames.borderVisible);
        }
        return false;
    };
    treeViewFilterElement.prototype._getWidgetName = function () {
        return legacy_settings_1.LegacySettings.useLegacyTreeView ? 'dxTreeView' : 'dxTreeList';
    };
    treeViewFilterElement.prototype._createWidget = function (div, opts) {
        return legacy_settings_1.LegacySettings.useLegacyTreeView ? new tree_view_1.default(div, opts) : new tree_list_1.default(div, opts);
    };
    treeViewFilterElement.prototype._getOptions = function (includeActions) {
        var _this = this;
        var that = this;
        return legacy_settings_1.LegacySettings.useLegacyTreeView ?
            {
                items: that.dataController.dataSource,
                width: '100%',
                height: '100%',
                keyExpr: 'key',
                hoverStateEnabled: false,
                scrollDirection: 'both',
                showCheckBoxesMode: 'selectAll',
                rootValue: null,
                selectAllText: _localizer_1.ALL_ELEMENT.text,
                selectNodesRecursive: true,
                onSelectionChanged: includeActions ? function (e) { return that._raiseItemClick(e.component.getNodes()); } : undefined,
                noDataText: _default_1.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'),
            } :
            {
                dataSource: that.dataController.dataSource,
                itemsExpr: 'items',
                dataStructure: 'tree',
                columns: [{
                        caption: _localizer_1.ALL_ELEMENT.text,
                        dataField: 'text',
                        encodeHtml: that._isEncodeHtml()
                    }],
                selection: {
                    allowSelectAll: true,
                    mode: 'multiple',
                    recursive: true
                },
                scrolling: {
                    mode: 'virtual'
                },
                sorting: {
                    mode: 'none'
                },
                searchPanel: {
                    placeholder: _localizer_1.localizer.getString(_localization_ids_1.localizationId.SearchNullValuePrompt),
                    visible: this._enableSearch,
                    width: '100%',
                    searchVisibleColumnsOnly: true
                },
                autoExpandAll: that.options.ViewModel.AutoExpandNodes,
                expandNodesOnFiltering: true,
                showRowLines: false,
                showBorders: that.hasParentContainer() && this.visualMode !== 'content',
                width: '100%',
                height: '100%',
                keyExpr: _filter_element_data_controller_1.KEY_EXPR,
                hoverStateEnabled: false,
                rootValue: null,
                noDataText: _default_1.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'),
                onContentReady: function (e) {
                    var scrollable = e.component.getScrollable();
                    if (scrollable) {
                        scrollable.off('scroll', _this._onScrollChanged);
                        scrollable.on('scroll', _this._onScrollChanged);
                    }
                },
                onEditorPrepared: function (e) {
                    _utils_1.$unwrap(e.editorElement).classList.remove('dx-treelist-checkbox-size');
                },
                onSelectionChanged: includeActions ? function (e) {
                    var getBranches = function (keys, isSelection) {
                        if (isSelection === void 0) { isSelection = false; }
                        var hash = _utils_1.wrapHash(that._getSelectedValues());
                        var fillByChildren = function (nodes, parentBranch) {
                            $.each(nodes, function (_, node) {
                                var nodeBranch = parentBranch.slice(), value = node.data.value;
                                nodeBranch.push(value);
                                if (!!node.children && node.children.length) {
                                    fillByChildren(node.children, nodeBranch);
                                }
                                else {
                                    var dimensionality = that.dataController.multiData ? that.dataController.multiData.getDimensions().length : -1;
                                    if (nodeBranch.length < dimensionality) {
                                        for (var i = 1; i <= dimensionality - nodeBranch.length; i++) {
                                            nodeBranch.push(special_values_1.specialValues.olapNullValueGuid);
                                        }
                                    }
                                    if ((isSelection && !!hash[nodeBranch]) || (!isSelection && !hash[nodeBranch]))
                                        return true;
                                    branches[nodeBranch] = nodeBranch;
                                }
                            });
                        };
                        var branches = {};
                        for (var i = 0; i < keys.length; i++) {
                            var key = keys[i];
                            var node = that.widget.getNodeByKey(key);
                            var branch = [node.data.value];
                            while (node.parent && node.level > 0) {
                                branch.unshift(node.parent.data.value);
                                node = node.parent;
                            }
                            node = that.widget.getNodeByKey(key);
                            if (!!node.children && node.children.length) {
                                fillByChildren(node.children, branch);
                            }
                            else {
                                branches[branch] = branch;
                            }
                        }
                        return Object.keys(branches).map(function (key) { return branches[key]; });
                    };
                    if (!that._isLocked()) {
                        if (e.currentSelectedRowKeys.length > 0 && e.currentDeselectedRowKeys.length > 0)
                            throw new Error('TREEVIEW has an incorrect selection');
                        that._raiseItemClick(getBranches(e.currentSelectedRowKeys.length > 0 ? e.currentSelectedRowKeys : e.currentDeselectedRowKeys, e.currentSelectedRowKeys.length > 0));
                    }
                } : undefined
            };
    };
    treeViewFilterElement.prototype._onScrollChanged = function (e) {
        if (e.scrollOffset.top !== 0) {
            _utils_1.$unwrap(e.element).classList.add(exports.cssTreeViewClassNames.topBorder);
        }
        else {
            _utils_1.$unwrap(e.element).classList.remove(exports.cssTreeViewClassNames.topBorder);
        }
    };
    return treeViewFilterElement;
}(_base_element_1.filterElementBaseItem));
exports.treeViewFilterElement = treeViewFilterElement;


/***/ }),
/* 557 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var range_selector_1 = __webpack_require__(425);
var $ = __webpack_require__(2);
var special_values_1 = __webpack_require__(39);
var _chart_helper_1 = __webpack_require__(95);
var _common_1 = __webpack_require__(35);
var _localization_ids_1 = __webpack_require__(21);
var _localizer_1 = __webpack_require__(16);
var _utils_1 = __webpack_require__(3);
var caption_toolbar_options_1 = __webpack_require__(64);
var _caption_toolbar_css_classes_1 = __webpack_require__(31);
var _custom_time_period_dialog_1 = __webpack_require__(558);
var _render_helper_1 = __webpack_require__(28);
var _base_item_1 = __webpack_require__(29);
var _range_filter_selection_validator_1 = __webpack_require__(144);
var DayIntervalWidthInPixels = 25, MonthIntervalWidthInPixels = 40, QuarterIntervalWidthInPixels = 20;
var rangeSelectorItem = (function (_super) {
    __extends(rangeSelectorItem, _super);
    function rangeSelectorItem(container, options) {
        var _this = _super.call(this, container, options) || this;
        _this.itemElementCustomColor = $.Callbacks();
        _this.timePeriodMenuSelectedIndex = undefined;
        return _this;
    }
    Object.defineProperty(rangeSelectorItem.prototype, "_isBottomFloatingToolbarPosition", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    rangeSelectorItem.prototype._getCustomTimePeriodDialog = function () {
        var _this = this;
        if (!this._customTimePeriodDialog) {
            this._customTimePeriodDialog = new _custom_time_period_dialog_1.customTimePeriodDialog({
                container: $(this.container).closest('.' + _caption_toolbar_css_classes_1.cssClasses.dashboardContainer).get(0),
                setRange: function (range) {
                    _this.selected.fire(_this.getName(), _common_1.viewerActions.setMasterFilter, [[range.startValue, range.endValue]]);
                }
            });
        }
        return this._customTimePeriodDialog;
    };
    rangeSelectorItem.prototype._initializeData = function (newOptions) {
        _super.prototype._initializeData.call(this, newOptions);
        if (this.dataController) {
            this.dataController.elementCustomColor = $.proxy(this._elementCustomColor, this);
        }
    };
    rangeSelectorItem.prototype._clearSelectionUnsafe = function () {
        this._setRange([]);
    };
    rangeSelectorItem.prototype._clearSelectionBase = function () {
        this.timePeriodMenuSelectedIndex = undefined;
    };
    rangeSelectorItem.prototype._setSelectionUnsafe = function (values) {
        this._setRange(values && values.length > 0 ? values[0] : []);
    };
    rangeSelectorItem.prototype._getCurrentRange = function () {
        var value = this._getSelectedValues();
        var startValue, endValue;
        if (value && value !== null) {
            startValue = value[0];
            endValue = value[1];
        }
        if (!_utils_1.type.isDefined(startValue) || !_utils_1.type.isDefined(endValue)) {
            var entireRange = this._getEntireRange();
            if (!_utils_1.type.isDefined(startValue))
                startValue = entireRange.startValue;
            if (!_utils_1.type.isDefined(endValue))
                endValue = entireRange.endValue;
        }
        return new rangeFilterSelection({ startValue: startValue, endValue: endValue });
    };
    rangeSelectorItem.prototype.getEntireRange = function () {
        return new rangeFilterSelection(this._getEntireRange());
    };
    rangeSelectorItem.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        var customPeriodForm = this._getCustomTimePeriodDialog();
        if (customPeriodForm) {
            customPeriodForm.dispose();
        }
        this.rangeSelectorViewer && this.rangeSelectorViewer.dispose();
    };
    rangeSelectorItem.prototype._setRange = function (range) {
        this._setSelectedValues([range]);
        if (this.hasWidget) {
            this._lock();
            this.rangeSelectorViewer.setValue(range);
            this._unlock();
        }
        else {
            this.selected.fire(this.getName(), _common_1.viewerActions.setMasterFilter, [range]);
        }
    };
    rangeSelectorItem.prototype._setPredefinedRange = function (dateTimePeriodName) {
        var dateTimePeriods = this.options.ViewModel.DateTimePeriods;
        var period = dateTimePeriods.filter(function (dateTimePeriod) { return dateTimePeriod.Name === dateTimePeriodName; })[0];
        this.timePeriodMenuSelectedIndex = !!period ? dateTimePeriods.indexOf(period) : undefined;
        this.updateCaptionToolbar();
    };
    rangeSelectorItem.prototype._getAvailablePredefinedRanges = function () {
        return this.options.ViewModel.DateTimePeriods.map(function (period) { return period.Name; });
    };
    rangeSelectorItem.prototype.renderContentUnsafe = function (element, changeExisting, afterRenderCallback) {
        var that = this, options = this._getRangeSelectorViewerOptions();
        var isFirstInitialization = !changeExisting || !that.rangeSelectorViewer;
        this._lock();
        this._raiseItemWidgetOptionsPrepared(options);
        try {
            if (isFirstInitialization) {
                this.rangeSelectorViewer = new range_selector_1.default(element, options);
            }
            else {
                this.rangeSelectorViewer.option(options);
            }
        }
        finally {
            this._unlock();
        }
        this.timePeriodMenuSelectedIndex = this.options.ViewModel.SelectedPeriodIndex;
        return false;
    };
    rangeSelectorItem.prototype._isBorderRequired = function () {
        return false;
    };
    rangeSelectorItem.prototype._getContainerPositionUnsafe = function () {
        var position = _super.prototype._getContainerPositionUnsafe.call(this), buttonOffset = this._getButtonOffset(true);
        position.offsetY = position.height - buttonOffset.top;
        return position;
    };
    rangeSelectorItem.prototype._getFirstDayOfWeek = function () {
        var rangeDataController = this.dataController;
        var argumentFormat = rangeDataController.getArgumentFormat();
        return argumentFormat ? argumentFormat.firstDayOfWeek : null;
    };
    rangeSelectorItem.prototype._getRangeSelectorViewerOptions = function () {
        var that = this;
        var rangeDataController = that.dataController;
        var viewModel = that.options.ViewModel, argument = viewModel.Argument, scaleType = rangeSelectorItem._getScaleType(argument), seriesTemplates = viewModel.SeriesTemplates, selectedValues = this._getSelectedValues(), dataSourceAndSeries = rangeDataController.getDataSourceAndSeries(that._isEncodeHtml()), tickMarkInterval = undefined, animation = that._getAnimationOptions(), options = {
            scale: {
                axisDivisionFactor: null,
                type: null,
                marker: {
                    visible: false
                }
            },
            encodeHtml: that._isEncodeHtml(),
            margin: {
                top: 10,
                bottom: 15
            }
        };
        if (scaleType !== 'discrete') {
            var entireRange = this._getEntireRangeByDataSource(dataSourceAndSeries.dataSource);
            options.scale.startValue = entireRange.startValue;
            options.scale.endValue = entireRange.endValue;
        }
        else {
            options.scale.startValue = null;
            options.scale.endValue = null;
        }
        if (!this._isValidValues(selectedValues)) {
            options.value = [selectedValues[0], selectedValues[1]];
        }
        var argumentFormat = rangeDataController.getArgumentFormat();
        options.scale.label = {
            format: argumentFormat
        };
        options.scale.valueType = argument.Type == 'DateTime' ? 'datetime' : 'numeric';
        options.sliderMarker = {
            format: argumentFormat
        };
        var dataSource = dataSourceAndSeries.dataSource;
        options.scale.type = scaleType;
        if (argument) {
            if ((argument.DateTimeGroupInterval === 'Year' && argument.Type === 'DateTime') ||
                !argument.IsContinuousDateTimeScale) {
                tickMarkInterval = rangeDataController.isDiscreteArgument() || argument.Type == 'Integer' ? 1 : _chart_helper_1.chartHelper.convertPresentationUnit(argument);
                if (tickMarkInterval) {
                    var firstDayOfWeek = this._getFirstDayOfWeek();
                    if (tickMarkInterval === 'week') {
                        if (Number.isInteger(firstDayOfWeek)) {
                            options.scale.workWeek = [firstDayOfWeek];
                        }
                        else {
                            throw new Error('First Day Of Week is not defined for range filter agrument');
                        }
                    }
                    options.scale.minorTick = {
                        visible: false
                    };
                    options.behavior = {
                        snapToTicks: true,
                        animationEnabled: animation.enabled
                    };
                    options.scale.minRange = tickMarkInterval;
                    if (scaleType === 'semidiscrete') {
                        options.scale.axisDivisionFactor = {
                            day: DayIntervalWidthInPixels,
                            month: MonthIntervalWidthInPixels,
                            quarter: QuarterIntervalWidthInPixels
                        };
                    }
                }
            }
            else {
                options.behavior = {
                    snapToTicks: false,
                    animationEnabled: animation.enabled
                };
            }
        }
        options.dataSource = dataSource;
        var chartSeries = dataSourceAndSeries.series;
        if (scaleType === 'discrete') {
            chartSeries.forEach(function (series) {
                series.ignoreEmptyPoints = true;
            });
        }
        options.chart = {
            series: chartSeries,
            commonSeriesSettings: {
                type: seriesTemplates && seriesTemplates.length > 0 ? (_chart_helper_1.chartHelper.convertSeriesType(seriesTemplates[0].SeriesType)) : null
            },
            palette: _render_helper_1.RenderHelper.getDefaultPalette()
        };
        options.onValueChanged = that._getSelectedRangeChangedHandler();
        return options;
    };
    rangeSelectorItem.prototype._getEntireRange = function () {
        var rangeDataController = this.dataController;
        var dataSourceAndSeries = rangeDataController.getDataSourceAndSeries(this._isEncodeHtml());
        return this._getEntireRangeByDataSource(dataSourceAndSeries.dataSource);
    };
    rangeSelectorItem.prototype._getEntireRangeByDataSource = function (dataSource) {
        var _this = this;
        var range;
        var lastDataItemIndex = dataSource ? _utils_1.findLastIndex(dataSource, function (item) { return _this._checkAxisXValue(item.x); }) : -1;
        if (lastDataItemIndex > 0) {
            var firstDataItemIndex = _utils_1.findIndex(dataSource, function (item) { return _this._checkAxisXValue(item.x); });
            var isQualitativeArgument = this.dataController.isQualitativeArgument();
            range = {
                startValue: isQualitativeArgument ? firstDataItemIndex : dataSource[firstDataItemIndex].x,
                endValue: isQualitativeArgument ? lastDataItemIndex : dataSource[lastDataItemIndex].x
            };
        }
        else {
            range = {
                startValue: null,
                endValue: null
            };
        }
        return range;
    };
    rangeSelectorItem.prototype._checkAxisXValue = function (value) {
        return _utils_1.type.isDefined(value) && Object.keys(special_values_1.specialValues).filter(function (specialValueName) { return special_values_1.specialValues[specialValueName] === value; }).length === 0;
    };
    rangeSelectorItem.prototype._getSelectedValues = function () {
        var allSelectedValues = _super.prototype._getSelectedValues.call(this);
        return allSelectedValues ? allSelectedValues[0] : null;
    };
    rangeSelectorItem.prototype._isValidValues = function (values) {
        if (values && values.length) {
            var startValue = values[0], endValue = values[1];
            if (_range_filter_selection_validator_1.RangeFilterSelectionValidator.isValidValue(startValue) && _range_filter_selection_validator_1.RangeFilterSelectionValidator.isValidValue(endValue))
                return false;
        }
        return true;
    };
    rangeSelectorItem.prototype._getSliderMarkerFormat = function () {
        return this.dataController.isSingleArgument() ? this.dataController.getSingleArgumentDimensionFormat() : undefined;
    };
    rangeSelectorItem._getScaleType = function (argument) {
        if (argument) {
            var dateTimeGroupInterval = argument.DateTimeGroupInterval;
            switch (argument.Type) {
                case 'String':
                    var groupIntervalScaleType = rangeSelectorItem._getStringScaleTypeByGroupInterval(dateTimeGroupInterval);
                    return _utils_1.type.isDefined(groupIntervalScaleType) ? groupIntervalScaleType : 'discrete';
                case 'Integer':
                    return 'semidiscrete';
                case 'DateTime':
                    return rangeSelectorItem._getDateTimeScaleType(dateTimeGroupInterval);
                default:
                    return null;
            }
        }
    };
    rangeSelectorItem._getStringScaleTypeByGroupInterval = function (dateTimeGroupInterval) {
        switch (dateTimeGroupInterval) {
            case 'Year':
            case 'Quarter':
            case 'Month':
            case 'Day':
            case 'Hour':
            case 'Minute':
            case 'Second':
            case 'DayOfYear':
            case 'DayOfWeek':
            case 'WeekOfYear':
            case 'WeekOfMonth':
                return 'semidiscrete';
        }
        return undefined;
    };
    rangeSelectorItem._getDateTimeScaleType = function (dateTimeGroupInterval) {
        switch (dateTimeGroupInterval) {
            case 'Year':
            case 'QuarterYear':
            case 'MonthYear':
            case 'WeekYear':
            case 'DayMonthYear':
                return 'semidiscrete';
        }
        return null;
    };
    rangeSelectorItem.prototype._getSelectedRangeChangedHandler = function () {
        var that = this;
        return function (e) {
            if (!that._isLocked()) {
                that.selected.fire(that.getName(), _common_1.viewerActions.setMasterFilter, [e.value]);
            }
        };
    };
    rangeSelectorItem.prototype._resizeUnsafe = function () {
        _super.prototype._resizeUnsafe.call(this);
        if ($(this.container).is(':visible')) {
            this.rangeSelectorViewer.render();
        }
    };
    rangeSelectorItem.prototype._getWidget = function () {
        return this.rangeSelectorViewer;
    };
    rangeSelectorItem.prototype._elementCustomColor = function (eventArgs) {
        this.itemElementCustomColor.fire(this.getName(), eventArgs);
    };
    rangeSelectorItem.prototype._hasTimePeriods = function () {
        return true;
    };
    rangeSelectorItem.prototype._isDateTimePeriodSupported = function () {
        return this.options.ViewModel.SupportDateTimePeriods;
    };
    rangeSelectorItem.prototype._getSpecificActionToolbarItems = function () {
        var _this = this;
        if (this.options.ViewModel.SupportDateTimePeriods) {
            if (this.options.ViewModel.DateTimePeriods.length > 0) {
                var dateTimePeriodNames = this.options.ViewModel.DateTimePeriods.map(function (period) { return (period.Name); });
                dateTimePeriodNames.push(_localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.CustomPeriod));
                return [{
                        menu: {
                            name: caption_toolbar_options_1.dashboardToolbarItemNames.dateTimePeriodMenu,
                            items: dateTimePeriodNames,
                            selectedItems: this.timePeriodMenuSelectedIndex !== undefined ? [dateTimePeriodNames[this.timePeriodMenuSelectedIndex]] : [],
                            selectionMode: 'multiple',
                            itemClick: function (itemData, itemElement, index) {
                                var viewModel = _this.options.ViewModel, dateTimePeriods = viewModel.DateTimePeriods;
                                if (index >= 0 && index < dateTimePeriods.length) {
                                    if (_this.timePeriodMenuSelectedIndex !== index) {
                                        _this._raisePredefinedPeriodSelected(index);
                                    }
                                }
                                else {
                                    _this._showCustomTimePeriodDialog();
                                }
                            },
                            type: 'list'
                        },
                        icon: _caption_toolbar_css_classes_1.cssClasses.iconTimePeriods,
                        type: 'menu',
                        hint: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.AddTimePeriod),
                    }];
            }
            else {
                return [{
                        name: caption_toolbar_options_1.dashboardToolbarItemNames.customDateTimePeriod,
                        icon: _caption_toolbar_css_classes_1.cssClasses.iconTimePeriods,
                        type: 'button',
                        hint: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.AddTimePeriod),
                        click: function (element) {
                            _this._showCustomTimePeriodDialog();
                        }
                    }];
            }
        }
        else
            return [];
    };
    rangeSelectorItem.prototype._raisePredefinedPeriodSelected = function (index) {
        var name = this.options.ViewModel.DateTimePeriods[index].Name;
        this.predefinedRangeChanged && this.predefinedRangeChanged(name);
    };
    rangeSelectorItem.prototype._showCustomTimePeriodDialog = function () {
        this._getCustomTimePeriodDialog().show({
            range: this._getCurrentRange(),
            groupInterval: this.options.ViewModel.Argument.DateTimeGroupInterval,
            isIntYearGroupInterval: this._isIntYearGroupInterval(),
            firstDayOfWeek: this._getFirstDayOfWeek(),
            displayFormat: this._getSliderMarkerFormat()
        });
    };
    rangeSelectorItem.prototype._isIntYearGroupInterval = function () {
        var viewModel = this.options.ViewModel, argument = viewModel.Argument;
        return argument && argument.DateTimeGroupInterval === 'Year' && argument.Type !== 'DateTime';
    };
    return rangeSelectorItem;
}(_base_item_1.baseItem));
exports.rangeSelectorItem = rangeSelectorItem;
var rangeFilterSelection = (function () {
    function rangeFilterSelection(range) {
        this.setMinimum(range.startValue);
        this.setMaximum(range.endValue);
    }
    rangeFilterSelection.prototype.getMaximum = function () {
        return this.maximum;
    };
    rangeFilterSelection.prototype.setMaximum = function (value) {
        this.maximum = value;
    };
    rangeFilterSelection.prototype.getMinimum = function () {
        return this.minimum;
    };
    rangeFilterSelection.prototype.setMinimum = function (value) {
        this.minimum = value;
    };
    return rangeFilterSelection;
}());
exports.rangeFilterSelection = rangeFilterSelection;


/***/ }),
/* 558 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(100);
var date_box_1 = __webpack_require__(100);
var _format_helper_1 = __webpack_require__(47);
var _localization_ids_1 = __webpack_require__(21);
var _localizer_1 = __webpack_require__(16);
var _dashboard_layout_mode_helper_1 = __webpack_require__(77);
var _utils_1 = __webpack_require__(555);
var _dialog_form_1 = __webpack_require__(152);
var customTimePeriodDialogClassNames = {
    emptyButton: 'dx-dashboard-custom-time-period-empty-button',
    leftPeriod: 'dx-dashboard-custom-time-period-dialog-left-period',
    rightPeriod: 'dx-dashboard-custom-time-period-dialog-right-period'
};
var customTimePeriodDialog = (function () {
    function customTimePeriodDialog(options) {
        this.options = options;
        this.setRange = options.setRange;
        this._initialize();
    }
    customTimePeriodDialog.prototype._initialize = function () {
        var _this = this;
        this.dialogForm = new _dialog_form_1.dialogForm({
            dialogContainer: this.options.container,
            width: 'auto',
            height: 'auto',
            allowScrolling: true,
            deferredRendering: true,
            title: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.SelectRange),
            buttons: [{
                    className: customTimePeriodDialogClassNames.emptyButton
                }, {
                    name: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ButtonOK),
                    hide: true,
                    func: function () {
                        _this.setRange({ startValue: _this.leftCalendar.option('value'), endValue: _this.rightCalendar.option('value') });
                    },
                    isDefault: true
                }, {
                    name: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ButtonCancel),
                    hide: true,
                    func: function () { }
                }
            ],
            renderContent: function () {
                var form = document.createElement('div');
                form.classList.add(_dialog_form_1.dialogClasses.form);
                var fromText = _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.RangeFilterSelectRangeFromCaption);
                var toText = _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.RangeFilterSelectRangeToCaption);
                var leftDate = document.createElement('div');
                leftDate.style.width = '100%';
                var rightDate = document.createElement('div');
                rightDate.style.width = '100%';
                var left = document.createElement('div');
                left.classList.add(customTimePeriodDialogClassNames.leftPeriod);
                var right = document.createElement('div');
                right.classList.add(customTimePeriodDialogClassNames.rightPeriod);
                var options = {
                    pickerType: _dashboard_layout_mode_helper_1.DashboardLayoutModeHelper.isTouch ? 'rollers' : 'calendar',
                    type: _this.format,
                    calendarOptions: {
                        maxZoomLevel: _this.maxZoomLevel,
                    },
                    displayFormat: _this.displayFormatFunc,
                    acceptCustomValue: false,
                    applyButtonText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ButtonOK),
                    cancelButtonText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ButtonCancel),
                    placeholder: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.SelectDate),
                    dropDownOptions: {
                        container: _this.options.container
                    },
                    disabledDates: _this.disabledDates,
                };
                var fromTextSpan = document.createElement('span');
                fromTextSpan.innerText = fromText;
                left.appendChild(fromTextSpan);
                left.appendChild(leftDate);
                _this.leftCalendar = new date_box_1.default(leftDate, __assign({}, options, { value: _this.range.minimum || new Date() }));
                var toTextSpan = document.createElement('span');
                toTextSpan.innerText = toText;
                right.appendChild(toTextSpan);
                right.appendChild(rightDate);
                _this.rightCalendar = new date_box_1.default(rightDate, __assign({}, options, { value: _this.range.maximum || new Date() }));
                form.appendChild(left);
                form.appendChild(document.createElement('br'));
                form.appendChild(right);
                return form;
            },
            disposeContent: function () {
                _this.leftCalendar && _this.leftCalendar.dispose();
                _this.rightCalendar && _this.rightCalendar.dispose();
            },
            setActualState: function (width) {
            }
        });
    };
    customTimePeriodDialog.prototype.show = function (options) {
        this.range = options.range;
        if (options.isIntYearGroupInterval && this.range.minimum && this.range.maximum) {
            this.range.minimum = new Date(this.range.minimum, 0, 1);
            this.range.maximum = new Date(this.range.maximum, 0, 1);
        }
        this.format = _utils_1.CalendarHelper.getCalendarType(options.groupInterval);
        this.maxZoomLevel = _utils_1.CalendarHelper.getCalendarMaxZoomLevel(options.groupInterval);
        this.displayFormatFunc = function (value) {
            if (options.isIntYearGroupInterval)
                value = value.getFullYear();
            return _format_helper_1.formatHelper.format(value, options.displayFormat);
        };
        this.disabledDates = options.groupInterval === 'WeekYear' ? function (args) { return args.date.getDay() !== options.firstDayOfWeek; } : undefined;
        this.dialogForm.showDialog();
    };
    customTimePeriodDialog.prototype.dispose = function () {
        this.dialogForm && this.dialogForm.dispose();
    };
    return customTimePeriodDialog;
}());
exports.customTimePeriodDialog = customTimePeriodDialog;


/***/ }),
/* 559 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _image_item_1 = __webpack_require__(345);
var BASE64_STRING_PREFIX = 'data:image/png;base64,';
var boundImageItem = (function (_super) {
    __extends(boundImageItem, _super);
    function boundImageItem(container, options) {
        return _super.call(this, container, options) || this;
    }
    boundImageItem.prototype._initializeData = function (newOptions) {
        _super.prototype._initializeData.call(this, newOptions);
        var viewModel = this.options.ViewModel, value = this.dataController ? this.dataController.getImageData() : undefined;
        if (viewModel) {
            if (viewModel.DataBindingMode === 'Uri' && viewModel.UriPattern)
                value = viewModel.UriPattern.replace('{0}', value);
            else
                value = BASE64_STRING_PREFIX + (value || viewModel.DefaultImageBase64String);
        }
        this.imgSrc = value || this._getImageSource(viewModel ? viewModel.ImageViewModel : undefined);
    };
    return boundImageItem;
}(_image_item_1.imageItem));
exports.boundImageItem = boundImageItem;


/***/ }),
/* 560 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var Color = __webpack_require__(96);
var _utils_1 = __webpack_require__(3);
var _geo_point_map_item_base_1 = __webpack_require__(153);
var bubbleMapItem = (function (_super) {
    __extends(bubbleMapItem, _super);
    function bubbleMapItem(container, options) {
        return _super.call(this, container, options) || this;
    }
    bubbleMapItem.prototype._getMarkerLayers = function () {
        return [this.mapViewer.getLayerByName('bubble')];
    };
    bubbleMapItem.prototype._configureMarkerLayers = function (viewModel) {
        var markerDataSource = this._getMarkerDataSource(), markerSettings = markerDataSource.length > 0 ? this._getMarker(viewModel, markerDataSource) : null;
        return [__assign({ name: 'bubble', type: 'marker', elementType: 'bubble', dataField: 'value', dataSource: markerDataSource }, markerSettings)];
    };
    bubbleMapItem.prototype._getMarkerDataSource = function () {
        var viewModel = this.options.ViewModel, markerDataSource = [], point;
        for (var i = 0; i < this.dataController.getCount(); i++) {
            point = this.dataController.getPoint(i);
            markerDataSource.push({
                coordinates: [point.lon, point.lat],
                attributes: {
                    latSelection: point.latSel,
                    lonSelection: point.lonSel,
                    selected: this._isSelected([point.latSel, point.lonSel]),
                    value: point.weight || (point.pointsCount > 1 ? 1 : 0),
                    colorValue: point.color || 0,
                    tooltip: this._getBubbleTooltip(viewModel, point.weightText, point.colorText, point.pointsCount),
                    dimensionsTooltip: this._getDimensionsTooltipHtml(point.tooltipDimensions),
                    measuresTooltip: this._getMeasuresTooltipHtml(point.tooltipMeasures)
                }
            });
        }
        return markerDataSource;
    };
    bubbleMapItem.prototype._getMarker = function (viewModel, markerDataSource) {
        var rangeStops = viewModel.ColorId ? this._getBubbleRangeStops(viewModel.Colorizer, markerDataSource) : [0, 1], colors = this._getBubbleColors(viewModel.Colorizer.Colors, rangeStops.length - 1), minSize, maxSize, options = {
            palette: colors,
            colorGroups: rangeStops,
            colorGroupingField: 'colorValue',
            sizeGroups: viewModel.WeightId ? this._getBubbleWeightRangeStops(markerDataSource) : null
        }, baseMarkers = _super.prototype._getMarker.call(this, viewModel, markerDataSource);
        if (viewModel.WeightId) {
            minSize = 20;
            maxSize = 60;
        }
        else {
            var res = this._getMinMaxValues(markerDataSource);
            if (res.min !== res.max) {
                minSize = 20;
                maxSize = 40;
            }
            else if (res.min === 1) {
                minSize = 40;
                maxSize = 40;
            }
            else {
                minSize = 20;
                maxSize = 20;
            }
        }
        options.minSize = minSize;
        options.maxSize = maxSize;
        return _utils_1.deepExtend(baseMarkers, options);
    };
    bubbleMapItem.prototype._getColorLegend = function (viewModel) {
        var that = this;
        if (!viewModel.ColorId) {
            return;
        }
        var legend = _super.prototype._getColorLegend.call(this, viewModel);
        if (legend) {
            legend.source.layer = 'bubble';
            legend.customizeText = function (arg) {
                return that.dataController.formatColor(arg.start);
            };
        }
        return legend;
    };
    bubbleMapItem.prototype._getWeightLegend = function (viewModel) {
        var that = this;
        if (!viewModel.WeightId) {
            return;
        }
        var legend = _super.prototype._getWeightLegend.call(this, viewModel);
        if (legend) {
            legend.source.layer = 'bubble';
            legend.customizeText = function (arg) {
                return that.dataController.formatWeight(arg.start);
            };
        }
        return legend;
    };
    bubbleMapItem.prototype._getBubbleTooltip = function (viewModel, weight, color, pointsCount) {
        var strs = [];
        if (pointsCount && pointsCount > 1) {
            strs.push(this._pointsCountTooltip(pointsCount));
        }
        if (weight) {
            strs.push(this._getToolTip(viewModel.WeightName, weight));
        }
        if (color && viewModel.ColorName !== viewModel.WeightName) {
            strs.push(this._getToolTip(viewModel.ColorName, color));
        }
        return strs.join('<br>');
    };
    bubbleMapItem.prototype._getBubbleRangeStops = function (colorizer, markerDataSource) {
        var max = markerDataSource[0].attributes.colorValue, min = markerDataSource[0].attributes.colorValue;
        for (var i = 1; i < markerDataSource.length; i++) {
            if (markerDataSource[i].attributes.colorValue > max) {
                max = markerDataSource[i].attributes.colorValue;
            }
            if (markerDataSource[i].attributes.colorValue < min) {
                min = markerDataSource[i].attributes.colorValue;
            }
        }
        return this._updateRangeStops(colorizer.RangeStops, min, max, colorizer.UsePercentRangeStops);
    };
    bubbleMapItem.prototype._getBubbleWeightRangeStops = function (markerDataSource) {
        var max = markerDataSource[0].attributes.value, min = markerDataSource[0].attributes.value;
        for (var i = 1; i < markerDataSource.length; i++) {
            if (markerDataSource[i].attributes.value > max) {
                max = markerDataSource[i].attributes.value;
            }
            if (markerDataSource[i].attributes.value < min) {
                min = markerDataSource[i].attributes.value;
            }
        }
        return this._updateRangeStops([0, 25, 50, 75], min, max, true);
    };
    bubbleMapItem.prototype._getBubbleColors = function (colorModels, defaultColorsCount) {
        var colors = this._getColors(colorModels);
        return colors ? colors : this._getDefaultBubbleColorizerColors(defaultColorsCount);
    };
    bubbleMapItem.prototype._getDefaultBubbleColorizerColors = function (count) {
        var startColor = new Color('rgb(54, 170, 206)'), endColor = new Color('rgb(255, 93, 106)'), colors = [];
        if (count === 1) {
            return [startColor.toHex()];
        }
        for (var i = 0; i < count; i++) {
            colors.push(startColor.blend(endColor, i / (count - 1)).toHex());
        }
        return colors;
    };
    bubbleMapItem.prototype._getDataPointMeasureIds = function () {
        var viewModel = this.options.ViewModel, measureIds = [];
        measureIds.push(viewModel.WeightId);
        measureIds.push(viewModel.ColorId);
        return measureIds;
    };
    return bubbleMapItem;
}(_geo_point_map_item_base_1.geoPointMapItemBase));
exports.bubbleMapItem = bubbleMapItem;


/***/ }),
/* 561 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dom_component_1 = __webpack_require__(245);
var scroll_view_1 = __webpack_require__(164);
var $ = __webpack_require__(2);
var _utils_1 = __webpack_require__(3);
var _css_class_names_1 = __webpack_require__(63);
var _arrangement_strategy_1 = __webpack_require__(562);
var _card_arrangement_table_generator_1 = __webpack_require__(566);
var _card_virtualization_controller_1 = __webpack_require__(567);
var _new_card_item_1 = __webpack_require__(154);
var viewerCount = 0;
var cardsViewer = (function (_super) {
    __extends(cardsViewer, _super);
    function cardsViewer(element, options) {
        return _super.call(this, element, options) || this;
    }
    Object.defineProperty(cardsViewer.prototype, "_styleSettingsProvider", {
        get: function () {
            return this.option('styleSettingsProvider');
        },
        enumerable: true,
        configurable: true
    });
    cardsViewer.prototype.redraw = function () {
        this._render();
    };
    cardsViewer.prototype._optionChanged = function (args) {
        switch (args.name) {
            case 'viewer':
                this.createArranger();
                _super.prototype['_invalidate'].call(this);
                break;
            case 'itemOptions':
            case 'dataSource':
                _super.prototype['_invalidate'].call(this);
                break;
        }
        _super.prototype['_optionChanged'].call(this, args);
    };
    cardsViewer.prototype._refresh = function () {
        this.createItems();
        _super.prototype['_refresh'].call(this);
    };
    cardsViewer.prototype.getSelectedItems = function () {
        return this.itemsList.filter(function (item) { return item.selected(); });
    };
    cardsViewer.prototype.clearSelections = function () {
        this.itemsList.forEach(function (item) { return item.clearSelection(); });
    };
    cardsViewer.prototype.getSizeParams = function () {
        return this.virtualizer.getSizeParams();
    };
    cardsViewer.prototype.clear = function () {
        this.container.remove();
    };
    cardsViewer.prototype._init = function () {
        _super.prototype['_init'].call(this);
        this._viewerID = viewerCount++;
        this.tableStruct = $('<div>', { 'class': _css_class_names_1.cssClassNames.widgetViewerTable + ' ' + _css_class_names_1.cssClassNames.widgetViewerIdPrefix + this._viewerID });
        this.initContainer();
        this.container.append(this.tableStruct);
        this.container.addClass(_css_class_names_1.cssClassNames.widgetViewerContainer);
        var scrollView = new scroll_view_1.default(_utils_1.$unwrap(this.container), {
            direction: 'both',
            showScrollbar: 'onHover'
        });
        this.virtualizer = new _card_virtualization_controller_1.CardVirtualizationController(this.tableStruct, scrollView);
        this.createArranger();
    };
    cardsViewer.prototype.initContainer = function () {
        this.container = $('<div>').appendTo(_utils_1.$wrap(this.element()));
        this.container.addClass(_css_class_names_1.layoutCardCssClassNames.cardScrollableHolder);
    };
    cardsViewer.prototype.createItems = function () {
        var that = this, data = that.option('dataSource');
        var viewer = this.option('viewer');
        var clickHandler = viewer.onclick, hoverHandler = viewer.onhover, controlContainer = viewer.controlContainer;
        that.itemsList = [];
        data.forEach(function (dataItem, index) {
            that.itemsList.push(new _new_card_item_1.newCardItem(dataItem, index, { clickHandler: clickHandler, hoverHandler: hoverHandler, controlContainer: controlContainer }));
        });
    };
    cardsViewer.prototype._render = function (drawOptions) {
        var _this = this;
        this.virtualizer.updateScrollableContent(function () {
            _this.invalidateContent();
            _this.drawCards();
        });
    };
    cardsViewer.prototype.invalidateContent = function () {
        this.createItems();
        this.tableStruct.empty();
    };
    cardsViewer.prototype.drawCards = function () {
        var _this = this;
        var parentWidth = this.container.width();
        var parentHeight = this.container.height();
        var layouts = this.option('itemOptions').layouts;
        var ignorePadding = this.option('viewer.ignorePadding');
        var cardArrangements = this.arranger.arrange(parentHeight, parentWidth, this.itemsList.length, layouts, ignorePadding);
        this.tableGenerator = new _card_arrangement_table_generator_1.cardArrangementTableGenerator();
        this.tableGenerator.generateTable(this.tableStruct, cardArrangements);
        this.virtualizer.init(cardArrangements, function (startIndex, endIndex) { _this.drawCardsByIndices(startIndex, endIndex); });
    };
    cardsViewer.prototype.drawCardsByIndices = function (startIndex, endIndex) {
        var _this = this;
        this.tableGenerator.drawCellContent(startIndex, endIndex, function (container, cardArrangements, index) {
            return _this.itemsList[index].draw(container, cardArrangements, _this._styleSettingsProvider);
        });
    };
    cardsViewer.prototype.createArranger = function () {
        var viewerOptions = this.option('viewer');
        var method = viewerOptions.method;
        var count = viewerOptions.count;
        if (this.shouldRecreateArranger(method, count))
            this.arranger = _arrangement_strategy_1.ArrangementStrategy.createInstance(method, count);
    };
    cardsViewer.prototype.shouldRecreateArranger = function (newArrangement, lineCount) {
        if (this.arranger != null) {
            var currentArrangement = this.arranger.getArrangeMethod();
            if (currentArrangement === 'auto')
                return newArrangement !== 'auto';
            else
                return newArrangement !== currentArrangement || this.arranger.getLineCount() !== lineCount;
        }
        return true;
    };
    return cardsViewer;
}(dom_component_1.default));
exports.cardsViewer = cardsViewer;


/***/ }),
/* 562 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _card_arrangement_info_1 = __webpack_require__(563);
var _card_measurer_1 = __webpack_require__(565);
var ArrangementStrategy = (function () {
    function ArrangementStrategy() {
        this.cardMeasurer = new _card_measurer_1.cardMeasurer();
    }
    ArrangementStrategy.createInstance = function (method, lineCount) {
        switch (method) {
            case 'column':
                return new ColumnArrangementStrategy(lineCount);
            case 'row':
                return new RowArrangementStrategy(lineCount);
            default:
                return new AutoArrangementStrategy();
        }
    };
    ArrangementStrategy.prototype.getArrangeMethod = function () {
        return '';
    };
    ArrangementStrategy.prototype.getLineCount = function () {
        return -1;
    };
    ArrangementStrategy.prototype.arrange = function (viewerHeight, viewerWidth, itemsCount, layouts, ignorePadding) {
        var _this = this;
        if (ignorePadding === void 0) { ignorePadding = false; }
        var getArrangementInfo = function (nextColumnCount) {
            if (nextColumnCount === void 0) { nextColumnCount = undefined; }
            var result = new _card_arrangement_info_1.cardArrangementInfo();
            var columnCount = nextColumnCount || _this.getColumnCount(itemsCount, actualViewerWidth, cardMinWidth);
            columnCount = _this.checkEmptyRows(columnCount, itemsCount);
            var rowCount = _this.getRowCount(itemsCount, columnCount);
            var visibleColumnCount = Math.max(1, Math.min(columnCount, Math.floor(actualViewerWidth / cardMinWidth)));
            var visibleRowCount = Math.max(1, Math.min(rowCount, Math.floor(actualViewerHeight / cardMinHeight)));
            result.cellHeight = Math.max(cardMinHeight, Math.floor(actualViewerHeight / visibleRowCount));
            result.cellWidth = Math.max(cardMinWidth, Math.floor(actualViewerWidth / visibleColumnCount));
            result.columnCount = columnCount;
            result.rowCount = rowCount;
            result.itemsCount = itemsCount;
            result.ignorePadding = ignorePadding;
            result.viewerHeight = viewerHeight;
            result.viewerWidth = viewerWidth;
            result.arrangementDirection = _this.getArrangementDirection();
            return result;
        };
        var marginOffset = ignorePadding ? _card_arrangement_info_1.margins : 0;
        var cardMinWidth = this.getCardMinWidthWithMargin(layouts);
        var cardMinHeight = this.getCardMinHeightWithMargin(layouts);
        var actualViewerWidth = viewerWidth + marginOffset;
        var actualViewerHeight = viewerHeight + marginOffset;
        return this.calcBestProportions(getArrangementInfo);
    };
    ArrangementStrategy.prototype.calcBestProportions = function (calcArrangementInfo) {
        return calcArrangementInfo();
    };
    ArrangementStrategy.prototype.getCardMinWidthWithMargin = function (layouts) {
        var largestWidth = layouts.map(function (layout) { return layout.minWidth; }).reduce(function (prev, curr) { return Math.max(prev, curr); });
        return largestWidth + _card_arrangement_info_1.paddings + _card_arrangement_info_1.borders + _card_arrangement_info_1.margins;
    };
    ArrangementStrategy.prototype.getCardMinHeightWithMargin = function (layouts) {
        var _this = this;
        var largestHeight = layouts.map(function (layout) { return _this.cardMeasurer.calcMinHeight(layout); }).reduce(function (prev, curr) { return Math.max(prev, curr); });
        return largestHeight + _card_arrangement_info_1.paddings + _card_arrangement_info_1.borders + _card_arrangement_info_1.margins;
    };
    ArrangementStrategy.prototype.checkEmptyRows = function (columnCount, itemsCount) {
        return columnCount;
    };
    ArrangementStrategy.prototype.getArrangementDirection = function () {
        return 'column';
    };
    return ArrangementStrategy;
}());
exports.ArrangementStrategy = ArrangementStrategy;
var AutoArrangementStrategy = (function (_super) {
    __extends(AutoArrangementStrategy, _super);
    function AutoArrangementStrategy() {
        return _super.call(this) || this;
    }
    AutoArrangementStrategy.prototype.getArrangeMethod = function () {
        return 'auto';
    };
    AutoArrangementStrategy.prototype.getLineCount = function () {
        return -1;
    };
    AutoArrangementStrategy.prototype.getColumnCount = function (itemsCount, actualViewerWidth, cardMinWidth) {
        var columnCount = Math.max(1, Math.floor(actualViewerWidth / cardMinWidth));
        columnCount = Math.min(itemsCount, columnCount);
        return columnCount;
    };
    AutoArrangementStrategy.prototype.checkEmptyRows = function (columnCount, itemsCount) {
        var lastRowCount = function () { return itemsCount % columnCount; };
        var fullRowCount = function () { return Math.floor(itemsCount / columnCount); };
        var nextLastRowCount = function () { return lastRowCount() + fullRowCount(); };
        while (lastRowCount() > 0 && (nextLastRowCount() < columnCount)) {
            columnCount--;
        }
        return columnCount;
    };
    AutoArrangementStrategy.prototype.calcBestProportions = function (calcArrangementInfo) {
        var arrangementInfo = calcArrangementInfo();
        if (arrangementInfo.columnCount > 1) {
            var nextArrangementInfo = calcArrangementInfo(arrangementInfo.columnCount - 1);
            while (nextArrangementInfo.proportionFactor() < arrangementInfo.proportionFactor() && arrangementInfo.columnCount > 1) {
                arrangementInfo = nextArrangementInfo;
                nextArrangementInfo = calcArrangementInfo(arrangementInfo.columnCount - 1);
            }
        }
        return arrangementInfo;
    };
    AutoArrangementStrategy.prototype.getRowCount = function (itemsCount, columnCount) {
        return Math.ceil(itemsCount / columnCount);
    };
    return AutoArrangementStrategy;
}(ArrangementStrategy));
exports.AutoArrangementStrategy = AutoArrangementStrategy;
var ColumnArrangementStrategy = (function (_super) {
    __extends(ColumnArrangementStrategy, _super);
    function ColumnArrangementStrategy(columnCount) {
        var _this = _super.call(this) || this;
        _this.columnCount = columnCount;
        return _this;
    }
    ColumnArrangementStrategy.prototype.getArrangeMethod = function () {
        return 'column';
    };
    ColumnArrangementStrategy.prototype.getLineCount = function () {
        return this.columnCount;
    };
    ColumnArrangementStrategy.prototype.getColumnCount = function (itemsCount, actualViewerWidth, cardMinWidth) {
        return Math.min(itemsCount, this.columnCount);
    };
    ColumnArrangementStrategy.prototype.getRowCount = function (itemsCount, columnCount) {
        return Math.max(1, Math.ceil(itemsCount / columnCount));
    };
    return ColumnArrangementStrategy;
}(ArrangementStrategy));
exports.ColumnArrangementStrategy = ColumnArrangementStrategy;
var RowArrangementStrategy = (function (_super) {
    __extends(RowArrangementStrategy, _super);
    function RowArrangementStrategy(rowCount) {
        var _this = _super.call(this) || this;
        _this.rowCount = rowCount;
        return _this;
    }
    RowArrangementStrategy.prototype.getArrangementMethod = function () {
        return 'row';
    };
    RowArrangementStrategy.prototype.getLineCount = function () {
        return this.rowCount;
    };
    RowArrangementStrategy.prototype.getColumnCount = function (itemsCount, actualViewerWidth, cardMinWidth) {
        return Math.ceil(itemsCount / Math.min(itemsCount, this.rowCount));
    };
    RowArrangementStrategy.prototype.getRowCount = function (itemsCount, columnCount) {
        return Math.min(itemsCount, this.rowCount);
    };
    RowArrangementStrategy.prototype.getArrangementDirection = function () {
        return 'row';
    };
    return RowArrangementStrategy;
}(ArrangementStrategy));
exports.RowArrangementStrategy = RowArrangementStrategy;


/***/ }),
/* 563 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _new_card_item_1 = __webpack_require__(154);
exports.margins = _new_card_item_1.newCardMeasurements.margin * 2, exports.paddings = _new_card_item_1.newCardMeasurements.padding * 2, exports.borders = _new_card_item_1.newCardMeasurements.borderWidth * 2;
var cardArrangementInfo = (function () {
    function cardArrangementInfo() {
        this.etalonWidth = 11;
        this.etalonHeight = 10;
        this.arrangementDirection = 'column';
        this.ignorePadding = false;
    }
    cardArrangementInfo.prototype.getMarginOffset = function () {
        return this.ignorePadding ? exports.margins : 0;
    };
    cardArrangementInfo.prototype.getScrollableHeight = function () {
        return Math.max(this.rowCount * this.cellHeight - this.getMarginOffset(), this.viewerHeight);
    };
    cardArrangementInfo.prototype.getScrollableWidth = function () {
        return Math.max(this.columnCount * this.cellWidth - this.getMarginOffset(), this.viewerWidth);
    };
    cardArrangementInfo.prototype.proportionFactor = function () {
        return Math.abs(((this.etalonWidth - this.etalonHeight) / (this.etalonWidth + this.etalonHeight)) - ((this.cellWidth - this.cellHeight) / (this.cellWidth + this.cellHeight)));
    };
    cardArrangementInfo.prototype.getCardContentHeight = function () {
        return this.cellHeight - exports.margins - exports.paddings - exports.borders;
    };
    cardArrangementInfo.prototype.getCardContentWidth = function () {
        return this.cellWidth - exports.margins - exports.paddings - exports.borders;
    };
    cardArrangementInfo.prototype.getCardWidth = function () {
        return this.cellWidth - exports.margins;
    };
    cardArrangementInfo.prototype.getCardHeight = function () {
        return this.cellHeight - exports.margins;
    };
    cardArrangementInfo.prototype.hasVerticalScroll = function () {
        return this.getScrollableHeight() > this.viewerHeight;
    };
    cardArrangementInfo.prototype.hasHorizontalScroll = function () {
        return this.getScrollableWidth() > this.viewerWidth;
    };
    return cardArrangementInfo;
}());
exports.cardArrangementInfo = cardArrangementInfo;


/***/ }),
/* 564 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var tooltip_1 = __webpack_require__(216);
var sparkline_1 = __webpack_require__(122);
var $ = __webpack_require__(2);
var _delta_indicator_1 = __webpack_require__(151);
var _simple_indicator_1 = __webpack_require__(220);
var _css_class_names_1 = __webpack_require__(63);
var _card_layout_1 = __webpack_require__(223);
var cardPainter = (function () {
    function cardPainter(data, controlContainer) {
        this.data = data;
        this.controlContainer = controlContainer;
    }
    cardPainter.prototype.draw = function (cardArrangements, layout, _styleSettingsProvider) {
        this._styleSettingsProvider = _styleSettingsProvider;
        var cardHeight = cardArrangements.getCardHeight();
        var cardWidth = cardArrangements.getCardWidth();
        this._cardStyle = layout.getStyleSettings(this.data);
        var $divCardLayout = $('<div>', {})
            .addClass(_css_class_names_1.layoutCardCssClassNames.card)
            .css({
            height: cardHeight,
            width: cardWidth,
            'background-color': layout.getCardBackgroundColor()
        }).append(this.createCardContent(cardArrangements, layout));
        var divCardLayout = $divCardLayout.get(0);
        if (this._cardStyle)
            this._styleSettingsProvider.applyStyleSettings(divCardLayout, null, this._cardStyle, true, null, null, true);
        return $divCardLayout;
    };
    cardPainter.prototype.createCardContent = function (cardArrangements, layout) {
        var contentHeight = cardArrangements.getCardContentHeight();
        var contentWidth = cardArrangements.getCardContentWidth();
        var actualContentWidth = layout.maxWidth > 0 ? Math.min(contentWidth, Math.max(layout.minWidth, layout.maxWidth)) : contentWidth;
        return $('<div>')
            .css({
            height: contentHeight,
            width: actualContentWidth
        }).addClass(_css_class_names_1.layoutCardCssClassNames.content)
            .append(this.createRows(layout.rows, actualContentWidth));
    };
    cardPainter.prototype.createRows = function (rowModels, contentWidth) {
        var _this = this;
        var topRows = $('<div>', { 'class': _css_class_names_1.layoutCardCssClassNames.contentTopRows }), centerRows = $('<div>', {}), bottomRows = $('<div>', { 'class': _css_class_names_1.layoutCardCssClassNames.contentBottomRows });
        rowModels.forEach(function (rowModel) {
            var rowDiv = $('<div>');
            rowDiv.css('paddingBottom', rowModel.indent);
            switch (rowModel.vAlignment) {
                case _card_layout_1.verticalAlignment.top:
                    topRows.append(rowDiv);
                    break;
                case _card_layout_1.verticalAlignment.bottom:
                    bottomRows.append(rowDiv);
                    break;
                case _card_layout_1.verticalAlignment.center:
                default:
                    centerRows.append(rowDiv);
            }
            _this.createRow(rowModel.elements, rowDiv, contentWidth);
        });
        if (centerRows.children().length > 0)
            return [topRows, centerRows, bottomRows];
        else if (topRows.children().length > 0 || bottomRows.children().length > 0) {
            return [topRows, bottomRows];
        }
    };
    cardPainter.prototype.createRow = function (elementModels, rowDiv, contentWidth) {
        var leftElements = [], centerElements = [], rightElements = [];
        elementModels.forEach(function (elementModel) {
            switch (elementModel.hAlignment) {
                case _card_layout_1.horizontalAlignment.left:
                    leftElements.push(elementModel);
                    break;
                case _card_layout_1.horizontalAlignment.right:
                    rightElements.push(elementModel);
                    break;
                case _card_layout_1.horizontalAlignment.center:
                default:
                    centerElements.push(elementModel);
                    break;
            }
        });
        if (centerElements.length != 0 && leftElements.length == 0 && rightElements.length == 0) {
            rowDiv.addClass(_css_class_names_1.layoutCardCssClassNames.rowOnlyCenterElements);
            rowDiv.append(this.createElements(centerElements, contentWidth));
        }
        else {
            rowDiv.addClass(_css_class_names_1.layoutCardCssClassNames.row);
            var leftDiv = $('<div>', { 'class': _css_class_names_1.layoutCardCssClassNames.rowLeftRightElements }).appendTo(rowDiv), rightDiv = $('<div>', { 'class': _css_class_names_1.layoutCardCssClassNames.rowLeftRightElements }).appendTo(rowDiv);
            leftDiv.append(this.createElements(leftElements.concat(centerElements), contentWidth));
            rightDiv.append(this.createElements(rightElements, contentWidth));
        }
    };
    cardPainter.prototype.createElements = function (elements, contentWidth) {
        var _this = this;
        return elements.map(function (element) {
            if (element instanceof _card_layout_1.cardIndicatorElement) {
                return _this.createIndicatorElement(element);
            }
            else if (element instanceof _card_layout_1.cardSparklineElement) {
                return _this.createSparklineElement(element, contentWidth);
            }
            else {
                return _this.createDataElement(element);
            }
        });
    };
    cardPainter.prototype.createIndicatorElement = function (indicatorElement) {
        var indicatorDiv = $('<div>');
        indicatorDiv.addClass(_css_class_names_1.layoutCardCssClassNames.indicatorElement);
        var styleSettings = indicatorElement.getStyleSettings(this.data);
        var cfIconType;
        if (styleSettings)
            cfIconType = this._styleSettingsProvider.getIconType(styleSettings);
        if (cfIconType)
            this._styleSettingsProvider.applyIndicatorStyle(indicatorDiv[0], cfIconType);
        else {
            indicatorDiv
                .css({
                height: indicatorElement.height,
                width: indicatorElement.width
            })
                .append(_simple_indicator_1.SimpleIndicator.getIndicator(indicatorElement.getIndicatorType(this.data), indicatorElement.getIsGood(this.data)));
        }
        return indicatorDiv;
    };
    cardPainter.prototype.createSparklineElement = function (sparklineElement, contentWidth) {
        var sparklineOptions = sparklineElement.getSparklineOptions(this.data);
        sparklineOptions.size = {
            height: sparklineElement.height,
            width: contentWidth
        };
        var sparklineContainer = document.createElement('div');
        new sparkline_1.default(sparklineContainer, sparklineOptions);
        return $('<div>')
            .css({
            height: sparklineElement.height
        }).append(sparklineContainer);
    };
    cardPainter.prototype.createDataElement = function (textElement) {
        var elementText = textElement.getText(this.data);
        var elementDiv = $('<div>')
            .addClass(_css_class_names_1.layoutCardCssClassNames.rowElement)
            .css({
            fontSize: textElement.fontSize + 'pt',
            fontFamily: textElement.fontFamily
        })
            .text(elementText);
        this.setElementColor(textElement, elementDiv);
        var textDiv = document.createElement('div');
        textDiv.innerText = elementText;
        elementDiv.append(textDiv);
        var styleSettings = textElement.getStyleSettings(this.data);
        if (styleSettings)
            this._styleSettingsProvider.applyStyleSettings(elementDiv[0], null, styleSettings, false, null, true, false);
        new tooltip_1.default(textDiv, {
            container: this.controlContainer,
            target: elementDiv.get(0),
            showEvent: { name: 'mouseenter', delay: 800 },
            hideEvent: 'mouseleave'
        });
        return elementDiv;
    };
    cardPainter.prototype.setElementColor = function (element, elementDiv) {
        if (element.predefinedColor !== 'NotSet') {
            switch (element.predefinedColor) {
                case 'Main':
                    elementDiv.addClass(_delta_indicator_1.DeltaIndicator.getIndicatorColorType(null, null, true));
                    break;
                case 'Neutral':
                    elementDiv.addClass(_delta_indicator_1.DeltaIndicator.getIndicatorColorType());
                    break;
                case 'Bad':
                    elementDiv.addClass(_delta_indicator_1.DeltaIndicator.getIndicatorColorType('down', false));
                    break;
                case 'Good':
                    elementDiv.addClass(_delta_indicator_1.DeltaIndicator.getIndicatorColorType('up', true));
                    break;
                case 'Warning':
                    elementDiv.addClass(_delta_indicator_1.DeltaIndicator.getIndicatorColorType('warning'));
                    break;
                case 'Delta':
                    elementDiv.addClass(_delta_indicator_1.DeltaIndicator.getIndicatorColorType(element.getIndicatorType(this.data), element.getIsGood(this.data)));
                    break;
            }
        }
        else if (element.color) {
            elementDiv.css('color', element.color);
        }
        else {
            elementDiv.addClass(_delta_indicator_1.DeltaIndicator.getIndicatorColorType(null, null, true));
        }
    };
    return cardPainter;
}());
exports.cardPainter = cardPainter;


/***/ }),
/* 565 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var _cacheable_1 = __webpack_require__(237);
var _css_class_names_1 = __webpack_require__(63);
var _card_layout_1 = __webpack_require__(223);
var cssTypographyStyle = 'dx-theme-generic-typography';
var cardMeasurer = (function () {
    function cardMeasurer() {
        this.DEFAULT_MIN_HEIGHT = 0;
    }
    cardMeasurer._getImageSpanHeight = function (width, height) {
        var imageSpan = document.createElement('div');
        imageSpan.classList.add(_css_class_names_1.cssClassNames.layoutCardHiddenContainer);
        imageSpan.style.width = width;
        imageSpan.style.height = height;
        document.body.appendChild(imageSpan);
        var res = imageSpan.getBoundingClientRect().height;
        imageSpan.parentNode.removeChild(imageSpan);
        return res;
    };
    cardMeasurer._getTextSpanHeight = function (fontSize, fontFamily) {
        var textSpan = document.createElement('div');
        textSpan.innerText = cardMeasurer.DIGITS_STRING;
        textSpan.classList.add(_css_class_names_1.cssClassNames.layoutCardHiddenContainer);
        textSpan.classList.add(cssTypographyStyle);
        textSpan.style.fontSize = fontSize;
        textSpan.style.fontFamily = fontFamily;
        document.body.appendChild(textSpan);
        var res = textSpan.getBoundingClientRect().height;
        textSpan.parentNode.removeChild(textSpan);
        return res;
    };
    cardMeasurer.prototype.calcMinHeight = function (layout) {
        var topHeight = 0;
        var centerHeight = 0;
        var bottomHeight = 0;
        var rowHeights = {};
        layout.rows.forEach(function (row, i) {
            var rowHeight = 0;
            row.elements.forEach(function (element, j) {
                if (element instanceof _card_layout_1.cardIndicatorElement) {
                    rowHeight = Math.max(rowHeight, cardMeasurer._getImageSpanHeight('1px', element.height + 'px'));
                }
                else if (element instanceof _card_layout_1.cardSparklineElement) {
                    rowHeight = Math.max(rowHeight, cardMeasurer._getImageSpanHeight('1px', element.height + 'px'));
                }
                else {
                    rowHeight = Math.max(rowHeight, cardMeasurer._getTextSpanHeight(element.fontSize + 'pt', element.fontFamily));
                }
            });
            switch (row.vAlignment) {
                case _card_layout_1.verticalAlignment.top:
                    topHeight += rowHeight + row.indent;
                    break;
                case _card_layout_1.verticalAlignment.center:
                    centerHeight += rowHeight + row.indent;
                    break;
                case _card_layout_1.verticalAlignment.bottom:
                    bottomHeight += rowHeight + row.indent;
                    break;
            }
        });
        return topHeight + centerHeight + bottomHeight || this.DEFAULT_MIN_HEIGHT;
    };
    cardMeasurer.DIGITS_STRING = '0123456789';
    __decorate([
        _cacheable_1.cacheable('cardMeasurer._getImageSpanHeight')
    ], cardMeasurer, "_getImageSpanHeight", null);
    __decorate([
        _cacheable_1.cacheable('cardMeasurer._getTextSpanHeight')
    ], cardMeasurer, "_getTextSpanHeight", null);
    return cardMeasurer;
}());
exports.cardMeasurer = cardMeasurer;


/***/ }),
/* 566 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var _css_class_names_1 = __webpack_require__(63);
var _new_card_item_1 = __webpack_require__(154);
var cardArrangementTableGenerator = (function () {
    function cardArrangementTableGenerator() {
    }
    cardArrangementTableGenerator.prototype.generateTable = function (container, cardArrangements) {
        this.reset();
        this.cardArrangements = cardArrangements;
        this.generateCells(container, this.cardArrangements);
    };
    cardArrangementTableGenerator.prototype.drawCellContent = function (startIndex, endIndex, drawHandler) {
        for (var i = startIndex; i <= endIndex; i++) {
            drawHandler(this.cells[i], this.cardArrangements, i);
        }
    };
    cardArrangementTableGenerator.prototype.reset = function () {
        this.cells = [];
    };
    cardArrangementTableGenerator.prototype.generateCells = function (tableStruct, cardArrangements) {
        var _this = this;
        if (cardArrangements.arrangementDirection === 'column') {
            for (var rowIndex = 0; rowIndex < cardArrangements.rowCount; rowIndex++) {
                var row = this.createRow(cardArrangements, rowIndex);
                for (var columnIndex = 0; columnIndex < cardArrangements.columnCount; columnIndex++) {
                    var itemIndex = rowIndex * cardArrangements.columnCount + columnIndex;
                    if (itemIndex >= cardArrangements.itemsCount)
                        break;
                    var cell = this.createCell(cardArrangements, rowIndex, columnIndex);
                    this.cells.push(cell);
                    row.append(cell);
                }
                tableStruct.append(row);
            }
        }
        else {
            var rows = {};
            var getRow = function (index) {
                var row = rows[index];
                if (!row) {
                    row = _this.createRow(cardArrangements, index);
                    rows[index] = row;
                }
                return row;
            };
            for (var columnIndex = 0; columnIndex < cardArrangements.columnCount; columnIndex++) {
                for (var rowIndex = 0; rowIndex < cardArrangements.rowCount; rowIndex++) {
                    var itemIndex = columnIndex * cardArrangements.rowCount + rowIndex;
                    if (itemIndex >= cardArrangements.itemsCount)
                        break;
                    var row = getRow(rowIndex);
                    var cell = this.createCell(cardArrangements, rowIndex, columnIndex);
                    this.cells.push(cell);
                    row.append(cell);
                }
                $.each(rows, function (_, row) {
                    tableStruct.append(row);
                });
            }
        }
    };
    cardArrangementTableGenerator.prototype.createRow = function (cardArrangements, rowIndex) {
        var actualHeight = cardArrangements.cellHeight;
        if (cardArrangements.ignorePadding && rowIndex === 0) {
            actualHeight -= _new_card_item_1.newCardMeasurements.margin;
        }
        if (cardArrangements.ignorePadding && rowIndex === cardArrangements.rowCount - 1) {
            actualHeight -= _new_card_item_1.newCardMeasurements.margin;
        }
        var div = $('<div>', {
            'class': _css_class_names_1.cssClassNames.widgetViewerRow, css: {
                height: actualHeight,
                width: cardArrangements.getScrollableWidth()
            }
        });
        return div;
    };
    cardArrangementTableGenerator.prototype.createCell = function (cardArrangements, rowIndex, columnIndex) {
        var actualWidth = cardArrangements.cellWidth;
        var actualHeight = cardArrangements.cellHeight;
        var ignorePadding = cardArrangements.ignorePadding;
        var ignoreLeft = false, ignoreRight = false, ignoreTop = false, ignoreBottom = false;
        if (ignorePadding && columnIndex === 0) {
            actualWidth -= _new_card_item_1.newCardMeasurements.margin;
            ignoreLeft = true;
        }
        if (ignorePadding && columnIndex === cardArrangements.columnCount - 1) {
            actualWidth -= _new_card_item_1.newCardMeasurements.margin;
            ignoreRight = true;
        }
        if (ignorePadding && rowIndex === 0) {
            actualHeight -= _new_card_item_1.newCardMeasurements.margin;
            ignoreTop = true;
        }
        if (ignorePadding && rowIndex === cardArrangements.rowCount - 1) {
            actualHeight -= _new_card_item_1.newCardMeasurements.margin;
            ignoreBottom = true;
        }
        var div = $('<div >', {
            'class': _css_class_names_1.cssClassNames.widgetViewerCell,
            css: {
                height: actualHeight,
                width: actualWidth,
                float: 'left'
            }
        });
        if (ignoreLeft)
            div.addClass('dx-flex-card-cell-ignore-left-margin');
        if (ignoreRight)
            div.addClass('dx-flex-card-cell-ignore-right-margin');
        if (ignoreTop)
            div.addClass('dx-flex-card-cell-ignore-top-margin');
        if (ignoreBottom)
            div.addClass('dx-flex-card-cell-ignore-bototm-margin');
        return div;
    };
    return cardArrangementTableGenerator;
}());
exports.cardArrangementTableGenerator = cardArrangementTableGenerator;


/***/ }),
/* 567 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _new_card_item_1 = __webpack_require__(154);
var CardVirtualizationController = (function () {
    function CardVirtualizationController(table, scrollView) {
        var _this = this;
        this.table = table;
        this.scrollView = scrollView;
        scrollView.option('onScroll', function (args) { _this.onScroll(args); });
    }
    CardVirtualizationController.prototype.init = function (cardArrangements, drawHandler) {
        this.drawHandler = drawHandler;
        this.cardArrangements = cardArrangements;
    };
    CardVirtualizationController.prototype.drawByScroll = function (offset) {
        var arrangements = this.cardArrangements;
        if (arrangements) {
            var top = offset;
            var bottom = offset + arrangements.viewerHeight;
            var topRowIndex = Math.floor(top / arrangements.cellHeight);
            var bottomRowIndex = Math.ceil(bottom / arrangements.cellHeight);
            var startCardIndex = Math.max(0, topRowIndex * arrangements.columnCount - arrangements.columnCount * 3);
            var endCardIndex = Math.min(arrangements.itemsCount - 1, (bottomRowIndex * arrangements.columnCount) - 1 + arrangements.columnCount * 3);
            this.drawHandler(startCardIndex, endCardIndex);
        }
    };
    CardVirtualizationController.prototype.onScroll = function (args) {
        var that = this;
        clearTimeout(this.scrollTimeout);
        this.scrollTimeout = window.setTimeout(function () {
            that.drawByScroll(args.scrollOffset.top);
        }, 100);
    };
    CardVirtualizationController.prototype.getSizeParams = function () {
        var scrollOffset = this.scrollView.scrollOffset();
        return {
            virtualSize: {
                width: this.cardArrangements.getScrollableWidth(),
                height: this.cardArrangements.getScrollableHeight()
            },
            scroll: {
                top: scrollOffset.top,
                left: scrollOffset.left,
                size: 0,
                horizontal: this.cardArrangements.hasHorizontalScroll(),
                vertical: this.cardArrangements.hasVerticalScroll()
            },
            itemMargin: {
                width: 5,
                height: 5
            },
            layoutMeasurement: {
                margin: _new_card_item_1.newCardMeasurements.margin,
                contentPadding: _new_card_item_1.newCardMeasurements.padding
            }
        };
    };
    CardVirtualizationController.prototype.updateScrollableContent = function (action) {
        var scrollOffset = this.scrollView.scrollOffset();
        action();
        this.scrollView.scrollTo(scrollOffset);
        this.drawByScroll(scrollOffset.top);
    };
    return CardVirtualizationController;
}());
exports.CardVirtualizationController = CardVirtualizationController;


/***/ }),
/* 568 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_component_1 = __webpack_require__(245);
var $ = __webpack_require__(2);
var _utils_1 = __webpack_require__(3);
var _dashboard_viewer_constants_1 = __webpack_require__(217);
var _render_helper_1 = __webpack_require__(28);
var _card_item_1 = __webpack_require__(569);
var _arrangement_info_1 = __webpack_require__(570);
var _css_class_names_1 = __webpack_require__(63);
var _widget_item_1 = __webpack_require__(571);
var viewerCount = 0;
var dxWidgetsViewer = (function (_super) {
    __extends(dxWidgetsViewer, _super);
    function dxWidgetsViewer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    dxWidgetsViewer.prototype._getDefaultOptions = function () {
        var baseOptions = _super.prototype['_getDefaultOptions'].call(this);
        return __assign({}, baseOptions, { dataSource: [], viewer: {
                hoverEnabled: false,
                overflow: 'auto',
                method: 'auto',
                count: 1,
                widgetType: 'card',
                redrawOnResize: false,
                onclick: null,
                onRenderComplete: null,
                onAllItemsRenderComplete: null,
                bulkTimesRenderingTimeInterval: 200,
                useNativeScrolling: 'auto',
                ignorePadding: false,
                supportAnimation: false
            }, itemOptions: {
                encodeHtml: true,
                minWidth: undefined,
                proportions: undefined,
                ignoreProportions: false,
                itemMargin: {
                    width: 5,
                    height: 5
                },
                borderWidth: 1,
                hasSparkline: false
            } });
    };
    dxWidgetsViewer.prototype._init = function () {
        _super.prototype['_init'].call(this);
        var that = this, viewer = that.option('viewer');
        that._viewerID = viewerCount++;
        that.initContainer();
        that._content = _render_helper_1.RenderHelper.wrapScrollable(that.container, viewer.overflow, 'both');
        that._scrollBarWidth = that._getScrollBarWidth();
        that._updateByOptions();
        that._createItems();
        that.totalMarginsAndBorders = that._calcTotalMarginsAndBorders();
    };
    dxWidgetsViewer.prototype.initContainer = function () {
        this.container = document.createElement('div');
        _utils_1.$unwrap(this.element()).appendChild(this.container);
        this.container.classList.add(_css_class_names_1.cssClassNames.widgetsViewerScrollableHolder);
    };
    dxWidgetsViewer.prototype.clear = function () {
        this.container.parentElement.removeChild(this.container);
    };
    dxWidgetsViewer.prototype._dispose = function () {
        var that = this;
        clearTimeout(that._drawTimer);
        that._drawTimer = null;
        (that.itemsList || []).forEach(function (item) { return item.dispose(); });
        that._content = null;
        that._scrollBarWidth = null;
        that._widgetType = null;
        that.itemsList = null;
        that.totalMarginsAndBorders = null;
        that._resizeHandler = null;
        if (that._styleTag) {
            that._styleTag.parentElement.removeChild(that._styleTag);
            that._styleTag = null;
        }
    };
    dxWidgetsViewer.prototype._getScrollable = function () {
        return _render_helper_1.RenderHelper.getScrollable(this.container);
    };
    dxWidgetsViewer.prototype._updateScrollable = function () {
        _render_helper_1.RenderHelper.updateScrollable(this.container);
    };
    dxWidgetsViewer.prototype._scrollTo = function (left, top) {
        var that = this, scrollable = this._getScrollable();
        if (scrollable) {
            scrollable.scrollTo({ x: left, y: top });
        }
        else {
            $(that._rootContent()).scrollLeft(left);
            $(that._rootContent()).scrollTop(top);
        }
    };
    dxWidgetsViewer.prototype._scrollOffset = function () {
        var that = this, scrollable = this._getScrollable();
        if (scrollable) {
            return scrollable.scrollOffset();
        }
        else {
            return {
                left: $(that._rootContent()).scrollLeft(),
                top: $(that._rootContent()).scrollTop()
            };
        }
    };
    dxWidgetsViewer.prototype._rootContent = function () {
        return this._content;
    };
    dxWidgetsViewer.prototype._parentHeight = function () {
        var offset = 0;
        return $(this.container).height() - offset;
    };
    dxWidgetsViewer.prototype._parentWidth = function () {
        var offset = 0;
        return $(this.container).width() - offset;
    };
    dxWidgetsViewer.prototype._parentWidthWithoutScroll = function () {
        var that = this;
        return that._parentWidth() - that._scrollBarWidth * that._hasVerticalScroll;
    };
    dxWidgetsViewer.prototype._parentHeightWithoutScroll = function () {
        var that = this;
        return that._parentHeight() - that._scrollBarWidth * that._hasHorizontalScroll;
    };
    dxWidgetsViewer.prototype._getResizeHandler = function () {
        var that = this;
        return function () {
            that.redraw();
        };
    };
    dxWidgetsViewer.prototype._updateByOptions = function () {
        var viewerOptions = this.option('viewer'), itemOptions = this.option('itemOptions'), proportions = itemOptions.proportions, width = itemOptions.minWidth;
        this._widgetType = viewerOptions.widgetType.toLowerCase();
        this.align = viewerOptions.align;
        if (this._widgetType === 'card') {
            this.align = this.align || 'left';
            this.minItemWidth = this.curItemWidth = width || 180;
            this._itemProportions = proportions || (itemOptions.hasSparkline ? 0.625 : 0.5);
        }
        else {
            this.align = this.align || 'center';
            this.minItemWidth = this.curItemWidth = width || 200;
            this._itemProportions = proportions || 1;
            this._needVerticalCentering = true;
        }
        this.minItemHeight = this.curItemHeight = this._itemProportions * this.minItemWidth;
    };
    dxWidgetsViewer.prototype.getSizeParams = function () {
        var that = this, scrollOffset = that._scrollOffset(), scrollableContent = that.container.querySelector('.' + _css_class_names_1.cssClassNames.widgetViewerTable), itemMargin = that.option('itemOptions.itemMargin');
        return {
            virtualSize: {
                width: $(scrollableContent).outerWidth(),
                height: $(scrollableContent).outerHeight()
            },
            scroll: {
                top: scrollOffset.top,
                left: scrollOffset.left,
                size: that._scrollBarWidth,
                horizontal: that._hasHorizontalScroll === 1,
                vertical: that._hasVerticalScroll === 1
            },
            itemMargin: {
                width: itemMargin.width,
                height: itemMargin.height
            }
        };
    };
    dxWidgetsViewer.prototype.getSelectedItems = function () {
        return this.itemsList.filter(function (item) { return item._isSelected; });
    };
    dxWidgetsViewer.prototype.clearSelections = function () {
        this.itemsList.forEach(function (item) { return item.clearSelection(); });
    };
    dxWidgetsViewer.prototype._createItems = function () {
        var that = this, data = that.option('dataSource'), itemOptions = that.option('itemOptions'), rootElement = that._rootContent();
        that.itemsList = [];
        data.forEach(function (dataItem) {
            itemOptions.widgetType = that._widgetType;
            itemOptions.hoverEnabled = dataItem.hoverEnabled;
            itemOptions.isSelected = dataItem.isSelected;
            itemOptions.cursor = dataItem.cursor;
            itemOptions.tag = dataItem.tag;
            itemOptions.parentRootElement = rootElement;
            that.itemsList.push((that._widgetType == 'card') ? new _card_item_1.CardItem(dataItem, itemOptions) : new _widget_item_1.WidgetItem(dataItem, itemOptions));
        });
        that._firstDraw = true;
        delete that._viewerParams;
    };
    dxWidgetsViewer.prototype._optionChanged = function (args) {
        switch (args.name) {
            case 'viewer':
            case 'itemOptions':
                this._updateByOptions();
            case 'dataSource':
                this._invalidate();
                break;
            default:
                _super.prototype['_optionChanged'].call(this, args);
                break;
        }
        _super.prototype['_optionChanged'].call(this, args);
    };
    dxWidgetsViewer.prototype._refresh = function () {
        this.curItemWidth = this.minItemWidth;
        this.curItemHeight = this.minItemHeight;
        this._createItems();
        _super.prototype['_refresh'].call(this);
    };
    dxWidgetsViewer.prototype._invalidate = function () {
        _super.prototype['_invalidate'].call(this);
    };
    dxWidgetsViewer.prototype._calcTotalMarginsAndBorders = function () {
        var itemOptions = this.option('itemOptions'), borderWidth = itemOptions.borderWidth || 0;
        return {
            width: 2 * (itemOptions.itemMargin.width + borderWidth),
            height: 2 * (itemOptions.itemMargin.height + borderWidth)
        };
    };
    dxWidgetsViewer.prototype._render = function (drawOptions) {
        var that = this, viewer = that.option('viewer'), onRenderComplete = viewer.onRenderComplete, method = viewer.method.toLowerCase(), itemCount = viewer.count, clickHandler = viewer.onclick, hoverHandler = viewer.onhover, supportAnimation = viewer.supportAnimation, table, contentElement = that._rootContent(), overflowX = contentElement.style.overflowX, overflowY = contentElement.style.overflowY, parentRoot = contentElement.parentElement, overflowXParentRoot = parentRoot.style.overflowX, overflowYParentRoot = parentRoot.style.overflowY, scrollOffset = that._scrollOffset(), animationEnabled = supportAnimation && !contentElement.innerHTML && that.itemsList.length <= _dashboard_viewer_constants_1.ELEMENTS_COUNT_ANIMATION_THRESHOLD;
        clearTimeout(that._drawTimer);
        table = that._drawItems(method, itemCount, animationEnabled);
        contentElement.innerHTML = '';
        contentElement.style.overflow = 'hidden';
        parentRoot.style.overflow = 'hidden';
        if (table) {
            that.innerContainer = document.createElement('div');
            that.innerContainer.classList.add(_css_class_names_1.cssClassNames.widgetViewerContainer);
            that.innerContainer.style.textAlign = that.align;
            that.innerContainer.style.padding = '0';
            that.innerContainer.style.margin = '0';
            contentElement.appendChild(that.innerContainer);
            that.innerContainer.appendChild(table);
            that.itemsList.forEach(function (item) {
                item.finishRender({
                    clickHandler: clickHandler, hoverHandler: hoverHandler, drawOptions: drawOptions
                });
            });
            if (that._needVerticalCentering && that.innerContainer && that._viewerParams.direction === 'Horizontal') {
                that._verticalCentering(table);
            }
        }
        contentElement.style.overflowX = overflowX;
        contentElement.style.overflowY = overflowY;
        parentRoot.style.overflowX = overflowXParentRoot;
        parentRoot.style.overflowY = overflowYParentRoot;
        that._updateScrollable();
        that._scrollTo(scrollOffset.left, scrollOffset.top);
        if (onRenderComplete) {
            onRenderComplete.call(null);
        }
    };
    dxWidgetsViewer.prototype._verticalCentering = function (table) {
        var that = this, differenceTop = that._parentHeight() - $(that.container.querySelector('.' + _css_class_names_1.cssClassNames.widgetViewerContainer)).height();
        if (differenceTop > 0) {
            that.innerContainer.style.paddingTop = ~~((differenceTop) / 2) + 'px';
        }
        else {
            that.innerContainer.style.paddingTop = '0px';
        }
    };
    dxWidgetsViewer.prototype.redraw = function () {
        this._render();
    };
    dxWidgetsViewer.prototype._calcItemIndex = function (i, j, direction, rowCount, columnCount) {
        return direction == _arrangement_info_1.positioningDirection.Horizontal ?
            i * columnCount + j : j * rowCount + i;
    };
    dxWidgetsViewer.prototype._calcVisibleRow = function (cardHeight) {
        var height = this._parentHeight();
        return Math.ceil(height / cardHeight);
    };
    dxWidgetsViewer.prototype._calcVisibleColumn = function (cardWidth) {
        var width = this._parentWidth();
        return Math.ceil(width / cardWidth);
    };
    dxWidgetsViewer.prototype._getPartArray = function (array, count, indexOfPart) {
        var result = [], i = 0, beg = count * indexOfPart;
        for (i = beg; i < beg + count; i++) {
            result.push(array[i]);
        }
        return result;
    };
    dxWidgetsViewer.prototype._createTable = function (arrangementInfo, enableAnimation) {
        var that = this, tableStruct, i, j, indexItem, col, row, item, isHorizontal = arrangementInfo.direction == _arrangement_info_1.positioningDirection.Horizontal, itemMargin = that.option('itemOptions.itemMargin'), ignorePadding = that.option('viewer.ignorePadding'), columnCount = isHorizontal ? arrangementInfo.itemsOnRowCount : arrangementInfo.itemsOnColumnCount, rowCount = isHorizontal ? arrangementInfo.itemsOnColumnCount : arrangementInfo.itemsOnRowCount, action, itemsListLen = that.itemsList.length, tableWidth, widthMarginsAndBorders = that.totalMarginsAndBorders.width, heightMarginsAndBorders = that.totalMarginsAndBorders.height, parentWidthWithoutScroll = that._parentWidthWithoutScroll(), parentHeightWithoutScroll = that._parentHeightWithoutScroll(), rowHeight, rowWidth, cellHeight, cellWidth, curItemWidth = that.curItemWidth, curItemHeight = that.curItemHeight, curItemWidthWithoutWidthMargins = curItemWidth - 2 * itemMargin.width, curItemHeightWithoutHeightMargins = curItemHeight - 2 * itemMargin.height, curItem;
        if (rowCount <= 0) {
            return undefined;
        }
        tableStruct = document.createElement('div');
        tableStruct.classList.add(_css_class_names_1.cssClassNames.widgetViewerTable);
        tableStruct.classList.add(_css_class_names_1.cssClassNames.widgetViewerIdPrefix + that._viewerID);
        tableStruct.style.overflow = 'hidden';
        tableStruct.style.marginLeft = '0px';
        tableStruct.style.marginRight = '0px';
        if (that._widgetType !== 'card') {
            cellWidth = ~~(Math.max((parentWidthWithoutScroll - columnCount * widthMarginsAndBorders) / columnCount, curItemWidthWithoutWidthMargins));
            cellHeight = !isHorizontal ? ~~(Math.max((parentHeightWithoutScroll - rowCount * heightMarginsAndBorders) / rowCount, curItemHeightWithoutHeightMargins)) : curItemHeightWithoutHeightMargins;
        }
        else {
            cellWidth = curItemWidthWithoutWidthMargins;
            cellHeight = curItemHeightWithoutHeightMargins;
        }
        rowWidth = (cellWidth + 2 * itemMargin.width) * columnCount;
        if (ignorePadding) {
            rowWidth -= 2 * itemMargin.width;
        }
        tableWidth = rowWidth;
        tableStruct.style.height = '100%';
        tableStruct.style.width = tableWidth + 'px';
        for (i = 0; i < rowCount; i++) {
            rowHeight = curItemHeight;
            if (ignorePadding) {
                if (i === 0 && rowCount === 1) {
                    rowHeight -= 2 * itemMargin.height;
                }
                else if (i === 0 || i === rowCount - 1) {
                    rowHeight -= itemMargin.height;
                }
            }
            row = document.createElement('div');
            row.classList.add(_css_class_names_1.cssClassNames.widgetViewerRow);
            row.style.clear = 'both';
            row.style.padding = '0px';
            row.style.margin = '0px';
            row.style.height = rowHeight + 'px';
            row.style.width = rowWidth + 'px';
            for (j = 0; j < columnCount; j++) {
                item = null;
                col = document.createElement('div');
                col.classList.add(_css_class_names_1.cssClassNames.widgetViewerCell);
                col.style.paddingLeft = ignorePadding && (j === 0) ? '0' : itemMargin.width + 'px';
                col.style.paddingRight = ignorePadding && (j === columnCount - 1) ? '0' : itemMargin.width + 'px';
                col.style.paddingTop = ignorePadding && (i === 0) ? '0' : itemMargin.height + 'px';
                col.style.paddingBottom = ignorePadding && (i === rowCount - 1) ? '0' : itemMargin.height + 'px';
                col.style.margin = '0px';
                col.style.width = cellWidth + 'px';
                col.style.height = cellHeight + 'px';
                col.style.cssFloat = 'left';
                indexItem = that._calcItemIndex(i, j, arrangementInfo.direction, rowCount, columnCount);
                if (indexItem < itemsListLen) {
                    curItem = that.itemsList[indexItem];
                    if (that._firstDraw) {
                        item = curItem.initDraw(curItemWidth - widthMarginsAndBorders, curItemHeight - heightMarginsAndBorders, indexItem);
                        action = 'draw';
                    }
                    else {
                        curItem.detachItem();
                        item = curItem.getItemContainer();
                        action = 'resize';
                    }
                    if (item) {
                        col.appendChild(item);
                    }
                }
                row.appendChild(col);
            }
            tableStruct.appendChild(row);
        }
        that._processBatchItems(action, 0, enableAnimation);
        that._firstDraw = false;
        return tableStruct;
    };
    dxWidgetsViewer.prototype._getItemProportions = function () {
        return this._itemProportions;
    };
    dxWidgetsViewer.prototype._calcViewerParams = function (parentWidth, parentHeight, itemCount, method) {
        var that = this, calcRes = that._calculateArrangementInfo(parentWidth, parentHeight, itemCount, method), getRowCount = function () {
            var rowCount = undefined;
            if (calcRes.direction === _arrangement_info_1.positioningDirection.Vertical) {
                rowCount = calcRes.itemsOnRowCount;
            }
            if (calcRes.direction === _arrangement_info_1.positioningDirection.Horizontal) {
                rowCount = calcRes.itemsOnColumnCount;
            }
            return rowCount;
        }, getColumnCount = function () {
            var colCount = undefined;
            if (calcRes.direction === _arrangement_info_1.positioningDirection.Vertical) {
                colCount = calcRes.itemsOnColumnCount;
            }
            if (calcRes.direction === _arrangement_info_1.positioningDirection.Horizontal) {
                colCount = calcRes.itemsOnRowCount;
            }
            return colCount;
        }, getWidthByHeight = function (height) {
            var newItemWidth = ~~(height / (that._getItemProportions() * getRowCount()));
            return newWidth = newItemWidth * getColumnCount();
        }, getHeightByWidth = function (width) {
            var newItemHeight = ~~(width * that._getItemProportions() / getColumnCount());
            return newItemHeight * getRowCount();
        };
        that._hasHorizontalScroll = 0;
        that._hasVerticalScroll = 0;
        if (getColumnCount() * calcRes.getWidth() > parentWidth) {
            calcRes = that._calculateArrangementInfo(parentWidth, parentHeight - that._scrollBarWidth, itemCount, method);
            if (calcRes.direction === _arrangement_info_1.positioningDirection.Vertical && (getColumnCount() * calcRes.getWidth() < parentWidth)) {
                var newHeight = getHeightByWidth(parentWidth);
                if (newHeight <= parentHeight)
                    return that._calculateArrangementInfo(parentWidth, newHeight, itemCount, method);
            }
            that._hasHorizontalScroll = 1;
        }
        if (getRowCount() * calcRes.getHeight() > parentHeight) {
            calcRes = that._calculateArrangementInfo(parentWidth - that._scrollBarWidth, parentHeight, itemCount, method);
            if (calcRes.direction === _arrangement_info_1.positioningDirection.Horizontal && (getRowCount() * calcRes.getHeight() < parentHeight)) {
                var newWidth = getWidthByHeight(parentHeight);
                if (newWidth <= parentWidth)
                    return that._calculateArrangementInfo(newWidth, parentHeight, itemCount, method);
            }
            that._hasVerticalScroll = 1;
        }
        return calcRes;
    };
    dxWidgetsViewer.prototype._createArrangementInfo = function (width, lineCount, itemMinWidth, proportions, direction) {
        var that = this, itemWidth, itemHeight, options = {};
        if (lineCount < 1) {
            lineCount = 1;
        }
        if (that.itemsList.length < lineCount) {
            lineCount = that.itemsList.length;
        }
        itemWidth = width / lineCount;
        itemHeight = ~~(itemWidth * proportions);
        if (itemWidth < itemMinWidth) {
            itemWidth = itemMinWidth;
            itemHeight = ~~(itemWidth * proportions);
        }
        return new _arrangement_info_1.ArrangementInfo(that.itemsList.length, lineCount, itemWidth, itemHeight, that.option('itemOptions').itemMargin, direction, options);
    };
    dxWidgetsViewer.prototype._calculateArrangementInfo = function (width, height, itemCount, method) {
        var that = this, horzInfo, newHorzInfo, nextHorzInfo, vertInfo, itemHeight, itemWidth, countOnWidth, i, itemMargin = that.option('itemOptions').itemMargin, itemProportions = that._getItemProportions(), options = {};
        switch (method) {
            case 'column':
                return that._createArrangementInfo(width, itemCount, that.minItemWidth, itemProportions, _arrangement_info_1.positioningDirection.Horizontal);
            case 'row':
                return that._createArrangementInfo(height, itemCount, that.minItemHeight, 1 / itemProportions, _arrangement_info_1.positioningDirection.Vertical);
            case 'auto':
                if (height < that.minItemHeight && width / that.minItemWidth >= that.itemsList.length) {
                    return new _arrangement_info_1.ArrangementInfo(that.itemsList.length, that.itemsList.length, that.minItemWidth, that.minItemHeight, itemMargin, _arrangement_info_1.positioningDirection.Horizontal, options);
                }
                horzInfo = that._createArrangementInfo(width, ~~(width / that.minItemWidth), that.minItemWidth, itemProportions, _arrangement_info_1.positioningDirection.Horizontal);
                for (i = horzInfo.itemsOnRowCount - 1; i >= 1; i--) {
                    newHorzInfo = that._createArrangementInfo(width, i, that.minItemWidth, itemProportions, _arrangement_info_1.positioningDirection.Horizontal);
                    if (height >= newHorzInfo.itemsOnColumnCount * newHorzInfo.getHeight(false))
                        horzInfo = newHorzInfo;
                    else
                        break;
                }
                nextHorzInfo = that._createArrangementInfo(width, horzInfo.itemsOnRowCount - 1, that.minItemWidth, itemProportions, _arrangement_info_1.positioningDirection.Horizontal);
                vertInfo = that._createArrangementInfo(height, nextHorzInfo.itemsOnColumnCount, that.minItemHeight, 1 / itemProportions, _arrangement_info_1.positioningDirection.Vertical);
                itemHeight = vertInfo.getHeight(false);
                itemWidth = vertInfo.getWidth(false);
                countOnWidth = nextHorzInfo.itemsOnRowCount;
                if (horzInfo.getHeight(false) < itemHeight && width >= countOnWidth * itemWidth)
                    horzInfo = new _arrangement_info_1.ArrangementInfo(that.itemsList.length, countOnWidth, itemWidth, itemHeight, itemMargin, _arrangement_info_1.positioningDirection.Horizontal, options);
                if (height < horzInfo.itemsOnColumnCount * horzInfo.getHeight(false)) {
                    vertInfo = that._createArrangementInfo(height, horzInfo.itemsOnColumnCount, that.minItemHeight, 1 / itemProportions, _arrangement_info_1.positioningDirection.Vertical);
                    itemHeight = vertInfo.getHeight(false);
                    itemWidth = vertInfo.getWidth(false);
                    countOnWidth = vertInfo.itemsOnColumnCount;
                    if (height >= vertInfo.itemsOnRowCount * itemHeight && width >= countOnWidth * itemWidth)
                        horzInfo = new _arrangement_info_1.ArrangementInfo(that.itemsList.length, Math.min(~~(width / itemWidth), that.itemsList.length), itemWidth, itemHeight, itemMargin, _arrangement_info_1.positioningDirection.Horizontal, options);
                }
                return horzInfo;
            default:
                return null;
        }
    };
    dxWidgetsViewer.prototype._drawItems = function (method, itemCount, enableAnimation) {
        method = method || 'auto';
        itemCount = itemCount || 1;
        var that = this, parentWidth = that._parentWidth(), parentHeight = that._parentHeight(), viewerParams = that._viewerParams, itemsList = that.itemsList, ignorePadding = that.option('viewer.ignorePadding'), itemMargin = that.option('itemOptions.itemMargin'), extendedWidth = ignorePadding ? 2 * itemMargin.width : 0, extendedHeight = ignorePadding ? 2 * itemMargin.height : 0;
        if (!itemsList.length) {
            return null;
        }
        viewerParams = that._viewerParams = that._calcViewerParams(parentWidth + extendedWidth, parentHeight + extendedHeight, itemCount, method);
        that.curItemHeight = ~~viewerParams.getHeight();
        that.curItemWidth = ~~viewerParams.getWidth();
        return that._createTable(that._viewerParams, enableAnimation);
    };
    dxWidgetsViewer.prototype.getItemByIndex = function (index) {
        var indexForCheck, result;
        if (_utils_1.type.isNumeric(index)) {
            indexForCheck = Number(index);
            result = this.itemsList[indexForCheck];
        }
        return _utils_1.type.isDefined(result) ? result : null;
    };
    dxWidgetsViewer.prototype._getScrollBarWidth = function () {
        var that = this, useNativeScrolling = that.option('viewer.useNativeScrolling'), scrollBarWidth = 0;
        if (useNativeScrolling == 'auto' || useNativeScrolling === false) {
            return scrollBarWidth;
        }
        var container = document.createElement('div');
        container.style.position = 'absolute';
        container.style.top = '0';
        container.style.left = '0';
        container.style.visibility = 'hidden';
        container.style.width = '200px';
        container.style.height = '150px';
        container.style.overflow = 'hidden';
        document.body.appendChild(container);
        var p = document.createElement('p');
        p.style.width = '100%';
        p.style.height = '300px';
        container.appendChild(p);
        var widthWithoutScrollBar = $(p).width();
        var scrollableContent = _render_helper_1.RenderHelper.wrapScrollable(container, that.option('viewer').overflow, 'both');
        if (scrollableContent == container) {
            scrollableContent = p;
        }
        scrollBarWidth = widthWithoutScrollBar - $(scrollableContent).width();
        if (scrollBarWidth > 0) {
            scrollBarWidth++;
        }
        container.parentElement.removeChild(container);
        return scrollBarWidth;
    };
    dxWidgetsViewer.prototype._processBatchItems = function (functionName, startIndex, enableAnimation) {
        var that = this, dateStart = Date.now(), itemsList = that.itemsList, itemsListLen = itemsList.length, totalMarginsAndBorders = that.totalMarginsAndBorders, widthMarginsAndBorders = totalMarginsAndBorders.width, heightMarginsAndBorders = totalMarginsAndBorders.height, viewer = that.option('viewer'), onAllItemsRenderComplete = viewer.onAllItemsRenderComplete, bulkTimesRenderingTimeInterval = viewer.bulkTimesRenderingTimeInterval, itemWidth = that.curItemWidth - widthMarginsAndBorders, itemHeight = that.curItemHeight - heightMarginsAndBorders, commonItemsOptions, itemsStyle;
        if (!itemsList[startIndex]) {
            return;
        }
        commonItemsOptions = itemsList[startIndex].calcCommonItemSpecificOptions(itemWidth, itemHeight);
        itemsStyle = itemsList[startIndex].getCssStyle(itemWidth, itemHeight, commonItemsOptions, '.' + _css_class_names_1.cssClassNames.widgetViewerIdPrefix + that._viewerID);
        that._styleTag && that._styleTag.parentElement.removeChild(that._styleTag);
        that._styleTag = document.createElement('style');
        that._styleTag.innerText = itemsStyle;
        that._styleTag.type = 'text/css';
        document.head.appendChild(that._styleTag);
        var internalProcessBatchItems = function () {
            if (typeof itemsList[startIndex][functionName] === 'function') {
                dateStart = Date.now();
                do {
                    if (startIndex < itemsListLen) {
                        itemsList[startIndex][functionName](itemWidth, itemHeight, startIndex, commonItemsOptions);
                        ++startIndex;
                    }
                    if (!itemsList[startIndex]) {
                        if (typeof onAllItemsRenderComplete === 'function') {
                            onAllItemsRenderComplete.call(null);
                        }
                        return;
                    }
                } while (Date.now() - dateStart < bulkTimesRenderingTimeInterval);
                that._drawTimer = window.setTimeout(function () { internalProcessBatchItems(); }, 0);
            }
        };
        if (enableAnimation)
            that._drawTimer = window.setTimeout(function () { internalProcessBatchItems(); }, 0);
        else
            internalProcessBatchItems();
    };
    return dxWidgetsViewer;
}(dom_component_1.default));
exports.dxWidgetsViewer = dxWidgetsViewer;


/***/ }),
/* 569 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var string_1 = __webpack_require__(30);
var tooltip_1 = __webpack_require__(216);
var sparkline_1 = __webpack_require__(122);
var $ = __webpack_require__(2);
var _format_helper_1 = __webpack_require__(47);
var _utils_1 = __webpack_require__(3);
var _delta_indicator_1 = __webpack_require__(151);
var _simple_indicator_1 = __webpack_require__(220);
var _base_widget_item_1 = __webpack_require__(350);
var _css_class_names_1 = __webpack_require__(63);
var hiddenContainer = $('<div>', {
    id: _css_class_names_1.cssClassNames.cardHiddenContainer
}), nowrapHiddenContainer = $('<div>', {
    id: _css_class_names_1.cssClassNames.cardNowrapHiddenContainer
}), _ceil = Math.ceil, _floor = Math.floor, TITLE_TOOLTIP_PREFIX = 'titleTooltip', TITLE_CONTAINER_PREFIX = 'titleContainer';
exports.cardValue1Counter = 0;
function getSparklineHeight(cardHeight) {
    return cardHeight * 0.25;
}
function calcRowCount(text, encodeHtml) {
    var text = encodeHtml ? string_1.encodeHtml(text) : text, words = text.split(' '), i, openSpan = '<span>', closeSpan = ' </span>', markup = '', prevOffsetTop, lineCount = 1, clientRects;
    for (i = 0; i < words.length; i++) {
        markup += openSpan + words[i] + closeSpan;
    }
    hiddenContainer.html(openSpan + markup + closeSpan);
    clientRects = hiddenContainer.children()[0].getClientRects();
    prevOffsetTop = clientRects[0].top;
    for (i = 1; i < clientRects.length; i++) {
        if (clientRects[i].top !== prevOffsetTop) {
            lineCount++;
            prevOffsetTop = clientRects[i].top;
        }
    }
    return lineCount;
}
var CardItem = (function (_super) {
    __extends(CardItem, _super);
    function CardItem(item, options) {
        var _this = _super.call(this, CardItem.ensureOptions(options)) || this;
        var getText = function (text) {
            if (text) {
                return options.encodeHtml ? $('<div>').text(text).html() : text;
            }
            return '';
        }, defaultValues = {
            type: 'none',
            hasPositiveMeaning: false,
            text: {
                value: '',
                useDefaultColor: false
            }
        };
        item = item || {};
        _this.data = item.data || {};
        _this.title = getText(item.title);
        _this.subTitle = getText(item.subTitle);
        _this.sparklineOptions = item.sparklineOptions || {};
        _this.variableValue1 = _utils_1.deepExtend({}, defaultValues, item.variableValue1);
        _this.variableValue2 = _utils_1.deepExtend({}, defaultValues, item.variableValue2);
        defaultValues.text.useDefaultColor = true;
        _this.mainValue = _utils_1.deepExtend({}, defaultValues, item.mainValue);
        _this.indicator = {
            hasPositiveMeaning: _this.mainValue.hasPositiveMeaning,
            type: _this.mainValue.type
        };
        if (hiddenContainer.parent().length === 0) {
            hiddenContainer.appendTo(document.body);
        }
        if (nowrapHiddenContainer.parent().length === 0) {
            nowrapHiddenContainer.appendTo(document.body);
        }
        _this.subtitleDotsIndex = 0;
        return _this;
    }
    CardItem.ensureOptions = function (options) {
        options = options || {};
        options.type = 'cardItem';
        options.ignoreProportions = false;
        return options;
    };
    CardItem.prototype.draw = function (widthCard, heightCard, cardIndex, commonItemsOptions) {
        var that = this, options = that._options, paddings = commonItemsOptions.paddings, sparklineHeight = commonItemsOptions.sparklineHeight, imgDiv, itemDiv, sparklineContainer, topContentOffset = parseFloat(paddings.top), title, subtitle, variableValue1, variableValue2, mainValueDiv, textSubtitle = options.encodeHtml ? that._getEllipsisText(that.subTitle, commonItemsOptions, _floor((widthCard - paddings.right - paddings.left) * 0.6)) : that.subTitle, index = exports.cardValue1Counter++, value1Text = that._getText('variableValue1'), value2Text = that._getText('variableValue2'), mainValueText = that._getText('mainValue'), titleContainerId = TITLE_CONTAINER_PREFIX + index;
        itemDiv = _super.prototype.draw.call(this, widthCard, heightCard, cardIndex);
        title = ['<div id="' + titleContainerId + '" class="', _css_class_names_1.cssClassNames.cardTitle + '" style="padding:' + topContentOffset + 'px ' + paddings.left + 'px 0px ' + paddings.left + 'px;">', that.title, '</div>'].join('');
        subtitle = ['<div class="', _css_class_names_1.cssClassNames.cardSubtitle, '" style="padding-left:' + paddings.left + 'px;">', textSubtitle, '</div>'].join('');
        variableValue1 = ['<span class="', _css_class_names_1.cssClassNames.cardVariableValue1, ' ', that._getValueClassName('variableValue1') + '" style="padding-right:' + paddings.right + 'px;">', value1Text, '</span>'].join('');
        variableValue2 = ['<span class="', _css_class_names_1.cssClassNames.cardVariableValue2, ' ', that._getValueClassName('variableValue2'), '" style="padding-right:' + paddings.right + 'px;">', value2Text, '</span>'].join('');
        imgDiv = ['<div class="', _css_class_names_1.cssClassNames.cardIndicator, '" style="padding-left:' + paddings.left + 'px;">',
            _simple_indicator_1.SimpleIndicator.getIndicator(that.indicator.type, that.indicator.hasPositiveMeaning), '</div>'].join('');
        mainValueDiv = ['<span class="', _css_class_names_1.cssClassNames.cardMainValue, ' ', that._getValueClassName('mainValue'), '" style="padding-right:' + paddings.right + 'px;">', mainValueText, '</div>'].join('');
        itemDiv.innerHTML = title + subtitle + variableValue1 + variableValue2 + imgDiv + mainValueDiv;
        that._addTooltip(itemDiv, titleContainerId, TITLE_TOOLTIP_PREFIX, that.title, index);
        if (options.hasSparkline) {
            sparklineContainer = document.createElement('div');
            sparklineContainer.classList.add(_css_class_names_1.cssClassNames.cardSparkline);
            sparklineContainer.style.left = paddings.left;
            sparklineContainer.style.left = paddings.right;
            itemDiv.appendChild(sparklineContainer);
            that.sparklineOptions.size = {
                width: widthCard - paddings.left - paddings.right,
                height: sparklineHeight
            };
            new sparkline_1.default(sparklineContainer, that.sparklineOptions);
        }
        return itemDiv;
    };
    CardItem.prototype.resize = function (width, height, index, commonItemsOptions) {
        var that = this, sparklineHeight = commonItemsOptions.sparklineHeight, itemDiv = that._itemDiv, imgDiv = itemDiv.querySelector('.' + _css_class_names_1.cssClassNames.cardIndicator), subTitle = itemDiv.querySelector('.' + _css_class_names_1.cssClassNames.cardSubtitle), sparklineContainer = itemDiv.querySelector('.' + _css_class_names_1.cssClassNames.cardSparkline), paddings = that._options.padding, widthWithoutpaddings = width - paddings.right - paddings.left;
        if (!itemDiv.childElementCount) {
            that.draw(width, height, index, commonItemsOptions);
            return that._itemDiv;
        }
        if (that._options.encodeHtml)
            subTitle.innerText = that._getEllipsisText(subTitle.innerText, commonItemsOptions, _floor((widthWithoutpaddings) * 0.6));
        if (sparklineHeight) {
            sparkline_1.default.getInstance(sparklineContainer)
                .option('size', { width: widthWithoutpaddings, height: sparklineHeight });
        }
        return itemDiv;
    };
    CardItem.prototype.getCssStyle = function (width, height, commonItemsOptions, prefix) {
        var that = this, paddings = commonItemsOptions.paddings, sparklineHeight = commonItemsOptions.sparklineHeight, widthWithoutpaddings = width - paddings.right - paddings.left, fontSizes = commonItemsOptions.fontSizes, baseStyle = _super.prototype.getCssStyle.call(this, width, height, commonItemsOptions, prefix), titleStyle = prefix + ' ' + that._formStyle('.' + _css_class_names_1.cssClassNames.cardTitle, {
            'font-size': fontSizes.title,
            'min-height': _ceil(fontSizes.title * 1.3),
            'line-height': fontSizes.title
        }), subTitleStyle = prefix + ' ' + that._formStyle('.' + _css_class_names_1.cssClassNames.cardSubtitle, {
            'min-height': _ceil(fontSizes.subTitle * 1.3) * 2,
            'font-size': fontSizes.subTitle
        }), indicatorContainerStyle = prefix + ' ' + that._formStyle('.' + _css_class_names_1.cssClassNames.cardIndicator, {
            height: _ceil(0.18 * (height - sparklineHeight)),
            width: _ceil(0.24 * (height - sparklineHeight)),
            bottom: paddings.bottom + sparklineHeight + 3
        }), variableValue1Style = prefix + ' ' + that._formStyle('.' + _css_class_names_1.cssClassNames.cardVariableValue1, {
            'font-size': fontSizes.variableValue1,
            'line-height': fontSizes.variableValue1,
            bottom: fontSizes.variableValue2 + fontSizes.mainValue
        }), variableValue2Style = prefix + ' ' + that._formStyle('.' + _css_class_names_1.cssClassNames.cardVariableValue2, {
            'font-size': fontSizes.variableValue2,
            'line-height': fontSizes.variableValue2,
            'bottom': fontSizes.mainValue
        }), mainValueStyle = prefix + ' ' + that._formStyle('.' + _css_class_names_1.cssClassNames.cardMainValue, {
            'font-size': fontSizes.mainValue,
            'line-height': fontSizes.mainValue,
            bottom: paddings.bottom + sparklineHeight
        }), sparklineContainerStyle = sparklineHeight ?
            prefix + ' ' + that._formStyle('.' + _css_class_names_1.cssClassNames.cardSparkline, {
                height: sparklineHeight,
                width: widthWithoutpaddings
            }) : '';
        return [baseStyle, titleStyle, subTitleStyle, indicatorContainerStyle, variableValue1Style, variableValue2Style, mainValueStyle, sparklineContainerStyle].join(' ');
    };
    CardItem.calcFonts = function (height) {
        return {
            title: (~~(height * 0.22)),
            subTitle: (~~(height * 0.14)),
            mainValue: (~~(height * 0.30)),
            variableValue1: (~~(height * 0.14)),
            variableValue2: (~~(height * 0.14))
        };
    };
    CardItem.prototype.calcCommonItemSpecificOptions = function (width, height) {
        var that = this, options = that._options, sparklineHeight = options.hasSparkline ? getSparklineHeight(height) : 0, fontSizes = CardItem.calcFonts(height - sparklineHeight), paddings = __assign({ top: 0, left: 0, right: 0, bottom: 0 }, options.padding), oneRowHeight;
        hiddenContainer.width(_floor((width - paddings.right - paddings.left) * 0.6))
            .css('fontSize', fontSizes.subTitle);
        nowrapHiddenContainer.css('fontSize', fontSizes.subTitle);
        oneRowHeight = hiddenContainer.text('a').height();
        hiddenContainer.empty();
        return {
            paddings: paddings,
            sparklineHeight: sparklineHeight,
            fontSizes: fontSizes,
            oneRowHeight: oneRowHeight
        };
    };
    CardItem.prototype.dispose = function () {
        var that = this;
        _base_widget_item_1.BaseWidgetItem.prototype.dispose.apply(that, arguments);
        that.data = null;
        that.sparklineOptions = null;
        that.indicator = null;
        that._options = null;
    };
    CardItem.prototype._addTooltip = function (itemDiv, containerId, tooltipPrefix, text, index) {
        var container = itemDiv.querySelector('#' + containerId);
        var div = document.createElement('div');
        div.id = tooltipPrefix + index;
        container.appendChild(div);
        div.innerText = text;
        new tooltip_1.default(div, {
            target: '#' + containerId,
            showEvent: { name: 'mouseenter', delay: 800 },
            hideEvent: 'mouseleave'
        });
    };
    CardItem.prototype._getDefaultOptions = function () {
        var defaults = _base_widget_item_1.BaseWidgetItem.prototype._getDefaultOptions.apply(this, arguments), options = {
            padding: {
                top: 3,
                left: 12,
                right: 12,
                bottom: 10
            },
            font: {
                family: 'Segoe UI, HelveticaNeue, Trebuchet MS, Verdana',
                weight: 'normal'
            },
            title: {
                color: 'black'
            },
            subTitle: {
                color: '#B6B6B6'
            }
        };
        return _utils_1.deepExtend({}, defaults, options);
    };
    CardItem.prototype._getText = function (classText) {
        var that = this;
        var valueOptions = that[classText].text, value = valueOptions.value, format = valueOptions.format;
        if (format) {
            return _format_helper_1.formatHelper.format(parseFloat(value), format);
        }
        else {
            return that._options.encodeHtml ? string_1.encodeHtml(value) : value.toString();
        }
    };
    CardItem.prototype._getClassFromIndicator = function (type, hasPositiveMeaning, useDefaultColor) {
        return _delta_indicator_1.DeltaIndicator.getIndicatorColorType(type, hasPositiveMeaning, useDefaultColor);
    };
    CardItem.prototype._getCardStyle = function (isSelected) {
        return isSelected ? this._options.selectionStyle : this._options.style;
    };
    CardItem.prototype._getValueClassName = function (classText) {
        var that = this, value = that[classText], useDefaultColor = value.text.useDefaultColor, hasPositiveMeaning = value.hasPositiveMeaning, type = value.type;
        return that._getClassFromIndicator(type, hasPositiveMeaning, useDefaultColor);
    };
    CardItem.prototype._setSubtitleDotsIndex = function (index) {
        this._subtitleDotsIndex = index;
    };
    CardItem.prototype._getEllipsisText = function (inputText, commonItemsOptions, containerWidth) {
        if (!inputText || inputText === '') {
            return '';
        }
        var that = this, subtitleRowsCount = calcRowCount(inputText, that._options.encodeHtml), fullTextWidth, proportionalTextLen, updatedText, movingDirection, threeDots = '...', i, endIndex, dotsIndex = this._subtitleDotsIndex;
        if (subtitleRowsCount <= 2) {
            return inputText;
        }
        fullTextWidth = nowrapHiddenContainer.text(inputText).width();
        proportionalTextLen = _floor(2 * containerWidth * inputText.length / fullTextWidth);
        updatedText = inputText.substring(0, proportionalTextLen - 3) + threeDots;
        subtitleRowsCount = calcRowCount(updatedText, that._options.encodeHtml);
        if (subtitleRowsCount > 2) {
            movingDirection = -1;
        }
        else {
            movingDirection = 1;
        }
        for (i = 1; i < proportionalTextLen; i += 2) {
            endIndex = dotsIndex ? dotsIndex + i * movingDirection : proportionalTextLen - 3 + i * movingDirection;
            updatedText = inputText.substring(0, endIndex) + threeDots;
            subtitleRowsCount = calcRowCount(updatedText, that._options.encodeHtml);
            if (movingDirection === 1 && subtitleRowsCount === 3) {
                updatedText = inputText.substring(0, endIndex - 3) + threeDots;
                that._setSubtitleDotsIndex(updatedText.length - 3);
                return updatedText;
            }
            if (movingDirection === -1 && subtitleRowsCount === 2) {
                that._setSubtitleDotsIndex(updatedText.length - 3);
                return updatedText;
            }
        }
        return updatedText;
    };
    return CardItem;
}(_base_widget_item_1.BaseWidgetItem));
exports.CardItem = CardItem;


/***/ }),
/* 570 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.positioningDirection = { Vertical: 'Vertical', Horizontal: 'Horizontal' };
var ArrangementInfo = (function () {
    function ArrangementInfo(totalItemCount, itemsOnRowCount, itemWidth, itemHeight, itemMargin, direction, options) {
        this.totalItemCount = totalItemCount;
        this.itemsOnRowCount = itemsOnRowCount;
        this.itemWidth = itemWidth;
        this.itemHeight = itemHeight;
        this.direction = direction;
        this.itemMargin = itemMargin;
        this.options = options;
        this.itemsOnColumnCount = Math.ceil(this.totalItemCount / this.itemsOnRowCount);
    }
    ArrangementInfo.prototype.getHeight = function (useMargin) {
        var that = this;
        var margin = useMargin ? 2 * that.itemMargin.Height : 0;
        switch (that.direction) {
            case exports.positioningDirection.Horizontal:
                return that.itemHeight - margin;
            case exports.positioningDirection.Vertical:
                return that.itemWidth - margin;
            default:
                return -1;
        }
    };
    ArrangementInfo.prototype.getWidth = function (useMargin) {
        var that = this, margin = useMargin ? 2 * that.itemMargin.Width : 0;
        switch (that.direction) {
            case exports.positioningDirection.Horizontal:
                return that.itemWidth - margin;
            case exports.positioningDirection.Vertical:
                return that.itemHeight - margin;
            default:
                return 0;
        }
    };
    return ArrangementInfo;
}());
exports.ArrangementInfo = ArrangementInfo;


/***/ }),
/* 571 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var _utils_1 = __webpack_require__(3);
var _base_widget_item_1 = __webpack_require__(350);
var _widget_item_factory_1 = __webpack_require__(572);
var WidgetItem = (function (_super) {
    __extends(WidgetItem, _super);
    function WidgetItem(itemData, options) {
        var _this = _super.call(this, WidgetItem.ensureOptions(options)) || this;
        _this._widgetType = String(_this._options.widgetType || '').toLowerCase();
        _this._itemData = itemData || {};
        _this._itemData.encodeHtml = _this._options.encodeHtml;
        _this._itemData.redrawOnResize = false;
        return _this;
    }
    WidgetItem.ensureOptions = function (options) {
        options = options || {};
        options.type = 'widgetItem';
        return options;
    };
    WidgetItem.prototype.dispose = function () {
        var that = this;
        _base_widget_item_1.BaseWidgetItem.prototype.dispose.apply(that, arguments);
        that._itemData = null;
        this._disposeWidget();
    };
    WidgetItem.prototype._disposeWidget = function () {
        if (this._widget) {
            this._widget.dispose();
            this._widget = null;
        }
    };
    WidgetItem.prototype._getDefaultOptions = function () {
        return _utils_1.deepExtend({}, _base_widget_item_1.BaseWidgetItem.prototype._getDefaultOptions.apply(this, arguments), {
            style: {
                borderStyle: 'solid',
                borderColor: '#ffffff'
            }
        });
    };
    WidgetItem.prototype.detachItem = function () {
        var itemDiv = this._itemDiv;
        if (itemDiv && itemDiv.parentElement) {
            itemDiv.parentElement.removeChild(itemDiv);
        }
    };
    WidgetItem.prototype.initDraw = function (width, height, index) {
        this._disposeWidget();
        return _super.prototype.initDraw.call(this, width, height, index);
    };
    WidgetItem.prototype.draw = function (width, height, index) {
        _super.prototype.draw.call(this, width, height, index);
        var that = this, itemDiv;
        itemDiv = that._itemDiv;
        itemDiv.style.margin = 'auto';
        this._options.itemWidgetOptionsPrepared(that._itemData);
        that._widget = _widget_item_factory_1.widgetItemFactory.createWidget(that._widgetType, itemDiv, that._itemData);
        return itemDiv;
    };
    WidgetItem.prototype.resize = function (width, height, index) {
        if (!this._itemDiv.childNodes.length) {
            return this.draw(width, height, index);
        }
    };
    WidgetItem.prototype.rerender = function (drawOptions) {
        var that = this, options;
        if (that._widget) {
            options = _widget_item_factory_1.widgetItemFactory.getAdditionalOptions(that._widgetType, that._itemDiv, that._itemData);
            options && _utils_1.deepExtend(that._widget._options, options);
            if ($(that._itemDiv).is(':visible')) {
                that._widget.render(drawOptions);
            }
        }
    };
    WidgetItem.prototype.getWidget = function () {
        return this._widget;
    };
    return WidgetItem;
}(_base_widget_item_1.BaseWidgetItem));
exports.WidgetItem = WidgetItem;


/***/ }),
/* 572 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var chart_1 = __webpack_require__(250);
var circular_gauge_1 = __webpack_require__(251);
var linear_gauge_1 = __webpack_require__(252);
var pie_chart_1 = __webpack_require__(424);
function getAdditionalCircularGaugeOptions(container, options) {
    return null;
}
var getAdditionalOptionsHandlers = {
    'circulargauge': getAdditionalCircularGaugeOptions
};
exports.widgetItemFactory = {
    createWidget: function (widgetType, container, options) {
        switch ((widgetType || '').toLowerCase()) {
            case 'chart':
                var chart = chart_1.default.getInstance(container);
                if (chart) {
                    chart.option(options);
                }
                else {
                    chart = new chart_1.default(container, options);
                }
                return chart;
            case 'piechart':
                var pieChart = pie_chart_1.default.getInstance(container);
                if (pieChart) {
                    pieChart.option(options);
                }
                else {
                    pieChart = new pie_chart_1.default(container, options);
                }
                return pieChart;
            case 'circulargauge':
                var circularGauge = circular_gauge_1.default.getInstance(container);
                if (circularGauge) {
                    circularGauge.option(options);
                }
                else {
                    circularGauge = new circular_gauge_1.default(container, options);
                }
                return circularGauge;
            case 'lineargauge':
                var linearGauge = linear_gauge_1.default.getInstance(container);
                if (linearGauge) {
                    linearGauge.option(options);
                }
                else {
                    linearGauge = new linear_gauge_1.default(container, options);
                }
                return linearGauge;
            default:
                return null;
        }
    },
    getAdditionalOptions: function (widgetType, container, options) {
        var handler = getAdditionalOptionsHandlers[(widgetType || '').toLowerCase()];
        return handler ? handler(container, options) : null;
    }
};


/***/ }),
/* 573 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var chart_1 = __webpack_require__(250);
var $ = __webpack_require__(2);
var _chart_helper_1 = __webpack_require__(95);
var _common_1 = __webpack_require__(35);
var _format_helper_1 = __webpack_require__(47);
var _formatter_1 = __webpack_require__(25);
var _selection_helper_1 = __webpack_require__(243);
var _utils_1 = __webpack_require__(3);
var _z_index_1 = __webpack_require__(57);
var _item_data_axis_names_1 = __webpack_require__(34);
var _render_helper_1 = __webpack_require__(28);
var _dx_devextreme_themes_integration_1 = __webpack_require__(176);
var _base_item_1 = __webpack_require__(29);
var chartItem = (function (_super) {
    __extends(chartItem, _super);
    function chartItem(container, options) {
        var _this = _super.call(this, container, options) || this;
        _this.itemElementCustomColor = $.Callbacks();
        return _this;
    }
    chartItem.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.chartViewer && this.chartViewer.dispose();
    };
    chartItem.prototype._initializeData = function (newOptions) {
        var _this = this;
        _super.prototype._initializeData.call(this, newOptions);
        if (this.dataController) {
            this.dataController.elementCustomColor = function (e) { return _this._elementCustomColor(e); };
        }
    };
    chartItem.prototype._clearSelectionUnsafe = function () {
        this.chartViewer.clearSelection();
    };
    chartItem.prototype.selectTupleUnsafe = function (tuple, state) {
        _selection_helper_1.selectionHelper.setSelectedPoint(this.chartViewer, _utils_1.getAxisPointValue(tuple, _item_data_axis_names_1.itemDataAxisNames.chartSeriesAxis), _utils_1.getAxisPointValue(tuple, _item_data_axis_names_1.itemDataAxisNames.chartArgumentAxis), state);
    };
    chartItem.prototype._setSelectionUnsafe = function (values) {
        _super.prototype._setSelectionUnsafe.call(this, values);
        this.clearSelection();
        this._applySelection();
    };
    chartItem.prototype.updateContentStateUnsafe = function () {
        if (this._getCustomHoverEnabled()) {
            var hoverMode = null, targetAxes = this._getTargetAxes();
            if (targetAxes.length == 1) {
                if (targetAxes[0] == _item_data_axis_names_1.itemDataAxisNames.chartArgumentAxis)
                    hoverMode = _chart_helper_1.chartHelper.SelectionMode.Argument;
                else
                    hoverMode = _chart_helper_1.chartHelper.SelectionMode.Series;
            }
            else if (targetAxes.length == 2) {
                hoverMode = _chart_helper_1.chartHelper.SelectionMode.Points;
            }
            this.chartViewer.option('commonSeriesSettings.hoverMode', this._convertHoverMode(hoverMode));
            this.chartViewer.option('commonSeriesSettings.point.hoverMode', this._convertPointHoverMode(hoverMode));
        }
    };
    chartItem.prototype.renderContentUnsafe = function (element, changeExisting, afterRenderCallback) {
        var chartDataController = this.dataController;
        var opts = this._getViewOptions();
        if (changeExisting && this.chartViewer) {
            switch (this.options.ContentType) {
                case _common_1.contentType.viewModel:
                    break;
                default:
                    _utils_1.deepExtend(opts, this._getCommonOptions());
                    break;
            }
            this._raiseItemWidgetOptionsPrepared(opts);
            this.chartViewer.option(opts);
        }
        else {
            var options = __assign({}, opts, this._getCommonOptions());
            this._raiseItemWidgetOptionsPrepared(options);
            this.chartViewer = new chart_1.default(element, options);
        }
        var zoomArguments = chartDataController ? chartDataController.getZoomArguments() : null;
        if (zoomArguments) {
            this.chartViewer.getArgumentAxis().visualRange([zoomArguments.start, zoomArguments.end]);
        }
        else {
            this.chartViewer.getArgumentAxis().visualRange([null, null]);
        }
        return false;
    };
    chartItem.prototype.getInfoUnsafe = function () {
        var chartDataController = this.dataController;
        var info = _super.prototype.getInfoUnsafe.call(this);
        var zoomAndPanMode = this.chartViewer.option('zoomAndPan');
        if (zoomAndPanMode && (zoomAndPanMode === 'both' || zoomAndPanMode === 'pan')) {
            var viewport = this.chartViewer.getVisibleArgumentBounds();
            info = _utils_1.deepExtend(info, {
                chartViewport: {
                    min: chartDataController.getArgumentUniquePath(viewport.minVisible),
                    max: chartDataController.getArgumentUniquePath(viewport.maxVisible)
                }
            });
        }
        return info;
    };
    chartItem.prototype._elementCustomColor = function (eventArgs) {
        this.itemElementCustomColor.fire(this.getName(), eventArgs);
    };
    chartItem.prototype._getZoomAndPanOption = function (viewModel) {
        var zoomAndPanOptions = {
            argumentAxis: 'none'
        };
        if (viewModel.AxisX.EnableZooming) {
            zoomAndPanOptions.argumentAxis = 'both';
        }
        else if (viewModel.AxisX.LimitVisiblePoints) {
            zoomAndPanOptions.argumentAxis = 'pan';
        }
        return zoomAndPanOptions;
    };
    chartItem.prototype._getViewOptions = function () {
        var _this = this;
        var viewModel = this.options ? this.options.ViewModel : undefined;
        if (!viewModel)
            return {};
        var that = this;
        var chartDataController = that.dataController;
        var dataSourceAndSeries = chartDataController.getDataSourceAndSeries(that._isEncodeHtml()), panes = viewModel.Panes, isSelectable = that.isInteractivityActionEnabled(), seriesFormats = {}, isDiscreteArgument = chartDataController.isDiscreteArgument(), argumentAxisLabelFormat = chartDataController.getAxisXFormat(), rotated = viewModel.Rotated, axisGridColor = _dx_devextreme_themes_integration_1.getBaseColorScheme() === 'light' ? '#d3d3d3' : '#555555', isOverlappingModeHide = function () {
            var isHideMode = false;
            panes.forEach(function (pane) {
                pane.SeriesTemplates.forEach(function (seriesTemplate) {
                    if (seriesTemplate.PointLabel) {
                        var pointLabelsEnabled = that.dataController.checkSeriesTemplatePointLabels(seriesTemplate);
                        if (pointLabelsEnabled && (seriesTemplate.PointLabel.OverlappingMode == 'Hide' || seriesTemplate.PointLabel.OverlappingMode == 'Reposition'))
                            isHideMode = true;
                    }
                });
            });
            return isHideMode;
        }, configureLogarithmicOptions = function (axis, axisModel) {
            if (axisModel.Logarithmic) {
                axis.type = 'logarithmic';
                axis.logarithmBase = axisModel.LogarithmicBase;
            }
        }, customizeTextProc = function (isPercentAxis, isScientificAxis, customFormat) {
            return function () {
                if (customFormat != null)
                    return _format_helper_1.formatHelper.format(this.value, _formatter_1.convertToFormat({ NumericFormat: customFormat }));
                if (isPercentAxis)
                    return _formatter_1.formatPercentValue(this.value);
                if (isScientificAxis)
                    return _formatter_1.formatScientificAxisValue(this.value);
                return _formatter_1.formatAxisValue(this.value, this.min, this.max);
            };
        }, options = {
            panes: [],
            valueAxis: [],
            rotated: rotated,
            zoomAndPan: this._getZoomAndPanOption(viewModel),
            resizePanesOnZoom: true,
            scrollBar: {
                visible: viewModel.AxisX.EnableZooming || viewModel.AxisX.LimitVisiblePoints,
                position: 'bottom'
            }
        };
        options.resolveLabelsOverlapping = isOverlappingModeHide();
        options.disableTwoWayBinding = true;
        options.resolveLabelOverlapping = isOverlappingModeHide() ? 'hide' : 'none';
        panes.forEach(function (pane, index) {
            var paneName = chartDataController.generatePaneName(pane.Name, index), isPrimaryAxisInPercentFormat = that._isAxisInPercentFormat(pane, false), isPrimaryAxisInScientificFormat = that._isAxisInScientificFormat(pane, false), isSecondaryAxisInPercentFormat = that._isAxisInPercentFormat(pane, true), isSecondaryAxisInScientificFormat = that._isAxisInScientificFormat(pane, true);
            seriesFormats[paneName] = {};
            options.panes.push({
                name: paneName
            });
            var axis = {
                name: paneName + 'primary',
                position: rotated ? 'bottom' : 'left',
                pane: paneName,
                inverted: pane.PrimaryAxisY.Reverse,
                color: axisGridColor,
                tick: {
                    visible: false,
                },
                minorTick: {
                    visible: false,
                },
                label: {
                    visible: pane.PrimaryAxisY.Visible,
                    customizeText: customizeTextProc(isPrimaryAxisInPercentFormat, isPrimaryAxisInScientificFormat, pane.PrimaryAxisY.Format && pane.PrimaryAxisY.Format.NumericFormat)
                },
                title: {
                    text: pane.PrimaryAxisY.Visible ? pane.PrimaryAxisY.Title : null
                },
                visible: pane.PrimaryAxisY.Visible,
                grid: {
                    visible: pane.PrimaryAxisY.ShowGridLines
                },
                showZero: pane.PrimaryAxisY.ShowZeroLevel
            };
            configureLogarithmicOptions(axis, pane.PrimaryAxisY);
            options.valueAxis.push(axis);
            if (pane.SecondaryAxisY) {
                var axis_1 = {
                    name: paneName + 'secondary',
                    position: rotated ? 'top' : 'right',
                    pane: paneName,
                    inverted: pane.SecondaryAxisY.Reverse,
                    color: axisGridColor,
                    tick: {
                        visible: false,
                    },
                    minorTick: {
                        visible: false,
                    },
                    label: {
                        visible: pane.SecondaryAxisY.Visible,
                        customizeText: customizeTextProc(isSecondaryAxisInPercentFormat, isSecondaryAxisInScientificFormat, pane.SecondaryAxisY.Format && pane.SecondaryAxisY.Format.NumericFormat)
                    },
                    title: {
                        text: pane.SecondaryAxisY.Visible ? pane.SecondaryAxisY.Title : null
                    },
                    visible: pane.SecondaryAxisY.Visible,
                    grid: {
                        visible: pane.SecondaryAxisY.ShowGridLines
                    },
                    showZero: pane.SecondaryAxisY.ShowZeroLevel
                };
                configureLogarithmicOptions(axis_1, pane.SecondaryAxisY);
                options.valueAxis.push(axis_1);
            }
        });
        if (rotated) {
            options.panes.reverse();
        }
        options.commonSeriesSettings = {
            hoverMode: isSelectable ? that._convertHoverMode(viewModel.SelectionMode) : 'none',
            point: {
                visible: false,
                hoverMode: isSelectable ? that._convertPointHoverMode(viewModel.SelectionMode) : 'none'
            },
            stackedbar: {
                label: {
                    backgroundColor: 'none'
                }
            }
        };
        options.argumentAxis = {
            argumentType: null,
            inverted: viewModel.AxisX.Reverse,
            color: axisGridColor,
            tick: {
                visible: false,
            },
            minorTick: {
                visible: false,
            },
            label: {
                visible: viewModel.AxisX.Visible,
                overlappingBehavior: (!viewModel.Argument.IsOrderedDiscrete && isDiscreteArgument ? 'auto' : 'hide'),
                customizeText: function (argument) {
                    return that.dataController.getAxisXLabelText(argument);
                }
            },
            title: {
                text: viewModel.AxisX.Visible ? viewModel.AxisX.Title : null
            },
            grid: {
                visible: viewModel.AxisX.ShowGridLines
            },
            visible: viewModel.AxisX.Visible,
            valueMarginsEnabled: _chart_helper_1.chartHelper.allowArgumentAxisMargins(panes),
            tickInterval: null
        };
        configureLogarithmicOptions(options.argumentAxis, viewModel.AxisX);
        if (isDiscreteArgument) {
            options.argumentAxis.type = 'discrete';
            options.argumentAxis.argumentType = 'string';
        }
        else {
            if (options.argumentAxis.type === undefined)
                options.argumentAxis.type = 'continuous';
        }
        options.dataPrepareSettings = {
            sortingMethod: false
        };
        if (argumentAxisLabelFormat && !(viewModel.Argument && viewModel.Argument.IsContinuousDateTimeScale)) {
            options.argumentAxis.axisDivisionFactor = 70;
            switch (argumentAxisLabelFormat.format) {
                case 'monthYear':
                    options.argumentAxis.tickInterval = 'month';
                    options.argumentAxis.label.minSpacing = 10;
                    break;
                case 'dayMonthYear':
                    options.argumentAxis.tickInterval = 'day';
                    options.argumentAxis.label.minSpacing = 10;
                    break;
                case 'quarterYear':
                    options.argumentAxis.tickInterval = 'quarter';
                    options.argumentAxis.label.minSpacing = 10;
                    break;
                case 'dateHour':
                    options.argumentAxis.tickInterval = 'hour';
                    options.argumentAxis.label.minSpacing = 10;
                    break;
                case 'dateHourMinute':
                    options.argumentAxis.tickInterval = 'minute';
                    options.argumentAxis.label.minSpacing = 10;
                    break;
                case 'dateHourMinuteSecond':
                    options.argumentAxis.tickInterval = 'second';
                    options.argumentAxis.label.minSpacing = 10;
                    break;
                case 'weekYear':
                    options.argumentAxis.workWeek = [argumentAxisLabelFormat.firstDayOfWeek];
                    options.argumentAxis.tickInterval = 'week';
                    options.argumentAxis.label.minSpacing = 10;
                    break;
                default:
                    options.argumentAxis.tickInterval = null;
                    break;
            }
        }
        if (viewModel.Legend) {
            var legendParams = viewModel.Legend.IsInsideDiagram ?
                _chart_helper_1.chartHelper.convertLegendInsidePosition(viewModel.Legend.InsidePosition) :
                _chart_helper_1.chartHelper.convertLegendOutsidePosition(viewModel.Legend.OutsidePosition);
            legendParams.border = {
                visible: viewModel.Legend.IsInsideDiagram
            };
            options.legend = __assign({}, legendParams, { position: viewModel.Legend.IsInsideDiagram ? 'inside' : 'outside', visible: viewModel.Legend.Visible, itemTextPosition: 'right', customizeText: function (args) { return _this.dataController.getLegendSeriesDisplayName(args.seriesName); } });
            if (viewModel.Legend.IsInsideDiagram)
                options.legend.margin = 10;
        }
        return _utils_1.deepExtend(dataSourceAndSeries, options);
    };
    chartItem.prototype._getCommonOptions = function () {
        var that = this, animation = that._getAnimationOptions(), options = {
            sortSeriesPointsByAxis: true,
            redrawOnResize: false,
            pointSelectionMode: 'multiple',
            seriesSelectionMode: 'multiple',
            palette: _render_helper_1.RenderHelper.getDefaultPalette(),
            encodeHtml: that._isEncodeHtml(),
            onIncidentOccurred: function (e) {
                if (e['target'].id === 'W2002' && (e['target'].args.indexOf('legendFakeArgument') || (e['target'].args.indexOf('legendFakeValue'))))
                    return;
                if (e['target'].id === 'W2103' || e['target'].id === 'W2104' || e['target'].id === 'W2105' || e['target'].id === 'W2106')
                    return;
                _render_helper_1.RenderHelper.widgetIncidentOccurred(e);
            },
            adjustOnZoom: false,
            customizePoint: function () {
                var argumentTag = this.tag, seriesTag = this.series.tag, result = {};
                if (!_chart_helper_1.chartHelper.isFinancialType(this.series.type)) {
                    result.color = that.dataController.getColor(argumentTag.axisPoint, seriesTag.axisPoint, that._getMeasuresIds(seriesTag), seriesTag.colorMeasureId);
                }
                var interactionValue = that._getElementInteractionValue(this, that.options.ViewModel);
                if (interactionValue && interactionValue.axisPoint && !_utils_1.allowSelectValue(interactionValue.axisPoint.getUniquePath())) {
                    result.hoverStyle = { hatching: 'none' };
                }
                return result;
            }
        };
        options.onPointClick = function (e) {
            that._raiseItemClick(e.target);
            e.event['cancel'] = true;
        };
        options.onSeriesClick = function (e) {
            that._raiseItemClick({ series: e.target });
        };
        options.onPointHoverChanged = function (e) {
            that._raiseItemHover(e.target);
        };
        options.tooltip = {
            enabled: true,
            container: _utils_1.tooltipContainerSelector,
            customizeTooltip: function (obj) {
                var pane = obj.point.series.pane, argumentText = that.dataController.getTooltipArgumentText(obj), allSeries = that.chartViewer.getAllSeries(), resultHtml = '<table>';
                var ARGUMENT_VALUE_CLASS = 'dx-argument-value';
                var createCell = function (text, className) {
                    return '<tr><td ' + (className ? 'class="' + className + '"' : '') + '>' + text + '</td></tr>';
                };
                resultHtml += createCell(that._getHtml(argumentText), ARGUMENT_VALUE_CLASS);
                var valueCount = 0;
                var truncated = false;
                for (var i = 0; i < allSeries.length; i++) {
                    var series = allSeries[i];
                    if (series.pane === pane) {
                        var points = series.getPointsByArg(obj.argument), point = points.length > 1 ? obj.point : points[0];
                        if (point) {
                            var text = that.dataController.customizeTooltipText(series, point, series.tag.valueFormats, that._isEncodeHtml());
                            if (text) {
                                if (valueCount < chartItem._maxTooltipValues) {
                                    resultHtml += createCell(text);
                                    valueCount++;
                                }
                                else {
                                    truncated = true;
                                    break;
                                }
                            }
                        }
                    }
                }
                if (truncated) {
                    resultHtml += createCell('...');
                }
                resultHtml += '</table>';
                return {
                    html: resultHtml
                };
            },
            font: {
                size: 14
            },
            zIndex: _z_index_1.zIndex.dashboardItemTooltips
        };
        options.commonPaneSettings = {
            border: {
                visible: true
            }
        };
        options.animation = {
            enabled: animation.enabled,
            duration: animation.duration
        };
        options.margin = {
            top: 10,
            right: 22,
            bottom: 22,
            left: 22
        };
        return options;
    };
    chartItem.prototype._applySelectionUnsafe = function () {
        var that = this, viewModel = that.options.ViewModel, tuples = that.getSelectedTuples();
        if (viewModel && viewModel.SelectionEnabled && tuples.length > 0) {
            that.chartViewer.clearSelection();
            tuples.forEach(function (tuple) {
                that.selectTuple(tuple, true);
            });
        }
    };
    chartItem.prototype._getDataPoint = function (element) {
        var that = this, elementTag = element.tag, elementSeries = element.series, elementSeriesTag = elementSeries ? elementSeries.tag : undefined, seriesValues = elementSeriesTag ? _utils_1.getTagValue(elementSeriesTag) : [], argumentValues = elementTag ? _utils_1.getTagValue(elementTag) : [], seriesIndex = elementSeries ? elementSeries.index : undefined;
        return {
            getValues: function (name) {
                switch (name) {
                    case _item_data_axis_names_1.itemDataAxisNames.chartArgumentAxis:
                        return argumentValues;
                    case _item_data_axis_names_1.itemDataAxisNames.chartSeriesAxis:
                        return seriesValues;
                    default:
                        return null;
                }
            },
            getDeltaIds: function () {
                return [];
            },
            getMeasureIds: function () {
                return that._getMeasuresIds(elementSeriesTag);
            }
        };
    };
    chartItem.prototype._getMeasuresIds = function (elementSeriesTag) {
        return elementSeriesTag ? elementSeriesTag.dataMembers : [];
    };
    chartItem.prototype._isMultiDataSupported = function () {
        return true;
    };
    chartItem.prototype._getElementInteractionValue = function (element, viewModel) {
        return (viewModel.SelectionEnabled && viewModel.SelectionMode === _chart_helper_1.chartHelper.SelectionMode.Series) ? element.series.tag : element.tag;
    };
    chartItem.prototype._isAxisInPercentFormat = function (pane, isSecondaryAxis) {
        var seriesTemplate;
        for (var i = 0; i < pane.SeriesTemplates.length; i++) {
            seriesTemplate = pane.SeriesTemplates[i];
            if (isSecondaryAxis == seriesTemplate.PlotOnSecondaryAxis && !seriesTemplate.OnlyPercentValues && !this._isFullStackedSeriesType(seriesTemplate.SeriesType))
                return false;
        }
        return true;
    };
    chartItem.prototype._isAxisInScientificFormat = function (pane, isSecondaryAxis) {
        var seriesTemplate;
        for (var i = 0; i < pane.SeriesTemplates.length; i++) {
            seriesTemplate = pane.SeriesTemplates[i];
            if (isSecondaryAxis == seriesTemplate.PlotOnSecondaryAxis && !seriesTemplate.OnlyScientificValues)
                return false;
        }
        return true;
    };
    chartItem.prototype._isFullStackedSeriesType = function (seriesType) {
        switch (seriesType) {
            case 'FullStackedArea':
            case 'FullStackedBar':
            case 'FullStackedLine':
            case 'FullStackedSplineArea':
                return true;
            default:
                return false;
        }
    };
    chartItem.prototype._convertHoverMode = function (selectionMode) {
        switch (selectionMode) {
            case _chart_helper_1.chartHelper.SelectionMode.Argument:
                return 'allArgumentPoints';
            case _chart_helper_1.chartHelper.SelectionMode.Series:
                return 'allSeriesPoints';
            case _chart_helper_1.chartHelper.SelectionMode.Points:
            default:
                return 'none';
        }
    };
    chartItem.prototype._convertPointHoverMode = function (selectionMode) {
        switch (selectionMode) {
            case _chart_helper_1.chartHelper.SelectionMode.Argument:
                return 'allArgumentPoints';
            case _chart_helper_1.chartHelper.SelectionMode.Series:
                return 'allSeriesPoints';
            case _chart_helper_1.chartHelper.SelectionMode.Points:
                return 'onlyPoint';
            default:
                return 'none';
        }
    };
    chartItem.prototype._resizeUnsafe = function () {
        _super.prototype._resizeUnsafe.call(this);
        if (_utils_1.isVisible(this.container)) {
            this.chartViewer.render();
        }
    };
    chartItem.prototype._getWidget = function () {
        return this.chartViewer;
    };
    chartItem._maxTooltipValues = 20;
    return chartItem;
}(_base_item_1.baseItem));
exports.chartItem = chartItem;


/***/ }),
/* 574 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var _utils_1 = __webpack_require__(3);
var _z_index_1 = __webpack_require__(57);
var _consts_1 = __webpack_require__(343);
var _map_item_1 = __webpack_require__(346);
var choroplethMapItem = (function (_super) {
    __extends(choroplethMapItem, _super);
    function choroplethMapItem(container, options) {
        return _super.call(this, container, options) || this;
    }
    choroplethMapItem.prototype.selectTuple = function (tuple, state) {
        var that = this;
        that.mapViewer.getLayerByName('area').getElements().forEach(function (item) {
            if (item.attribute('selectionName') == tuple[0].Value)
                item.selected(state);
        });
    };
    choroplethMapItem.prototype._setSelectionUnsafe = function (values) {
        _super.prototype._setSelectionUnsafe.call(this, values);
        var that = this;
        this.clearSelection();
        if (values && values.length) {
            that.mapViewer.getLayerByName('area').getElements().forEach(function (item) {
                values.forEach(function (value) {
                    if (item.attribute('selectionName') == value)
                        item.selected(true);
                });
            });
        }
    };
    choroplethMapItem.prototype.updateContentStateUnsafe = function () {
        this.mapViewer.option('layers[0].hoverEnabled', this._getCustomHoverEnabled());
    };
    choroplethMapItem.prototype.renderContentUnsafe = function (element, changeExisting, afterRenderCallback) {
        var options = _utils_1.deepExtend(this._getMapViewerOptions(), this._getChoroplethMapViewerOptions());
        this._renderContentInternal(element, changeExisting, options);
        return false;
    };
    choroplethMapItem.prototype._getChoroplethMapViewerOptions = function () {
        var that = this, viewModel = that.options.ViewModel, mapItems = viewModel.MapItems, mapDataSource = that._getMapDataSource(mapItems, viewModel.ShapeTitleAttributeName), choroplethColorizer = viewModel.ChoroplethColorizer, tooltipAttributeName = viewModel.ToolTipAttributeName, tooltipMeasures = viewModel.TooltipMeasures, colors, rangeStops, legend, i;
        for (i = 0; i < mapItems.length; i++) {
            var attributeText = that._findAttributeValueByName(mapItems[i].Attributes, tooltipAttributeName);
            mapDataSource[i].attributes.tooltip = '<b>' + that._getHtml(attributeText) + '</b>';
        }
        if (choroplethColorizer && that.dataController.hasRecords()) {
            if (choroplethColorizer.ValueName) {
                that._fillValueMapDataSourceAttrs(mapDataSource, choroplethColorizer, tooltipMeasures, mapItems);
                rangeStops = that._getRangeStops(choroplethColorizer);
                colors = that._getColors(choroplethColorizer.Colorizer.Colors);
                if (!colors) {
                    colors = rangeStops.length > 2 ? ['#5F8195', '#B55951'] : ['#5F8195'];
                }
                legend = that._getColorLegend(viewModel.Legend, that.dataController.getMeasureDescriptorById(choroplethColorizer.ValueId));
            }
            if (choroplethColorizer.DeltaValueName) {
                that._fillDeltaMapDataSourceAttrs(mapDataSource, choroplethColorizer, tooltipMeasures, mapItems);
                colors = ['rgb(229, 82, 83)', 'rgb(224, 194, 58)', 'rgb(154, 181, 126)'];
                rangeStops = [0, 1, 2, 3];
            }
        }
        return {
            layers: that._configureGeometryLayers(mapDataSource, that._getArea(viewModel, colors, rangeStops)),
            onClick: function (e) {
                if (e.target && e.target.layer.name === 'area' && e.target.attribute('selectionName')) {
                    that._raiseItemClick(e.target);
                }
            },
            legends: [legend],
            tooltip: {
                enabled: true,
                zIndex: _z_index_1.zIndex.dashboardItemTooltips,
                container: _utils_1.tooltipContainerSelector,
                customizeTooltip: function (arg) {
                    if (arg.layer.name === 'area')
                        return {
                            html: arg.attribute('tooltip')
                        };
                }
            }
        };
    };
    choroplethMapItem.prototype._getColorLegend = function (legendViewModel, measureDescriptor) {
        var legend = this._getLegend(legendViewModel);
        if (legend) {
            legend.source = {
                layer: 'area',
                grouping: 'color'
            };
            legend.customizeText = function (arg) {
                return measureDescriptor.format(arg.start);
            };
        }
        return legend;
    };
    choroplethMapItem.prototype._fillMeasureToolTip = function (mapDataSourceItem, attribute, tooltipMeasures) {
        var displayText, tooltipViewModel, i;
        if (tooltipMeasures) {
            for (i = 0; i < tooltipMeasures.length; i++) {
                tooltipViewModel = tooltipMeasures[i];
                displayText = this.dataController.getDisplayText(attribute, tooltipViewModel.DataId);
                if (displayText != null) {
                    mapDataSourceItem.attributes.tooltip += '<br>' + this._getToolTip(tooltipViewModel.Caption, displayText);
                }
            }
        }
    };
    choroplethMapItem.prototype._fillValueMapDataSourceAttrs = function (mapDataSource, choroplethColorizer, tooltipMeasures, mapItems) {
        var attributeName = choroplethColorizer.AttributeName, attribute, selectionName, displayText;
        for (var i = 0; i < mapItems.length; i++) {
            attribute = this._findAttributeValueByName(mapItems[i].Attributes, attributeName);
            selectionName = this.dataController.getUniqueValue(attribute);
            if (selectionName) {
                displayText = this.dataController.getDisplayText(attribute, choroplethColorizer.ValueId);
                mapDataSource[i].attributes.selectionName = selectionName;
                mapDataSource[i].attributes.selected = this._isSelected([selectionName]);
                mapDataSource[i].attributes.value = this.dataController.getValue(attribute, choroplethColorizer.ValueId);
                mapDataSource[i].attributes.tooltip += '<br>' + this._getToolTip(choroplethColorizer.ValueName, displayText);
                this._correctAttributesTitle(mapDataSource[i].attributes, displayText);
                this._fillMeasureToolTip(mapDataSource[i], attribute, tooltipMeasures);
            }
        }
    };
    choroplethMapItem.prototype._fillDeltaMapDataSourceAttrs = function (mapDataSource, choroplethColorizer, tooltipMeasures, mapItems) {
        var attributeName = choroplethColorizer.AttributeName, selectionName, attribute, toolTip, deltaValue, value, isGood, displayText, indicatorType;
        for (var i = 0; i < mapItems.length; i++) {
            attribute = this._findAttributeValueByName(mapItems[i].Attributes, attributeName);
            selectionName = this.dataController.getUniqueValue(attribute);
            if (selectionName) {
                mapDataSource[i].attributes.selectionName = selectionName;
                mapDataSource[i].attributes.selected = this._isSelected([selectionName]);
                deltaValue = this.dataController.getDeltaValue(attribute, choroplethColorizer.DeltaValueId);
                isGood = deltaValue.getIsGood().getValue();
                indicatorType = this._convertIndicatorType(deltaValue.getIndicatorType().getValue());
                mapDataSource[i].attributes.value = this._getDeltaColorValue(indicatorType, isGood);
                displayText = deltaValue.getActualValue().getDisplayText();
                toolTip = '<br>' + this._getToolTip(choroplethColorizer.ActualValueName, displayText);
                value = this._getDeltaValue(deltaValue, choroplethColorizer.DeltaValueType);
                if (value) {
                    displayText = value.getDisplayText();
                    var deltaValueName = choroplethColorizer.DeltaValueType === 'TargetValue' ? choroplethColorizer.TargetValueName : choroplethColorizer.DeltaValueName;
                    toolTip += '<br>' + this._getToolTip(deltaValueName, displayText);
                }
                mapDataSource[i].attributes.tooltip += toolTip;
                this._correctAttributesTitle(mapDataSource[i].attributes, displayText);
                this._fillMeasureToolTip(mapDataSource[i], attribute, tooltipMeasures);
            }
        }
    };
    choroplethMapItem.prototype._correctAttributesTitle = function (attributes, displayText) {
        var viewModel = this.options.ViewModel;
        if (viewModel.IncludeSummaryValueToShapeTitle) {
            if (attributes.title)
                attributes.title += '\r\n' + displayText;
            else
                attributes.title = displayText;
        }
    };
    choroplethMapItem.prototype._getDeltaValue = function (deltaValue, deltaValueType) {
        switch (deltaValueType) {
            case 'AbsoluteVariation':
                return deltaValue.getAbsoluteVariation();
            case 'PercentVariation':
                return deltaValue.getPercentVariation();
            case 'PercentOfTarget':
                return deltaValue.getPercentOfTarget();
            case 'TargetValue':
                return deltaValue.getTargetValue();
            case 'ActualValue':
            default:
                return null;
        }
    };
    choroplethMapItem.prototype._findAttributeValueByName = function (attributes, attributeName) {
        for (var i = 0; i < attributes.length; i++) {
            if (attributes[i].Name === attributeName) {
                return attributes[i].Value;
            }
        }
    };
    choroplethMapItem.prototype._getRangeStops = function (choroplethColorizer) {
        var minMax = this.dataController.getMinMax(choroplethColorizer.ValueId);
        return this._updateRangeStops(choroplethColorizer.Colorizer.RangeStops, minMax.min, minMax.max, choroplethColorizer.Colorizer.UsePercentRangeStops);
    };
    choroplethMapItem.prototype._convertIndicatorType = function (type) {
        var indicatorTypes = ['none', 'up', 'down', 'warning'];
        return indicatorTypes[type];
    };
    choroplethMapItem.prototype._getDeltaColorValue = function (indicatorType, isGood) {
        switch (indicatorType) {
            case _consts_1.indicatorType.up:
            case _consts_1.indicatorType.down:
                return isGood ? 2.5 : 0.5;
            case _consts_1.indicatorType.warning:
                return 1.5;
            default:
                return -1;
        }
    };
    choroplethMapItem.prototype._getArea = function (viewModel, colors, rangeStops) {
        var that = this, selectionDisabled = that._selectionMode() === 'none';
        return __assign({}, that._getLabelSettings(viewModel), { colorGroupingField: 'value', colorGroups: rangeStops, palette: colors, customize: function (items) {
                items.forEach(function (item) {
                    item.selected(item.attribute('selected'));
                    if (selectionDisabled || item.attribute('value') === undefined) {
                        item.applySettings({
                            hoveredBorderColor: null,
                            hoveredClass: null,
                            hoverEnabled: false
                        });
                    }
                });
            }, selectionMode: 'multiple' });
    };
    choroplethMapItem.prototype._getDataPoint = function (element) {
        var that = this;
        return {
            getValues: function () {
                return that._getElementInteractionValue(element, that.options.ViewModel);
            },
            getMeasureIds: function () {
                return [that.options.ViewModel.ChoroplethColorizer.ValueId];
            },
            getDeltaIds: function () {
                return [];
            }
        };
    };
    choroplethMapItem.prototype._getElementInteractionValue = function (element, viewModel) {
        return !!this.options.ViewModel.ChoroplethColorizer ? [element.attribute('selectionName')] : [];
    };
    return choroplethMapItem;
}(_map_item_1.mapItem));
exports.choroplethMapItem = choroplethMapItem;


/***/ }),
/* 575 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _localization_ids_1 = __webpack_require__(21);
var _localizer_1 = __webpack_require__(16);
var _base_item_1 = __webpack_require__(29);
var customFakeItem = (function (_super) {
    __extends(customFakeItem, _super);
    function customFakeItem(container, options) {
        return _super.call(this, container, options) || this;
    }
    customFakeItem.prototype.renderContentUnsafe = function (element, changeExisting, afterRenderCallback) {
        var div = document.createElement('div');
        div.classList.add('dx-dashboard-custom-item-notsupported-message');
        div.innerText = _localizer_1.localizer.getString(_localization_ids_1.localizationId.MessageCustomItemIsNotSupported);
        element.appendChild(div);
        return false;
    };
    customFakeItem.prototype._ensureToolbarIsRendered = function () {
        return null;
    };
    return customFakeItem;
}(_base_item_1.baseItem));
exports.customFakeItem = customFakeItem;


/***/ }),
/* 576 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _formatter_1 = __webpack_require__(25);
var _utils_1 = __webpack_require__(3);
var _kpi_item_1 = __webpack_require__(348);
var gaugesItem = (function (_super) {
    __extends(gaugesItem, _super);
    function gaugesItem(container, options) {
        return _super.call(this, container, options) || this;
    }
    gaugesItem.prototype._getSpecificWidgetViewerOptions = function () {
        var that = this, viewModel = that.options.ViewModel, specificOptions = {
            itemOptions: {
                ignoreProportions: true
            }
        }, baseOptions = _super.prototype._getSpecificWidgetViewerOptions.call(this);
        if (viewModel) {
            switch (viewModel.ViewType) {
                case _utils_1.gaugeViewType.CircularHalf:
                    specificOptions.itemOptions.proportions = 0.85;
                    specificOptions.itemOptions.minWidth = 155;
                    break;
                case _utils_1.gaugeViewType.CircularQuarterLeft:
                case _utils_1.gaugeViewType.CircularQuarterRight:
                    specificOptions.itemOptions.proportions = 1.25;
                    specificOptions.itemOptions.minWidth = 150;
                    break;
                case _utils_1.gaugeViewType.CircularThreeFourth:
                case _utils_1.gaugeViewType.CircularFull:
                    specificOptions.itemOptions.proportions = 1;
                    specificOptions.itemOptions.minWidth = 180;
                    break;
                case _utils_1.gaugeViewType.LinearVertical:
                    specificOptions.itemOptions.proportions = 1.5;
                    specificOptions.itemOptions.minWidth = 150;
                    break;
                case _utils_1.gaugeViewType.LinearHorizontal:
                    specificOptions.itemOptions.proportions = 0.5;
                    specificOptions.itemOptions.minWidth = 200;
                    break;
            }
        }
        return _utils_1.deepExtend(specificOptions, baseOptions);
    };
    gaugesItem.prototype._supportAnimation = function () {
        return true;
    };
    gaugesItem.prototype._getWidgetType = function () {
        var viewModel = this.options.ViewModel;
        if (viewModel) {
            switch (viewModel.ViewType) {
                case _utils_1.gaugeViewType.LinearVertical:
                case _utils_1.gaugeViewType.LinearHorizontal:
                    return 'lineargauge';
                default:
                    return 'circulargauge';
            }
        }
        return 'circulargauge';
    };
    gaugesItem.prototype._getElementsName = function () {
        return 'Gauges';
    };
    gaugesItem.prototype._showTitle = function () {
        if (this.options.ViewModel) {
            return this.options.ViewModel.ShowGaugeCaptions;
        }
        else {
            return _super.prototype._showTitle.call(this);
        }
    };
    gaugesItem.prototype._getWidget = function () {
        if (this.widgetsViewer) {
            var gaugeList = [];
            this.widgetsViewer.itemsList.forEach(function (item) {
                gaugeList.push(item._widget);
            });
            return gaugeList;
        }
        else {
            return undefined;
        }
    };
    gaugesItem.prototype._setSourceItemProperties = function (sourceItem, gaugeModel, props) {
        _super.prototype._setSourceItemProperties.call(this, sourceItem, gaugeModel, props);
        var captions = props.getCaptions(), range = props.getGaugeRange(), targetValue;
        this._setVisualProperties(sourceItem, gaugeModel, range);
        if (gaugeModel.DataItemType === _utils_1.KpiValueMode.Measure) {
            sourceItem.value = props.getMeasureValue();
            sourceItem.indicator = {
                text: {
                    value: props.getMeasureDisplayText(),
                    useDefaultColor: gaugeModel.IgnoreDeltaColor
                }
            };
        }
        else {
            sourceItem.value = props.getActualValue();
            targetValue = props.getTargetValue();
            if (targetValue)
                sourceItem.subvalues = [targetValue];
            sourceItem.indicator = {
                type: props.getIndicatorType(),
                hasPositiveMeaning: props.getIsGood(),
                text: {
                    value: props.getMainValueText(),
                    useDefaultColor: gaugeModel.IgnoreDeltaColor
                }
            };
        }
        if (this._showTitle() && captions.length > 0) {
            sourceItem.title = {
                text: captions.join(' - '),
                font: { size: 16 },
                subtitle: { font: { size: 14 } },
                margin: { top: 4, left: 0, right: 0, bottom: 0 }
            };
        }
    };
    gaugesItem.prototype._setVisualProperties = function (sourceItem, gaugeModel, range) {
        var that = this, viewModel = that.options.ViewModel, minRangeValue = range.min, maxRangeValue = range.max, width = maxRangeValue - minRangeValue, intervalCount = range.majorTickCount - 1, tickInterval, scaleFormat = gaugeModel.ScaleFormat != null ? _formatter_1.convertToFormat({ NumericFormat: gaugeModel.ScaleFormat }) : _formatter_1.defaultNumericFormat;
        switch (viewModel.ViewType) {
            case _utils_1.gaugeViewType.CircularHalf:
                sourceItem.geometry = {
                    startAngle: 180,
                    endAngle: 0
                };
                break;
            case _utils_1.gaugeViewType.CircularQuarterLeft:
                sourceItem.geometry = {
                    startAngle: 180,
                    endAngle: 90
                };
                break;
            case _utils_1.gaugeViewType.CircularQuarterRight:
                sourceItem.geometry = {
                    startAngle: 90,
                    endAngle: 0
                };
                break;
            case _utils_1.gaugeViewType.CircularThreeFourth:
                sourceItem.geometry = {
                    startAngle: 220,
                    endAngle: 320
                };
                break;
            case _utils_1.gaugeViewType.CircularFull:
                sourceItem.geometry = {
                    startAngle: 240,
                    endAngle: 300
                };
                break;
            case _utils_1.gaugeViewType.LinearVertical:
                sourceItem.geometry = {
                    orientation: 'vertical'
                };
                break;
            case _utils_1.gaugeViewType.LinearHorizontal:
                sourceItem.geometry = {
                    orientation: 'horizontal'
                };
                break;
        }
        sourceItem.valueIndicator = {
            type: sourceItem.geometry.orientation ? 'rangeBar' : 'twoColorNeedle'
        };
        sourceItem.subvalueIndicator = {
            offset: sourceItem.geometry.orientation ? 8 : 0
        };
        sourceItem.scale = {
            startValue: minRangeValue,
            endValue: maxRangeValue,
            label: {
                format: scaleFormat
            }
        };
        if (width > 0) {
            tickInterval = width / intervalCount;
            sourceItem.scale.tick = {
                tickInterval: (width >= intervalCount) ? Math.round(tickInterval) : tickInterval,
                useTicksAutoArrangement: false
            };
        }
        sourceItem.animation = that._getAnimationOptions();
    };
    return gaugesItem;
}(_kpi_item_1.kpiItem));
exports.gaugesItem = gaugesItem;


/***/ }),
/* 577 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var _utils_1 = __webpack_require__(3);
var _geo_point_map_item_base_1 = __webpack_require__(153);
var geoPointMapItem = (function (_super) {
    __extends(geoPointMapItem, _super);
    function geoPointMapItem(container, options) {
        return _super.call(this, container, options) || this;
    }
    geoPointMapItem.prototype._getMarkerLayers = function () {
        return [this.mapViewer.getLayerByName('dot'), this.mapViewer.getLayerByName('bubble')];
    };
    geoPointMapItem.prototype._configureMarkerLayers = function (viewModel) {
        var markerDataSource = this._getMarkerDataSource(), dotSettings = markerDataSource.dotDataSource.length > 0 ? this._getDorMarker(viewModel, markerDataSource.dotDataSource) : null, bubbleSettings = markerDataSource.bubbleDataSource.length > 0 ? this._getBubbleMarker(viewModel, markerDataSource.bubbleDataSource) : null;
        return [
            __assign({ name: 'dot', type: 'marker', elementType: 'dot', dataSource: markerDataSource.dotDataSource }, dotSettings),
            __assign({ name: 'bubble', type: 'marker', elementType: 'bubble', dataField: 'value', dataSource: markerDataSource.bubbleDataSource }, bubbleSettings)
        ];
    };
    geoPointMapItem.prototype._getMarkerDataSource = function () {
        var viewModel = this.options.ViewModel, dotDataSource = [], bubbleDataSource = [], count = this.dataController ? this.dataController.getCount() : 0, tooltip, geoPoint, point;
        for (var i = 0; i < count; i++) {
            point = this.dataController.getPoint(i);
            tooltip = this._getToolTip(viewModel.ValueName, point.text);
            geoPoint = {
                coordinates: [point.lon, point.lat],
                attributes: {
                    latSelection: point.latSel,
                    lonSelection: point.lonSel,
                    selected: this._isSelected([point.latSel, point.lonSel]),
                    dimensionsTooltip: this._getDimensionsTooltipHtml(point.tooltipDimensions),
                    measuresTooltip: this._getMeasuresTooltipHtml(point.tooltipMeasures)
                }
            };
            if (point.pointsCount && point.pointsCount > 1) {
                geoPoint.attributes.value = this._getClusterBubbleSizeIndex(point.pointsCount);
                geoPoint.attributes.tooltip = this._pointsCountTooltip(point.pointsCount) + '<br>' + tooltip;
                geoPoint.attributes.color = this._getClusterBubbleColor(point.pointsCount);
                bubbleDataSource.push(geoPoint);
            }
            else {
                geoPoint.attributes.text = point.text;
                geoPoint.attributes.tooltip = tooltip;
                dotDataSource.push(geoPoint);
            }
        }
        return {
            dotDataSource: dotDataSource,
            bubbleDataSource: bubbleDataSource
        };
    };
    geoPointMapItem.prototype._getDorMarker = function (viewModel, markerDataSource) {
        return __assign({}, this._getMarker(viewModel, markerDataSource), { label: {
                dataField: 'text'
            } });
    };
    geoPointMapItem.prototype._getBubbleMarker = function (viewModel, markerDataSource) {
        var res = this._getMinMaxValues(markerDataSource);
        return _utils_1.deepExtend(this._getMarker(viewModel, markerDataSource), {
            minSize: 30 + res.min * 10,
            maxSize: 30 + res.max * 10
        });
    };
    geoPointMapItem.prototype._getColorLegend = function (viewModel) {
    };
    geoPointMapItem.prototype._getWeightLegend = function (viewModel) {
    };
    geoPointMapItem.prototype._getClusterBubbleColor = function (value) {
        if (value < 10) {
            return 'rgb(27, 73, 165)';
        }
        if (value < 100) {
            return 'rgb(63, 136, 48)';
        }
        if (value < 1000) {
            return 'rgb(228, 124, 2)';
        }
        return 'rgb(214, 5, 5)';
    };
    geoPointMapItem.prototype._getClusterBubbleSizeIndex = function (value) {
        for (var i = 0;; i++) {
            if (value < Math.pow(10, i)) {
                return i - 1;
            }
        }
    };
    geoPointMapItem.prototype._getDataPointMeasureIds = function () {
        var viewModel = this.options.ViewModel, measureIds = [];
        measureIds.push(viewModel.ValueId);
        return measureIds;
    };
    return geoPointMapItem;
}(_geo_point_map_item_base_1.geoPointMapItemBase));
exports.geoPointMapItem = geoPointMapItem;


/***/ }),
/* 578 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var string_1 = __webpack_require__(30);
var $ = __webpack_require__(2);
var _chart_helper_1 = __webpack_require__(95);
var _selection_helper_1 = __webpack_require__(243);
var _utils_1 = __webpack_require__(3);
var _z_index_1 = __webpack_require__(57);
var _item_data_axis_names_1 = __webpack_require__(34);
var _render_helper_1 = __webpack_require__(28);
var _widget_viewer_item_1 = __webpack_require__(349);
var pieSizeGroup = 0;
var pieItem = (function (_super) {
    __extends(pieItem, _super);
    function pieItem(container, options) {
        var _this = _super.call(this, container, options) || this;
        _this.itemElementCustomColor = $.Callbacks();
        _this.sizeGroupId = undefined;
        _this.sizeGroupId = ++pieSizeGroup;
        _this._createPieMouseEventController();
        return _this;
    }
    pieItem.prototype._initializeData = function (newOptions) {
        _super.prototype._initializeData.call(this, newOptions);
        if (this.dataController) {
            this.dataController.elementCustomColor = $.proxy(this._elementCustomColor, this);
        }
    };
    pieItem.prototype._clearSelectionUnsafe = function () {
        _super.prototype._clearSelectionUnsafe.call(this);
        var that = this, viewModel = that.options.ViewModel, piesViewer = that.widgetsViewer;
        if (viewModel && viewModel.SelectionEnabled && viewModel.SelectionMode !== _chart_helper_1.chartHelper.SelectionMode.Series) {
            $.each(piesViewer.itemsList, function () {
                if (this._widget) {
                    this._widget.clearSelection();
                }
            });
        }
    };
    pieItem.prototype.updateContentStateUnsafe = function () {
        var that = this;
        if (that._getCustomHoverEnabled()) {
            var argumentHoverMode = 'none', seriesHoverEnabled = false, targetAxes = this._getTargetAxes();
            if (targetAxes.length == 1) {
                if (targetAxes[0] == _item_data_axis_names_1.itemDataAxisNames.chartArgumentAxis)
                    argumentHoverMode = 'allArgumentPoints';
                else
                    seriesHoverEnabled = true;
            }
            else {
                if (targetAxes.length == 2) {
                    argumentHoverMode = 'point';
                    seriesHoverEnabled = true;
                }
            }
            $.each(this.widgetsViewer.itemsList, function (index, viewer) {
                viewer._widget.option('commonSeriesSettings.hoverMode', argumentHoverMode);
                viewer._hoverEnabled = seriesHoverEnabled;
            });
        }
    };
    pieItem.prototype.selectTupleUnsafe = function (tuple, state) {
        var that = this, isPointSelection = that.options.ViewModel.SelectionMode === _chart_helper_1.chartHelper.SelectionMode.Points, seriesValue = _utils_1.getAxisPointValue(tuple, _item_data_axis_names_1.itemDataAxisNames.chartSeriesAxis), argumentValue = _utils_1.getAxisPointValue(tuple, _item_data_axis_names_1.itemDataAxisNames.chartArgumentAxis);
        $.each(that.widgetsViewer.itemsList, function (index, viewer) {
            if (seriesValue) {
                if (_selection_helper_1.selectionHelper._checkWidgetCorrespondsToValue(viewer, seriesValue)) {
                    if (argumentValue)
                        _selection_helper_1.selectionHelper.setSelectedArguments(viewer._widget, [argumentValue], state);
                    else if (isPointSelection)
                        _selection_helper_1.selectionHelper.selectWholePie(viewer._widget, state);
                    else
                        _selection_helper_1.selectionHelper.setSelectedWidgetViewer(viewer, [seriesValue], state);
                }
            }
            else if (argumentValue) {
                _selection_helper_1.selectionHelper.setSelectedArguments(viewer._widget, [argumentValue], state);
            }
        });
    };
    pieItem.prototype._setSelectionUnsafe = function (values) {
        _super.prototype._setSelectionUnsafe.call(this, values);
        this.clearSelection();
        this._applySelection();
    };
    pieItem.prototype._elementCustomColor = function (eventArgs) {
        this.itemElementCustomColor.fire(this.getName(), eventArgs);
    };
    pieItem.prototype._createPieMouseEventController = function () {
        var that = this;
        that.pieMouseEventController = new pieMouseEventController();
        that.pieMouseEventController.ready.add(function () {
            var data = { pie: that.pieMouseEventController.pieData, slice: that.pieMouseEventController.sliceData };
            that._raiseItemClick(data);
        });
    };
    pieItem.prototype._isHoverEnabled = function () {
        return _super.prototype._isHoverEnabled.call(this) && this._isItemSelectionEnabled();
    };
    pieItem.prototype._isItemSelectionEnabled = function () {
        var viewModel = this.options.ViewModel;
        return viewModel && viewModel.SelectionEnabled && (viewModel.SelectionMode === _chart_helper_1.chartHelper.SelectionMode.Series);
    };
    pieItem.prototype._isLabelsVisible = function () {
        var viewModel = this.options.ViewModel;
        return viewModel && (viewModel.LabelContentType !== 'None');
    };
    pieItem.prototype._supportAnimation = function () {
        return true;
    };
    pieItem.prototype._getSpecificWidgetViewerOptions = function () {
        var that = this, specificOptions = that._isLabelsVisible() ? {
            itemOptions: {
                minWidth: 200,
                proportions: 0.75,
                ignoreProportions: true
            }
        } : {
            itemOptions: {
                minWidth: 100,
                proportions: 1,
                ignoreProportions: true
            }
        };
        return _utils_1.deepExtend(specificOptions, _super.prototype._getSpecificWidgetViewerOptions.call(this));
    };
    pieItem.prototype._getWidgetType = function () {
        return 'pieChart';
    };
    pieItem.prototype._getDataSource = function () {
        if (!this.options.ViewModel) {
            return {};
        }
        var that = this, viewModel = that.options.ViewModel, isPointSelectionEnabled = that._getPointSelectionEnabled(), selectionMode = that._selectionMode(), seriesAxisPoints = that.dataController.getSeriesAxisPoints(), selectedValuesList = that._getSelectedValues(), dataSource = [], currentSeriesPath, seriesPropsValues;
        $.each(seriesAxisPoints, function (_, seriesAxisPoint) {
            currentSeriesPath = seriesAxisPoint.getUniquePath();
            $.each(that.dataController.getValueDataMembers(), function (valueIndex, valueDataMember) {
                var dataSourceItem = {
                    animation: that._getAnimationOptions(),
                    sizeGroup: that.sizeGroupId,
                    legend: {
                        visible: false
                    },
                    resolveLabelOverlapping: 'shift',
                    onIncidentOccurred: _render_helper_1.RenderHelper.widgetIncidentOccurred,
                    onPointClick: that._getSelectPointsHandler(),
                    onPointHoverChanged: that._getHoverPointsHandler(),
                    palette: _render_helper_1.RenderHelper.getDefaultPalette(),
                    pointSelectionMode: 'multiple',
                    commonSeriesSettings: {
                        hoverMode: isPointSelectionEnabled && (selectionMode !== 'none') ? 'allArgumentPoints' : 'none'
                    },
                    customizePoint: function () {
                        var result = { color: that.dataController.getColor(this.tag.axisPoint, seriesAxisPoint, that._getMeasuresIds(this.tag), this.tag.colorMeasureId) };
                        var interactionValue = that._getElementInteractionValue(this, that.options.ViewModel);
                        if (interactionValue && interactionValue.axisPoint && !_utils_1.allowSelectValue(interactionValue.axisPoint.getUniquePath())) {
                            result.hoverStyle = { hatching: 'none' };
                        }
                        return result;
                    }
                };
                dataSourceItem.tag = { axisPoint: seriesAxisPoint };
                _utils_1.extend(dataSourceItem, that._configureHover(currentSeriesPath));
                if (selectedValuesList && that._isItemSelectionEnabled()) {
                    $.each(selectedValuesList, function (__, selectedValue) {
                        if (_utils_1.checkValuesAreEqual(currentSeriesPath, selectedValue))
                            dataSourceItem.isSelected = true;
                    });
                }
                if (viewModel.ShowPieCaptions) {
                    dataSourceItem.title = {
                        text: that.dataController.getValueDisplayNames(seriesAxisPoint, valueIndex),
                        font: {
                            size: 18
                        }
                    };
                }
                seriesPropsValues = {
                    type: (viewModel.PieType === 'Donut') ? 'doughnut' : 'pie',
                    argumentField: 'x',
                    valueField: 'y',
                    label: {
                        visible: that._isLabelsVisible(),
                        position: viewModel.LabelPosition == 'Inside' ? 'inside' : 'columns'
                    },
                    point: {
                        visible: true
                    },
                    segmentsDirection: 'anticlockwise',
                    paintNullPoints: true
                };
                if (seriesPropsValues.label.visible) {
                    seriesPropsValues.label.connector = {
                        visible: true,
                        width: 1
                    };
                    seriesPropsValues.label.customizeText = that._getFormatLabelHandler(viewModel.LabelContentType);
                }
                dataSourceItem.series = [seriesPropsValues];
                dataSourceItem.dataSource = that.dataController.createDataSource(seriesAxisPoint, valueDataMember);
                dataSourceItem.tooltip = {
                    enabled: (viewModel.TooltipContentType !== 'None')
                };
                if (dataSourceItem.tooltip.enabled) {
                    dataSourceItem.tooltip.container = _utils_1.tooltipContainerSelector;
                    dataSourceItem.tooltip.customizeTooltip = function (label) {
                        return { text: that._getFormatLabelHandler(viewModel.TooltipContentType)(label) };
                    };
                    dataSourceItem.tooltip.font = {
                        size: 14
                    };
                    dataSourceItem.tooltip.zIndex = _z_index_1.zIndex.dashboardItemTooltips;
                }
                dataSource.push(dataSourceItem);
            });
        });
        return (dataSource.length == 1 && dataSource[0].dataSource.length == 0) ? [] : dataSource;
    };
    pieItem.prototype._getPointSelectionEnabled = function () {
        var viewModel = this.options.ViewModel;
        return viewModel.SelectionEnabled && (viewModel.SelectionMode === _chart_helper_1.chartHelper.SelectionMode.Argument || viewModel.SelectionMode === _chart_helper_1.chartHelper.SelectionMode.Points);
    };
    pieItem.prototype._getFormatLabelHandler = function (valueType) {
        var that = this;
        return function (label) {
            var pointTexts = that.dataController.getPointDisplayTexts(label.point.tag, label.value, label.percent), tooltipPattern = that._getTooltipPattern(valueType);
            switch (valueType) {
                case 'Argument':
                    return pointTexts.argumentText;
                case 'Percent':
                    return pointTexts.percentText;
                case 'Value':
                    return pointTexts.valueText;
                case 'ValueAndPercent':
                    return string_1.format(tooltipPattern, pointTexts.valueText, pointTexts.percentText);
                case 'ArgumentAndPercent':
                    return string_1.format(tooltipPattern, pointTexts.argumentText, pointTexts.percentText);
                case 'ArgumentAndValue':
                    return string_1.format(tooltipPattern, pointTexts.argumentText, pointTexts.valueText);
                case 'ArgumentValueAndPercent':
                    return string_1.format(tooltipPattern, pointTexts.argumentText, pointTexts.valueText, pointTexts.percentText);
                default:
                    return '';
            }
        };
    };
    pieItem.prototype._getTooltipPattern = function (valueType) {
        switch (valueType) {
            case 'ValueAndPercent':
                return '{0} ({1})';
            case 'ArgumentAndPercent':
            case 'ArgumentAndValue':
                return '{0}: {1}';
            case 'ArgumentValueAndPercent':
                return '{0}: {1} ({2})';
            default:
                return '';
        }
    };
    pieItem.prototype._getElementInteractionValue = function (element, viewModel) {
        if (this._isItemSelectionEnabled())
            return _super.prototype._getElementInteractionValue.call(this, element, viewModel);
        return element.tag;
    };
    pieItem.prototype._getOnClickHandler = function () {
        var that = this;
        return function (e) {
            that._pieMouseEventHandler(e.item);
        };
    };
    pieItem.prototype._getSelectPointsHandler = function () {
        var that = this;
        return function (e) {
            var viewModel = that.options.ViewModel, selectionMode = that._selectionMode(), isPointSelectionEnalbed = viewModel.SelectionEnabled && (viewModel.SelectionMode === _chart_helper_1.chartHelper.SelectionMode.Argument) && selectionMode !== 'none';
            that._sliceMouseEventHandler(e.target);
        };
    };
    pieItem.prototype._getOnHoverHandler = function () {
        var that = this;
        return function (e) {
            that.pieMouseEventController.pieData = e.item;
            that._raiseItemHover({ pie: e.item }, e.state);
        };
    };
    pieItem.prototype._getHoverPointsHandler = function () {
        var that = this;
        return function (e) {
            that._raiseItemHover({ pie: that.pieMouseEventController.pieData, slice: e.target });
        };
    };
    pieItem.prototype._pieMouseEventHandler = function (element) {
        this.pieMouseEventController.setPieData(element);
    };
    pieItem.prototype._sliceMouseEventHandler = function (element) {
        this.pieMouseEventController.setSliceData(element);
    };
    pieItem.prototype._getDataPoint = function (element) {
        var that = this, viewModel = that.options.ViewModel, slice = element.slice, sliceTag = slice ? slice.tag : undefined, pie = element.pie, pieTag = pie ? pie.tag : undefined, argumentsValues = sliceTag ? _utils_1.getTagValue(sliceTag) : [], titleValues = pieTag ? _utils_1.getTagValue(pieTag) : [], argumentIndex = (slice && !sliceTag) ? slice.index : undefined, elementIndex = (pie && !pieTag) ? pie.index : undefined, measureIndex = argumentIndex ? argumentIndex : elementIndex ? elementIndex : 0;
        return {
            getValues: function (name) {
                switch (name) {
                    case _item_data_axis_names_1.itemDataAxisNames.chartArgumentAxis:
                        return argumentsValues;
                    case _item_data_axis_names_1.itemDataAxisNames.chartSeriesAxis:
                        return titleValues;
                    default:
                        return null;
                }
            },
            getDeltaIds: function () {
                return [];
            },
            getMeasureIds: function () {
                return slice ? that._getMeasuresIds(slice.tag) : [];
            }
        };
    };
    pieItem.prototype._getMeasuresIds = function (sliceTag) {
        return sliceTag ? sliceTag.dataMembers : [];
    };
    pieItem.prototype._isMultiDataSupported = function () {
        return true;
    };
    pieItem.prototype._getWidget = function () {
        if (this.widgetsViewer) {
            var pieWidgetViewers = this.widgetsViewer.itemsList, piesList = [];
            $.each(pieWidgetViewers, function () {
                piesList.push(this._widget);
            });
            return piesList;
        }
        else {
            return undefined;
        }
    };
    pieItem.prototype._applySelectionUnsafe = function () {
        var that = this;
        that.getSelectedTuples().forEach(function (tuple) { return that.selectTuple(tuple, true); });
    };
    return pieItem;
}(_widget_viewer_item_1.widgetViewerItem));
exports.pieItem = pieItem;
var pieMouseEventController = (function () {
    function pieMouseEventController() {
        this.shouldRaise = false;
        this.ready = $.Callbacks();
        this.timer = 0;
    }
    pieMouseEventController.prototype.setPieData = function (data) {
        this.pieData = data;
        if (this.ready) {
            this.ready.fire();
        }
        this.pieData = undefined;
        this.sliceData = undefined;
    };
    pieMouseEventController.prototype.setSliceData = function (data) {
        this.sliceData = data;
    };
    return pieMouseEventController;
}());
exports.pieMouseEventController = pieMouseEventController;


/***/ }),
/* 579 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var Color = __webpack_require__(96);
var string_1 = __webpack_require__(30);
var $ = __webpack_require__(2);
var _geo_point_map_item_base_1 = __webpack_require__(153);
var pieMapItem = (function (_super) {
    __extends(pieMapItem, _super);
    function pieMapItem(container, options) {
        var _this = _super.call(this, container, options) || this;
        _this.itemElementCustomColor = $.Callbacks();
        _this._pieUniqueArguments = undefined;
        _this._pieArgumentDisplayTexts = undefined;
        _this._pieArgumentColors = undefined;
        _this.itemElementCustomColor = $.Callbacks();
        return _this;
    }
    pieMapItem.prototype._getMarkerLayers = function () {
        return [this.mapViewer.getLayerByName('pie')];
    };
    pieMapItem.prototype._configureMarkerLayers = function (viewModel) {
        var viewModel = this.options.ViewModel, pieSegments = this._getPieSegments(), pies = this._getPiesData(pieSegments, viewModel), markerDataSource = this._getMarkerDataSource(pies, viewModel.IsWeighted), markerSettings = this._getPieMapMarker(viewModel, markerDataSource, pies);
        return [__assign({ name: 'pie', type: 'marker', elementType: 'pie', dataField: 'values', dataSource: markerDataSource }, markerSettings)];
    };
    pieMapItem.prototype._getPieMapMarker = function (viewModel, markerDataSource, pies) {
        if (markerDataSource.length === 0) {
            return;
        }
        var markerSettings = this._getMarker(viewModel, markerDataSource);
        if (viewModel.IsWeighted) {
            markerSettings.sizeGroupingField = 'sizeValue';
            markerSettings.sizeGroups = this._getPieRangeStops(pies);
            markerSettings.minSize = 20;
            markerSettings.maxSize = 60;
        }
        markerSettings.palette = this._pieArgumentColors;
        return markerSettings;
    };
    pieMapItem.prototype._getMarkerDataSource = function (pies, isWeighted) {
        var markerDataSource = [], attributes, rangeStops = [0, 1, 2];
        for (var name in pies) {
            attributes = pies[name].attributes;
            if (!isWeighted) {
                attributes.size = 20 + this._getRangeStopIndex(pies[name].attributes.sizeValue, rangeStops) * 10;
            }
            markerDataSource.push({
                coordinates: pies[name].coordinates,
                attributes: attributes
            });
        }
        return markerDataSource;
    };
    pieMapItem.prototype._getColorLegend = function (viewModel) {
        var that = this;
        var legend = _super.prototype._getColorLegend.call(this, viewModel);
        if (legend) {
            legend.source.layer = 'pie';
            legend.customizeText = function (arg) {
                return that._pieArgumentDisplayTexts[arg.index];
            };
        }
        return legend;
    };
    pieMapItem.prototype._getWeightLegend = function (viewModel) {
        var that = this;
        if (!viewModel.IsWeighted) {
            return;
        }
        var legend = _super.prototype._getWeightLegend.call(this, viewModel);
        if (legend) {
            legend.source.layer = 'pie';
            legend.customizeText = function (arg) {
                return that.dataController.formatValue(arg.start);
            };
        }
        return legend;
    };
    pieMapItem.prototype._getPieSegments = function () {
        var that = this, viewModel = this.options.ViewModel, pieSegments = [], pieSegment, filledValues = viewModel.Values && viewModel.Values.length > 0, getPieSegment = function (point) {
            return {
                clusterCount: point.pointsCount,
                lat: point.lat,
                lon: point.lon,
                latSel: point.latSel,
                lonSel: point.lonSel,
                dimensionsTooltipText: that._getDimensionsTooltipHtml(point.tooltipDimensions),
                measuresTooltipText: that._getMeasuresTooltipHtml(point.tooltipMeasures),
                value: point.value,
                valueDisplayText: point.valueDisplayText,
                argumentValue: point.argument,
                argumentDisplayText: point.argumentDisplayText,
                color: point.color,
                valueId: point.valueId,
                axisPoint: point.axisPoint
            };
        };
        that._pieUniqueArguments = [];
        that._pieArgumentDisplayTexts = [];
        that._pieArgumentColors = [];
        for (var i = 0; i < that.dataController.getCount(); i++) {
            if (viewModel.ArgumentDataId) {
                pieSegment = getPieSegment(that.dataController.getPoint(i));
                if (that._pieUniqueArguments.indexOf(pieSegment.argumentValue) === -1) {
                    that._fillArgumentParams(pieSegment);
                }
                pieSegments.push(pieSegment);
            }
            else {
                if (filledValues) {
                    for (var j = 0; j < viewModel.Values.length; j++) {
                        pieSegment = getPieSegment(that.dataController.getPoint(i, j));
                        if (that._pieUniqueArguments.indexOf(pieSegment.argumentValue) === -1 || i === 0) {
                            that._fillArgumentParams(pieSegment);
                        }
                        pieSegments.push(pieSegment);
                    }
                }
            }
        }
        return pieSegments;
    };
    pieMapItem.prototype._fillArgumentParams = function (pieSegment) {
        var that = this, color = pieSegment.color, dxColor = new Color(color);
        this._pieUniqueArguments.push(pieSegment.argumentValue);
        this._pieArgumentDisplayTexts.push(pieSegment.argumentDisplayText);
        if (that.itemElementCustomColor && color) {
            var customElementColorEventArgs = {
                targetElement: [pieSegment.axisPoint],
                measureIds: pieSegment ? [pieSegment.valueId] : null,
                color: dxColor.toHex()
            };
            that.itemElementCustomColor.fire(this.getName(), customElementColorEventArgs);
            color = customElementColorEventArgs.color;
        }
        this._pieArgumentColors.push(color);
    };
    pieMapItem.prototype._getPiesData = function (pieSegments, viewModel) {
        var pies = {}, segment, key, tooltip, dimensionsTooltip, measuresTooltip;
        for (var i = 0; i < pieSegments.length; i++) {
            segment = pieSegments[i];
            key = string_1.format('{0};{1}', segment.lat, segment.lon);
            if (!pies.hasOwnProperty(key)) {
                dimensionsTooltip = segment.dimensionsTooltipText;
                measuresTooltip = segment.measuresTooltipText;
                pies[key] = {
                    coordinates: [segment.lon, segment.lat],
                    attributes: {
                        latSelection: segment.latSel,
                        lonSelection: segment.lonSel,
                        selected: this._isSelected([segment.latSel, segment.lonSel]),
                        values: this._getEmptyValues(this._pieUniqueArguments.length),
                        dimensionsTooltip: dimensionsTooltip,
                        measuresTooltip: measuresTooltip,
                        sizeValue: viewModel.IsWeighted ? 0 : segment.clusterCount > 1 ? 1 : 0
                    }
                };
                if (segment.clusterCount > 1) {
                    pies[key].attributes.tooltip = this._pointsCountTooltip(segment.clusterCount);
                }
            }
            for (var j = 0; j < pies[key].attributes.values.length; j++) {
                if (segment.argumentValue === this._pieUniqueArguments[j]) {
                    pies[key].attributes.values[j] = segment.value;
                }
            }
            if (viewModel.Values && viewModel.Values.length > 0) {
                if (segment.argumentValue && segment.value > 0) {
                    tooltip = this._getToolTip(segment.argumentDisplayText, segment.valueDisplayText);
                }
                else {
                    tooltip = undefined;
                }
            }
            else {
                tooltip = segment.argumentDisplayText;
            }
            if (tooltip) {
                if (pies[key].attributes.tooltip) {
                    pies[key].attributes.tooltip += '<br>' + tooltip;
                }
                else {
                    pies[key].attributes.tooltip = tooltip;
                }
            }
            if (viewModel.IsWeighted) {
                pies[key].attributes.sizeValue += segment.value;
            }
            else if (this._getPieSegmentCount(pies[key]) === 2) {
                pies[key].attributes.sizeValue++;
            }
        }
        return pies;
    };
    pieMapItem.prototype._getPieSegmentCount = function (pie) {
        var count = 0;
        for (var i = 0; i < pie.attributes.values.length; i++) {
            if (pie.attributes.values[i] > 0) {
                count++;
            }
        }
        return count;
    };
    pieMapItem.prototype._getEmptyValues = function (length) {
        var emptyValues = [];
        for (var j = 0; j < length; j++) {
            emptyValues.push(0);
        }
        return emptyValues;
    };
    pieMapItem.prototype._getPieRangeStops = function (pies) {
        var minSizeValue, maxSizeValue;
        for (var name in pies) {
            if (minSizeValue === undefined || pies[name].attributes.sizeValue < minSizeValue) {
                minSizeValue = pies[name].attributes.sizeValue;
            }
            if (maxSizeValue === undefined || pies[name].attributes.sizeValue > maxSizeValue) {
                maxSizeValue = pies[name].attributes.sizeValue;
            }
        }
        return this._updateRangeStops([0, 25, 50, 75], minSizeValue, maxSizeValue, true);
    };
    pieMapItem.prototype._getRangeStopIndex = function (value, rangeStops) {
        if (value < rangeStops[0]) {
            return 0;
        }
        for (var i = 0; i < rangeStops.length - 1; i++) {
            if (value >= rangeStops[i] && value < rangeStops[i + 1]) {
                return i;
            }
        }
        return rangeStops.length - 1;
    };
    pieMapItem.prototype._getDataPointMeasureIds = function () {
        var viewModel = this.options.ViewModel, measureIds = [];
        if (viewModel.ArgumentDataId != null && viewModel.Values.length > 0) {
            measureIds.push(viewModel.Values[0]);
        }
        else {
            $.each(viewModel.Values, function (_, value) {
                measureIds.push(value);
            });
        }
        return measureIds;
    };
    pieMapItem.prototype._elementCustomColor = function (eventArgs) {
        this.itemElementCustomColor.fire(this.getName(), eventArgs);
    };
    return pieMapItem;
}(_geo_point_map_item_base_1.geoPointMapItemBase));
exports.pieMapItem = pieMapItem;


/***/ }),
/* 580 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var pivot_grid_1 = __webpack_require__(418);
var $ = __webpack_require__(2);
var _localization_ids_1 = __webpack_require__(21);
var _localizer_1 = __webpack_require__(16);
var _utils_1 = __webpack_require__(3);
var _style_settings_provider_1 = __webpack_require__(112);
var _item_data_axis_names_1 = __webpack_require__(34);
var _base_item_1 = __webpack_require__(29);
var PIVOT_BAR_ID = 'pivotBar';
var pivotGridItem = (function (_super) {
    __extends(pivotGridItem, _super);
    function pivotGridItem(container, options) {
        var _this = _super.call(this, container, options) || this;
        _this._conditionalFormattingInfoCache = [];
        _this.expandStateChanged = $.Callbacks();
        _this._collapseStateCache = {};
        _this._conditionalFormattingInfoCache = [];
        _this._styleSettingsProvider = new _style_settings_provider_1.styleSettingsProvider();
        _this._styleSettingsProvider.initialize(_this.options.ConditionalFormattingModel);
        return _this;
    }
    Object.defineProperty(pivotGridItem.prototype, "_captionToolbarSeparatorRequired", {
        get: function () {
            return !this.hasParentContainer() || (this.hasParentContainer() && this.visualMode === 'caption');
        },
        enumerable: true,
        configurable: true
    });
    pivotGridItem.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.pivotGridViewer && this.pivotGridViewer.dispose();
    };
    pivotGridItem.prototype.renderContentUnsafe = function (element, changeExisting, afterRenderCallback) {
        if (this.options) {
            var pivotOptions = this._getPivotGridOptions();
            this._raiseItemWidgetOptionsPrepared(pivotOptions);
            if (changeExisting && this.pivotGridViewer) {
                this.pivotGridViewer.option(pivotOptions);
            }
            else {
                this.pivotGridViewer = new pivot_grid_1.default(element, pivotOptions);
            }
            this._conditionalFormattingInfoCache = [];
        }
        return false;
    };
    pivotGridItem.prototype.renderPartialContentUnsafe = function () {
        var parameters = this.options.Parameters, isColumn = parameters[1], area = isColumn ? 'column' : 'row', path = parameters[0], pivotDataSource = this.dataController.getDataSource(null, isColumn, path);
        this._conditionalFormattingInfoCache = [];
        this.pivotGridViewer.applyPartialDataSource(area, path, pivotDataSource);
    };
    pivotGridItem.prototype.getInfoUnsafe = function () {
        return _utils_1.deepExtend(_super.prototype.getInfoUnsafe.call(this), {
            scroll: {
                topPath: this.pivotGridViewer.getScrollPath('row'),
                leftPath: this.pivotGridViewer.getScrollPath('column'),
                horizontal: this.pivotGridViewer.hasScroll('column'),
                vertical: this.pivotGridViewer.hasScroll('row')
            }
        });
    };
    pivotGridItem.prototype.getExpandingState = function (isRowsExpanding, isColumnsExpanding) {
        if (isRowsExpanding === void 0) { isRowsExpanding = true; }
        if (isColumnsExpanding === void 0) { isColumnsExpanding = true; }
        var ds = this.pivotGridViewer ? this.pivotGridViewer.getDataSource() : undefined;
        return {
            rows: isRowsExpanding ? this._getExpandedPaths(ds, false) : this._getCollapsedPaths(ds, false),
            columns: isColumnsExpanding ? this._getExpandedPaths(ds, true) : this._getCollapsedPaths(ds, true)
        };
    };
    pivotGridItem.prototype._onExpandStateChanged = function (state) {
        this.expandStateChanged.fire(state);
    };
    pivotGridItem.prototype._getExpandedPaths = function (ds, isColumn) {
        if (!ds)
            return [];
        var state = ds.state();
        if (!state)
            return [];
        return isColumn ? state.columnExpandedPaths : state.rowExpandedPaths;
    };
    pivotGridItem.prototype._getCollapsedPaths = function (ds, isColumn) {
        if (!ds)
            return [];
        var result = [], data = ds.getData() || [], area = isColumn ? 'column' : 'row', fields = ds.getAreaFields(area);
        var foreachTreeItem = function (items, members, callback) {
            members = members || [];
            items = items || [];
            var item;
            for (var i = 0; i < items.length; i++) {
                item = items[i];
                members.unshift(item);
                callback(members, i);
                if (item.children) {
                    foreachTreeItem(item.children, members, callback);
                }
                members.shift();
            }
        };
        var createPath = function (items) {
            var result = [];
            for (var i = items.length - 1; i >= 0; i--) {
                result.push(items[i].key || items[i].value);
            }
            return result;
        };
        foreachTreeItem(data[area + 's'], undefined, function (items) {
            var item = items[0], path = createPath(items);
            if (!(item.children && fields[path.length - 1] && !fields[path.length - 1].expanded)) {
                (path.length < fields.length) && result.push(path.slice());
            }
        });
        return result;
    };
    pivotGridItem.prototype._initializeData = function (newOptions) {
        _super.prototype._initializeData.call(this, newOptions);
        this.options.PivotExpandViewState = newOptions.PivotExpandViewState;
        if (this._styleSettingsProvider) {
            this._styleSettingsProvider.initialize(this.options.ConditionalFormattingModel);
        }
    };
    pivotGridItem.prototype._getPivotGridOptions = function () {
        var _this = this;
        if (!this.options.ViewModel) {
            return {};
        }
        var viewModel = this.options.ViewModel, commonOptions = {};
        var dataSource = this.dataController.getDataSource(this.options.PivotExpandViewState);
        commonOptions.dataSource = dataSource;
        var fields = dataSource.fields;
        commonOptions.fieldChooser = { enabled: false };
        commonOptions.loadPanel = { enabled: false };
        commonOptions.contextMenuEnabled = false;
        commonOptions.showRowGrandTotals = this._showRowGrandTotals(fields);
        commonOptions.showColumnGrandTotals = this._getShowColumnGrandTotals(fields);
        commonOptions.showColumnTotals = viewModel.ShowColumnTotals;
        commonOptions.showRowTotals = viewModel.ShowRowTotals;
        commonOptions.dataFieldArea = viewModel.ValuesPosition == 'Rows' ? 'row' : 'column';
        if (viewModel.LayoutType == 'Compact') {
            commonOptions.rowHeaderLayout = 'tree';
            if (viewModel.ColumnTotalsPosition == 'Near')
                commonOptions.showTotalsPrior = 'columns';
            else
                commonOptions.showTotalsPrior = 'none';
        }
        else {
            commonOptions.rowHeaderLayout = 'standard';
            if (viewModel.RowTotalsPosition == 'Top' && viewModel.ColumnTotalsPosition == 'Near')
                commonOptions.showTotalsPrior = 'both';
            else if (viewModel.RowTotalsPosition == 'Top')
                commonOptions.showTotalsPrior = 'rows';
            else if (viewModel.ColumnTotalsPosition == 'Near')
                commonOptions.showTotalsPrior = 'columns';
            else
                commonOptions.showTotalsPrior = 'none';
        }
        var dataFields = fields.filter(function (field) { return field.area == 'data'; });
        for (var i = 0; i < viewModel.Values.length; i++) {
            dataFields[i].showValues = viewModel.Values[i].ShowValues;
            dataFields[i].showTotals = viewModel.Values[i].ShowTotals;
            dataFields[i].showGrandTotals = viewModel.Values[i].ShowGrandTotals;
        }
        var columnFields = fields.filter(function (field) { return field.area == 'column'; });
        for (var i = 0; i < viewModel.Columns.length; i++) {
            columnFields[i].showTotals = viewModel.Columns[i].ShowTotals;
        }
        var rowFields = fields.filter(function (field) { return field.area == 'row'; });
        for (var i = 0; i < viewModel.Rows.length; i++) {
            rowFields[i].showTotals = viewModel.Rows[i].ShowTotals;
        }
        commonOptions.encodeHtml = this._isEncodeHtml();
        commonOptions.scrolling = {
            mode: 'standard',
        };
        commonOptions.stateStoring = {
            enabled: true,
            type: 'custom',
            savingTimeout: 0,
            customLoad: function () { return null; },
            customSave: function (state) { _this._onExpandStateChanged(state); }
        },
            commonOptions.onExpandValueChanging = this._getExpandValueChangingHandler();
        commonOptions.texts = {
            grandTotal: _localizer_1.localizer.getString(_localization_ids_1.localizationId.PivotGridGrandTotal),
            total: _localizer_1.localizer.getString(_localization_ids_1.localizationId.PivotGridTotal),
            noData: _localizer_1.localizer.getString(_localization_ids_1.localizationId.MessagePivotHasNoData)
        };
        commonOptions.onCellClick = function (e) {
            if (e.area === 'data') {
                _this._raiseItemClick(e.cell);
            }
        };
        commonOptions.onCellPrepared = function (e) { return _this._onCellPrepared(e); };
        commonOptions.onContentReady = function (e) { return _this._styleSettingsProvider.draw(); };
        return commonOptions;
    };
    pivotGridItem.prototype._getShowColumnGrandTotals = function (fields) {
        var viewModel = this.options.ViewModel;
        var columnFields = fields.filter(function (field) { return field.area == 'column'; });
        var rowFields = fields.filter(function (field) { return field.area == 'row'; });
        if (!viewModel.ShowColumnGrandTotals && (columnFields.length === 0 && rowFields.length !== 0)) {
            return true;
        }
        return viewModel.ShowColumnGrandTotals;
    };
    pivotGridItem.prototype._showRowGrandTotals = function (fields) {
        var viewModel = this.options.ViewModel;
        var columnFields = fields.filter(function (field) { return field.area == 'column'; });
        var rowFields = fields.filter(function (field) { return field.area == 'row'; });
        if (!viewModel.ShowRowGrandTotals && (columnFields.length !== 0 && rowFields.length === 0)) {
            return true;
        }
        return viewModel.ShowRowGrandTotals;
    };
    pivotGridItem.prototype._createHeaderHierarchy = function (list) {
        var result = [], tempList = [], current = null, parent = null, index = 0, i, item, parentHash = [];
        if (list && list.length > 0) {
            for (i = 0; i < list.length; i++) {
                item = list[i];
                current = {
                    index: index++,
                    value: item[1],
                    displayText: item[2],
                    parentIndex: item[3]
                };
                tempList.push(current);
                if (current.parentIndex >= 0) {
                    parent = tempList[current.parentIndex];
                    if (!parent.children) {
                        parent.children = [];
                    }
                    parent.children.push(current);
                }
            }
            for (i = 0; i < tempList.length; i++) {
                item = tempList[i];
                if (item.parentIndex < 0) {
                    result.push({
                        index: item.index,
                        value: item.value,
                        displayText: item.displayText,
                        children: item.children
                    });
                }
            }
        }
        return result;
    };
    pivotGridItem.prototype._createCells = function (list) {
        var result = [], columnIndex = -1, rowIndex = -1, dataIndex = -1, value = null, i, elem;
        if (list && list.length > 0) {
            for (i = 0; i < list.length; i++) {
                elem = list[i];
                columnIndex = elem[0];
                rowIndex = elem[1];
                dataIndex = elem[2];
                value = elem[3];
                if (!result[rowIndex]) {
                    result[rowIndex] = [];
                }
                if (!result[rowIndex][columnIndex]) {
                    result[rowIndex][columnIndex] = [];
                }
                result[rowIndex][columnIndex].splice(dataIndex, 0, value);
            }
        }
        return result;
    };
    pivotGridItem.prototype._getExpandValueChangingHandler = function () {
        var that = this;
        return function (args) {
            var isColumn = args.area === 'column', values = args.path;
            that._onExpandValue({
                values: values,
                isColumn: isColumn,
                isExpand: args.expanded,
                isRequestData: !!args.needExpandData
            });
            that.onCollapseStateChanged(isColumn, values, !args.expanded);
        };
    };
    pivotGridItem.prototype.onCollapseStateChanged = function (isColumn, values, collapse) {
        var that = this, collapseState = values.concat(isColumn ? 'column' : 'row');
        that._conditionalFormattingInfoCache = [];
        if (collapse)
            that._collapseStateCache[collapseState] = collapseState;
        else
            delete that._collapseStateCache[collapseState];
    };
    pivotGridItem.prototype._resizeUnsafe = function () {
        _super.prototype._resizeUnsafe.call(this);
        this.pivotGridViewer.resize();
        this._styleSettingsProvider.updateBarWidth(PIVOT_BAR_ID);
    };
    pivotGridItem.prototype._getDataPoint = function (element) {
        var that = this, viewModel = that.options.ViewModel;
        return {
            getValues: function (name) {
                switch (name) {
                    case _item_data_axis_names_1.itemDataAxisNames.pivotRowAxis:
                        return element.rowPath;
                    case _item_data_axis_names_1.itemDataAxisNames.pivotColumnAxis:
                        return element.columnPath;
                    default:
                        return null;
                }
            },
            getDeltaIds: function () {
                return [];
            },
            getMeasureIds: function () {
                var dataIndex = element.dataIndex;
                if (dataIndex != undefined) {
                    return [viewModel.Values[dataIndex].DataId];
                }
                return null;
            }
        };
    };
    pivotGridItem.prototype._getWidget = function () {
        return this.pivotGridViewer;
    };
    pivotGridItem.prototype._onCellPrepared = function (element) {
        var styleSettingsInfo, isMeasureHeader = (element.area === _utils_1.pivotArea.column || element.area === _utils_1.pivotArea.row) && element.cell.dataIndex !== undefined, cellItem = {
            area: element.area
        };
        if (!isMeasureHeader) {
            if (element.area === _utils_1.pivotArea.column) {
                cellItem.columnPath = element.cell.path;
                cellItem.columnType = element.cell.type;
            }
            else if (element.area === _utils_1.pivotArea.row) {
                cellItem.rowPath = element.cell.path;
                cellItem.rowType = element.cell.type;
            }
            else {
                cellItem.columnPath = element.cell.columnPath;
                cellItem.rowPath = element.cell.rowPath;
                cellItem.cellIndex = element.cell.dataIndex;
                cellItem.columnType = element.cell.columnType;
                cellItem.rowType = element.cell.rowType;
            }
            styleSettingsInfo = this.dataController.getStyleSettingsInfo(cellItem, this._collapseStateCache, this._conditionalFormattingInfoCache);
            this._styleSettingsProvider.applyStyleSettings(_utils_1.$unwrap(element.cellElement), this.options.controlContainer, styleSettingsInfo, false, PIVOT_BAR_ID);
        }
    };
    return pivotGridItem;
}(_base_item_1.baseItem));
exports.pivotGridItem = pivotGridItem;


/***/ }),
/* 581 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _group_item_1 = __webpack_require__(351);
var tabPageItem = (function (_super) {
    __extends(tabPageItem, _super);
    function tabPageItem(container, options) {
        return _super.call(this, container, options) || this;
    }
    return tabPageItem;
}(_group_item_1.groupItem));
exports.tabPageItem = tabPageItem;


/***/ }),
/* 582 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var _utils_1 = __webpack_require__(3);
var _render_helper_1 = __webpack_require__(28);
var _base_item_1 = __webpack_require__(29);
var textItem = (function (_super) {
    __extends(textItem, _super);
    function textItem(container, options) {
        var _this = _super.call(this, container, options) || this;
        _this.div = undefined;
        return _this;
    }
    textItem.prototype.renderContentUnsafe = function (element, changeExisting, afterRenderCallback) {
        var that = this;
        if (!changeExisting || !that.div) {
            that.div = $('<div>');
            that.$textContent = $(_render_helper_1.RenderHelper.wrapScrollable(that.div.get(0), 'auto', 'vertical'));
            that.$textContent.addClass('dx-dashboard-textbox-content');
            $(element).append(that.div);
        }
        that._setContent();
        return false;
    };
    textItem.prototype._getWidget = function () {
        return this.div && _utils_1.wrapPublicElement(this.div[0]) || null;
    };
    textItem.prototype._setContent = function () {
        var itemName = this.options.Name, sheetColor, preWrapper = $('<pre>'), parsedHtml = $('<div>'), originalHtmlText = this.options.ViewModel.Html;
        originalHtmlText = originalHtmlText.replace('<body', '<div class="' + itemName + '"').replace('</body>', '</div>');
        originalHtmlText = this._updateDocvariableValues(originalHtmlText);
        var contentDiv = $(originalHtmlText).get().filter(function (c) { return c.className === itemName; })[0];
        sheetColor = contentDiv && contentDiv.getAttribute('bgcolor');
        sheetColor && this.div.css({ 'backgroundColor': sheetColor });
        parsedHtml.html(originalHtmlText);
        preWrapper.addClass('dx-dashboard-textbox-content-pre-wrapper');
        preWrapper.attr('id', itemName);
        preWrapper.append(parsedHtml.find('style'));
        if (contentDiv)
            preWrapper.append(contentDiv.children);
        this.$textContent.empty();
        this.$textContent.append(preWrapper);
    };
    textItem.prototype._updateDocvariableValues = function (htmlText) {
        var _this = this;
        return htmlText.replace(/02539CA4-7628-4F5D-9940-ED09C7EE7414\(([^()]+)\)/g, function (placeholder) {
            var match = placeholder.match(/\((.*?)\)/g);
            var id = match && match.length > 0 ? match[0].replace('(', '').replace(')', '') : null;
            if (id) {
                return _this._getHtml(_this.dataController.getDisplayText(id) || '');
            }
        });
    };
    return textItem;
}(_base_item_1.baseItem));
exports.textItem = textItem;


/***/ }),
/* 583 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var tree_map_1 = __webpack_require__(426);
var $ = __webpack_require__(2);
var _utils_1 = __webpack_require__(3);
var _base_item_1 = __webpack_require__(29);
var _interactivity_controller_1 = __webpack_require__(150);
var treemapItem = (function (_super) {
    __extends(treemapItem, _super);
    function treemapItem(container, options) {
        var _this = _super.call(this, container, options) || this;
        _this.itemElementCustomColor = $.Callbacks();
        return _this;
    }
    treemapItem.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.treemapViewer && this.treemapViewer.dispose();
    };
    treemapItem.prototype._initializeData = function (newOptions) {
        _super.prototype._initializeData.call(this, newOptions);
        if (this.dataController) {
            this.dataController.elementCustomColor = $.proxy(this._elementCustomColor, this);
        }
    };
    treemapItem.prototype._clearSelectionUnsafe = function () {
        this.treemapViewer.clearSelection();
    };
    treemapItem.prototype.selectTupleUnsafe = function (tuples, state) {
        var that = this;
        $.each(tuples, function (index, tuple) {
            that._selectNodes(tuple.Value, state);
        });
    };
    treemapItem.prototype._setSelectionUnsafe = function (values) {
        _super.prototype._setSelectionUnsafe.call(this, values);
        this.clearSelection();
        this._applySelection();
    };
    treemapItem.prototype.renderContentUnsafe = function (element, changeExisting, afterRenderCallback) {
        var options = this._getTreeMapViewerOptions();
        this._raiseItemWidgetOptionsPrepared(options);
        if (changeExisting && this.treemapViewer) {
            this.treemapViewer.option(options);
        }
        else {
            this.treemapViewer = new tree_map_1.default(element, options);
        }
        var selectedValues = this.options.SelectedValues;
        if (selectedValues)
            this.setSelection(selectedValues);
        return false;
    };
    treemapItem.prototype.updateContentStateUnsafe = function () {
        if (this._getCustomHoverEnabled()) {
            this.treemapViewer.option('hoverEnabled', true);
        }
    };
    treemapItem.prototype._selectNodes = function (valueSet, state) {
        var that = this;
        $.each(that.treemapViewer.getRootNode().getAllNodes(), function (i, node) {
            if (_utils_1.checkValuesAreEqual(valueSet, node.data.uniqueValue))
                node.select(state);
        });
    };
    treemapItem.prototype._clickAction = function (tuples) {
        var newTuples = [], tuple = tuples[0], values = this.dataController.getChildrenNodesUniqueValues(tuple.Value), isMultipleMode = this._canSetMultipleMasterFilter() || this.customSelectionMode === _interactivity_controller_1.dashboardSelectionMode.multiple, currentSelection = isMultipleMode && this.allowMultiselection ? this.getSelectedTuples().slice() : [], existingTuples = [];
        if (!isMultipleMode && values.length > 1)
            return;
        for (var i = 0; i < values.length; i++) {
            var newTuple = [{ AxisName: tuple.AxisName, Value: values[i] }];
            if (_utils_1.checkArrayContainsTuple(currentSelection, newTuple) === undefined)
                newTuples.push(newTuple);
            else
                existingTuples.push(newTuple);
        }
        this.interactivityController.clickAction(newTuples.length > 0 ? newTuples : existingTuples);
    };
    treemapItem.prototype._elementCustomColor = function (eventArgs) {
        this.itemElementCustomColor.fire(this.getName(), eventArgs);
    };
    treemapItem.prototype._getTreeMapViewerOptions = function () {
        var that = this, viewModel = that.options.ViewModel, isSingleMasterFilterMode = this._canSetMasterFilter() && !this._canSetMultipleMasterFilter(), setLabel = function (node) {
            var label = that.dataController.getLabel(node, that._isEncodeHtml());
            if (label)
                node.label(label);
            else
                node.label(' ');
        }, options = {
            dataSource: that.dataController.getDataSource(),
            layoutAlgorithm: that._getLayoutAlgorithm(),
            layoutDirection: that._getLayoutDirection(),
            selectionMode: 'multiple',
            tile: {
                label: {
                    textOverflow: 'ellipsis'
                }
            },
            hoverEnabled: that.isInteractivityActionEnabled(),
            tooltip: {
                enabled: true,
                container: _utils_1.tooltipContainerSelector,
                customizeTooltip: function (arg) {
                    return {
                        text: that.dataController.getTooltip(arg.node, that._isEncodeHtml())
                    };
                }
            },
            onClick: function (e) {
                that._raiseItemClick(e.node.data);
            },
            onNodesRendering: function () {
                this.getRootNode().getAllNodes().forEach(setLabel);
            },
            group: {
                hoverEnabled: !isSingleMasterFilterMode,
                label: {
                    textOverflow: 'ellipsis'
                }
            }
        };
        return options;
    };
    treemapItem.prototype._getLayoutAlgorithm = function () {
        var viewModel = this.options.ViewModel;
        switch (viewModel.LayoutAlgorithm) {
            case 'SliceAndDice':
                return this.width() >= this.height() ? 'sliceAndDice' : 'rotatedSliceAndDice';
            case 'Squarified':
                return 'squarified';
            case 'Striped':
                return 'strip';
        }
    };
    treemapItem.prototype._getLayoutDirection = function () {
        var viewModel = this.options.ViewModel;
        switch (viewModel.LayoutDirection) {
            case 'BottomLeftToTopRight':
                return 'leftBottomRightTop';
            case 'BottomRightToTopLeft':
                return 'rightBottomLeftTop';
            case 'TopLeftToBottomRight':
                return 'leftTopRightBottom';
            case 'TopRightToBottomLeft':
                return 'rightTopLeftBottom';
        }
    };
    treemapItem.prototype._getDataPoint = function (element) {
        var that = this;
        return {
            getValues: function () {
                return that._getElementInteractionValue(element);
            },
            getMeasureIds: function () {
                return that._getDataPointMeasureIds();
            },
            getDeltaIds: function () {
                return [];
            }
        };
    };
    treemapItem.prototype._getElementInteractionValue = function (element) {
        if (!this.options.ViewModel.ProvideValuesAsArguments)
            return element.uniqueValue;
    };
    treemapItem.prototype._getDataPointMeasureIds = function () {
        var viewModel = this.options.ViewModel, contentDescription = viewModel.ContentDescription, elementIndex = 0, measureIds = [];
        if (contentDescription != null && contentDescription.ElementSelectionEnabled)
            elementIndex = contentDescription.SelectedElementIndex;
        if (!viewModel.ProvideValuesAsArguments && viewModel.ValueDataMembers.length > 0) {
            measureIds.push(viewModel.ValueDataMembers[elementIndex]);
        }
        else {
            $.each(viewModel.ValueDataMembers, function (_, value) {
                measureIds.push(value);
            });
        }
        return measureIds;
    };
    treemapItem.prototype._updateContentSizeUnsafe = function () {
        _super.prototype._updateContentSizeUnsafe.call(this);
        if (!!this.treemapViewer) {
            this.treemapViewer.option('layoutAlgorithm', this._getLayoutAlgorithm());
            this.treemapViewer.render();
        }
    };
    treemapItem.prototype._getWidget = function () {
        return this.treemapViewer;
    };
    treemapItem.prototype._isMultiDataSupported = function () {
        return true;
    };
    treemapItem.prototype._applySelectionUnsafe = function () {
        var that = this;
        that.getSelectedTuples().forEach(function (tuple) { return that.selectTuple(tuple, true); });
    };
    return treemapItem;
}(_base_item_1.baseItem));
exports.treemapItem = treemapItem;


/***/ }),
/* 584 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(248);
var _item_data_tuple_1 = __webpack_require__(98);
var chart_item_1 = __webpack_require__(532);
var data_dashboard_item_1 = __webpack_require__(9);
var gauge_item_1 = __webpack_require__(535);
var grid_item_1 = __webpack_require__(146);
var item_widget_event_args_1 = __webpack_require__(585);
exports.createItemClickEventArgs = function (dashboardItem, dataPoint, requestUnderlyingDataFunc) {
    var itemData = dashboardItem._getItemData();
    var patchAxisName = function (axisName) {
        if (axisName === undefined)
            axisName = 'Default';
        return axisName;
    };
    var getAxis = function (axisName) {
        return itemData.getAxis(patchAxisName(axisName));
    };
    var getAxisPoint = function (axisName) {
        axisName = patchAxisName(axisName);
        return getAxis(axisName).getPointByUniqueValues(dataPoint.getValues(axisName));
    };
    return {
        itemName: dashboardItem.componentName(),
        dashboardItem: dashboardItem,
        getData: function () {
            return itemData;
        },
        getAxisPoint: getAxisPoint,
        getMeasures: function () {
            return itemData.getMeasuresByIds(dataPoint.getMeasureIds());
        },
        getDeltas: function () {
            var ids = dataPoint.getDeltaIds(), deltas = [];
            ids.forEach(function (id) {
                deltas.push(itemData.getDeltaById(id));
            });
            return deltas;
        },
        getDimensions: function (axisName) {
            return getAxis(axisName).getDimensions();
        },
        requestUnderlyingData: function (onCompleted, dataMembers) {
            var axisPoints = [];
            itemData.getAxisNames().forEach(function (axisName) {
                axisPoints.push(getAxisPoint(axisName));
            });
            requestUnderlyingDataFunc(dashboardItem.componentName(), {
                axisPoints: axisPoints,
                dataMembers: dataMembers
            }, onCompleted);
        }
    };
};
exports.createItemSelectionChangedEventArgs = function (dashboardItem, tuples) {
    return {
        itemName: dashboardItem.componentName(),
        dashboardItem: dashboardItem,
        getCurrentSelection: function () {
            var axisPointTuples = [];
            tuples.forEach(function (tuple) {
                axisPointTuples.push(dashboardItem._getItemData().createTuple(tuple));
            });
            return axisPointTuples;
        }
    };
};
exports.createItemElementCustomColorEventArgs = function (dashboardItem, eventArgs) {
    return {
        itemName: dashboardItem.componentName(),
        dashboardItem: dashboardItem,
        getTargetElement: function () {
            return new _item_data_tuple_1.itemDataTuple(eventArgs.targetElement);
        },
        getMeasures: function () {
            return dashboardItem._getItemData().getMeasuresByIds(eventArgs.measureIds);
        },
        getColor: function () {
            return eventArgs.color;
        },
        setColor: function (color) {
            eventArgs.color = color;
        }
    };
};
exports.createItemInteractivityEventArgs = function (dashboardItem, interactivityOptions) {
    return {
        itemName: dashboardItem.componentName(),
        dashboardItem: dashboardItem,
        getSelectionMode: function () { return interactivityOptions.selectionMode; },
        setSelectionMode: function (value) { interactivityOptions.selectionMode = value; },
        isHighlightingEnabled: function () { return interactivityOptions.hoverEnabled; },
        enableHighlighting: function (value) { interactivityOptions.hoverEnabled = value; },
        getTargetAxes: function () { return interactivityOptions.targetAxes; },
        setTargetAxes: function (value) { interactivityOptions.targetAxes = value; },
        getDefaultSelection: function () {
            var realTuples = [];
            interactivityOptions.defaultSelectedValues.forEach(function (tuple) {
                realTuples.push(dashboardItem._getItemData().createTuple(tuple));
            });
            return realTuples;
        },
        setDefaultSelection: function (realTuples) {
            var tuples = [], tuple;
            realTuples.forEach(function (realTuple) {
                tuple = [];
                interactivityOptions.targetAxes.forEach(function (axisName) {
                    tuple.push({
                        AxisName: axisName,
                        Value: realTuple.getAxisPoint(axisName).getUniquePath()
                    });
                });
                tuples.push(tuple);
            });
            interactivityOptions.defaultSelectedValues = tuples;
        }
    };
};
var createBaseWidgetEventArgs = function (dashboardItem) {
    var itemData = dashboardItem instanceof data_dashboard_item_1.DataDashboardItem ? dashboardItem._getItemData() : null;
    return {
        itemName: dashboardItem.componentName(),
        itemData: itemData,
        dashboardItem: dashboardItem,
        chartContext: dashboardItem instanceof chart_item_1.ChartItem ? new item_widget_event_args_1.ChartContext(dashboardItem) : null,
        gridContext: dashboardItem instanceof grid_item_1.GridItem ? new item_widget_event_args_1.GridContext(dashboardItem) : null,
        gaugeContext: dashboardItem instanceof gauge_item_1.GaugeItem ? new item_widget_event_args_1.GaugeContext(dashboardItem) : null
    };
};
exports.createWidgetEventArgs = function (dashboardItem, widget) {
    return __assign({ getWidget: function () { return widget; } }, createBaseWidgetEventArgs(dashboardItem));
};
exports.createWidgetOptionsEventArgs = function (dashboardItem, options) {
    return __assign({ options: options }, createBaseWidgetEventArgs(dashboardItem));
};


/***/ }),
/* 585 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(248);
var index_internal_1 = __webpack_require__(37);
var ChartContext = (function () {
    function ChartContext(_dashboardItem) {
        this._dashboardItem = _dashboardItem;
    }
    ChartContext.prototype.getDashboardItemSeries = function (seriesOptions) {
        return this._dashboardItem
            .panes()
            .reduce(function (acc, pane) { return acc.concat(pane.series()); }, [])
            .filter(function (series) { return seriesOptions[index_internal_1.DashboardDataIdField] && series._getDataId() === seriesOptions[index_internal_1.DashboardDataIdField]; })[0];
    };
    return ChartContext;
}());
exports.ChartContext = ChartContext;
var GridContext = (function () {
    function GridContext(_dashboardItem) {
        this._dashboardItem = _dashboardItem;
    }
    GridContext.prototype.getDashboardItemColumn = function (columnOptions) {
        return this._dashboardItem
            .columns()
            .filter(function (column) { return columnOptions[index_internal_1.DashboardDataIdField] && column._getDataId() === columnOptions[index_internal_1.DashboardDataIdField]; })[0];
    };
    return GridContext;
}());
exports.GridContext = GridContext;
var GaugeContext = (function () {
    function GaugeContext(_dashboardItem) {
        this._dashboardItem = _dashboardItem;
    }
    GaugeContext.prototype.getDashboardItemGauge = function (gaugeOptions) {
        return this._dashboardItem
            .gauges()
            .filter(function (gauge) { return gaugeOptions[index_internal_1.DashboardDataIdField] && gauge._getDataId() === gaugeOptions[index_internal_1.DashboardDataIdField]; })[0];
    };
    return GaugeContext;
}());
exports.GaugeContext = GaugeContext;


/***/ }),
/* 586 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var browser = __webpack_require__(99);
var string_1 = __webpack_require__(30);
var _localization_ids_1 = __webpack_require__(21);
var _localizer_1 = __webpack_require__(16);
var _export_options_1 = __webpack_require__(147);
var _viewer_item_types_1 = __webpack_require__(118);
var _dialog_form_1 = __webpack_require__(152);
var _export_localization_1 = __webpack_require__(353);
var _export_options_cache_1 = __webpack_require__(587);
var _export_options_groups_1 = __webpack_require__(588);
var exportDialog = (function () {
    function exportDialog(options) {
        this.defaultTitle = _export_options_1.ExportOptions.DefaultTitle;
        this.options = options;
        this._initialize();
    }
    exportDialog.prototype._initialize = function () {
        var _this = this;
        var that = this, options = that.options;
        exportDialog._initializeExportLocalizedStrings();
        that.exportOptionsCache = new _export_options_cache_1.exportOptionsCache();
        that.dialogForm = new _dialog_form_1.dialogForm({
            dialogContainer: options.container,
            fullScreenMode: options.fullScreenMode,
            width: 'auto',
            height: 'auto',
            allowScrolling: true,
            deferredRendering: true,
            buttons: [{
                    name: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ButtonReset),
                    func: function (type, typeExportEntities) {
                        that.group.set(options.documentInfo);
                    },
                    hide: false
                }, {
                    name: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ButtonExport),
                    hide: true,
                    func: function () {
                        var actualDocumentInfo = that.exportOptionsCache.getActualDocumentInfo(that.name, options.documentInfo);
                        that.group.apply(actualDocumentInfo);
                        that.exportOptionsCache.add(that.name, options.documentInfo, actualDocumentInfo);
                        that.exportFunction(actualDocumentInfo);
                    },
                    isDefault: true
                }, {
                    name: _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ButtonCancel),
                    hide: true,
                    func: function () { }
                }
            ],
            renderContent: function (controlCreationCallbacks) {
                var exportForm = document.createElement('div');
                exportForm.classList.add(_dialog_form_1.dialogClasses.form);
                that._createGroup();
                var editors = that.group.getEditors();
                editors.forEach(function (editor) {
                    var element = document.createElement('div');
                    element.classList.add(_dialog_form_1.dialogClasses.element);
                    exportForm.appendChild(element);
                    element.appendChild(editor.labelDiv);
                    element.appendChild(editor.editorDiv);
                });
                return exportForm;
            },
            disposeContent: function () {
                if (_this.group) {
                    var editors = that.group.getEditors();
                    editors.forEach(function (editor) { return editor.dispose(); });
                }
            },
            setActualState: function (width) {
            },
            onShown: options.onShown,
            onShowing: options.onShowing,
            onHidden: options.onHidden
        });
    };
    exportDialog.prototype.showDialog = function (name, type, format, options) {
        this.defaultTitle = options.title;
        this.options.documentInfo.fileName = options.fileName;
        this.name = name;
        this.type = type;
        this.format = format;
        this.dialogForm.popupInstance.option('title', this._getLocalizedTitle(options.fileName, format));
        this.dialogForm.showDialog();
    };
    exportDialog.prototype.hideDialog = function () {
        this.dialogForm.hideDialog();
    };
    exportDialog.prototype.dispose = function () {
        this.dialogForm && this.dialogForm.dispose();
    };
    exportDialog.prototype._getLocalizedTitle = function (name, format) {
        var isIE8orIE9 = (browser.msie && (browser.version == '8.0' || browser.version == '9.0')), exportString;
        switch (format) {
            case _export_options_1.exportFormats.pdf:
                exportString = _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ExportToPdf);
                break;
            case _export_options_1.exportFormats.image:
                exportString = _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ExportToImage);
                break;
            default:
                exportString = _localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ExportToExcel);
                break;
        }
        return isIE8orIE9 || !name ? exportString : string_1.format(_localizer_1.localizer.getString(_localization_ids_1.localizationId.buttonNames.ExportTemplate), exportString, name);
    };
    exportDialog.prototype.setExportFunction = function (exportFunction) {
        if (exportFunction)
            this.exportFunction = exportFunction;
    };
    exportDialog.prototype._createImageGroup = function (type, documentInfo) {
        switch (type) {
            case null:
                return new _export_options_groups_1.dashboardImageOptionsGroup(documentInfo.imageExportOptions.ShowTitle);
            case _viewer_item_types_1.types.image:
                return new _export_options_groups_1.simplyImageOptionsGroup(documentInfo.imageExportOptions.ShowTitle);
            default:
                return new _export_options_groups_1.imageOptionsGroup(documentInfo.imageExportOptions.ShowTitle);
        }
    };
    exportDialog.prototype._createExcelGroup = function (type, documentInfo) {
        switch (type) {
            case null:
                return new _export_options_groups_1.dashboardExcelOptionsGroup(documentInfo.excelExportOptions.Format);
            default:
                return new _export_options_groups_1.excelOptionsGroup(documentInfo.excelExportOptions.Format);
        }
    };
    exportDialog.prototype._createPdfGroup = function (type, documentInfo) {
        switch (type) {
            case null:
                return new _export_options_groups_1.entireDashboardOptionsGroup(documentInfo.pdfExportOptions.showTitle, documentInfo.pdfExportOptions.DashboardAutomaticPageLayout, documentInfo.pdfExportOptions.DocumentScaleMode);
            case _viewer_item_types_1.types.group:
            case _viewer_item_types_1.types.page:
                return new _export_options_groups_1.groupItemOptionsGroup(documentInfo.pdfExportOptions.ShowTitle, documentInfo.pdfExportOptions.DashboardAutomaticPageLayout, documentInfo.pdfExportOptions.DocumentScaleMode);
            case _viewer_item_types_1.types.grid:
                return new _export_options_groups_1.gridOptionsGroup(documentInfo.pdfExportOptions.ShowTitle, documentInfo.pdfExportOptions.GridFitToPageWidth, documentInfo.pdfExportOptions.DocumentScaleMode);
            case _viewer_item_types_1.types.chart:
            case _viewer_item_types_1.types.scatter:
                return new _export_options_groups_1.chartOptionsGroup(documentInfo.pdfExportOptions.ShowTitle);
            case _viewer_item_types_1.types.pie:
                return new _export_options_groups_1.pieOptionsGroup(documentInfo.pdfExportOptions.ShowTitle, documentInfo.pdfExportOptions.PieAutoArrangeContent, documentInfo.pdfExportOptions.DocumentScaleMode);
            case _viewer_item_types_1.types.gauge:
                return new _export_options_groups_1.gaugeOptionsGroup(documentInfo.pdfExportOptions.ShowTitle, documentInfo.pdfExportOptions.GaugeAutoArrangeContent, documentInfo.pdfExportOptions.DocumentScaleMode);
            case _viewer_item_types_1.types.card:
                return new _export_options_groups_1.cardOptionsGroup(documentInfo.pdfExportOptions.ShowTitle, documentInfo.pdfExportOptions.CardAutoArrangeContent, documentInfo.pdfExportOptions.DocumentScaleMode);
            case _viewer_item_types_1.types.pivot:
                return new _export_options_groups_1.pivotOptionsGroup(documentInfo.pdfExportOptions.ShowTitle, documentInfo.pdfExportOptions.DocumentScaleMode);
            case _viewer_item_types_1.types.treemap:
                return new _export_options_groups_1.treemapOptionsGroup(documentInfo.pdfExportOptions.ShowTitle);
            case _viewer_item_types_1.types.choroplethMap:
            case _viewer_item_types_1.types.geoPointMap:
            case _viewer_item_types_1.types.bubbleMap:
            case _viewer_item_types_1.types.pieMap:
                return new _export_options_groups_1.mapOptionsGroup(documentInfo.pdfExportOptions.ShowTitle);
            case _viewer_item_types_1.types.rangeFilter:
                return new _export_options_groups_1.rangeFilterOptionsGroup(documentInfo.pdfExportOptions.ShowTitle);
            case _viewer_item_types_1.types.text:
                return new _export_options_groups_1.textItemOptionsGroup(documentInfo.pdfExportOptions.ShowTitle);
            case _viewer_item_types_1.types.boundImage:
                return new _export_options_groups_1.boundImageItemOptionsGroup(documentInfo.pdfExportOptions.ShowTitle, documentInfo.pdfExportOptions.DocumentScaleMode);
            case _viewer_item_types_1.types.image:
                return new _export_options_groups_1.imageItemOptionsGroup(documentInfo.pdfExportOptions.ShowTitle, documentInfo.pdfExportOptions.DocumentScaleMode);
            case _viewer_item_types_1.types.custom:
                return new _export_options_groups_1.customItemOptionsGroup(documentInfo.pdfExportOptions.ShowTitle, documentInfo.pdfExportOptions.DashboardAutomaticPageLayout, documentInfo.pdfExportOptions.DocumentScaleMode);
        }
    };
    exportDialog.prototype._createGroup = function () {
        var _this = this;
        var that = this, documentInfo = that.exportOptionsCache.getActualDocumentInfo(that.name, that.options.documentInfo);
        if (that.group) {
            that.group.dispose();
        }
        switch (that.format) {
            case _export_options_1.exportFormats.image:
                that.group = that._createImageGroup(that.type, documentInfo);
                break;
            case _export_options_1.exportFormats.excel:
                that.group = that._createExcelGroup(that.type, documentInfo);
                break;
            default:
                that.group = that._createPdfGroup(that.type, documentInfo);
                break;
        }
        that.group.createEditors({ popupContainer: this.options.container });
        if (documentInfo.pdfExportOptions && documentInfo.pdfExportOptions.Title === _export_options_1.ExportOptions.DefaultTitle)
            documentInfo.pdfExportOptions.Title = this.defaultTitle;
        if (documentInfo.imageExportOptions && documentInfo.imageExportOptions.Title === _export_options_1.ExportOptions.DefaultTitle)
            documentInfo.imageExportOptions.Title = this.defaultTitle;
        that.group.set(documentInfo);
        var scaleModeGroup = !!that.group['dashboardOptionsGroup'] ? that.group['dashboardOptionsGroup'].scaleModeOptionsGroup : that.group['scaleModeOptionsGroup'];
        if (!!scaleModeGroup) {
            scaleModeGroup.visibilityUpdated.add(function () { _this.dialogForm.popupInstance.repaint(); });
        }
    };
    exportDialog._initializeExportLocalizedStrings = function () {
        _export_localization_1.paperKind.letter = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PaperKindLetter), value: _export_options_1.dashboardExportPaperKind.letter };
        _export_localization_1.paperKind.legal = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PaperKindLegal), value: _export_options_1.dashboardExportPaperKind.legal };
        _export_localization_1.paperKind.executive = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PaperKindExecutive), value: _export_options_1.dashboardExportPaperKind.executive };
        _export_localization_1.paperKind.a5 = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PaperKindA5), value: _export_options_1.dashboardExportPaperKind.a5 };
        _export_localization_1.paperKind.a4 = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PaperKindA4), value: _export_options_1.dashboardExportPaperKind.a4 };
        _export_localization_1.paperKind.a3 = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PaperKindA3), value: _export_options_1.dashboardExportPaperKind.a3 };
        _export_localization_1.pageLayout.auto = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PageLayoutAuto), value: _export_options_1.dashboardExportPageLayout.auto };
        _export_localization_1.pageLayout.portrait = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PageLayoutPortrait), value: _export_options_1.dashboardExportPageLayout.portrait };
        _export_localization_1.pageLayout.landscape = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PageLayoutLandscape), value: _export_options_1.dashboardExportPageLayout.landscape };
        _export_localization_1.scaleMode.none = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ScaleModeNone), value: _export_options_1.dashboardExportDocumentScaleMode.none };
        _export_localization_1.scaleMode.useScaleFactor = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ScaleModeUseScaleFactor), value: _export_options_1.dashboardExportDocumentScaleMode.useScaleFactor };
        _export_localization_1.scaleMode.autoFitToPageWidth = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ScaleModeAutoFitToPagesWidth), value: _export_options_1.dashboardExportDocumentScaleMode.autoFitToPagesWidth };
        _export_localization_1.dashboardStatePosition.below = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FilterStatePresentationAfter), value: _export_options_1.dashboardStateExportPosition.below };
        _export_localization_1.dashboardStatePosition.separatePage = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FilterStatePresentationAfterAndSplitPage), value: _export_options_1.dashboardStateExportPosition.separatePage };
        _export_localization_1.excelDashboardStatePosition.below = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FilterStatePresentationAfter), value: _export_options_1.dashboardStateExcelExportPosition.below };
        _export_localization_1.excelDashboardStatePosition.separateSheet = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FilterStatePresentationSplitSheet), value: _export_options_1.dashboardStateExcelExportPosition.separateSheet };
        _export_localization_1.imageFormat.png = { displayValue: 'PNG', value: _export_options_1.dashboardExportImageFormat.png };
        _export_localization_1.imageFormat.gif = { displayValue: 'GIF', value: _export_options_1.dashboardExportImageFormat.gif };
        _export_localization_1.imageFormat.jpg = { displayValue: 'JPG', value: _export_options_1.dashboardExportImageFormat.jpg };
        _export_localization_1.excelFormat.csv = { displayValue: 'CSV', value: _export_options_1.dashboardExportExcelFormat.csv };
        _export_localization_1.excelFormat.xls = { displayValue: 'XLS', value: _export_options_1.dashboardExportExcelFormat.xls };
        _export_localization_1.excelFormat.xlsx = { displayValue: 'XLSX', value: _export_options_1.dashboardExportExcelFormat.xlsx };
        _export_localization_1.sizeMode.none = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.SizeModeNone), value: _export_options_1.dashboardExportSizeMode.none };
        _export_localization_1.sizeMode.stretch = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.SizeModeStretch), value: _export_options_1.dashboardExportSizeMode.stretch };
        _export_localization_1.sizeMode.zoom = { displayValue: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.SizeModeZoom), value: _export_options_1.dashboardExportSizeMode.zoom };
    };
    return exportDialog;
}());
exports.exportDialog = exportDialog;


/***/ }),
/* 587 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.optionName = {
    pdfTitle: 'pdfTitle',
    imageTitle: 'imageTitle',
    fileName: 'fileName',
    autoFitPageCount: 'autoFitPageCount',
    cardAutoArrangeContent: 'cardAutoArrangeContent',
    chartAutomaticPageLayout: 'chartAutomaticPageLayout',
    chartSizeMode: 'chartSizeMode',
    pdfDashboardStatePosition: 'pdfDashboardStatePosition',
    gaugeAutoArrangeContent: 'gaugeAutoArrangeContent',
    gridFitToPageWidth: 'gridFitToPageWidth',
    gridPrintHeadersOnEveryPage: 'gridPrintHeadersOnEveryPage',
    mapAutomaticPageLayout: 'mapAutomaticPageLayout',
    mapSizeMode: 'mapSizeMode',
    pageLayout: 'pageLayout',
    paperKind: 'paperKind',
    pieAutoArrangeContent: 'pieAutoArrangeContent',
    pivotPrintHeadersOnEveryPage: 'pivotPrintHeadersOnEveryPage',
    rangeFilterAutomaticPageLayout: 'rangeFilterAutomaticPageLayout',
    rangeFilterSizeMode: 'rangeFilterSizeMode',
    pdfScaleFactor: 'pdfScaleFactor',
    scaleMode: 'scaleMode',
    dashboardAutomaticPageLayout: 'dashboardAutomaticPageLayout',
    pdfShowTitle: 'pdfShowTitle',
    treemapAutomaticPageLayout: 'treemapAutomaticPageLayout',
    treemapSizeMode: 'treemapSizeMode',
    imageFormat: 'imageFormat',
    resolution: 'resolution',
    imageScaleFactor: 'imageScaleFactor',
    imageShowTitle: 'imageShowTitle',
    csvValueSeparator: 'csvValueSeparator',
    excelDashboardStatePosition: 'excelDashboardStatePosition',
    excelFormat: 'excelFormat',
    pdfExportFilters: 'pdfExportFilters',
    imageExportFilters: 'imageExportFilters',
    excelExportFilters: 'excelExportFilters',
    pdfExportParameters: 'pdfExportParameters',
    imageExportParameters: 'imageExportParameters',
    excelExportParameters: 'excelExportParameters',
    pdfIncludeHiddenParameters: 'pdfIncludeHiddenParameters',
    imageIncludeHiddenParameters: 'imageIncludeHiddenParameters',
    excelIncludeHiddenParameters: 'excelIncludeHiddenParameters',
    fontInfo: 'fontInfo'
};
var exportOptionsCache = (function () {
    function exportOptionsCache() {
        this._initialize();
    }
    exportOptionsCache.prototype._initialize = function () {
        this.documentOptions = {};
        this.itemsOptions = {};
        this.pdfOptions = {};
        this.imageOptions = {};
        this.excelOptions = {};
    };
    exportOptionsCache.prototype._addOption = function (cache, key, defaultValue, actualValue) {
        if (defaultValue == actualValue)
            delete cache[key];
        else
            cache[key] = actualValue;
    };
    exportOptionsCache.prototype.add = function (name, defaultDocumentInfo, actualDocumentInfo) {
        var that = this;
        if (name === '') {
            this._addOption(that.documentOptions, exports.optionName.pdfTitle, defaultDocumentInfo.pdfExportOptions.Title, actualDocumentInfo.pdfExportOptions.Title);
            this._addOption(that.documentOptions, exports.optionName.imageTitle, defaultDocumentInfo.imageExportOptions.Title, actualDocumentInfo.imageExportOptions.Title);
            this._addOption(that.pdfOptions, exports.optionName.pdfShowTitle, defaultDocumentInfo.pdfExportOptions.ShowTitle, actualDocumentInfo.pdfExportOptions.ShowTitle);
            this._addOption(that.imageOptions, exports.optionName.imageShowTitle, defaultDocumentInfo.imageExportOptions.ShowTitle, actualDocumentInfo.imageExportOptions.ShowTitle);
        }
        this._addOption(that.pdfOptions, exports.optionName.pageLayout, defaultDocumentInfo.pdfExportOptions.PageLayout, actualDocumentInfo.pdfExportOptions.PageLayout);
        this._addOption(that.pdfOptions, exports.optionName.paperKind, defaultDocumentInfo.pdfExportOptions.PaperKind, actualDocumentInfo.pdfExportOptions.PaperKind);
        this.itemsOptions[name] = {};
        this._addOption(that.itemsOptions[name], exports.optionName.scaleMode, defaultDocumentInfo.pdfExportOptions.DocumentScaleMode, actualDocumentInfo.pdfExportOptions.DocumentScaleMode);
        this._addOption(that.itemsOptions[name], exports.optionName.dashboardAutomaticPageLayout, defaultDocumentInfo.pdfExportOptions.DashboardAutomaticPageLayout, actualDocumentInfo.pdfExportOptions.DashboardAutomaticPageLayout);
        this._addOption(that.itemsOptions[name], exports.optionName.pdfScaleFactor, defaultDocumentInfo.pdfExportOptions.ScaleFactor, actualDocumentInfo.pdfExportOptions.ScaleFactor);
        this._addOption(that.itemsOptions[name], exports.optionName.imageScaleFactor, defaultDocumentInfo.imageExportOptions.ScaleFactor, actualDocumentInfo.imageExportOptions.ScaleFactor);
        this._addOption(that.itemsOptions[name], exports.optionName.autoFitPageCount, defaultDocumentInfo.pdfExportOptions.AutoFitPageCount, actualDocumentInfo.pdfExportOptions.AutoFitPageCount);
        this._addOption(that.itemsOptions[name], exports.optionName.fileName, defaultDocumentInfo.fileName, actualDocumentInfo.fileName);
        this._addOption(that.itemsOptions[name], exports.optionName.gridPrintHeadersOnEveryPage, defaultDocumentInfo.pdfExportOptions.GridPrintHeadersOnEveryPage, actualDocumentInfo.pdfExportOptions.GridPrintHeadersOnEveryPage);
        this._addOption(that.itemsOptions[name], exports.optionName.gridFitToPageWidth, defaultDocumentInfo.pdfExportOptions.GridFitToPageWidth, actualDocumentInfo.pdfExportOptions.GridFitToPageWidth);
        this._addOption(that.itemsOptions[name], exports.optionName.pivotPrintHeadersOnEveryPage, defaultDocumentInfo.pdfExportOptions.PivotPrintHeadersOnEveryPage, actualDocumentInfo.pdfExportOptions.PivotPrintHeadersOnEveryPage);
        this._addOption(that.itemsOptions[name], exports.optionName.chartSizeMode, defaultDocumentInfo.pdfExportOptions.ChartSizeMode, actualDocumentInfo.pdfExportOptions.ChartSizeMode);
        this._addOption(that.itemsOptions[name], exports.optionName.chartAutomaticPageLayout, defaultDocumentInfo.pdfExportOptions.ChartAutomaticPageLayout, actualDocumentInfo.pdfExportOptions.ChartAutomaticPageLayout);
        this._addOption(that.itemsOptions[name], exports.optionName.mapSizeMode, defaultDocumentInfo.pdfExportOptions.MapSizeMode, actualDocumentInfo.pdfExportOptions.MapSizeMode);
        this._addOption(that.itemsOptions[name], exports.optionName.mapAutomaticPageLayout, defaultDocumentInfo.pdfExportOptions.MapAutomaticPageLayout, actualDocumentInfo.pdfExportOptions.MapAutomaticPageLayout);
        this._addOption(that.itemsOptions[name], exports.optionName.treemapSizeMode, defaultDocumentInfo.pdfExportOptions.TreemapSizeMode, actualDocumentInfo.pdfExportOptions.TreemapSizeMode);
        this._addOption(that.itemsOptions[name], exports.optionName.treemapAutomaticPageLayout, defaultDocumentInfo.pdfExportOptions.TreemapAutomaticPageLayout, actualDocumentInfo.pdfExportOptions.TreemapAutomaticPageLayout);
        this._addOption(that.itemsOptions[name], exports.optionName.rangeFilterSizeMode, defaultDocumentInfo.pdfExportOptions.rangeFilterSizeMode, actualDocumentInfo.pdfExportOptions.rangeFilterSizeMode);
        this._addOption(that.itemsOptions[name], exports.optionName.rangeFilterAutomaticPageLayout, defaultDocumentInfo.pdfExportOptions.RangeFilterAutomaticPageLayout, actualDocumentInfo.pdfExportOptions.RangeFilterAutomaticPageLayout);
        this._addOption(that.itemsOptions[name], exports.optionName.pieAutoArrangeContent, defaultDocumentInfo.pdfExportOptions.PieAutoArrangeContent, actualDocumentInfo.pdfExportOptions.PieAutoArrangeContent);
        this._addOption(that.itemsOptions[name], exports.optionName.gaugeAutoArrangeContent, defaultDocumentInfo.pdfExportOptions.GaugeAutoArrangeContent, actualDocumentInfo.pdfExportOptions.GaugeAutoArrangeContent);
        this._addOption(that.itemsOptions[name], exports.optionName.cardAutoArrangeContent, defaultDocumentInfo.pdfExportOptions.CardAutoArrangeContent, actualDocumentInfo.pdfExportOptions.CardAutoArrangeContent);
        if (name != '') {
            this._addOption(that.itemsOptions[name], exports.optionName.pdfShowTitle, defaultDocumentInfo.pdfExportOptions.ShowTitle, actualDocumentInfo.pdfExportOptions.ShowTitle);
            this._addOption(that.itemsOptions[name], exports.optionName.imageShowTitle, defaultDocumentInfo.imageExportOptions.ShowTitle, actualDocumentInfo.imageExportOptions.ShowTitle);
            this._addOption(that.itemsOptions[name], exports.optionName.pdfTitle, defaultDocumentInfo.pdfExportOptions.Title, actualDocumentInfo.pdfExportOptions.Title);
            this._addOption(that.itemsOptions[name], exports.optionName.imageTitle, defaultDocumentInfo.imageExportOptions.Title, actualDocumentInfo.imageExportOptions.Title);
        }
        this._addOption(that.documentOptions, exports.optionName.pdfDashboardStatePosition, defaultDocumentInfo.pdfExportOptions.DashboardStatePosition, actualDocumentInfo.pdfExportOptions.DashboardStatePosition);
        this._addOption(that.documentOptions, exports.optionName.pdfExportFilters, defaultDocumentInfo.pdfExportOptions.ExportFilters, actualDocumentInfo.pdfExportOptions.ExportFilters);
        this._addOption(that.documentOptions, exports.optionName.pdfExportParameters, defaultDocumentInfo.pdfExportOptions.ExportParameters, actualDocumentInfo.pdfExportOptions.ExportParameters);
        this._addOption(that.documentOptions, exports.optionName.pdfIncludeHiddenParameters, defaultDocumentInfo.pdfExportOptions.IncludeHiddenParameters, actualDocumentInfo.pdfExportOptions.IncludeHiddenParameters);
        this._addOption(that.documentOptions, exports.optionName.fontInfo, defaultDocumentInfo.pdfExportOptions.FontInfo, actualDocumentInfo.pdfExportOptions.FontInfo);
        this._addOption(that.imageOptions, exports.optionName.imageFormat, defaultDocumentInfo.imageExportOptions.Format, actualDocumentInfo.imageExportOptions.Format);
        this._addOption(that.imageOptions, exports.optionName.resolution, defaultDocumentInfo.imageExportOptions.Resolution, actualDocumentInfo.imageExportOptions.Resolution);
        this._addOption(that.documentOptions, exports.optionName.imageExportFilters, defaultDocumentInfo.imageExportOptions.ExportFilters, actualDocumentInfo.imageExportOptions.ExportFilters);
        this._addOption(that.documentOptions, exports.optionName.imageExportParameters, defaultDocumentInfo.imageExportOptions.ExportParameters, actualDocumentInfo.imageExportOptions.ExportParameters);
        this._addOption(that.documentOptions, exports.optionName.imageIncludeHiddenParameters, defaultDocumentInfo.imageExportOptions.IncludeHiddenParameters, actualDocumentInfo.imageExportOptions.IncludeHiddenParameters);
        this._addOption(that.documentOptions, exports.optionName.fontInfo, defaultDocumentInfo.imageExportOptions.FontInfo, actualDocumentInfo.imageExportOptions.FontInfo);
        this._addOption(that.excelOptions, exports.optionName.excelFormat, defaultDocumentInfo.excelExportOptions.Format, actualDocumentInfo.excelExportOptions.Format);
        this._addOption(that.excelOptions, exports.optionName.csvValueSeparator, defaultDocumentInfo.excelExportOptions.CsvValueSeparator, actualDocumentInfo.excelExportOptions.CsvValueSeparator);
        this._addOption(that.excelOptions, exports.optionName.excelDashboardStatePosition, defaultDocumentInfo.excelExportOptions.DashboardStatePosition, actualDocumentInfo.excelExportOptions.DashboardStatePosition);
        this._addOption(that.documentOptions, exports.optionName.excelExportFilters, defaultDocumentInfo.excelExportOptions.ExportFilters, actualDocumentInfo.excelExportOptions.ExportFilters);
        this._addOption(that.documentOptions, exports.optionName.excelExportParameters, defaultDocumentInfo.excelExportOptions.ExportParameters, actualDocumentInfo.excelExportOptions.ExportParameters);
        this._addOption(that.documentOptions, exports.optionName.excelIncludeHiddenParameters, defaultDocumentInfo.excelExportOptions.IncludeHiddenParameters, actualDocumentInfo.excelExportOptions.IncludeHiddenParameters);
    };
    exportOptionsCache.prototype._setActualValue = function (cache, key, setActual, defaultValue) {
        var value = cache[key] != undefined ? cache[key] : defaultValue;
        setActual(value);
    };
    exportOptionsCache.prototype.getActualDocumentInfo = function (name, defaultDocumentInfo) {
        var that = this;
        var actualDocumentInfo = {
            pdfExportOptions: {},
            imageExportOptions: {},
            excelExportOptions: {}
        };
        if (name === '') {
            this._setActualValue(that.documentOptions, exports.optionName.pdfTitle, function (actual) { actualDocumentInfo.pdfExportOptions.Title = actual; }, defaultDocumentInfo.pdfExportOptions.Title);
            this._setActualValue(that.documentOptions, exports.optionName.imageTitle, function (actual) { actualDocumentInfo.imageExportOptions.Title = actual; }, defaultDocumentInfo.imageExportOptions.Title);
            this._setActualValue(that.pdfOptions, exports.optionName.pdfShowTitle, function (actual) { actualDocumentInfo.pdfExportOptions.ShowTitle = actual; }, defaultDocumentInfo.pdfExportOptions.ShowTitle);
            this._setActualValue(that.imageOptions, exports.optionName.imageShowTitle, function (actual) { actualDocumentInfo.imageExportOptions.ShowTitle = actual; }, defaultDocumentInfo.imageExportOptions.ShowTitle);
        }
        this._setActualValue(that.pdfOptions, exports.optionName.paperKind, function (actual) { actualDocumentInfo.pdfExportOptions.PaperKind = actual; }, defaultDocumentInfo.pdfExportOptions.PaperKind);
        this._setActualValue(that.pdfOptions, exports.optionName.pageLayout, function (actual) { actualDocumentInfo.pdfExportOptions.PageLayout = actual; }, defaultDocumentInfo.pdfExportOptions.PageLayout);
        if (this.itemsOptions[name] === undefined)
            this.itemsOptions[name] = {};
        this._setActualValue(that.itemsOptions[name], exports.optionName.scaleMode, function (actual) { actualDocumentInfo.pdfExportOptions.DocumentScaleMode = actual; }, defaultDocumentInfo.pdfExportOptions.DocumentScaleMode);
        this._setActualValue(that.itemsOptions[name], exports.optionName.dashboardAutomaticPageLayout, function (actual) { actualDocumentInfo.pdfExportOptions.DashboardAutomaticPageLayout = actual; }, defaultDocumentInfo.pdfExportOptions.DashboardAutomaticPageLayout);
        this._setActualValue(that.itemsOptions[name], exports.optionName.pdfScaleFactor, function (actual) { actualDocumentInfo.pdfExportOptions.ScaleFactor = actual; }, defaultDocumentInfo.pdfExportOptions.ScaleFactor);
        this._setActualValue(that.itemsOptions[name], exports.optionName.imageScaleFactor, function (actual) { actualDocumentInfo.imageExportOptions.ScaleFactor = actual; }, defaultDocumentInfo.imageExportOptions.ScaleFactor);
        this._setActualValue(that.itemsOptions[name], exports.optionName.autoFitPageCount, function (actual) { actualDocumentInfo.pdfExportOptions.AutoFitPageCount = actual; }, defaultDocumentInfo.pdfExportOptions.AutoFitPageCount);
        this._setActualValue(that.itemsOptions[name], exports.optionName.fileName, function (actual) { actualDocumentInfo.fileName = actual; }, defaultDocumentInfo.fileName);
        this._setActualValue(that.itemsOptions[name], exports.optionName.fontInfo, function (actual) { actualDocumentInfo.imageExportOptions.FontInfo = actual; }, defaultDocumentInfo.imageExportOptions.FontInfo);
        this._setActualValue(that.itemsOptions[name], exports.optionName.gridPrintHeadersOnEveryPage, function (actual) { actualDocumentInfo.pdfExportOptions.GridPrintHeadersOnEveryPage = actual; }, defaultDocumentInfo.pdfExportOptions.GridPrintHeadersOnEveryPage);
        this._setActualValue(that.itemsOptions[name], exports.optionName.gridFitToPageWidth, function (actual) { actualDocumentInfo.pdfExportOptions.GridFitToPageWidth = actual; }, defaultDocumentInfo.pdfExportOptions.GridFitToPageWidth);
        this._setActualValue(that.itemsOptions[name], exports.optionName.pivotPrintHeadersOnEveryPage, function (actual) { actualDocumentInfo.pdfExportOptions.PivotPrintHeadersOnEveryPage = actual; }, defaultDocumentInfo.pdfExportOptions.PivotPrintHeadersOnEveryPage);
        this._setActualValue(that.itemsOptions[name], exports.optionName.chartSizeMode, function (actual) { actualDocumentInfo.pdfExportOptions.ChartSizeMode = actual; }, defaultDocumentInfo.pdfExportOptions.ChartSizeMode);
        this._setActualValue(that.itemsOptions[name], exports.optionName.chartAutomaticPageLayout, function (actual) { actualDocumentInfo.pdfExportOptions.ChartAutomaticPageLayout = actual; }, defaultDocumentInfo.pdfExportOptions.ChartAutomaticPageLayout);
        this._setActualValue(that.itemsOptions[name], exports.optionName.mapSizeMode, function (actual) { actualDocumentInfo.pdfExportOptions.MapSizeMode = actual; }, defaultDocumentInfo.pdfExportOptions.MapSizeMode);
        this._setActualValue(that.itemsOptions[name], exports.optionName.mapAutomaticPageLayout, function (actual) { actualDocumentInfo.pdfExportOptions.MapAutomaticPageLayout = actual; }, defaultDocumentInfo.pdfExportOptions.MapAutomaticPageLayout);
        this._setActualValue(that.itemsOptions[name], exports.optionName.treemapSizeMode, function (actual) { actualDocumentInfo.pdfExportOptions.TreemapSizeMode = actual; }, defaultDocumentInfo.pdfExportOptions.TreemapSizeMode);
        this._setActualValue(that.itemsOptions[name], exports.optionName.treemapAutomaticPageLayout, function (actual) { actualDocumentInfo.pdfExportOptions.TreemapAutomaticPageLayout = actual; }, defaultDocumentInfo.pdfExportOptions.TreemapAutomaticPageLayout);
        this._setActualValue(that.itemsOptions[name], exports.optionName.rangeFilterSizeMode, function (actual) { actualDocumentInfo.pdfExportOptions.RangeFilterSizeMode = actual; }, defaultDocumentInfo.pdfExportOptions.RangeFilterSizeMode);
        this._setActualValue(that.itemsOptions[name], exports.optionName.rangeFilterAutomaticPageLayout, function (actual) { actualDocumentInfo.pdfExportOptions.RangeFilterAutomaticPageLayout = actual; }, defaultDocumentInfo.pdfExportOptions.RangeFilterAutomaticPageLayout);
        this._setActualValue(that.itemsOptions[name], exports.optionName.pieAutoArrangeContent, function (actual) { actualDocumentInfo.pdfExportOptions.PieAutoArrangeContent = actual; }, defaultDocumentInfo.pdfExportOptions.PieAutoArrangeContent);
        this._setActualValue(that.itemsOptions[name], exports.optionName.gaugeAutoArrangeContent, function (actual) { actualDocumentInfo.pdfExportOptions.GaugeAutoArrangeContent = actual; }, defaultDocumentInfo.pdfExportOptions.GaugeAutoArrangeContent);
        this._setActualValue(that.itemsOptions[name], exports.optionName.cardAutoArrangeContent, function (actual) { actualDocumentInfo.pdfExportOptions.CardAutoArrangeContent = actual; }, defaultDocumentInfo.pdfExportOptions.CardAutoArrangeContent);
        if (name != '') {
            this._setActualValue(that.itemsOptions[name], exports.optionName.pdfShowTitle, function (actual) { actualDocumentInfo.pdfExportOptions.ShowTitle = actual; }, defaultDocumentInfo.pdfExportOptions.ShowTitle);
            this._setActualValue(that.itemsOptions[name], exports.optionName.imageShowTitle, function (actual) { actualDocumentInfo.imageExportOptions.ShowTitle = actual; }, defaultDocumentInfo.imageExportOptions.ShowTitle);
            this._setActualValue(that.itemsOptions[name], exports.optionName.pdfTitle, function (actual) { actualDocumentInfo.pdfExportOptions.Title = actual; }, defaultDocumentInfo.pdfExportOptions.Title);
            this._setActualValue(that.itemsOptions[name], exports.optionName.imageTitle, function (actual) { actualDocumentInfo.imageExportOptions.Title = actual; }, defaultDocumentInfo.imageExportOptions.Title);
        }
        this._setActualValue(that.documentOptions, exports.optionName.pdfDashboardStatePosition, function (actual) { actualDocumentInfo.pdfExportOptions.DashboardStatePosition = actual; }, defaultDocumentInfo.pdfExportOptions.DashboardStatePosition);
        this._setActualValue(that.documentOptions, exports.optionName.pdfExportFilters, function (actual) { actualDocumentInfo.pdfExportOptions.ExportFilters = actual; }, defaultDocumentInfo.pdfExportOptions.ExportFilters);
        this._setActualValue(that.documentOptions, exports.optionName.pdfExportParameters, function (actual) { actualDocumentInfo.pdfExportOptions.ExportParameters = actual; }, defaultDocumentInfo.pdfExportOptions.ExportParameters);
        this._setActualValue(that.documentOptions, exports.optionName.pdfIncludeHiddenParameters, function (actual) { actualDocumentInfo.pdfExportOptions.IncludeHiddenParameters = actual; }, defaultDocumentInfo.pdfExportOptions.IncludeHiddenParameters);
        this._setActualValue(that.documentOptions, exports.optionName.fontInfo, function (actual) { actualDocumentInfo.pdfExportOptions.FontInfo = actual; }, defaultDocumentInfo.pdfExportOptions.FontInfo);
        this._setActualValue(that.imageOptions, exports.optionName.imageFormat, function (actual) { actualDocumentInfo.imageExportOptions.Format = actual; }, defaultDocumentInfo.imageExportOptions.Format);
        this._setActualValue(that.imageOptions, exports.optionName.resolution, function (actual) { actualDocumentInfo.imageExportOptions.Resolution = actual; }, defaultDocumentInfo.imageExportOptions.Resolution);
        this._setActualValue(that.documentOptions, exports.optionName.imageExportFilters, function (actual) { actualDocumentInfo.imageExportOptions.ExportFilters = actual; }, defaultDocumentInfo.imageExportOptions.ExportFilters);
        this._setActualValue(that.documentOptions, exports.optionName.imageExportParameters, function (actual) { actualDocumentInfo.imageExportOptions.ExportParameters = actual; }, defaultDocumentInfo.imageExportOptions.ExportParameters);
        this._setActualValue(that.documentOptions, exports.optionName.imageIncludeHiddenParameters, function (actual) { actualDocumentInfo.imageExportOptions.IncludeHiddenParameters = actual; }, defaultDocumentInfo.imageExportOptions.IncludeHiddenParameters);
        this._setActualValue(that.excelOptions, exports.optionName.excelFormat, function (actual) { actualDocumentInfo.excelExportOptions.Format = actual; }, defaultDocumentInfo.excelExportOptions.Format);
        this._setActualValue(that.excelOptions, exports.optionName.csvValueSeparator, function (actual) { actualDocumentInfo.excelExportOptions.CsvValueSeparator = actual; }, defaultDocumentInfo.excelExportOptions.CsvValueSeparator);
        this._setActualValue(that.excelOptions, exports.optionName.excelDashboardStatePosition, function (actual) { actualDocumentInfo.excelExportOptions.DashboardStatePosition = actual; }, defaultDocumentInfo.excelExportOptions.DashboardStatePosition);
        this._setActualValue(that.documentOptions, exports.optionName.excelExportFilters, function (actual) { actualDocumentInfo.excelExportOptions.ExportFilters = actual; }, defaultDocumentInfo.excelExportOptions.ExportFilters);
        this._setActualValue(that.documentOptions, exports.optionName.excelExportParameters, function (actual) { actualDocumentInfo.excelExportOptions.ExportParameters = actual; }, defaultDocumentInfo.excelExportOptions.ExportParameters);
        this._setActualValue(that.documentOptions, exports.optionName.excelIncludeHiddenParameters, function (actual) { actualDocumentInfo.excelExportOptions.IncludeHiddenParameters = actual; }, defaultDocumentInfo.excelExportOptions.IncludeHiddenParameters);
        return actualDocumentInfo;
    };
    return exportOptionsCache;
}());
exports.exportOptionsCache = exportOptionsCache;


/***/ }),
/* 588 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var array_store_1 = __webpack_require__(168);
var check_box_1 = __webpack_require__(170);
var date_box_1 = __webpack_require__(100);
var number_box_1 = __webpack_require__(589);
var radio_group_1 = __webpack_require__(722);
var select_box_1 = __webpack_require__(173);
var tag_box_1 = __webpack_require__(101);
var text_box_1 = __webpack_require__(121);
var $ = __webpack_require__(2);
var _localization_ids_1 = __webpack_require__(21);
var _localizer_1 = __webpack_require__(16);
var _utils_1 = __webpack_require__(3);
var _export_options_1 = __webpack_require__(147);
var _dialog_form_1 = __webpack_require__(152);
var _export_localization_1 = __webpack_require__(353);
var DXNUMBERBOX_MIN = 1, DXNUMBERBOX_MAX = 999;
var dialogEditorFactory = {
    dxTagBox: { name: 'dxTagBox', create: function (element, options) { return new tag_box_1.default(element, options); } },
    dxSelectBox: { name: 'dxSelectBox', create: function (element, options) { return new select_box_1.default(element, options); } },
    dxRadioGroup: { name: 'dxRadioGroup', create: function (element, options) { return new radio_group_1.default(element, options); } },
    dxNumberBox: { name: 'dxNumberBox', create: function (element, options) { return new number_box_1.default(element, options); } },
    dxTextBox: { name: 'dxTextBox', create: function (element, options) { return new text_box_1.default(element, options); } },
    dxCheckBox: { name: 'dxCheckBox', create: function (element, options) { return new check_box_1.default(element, options); } },
    dxDateBox: { name: 'dxDateBox', create: function (element, options) { return new date_box_1.default(element, options); } }
};
var labeledEditor = (function () {
    function labeledEditor(options) {
        this.options = options;
        this._initialize();
    }
    labeledEditor.prototype._initialize = function () {
        var that = this;
        var controlOptions = _utils_1.deepExtend(that._getControlOptions(that.options), that.options.controlOptions || {});
        that.valueName = controlOptions.valueName;
        var labelText = that.options.labelText;
        if (!that.options.customText)
            labelText += ':';
        that.labelDiv = document.createElement('div');
        that.labelDiv.classList.add(_dialog_form_1.dialogClasses.name);
        that.labelDiv.classList.add(that._generateElementNameClassName(that.options.controlCreator.name, that.options.largeMargin));
        that.labelDiv.innerText = labelText;
        that.editorDiv = document.createElement('div');
        that.editorDiv.classList.add(_dialog_form_1.dialogClasses.box);
        var elementClass = that._getElementClassName(that.options.controlCreator.name, that.options.largeMargin);
        if (elementClass)
            that.editorDiv.classList.add(elementClass);
        this.editor = that.options.controlCreator.create(that.editorDiv, controlOptions);
        that.enabled = true;
    };
    labeledEditor.prototype.setEnabled = function (enabled) {
        var that = this;
        that.enabled = enabled;
        if (enabled) {
            that.labelDiv.classList.remove(_dialog_form_1.dialogClasses.disabledName);
        }
        else {
            that.labelDiv.classList.add(_dialog_form_1.dialogClasses.disabledName);
        }
        that.editor.option('disabled', !enabled);
    };
    labeledEditor.prototype.setVisibility = function (visible) {
        var that = this;
        that.enabled = visible;
        if (visible) {
            that.labelDiv.style.display = 'inline-block';
            that.editorDiv.style.display = 'inline-block';
        }
        else {
            that.labelDiv.style.display = 'none';
            that.editorDiv.style.display = 'none';
        }
    };
    labeledEditor.prototype.set = function (value) {
        var that = this;
        that.editor.option(that.valueName, value);
    };
    labeledEditor.prototype.get = function () {
        var that = this;
        return that.editor.option(that.valueName);
    };
    labeledEditor.prototype.dispose = function () {
        if (this.editor)
            this.editor.dispose();
    };
    labeledEditor.prototype._getControlOptions = function (options) {
        switch (options.controlCreator.name) {
            case dialogEditorFactory.dxSelectBox.name:
                return {
                    dataSource: {
                        store: new array_store_1.default(options.values),
                        paginate: false
                    },
                    itemTemplate: function (item) { return item.displayValue; },
                    displayExpr: 'displayValue',
                    valueExpr: 'value',
                    valueName: 'value',
                    placeholder: _localizer_1.localizer.getString(_localization_ids_1.localizationId.FilterElementCheckedComboBoxNoDataCaption),
                    noDataText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.FilterElementNoDataToDisplay),
                };
            case dialogEditorFactory.dxRadioGroup.name:
                var dataSource = options.values.map(function (value) { return value.value; });
                return {
                    dataSource: dataSource,
                    itemTemplate: function (item) {
                        return options.values.filter(function (value) {
                            return value.value === item;
                        })[0].displayValue;
                    },
                    valueName: 'value'
                };
            case dialogEditorFactory.dxNumberBox.name:
                return {
                    valueName: 'value',
                    min: DXNUMBERBOX_MIN,
                    max: DXNUMBERBOX_MAX
                };
            case dialogEditorFactory.dxCheckBox.name:
                return {
                    valueName: 'value'
                };
            case dialogEditorFactory.dxTextBox.name:
                return {
                    valueName: 'value'
                };
        }
    };
    labeledEditor.prototype._generateElementNameClassName = function (controlCreator, largeMargin) {
        if (largeMargin)
            return _dialog_form_1.dialogClasses.name + '-margin-top';
        if ((controlCreator == dialogEditorFactory.dxRadioGroup.name) || (controlCreator == dialogEditorFactory.dxCheckBox.name)) {
            return _dialog_form_1.dialogClasses.name + '-top';
        }
        return _dialog_form_1.dialogClasses.name + '-middle';
    };
    labeledEditor.prototype._getElementClassName = function (controlName, largeMargin) {
        if (largeMargin)
            return _dialog_form_1.dialogClasses.elementLargeMarginTop;
        switch (controlName) {
            case dialogEditorFactory.dxSelectBox.name:
            case dialogEditorFactory.dxTextBox.name:
                return _dialog_form_1.dialogClasses.elementTextBox;
            case dialogEditorFactory.dxNumberBox.name:
                return _dialog_form_1.dialogClasses.elementNumberBox;
            default:
                return '';
        }
    };
    return labeledEditor;
}());
exports.labeledEditor = labeledEditor;
var optionsGroup = (function () {
    function optionsGroup() {
    }
    optionsGroup.prototype.setEnabled = function (enabled) {
        var that = this;
        that.enabled = enabled;
        that.getEditors().forEach(function (editor) {
            editor.setEnabled(enabled);
        });
    };
    optionsGroup.prototype.createEditors = function (additionalOptions) {
        this._additionalOptions = additionalOptions;
        this._initialize();
    };
    optionsGroup.prototype.dispose = function () {
        this.getEditors().forEach(function (editor) { return editor.dispose(); });
    };
    return optionsGroup;
}());
exports.optionsGroup = optionsGroup;
var dashboardStateOptionsGroup = (function (_super) {
    __extends(dashboardStateOptionsGroup, _super);
    function dashboardStateOptionsGroup() {
        return _super.call(this) || this;
    }
    dashboardStateOptionsGroup.prototype._initialize = function () {
        var that = this;
        this.exportFilters = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.IncludeExportDashboardState),
            controlCreator: dialogEditorFactory.dxCheckBox,
            largeMargin: true,
            controlOptions: {
                text: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ExportFilters),
                onValueChanged: function (args) {
                    that.dashboardStatePosition.setEnabled(that.exportParameters.get() || args.component.option('value'));
                }
            }
        });
        this.exportParameters = new labeledEditor({
            labelText: ' ',
            customText: true,
            controlCreator: dialogEditorFactory.dxCheckBox,
            controlOptions: {
                text: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ExportParameters),
                onValueChanged: function (args) {
                    that.dashboardStatePosition.setEnabled(that.exportFilters.get() || args.component.option('value'));
                }
            }
        });
        this.dashboardStatePosition = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.DashboardStatePosition),
            controlCreator: dialogEditorFactory.dxSelectBox,
            values: [_export_localization_1.dashboardStatePosition.below, _export_localization_1.dashboardStatePosition.separatePage],
            controlOptions: { container: this._additionalOptions.popupContainer }
        });
        that.dashboardStatePosition.setEnabled(that.exportFilters.get() || that.exportParameters.get());
    };
    dashboardStateOptionsGroup.prototype.set = function (documentInfo) {
        this.exportFilters.set(documentInfo.pdfExportOptions.ExportFilters);
        this.exportParameters.set(documentInfo.pdfExportOptions.ExportParameters);
        this.dashboardStatePosition.set(documentInfo.pdfExportOptions.DashboardStatePosition);
    };
    dashboardStateOptionsGroup.prototype.apply = function (documentInfo) {
        documentInfo.pdfExportOptions.ExportFilters = this.exportFilters.get();
        documentInfo.pdfExportOptions.ExportParameters = this.exportParameters.get();
        documentInfo.pdfExportOptions.DashboardStatePosition = this.dashboardStatePosition.get();
    };
    dashboardStateOptionsGroup.prototype.getEditors = function () {
        return [this.exportFilters, this.exportParameters, this.dashboardStatePosition];
    };
    return dashboardStateOptionsGroup;
}(optionsGroup));
exports.dashboardStateOptionsGroup = dashboardStateOptionsGroup;
var captionOptionsGroup = (function (_super) {
    __extends(captionOptionsGroup, _super);
    function captionOptionsGroup(_showCaptionValue) {
        var _this = _super.call(this) || this;
        _this._showCaptionValue = _showCaptionValue;
        return _this;
    }
    captionOptionsGroup.prototype._initialize = function () {
        var that = this;
        this.showCaption = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ShowTitle),
            controlCreator: dialogEditorFactory.dxCheckBox,
            controlOptions: {
                onValueChanged: function (args) {
                    that.caption.setEnabled(args.component.option('value'));
                }
            }
        });
        this.caption = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.Title),
            controlCreator: dialogEditorFactory.dxTextBox
        });
        that.caption.setEnabled(this._showCaptionValue);
    };
    captionOptionsGroup.prototype.set = function (documentInfo) {
        this.showCaption.set(documentInfo.pdfExportOptions.ShowTitle);
        this.caption.set(documentInfo.pdfExportOptions.Title);
    };
    captionOptionsGroup.prototype.apply = function (documentInfo) {
        documentInfo.pdfExportOptions.ShowTitle = this.showCaption.get();
        documentInfo.pdfExportOptions.Title = this.caption.get();
    };
    captionOptionsGroup.prototype.getEditors = function () {
        return [this.showCaption, this.caption];
    };
    return captionOptionsGroup;
}(optionsGroup));
exports.captionOptionsGroup = captionOptionsGroup;
var scaleModeOptionsGroup = (function (_super) {
    __extends(scaleModeOptionsGroup, _super);
    function scaleModeOptionsGroup(_scaleModeValue) {
        var _this = _super.call(this) || this;
        _this._scaleModeValue = _scaleModeValue;
        _this.visibilityUpdated = $.Callbacks();
        return _this;
    }
    scaleModeOptionsGroup.prototype._initialize = function () {
        var that = this;
        this.scaleMode = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ScaleMode),
            controlCreator: dialogEditorFactory.dxSelectBox,
            values: [_export_localization_1.scaleMode.none, _export_localization_1.scaleMode.useScaleFactor, _export_localization_1.scaleMode.autoFitToPageWidth],
            controlOptions: {
                onValueChanged: function (args) {
                    that._setScaleModeOptionsVisibility(args.component.option('value'));
                },
                container: this._additionalOptions.popupContainer
            }
        });
        this.scaleFactor = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ScaleFactor),
            controlCreator: dialogEditorFactory.dxNumberBox
        });
        this.autoFitPageCount = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.AutoFitPageCount),
            controlCreator: dialogEditorFactory.dxNumberBox
        });
        that._setScaleModeOptionsVisibility(this._scaleModeValue);
    };
    scaleModeOptionsGroup.prototype.set = function (documentInfo) {
        this.scaleMode.set(documentInfo.pdfExportOptions.DocumentScaleMode);
        this.scaleFactor.set(documentInfo.pdfExportOptions.ScaleFactor);
        this.autoFitPageCount.set(documentInfo.pdfExportOptions.AutoFitPageCount);
        this._setScaleModeOptionsVisibility(this.scaleMode.get());
    };
    scaleModeOptionsGroup.prototype.apply = function (documentInfo) {
        if (this.scaleMode.enabled) {
            documentInfo.pdfExportOptions.DocumentScaleMode = this.scaleMode.get();
            documentInfo.pdfExportOptions.ScaleFactor = this.scaleFactor.get();
            documentInfo.pdfExportOptions.AutoFitPageCount = this.autoFitPageCount.get();
        }
        else {
            documentInfo.pdfExportOptions.ScaleFactor = 1;
            documentInfo.pdfExportOptions.AutoFitPageCount = 1;
        }
    };
    scaleModeOptionsGroup.prototype.getEditors = function () {
        return [this.scaleMode, this.scaleFactor, this.autoFitPageCount];
    };
    scaleModeOptionsGroup.prototype._setScaleModeOptionsVisibility = function (scaleModeValue) {
        var that = this;
        switch (scaleModeValue) {
            case _export_localization_1.scaleMode.none.value:
                that.scaleFactor.setVisibility(false);
                that.autoFitPageCount.setVisibility(false);
                break;
            case _export_localization_1.scaleMode.useScaleFactor.value:
                that.scaleFactor.setVisibility(true);
                that.autoFitPageCount.setVisibility(false);
                break;
            case _export_localization_1.scaleMode.autoFitToPageWidth.value:
                that.scaleFactor.setVisibility(false);
                that.autoFitPageCount.setVisibility(true);
                break;
        }
        that.visibilityUpdated.fire();
    };
    return scaleModeOptionsGroup;
}(optionsGroup));
exports.scaleModeOptionsGroup = scaleModeOptionsGroup;
var documentOptionsGroup = (function (_super) {
    __extends(documentOptionsGroup, _super);
    function documentOptionsGroup(_includeCaptionValue) {
        var _this = _super.call(this) || this;
        _this._includeCaptionValue = _includeCaptionValue;
        return _this;
    }
    documentOptionsGroup.prototype._initialize = function () {
        this.pageLayout = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PageLayout),
            controlCreator: dialogEditorFactory.dxRadioGroup,
            values: [_export_localization_1.pageLayout.portrait, _export_localization_1.pageLayout.landscape]
        });
        this.paperKind = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PaperKind),
            controlCreator: dialogEditorFactory.dxSelectBox,
            values: [_export_localization_1.paperKind.letter, _export_localization_1.paperKind.legal, _export_localization_1.paperKind.executive, _export_localization_1.paperKind.a5, _export_localization_1.paperKind.a4, _export_localization_1.paperKind.a3],
            controlOptions: { container: this._additionalOptions.popupContainer }
        });
        this.captionOptionsGroup = new captionOptionsGroup(this._includeCaptionValue);
    };
    documentOptionsGroup.prototype.createEditors = function (additionalOptions) {
        _super.prototype.createEditors.call(this, additionalOptions);
        this.captionOptionsGroup.createEditors(additionalOptions);
    };
    documentOptionsGroup.prototype.set = function (documentInfo) {
        this.pageLayout.set(documentInfo.pdfExportOptions.PageLayout);
        this.paperKind.set(documentInfo.pdfExportOptions.PaperKind);
        this.captionOptionsGroup.set(documentInfo);
    };
    documentOptionsGroup.prototype.apply = function (documentInfo) {
        documentInfo.pdfExportOptions.PageLayout = this.pageLayout.get();
        documentInfo.pdfExportOptions.PaperKind = this.paperKind.get();
        this.captionOptionsGroup.apply(documentInfo);
    };
    documentOptionsGroup.prototype.getEditors = function () {
        var that = this;
        var editors = [this.pageLayout, this.paperKind];
        that.captionOptionsGroup.getEditors().forEach(function (editor) {
            editors.push(editor);
        });
        return editors;
    };
    return documentOptionsGroup;
}(optionsGroup));
exports.documentOptionsGroup = documentOptionsGroup;
var textItemOptionsGroup = (function (_super) {
    __extends(textItemOptionsGroup, _super);
    function textItemOptionsGroup(_showCaptionValue) {
        var _this = _super.call(this) || this;
        _this._showCaptionValue = _showCaptionValue;
        return _this;
    }
    textItemOptionsGroup.prototype._initialize = function () {
        this.fileName = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FileName),
            controlCreator: dialogEditorFactory.dxTextBox
        });
        this.documentOptionsGroup = new documentOptionsGroup(this._showCaptionValue);
        this.dashboardStateOptionsGroup = new dashboardStateOptionsGroup();
    };
    textItemOptionsGroup.prototype.createEditors = function (additionalOptions) {
        _super.prototype.createEditors.call(this, additionalOptions);
        this.documentOptionsGroup.createEditors(additionalOptions);
        this.dashboardStateOptionsGroup.createEditors(additionalOptions);
    };
    textItemOptionsGroup.prototype.set = function (documentInfo) {
        this.fileName.set(documentInfo.fileName);
        this.documentOptionsGroup.set(documentInfo);
        this.dashboardStateOptionsGroup.set(documentInfo);
    };
    textItemOptionsGroup.prototype.apply = function (documentInfo) {
        documentInfo.fileName = this.fileName.get();
        this.documentOptionsGroup.apply(documentInfo);
        this.dashboardStateOptionsGroup.apply(documentInfo);
    };
    textItemOptionsGroup.prototype.getEditors = function () {
        var that = this;
        var editors = [this.fileName];
        that.documentOptionsGroup.getEditors().forEach(function (editor) {
            editors.push(editor);
        });
        that.dashboardStateOptionsGroup.getEditors().forEach(function (editor) {
            editors.push(editor);
        });
        return editors;
    };
    return textItemOptionsGroup;
}(optionsGroup));
exports.textItemOptionsGroup = textItemOptionsGroup;
var boundImageItemOptionsGroup = (function (_super) {
    __extends(boundImageItemOptionsGroup, _super);
    function boundImageItemOptionsGroup(_showCaptionValue, _scaleModeValue) {
        var _this = _super.call(this) || this;
        _this._showCaptionValue = _showCaptionValue;
        _this._scaleModeValue = _scaleModeValue;
        return _this;
    }
    boundImageItemOptionsGroup.prototype._initialize = function () {
        this.fileName = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FileName),
            controlCreator: dialogEditorFactory.dxTextBox
        });
        this.documentOptionsGroup = new documentOptionsGroup(this._showCaptionValue);
        this.scaleModeOptionsGroup = new scaleModeOptionsGroup(this._scaleModeValue);
        this.dashboardStateOptionsGroup = new dashboardStateOptionsGroup();
    };
    boundImageItemOptionsGroup.prototype.createEditors = function (additionalOptions) {
        _super.prototype.createEditors.call(this, additionalOptions);
        this.documentOptionsGroup.createEditors(additionalOptions);
        this.scaleModeOptionsGroup.createEditors(additionalOptions);
        this.dashboardStateOptionsGroup.createEditors(additionalOptions);
    };
    boundImageItemOptionsGroup.prototype.set = function (documentInfo) {
        this.fileName.set(documentInfo.fileName);
        this.documentOptionsGroup.set(documentInfo);
        this.scaleModeOptionsGroup.set(documentInfo);
        this.dashboardStateOptionsGroup.set(documentInfo);
    };
    boundImageItemOptionsGroup.prototype.apply = function (documentInfo) {
        documentInfo.fileName = this.fileName.get();
        this.documentOptionsGroup.apply(documentInfo);
        this.scaleModeOptionsGroup.apply(documentInfo);
        this.dashboardStateOptionsGroup.apply(documentInfo);
    };
    boundImageItemOptionsGroup.prototype.getEditors = function () {
        var that = this;
        var editors = [that.fileName];
        that.documentOptionsGroup.getEditors().forEach(function (editor) {
            editors.push(editor);
        });
        that.scaleModeOptionsGroup.getEditors().forEach(function (editor) {
            editors.push(editor);
        });
        that.dashboardStateOptionsGroup.getEditors().forEach(function (editor) {
            editors.push(editor);
        });
        return editors;
    };
    return boundImageItemOptionsGroup;
}(optionsGroup));
exports.boundImageItemOptionsGroup = boundImageItemOptionsGroup;
var imageItemOptionsGroup = (function (_super) {
    __extends(imageItemOptionsGroup, _super);
    function imageItemOptionsGroup(_showCaptionValue, _scaleModeValue) {
        var _this = _super.call(this) || this;
        _this._showCaptionValue = _showCaptionValue;
        _this._scaleModeValue = _scaleModeValue;
        return _this;
    }
    imageItemOptionsGroup.prototype._initialize = function () {
        var that = this;
        this.pageLayout = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PageLayout),
            controlCreator: dialogEditorFactory.dxRadioGroup,
            values: [_export_localization_1.pageLayout.portrait, _export_localization_1.pageLayout.landscape]
        });
        this.paperKind = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PaperKind),
            controlCreator: dialogEditorFactory.dxSelectBox,
            values: [_export_localization_1.paperKind.letter, _export_localization_1.paperKind.legal, _export_localization_1.paperKind.executive, _export_localization_1.paperKind.a5, _export_localization_1.paperKind.a4, _export_localization_1.paperKind.a3],
            controlOptions: { container: this._additionalOptions.popupContainer }
        });
        this.showCaption = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ShowTitle),
            controlCreator: dialogEditorFactory.dxCheckBox,
            controlOptions: {
                onValueChanged: function (args) {
                    that.caption.setEnabled(args.component.option('value'));
                }
            }
        });
        this.caption = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.Title),
            controlCreator: dialogEditorFactory.dxTextBox
        });
        this.fileName = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FileName),
            controlCreator: dialogEditorFactory.dxTextBox
        });
        that.caption.setEnabled(this._showCaptionValue);
        this.scaleModeOptionsGroup = new scaleModeOptionsGroup(this._scaleModeValue);
    };
    imageItemOptionsGroup.prototype.createEditors = function (additionalOptions) {
        _super.prototype.createEditors.call(this, additionalOptions);
        this.scaleModeOptionsGroup.createEditors(additionalOptions);
    };
    imageItemOptionsGroup.prototype.set = function (documentInfo) {
        this.pageLayout.set(documentInfo.pdfExportOptions.PageLayout);
        this.paperKind.set(documentInfo.pdfExportOptions.PaperKind);
        this.showCaption.set(documentInfo.pdfExportOptions.ShowTitle);
        this.caption.set(documentInfo.pdfExportOptions.Title);
        this.fileName.set(documentInfo.fileName);
        this.scaleModeOptionsGroup.set(documentInfo);
    };
    imageItemOptionsGroup.prototype.apply = function (documentInfo) {
        documentInfo.pdfExportOptions.PageLayout = this.pageLayout.get();
        documentInfo.pdfExportOptions.PaperKind = this.paperKind.get();
        documentInfo.pdfExportOptions.ShowTitle = this.showCaption.get();
        documentInfo.pdfExportOptions.Title = this.caption.get();
        documentInfo.fileName = this.fileName.get();
        this.scaleModeOptionsGroup.apply(documentInfo);
    };
    imageItemOptionsGroup.prototype.getEditors = function () {
        var that = this;
        var editors = [this.fileName, this.pageLayout, this.paperKind, this.showCaption, this.caption];
        that.scaleModeOptionsGroup.getEditors().forEach(function (editor) {
            editors.push(editor);
        });
        return editors;
    };
    return imageItemOptionsGroup;
}(optionsGroup));
exports.imageItemOptionsGroup = imageItemOptionsGroup;
var groupItemOptionsGroup = (function (_super) {
    __extends(groupItemOptionsGroup, _super);
    function groupItemOptionsGroup(_showCaptionValue, _dashboardAutomaticPageLayoutValue, _scaleModeValue) {
        var _this = _super.call(this) || this;
        _this._showCaptionValue = _showCaptionValue;
        _this._dashboardAutomaticPageLayoutValue = _dashboardAutomaticPageLayoutValue;
        _this._scaleModeValue = _scaleModeValue;
        return _this;
    }
    groupItemOptionsGroup.prototype._initialize = function () {
        this.dashboardOptionsGroup = new dashboardOptionsGroup(this._dashboardAutomaticPageLayoutValue, this._scaleModeValue);
        this.captionOptionsGroup = new captionOptionsGroup(this._showCaptionValue);
        this.dashboardStateOptionsGroup = new dashboardStateOptionsGroup();
    };
    groupItemOptionsGroup.prototype.createEditors = function (additionalOptions) {
        _super.prototype.createEditors.call(this, additionalOptions);
        this.dashboardOptionsGroup.createEditors(additionalOptions);
        this.captionOptionsGroup.createEditors(additionalOptions);
        this.dashboardStateOptionsGroup.createEditors(additionalOptions);
    };
    groupItemOptionsGroup.prototype.set = function (documentInfo) {
        this.dashboardOptionsGroup.set(documentInfo);
        this.captionOptionsGroup.set(documentInfo);
        this.dashboardStateOptionsGroup.set(documentInfo);
    };
    groupItemOptionsGroup.prototype.apply = function (documentInfo) {
        this.dashboardOptionsGroup.apply(documentInfo);
        this.captionOptionsGroup.apply(documentInfo);
        this.dashboardStateOptionsGroup.apply(documentInfo);
    };
    groupItemOptionsGroup.prototype.getEditors = function () {
        var that = this;
        var editors = this.dashboardOptionsGroup.getEditors(that.captionOptionsGroup.getEditors());
        that.dashboardStateOptionsGroup.getEditors().forEach(function (editor) {
            editors.push(editor);
        });
        return editors;
    };
    return groupItemOptionsGroup;
}(optionsGroup));
exports.groupItemOptionsGroup = groupItemOptionsGroup;
var customItemOptionsGroup = (function (_super) {
    __extends(customItemOptionsGroup, _super);
    function customItemOptionsGroup(_showCaptionValue, _dashboardAutomaticPageLayoutValue, _scaleModeValue) {
        var _this = _super.call(this) || this;
        _this._showCaptionValue = _showCaptionValue;
        _this._dashboardAutomaticPageLayoutValue = _dashboardAutomaticPageLayoutValue;
        _this._scaleModeValue = _scaleModeValue;
        return _this;
    }
    customItemOptionsGroup.prototype._initialize = function () {
        this.dashboardOptionsGroup = new dashboardOptionsGroup(this._dashboardAutomaticPageLayoutValue, this._scaleModeValue);
        this.captionOptionsGroup = new captionOptionsGroup(this._showCaptionValue);
    };
    customItemOptionsGroup.prototype.createEditors = function (additionalOptions) {
        _super.prototype.createEditors.call(this, additionalOptions);
        this.dashboardOptionsGroup.createEditors(additionalOptions);
        this.captionOptionsGroup.createEditors(additionalOptions);
    };
    customItemOptionsGroup.prototype.set = function (documentInfo) {
        this.dashboardOptionsGroup.set(documentInfo);
        this.captionOptionsGroup.set(documentInfo);
    };
    customItemOptionsGroup.prototype.apply = function (documentInfo) {
        this.dashboardOptionsGroup.apply(documentInfo);
        this.captionOptionsGroup.apply(documentInfo);
    };
    customItemOptionsGroup.prototype.getEditors = function () {
        var that = this;
        return this.dashboardOptionsGroup.getEditors(that.captionOptionsGroup.getEditors());
    };
    return customItemOptionsGroup;
}(optionsGroup));
exports.customItemOptionsGroup = customItemOptionsGroup;
var entireDashboardOptionsGroup = (function (_super) {
    __extends(entireDashboardOptionsGroup, _super);
    function entireDashboardOptionsGroup(_showTitleValue, _dashboardAutomaticPageLayoutValue, _scaleModeValue) {
        var _this = _super.call(this) || this;
        _this._showTitleValue = _showTitleValue;
        _this._dashboardAutomaticPageLayoutValue = _dashboardAutomaticPageLayoutValue;
        _this._scaleModeValue = _scaleModeValue;
        return _this;
    }
    entireDashboardOptionsGroup.prototype._initialize = function () {
        var that = this;
        this.dashboardOptionsGroup = new dashboardOptionsGroup(this._dashboardAutomaticPageLayoutValue, this._scaleModeValue);
        this.showTitle = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ShowTitle),
            controlCreator: dialogEditorFactory.dxCheckBox,
            controlOptions: {
                onValueChanged: function (args) {
                    that.title.setEnabled(args.component.option('value'));
                }
            }
        });
        this.title = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.Title),
            controlCreator: dialogEditorFactory.dxTextBox
        });
        that.title.setEnabled(this._showTitleValue);
        this.dashboardStateOptionsGroup = new dashboardStateOptionsGroup();
    };
    entireDashboardOptionsGroup.prototype.createEditors = function (additionalOptions) {
        _super.prototype.createEditors.call(this, additionalOptions);
        this.dashboardOptionsGroup.createEditors(additionalOptions);
        this.dashboardStateOptionsGroup.createEditors(additionalOptions);
    };
    entireDashboardOptionsGroup.prototype.set = function (documentInfo) {
        this.dashboardOptionsGroup.set(documentInfo);
        this.showTitle.set(documentInfo.pdfExportOptions.ShowTitle);
        this.title.set(documentInfo.pdfExportOptions.Title);
        this.dashboardStateOptionsGroup.set(documentInfo);
    };
    entireDashboardOptionsGroup.prototype.apply = function (documentInfo) {
        this.dashboardOptionsGroup.apply(documentInfo);
        documentInfo.pdfExportOptions.ShowTitle = this.showTitle.get();
        documentInfo.pdfExportOptions.Title = this.title.get();
        this.dashboardStateOptionsGroup.apply(documentInfo);
    };
    entireDashboardOptionsGroup.prototype.getEditors = function () {
        var that = this;
        var editors = this.dashboardOptionsGroup.getEditors([this.showTitle, this.title]);
        that.dashboardStateOptionsGroup.getEditors().forEach(function (editor) {
            editors.push(editor);
        });
        return editors;
    };
    return entireDashboardOptionsGroup;
}(optionsGroup));
exports.entireDashboardOptionsGroup = entireDashboardOptionsGroup;
var dashboardOptionsGroup = (function (_super) {
    __extends(dashboardOptionsGroup, _super);
    function dashboardOptionsGroup(_dashboardAutomaticPageLayoutValue, _scaleModeValue) {
        var _this = _super.call(this) || this;
        _this._dashboardAutomaticPageLayoutValue = _dashboardAutomaticPageLayoutValue;
        _this._scaleModeValue = _scaleModeValue;
        return _this;
    }
    dashboardOptionsGroup.prototype._initialize = function () {
        var that = this;
        this.pageLayout = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PageLayout),
            controlCreator: dialogEditorFactory.dxRadioGroup,
            values: [_export_localization_1.pageLayout.portrait, _export_localization_1.pageLayout.landscape, _export_localization_1.pageLayout.auto],
            controlOptions: {
                onValueChanged: function (args) {
                    that._setScaleModeOptionsVisibility(args.value);
                }
            }
        });
        this.paperKind = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PaperKind),
            controlCreator: dialogEditorFactory.dxSelectBox,
            values: [_export_localization_1.paperKind.letter, _export_localization_1.paperKind.legal, _export_localization_1.paperKind.executive, _export_localization_1.paperKind.a5, _export_localization_1.paperKind.a4, _export_localization_1.paperKind.a3],
            controlOptions: { container: this._additionalOptions.popupContainer }
        });
        this.scaleModeOptionsGroup = new scaleModeOptionsGroup(this._scaleModeValue);
        this.fileName = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FileName),
            controlCreator: dialogEditorFactory.dxTextBox
        });
    };
    dashboardOptionsGroup.prototype.createEditors = function (additionalOptions) {
        _super.prototype.createEditors.call(this, additionalOptions);
        this.scaleModeOptionsGroup.createEditors(additionalOptions);
        if (this._dashboardAutomaticPageLayoutValue)
            this._setScaleModeOptionsVisibility(_export_localization_1.pageLayout.auto.value);
    };
    dashboardOptionsGroup.prototype.set = function (documentInfo) {
        this.pageLayout.set(documentInfo.pdfExportOptions.DashboardAutomaticPageLayout ? _export_localization_1.pageLayout.auto.value : documentInfo.pdfExportOptions.PageLayout);
        this.paperKind.set(documentInfo.pdfExportOptions.PaperKind);
        this.scaleModeOptionsGroup.set(documentInfo);
        this.fileName.set(documentInfo.fileName);
    };
    dashboardOptionsGroup.prototype.apply = function (documentInfo) {
        if (this.pageLayout.get() != _export_localization_1.pageLayout.auto.value)
            documentInfo.pdfExportOptions.PageLayout = this.pageLayout.get();
        documentInfo.pdfExportOptions.DashboardAutomaticPageLayout = this.pageLayout.get() == _export_localization_1.pageLayout.auto.value;
        documentInfo.pdfExportOptions.PaperKind = this.paperKind.get();
        this.scaleModeOptionsGroup.apply(documentInfo);
        documentInfo.fileName = this.fileName.get();
    };
    dashboardOptionsGroup.prototype.getEditors = function (captionEditors) {
        var that = this;
        var editors = [this.fileName, this.pageLayout, this.paperKind];
        captionEditors.forEach(function (editor) {
            editors.push(editor);
        });
        that.scaleModeOptionsGroup.getEditors().forEach(function (editor) {
            editors.push(editor);
        });
        return editors;
    };
    dashboardOptionsGroup.prototype._setScaleModeOptionsVisibility = function (pageLayoutValue) {
        this.scaleModeOptionsGroup.setEnabled(pageLayoutValue != _export_localization_1.pageLayout.auto.value);
    };
    return dashboardOptionsGroup;
}(optionsGroup));
exports.dashboardOptionsGroup = dashboardOptionsGroup;
var gridOptionsGroup = (function (_super) {
    __extends(gridOptionsGroup, _super);
    function gridOptionsGroup(_includeCaptionValue, _fitToPageWidthValue, _scaleModeValue) {
        var _this = _super.call(this) || this;
        _this._includeCaptionValue = _includeCaptionValue;
        _this._fitToPageWidthValue = _fitToPageWidthValue;
        _this._scaleModeValue = _scaleModeValue;
        return _this;
    }
    gridOptionsGroup.prototype._initialize = function () {
        var that = this;
        this.documentOptionsGroup = new documentOptionsGroup(this._includeCaptionValue);
        this.dashboardStateOptionsGroup = new dashboardStateOptionsGroup();
        this.printHeadersOnEveryPage = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PrintHeadersOnEveryPage),
            controlCreator: dialogEditorFactory.dxCheckBox
        });
        this.fitToPageWidth = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FitToPageWidth),
            controlCreator: dialogEditorFactory.dxCheckBox,
            controlOptions: {
                onValueChanged: function (args) {
                    that._setScaleModeOptionsVisibility(args.component.option('value'));
                }
            }
        });
        this.scaleModeOptionsGroup = new scaleModeOptionsGroup(this._scaleModeValue);
        this.fileName = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FileName),
            controlCreator: dialogEditorFactory.dxTextBox
        });
    };
    gridOptionsGroup.prototype.createEditors = function (additionalOptions) {
        _super.prototype.createEditors.call(this, additionalOptions);
        this.documentOptionsGroup.createEditors(additionalOptions);
        this.scaleModeOptionsGroup.createEditors(additionalOptions);
        this._setScaleModeOptionsVisibility(this._fitToPageWidthValue);
        this.dashboardStateOptionsGroup.createEditors(additionalOptions);
    };
    gridOptionsGroup.prototype.set = function (documentInfo) {
        this.documentOptionsGroup.set(documentInfo);
        this.dashboardStateOptionsGroup.set(documentInfo);
        this.printHeadersOnEveryPage.set(documentInfo.pdfExportOptions.GridPrintHeadersOnEveryPage);
        this.fitToPageWidth.set(documentInfo.pdfExportOptions.GridFitToPageWidth);
        this.scaleModeOptionsGroup.set(documentInfo);
        this.fileName.set(documentInfo.fileName);
    };
    gridOptionsGroup.prototype.apply = function (documentInfo) {
        this.documentOptionsGroup.apply(documentInfo);
        this.dashboardStateOptionsGroup.apply(documentInfo);
        documentInfo.pdfExportOptions.GridPrintHeadersOnEveryPage = this.printHeadersOnEveryPage.get();
        documentInfo.pdfExportOptions.GridFitToPageWidth = this.fitToPageWidth.get();
        this.scaleModeOptionsGroup.apply(documentInfo);
        documentInfo.fileName = this.fileName.get();
    };
    gridOptionsGroup.prototype.getEditors = function () {
        var that = this;
        var editors = [];
        editors.push(that.fileName);
        that.documentOptionsGroup.getEditors().forEach(function (editor) {
            editors.push(editor);
        });
        editors.push(that.printHeadersOnEveryPage);
        editors.push(that.fitToPageWidth);
        that.scaleModeOptionsGroup.getEditors().forEach(function (editor) {
            editors.push(editor);
        });
        that.dashboardStateOptionsGroup.getEditors().forEach(function (editor) {
            editors.push(editor);
        });
        return editors;
    };
    gridOptionsGroup.prototype._setScaleModeOptionsVisibility = function (fitToPageWidth) {
        var that = this;
        that.scaleModeOptionsGroup.setEnabled(!fitToPageWidth);
    };
    return gridOptionsGroup;
}(optionsGroup));
exports.gridOptionsGroup = gridOptionsGroup;
var pivotOptionsGroup = (function (_super) {
    __extends(pivotOptionsGroup, _super);
    function pivotOptionsGroup(_includeCaptionValue, _scaleModeValue) {
        var _this = _super.call(this) || this;
        _this._includeCaptionValue = _includeCaptionValue;
        _this._scaleModeValue = _scaleModeValue;
        return _this;
    }
    pivotOptionsGroup.prototype._initialize = function () {
        var that = this;
        this.documentOptionsGroup = new documentOptionsGroup(this._includeCaptionValue);
        this.dashboardStateOptionsGroup = new dashboardStateOptionsGroup();
        this.printHeadersOnEveryPage = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PrintHeadersOnEveryPage),
            controlCreator: dialogEditorFactory.dxCheckBox
        });
        this.scaleModeOptionsGroup = new scaleModeOptionsGroup(this._scaleModeValue);
        this.fileName = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FileName),
            controlCreator: dialogEditorFactory.dxTextBox
        });
    };
    pivotOptionsGroup.prototype.createEditors = function (additionalOptions) {
        _super.prototype.createEditors.call(this, additionalOptions);
        this.documentOptionsGroup.createEditors(additionalOptions);
        this.scaleModeOptionsGroup.createEditors(additionalOptions);
        this.dashboardStateOptionsGroup.createEditors(additionalOptions);
    };
    pivotOptionsGroup.prototype.set = function (documentInfo) {
        this.documentOptionsGroup.set(documentInfo);
        this.printHeadersOnEveryPage.set(documentInfo.pdfExportOptions.PivotPrintHeadersOnEveryPage);
        this.scaleModeOptionsGroup.set(documentInfo);
        this.fileName.set(documentInfo.fileName);
        this.dashboardStateOptionsGroup.set(documentInfo);
    };
    pivotOptionsGroup.prototype.apply = function (documentInfo) {
        this.documentOptionsGroup.apply(documentInfo);
        documentInfo.pdfExportOptions.PivotPrintHeadersOnEveryPage = this.printHeadersOnEveryPage.get();
        this.scaleModeOptionsGroup.apply(documentInfo);
        documentInfo.fileName = this.fileName.get();
        this.dashboardStateOptionsGroup.apply(documentInfo);
    };
    pivotOptionsGroup.prototype.getEditors = function () {
        var that = this;
        var editors = [];
        editors.push(that.fileName);
        that.documentOptionsGroup.getEditors().forEach(function (editor) {
            editors.push(editor);
        });
        editors.push(that.printHeadersOnEveryPage);
        that.scaleModeOptionsGroup.getEditors().forEach(function (editor) {
            editors.push(editor);
        });
        that.dashboardStateOptionsGroup.getEditors().forEach(function (editor) {
            editors.push(editor);
        });
        return editors;
    };
    return pivotOptionsGroup;
}(optionsGroup));
exports.pivotOptionsGroup = pivotOptionsGroup;
var chartOptionsGroup = (function (_super) {
    __extends(chartOptionsGroup, _super);
    function chartOptionsGroup(_includeCaptionValue) {
        var _this = _super.call(this) || this;
        _this._includeCaptionValue = _includeCaptionValue;
        return _this;
    }
    chartOptionsGroup.prototype._initialize = function () {
        var that = this;
        this.pageLayout = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PageLayout),
            controlCreator: dialogEditorFactory.dxRadioGroup,
            values: [_export_localization_1.pageLayout.portrait, _export_localization_1.pageLayout.landscape, _export_localization_1.pageLayout.auto]
        });
        this.paperKind = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PaperKind),
            controlCreator: dialogEditorFactory.dxSelectBox,
            values: [_export_localization_1.paperKind.letter, _export_localization_1.paperKind.legal, _export_localization_1.paperKind.executive, _export_localization_1.paperKind.a5, _export_localization_1.paperKind.a4, _export_localization_1.paperKind.a3],
            controlOptions: { container: this._additionalOptions.popupContainer }
        });
        this.captionOptionsGroup = new captionOptionsGroup(this._includeCaptionValue);
        this.sizeMode = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.SizeMode),
            controlCreator: dialogEditorFactory.dxRadioGroup,
            values: [_export_localization_1.sizeMode.none, _export_localization_1.sizeMode.stretch, _export_localization_1.sizeMode.zoom]
        });
        this.fileName = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FileName),
            controlCreator: dialogEditorFactory.dxTextBox
        });
        this.dashboardStateOptionsGroup = new dashboardStateOptionsGroup();
    };
    chartOptionsGroup.prototype.createEditors = function (additionalOptions) {
        _super.prototype.createEditors.call(this, additionalOptions);
        this.captionOptionsGroup.createEditors(additionalOptions);
        this.dashboardStateOptionsGroup.createEditors(additionalOptions);
    };
    chartOptionsGroup.prototype.set = function (documentInfo) {
        this.pageLayout.set(documentInfo.pdfExportOptions.ChartAutomaticPageLayout ? _export_localization_1.pageLayout.auto.value : documentInfo.pdfExportOptions.PageLayout);
        this.paperKind.set(documentInfo.pdfExportOptions.PaperKind);
        this.captionOptionsGroup.set(documentInfo);
        this.sizeMode.set(documentInfo.pdfExportOptions.ChartSizeMode);
        this.fileName.set(documentInfo.fileName);
        this.dashboardStateOptionsGroup.set(documentInfo);
    };
    chartOptionsGroup.prototype.apply = function (documentInfo) {
        if (this.pageLayout.get() != _export_localization_1.pageLayout.auto.value)
            documentInfo.pdfExportOptions.PageLayout = this.pageLayout.get();
        documentInfo.pdfExportOptions.ChartAutomaticPageLayout = this.pageLayout.get() == _export_localization_1.pageLayout.auto.value;
        documentInfo.pdfExportOptions.PaperKind = this.paperKind.get();
        this.captionOptionsGroup.apply(documentInfo);
        documentInfo.pdfExportOptions.ChartSizeMode = this.sizeMode.get();
        documentInfo.fileName = this.fileName.get();
        this.dashboardStateOptionsGroup.apply(documentInfo);
    };
    chartOptionsGroup.prototype.getEditors = function () {
        var that = this;
        var editors = [this.fileName, this.pageLayout, this.paperKind];
        that.captionOptionsGroup.getEditors().forEach(function (editor) {
            editors.push(editor);
        });
        editors.push(that.sizeMode);
        that.dashboardStateOptionsGroup.getEditors().forEach(function (editor) {
            editors.push(editor);
        });
        return editors;
    };
    return chartOptionsGroup;
}(optionsGroup));
exports.chartOptionsGroup = chartOptionsGroup;
var mapOptionsGroup = (function (_super) {
    __extends(mapOptionsGroup, _super);
    function mapOptionsGroup(_includeCaptionValue) {
        var _this = _super.call(this) || this;
        _this._includeCaptionValue = _includeCaptionValue;
        return _this;
    }
    mapOptionsGroup.prototype._initialize = function () {
        var that = this;
        this.pageLayout = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PageLayout),
            controlCreator: dialogEditorFactory.dxRadioGroup,
            values: [_export_localization_1.pageLayout.portrait, _export_localization_1.pageLayout.landscape, _export_localization_1.pageLayout.auto]
        });
        this.paperKind = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PaperKind),
            controlCreator: dialogEditorFactory.dxSelectBox,
            values: [_export_localization_1.paperKind.letter, _export_localization_1.paperKind.legal, _export_localization_1.paperKind.executive, _export_localization_1.paperKind.a5, _export_localization_1.paperKind.a4, _export_localization_1.paperKind.a3],
            controlOptions: { container: this._additionalOptions.popupContainer }
        });
        this.captionOptionsGroup = new captionOptionsGroup(this._includeCaptionValue);
        this.sizeMode = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.SizeMode),
            controlCreator: dialogEditorFactory.dxRadioGroup,
            values: [_export_localization_1.sizeMode.none, _export_localization_1.sizeMode.zoom]
        });
        this.fileName = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FileName),
            controlCreator: dialogEditorFactory.dxTextBox
        });
        this.dashboardStateOptionsGroup = new dashboardStateOptionsGroup();
    };
    mapOptionsGroup.prototype.createEditors = function (additionalOptions) {
        _super.prototype.createEditors.call(this, additionalOptions);
        this.captionOptionsGroup.createEditors(additionalOptions);
        this.dashboardStateOptionsGroup.createEditors(additionalOptions);
    };
    mapOptionsGroup.prototype.set = function (documentInfo) {
        this.pageLayout.set(documentInfo.pdfExportOptions.MapAutomaticPageLayout ? _export_localization_1.pageLayout.auto.value : documentInfo.pdfExportOptions.PageLayout);
        this.paperKind.set(documentInfo.pdfExportOptions.PaperKind);
        this.captionOptionsGroup.set(documentInfo);
        this.sizeMode.set(documentInfo.pdfExportOptions.MapSizeMode);
        this.fileName.set(documentInfo.fileName);
        this.dashboardStateOptionsGroup.set(documentInfo);
    };
    mapOptionsGroup.prototype.apply = function (documentInfo) {
        if (this.pageLayout.get() != _export_localization_1.pageLayout.auto.value)
            documentInfo.pdfExportOptions.PageLayout = this.pageLayout.get();
        documentInfo.pdfExportOptions.MapAutomaticPageLayout = this.pageLayout.get() == _export_localization_1.pageLayout.auto.value;
        documentInfo.pdfExportOptions.PaperKind = this.paperKind.get();
        this.captionOptionsGroup.apply(documentInfo);
        documentInfo.pdfExportOptions.MapSizeMode = this.sizeMode.get();
        documentInfo.fileName = this.fileName.get();
        this.dashboardStateOptionsGroup.apply(documentInfo);
    };
    mapOptionsGroup.prototype.getEditors = function () {
        var that = this;
        var editors = [this.fileName, this.pageLayout, this.paperKind];
        that.captionOptionsGroup.getEditors().forEach(function (editor) {
            editors.push(editor);
        });
        editors.push(that.sizeMode);
        that.dashboardStateOptionsGroup.getEditors().forEach(function (editor) {
            editors.push(editor);
        });
        return editors;
    };
    return mapOptionsGroup;
}(optionsGroup));
exports.mapOptionsGroup = mapOptionsGroup;
var treemapOptionsGroup = (function (_super) {
    __extends(treemapOptionsGroup, _super);
    function treemapOptionsGroup(_includeCaptionValue) {
        var _this = _super.call(this) || this;
        _this._includeCaptionValue = _includeCaptionValue;
        return _this;
    }
    treemapOptionsGroup.prototype._initialize = function () {
        var that = this;
        this.pageLayout = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PageLayout),
            controlCreator: dialogEditorFactory.dxRadioGroup,
            values: [_export_localization_1.pageLayout.portrait, _export_localization_1.pageLayout.landscape, _export_localization_1.pageLayout.auto]
        });
        this.paperKind = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PaperKind),
            controlCreator: dialogEditorFactory.dxSelectBox,
            values: [_export_localization_1.paperKind.letter, _export_localization_1.paperKind.legal, _export_localization_1.paperKind.executive, _export_localization_1.paperKind.a5, _export_localization_1.paperKind.a4, _export_localization_1.paperKind.a3],
            controlOptions: { container: this._additionalOptions.popupContainer }
        });
        this.captionOptionsGroup = new captionOptionsGroup(this._includeCaptionValue);
        this.sizeMode = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.SizeMode),
            controlCreator: dialogEditorFactory.dxRadioGroup,
            values: [_export_localization_1.sizeMode.none, _export_localization_1.sizeMode.zoom]
        });
        this.fileName = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FileName),
            controlCreator: dialogEditorFactory.dxTextBox
        });
        this.dashboardStateOptionsGroup = new dashboardStateOptionsGroup();
    };
    treemapOptionsGroup.prototype.createEditors = function (additionalOptions) {
        _super.prototype.createEditors.call(this, additionalOptions);
        this.captionOptionsGroup.createEditors(additionalOptions);
        this.dashboardStateOptionsGroup.createEditors(additionalOptions);
    };
    treemapOptionsGroup.prototype.set = function (documentInfo) {
        this.pageLayout.set(documentInfo.pdfExportOptions.TreemapAutomaticPageLayout ? _export_localization_1.pageLayout.auto.value : documentInfo.pdfExportOptions.PageLayout);
        this.paperKind.set(documentInfo.pdfExportOptions.PaperKind);
        this.captionOptionsGroup.set(documentInfo);
        this.sizeMode.set(documentInfo.pdfExportOptions.TreemapSizeMode);
        this.fileName.set(documentInfo.fileName);
        this.dashboardStateOptionsGroup.set(documentInfo);
    };
    treemapOptionsGroup.prototype.apply = function (documentInfo) {
        if (this.pageLayout.get() != _export_localization_1.pageLayout.auto.value)
            documentInfo.pdfExportOptions.PageLayout = this.pageLayout.get();
        documentInfo.pdfExportOptions.TreemapAutomaticPageLayout = this.pageLayout.get() == _export_localization_1.pageLayout.auto.value;
        documentInfo.pdfExportOptions.PaperKind = this.paperKind.get();
        this.captionOptionsGroup.apply(documentInfo);
        documentInfo.pdfExportOptions.TreemapSizeMode = this.sizeMode.get();
        documentInfo.fileName = this.fileName.get();
        this.dashboardStateOptionsGroup.apply(documentInfo);
    };
    treemapOptionsGroup.prototype.getEditors = function () {
        var that = this;
        var editors = [this.fileName, this.pageLayout, this.paperKind];
        that.captionOptionsGroup.getEditors().forEach(function (editor) {
            editors.push(editor);
        });
        editors.push(that.sizeMode);
        that.dashboardStateOptionsGroup.getEditors().forEach(function (editor) {
            editors.push(editor);
        });
        return editors;
    };
    return treemapOptionsGroup;
}(optionsGroup));
exports.treemapOptionsGroup = treemapOptionsGroup;
var rangeFilterOptionsGroup = (function (_super) {
    __extends(rangeFilterOptionsGroup, _super);
    function rangeFilterOptionsGroup(_includeCaptionValue) {
        var _this = _super.call(this) || this;
        _this._includeCaptionValue = _includeCaptionValue;
        return _this;
    }
    rangeFilterOptionsGroup.prototype._initialize = function () {
        var that = this;
        this.pageLayout = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PageLayout),
            controlCreator: dialogEditorFactory.dxRadioGroup,
            values: [_export_localization_1.pageLayout.portrait, _export_localization_1.pageLayout.landscape, _export_localization_1.pageLayout.auto]
        });
        this.paperKind = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.PaperKind),
            controlCreator: dialogEditorFactory.dxSelectBox,
            values: [_export_localization_1.paperKind.letter, _export_localization_1.paperKind.legal, _export_localization_1.paperKind.executive, _export_localization_1.paperKind.a5, _export_localization_1.paperKind.a4, _export_localization_1.paperKind.a3],
            controlOptions: { container: this._additionalOptions.popupContainer }
        });
        this.captionOptionsGroup = new captionOptionsGroup(this._includeCaptionValue);
        this.sizeMode = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.SizeMode),
            controlCreator: dialogEditorFactory.dxRadioGroup,
            values: [_export_localization_1.sizeMode.none, _export_localization_1.sizeMode.stretch, _export_localization_1.sizeMode.zoom]
        });
        this.fileName = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FileName),
            controlCreator: dialogEditorFactory.dxTextBox
        });
        this.dashboardStateOptionsGroup = new dashboardStateOptionsGroup();
    };
    rangeFilterOptionsGroup.prototype.createEditors = function (additionalOptions) {
        _super.prototype.createEditors.call(this, additionalOptions);
        this.captionOptionsGroup.createEditors(additionalOptions);
        this.dashboardStateOptionsGroup.createEditors(additionalOptions);
    };
    rangeFilterOptionsGroup.prototype.set = function (documentInfo) {
        this.pageLayout.set(documentInfo.pdfExportOptions.RangeFilterAutomaticPageLayout ? _export_localization_1.pageLayout.auto.value : documentInfo.pdfExportOptions.PageLayout);
        this.paperKind.set(documentInfo.pdfExportOptions.PaperKind);
        this.captionOptionsGroup.set(documentInfo);
        this.sizeMode.set(documentInfo.pdfExportOptions.RangeFilterSizeMode);
        this.fileName.set(documentInfo.fileName);
        this.dashboardStateOptionsGroup.set(documentInfo);
    };
    rangeFilterOptionsGroup.prototype.apply = function (documentInfo) {
        if (this.pageLayout.get() != _export_localization_1.pageLayout.auto.value)
            documentInfo.pdfExportOptions.PageLayout = this.pageLayout.get();
        documentInfo.pdfExportOptions.RangeFilterAutomaticPageLayout = this.pageLayout.get() == _export_localization_1.pageLayout.auto.value;
        documentInfo.pdfExportOptions.PaperKind = this.paperKind.get();
        this.captionOptionsGroup.apply(documentInfo);
        documentInfo.pdfExportOptions.RangeFilterSizeMode = this.sizeMode.get();
        documentInfo.fileName = this.fileName.get();
        this.dashboardStateOptionsGroup.apply(documentInfo);
    };
    rangeFilterOptionsGroup.prototype.getEditors = function () {
        var that = this;
        var editors = [this.fileName, this.pageLayout, this.paperKind];
        that.captionOptionsGroup.getEditors().forEach(function (editor) {
            editors.push(editor);
        });
        editors.push(that.sizeMode);
        that.dashboardStateOptionsGroup.getEditors().forEach(function (editor) {
            editors.push(editor);
        });
        return editors;
    };
    return rangeFilterOptionsGroup;
}(optionsGroup));
exports.rangeFilterOptionsGroup = rangeFilterOptionsGroup;
var pieOptionsGroup = (function (_super) {
    __extends(pieOptionsGroup, _super);
    function pieOptionsGroup(_includeCaptionValue, _autoArrangeContentValue, _scaleModeValue) {
        var _this = _super.call(this) || this;
        _this._includeCaptionValue = _includeCaptionValue;
        _this._autoArrangeContentValue = _autoArrangeContentValue;
        _this._scaleModeValue = _scaleModeValue;
        return _this;
    }
    pieOptionsGroup.prototype._initialize = function () {
        var that = this;
        this.documentOptionsGroup = new documentOptionsGroup(this._includeCaptionValue);
        this.autoArrangeContent = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.AutoArrangeContent),
            controlCreator: dialogEditorFactory.dxCheckBox,
            controlOptions: {
                onValueChanged: function (args) {
                    that._setScaleModeOptionsVisibility(args.component.option('value'));
                }
            }
        });
        this.scaleModeOptionsGroup = new scaleModeOptionsGroup(this._scaleModeValue);
        this.fileName = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FileName),
            controlCreator: dialogEditorFactory.dxTextBox
        });
        this.dashboardStateOptionsGroup = new dashboardStateOptionsGroup();
    };
    pieOptionsGroup.prototype.createEditors = function (additionalOptions) {
        _super.prototype.createEditors.call(this, additionalOptions);
        this.documentOptionsGroup.createEditors(additionalOptions);
        this.scaleModeOptionsGroup.createEditors(additionalOptions);
        this._setScaleModeOptionsVisibility(this._autoArrangeContentValue);
        this.dashboardStateOptionsGroup.createEditors(additionalOptions);
    };
    pieOptionsGroup.prototype.set = function (documentInfo) {
        this.documentOptionsGroup.set(documentInfo);
        this.autoArrangeContent.set(documentInfo.pdfExportOptions.PieAutoArrangeContent);
        this.scaleModeOptionsGroup.set(documentInfo);
        this.fileName.set(documentInfo.fileName);
        this.dashboardStateOptionsGroup.set(documentInfo);
    };
    pieOptionsGroup.prototype.apply = function (documentInfo) {
        this.documentOptionsGroup.apply(documentInfo);
        documentInfo.pdfExportOptions.PieAutoArrangeContent = this.autoArrangeContent.get();
        this.scaleModeOptionsGroup.apply(documentInfo);
        documentInfo.fileName = this.fileName.get();
        this.dashboardStateOptionsGroup.apply(documentInfo);
    };
    pieOptionsGroup.prototype.getEditors = function () {
        var that = this;
        var editors = [];
        editors.push(that.fileName);
        that.documentOptionsGroup.getEditors().forEach(function (editor) {
            editors.push(editor);
        });
        editors.push(that.autoArrangeContent);
        that.scaleModeOptionsGroup.getEditors().forEach(function (editor) {
            editors.push(editor);
        });
        that.dashboardStateOptionsGroup.getEditors().forEach(function (editor) {
            editors.push(editor);
        });
        return editors;
    };
    pieOptionsGroup.prototype._setScaleModeOptionsVisibility = function (autoArrangeContent) {
        var that = this;
        that.scaleModeOptionsGroup.setEnabled(!autoArrangeContent);
    };
    return pieOptionsGroup;
}(optionsGroup));
exports.pieOptionsGroup = pieOptionsGroup;
var gaugeOptionsGroup = (function (_super) {
    __extends(gaugeOptionsGroup, _super);
    function gaugeOptionsGroup(_includeCaptionValue, _autoArrangeContentValue, _scaleModeValue) {
        var _this = _super.call(this) || this;
        _this._includeCaptionValue = _includeCaptionValue;
        _this._autoArrangeContentValue = _autoArrangeContentValue;
        _this._scaleModeValue = _scaleModeValue;
        return _this;
    }
    gaugeOptionsGroup.prototype._initialize = function () {
        var that = this;
        this.documentOptionsGroup = new documentOptionsGroup(this._includeCaptionValue);
        this.autoArrangeContent = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.AutoArrangeContent),
            controlCreator: dialogEditorFactory.dxCheckBox,
            controlOptions: {
                onValueChanged: function (args) {
                    that._setScaleModeOptionsVisibility(args.component.option('value'));
                }
            }
        });
        this.scaleModeOptionsGroup = new scaleModeOptionsGroup(this._scaleModeValue);
        this.fileName = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FileName),
            controlCreator: dialogEditorFactory.dxTextBox
        });
        this.dashboardStateOptionsGroup = new dashboardStateOptionsGroup();
    };
    gaugeOptionsGroup.prototype.createEditors = function (additionalOptions) {
        _super.prototype.createEditors.call(this, additionalOptions);
        this.documentOptionsGroup.createEditors(additionalOptions);
        this.scaleModeOptionsGroup.createEditors(additionalOptions);
        this._setScaleModeOptionsVisibility(this._autoArrangeContentValue);
        this.dashboardStateOptionsGroup.createEditors(additionalOptions);
    };
    gaugeOptionsGroup.prototype.set = function (documentInfo) {
        this.documentOptionsGroup.set(documentInfo);
        this.autoArrangeContent.set(documentInfo.pdfExportOptions.GaugeAutoArrangeContent);
        this.scaleModeOptionsGroup.set(documentInfo);
        this.fileName.set(documentInfo.fileName);
        this.dashboardStateOptionsGroup.set(documentInfo);
    };
    gaugeOptionsGroup.prototype.apply = function (documentInfo) {
        this.documentOptionsGroup.apply(documentInfo);
        documentInfo.pdfExportOptions.GaugeAutoArrangeContent = this.autoArrangeContent.get();
        this.scaleModeOptionsGroup.apply(documentInfo);
        documentInfo.fileName = this.fileName.get();
        this.dashboardStateOptionsGroup.apply(documentInfo);
    };
    gaugeOptionsGroup.prototype.getEditors = function () {
        var that = this;
        var editors = [];
        editors.push(that.fileName);
        that.documentOptionsGroup.getEditors().forEach(function (editor) {
            editors.push(editor);
        });
        editors.push(that.autoArrangeContent);
        that.scaleModeOptionsGroup.getEditors().forEach(function (editor) {
            editors.push(editor);
        });
        that.dashboardStateOptionsGroup.getEditors().forEach(function (editor) {
            editors.push(editor);
        });
        return editors;
    };
    gaugeOptionsGroup.prototype._setScaleModeOptionsVisibility = function (autoArrangeContent) {
        var that = this;
        that.scaleModeOptionsGroup.setEnabled(!autoArrangeContent);
    };
    return gaugeOptionsGroup;
}(optionsGroup));
exports.gaugeOptionsGroup = gaugeOptionsGroup;
var cardOptionsGroup = (function (_super) {
    __extends(cardOptionsGroup, _super);
    function cardOptionsGroup(_includeCaptionValue, _autoArrangeContentValue, _scaleModeValue) {
        var _this = _super.call(this) || this;
        _this._includeCaptionValue = _includeCaptionValue;
        _this._autoArrangeContentValue = _autoArrangeContentValue;
        _this._scaleModeValue = _scaleModeValue;
        return _this;
    }
    cardOptionsGroup.prototype._initialize = function () {
        var that = this;
        this.documentOptionsGroup = new documentOptionsGroup(this._includeCaptionValue);
        this.autoArrangeContent = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.AutoArrangeContent),
            controlCreator: dialogEditorFactory.dxCheckBox,
            controlOptions: {
                onValueChanged: function (args) {
                    that._setScaleModeOptionsVisibility(args.component.option('value'));
                }
            }
        });
        this.scaleModeOptionsGroup = new scaleModeOptionsGroup(this._scaleModeValue);
        this.fileName = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FileName),
            controlCreator: dialogEditorFactory.dxTextBox
        });
        this.dashboardStateOptionsGroup = new dashboardStateOptionsGroup();
    };
    cardOptionsGroup.prototype.createEditors = function (additionalOptions) {
        _super.prototype.createEditors.call(this, additionalOptions);
        this.documentOptionsGroup.createEditors(additionalOptions);
        this.scaleModeOptionsGroup.createEditors(additionalOptions);
        this._setScaleModeOptionsVisibility(this._autoArrangeContentValue);
        this.dashboardStateOptionsGroup.createEditors(additionalOptions);
    };
    cardOptionsGroup.prototype.set = function (documentInfo) {
        this.documentOptionsGroup.set(documentInfo);
        this.autoArrangeContent.set(documentInfo.pdfExportOptions.CardAutoArrangeContent);
        this.scaleModeOptionsGroup.set(documentInfo);
        this.fileName.set(documentInfo.fileName);
        this.dashboardStateOptionsGroup.set(documentInfo);
    };
    cardOptionsGroup.prototype.apply = function (documentInfo) {
        this.documentOptionsGroup.apply(documentInfo);
        documentInfo.pdfExportOptions.CardAutoArrangeContent = this.autoArrangeContent.get();
        this.scaleModeOptionsGroup.apply(documentInfo);
        documentInfo.fileName = this.fileName.get();
        this.dashboardStateOptionsGroup.apply(documentInfo);
    };
    cardOptionsGroup.prototype.getEditors = function () {
        var that = this;
        var editors = [];
        editors.push(that.fileName);
        that.documentOptionsGroup.getEditors().forEach(function (editor) {
            editors.push(editor);
        });
        editors.push(that.autoArrangeContent);
        that.scaleModeOptionsGroup.getEditors().forEach(function (editor) {
            editors.push(editor);
        });
        that.dashboardStateOptionsGroup.getEditors().forEach(function (editor) {
            editors.push(editor);
        });
        return editors;
    };
    cardOptionsGroup.prototype._setScaleModeOptionsVisibility = function (autoArrangeContent) {
        var that = this;
        that.scaleModeOptionsGroup.setEnabled(!autoArrangeContent);
    };
    return cardOptionsGroup;
}(optionsGroup));
exports.cardOptionsGroup = cardOptionsGroup;
var imageOptionsGroup = (function (_super) {
    __extends(imageOptionsGroup, _super);
    function imageOptionsGroup(_showTitleValue) {
        var _this = _super.call(this) || this;
        _this._showTitleValue = _showTitleValue;
        return _this;
    }
    imageOptionsGroup.prototype._initialize = function () {
        var that = this;
        this.imageFormat = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ImageFormat),
            controlCreator: dialogEditorFactory.dxSelectBox,
            values: [_export_localization_1.imageFormat.png, _export_localization_1.imageFormat.gif, _export_localization_1.imageFormat.jpg],
            controlOptions: { container: this._additionalOptions.popupContainer }
        });
        this.showTitle = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ShowTitle),
            controlCreator: dialogEditorFactory.dxCheckBox,
            controlOptions: {
                onValueChanged: function (args) {
                    that.title.setEnabled(args.component.option('value'));
                }
            }
        });
        this.title = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.Title),
            controlCreator: dialogEditorFactory.dxTextBox
        });
        this.exportFilters = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.IncludeExportDashboardState),
            controlCreator: dialogEditorFactory.dxCheckBox,
            largeMargin: true,
            controlOptions: {
                text: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ExportFilters)
            }
        });
        this.exportParameters = new labeledEditor({
            labelText: ' ',
            customText: true,
            controlCreator: dialogEditorFactory.dxCheckBox,
            controlOptions: {
                text: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ExportParameters)
            }
        });
        this.title.setEnabled(this._showTitleValue);
        this.resolution = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.Resolution),
            controlCreator: dialogEditorFactory.dxNumberBox
        });
        this.fileName = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FileName),
            controlCreator: dialogEditorFactory.dxTextBox
        });
    };
    imageOptionsGroup.prototype.set = function (documentInfo) {
        this.showTitle.set(documentInfo.imageExportOptions.ShowTitle);
        this.title.set(documentInfo.imageExportOptions.Title);
        this.exportFilters.set(documentInfo.imageExportOptions.ExportFilters);
        this.exportParameters.set(documentInfo.imageExportOptions.ExportParameters);
        this.imageFormat.set(documentInfo.imageExportOptions.Format);
        this.resolution.set(documentInfo.imageExportOptions.Resolution);
        this.fileName.set(documentInfo.fileName);
    };
    imageOptionsGroup.prototype.apply = function (documentInfo) {
        documentInfo.imageExportOptions.ShowTitle = this.showTitle.get();
        documentInfo.imageExportOptions.Title = this.title.get();
        documentInfo.imageExportOptions.ExportFilters = this.exportFilters.get();
        documentInfo.imageExportOptions.ExportParameters = this.exportParameters.get();
        documentInfo.imageExportOptions.Format = this.imageFormat.get();
        documentInfo.imageExportOptions.Resolution = this.resolution.get();
        documentInfo.fileName = this.fileName.get();
    };
    imageOptionsGroup.prototype.getEditors = function () {
        return [this.fileName, this.showTitle, this.title, this.imageFormat, this.resolution, this.exportFilters, this.exportParameters];
    };
    return imageOptionsGroup;
}(optionsGroup));
exports.imageOptionsGroup = imageOptionsGroup;
var dashboardExcelOptionsGroup = (function (_super) {
    __extends(dashboardExcelOptionsGroup, _super);
    function dashboardExcelOptionsGroup(_formatValue) {
        var _this = _super.call(this) || this;
        _this._formatValue = _formatValue;
        return _this;
    }
    dashboardExcelOptionsGroup.prototype._checkExportFormat = function (format) {
        return format === _export_localization_1.excelFormat.csv.value;
    };
    dashboardExcelOptionsGroup.prototype._initialize = function () {
        var that = this;
        this.excelFormat = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ExcelFormat),
            controlCreator: dialogEditorFactory.dxSelectBox,
            values: [_export_localization_1.excelFormat.xlsx, _export_localization_1.excelFormat.xls],
            controlOptions: {
                onValueChanged: function (args) {
                    var isCsv = that._checkExportFormat(args.component.option('value'));
                    that.dashboardStatePosition.setEnabled(!isCsv && (that.exportFilters.get() || that.exportParameters.get()));
                },
                container: this._additionalOptions.popupContainer
            }
        });
        this.exportFilters = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.IncludeExportDashboardState),
            controlCreator: dialogEditorFactory.dxCheckBox,
            largeMargin: true,
            controlOptions: {
                text: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ExportFilters),
                onValueChanged: function (args) {
                    that.dashboardStatePosition.setEnabled((that.exportParameters.get() || args.component.option('value')) && !that._checkExportFormat(that.excelFormat.get()));
                }
            }
        });
        this.exportParameters = new labeledEditor({
            labelText: ' ',
            customText: true,
            controlCreator: dialogEditorFactory.dxCheckBox,
            controlOptions: {
                text: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ExportParameters),
                onValueChanged: function (args) {
                    that.dashboardStatePosition.setEnabled((that.exportFilters.get() || args.component.option('value')) && !that._checkExportFormat(that.excelFormat.get()));
                }
            }
        });
        this.dashboardStatePosition = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.DashboardStatePosition),
            controlCreator: dialogEditorFactory.dxSelectBox,
            values: [_export_localization_1.excelDashboardStatePosition.below, _export_localization_1.excelDashboardStatePosition.separateSheet],
            controlOptions: { container: this._additionalOptions.popupContainer }
        });
        this.dashboardStatePosition.setEnabled((that.exportParameters.get() || that.exportFilters.get()) && !that._checkExportFormat(this._formatValue));
        this.fileName = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FileName),
            controlCreator: dialogEditorFactory.dxTextBox
        });
    };
    dashboardExcelOptionsGroup.prototype.set = function (documentInfo) {
        this.fileName.set(documentInfo.fileName);
        var format = documentInfo.excelExportOptions.Format === _export_options_1.dashboardExportExcelFormat.csv ? _export_options_1.dashboardExportExcelFormat.xlsx : documentInfo.excelExportOptions.Format;
        this.excelFormat.set(format);
        this.exportFilters.set(documentInfo.excelExportOptions.ExportFilters);
        this.exportParameters.set(documentInfo.excelExportOptions.ExportParameters);
        this.dashboardStatePosition.set(documentInfo.excelExportOptions.DashboardStatePosition);
    };
    dashboardExcelOptionsGroup.prototype.apply = function (documentInfo) {
        documentInfo.fileName = this.fileName.get();
        documentInfo.excelExportOptions.Format = this.excelFormat.get();
        documentInfo.excelExportOptions.ExportFilters = this.exportFilters.get();
        documentInfo.excelExportOptions.ExportParameters = this.exportParameters.get();
        documentInfo.excelExportOptions.DashboardStatePosition = this.dashboardStatePosition.get();
    };
    dashboardExcelOptionsGroup.prototype.getEditors = function () {
        return [this.fileName, this.excelFormat, this.exportFilters, this.exportParameters, this.dashboardStatePosition];
    };
    return dashboardExcelOptionsGroup;
}(optionsGroup));
exports.dashboardExcelOptionsGroup = dashboardExcelOptionsGroup;
var excelOptionsGroup = (function (_super) {
    __extends(excelOptionsGroup, _super);
    function excelOptionsGroup(_formatValue) {
        var _this = _super.call(this) || this;
        _this._formatValue = _formatValue;
        return _this;
    }
    excelOptionsGroup.prototype._checkExportFormat = function (format) {
        return format === _export_localization_1.excelFormat.csv.value;
    };
    excelOptionsGroup.prototype._initialize = function () {
        var that = this;
        this.excelFormat = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ExcelFormat),
            controlCreator: dialogEditorFactory.dxSelectBox,
            values: [_export_localization_1.excelFormat.xlsx, _export_localization_1.excelFormat.xls, _export_localization_1.excelFormat.csv],
            controlOptions: {
                onValueChanged: function (args) {
                    var isCsv = that._checkExportFormat(args.component.option('value'));
                    that.separator.setEnabled(isCsv);
                    that.dashboardStatePosition.setEnabled(!isCsv && (that.exportFilters.get() || that.exportParameters.get()));
                },
                container: this._additionalOptions.popupContainer
            }
        });
        this.separator = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.CsvValueSeparator),
            controlCreator: dialogEditorFactory.dxTextBox
        });
        this.separator.setEnabled(that._checkExportFormat(this._formatValue));
        this.exportFilters = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.IncludeExportDashboardState),
            controlCreator: dialogEditorFactory.dxCheckBox,
            largeMargin: true,
            controlOptions: {
                text: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ExportFilters),
                onValueChanged: function (args) {
                    that.dashboardStatePosition.setEnabled((that.exportParameters.get() || args.component.option('value')) && !that._checkExportFormat(that.excelFormat.get()));
                }
            }
        });
        this.exportParameters = new labeledEditor({
            labelText: ' ',
            customText: true,
            controlCreator: dialogEditorFactory.dxCheckBox,
            controlOptions: {
                text: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ExportParameters),
                onValueChanged: function (args) {
                    that.dashboardStatePosition.setEnabled((that.exportFilters.get() || args.component.option('value')) && !that._checkExportFormat(that.excelFormat.get()));
                }
            }
        });
        this.dashboardStatePosition = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.DashboardStatePosition),
            controlCreator: dialogEditorFactory.dxSelectBox,
            values: [_export_localization_1.excelDashboardStatePosition.below, _export_localization_1.excelDashboardStatePosition.separateSheet],
            controlOptions: { container: this._additionalOptions.popupContainer }
        });
        this.dashboardStatePosition.setEnabled((that.exportParameters.get() || that.exportFilters.get()) && !that._checkExportFormat(this._formatValue));
        this.fileName = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FileName),
            controlCreator: dialogEditorFactory.dxTextBox
        });
    };
    excelOptionsGroup.prototype.set = function (documentInfo) {
        this.fileName.set(documentInfo.fileName);
        this.excelFormat.set(documentInfo.excelExportOptions.Format);
        this.separator.set(documentInfo.excelExportOptions.CsvValueSeparator);
        this.exportFilters.set(documentInfo.excelExportOptions.ExportFilters);
        this.exportParameters.set(documentInfo.excelExportOptions.ExportParameters);
        this.dashboardStatePosition.set(documentInfo.excelExportOptions.DashboardStatePosition);
    };
    excelOptionsGroup.prototype.apply = function (documentInfo) {
        documentInfo.fileName = this.fileName.get();
        documentInfo.excelExportOptions.Format = this.excelFormat.get();
        documentInfo.excelExportOptions.CsvValueSeparator = this.separator.get();
        documentInfo.excelExportOptions.ExportFilters = this.exportFilters.get();
        documentInfo.excelExportOptions.ExportParameters = this.exportParameters.get();
        documentInfo.excelExportOptions.DashboardStatePosition = this.dashboardStatePosition.get();
    };
    excelOptionsGroup.prototype.getEditors = function () {
        return [this.fileName, this.excelFormat, this.separator, this.exportFilters, this.exportParameters, this.dashboardStatePosition];
    };
    return excelOptionsGroup;
}(optionsGroup));
exports.excelOptionsGroup = excelOptionsGroup;
var simplyImageOptionsGroup = (function (_super) {
    __extends(simplyImageOptionsGroup, _super);
    function simplyImageOptionsGroup(_showTitleValue) {
        var _this = _super.call(this) || this;
        _this._showTitleValue = _showTitleValue;
        return _this;
    }
    simplyImageOptionsGroup.prototype._initialize = function () {
        var that = this;
        this.imageFormat = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ImageFormat),
            controlCreator: dialogEditorFactory.dxSelectBox,
            values: [_export_localization_1.imageFormat.png, _export_localization_1.imageFormat.gif, _export_localization_1.imageFormat.jpg],
            controlOptions: { container: this._additionalOptions.popupContainer }
        });
        this.showTitle = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ShowTitle),
            controlCreator: dialogEditorFactory.dxCheckBox,
            controlOptions: {
                onValueChanged: function (args) {
                    that.title.setEnabled(args.component.option('value'));
                }
            }
        });
        this.title = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.Title),
            controlCreator: dialogEditorFactory.dxTextBox
        });
        this.title.setEnabled(this._showTitleValue);
        this.resolution = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.Resolution),
            controlCreator: dialogEditorFactory.dxNumberBox
        });
        this.fileName = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FileName),
            controlCreator: dialogEditorFactory.dxTextBox
        });
    };
    simplyImageOptionsGroup.prototype.set = function (documentInfo) {
        this.showTitle.set(documentInfo.imageExportOptions.ShowTitle);
        this.title.set(documentInfo.imageExportOptions.Title);
        this.imageFormat.set(documentInfo.imageExportOptions.Format);
        this.resolution.set(documentInfo.imageExportOptions.Resolution);
        this.fileName.set(documentInfo.fileName);
    };
    simplyImageOptionsGroup.prototype.apply = function (documentInfo) {
        documentInfo.imageExportOptions.ShowTitle = this.showTitle.get();
        documentInfo.imageExportOptions.Title = this.title.get();
        documentInfo.imageExportOptions.Format = this.imageFormat.get();
        documentInfo.imageExportOptions.Resolution = this.resolution.get();
        documentInfo.fileName = this.fileName.get();
    };
    simplyImageOptionsGroup.prototype.getEditors = function () {
        return [this.fileName, this.showTitle, this.title, this.imageFormat, this.resolution];
    };
    return simplyImageOptionsGroup;
}(optionsGroup));
exports.simplyImageOptionsGroup = simplyImageOptionsGroup;
var dashboardImageOptionsGroup = (function (_super) {
    __extends(dashboardImageOptionsGroup, _super);
    function dashboardImageOptionsGroup(_showTitleValue) {
        var _this = _super.call(this) || this;
        _this._showTitleValue = _showTitleValue;
        return _this;
    }
    dashboardImageOptionsGroup.prototype._initialize = function () {
        var that = this;
        this.imageFormat = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ImageFormat),
            controlCreator: dialogEditorFactory.dxSelectBox,
            values: [_export_localization_1.imageFormat.png, _export_localization_1.imageFormat.gif, _export_localization_1.imageFormat.jpg],
            controlOptions: { container: this._additionalOptions.popupContainer }
        });
        this.showTitle = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ShowTitle),
            controlCreator: dialogEditorFactory.dxCheckBox,
            controlOptions: {
                onValueChanged: function (args) {
                    that.title.setEnabled(args.component.option('value'));
                }
            }
        });
        this.title = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.Title),
            controlCreator: dialogEditorFactory.dxTextBox
        });
        this.exportFilters = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.IncludeExportDashboardState),
            controlCreator: dialogEditorFactory.dxCheckBox,
            largeMargin: true,
            controlOptions: {
                text: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ExportFilters)
            }
        });
        this.exportParameters = new labeledEditor({
            labelText: ' ',
            customText: true,
            controlCreator: dialogEditorFactory.dxCheckBox,
            controlOptions: {
                text: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.ExportParameters)
            }
        });
        this.title.setEnabled(this._showTitleValue);
        this.resolution = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.Resolution),
            controlCreator: dialogEditorFactory.dxNumberBox
        });
        this.fileName = new labeledEditor({
            labelText: _localizer_1.localizer.getString(_localization_ids_1.localizationId.labelName.FileName),
            controlCreator: dialogEditorFactory.dxTextBox
        });
    };
    dashboardImageOptionsGroup.prototype.set = function (documentInfo) {
        this.showTitle.set(documentInfo.imageExportOptions.ShowTitle);
        this.title.set(documentInfo.imageExportOptions.Title);
        this.exportFilters.set(documentInfo.imageExportOptions.ExportFilters);
        this.exportParameters.set(documentInfo.imageExportOptions.ExportParameters);
        this.imageFormat.set(documentInfo.imageExportOptions.Format);
        this.resolution.set(documentInfo.imageExportOptions.Resolution);
        this.fileName.set(documentInfo.fileName);
    };
    dashboardImageOptionsGroup.prototype.apply = function (documentInfo) {
        documentInfo.imageExportOptions.ShowTitle = this.showTitle.get();
        documentInfo.imageExportOptions.Title = this.title.get();
        documentInfo.imageExportOptions.ExportFilters = this.exportFilters.get();
        documentInfo.imageExportOptions.ExportParameters = this.exportParameters.get();
        documentInfo.imageExportOptions.Format = this.imageFormat.get();
        documentInfo.imageExportOptions.Resolution = this.resolution.get();
        documentInfo.fileName = this.fileName.get();
    };
    dashboardImageOptionsGroup.prototype.getEditors = function () {
        return [this.fileName, this.showTitle, this.title, this.imageFormat, this.resolution, this.exportFilters, this.exportParameters];
    };
    return dashboardImageOptionsGroup;
}(optionsGroup));
exports.dashboardImageOptionsGroup = dashboardImageOptionsGroup;


/***/ }),
/* 589 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.ui.dxNumberBox };

/***/ }),
/* 590 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var _common_1 = __webpack_require__(35);
var _utils_1 = __webpack_require__(3);
var _base_item_1 = __webpack_require__(29);
var CustomItemViewer = (function (_super) {
    __extends(CustomItemViewer, _super);
    function CustomItemViewer(model, container, options) {
        var _this = _super.call(this, _utils_1.$unwrap(container), options) || this;
        _this.iterateData = function (action) {
            _this.model.iterateData(action);
        };
        _this.canMasterFilter = function (row) {
            if (!_this.model._isMasterFilter())
                return false;
            if (!!row) {
                var preparedRow = _this._prepareRow(_this._getUniqueValues(row));
                if (!_utils_1.allowSelectValue(preparedRow))
                    return false;
            }
            return true;
        };
        _this.canDrillDown = function (row) {
            if (!_this.model._isDrillDownEnabled() || !_this._canPerformDrillDown())
                return false;
            if (!_this.model._isMasterFilter())
                return true;
            if (_this._canSetMultipleMasterFilter() && _this.allowMultiselection)
                return false;
            if (!!row) {
                var values = _this._getUniqueValues(row), level = values.length;
                if (level >= _this.model.interactivityTargets().length)
                    return false;
                return _this.isSelected(row);
            }
            return true;
        };
        _this.setMasterFilter = function (row) {
            if (_this.model._isMasterFilter()) {
                var selection = [];
                if (!!row) {
                    var preparedRow = _this._prepareRow(_this._getUniqueValues(row));
                    if (!_utils_1.allowSelectValue(preparedRow))
                        return false;
                    selection.push(preparedRow);
                    if (_this._canSetMultipleMasterFilter() && _this.allowMultiselection) {
                        var currentSelection = _this.model._actualSelectionValues() || [];
                        if (_utils_1.arrayContains(currentSelection, preparedRow))
                            selection = currentSelection.filter(function (row) { return !_utils_1.arrayEquals(row, preparedRow); });
                        else
                            selection = currentSelection.concat(selection);
                    }
                }
                var name = _this.model.componentName();
                if (selection.length > 0) {
                    var action = _this._canSetMultipleMasterFilter() ? _common_1.viewerActions.setMultipleValuesMasterFilter : _common_1.viewerActions.setMasterFilter;
                    _this.selected.fire(name, action, selection);
                }
                else {
                    _this.clearMasterFilter.fire(name);
                }
                return true;
            }
            return false;
        };
        _this.drillDown = function (row) {
            if (_this.model._isDrillDownEnabled() && _this._canPerformDrillDown()) {
                var values = _this._getUniqueValues(row);
                var level = values.length;
                if (level < _this.model.interactivityTargets().length) {
                    _this.selected.fire(_this.model.componentName(), _common_1.viewerActions.drillDown, _this._prepareRow(values));
                    return true;
                }
            }
            return false;
        };
        _this.model = model;
        return _this;
    }
    CustomItemViewer.prototype.contentWidth = function () {
        return $(this.contentRoot).width();
    };
    CustomItemViewer.prototype.contentHeight = function () {
        return $(this.contentRoot).height();
    };
    CustomItemViewer.prototype.setSize = function (width, height) {
        _super.prototype.setSize.call(this, width, height);
    };
    CustomItemViewer.prototype._renderContent = function (element, changeExisting, afterRenderCallback) {
        this.renderContent(_utils_1.wrapPublicElement(element), changeExisting, afterRenderCallback);
        return false;
    };
    CustomItemViewer.prototype.renderContent = function (element, changeExisting, afterRenderCallback) {
    };
    CustomItemViewer.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
    };
    CustomItemViewer.prototype.clearSelection = function () {
        _super.prototype.clearSelection.call(this);
    };
    CustomItemViewer.prototype.setSelection = function (values) {
        _super.prototype.setSelection.call(this, values);
    };
    CustomItemViewer.prototype.allowExportSingleItem = function () {
        return false;
    };
    CustomItemViewer.prototype.getExportInfo = function () {
        return null;
    };
    CustomItemViewer.prototype.getMasterFilterMode = function () {
        return this.model._masterFilterMode();
    };
    CustomItemViewer.prototype.getBindingValue = function (propertyName, index) {
        return this.model.getBindingValue(propertyName, index);
    };
    CustomItemViewer.prototype.getPropertyValue = function (propertyName) {
        return this.model.customProperties.getValue(propertyName);
    };
    CustomItemViewer.prototype.subscribe = function (propertyName, callback) {
        return this.model.customProperties[propertyName].subscribe(callback);
    };
    CustomItemViewer.prototype.isSelected = function (row) {
        var actualSelectionValues = this.model._actualSelectionValues();
        return actualSelectionValues && _utils_1.arrayContains(actualSelectionValues, this._prepareRow(this._getUniqueValues(row)));
    };
    CustomItemViewer.prototype.getInfo = function () {
        var info = _super.prototype.getInfo.call(this), exportInfo = this.getExportInfo();
        return exportInfo ? _utils_1.deepExtend(info, {
            customItemExportInfo: exportInfo
        }) : info;
    };
    CustomItemViewer.prototype.initializeData = function (newOptions) {
    };
    CustomItemViewer.prototype._initializeData = function (newOptions) {
        _super.prototype._initializeData.call(this, newOptions);
        this.initializeData(newOptions);
        if (this.options) {
            this.options.allowExport = this.options.allowExport && this.allowExportSingleItem();
        }
    };
    CustomItemViewer.prototype._prepareRow = function (row) {
        if (this.model._isDrillDownEnabled() && (this._canPerformDrillDown() || this._canPerformDrillUp()))
            return [row[row.length - 1]];
        return row;
    };
    CustomItemViewer.prototype._getUniqueValues = function (row) {
        var res = [];
        this.model.customBindings.filter(function (binding) { return binding.enableInteractivity; }).forEach(function (binding) {
            var current = row.getUniqueValue(binding.propertyName);
            if (current) {
                res = res.concat(current);
            }
        });
        return res;
    };
    CustomItemViewer.prototype._isSupportDataAwareExport = function () {
        return false;
    };
    return CustomItemViewer;
}(_base_item_1.baseItem));
exports.CustomItemViewer = CustomItemViewer;
var customViewerItem = (function (_super) {
    __extends(customViewerItem, _super);
    function customViewerItem() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return customViewerItem;
}(CustomItemViewer));
exports.customViewerItem = customViewerItem;


/***/ }),
/* 591 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _data_item_viewer_adapter_1 = __webpack_require__(113);
var GridItemViewerAdapter = (function (_super) {
    __extends(GridItemViewerAdapter, _super);
    function GridItemViewerAdapter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GridItemViewerAdapter.prototype.attachToModel = function (viewerItem, dataDashboardItem) {
        var _this = this;
        _super.prototype.attachToModel.call(this, viewerItem, dataDashboardItem);
        viewerItem.clientStateUpdate.add(dataDashboardItem._processItemClientStateUpdate);
        viewerItem.gridWidthOptionsChanged = function (state) {
            if (_this.context.isDesignMode()) {
                dataDashboardItem._setColumnWidthOptions(state);
            }
        };
        this.toDispose(ko.computed(function () {
            var gridItemViewer = viewerItem;
            gridItemViewer.resetClientStateOnUpdate = _this.context.isDesignMode();
            gridItemViewer.manualyResetClientState = !_this.context.isDesignMode();
        }));
    };
    GridItemViewerAdapter.prototype.detachFromModel = function (viewerItem, dataDashboardItem) {
        _super.prototype.detachFromModel.call(this, viewerItem, dataDashboardItem);
        viewerItem.gridWidthOptionsChanged = null;
        viewerItem.clientStateUpdate.remove(dataDashboardItem._processItemClientStateUpdate);
    };
    return GridItemViewerAdapter;
}(_data_item_viewer_adapter_1.DataItemViewerAdapter));
exports.GridItemViewerAdapter = GridItemViewerAdapter;


/***/ }),
/* 592 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _geo_point_map_item_base_1 = __webpack_require__(153);
var _data_item_viewer_adapter_1 = __webpack_require__(113);
var MapItemViewerAdapter = (function (_super) {
    __extends(MapItemViewerAdapter, _super);
    function MapItemViewerAdapter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MapItemViewerAdapter.prototype.updateItemContent = function (content) {
        _super.prototype.updateItemContent.call(this, content);
        if (this.dashboardItem._clientState()) {
            this.item.updateClientState(this.dashboardItem._clientState());
        }
    };
    MapItemViewerAdapter.prototype.createDashboardViewerItem = function (element, content, dashboardItem) {
        var viewerItem = _super.prototype.createDashboardViewerItem.call(this, element, content, dashboardItem);
        viewerItem.isInitialExtentChanged = dashboardItem._initialExtentChanged();
        if (dashboardItem._clientState()) {
            viewerItem.updateClientState(this.dashboardItem._clientState());
        }
        viewerItem.initialDataRequest();
        if (viewerItem instanceof _geo_point_map_item_base_1.geoPointMapItemBase) {
            viewerItem.forceUpdateClientState();
        }
        return viewerItem;
    };
    MapItemViewerAdapter.prototype.attachToModel = function (viewerItem, dataDashboardItem) {
        var _this = this;
        _super.prototype.attachToModel.call(this, viewerItem, dataDashboardItem);
        viewerItem.clientStateUpdate.add(dataDashboardItem._processItemClientStateUpdate);
        viewerItem.dataRequest.add(dataDashboardItem._processDataRequest);
        this.modelSubscriptions.push(dataDashboardItem._initialExtentChanged.subscribe(function (newValue) {
            viewerItem.isInitialExtentChanged = newValue;
            if (!viewerItem.isInitialExtentChanged) {
                if (_this._isDesignMode) {
                    var fullViewport = viewerItem.options.FullViewport;
                    viewerItem.onInitialExtent(fullViewport);
                    dataDashboardItem.viewport._set(fullViewport, true);
                }
                else {
                    viewerItem.onInitialExtent();
                }
            }
            viewerItem.updateCaptionToolbar();
        }));
        viewerItem.viewportChangedCallback = function (viewport) {
            if (_this._isDesignMode) {
                dataDashboardItem.viewport._set(viewport, false);
            }
        };
        viewerItem.initialExtentChanged = function (changed) {
            dataDashboardItem._initialExtentChanged(changed);
        };
    };
    MapItemViewerAdapter.prototype.detachFromModel = function (viewerItem, dataDashboardItem) {
        _super.prototype.detachFromModel.call(this, viewerItem, dataDashboardItem);
        viewerItem.viewportChangedCallback = null;
        viewerItem.initialExtentChanged = null;
        viewerItem.clientStateUpdate.remove(dataDashboardItem._processItemClientStateUpdate);
        viewerItem.dataRequest.remove(dataDashboardItem._processDataRequest);
    };
    MapItemViewerAdapter.prototype.resume = function () {
        _super.prototype.resume.call(this);
        this.item.initialDataRequest();
    };
    return MapItemViewerAdapter;
}(_data_item_viewer_adapter_1.DataItemViewerAdapter));
exports.MapItemViewerAdapter = MapItemViewerAdapter;


/***/ }),
/* 593 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _data_item_viewer_adapter_1 = __webpack_require__(113);
var PivotItemViewerAdapter = (function (_super) {
    __extends(PivotItemViewerAdapter, _super);
    function PivotItemViewerAdapter() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.expandValueHandler = function (_, params) {
            if (params.isRequestData) {
                _this.dashboardItem._processItemExpandingChange({
                    values: params.values,
                    isColumn: params.isColumn
                });
            }
        };
        _this.expandStateChangedHandler = function () {
            var currentState = _this.item.getExpandingState(!_this.dashboardItem.autoExpandRowGroups(), !_this.dashboardItem.autoExpandColumnGroups());
            _this.dashboardItem._processExpandingStateChanged(currentState);
        };
        return _this;
    }
    PivotItemViewerAdapter.prototype.attachToModel = function (viewerItem, dataDashboardItem) {
        _super.prototype.attachToModel.call(this, viewerItem, dataDashboardItem);
        viewerItem.expandValue.add(this.expandValueHandler);
        viewerItem.expandStateChanged.add(this.expandStateChangedHandler);
    };
    PivotItemViewerAdapter.prototype.detachFromModel = function (viewerItem, dataDashboardItem) {
        viewerItem.expandValue.remove(this.expandValueHandler);
        viewerItem.expandStateChanged.remove(this.expandStateChangedHandler);
        _super.prototype.detachFromModel.call(this, viewerItem, dataDashboardItem);
    };
    return PivotItemViewerAdapter;
}(_data_item_viewer_adapter_1.DataItemViewerAdapter));
exports.PivotItemViewerAdapter = PivotItemViewerAdapter;


/***/ }),
/* 594 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _data_item_viewer_adapter_1 = __webpack_require__(113);
var PredefinedPeriodsItemViewerAdapter = (function (_super) {
    __extends(PredefinedPeriodsItemViewerAdapter, _super);
    function PredefinedPeriodsItemViewerAdapter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PredefinedPeriodsItemViewerAdapter.prototype.attachToModel = function (viewerItem, rangeFilterItem) {
        _super.prototype.attachToModel.call(this, viewerItem, rangeFilterItem);
        this.toDispose(rangeFilterItem.currentSelectedDateTimePeriodName.subscribe(function (newValue) {
            viewerItem._setPredefinedRange(newValue);
        }));
        viewerItem.predefinedRangeChanged = function (newRange) {
            rangeFilterItem._processItemSetPredefinedPeriod(newRange);
        };
    };
    return PredefinedPeriodsItemViewerAdapter;
}(_data_item_viewer_adapter_1.DataItemViewerAdapter));
exports.PredefinedPeriodsItemViewerAdapter = PredefinedPeriodsItemViewerAdapter;


/***/ }),
/* 595 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = __webpack_require__(69);
var ko = __webpack_require__(0);
var _layout_1 = __webpack_require__(155);
function getLocation(x, y, width, height) {
    if (y >= height / width * x) {
        if (y >= -height / width * x + height) {
            return 'bottom';
        }
        else {
            return 'left';
        }
    }
    else {
        if (y >= -height / width * x + height) {
            return 'right';
        }
        else {
            return 'top';
        }
    }
}
var DragDataProvider = (function () {
    function DragDataProvider() {
    }
    DragDataProvider.dragData = null;
    return DragDataProvider;
}());
exports.DragDataProvider = DragDataProvider;
function canDrop(what, to) {
    if (!!what) {
        return to.canAttach(what.viewModel);
    }
    if (!!DragDataProvider.dragData && !!DragDataProvider.dragData.itemJson) {
        return to.canAttach(DragDataProvider.dragData.itemJson);
    }
    return false;
}
function findElementIndex(originalElement, selector, mouseClientX, mouseClientY) {
    var elements = originalElement
        .parentElement
        .querySelectorAll(selector);
    for (var index = 0; index < elements.length; index++) {
        var element = elements[index];
        var rect = element.getBoundingClientRect();
        if (rect.left < mouseClientX && rect.right > mouseClientX
            && rect.top < mouseClientY && rect.bottom > mouseClientY) {
            return index;
        }
    }
    return -1;
}
ko.bindingHandlers['dx-ko-layout-draggable'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var model = ko.unwrap(valueAccessor());
        var currentItem = ko.observable(null), dragOverItem = ko.observable(null), currentTargetItem = ko.observable(null), currentTargetItemBehavior = ko.observable('InsertBesideGroup'), hoverLocation = ko.observable(), timer = ko.observable(), inTimer = ko.observable(false), resetDragOverState = function () {
            timer() && clearInterval(timer());
            _layout_1.setHoverLocation(dragOverItem());
            _layout_1.setHoverLocation(currentTargetItem());
            currentTargetItem(null);
            currentTargetItemBehavior('InsertBesideGroup');
            dragOverItem(undefined);
            timer(undefined);
            inTimer(false);
        };
        ko.computed(function () {
            if (model.enabled === undefined || ko.unwrap(model.enabled)) {
                events_1.on(element, 'dragstart.dx-layout-drag', '.dx-layout-item-plate', function (ev) {
                    var originalEvent = ev.originalEvent, item = ko.dataFor(originalEvent.target);
                    if (item instanceof _layout_1.LayoutItem) {
                        currentItem(item);
                        originalEvent.dataTransfer.effectAllowed = 'move';
                        DragDataProvider.dragData = { 'type': 'LayoutItem', 'id': currentItem().viewModel['itemId'] };
                        originalEvent.dataTransfer.setData('text', JSON.stringify(DragDataProvider.dragData));
                        return true;
                    }
                });
                events_1.on(element, 'dragend.dx-layout-drag', function (ev) {
                    currentItem() && currentItem().visible(true);
                    resetDragOverState();
                    currentItem(null);
                    DragDataProvider.dragData = null;
                });
                events_1.on(element, 'dragover.dx-layout-drag', function (ev) {
                    if (inTimer() || !DragDataProvider.dragData) {
                        return;
                    }
                    var originalEvent = ev.originalEvent, targetItem = ko.dataFor(originalEvent.target);
                    if (targetItem instanceof _layout_1.LayoutItem && canDrop(currentItem(), targetItem)) {
                        var dragOverController = targetItem.viewModel.dragOverInnerElementController;
                        if (dragOverController) {
                            var index = findElementIndex(ev.target, dragOverController.selector, ev.clientX, ev.clientY);
                            if (index !== -1) {
                                dragOverController.onDragOver(index);
                            }
                        }
                        var currentHoverLocation = getLocation(originalEvent.offsetX, originalEvent.offsetY, targetItem.width(), targetItem.height());
                        if (dragOverItem() !== targetItem || currentHoverLocation !== hoverLocation()) {
                            currentItem() && currentItem().visible(false);
                            resetDragOverState();
                            hoverLocation(currentHoverLocation);
                            dragOverItem(targetItem);
                            _layout_1.setHoverLocation(dragOverItem(), hoverLocation());
                            currentTargetItem(dragOverItem());
                            currentTargetItemBehavior('InsertBesideGroup');
                            var selectionList = dragOverItem().getSelectionParentsList(hoverLocation());
                            if (selectionList.length > 1) {
                                var currentIndex = 1;
                                timer() && clearInterval(timer());
                                timer(window.setInterval(function () {
                                    inTimer(true);
                                    try {
                                        _layout_1.setHoverLocation(currentTargetItem(), null, currentTargetItemBehavior());
                                        currentTargetItem(selectionList[currentIndex].node);
                                        currentTargetItemBehavior(selectionList[currentIndex].dropBehavior);
                                        _layout_1.setHoverLocation(currentTargetItem(), hoverLocation(), currentTargetItemBehavior());
                                        currentIndex++;
                                        if (currentIndex >= selectionList.length) {
                                            currentIndex = 0;
                                        }
                                    }
                                    finally {
                                        inTimer(false);
                                    }
                                }, 1000));
                            }
                        }
                        ev.preventDefault();
                    }
                });
                events_1.on(element, 'dragleave.dx-layout-drag', function () {
                    resetDragOverState();
                });
                events_1.on(element, 'drop.dx-layout-drag', function (ev) {
                    try {
                        var originalEvent = ev.originalEvent, targetItem = ko.dataFor(originalEvent.target), targetItemInsertionBehavior = 'InsertBesideGroup';
                        if (targetItem instanceof _layout_1.LayoutItem && targetItem !== currentItem()) {
                            var dragDataString = originalEvent.dataTransfer.getData('text') || '{}';
                            var dragData = JSON.parse(dragDataString);
                            if (dragData.type === 'LayoutItem') {
                                var itemToAttch = currentItem();
                                targetItem = currentTargetItem();
                                targetItemInsertionBehavior = currentTargetItemBehavior();
                                setTimeout(function () {
                                    _layout_1.setHoverLocation(itemToAttch);
                                    itemToAttch.moveTo(targetItem, hoverLocation(), targetItemInsertionBehavior);
                                }, 1);
                                ev.stopPropagation();
                            }
                            if (dragData.type === 'NewLayoutItem') {
                                targetItem = currentTargetItem();
                                targetItemInsertionBehavior = currentTargetItemBehavior();
                                setTimeout(function () {
                                    targetItem.create(dragData.itemJson, hoverLocation(), targetItemInsertionBehavior);
                                }, 1);
                                ev.stopPropagation();
                            }
                        }
                    }
                    finally {
                        resetDragOverState();
                        currentItem(null);
                        return false;
                    }
                });
            }
            else {
                events_1.off(element, '.dx-layout-drag');
            }
        });
    }
};


/***/ }),
/* 596 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var disposable_object_1 = __webpack_require__(11);
var _knockout_utils_1 = __webpack_require__(17);
var _tab_header_calculator_1 = __webpack_require__(540);
var _base_item_1 = __webpack_require__(29);
var _popup_menu_creator_1 = __webpack_require__(339);
var _interfaces_1 = __webpack_require__(76);
var _element_size_utils_1 = __webpack_require__(358);
var DashboardTabsViewModel = (function (_super) {
    __extends(DashboardTabsViewModel, _super);
    function DashboardTabsViewModel(layoutItem, headerHeight, element) {
        var _this = _super.call(this) || this;
        _this.layoutItem = layoutItem;
        _this.headerHeight = headerHeight;
        _this.element = element;
        _this.showMenu = ko.observable(false);
        _this.tabPageBindings = ko.observableArray([]).extend({ deferred: true });
        _this.selectedItemKeys = ko.observableArray([]);
        _this.showAddButton = ko.computed(function () {
            return _this.layoutItem.isDesignMode() && _this.showCaption;
        });
        _this._defaultButtonWidth = 34;
        _this._tabsInfoCache = {};
        _this._toolbarCache = {};
        _this._initialize();
        return _this;
    }
    Object.defineProperty(DashboardTabsViewModel.prototype, "viewModel", {
        get: function () {
            return this.layoutItem.viewModel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardTabsViewModel.prototype, "showCaption", {
        get: function () {
            return this.viewModel.item() ? this.viewModel.item().showCaption() : true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardTabsViewModel.prototype, "_containerSizeController", {
        get: function () {
            return this.layoutItem.sizeController;
        },
        enumerable: true,
        configurable: true
    });
    DashboardTabsViewModel.prototype.toggleMenu = function (bindings, args) {
        var menu = this._createMenuToolbarItem(this.headersViewModel.leftVisibleIndex, this.headersViewModel.rightVisibleIndex);
        var boundaryContainer = _base_item_1.getControlContainer(this.element);
        var container = this.element.firstElementChild;
        _popup_menu_creator_1.PopupMenuCreator.toggleMenu(args.currentTarget, menu, container, boundaryContainer);
    };
    DashboardTabsViewModel.prototype.createTabPage = function () {
        this.viewModel.createTabPage();
    };
    DashboardTabsViewModel.prototype.onSelectionChanged = function (e) {
        if (e.addedItems.length > 0) {
            var tabPageBinding = this.tabPageBindings().filter(function (tabPageBinding) { return tabPageBinding.id === e.addedItems[0].id; })[0];
            if (tabPageBinding && tabPageBinding.pageDashboardItem !== this.viewModel.activeTabPage()) {
                this.viewModel.activeTabPage(tabPageBinding.pageDashboardItem);
            }
        }
    };
    DashboardTabsViewModel.prototype._syncTabPageBindings = function (childItems) {
        var _this = this;
        var subscriptions = [];
        var createTabPageBindings = function (pageViewModels) {
            var tabPageBindings = pageViewModels
                .filter(function (pageViewModel) { return pageViewModel.hasItem(); })
                .map(function (pageViewModel) { return _this._createPageBinding(pageViewModel.item, pageViewModel.model); });
            _this.tabPageBindings(tabPageBindings);
        };
        this.toDispose(_knockout_utils_1.safeSubscribe({ childItems: childItems }, function (args) {
            var pageViewModels = args.childItems.map(function (pageLayoutItem) { return pageLayoutItem._createViewModel(); });
            subscriptions.forEach(function (d) { return d.dispose(); });
            subscriptions = pageViewModels.map(function (pageViewModel) { return pageViewModel.item.subscribe(function () { return createTabPageBindings(pageViewModels); }); });
            createTabPageBindings(pageViewModels);
            return {
                dispose: function () { return subscriptions.forEach(function (d) { return d.dispose(); }); }
            };
        }));
    };
    DashboardTabsViewModel.prototype._initialize = function () {
        var _this = this;
        $(this.element).attr('data-layout-item-name', this.viewModel.dashboardItem());
        _element_size_utils_1.setElementSize(this.element, this._containerSizeController);
        this._syncTabPageBindings(this.viewModel.childItems);
        this._containerSizeController.requestRepaint.add(function () { return _this._onContainerRepaint(); });
        this.toDispose(this.layoutItem.isDesignMode.subscribe(function (newValue) {
            _this._updateTabHeaders();
        }));
        this.toDispose(_knockout_utils_1.safeSubscribe({
            activeTabPage: this.viewModel.activeTabPage,
            tabPageBindings: this.tabPageBindings
        }, function (args) {
            _this.selectedItemKeys(_this._getSelectedKeys(args.activeTabPage));
            args.tabPageBindings.forEach(function (page) {
                if (_this._toolbarCache[page.dashboardItem.componentName()] && args.activeTabPage) {
                    _this._toolbarCache[page.dashboardItem.componentName()].disabled = page.id !== args.activeTabPage.componentName();
                }
            });
        }));
    };
    DashboardTabsViewModel.prototype._createMenuToolbarItem = function (leftVisibleIndex, rightVisibleIndex) {
        var _this = this;
        var hiddenTabs = [];
        this.viewModel.childItems().forEach(function (layoutPageItem, i) {
            var layoutViewModel = layoutPageItem._createViewModel();
            if (layoutViewModel.hasItem()) {
                hiddenTabs.push({
                    name: layoutViewModel.item().name() ? layoutViewModel.item().name() : '',
                    page: layoutPageItem.item
                });
            }
        });
        hiddenTabs.splice(leftVisibleIndex, rightVisibleIndex - leftVisibleIndex + 1);
        return {
            type: 'list',
            items: hiddenTabs.map(function (tab) { return tab.name; }),
            itemClick: function (itemData, itemElement, menuItemIndex) {
                _this.viewModel.activeTabPage(hiddenTabs[menuItemIndex].page);
                _this._updateTabHeaders();
            }
        };
    };
    DashboardTabsViewModel.prototype._getSelectedKeys = function (activePage) {
        return activePage ? [activePage.componentName()] : [];
    };
    DashboardTabsViewModel.prototype._createPageBinding = function (toolbarHolder, pageLayoutItem) {
        return {
            dashboardItem: toolbarHolder(),
            id: pageLayoutItem.dashboardItem(),
            pageDashboardItem: pageLayoutItem.item,
            sizeController: new _interfaces_1.SingleTabItemSizeController(this.layoutItem.sizeController.requestRepaint, ko.observable(0), ko.observable(0)),
            context: this.layoutItem.getContext(),
            localContext: this._prepareLocalContext(this.layoutItem.getLocalContext()),
            ignoreBorder: ko.observable(false)
        };
    };
    DashboardTabsViewModel.prototype._prepareLocalContext = function (localContext) {
        var _this = this;
        localContext.viewerItemCreated.add(function (item, viewerItem) {
            viewerItem.deferredToolbarRenderingPromise = function (itemName, width, height) {
                var def = $.Deferred();
                _this._onToolbarUpdated(itemName, width, height, def);
                return def.promise();
            };
        });
        localContext.beforeApplyViewerItemOptions.add(function (item, options, isCreation) {
            if (_this.viewModel.item()) {
                options.CaptionViewModel.ShowCaption = _this.showCaption;
            }
        });
        localContext.boundaryContainer = this.element;
        localContext.createCaptionToolbar = function (viewerItem, container, controlContainer, popupContainer, viewOptions) {
            var toolbar = _base_item_1.createDefaultToolbar(viewerItem, container, controlContainer, popupContainer, viewOptions);
            if (container) {
                _this._toolbarCache[viewerItem.options.Name] = toolbar;
                var binding = _this.tabPageBindings().filter(function (binding) { return binding.dashboardItem.componentName() === viewerItem.options.Name; })[0];
                toolbar.disabled = !_this.viewModel.activeTabPage() || binding.id !== _this.viewModel.activeTabPage().componentName();
            }
            return toolbar;
        };
        localContext.viewerItemDispose.add(function (item, viewerItem) {
            delete _this._tabsInfoCache[item.componentName()];
            delete _this._toolbarCache[item.componentName()];
        });
        return localContext;
    };
    DashboardTabsViewModel.prototype._onContainerRepaint = function () {
        _element_size_utils_1.setElementSize(this.element, this._containerSizeController);
        this._updateTabHeaders();
    };
    DashboardTabsViewModel.prototype._onToolbarUpdated = function (itemName, width, height, def) {
        var page = this.tabPageBindings().filter(function (page) { return page.dashboardItem.componentName() === itemName; })[0];
        this.headerHeight(Math.max(this.headerHeight(), height));
        this._tabsInfoCache[page.id] = {
            width: width,
            deferredRender: def
        };
        this._updateTabHeaders();
    };
    DashboardTabsViewModel.prototype._updateTabHeaders = function () {
        var _this = this;
        var tabHeadersWidth = this.tabPageBindings().map(function (page) { return _this._tabsInfoCache[page.id] ? _this._tabsInfoCache[page.id].width : undefined; });
        var tabHeadersDeferredRender = this.tabPageBindings().map(function (page) { return _this._tabsInfoCache[page.id] ? _this._tabsInfoCache[page.id].deferredRender : undefined; });
        var hasEmptyWidth = tabHeadersWidth.lastIndexOf(undefined) >= 0;
        if (tabHeadersWidth.length > 0 && !hasEmptyWidth) {
            var buttonsWidth_1 = this.showAddButton() ? this._defaultButtonWidth : 0;
            var activeTabIndex = Math.max(0, this.viewModel.activeTabIndex());
            this.headersViewModel = _tab_header_calculator_1.calcTabHeadersWidth(tabHeadersWidth, this._containerSizeController.getWidth() - buttonsWidth_1, activeTabIndex, this.showCaption);
            this.showMenu(this.showCaption && this.headersViewModel.widths.some(function (width) { return width === 0; }));
            if (this.showMenu()) {
                buttonsWidth_1 += this._defaultButtonWidth;
                this.headersViewModel = _tab_header_calculator_1.calcTabHeadersWidth(tabHeadersWidth, this._containerSizeController.getWidth() - buttonsWidth_1, activeTabIndex, this.showCaption);
            }
            this.tabPageBindings().forEach(function (page, index) { return page.ignoreBorder(index === _this.headersViewModel.rightVisibleIndex && buttonsWidth_1 === 0); });
            this.headersViewModel.widths.forEach(function (width, i) {
                _this.tabPageBindings()[i].sizeController.width(width);
                _this.tabPageBindings()[i].sizeController.height(_this.headerHeight());
                if (i >= _this.headersViewModel.leftVisibleIndex && i <= _this.headersViewModel.rightVisibleIndex) {
                    tabHeadersDeferredRender[i].resolve();
                }
            });
        }
    };
    return DashboardTabsViewModel;
}(disposable_object_1.DisposableObject));
exports.DashboardTabsViewModel = DashboardTabsViewModel;


/***/ }),
/* 597 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var _default_1 = __webpack_require__(6);
var _utils_1 = __webpack_require__(3);
var model_1 = __webpack_require__(38);
var disposable_object_1 = __webpack_require__(11);
var data_dashboard_item_1 = __webpack_require__(9);
var filter_element_item_base_1 = __webpack_require__(110);
var range_filter_item_1 = __webpack_require__(111);
var _pane_content_holder_1 = __webpack_require__(284);
var _base_metadata_1 = __webpack_require__(4);
var notificator_1 = __webpack_require__(114);
var _dashboard_event_1 = __webpack_require__(726);
var _item_change_subscriber_1 = __webpack_require__(599);
var DashboardUpdateHub = (function (_super) {
    __extends(DashboardUpdateHub, _super);
    function DashboardUpdateHub(_dashboard, _dataRequestOptions, _callBacks, _visibleItemsProvider) {
        var _this = _super.call(this) || this;
        _this._dashboard = _dashboard;
        _this._dataRequestOptions = _dataRequestOptions;
        _this._callBacks = _callBacks;
        _this._visibleItemsProvider = _visibleItemsProvider;
        _this._timer = 0;
        _this._requestQueue = [];
        _this.initializeItem = function (item) {
            if (item instanceof data_dashboard_item_1.DataDashboardItem) {
                item._beforeMasterFilterSetByUserInteraction = function () {
                    if (!_this._isUpdating() && !_this._suspendItem) {
                        _this._suspendItem = item;
                    }
                };
                item._afterMasterFilterSetByUserInteraction = function () {
                    if (!_this._isUpdating() && _this._suspendItem === item) {
                        _this._suspendItem = null;
                    }
                };
                item._drillDownChangedByUserInteraction = function () {
                    if (_this._suspendItem === item) {
                        _this._suspendItem = null;
                    }
                };
            }
            item._getContentCategories().forEach(function (category) { return _this._itemChanged(item, category); });
        };
        _this.dataSourcePropertyChanged = new _dashboard_event_1.DashboardEvent();
        _this.dashboardItemPropertyChanged = new _dashboard_event_1.DashboardEvent();
        if (_this._visibleItemsProvider) {
            _this.toDispose(_this._visibleItemsProvider.visibleItems.subscribe(function (_) { return _this._resolveItemsDeffered(); }));
        }
        var itemSubscription = {
            itemAdded: _this.initializeItem,
            itemDeleted: function (item) {
                if (item instanceof data_dashboard_item_1.DataDashboardItem) {
                    item._beforeMasterFilterSetByUserInteraction = null;
                }
            },
            itemChanged: function (item, category) {
                if (item instanceof data_dashboard_item_1.DataDashboardItem && category !== _base_metadata_1.PropertyCategory.ViewModel) {
                    item._limitDataState.reset();
                }
                _this._itemChanged(item, category);
                _this.dashboardItemPropertyChanged.fire({ item: item, category: category });
            }
        };
        _this.toDispose(new _item_change_subscriber_1.ItemsChangeSubscriber(_this._dashboard.items, itemSubscription));
        _this.toDispose(new _item_change_subscriber_1.ItemsChangeSubscriber(_this._dashboard.groups, itemSubscription));
        _this.toDispose(new _item_change_subscriber_1.ItemsChangeSubscriber(_this._dashboard._tabPages, itemSubscription));
        _this.toDispose(new _item_change_subscriber_1.DataSourcesSubscriber(_this._dashboard.dataSources, function (args) {
            var affectedItems = _this._dashboard._dataDashboardItems().filter(function (item) { return item.dataSource() === args.dataSource.componentName(); });
            if (args.queryName) {
                affectedItems = affectedItems.filter(function (item) { return item.dataMember() == args.queryName; });
            }
            if (args.fieldName) {
                affectedItems = affectedItems.filter(function (item) { return !!item.dataItems().filter(function (dataItem) { return dataItem.dataMember() == args.fieldName; })[0]; });
            }
            affectedItems.forEach(function (item) { return _this._itemChanged(item, _base_metadata_1.PropertyCategory.Data); });
            _this.dataSourcePropertyChanged.fire(args);
        }));
        _this.toDispose(_this._dashboard.currencyCultureName.subscribe(function (_) {
            _this.reloadAllItems(_base_metadata_1.PropertyCategory.Data);
        }));
        _this.toDispose(_this._dashboard._queryParameters.subscribe(function (_) {
            _this.reloadAllItems(_base_metadata_1.PropertyCategory.ClientState);
        }));
        _this.toDispose(new _item_change_subscriber_1.ColorSchemeSubscriber(_dashboard.colorScheme, function () {
            _this.reloadGlobalColoredItems(_base_metadata_1.PropertyCategory.Data);
        }));
        if (_this._dataRequestOptions.itemDataRequestMode === 'BatchRequests') {
            var itemsToRequest = {};
            var performBatchRequest = _utils_1.debounce(function () {
                var itemsToRequestCopy = __assign({}, itemsToRequest);
                itemsToRequest = {};
                _this._callBacks.getBatchItemData(Object.keys(itemsToRequestCopy).map(function (itemName) { return itemsToRequestCopy[itemName].itemModel; }))
                    .done(function (result) {
                    Object.keys(result).forEach(function (itemName) { return itemsToRequestCopy[itemName].deferred.resolve(result[itemName]); });
                })
                    .fail(function (result) {
                    Object.keys(itemsToRequestCopy).forEach(function (itemName) { return itemsToRequestCopy[itemName].deferred.reject(result); });
                });
            }, 1);
            _this._getItemData = function (item) {
                var def = $.Deferred();
                itemsToRequest[item.componentName()] = {
                    itemModel: item,
                    deferred: def
                };
                performBatchRequest();
                return def.promise();
            };
        }
        else {
            _this._getItemData = function (item) { return _this._callBacks.getItemData(item); };
        }
        return _this;
    }
    DashboardUpdateHub.prototype._isUpdating = function () {
        return !!this._requestQueue.length;
    };
    DashboardUpdateHub.prototype._dequeueRequest = function (queueItem) {
        var itemIndex = this._requestQueue.indexOf(queueItem);
        if (itemIndex !== -1) {
            this._requestQueue.splice(itemIndex, 1);
            if (_pane_content_holder_1.getCategoryContentName(queueItem.category) === 'data') {
                this.itemEndUpdate && this.itemEndUpdate(queueItem.item.componentName());
            }
            if (this._requestQueue.length === 0) {
                this.dashboardEndUpdate && this.dashboardEndUpdate();
                this._suspendItem = null;
            }
        }
    };
    DashboardUpdateHub.prototype._enqueueRequest = function (item, category) {
        var compatibleCategories = item._paneContentHolder.getCompatibleCategories(category);
        if (!this._requestQueue.some(function (queueItem) { return queueItem.item === item && compatibleCategories.indexOf(queueItem.category) !== -1; })) {
            this._requestQueue.push({ item: item, category: category });
            if (this._requestQueue.length === 1) {
                this.dashboardBeginUpdate && this.dashboardBeginUpdate();
            }
            if (_pane_content_holder_1.getCategoryContentName(category) === 'data') {
                this.itemBeginUpdate && this.itemBeginUpdate(item.componentName());
            }
        }
    };
    DashboardUpdateHub.prototype._getDataRequestPriority = function (dashboardItem) {
        if (dashboardItem instanceof filter_element_item_base_1.FilterElementItemBase || dashboardItem instanceof range_filter_item_1.RangeFilterItem) {
            return 2;
        }
        else if (dashboardItem instanceof data_dashboard_item_1.DataDashboardItem && dashboardItem._masterFilterMode() === 'Single') {
            return 1;
        }
        return 0;
    };
    DashboardUpdateHub.prototype._getRequestLockingMasterFilterItems = function (dashboardItem) {
        if (dashboardItem instanceof data_dashboard_item_1.DataDashboardItem) {
            return dashboardItem._masterFilterItems()
                .filter(function (masterItem) {
                if (masterItem instanceof range_filter_item_1.RangeFilterItem || masterItem._isSingleMasterFilter()) {
                    return true;
                }
                else {
                    return !masterItem._useNeutralFilterMode() && masterItem instanceof filter_element_item_base_1.FilterElementItemBase;
                }
            });
        }
        return [];
    };
    DashboardUpdateHub.prototype._resolveItems = function () {
        var _this = this;
        this._requestQueue
            .filter(function (queueItem) { return !queueItem.item._paneContentHolder.isWaitingForContent(queueItem.category); })
            .sort(function (a, b) {
            if (_this._visibleItemsProvider) {
                var aNumber = _this._visibleItemsProvider.visibleItems().indexOf(a.item) !== -1 ? 1 : 0;
                var bNumber = _this._visibleItemsProvider.visibleItems().indexOf(b.item) !== -1 ? 1 : 0;
                return bNumber - aNumber;
            }
            else {
                return 0;
            }
        })
            .filter(function (queueItem) {
            if (_this._dataRequestOptions['itemDataLoadingMode'] === 'OnDemand' && _this._visibleItemsProvider && _this._visibleItemsProvider.visibleItems().indexOf(queueItem.item) === -1) {
                if (queueItem.item instanceof data_dashboard_item_1.DataDashboardItem) {
                    return _this._visibleItemsProvider.visibleItems().some(function (visibleItem) {
                        return _this._getRequestLockingMasterFilterItems(visibleItem).indexOf(queueItem.item) !== -1;
                    });
                }
                else {
                    return false;
                }
            }
            return true;
        })
            .filter(function (queueItem) {
            if (queueItem.item instanceof data_dashboard_item_1.DataDashboardItem && queueItem.item.dataItems().length > 0) {
                return _this._getRequestLockingMasterFilterItems(queueItem.item)
                    .filter(function (masterItem) {
                    var circularDependencyIndex = _this._getRequestLockingMasterFilterItems(masterItem)
                        .indexOf(queueItem.item);
                    if (circularDependencyIndex > -1) {
                        var itemPriority = _this._getDataRequestPriority(queueItem.item);
                        var masterItemPriority = _this._getDataRequestPriority(masterItem);
                        if (itemPriority === masterItemPriority) {
                            return _this._dashboard.items().indexOf(queueItem.item) > _this._dashboard.items().indexOf(masterItem);
                        }
                        else {
                            return itemPriority < masterItemPriority;
                        }
                    }
                    return true;
                })
                    .every(function (dependence) {
                    return _this._requestQueue.filter(function (queueItem) { return queueItem.item === dependence; }).length === 0;
                });
            }
            return true;
        })
            .forEach(function (queueItem) {
            if (_this._dashboard.findItem(queueItem.item.componentName())) {
                var category = queueItem.category;
                queueItem.item._paneContentHolder.beginRequest(category);
                if (queueItem.item._paneContentHolder.needRequestContentFromServer(category)) {
                    _this._performServerRequest(queueItem.item, queueItem.category).done(function (result) {
                        queueItem.item._paneContentHolder.endRequest({ response: result, category: category });
                        if (queueItem.item._paneContentHolder.isValid(category)) {
                            _this._dequeueRequest(queueItem);
                        }
                        _this._resolveItems();
                        return result;
                    }).fail(function (result) {
                        var errorTitle = _default_1.getLocalizationById('DashboardWebStringId.Errors.AttemptToLoadData');
                        var errorDetail = notificator_1.NotificationController._getDetailedErrorMessage(result);
                        queueItem.item._errorState({ title: errorTitle, detail: errorDetail });
                        queueItem.item._paneContentHolder.endRequest({ response: {}, category: category });
                        _this._dequeueRequest(queueItem);
                        _this._resolveItems();
                    });
                }
                else {
                    queueItem.item._paneContentHolder.endRequest({ response: {}, category: category });
                    _this._dequeueRequest(queueItem);
                }
            }
            else {
                _this._dequeueRequest(queueItem);
            }
        });
    };
    DashboardUpdateHub.prototype._processItemChanged = function (dashboardItem, changeCategory) {
        if (dashboardItem instanceof model_1.MapItem && changeCategory === _base_metadata_1.PropertyCategory.Map && dashboardItem._paneContentHolder.valid()) {
            dashboardItem._isGeometryChangedCallback();
        }
        dashboardItem._paneContentHolder.itemChanged(changeCategory);
        dashboardItem._errorState(null);
        if (dashboardItem instanceof data_dashboard_item_1.DataDashboardItem) {
            if (changeCategory === _base_metadata_1.PropertyCategory.Data || changeCategory === _base_metadata_1.PropertyCategory.Interactivity) {
                dashboardItem._dataManager(null);
                dashboardItem._clearInteractivityState();
            }
        }
    };
    DashboardUpdateHub.prototype._itemChanged = function (dashboardItem, changeCategory) {
        var _this = this;
        if (changeCategory === _base_metadata_1.PropertyCategory.ClientState && this._suspendItem === dashboardItem) {
            return;
        }
        this._processItemChanged(dashboardItem, changeCategory);
        this._enqueueRequest(dashboardItem, changeCategory);
        if (dashboardItem instanceof data_dashboard_item_1.DataDashboardItem) {
            if ((dashboardItem._isGloballyColored && changeCategory === _base_metadata_1.PropertyCategory.Data) || changeCategory === _base_metadata_1.PropertyCategory.Coloring) {
                this._dashboard._dataDashboardItems()
                    .filter(function (item) { return item._isGloballyColored; })
                    .forEach(function (item) {
                    _this._processItemChanged(dashboardItem, _base_metadata_1.PropertyCategory.Data);
                    _this._enqueueRequest(item, _base_metadata_1.PropertyCategory.Data);
                });
            }
        }
        this._resolveItemsDeffered();
    };
    DashboardUpdateHub.prototype._resolveItemsDeffered = function () {
        var _this = this;
        clearTimeout(this._timer);
        this._timer = window.setTimeout(function () {
            _this._resolveItems();
        }, 10);
    };
    DashboardUpdateHub.prototype._performServerRequest = function (item, category) {
        var contentName = _pane_content_holder_1.getCategoryContentName(category);
        switch (contentName) {
            case 'data':
                return this._getItemData(item);
            case 'map':
                return this._callBacks.getMapShapeFile(item);
            default:
                throw new Error();
        }
    };
    DashboardUpdateHub.prototype.refreshItems = function (itemsNames) {
        var _this = this;
        this._dashboard._dataDashboardItems()
            .filter(function (item) { return itemsNames.indexOf(item.componentName()) !== -1; })
            .forEach(function (item) { _this._itemChanged(item, _base_metadata_1.PropertyCategory.ClientState); });
    };
    DashboardUpdateHub.prototype.reloadAllItems = function (caterory) {
        var _this = this;
        this._dashboard._dataDashboardItems().forEach(function (item) { _this._itemChanged(item, caterory); });
    };
    DashboardUpdateHub.prototype.reloadGlobalColoredItems = function (caterory) {
        var _this = this;
        this._dashboard._dataDashboardItems().filter(function (item) { return item.coloringOptions && item.coloringOptions.useGlobalColors(); }).forEach(function (item) { _this._itemChanged(item, caterory); });
    };
    DashboardUpdateHub.prototype.initialize = function () {
        this._dashboard.items().forEach(this.initializeItem);
        this._dashboard.groups().forEach(this.initializeItem);
        this._dashboard._tabPages().forEach(this.initializeItem);
    };
    DashboardUpdateHub.prototype.dispose = function () {
        clearTimeout(this._timer);
        this._timer = null;
        this._requestQueue.splice(0, this._requestQueue.length);
        _super.prototype.dispose.call(this);
    };
    return DashboardUpdateHub;
}(disposable_object_1.DisposableObject));
exports.DashboardUpdateHub = DashboardUpdateHub;


/***/ }),
/* 598 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var NotificationControllerViewModel = (function () {
    function NotificationControllerViewModel() {
        var _this = this;
        this._visible = false;
        this.visible = ko.observable(false);
        this.type = ko.observable('');
        this.notifications = ko.observableArray([]);
        this.suspended = ko.observable(false);
        this.displayTime = ko.computed(function () {
            if (_this.type() !== 'success') {
                return 60 * 1000;
            }
            return 10 * 1000;
        });
        this.onInitialized = function (args) {
            _this._widget = args.component;
        };
    }
    NotificationControllerViewModel.prototype.reset = function () {
        this.visible(false);
        this._visible = false;
    };
    NotificationControllerViewModel.prototype.updateNotification = function (type, title, detail) {
        var _this = this;
        var notification = { title: title, detail: detail || null };
        if (this.visible() && this.type() === type) {
            this.notifications.push(notification);
            if (this._widget)
                this._widget.repaint();
        }
        else {
            var isFirstLoading = !this.visible();
            this.visible(false);
            this.notifications.removeAll();
            this.notifications.push(notification);
            this.type(type);
            this._visible = true;
            if (isFirstLoading) {
                setTimeout(function () { _this.visible(_this._visible); }, 300);
            }
            else {
                this.visible(this._visible);
            }
        }
    };
    return NotificationControllerViewModel;
}());
exports.NotificationControllerViewModel = NotificationControllerViewModel;


/***/ }),
/* 599 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var calculated_field_1 = __webpack_require__(206);
var disposable_object_1 = __webpack_require__(11);
var _knockout_utils_1 = __webpack_require__(17);
var _base_metadata_1 = __webpack_require__(4);
var _model_subscriber_1 = __webpack_require__(331);
var ItemChangeSubscriber = (function (_super) {
    __extends(ItemChangeSubscriber, _super);
    function ItemChangeSubscriber(dashboardItem, itemChanged) {
        var _this = _super.call(this) || this;
        _this.dashboardItem = dashboardItem;
        var subscriber = new _model_subscriber_1.ModelSubscriber(_this.dashboardItem);
        subscriber.registerHandler(function (category) { return itemChanged(category); });
        _this.toDispose(subscriber);
        _this.toDispose(_this.dashboardItem._subcribeDataQueryParams(function (newValue) { return itemChanged(_base_metadata_1.PropertyCategory.ClientState); }));
        return _this;
    }
    return ItemChangeSubscriber;
}(disposable_object_1.DisposableObject));
exports.ItemChangeSubscriber = ItemChangeSubscriber;
var ComponentArraySubscriber = (function (_super) {
    __extends(ComponentArraySubscriber, _super);
    function ComponentArraySubscriber(_items, _propertyUniqueName) {
        if (_propertyUniqueName === void 0) { _propertyUniqueName = 'componentName'; }
        var _this = _super.call(this) || this;
        _this._items = _items;
        _this._propertyUniqueName = _propertyUniqueName;
        _this._subscribers = [];
        _this.toDispose(_knockout_utils_1.subscribeArrayChange(_this._items, {
            added: function (item) {
                _this._subscribe(item);
                _this.itemAdded(item);
            },
            deleted: function (item) {
                _this._unsubscribe(item);
                _this.itemDeleted(item);
            }
        }));
        _this._items().forEach(function (item) { return _this._subscribe(item); });
        return _this;
    }
    ComponentArraySubscriber.prototype.itemAdded = function (item) { };
    ComponentArraySubscriber.prototype.itemDeleted = function (item) { };
    ComponentArraySubscriber.prototype._subscribe = function (item) {
        this._subscribers[item[this._propertyUniqueName]()] = this.createSubscriber(item);
    };
    ComponentArraySubscriber.prototype._unsubscribe = function (item) {
        var propertyValue = item[this._propertyUniqueName]();
        !!this._subscribers[propertyValue] && this._subscribers[propertyValue].dispose();
        delete this._subscribers[propertyValue];
    };
    ComponentArraySubscriber.prototype.dispose = function () {
        var _this = this;
        this._items().forEach(function (item) { return _this._unsubscribe(item); });
        _super.prototype.dispose.call(this);
    };
    return ComponentArraySubscriber;
}(disposable_object_1.DisposableObject));
exports.ComponentArraySubscriber = ComponentArraySubscriber;
var ItemsChangeSubscriber = (function (_super) {
    __extends(ItemsChangeSubscriber, _super);
    function ItemsChangeSubscriber(items, _options) {
        var _this = _super.call(this, items) || this;
        _this._options = _options;
        return _this;
    }
    ItemsChangeSubscriber.prototype.itemAdded = function (item) {
        this._options.itemAdded && this._options.itemAdded(item);
    };
    ItemsChangeSubscriber.prototype.itemDeleted = function (item) {
        this._options.itemDeleted && this._options.itemDeleted(item);
    };
    ItemsChangeSubscriber.prototype.createSubscriber = function (item) {
        var _this = this;
        return new ItemChangeSubscriber(item, function (category) { return _this._options.itemChanged(item, category); });
    };
    return ItemsChangeSubscriber;
}(ComponentArraySubscriber));
exports.ItemsChangeSubscriber = ItemsChangeSubscriber;
var ColorSchemeSubscriber = (function (_super) {
    __extends(ColorSchemeSubscriber, _super);
    function ColorSchemeSubscriber(entries, _changed) {
        var _this = _super.call(this, entries) || this;
        _this._changed = _changed;
        return _this;
    }
    ColorSchemeSubscriber.prototype.createSubscriber = function (item) {
        var _this = this;
        var subscriber = new _model_subscriber_1.ModelSubscriber(item);
        subscriber.registerHandler(function (category, model) {
            _this._changed();
        });
        return subscriber;
    };
    ColorSchemeSubscriber.prototype.itemAdded = function (item) {
        this._changed();
    };
    ColorSchemeSubscriber.prototype.itemDeleted = function (item) {
        this._changed();
    };
    return ColorSchemeSubscriber;
}(ComponentArraySubscriber));
exports.ColorSchemeSubscriber = ColorSchemeSubscriber;
var DataSourcesSubscriber = (function (_super) {
    __extends(DataSourcesSubscriber, _super);
    function DataSourcesSubscriber(dataSources, _onDataSourceChanged) {
        var _this = _super.call(this, dataSources) || this;
        _this._onDataSourceChanged = _onDataSourceChanged;
        return _this;
    }
    DataSourcesSubscriber.prototype.createSubscriber = function (dataSource) {
        var _this = this;
        var subscriber = new _model_subscriber_1.ModelSubscriber(dataSource);
        subscriber.registerHandler(function (category, model, propertyName, status) {
            if (model instanceof calculated_field_1.CalculatedField) {
                var calcField = model;
                _this._onDataSourceChanged({
                    dataSource: dataSource,
                    model: model,
                    propertyName: propertyName,
                    status: status,
                    queryName: calcField.dataMember(),
                    fieldName: calcField.name()
                });
            }
            else {
                _this._onDataSourceChanged({
                    dataSource: dataSource,
                    model: model,
                    propertyName: propertyName,
                    status: status
                });
            }
        });
        return subscriber;
    };
    DataSourcesSubscriber.prototype.itemAdded = function (dataSource) {
        this._onDataSourceChanged({
            dataSource: dataSource,
            status: 'added'
        });
    };
    DataSourcesSubscriber.prototype.itemDeleted = function (dataSource) {
        this._onDataSourceChanged({
            dataSource: dataSource,
            status: 'deleted'
        });
    };
    return DataSourcesSubscriber;
}(ComponentArraySubscriber));
exports.DataSourcesSubscriber = DataSourcesSubscriber;


/***/ }),
/* 600 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var string_1 = __webpack_require__(30);
var ko = __webpack_require__(0);
var index_internal_1 = __webpack_require__(37);
var model_1 = __webpack_require__(38);
var _dashboard_layout_mode_helper_1 = __webpack_require__(77);
var _aggregated_data_source_1 = __webpack_require__(727);
var _underlying_data_source_1 = __webpack_require__(728);
var DataInspectorViewModelOptions = (function () {
    function DataInspectorViewModelOptions() {
    }
    return DataInspectorViewModelOptions;
}());
exports.DataInspectorViewModelOptions = DataInspectorViewModelOptions;
var DataInspectorViewModel = (function () {
    function DataInspectorViewModel(options) {
        var _this = this;
        this.options = options;
        this._dashboardItem = ko.observable();
        this.avaliableInspectedDataType = [{
                value: 'Aggregated',
                text: index_internal_1.getLocalizationById('DashboardStringId.AggregatedDataType')
            }, {
                value: 'Raw',
                text: index_internal_1.getLocalizationById('DashboardStringId.RawDataType')
            }];
        this.allowSwitchInspectedDataType = ko.observable(false);
        this.inspectedDataType = ko.observable();
        this.title = ko.computed(function () {
            return (_this._dashboardItem() && _this._dashboardItem().name() || '') + (!_this.allowSwitchInspectedDataType() ?
                ' ' + string_1.format(index_internal_1.getLocalizationById('DashboardStringId.InspectedTypeFormatString'), _this.inspectedDataType()) :
                '');
        });
        this.visible = ko.observable(false);
        this.gridDataSource = ko.observable(null);
        this.gridOptions = ko.computed(function () {
            var gridDataSource = _this.gridDataSource();
            if (!gridDataSource) {
                return null;
            }
            var dataSource = gridDataSource.data || null;
            var columns = gridDataSource.columns || null;
            return {
                customizeColumns: gridDataSource.customizeColumns,
                onContentReady: _this.options.onGridContentReady,
                onInitialized: _this.options.onGridInitialized,
                showBorders: true,
                scrolling: {
                    mode: 'virtual'
                },
                loadPanel: {
                    text: index_internal_1.getLocalizationById('DashboardWebStringId.Loading')
                },
                filterRow: {
                    visible: true,
                    applyFilterText: index_internal_1.getLocalizationById('DashboardWebStringId.Grid.FilterClause.ApplyFilter'),
                    betweenEndText: index_internal_1.getLocalizationById('DashboardWebStringId.Grid.FilterClause.BetweenEnd'),
                    betweenStartText: index_internal_1.getLocalizationById('DashboardWebStringId.Grid.FilterClause.BetweenStart'),
                    resetOperationText: index_internal_1.getLocalizationById('DashboardWebStringId.Grid.FilterClause.ResetOperation'),
                    operationDescriptions: {
                        between: index_internal_1.getLocalizationById('DashboardWebStringId.Grid.FilterClause.Between'),
                        contains: index_internal_1.getLocalizationById('DashboardWebStringId.Grid.FilterClause.Contains'),
                        endsWith: index_internal_1.getLocalizationById('DashboardWebStringId.Grid.FilterClause.EndsWith'),
                        equal: index_internal_1.getLocalizationById('DashboardWebStringId.Grid.FilterClause.Equals'),
                        greaterThan: index_internal_1.getLocalizationById('DashboardWebStringId.Grid.FilterClause.Greater'),
                        greaterThanOrEqual: index_internal_1.getLocalizationById('DashboardWebStringId.Grid.FilterClause.GreaterOrEqual'),
                        lessThan: index_internal_1.getLocalizationById('DashboardWebStringId.Grid.FilterClause.Less'),
                        lessThanOrEqual: index_internal_1.getLocalizationById('DashboardWebStringId.Grid.FilterClause.LessOrEqual'),
                        notContains: index_internal_1.getLocalizationById('DashboardWebStringId.Grid.FilterClause.DoesNotContain'),
                        notEqual: index_internal_1.getLocalizationById('DashboardWebStringId.Grid.FilterClause.DoesNotEqual'),
                        startsWith: index_internal_1.getLocalizationById('DashboardWebStringId.Grid.FilterClause.StartsWith'),
                    }
                },
                onCellPrepared: function (e) {
                    if (e.rowType === 'data') {
                        var cellData = e.data[e.column.dataField];
                        if (cellData && cellData.displayValue)
                            index_internal_1.$unwrap(e.cellElement).innerText = cellData.displayValue;
                    }
                },
                columnHidingEnabled: _this.isMobile,
                rowAlternationEnabled: true,
                noDataText: index_internal_1.getLocalizationById('DashboardStringId.MessageGridHasNoData'),
                dataSource: dataSource,
                columns: columns,
            };
        });
        this.visible.subscribe(function (visible) {
            if (!visible) {
                _this._clearDataSource();
            }
        });
        this._dashboardItem.subscribe(function (_) { _this._clearDataSource(); });
        this.inspectedDataType.subscribe(function () {
            if (_this.visible()) {
                _this._bindGrid();
            }
        });
    }
    DataInspectorViewModel.prototype.setUnderlyingDataProvider = function (underlyingDataProvider) {
        this.underlyingDataProvider = underlyingDataProvider;
    };
    DataInspectorViewModel.prototype._bindGrid = function () {
        var dashboardItem = this._dashboardItem();
        var inspectedDataType = this.inspectedDataType();
        var dataSource = inspectedDataType === 'Raw' ? this._getRawDataSource(dashboardItem) : this._getAggregatedDataSource(dashboardItem);
        if (dataSource !== this.gridDataSource()) {
            this.gridDataSource(dataSource);
        }
    };
    DataInspectorViewModel.prototype._clearDataSource = function () {
        this._rawDataSource = null;
        this._aggregatedDataSource = null;
    };
    DataInspectorViewModel.prototype._getInitialMode = function (options, initialMode, prevMode) {
        if (initialMode) {
            return initialMode;
        }
        else if (prevMode && options.allowInspectAggregatedData && options.allowInspectRawData) {
            return prevMode;
        }
        else if (options.allowInspectAggregatedData) {
            return 'Aggregated';
        }
        else if (options.allowInspectRawData) {
            return 'Raw';
        }
        else
            return 'Aggregated';
    };
    DataInspectorViewModel.prototype._getRawDataSource = function (dashbordItem) {
        if (!this._rawDataSource) {
            this._rawDataSource = _underlying_data_source_1.generateUnderlyingDataSource(this.underlyingDataProvider, dashbordItem);
        }
        return this._rawDataSource;
    };
    DataInspectorViewModel.prototype._getAggregatedDataSource = function (dashbordItem) {
        if (!this._aggregatedDataSource) {
            this._aggregatedDataSource = _aggregated_data_source_1.generateAggregatedSource(dashbordItem._getItemData(), this._getAggregatedDataSourceArgs(dashbordItem));
        }
        return this._aggregatedDataSource;
    };
    DataInspectorViewModel.prototype._getAggregatedDataSourceArgs = function (dashboardItem) {
        if (dashboardItem instanceof model_1.CardItem) {
            if (dashboardItem.sparklineArgument()) {
                return {
                    addSparklineTotal: true,
                    sparklineMeasures: dashboardItem
                        .cards()
                        .map(function (card) { return card.actualValue().uniqueName(); })
                };
            }
        }
        else if (dashboardItem instanceof model_1.GridItem) {
            return {
                addSparklineTotal: false,
                sparklineMeasures: dashboardItem
                    .columns()
                    .filter(function (column) { return column instanceof model_1.GridSparklineColumn; })
                    .map(function (column) { return column.measure().uniqueName(); })
            };
        }
        return {
            addSparklineTotal: false, sparklineMeasures: []
        };
    };
    Object.defineProperty(DataInspectorViewModel.prototype, "isMobile", {
        get: function () {
            return _dashboard_layout_mode_helper_1.DashboardLayoutModeHelper.isMobile;
        },
        enumerable: true,
        configurable: true
    });
    DataInspectorViewModel.prototype.show = function (dashboardItem, initialMode) {
        this.allowSwitchInspectedDataType(this.options.allowInspectAggregatedData && this.options.allowInspectRawData);
        this.inspectedDataType(this._getInitialMode(this.options, initialMode, this.inspectedDataType()));
        this._dashboardItem(dashboardItem);
        this.visible(true);
        this._bindGrid();
    };
    return DataInspectorViewModel;
}());
exports.DataInspectorViewModel = DataInspectorViewModel;


/***/ }),
/* 601 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function getSortedAxes(itemData, skipSparklineAxis) {
    if (skipSparklineAxis === void 0) { skipSparklineAxis = false; }
    return itemData.getAxisNames()
        .filter(function (axisName) {
        var axis = itemData.getAxis(axisName);
        return axis.getRootPoint().getChildren().length > 0 && axis.getDimensions().length > 0 && (!skipSparklineAxis || axisName !== 'Sparkline');
    })
        .sort(function (axisName1, axisName2) {
        return axisName1 == 'Argument' || axisName1 == 'Row' || axisName1 == 'Default' ? -1 : 1;
    });
}
exports.getSortedAxes = getSortedAxes;
function getMeasureColumns(itemData) {
    return itemData.getMeasures().filter(function (measure) { return !!measure.dataMember; });
}
exports.getMeasureColumns = getMeasureColumns;
function getSortedColumns(itemData) {
    return getSortedAxes(itemData)
        .reduce(function (acc, axis) { return acc.concat(itemData.getDimensions(axis).map(function (d) { return d.dataMember; })); }, [])
        .concat(getMeasureColumns(itemData).map(function (d) { return d.dataMember; }));
}
exports.getSortedColumns = getSortedColumns;


/***/ }),
/* 602 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var disposable_object_1 = __webpack_require__(11);
var _date_utils_1 = __webpack_require__(41);
var dashboard_item_1 = __webpack_require__(60);
var data_dashboard_item_1 = __webpack_require__(9);
var group_item_1 = __webpack_require__(131);
var dashboard_tab_page_1 = __webpack_require__(86);
var tab_container_item_1 = __webpack_require__(87);
var _dashboard_title_view_constants_1 = __webpack_require__(91);
var _export_dialog_1 = __webpack_require__(586);
var _export_options_1 = __webpack_require__(147);
var ExportDialogBinderOptions = (function () {
    function ExportDialogBinderOptions() {
    }
    return ExportDialogBinderOptions;
}());
exports.ExportDialogBinderOptions = ExportDialogBinderOptions;
var ExportDialogBinder = (function () {
    function ExportDialogBinder(_options) {
        var _this = this;
        this._options = _options;
        this.availableExportFormats = ['PDF', 'Image', 'Excel'];
        this.showDashboardDialog = function (format) {
            _this._validateDashboardExport(format);
            _this.exportDialog.setExportFunction(function (documentInfo) {
                return _this.exportDashboardTo(format, documentInfo);
            });
            var title = _this._options.dashboard().title.visible() ? _this._options.dashboard().title.text() : 'Dashboard';
            _this.exportDialog.showDialog('', null, format, {
                fileName: title,
                title: title
            });
        };
        this.showItemDialog = function (itemComponentName, format) {
            var item = _this._options.dashboard().findItem(itemComponentName);
            if (!item) {
                throw new Error("The item with the '" + itemComponentName + "' name does not exist");
            }
            _this._validateExportFormat(format);
            var exportCaption = item._caption;
            _this.exportDialog.setExportFunction(function (documentInfo) {
                return _this.exportDashboardItemTo(itemComponentName, format, documentInfo);
            });
            _this.exportDialog.showDialog(itemComponentName, _this._getExportItemType(item), format, {
                title: exportCaption,
                fileName: exportCaption,
                includeCaption: true
            });
        };
        this.hide = function () {
            if (!!_this._exportDialog) {
                _this._exportDialog.hideDialog();
            }
        };
        this.exportOptions = new _export_options_1.ExportOptions();
        this.exportOptions.setPdfOptions(this._options.pdfExportOptions);
        this.exportOptions.setImageOptions(this._options.imageExportOptions);
        this.exportOptions.setExcelOptions(this._options.excelExportOptions);
    }
    ExportDialogBinder.prototype.reset = function () {
        this._exportDialog = undefined;
    };
    ExportDialogBinder.prototype._getClientSize = function (container, mode) {
        if (container) {
            var $container = $(container);
            return { width: $container.outerWidth(), height: $container.outerHeight() };
        }
        else {
            if (mode === 'EntireDashboard') {
                return { width: 1920, height: 1080 };
            }
            else {
                return { width: window.outerWidth, height: window.outerHeight };
            }
        }
    };
    ExportDialogBinder.prototype._getActualComponentName = function (item) {
        return item instanceof tab_container_item_1.TabContainerItem ? item._activeTabPage().componentName() : item.componentName();
    };
    ExportDialogBinder.prototype._getExportHolderItem = function (item) {
        if (item instanceof tab_container_item_1.TabContainerItem) {
            return this._options.dashboard()._getDisplayDashboardItem(item._activeTabPage());
        }
        return item;
    };
    ExportDialogBinder.prototype._getInfo = function (items, titleHeight, mode, format) {
        var _this = this;
        var container = this._options.getContainer().querySelector('.dx-dashboard-viewer'), containerPosition = container ? $(container).offset() : { left: 0, top: 0 }, clientSize = this._getClientSize(container, mode);
        var elementsList = items
            .map(function (item) {
            var holderItem = _this._getExportHolderItem(item);
            var isTabContainer = item instanceof tab_container_item_1.TabContainerItem;
            var itemExportInfo = _this._options.exportInfoProvider.getItemExportInfo(holderItem.componentName(), mode, isTabContainer);
            if (itemExportInfo) {
                itemExportInfo.position = {
                    left: itemExportInfo.position.left - containerPosition.left,
                    top: itemExportInfo.position.top - containerPosition.top
                };
                if (isTabContainer) {
                    itemExportInfo.name = _this._getActualComponentName(item);
                    itemExportInfo.caption = holderItem.name();
                }
                return itemExportInfo;
            }
            else if (format === 'Excel') {
                return { name: _this._getActualComponentName(item) };
            }
            else {
                return null;
            }
        })
            .filter(function (itemExportInfo) { return !!itemExportInfo; });
        return {
            clientSize: clientSize,
            titleHeight: titleHeight,
            itemsState: elementsList
        };
    };
    ExportDialogBinder.prototype._getFilterFormattableValues = function (dashboard, exportGroupName, item, exportInfo) {
        var excelOptions = exportInfo.DocumentOptions.excelExportOptions;
        var isGroupExport = !!exportGroupName;
        if (exportInfo.Mode === 'EntireDashboard') {
            if (!isGroupExport) {
                if (exportInfo.Format === 'Excel' && excelOptions && excelOptions.DashboardStatePosition === 'Below') {
                    return item._getDisplayFilterValuesExternal();
                }
                else {
                    if (item instanceof data_dashboard_item_1.DataDashboardItem && dashboard._masterFilterItems().indexOf(item) !== -1) {
                        return item._getDisplayFilterValues();
                    }
                    else {
                        return [];
                    }
                }
            }
            else {
                if (exportGroupName === item.componentName()) {
                    return this._getGroupExternalDisplayFilterValues(dashboard._dataDashboardItems(), exportGroupName);
                }
                else {
                    return item._getDisplayFilterValues();
                }
            }
        }
        else {
            return item._getDisplayFilterValuesExternal();
        }
    };
    ExportDialogBinder.prototype.exportDashboardTo = function (format, clientOptions, customFileName) {
        this._validateDashboardExport(format);
        var fileName = customFileName ? customFileName : (clientOptions == undefined || clientOptions.fileName == undefined) ? 'Export' : clientOptions.fileName, dashboard = this._options.dashboard(), items = dashboard
            .layout()
            .getNodesRecursive()
            .filter(function (node) { return !!node.item; })
            .filter(function (node) { return !(node.item instanceof dashboard_tab_page_1.DashboardTabPage); })
            .map(function (node) { return node.item; });
        var exportOptions = this.exportOptions.convertToExportOptions(clientOptions);
        if (!exportOptions.pdfExportOptions.Title)
            exportOptions.pdfExportOptions.Title = this._options.dashboard().title.text();
        if (!exportOptions.imageExportOptions.Title)
            exportOptions.imageExportOptions.Title = this._options.dashboard().title.text();
        if (format === 'Excel' && exportOptions.excelExportOptions.Format === 'Csv')
            throw new Error('Cannot export an entire dashboard in the CSV format.');
        this._exportTo(items, {
            mode: 'EntireDashboard',
            format: format,
            clientState: this._getInfo(items, this._options.dashboard().title.visible() ? _dashboard_title_view_constants_1.titleHeight : 0, 'EntireDashboard', format),
            fileName: fileName
        }, exportOptions);
    };
    ExportDialogBinder.prototype.exportDashboardItemTo = function (itemComponentName, format, clientOptions, customFileName) {
        var fileName = customFileName ? customFileName : (clientOptions == undefined || clientOptions.fileName == undefined) ? 'Export' : clientOptions.fileName, dashboard = this._options.dashboard(), exportItem = dashboard.findItem(itemComponentName), isGroup = exportItem instanceof group_item_1.GroupItem || exportItem instanceof dashboard_tab_page_1.DashboardTabPage;
        var clientStateItems, dataQueryItems;
        if (isGroup) {
            var dashboardItems = dashboard.items().concat(dashboard.groups());
            var needExportItem = function (item) { return item.parentContainer() === exportItem.componentName(); };
            clientStateItems = dashboardItems.filter(function (item) { return needExportItem(item) || !!item.parentContainer() && needExportItem(dashboard.findItem(item.parentContainer())); });
            dataQueryItems = [exportItem].concat(clientStateItems);
        }
        else {
            clientStateItems = dataQueryItems = [exportItem];
        }
        this._validateExportFormat(format);
        var exportOptions = this.exportOptions.convertToExportOptions(clientOptions);
        if (!exportOptions.pdfExportOptions.Title)
            exportOptions.pdfExportOptions.Title = exportItem.name();
        if (!exportOptions.imageExportOptions.Title)
            exportOptions.imageExportOptions.Title = exportItem.name();
        this._exportTo(dataQueryItems, {
            mode: (isGroup ? 'EntireDashboard' : 'SingleItem'),
            format: format,
            clientState: this._getInfo(clientStateItems, 0, 'SingleItem', format),
            fileName: fileName,
            name: itemComponentName,
            itemType: this._getExportItemType(exportItem)
        }, exportOptions);
    };
    Object.defineProperty(ExportDialogBinder.prototype, "exportDialog", {
        get: function () {
            if (!this._exportDialog) {
                this._exportDialog = new _export_dialog_1.exportDialog({
                    container: this._options.getContainer(),
                    documentInfo: this.exportOptions,
                    onShown: this._options.onExportDialogShown,
                    onShowing: this._options.onExportDialogShowing,
                    onHidden: this._options.onExportDialogHidden
                });
            }
            return this._exportDialog;
        },
        enumerable: true,
        configurable: true
    });
    ExportDialogBinder.prototype._getExportItemType = function (item) {
        return item ? dashboard_item_1.DashboardItem._getCommonItemType(item.itemType()) : undefined;
    };
    ExportDialogBinder.prototype._getGroupExternalDisplayFilterValues = function (dataDashboardItems, groupName) {
        var itemsInGroup = dataDashboardItems.filter(function (item) { return item.parentContainer() === groupName; });
        var externalMasters = itemsInGroup
            .reduce(function (acc, item) { return acc.concat(item._masterFilterItems()); }, [])
            .filter(function (master, index, array) { return array.indexOf(master) !== index; })
            .filter(function (master) { return itemsInGroup.indexOf(master) === -1; });
        return externalMasters.reduce(function (acc, master) { return acc.concat(master._getDisplayFilterValues()); }, []);
    };
    ExportDialogBinder.prototype._exportTo = function (items, modeInfo, documentOptions) {
        var _this = this;
        var fileName = modeInfo.fileName && modeInfo.fileName.trim() ? modeInfo.fileName.replace(/[\\/:*?"<>|]/g, '_') : 'Export';
        var exportInfo = {
            Mode: modeInfo.mode,
            GroupName: modeInfo.name,
            FileName: fileName,
            ClientState: modeInfo.clientState,
            Format: modeInfo.format,
            DocumentOptions: documentOptions,
            ItemType: modeInfo.itemType
        };
        var dashboard = this._options.dashboard();
        var model = items.map(function (item) {
            var holderItem = _this._getExportHolderItem(item);
            return {
                name: _this._getActualComponentName(item),
                query: holderItem._getDataQueryParams(),
                drillDownFormattableValues: holderItem instanceof data_dashboard_item_1.DataDashboardItem ? _date_utils_1.toStringArray(holderItem._getDisplayDrillDownValues()) : undefined,
                filterFormattableValues: _date_utils_1.toStringArray(_this._getFilterFormattableValues(dashboard, exportInfo.GroupName, holderItem, exportInfo)),
                selectedValues: _date_utils_1.toStringArray(holderItem._getExportingSelection())
            };
        });
        this._options.serviceClient().performExport(exportInfo, model);
    };
    ExportDialogBinder.prototype._validateExportFormat = function (format) {
        if (this.availableExportFormats.indexOf(format) === -1) {
            throw new Error("A format is specified incorrectly. Use one of the following: 'PDF', 'Image' or 'Excel'.");
        }
    };
    ExportDialogBinder.prototype._validateDashboardExport = function (format) {
        this._validateExportFormat(format);
        if (!this._options.dashboard()) {
            throw new Error('Cannot perform exporting because the dashboard is not loaded.');
        }
    };
    return ExportDialogBinder;
}());
exports.ExportDialogBinder = ExportDialogBinder;
var ExportInfoManager = (function (_super) {
    __extends(ExportInfoManager, _super);
    function ExportInfoManager() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._primaryExportInfoProviders = {};
        _this._secondaryExportInfoProviders = {};
        _this._captionExportInfoProviders = {};
        return _this;
    }
    ExportInfoManager.prototype.getItemExportInfo = function (itemName, mode, isCaption) {
        if (mode === 'SingleItem' && this._secondaryExportInfoProviders[itemName]) {
            return this._secondaryExportInfoProviders[itemName]();
        }
        else if (isCaption && this._captionExportInfoProviders[itemName]) {
            return this._captionExportInfoProviders[itemName]();
        }
        else if (this._primaryExportInfoProviders[itemName]) {
            return this._primaryExportInfoProviders[itemName]();
        }
        else {
            return null;
        }
    };
    ExportInfoManager.prototype.registerPrimaryExportItem = function (itemName, getExportInfoFunc) {
        this._primaryExportInfoProviders[itemName] = getExportInfoFunc;
    };
    ExportInfoManager.prototype.unregisterPrimaryExportItem = function (itemName) {
        if (this._primaryExportInfoProviders[itemName]) {
            delete this._primaryExportInfoProviders[itemName];
        }
    };
    ExportInfoManager.prototype.registerSecondaryExportItem = function (itemName, getExportInfoFunc) {
        this._secondaryExportInfoProviders[itemName] = getExportInfoFunc;
    };
    ExportInfoManager.prototype.unregisterSecondaryExportItem = function (itemName) {
        if (this._secondaryExportInfoProviders[itemName]) {
            delete this._secondaryExportInfoProviders[itemName];
        }
    };
    ExportInfoManager.prototype.registerCaptionExportItem = function (itemName, getExportInfoFunc) {
        this._captionExportInfoProviders[itemName] = getExportInfoFunc;
    };
    ExportInfoManager.prototype.unregisterCaptionExportItem = function (itemName) {
        if (this._captionExportInfoProviders[itemName]) {
            delete this._captionExportInfoProviders[itemName];
        }
    };
    ExportInfoManager.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._primaryExportInfoProviders = {};
        this._secondaryExportInfoProviders = {};
        this._captionExportInfoProviders = {};
    };
    return ExportInfoManager;
}(disposable_object_1.DisposableObject));
exports.ExportInfoManager = ExportInfoManager;


/***/ }),
/* 603 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _parameters_1 = __webpack_require__(410);
var disposable_object_1 = __webpack_require__(11);
var parameter_1 = __webpack_require__(140);
var _parameters_dialog_1 = __webpack_require__(354);
var ParameterDialogViewModel = (function (_super) {
    __extends(ParameterDialogViewModel, _super);
    function ParameterDialogViewModel(_parameters, getParameterValues) {
        var _this = _super.call(this) || this;
        _this._parameters = _parameters;
        _this._getDashboardParameterType = function (type) {
            var result = _parameters_dialog_1.parameterTypes.string;
            if (type) {
                if (type.indexOf('DateTime') > -1) {
                    result = _parameters_dialog_1.parameterTypes.dateTime;
                }
                else if ((type.indexOf('Decimal') + (type.indexOf('Double'))) > -2) {
                    result = _parameters_dialog_1.parameterTypes.float;
                }
                else if (type.indexOf('Boolean') > -1) {
                    result = _parameters_dialog_1.parameterTypes.bool;
                }
                else if (type.indexOf('.Int') > -1) {
                    result = _parameters_dialog_1.parameterTypes.int;
                }
            }
            return result;
        };
        _this.setParameters = function (newParameters) {
            newParameters.forEach(function (newParameter) {
                var parameterModel = _this._parameters.peek().filter(function (p) { return p.name.peek() === newParameter.getName(); })[0];
                if (parameterModel) {
                    parameterModel._value(newParameter.getValue());
                }
            });
        };
        _this.parameterCollection = ko.computed(function () {
            var parameters = _this._parameters();
            var parameterCollection = new _parameters_1.ParametersCollection(parameters.map(function (param) {
                var values = _this._getParameterValues(param, getParameterValues);
                return {
                    Name: param.name(),
                    DefaultValue: _this._getParameterDefaultValue(param, values),
                    Description: param.description(),
                    Values: values,
                    ContainsDisplayMember: param.containsDisplayMember(),
                    Visible: param.parameterVisible(),
                    AllowMultiselect: param.allowMultiselect(),
                    AllowNull: param.allowNull(),
                    Type: _this._getDashboardParameterType(param.type())
                };
            }));
            parameters.forEach(function (param) {
                var actualValue = param._actualValue();
                if (actualValue === parameter_1.Parameter.SelectAllValue) {
                    actualValue = _this._getParameterValues(param, getParameterValues).map(function (valueViewModel) { return valueViewModel.Value; });
                }
                parameterCollection.setParameterValue(param.name(), actualValue);
            });
            parameterCollection.collectionChanged.add(function () {
                _this.setParameters(parameterCollection.getParameterList());
            });
            return parameterCollection;
        });
        _this.toDispose(_this.parameterCollection);
        return _this;
    }
    ParameterDialogViewModel.prototype._getParameterValues = function (parameter, getParameterValues) {
        var parameterValues = null;
        if (!!parameter.staticListLookUpSettings()) {
            parameterValues = parameter.staticListLookUpSettings().values().map(function (item) {
                return {
                    Value: item.value(),
                };
            });
        }
        else if (!!parameter.dynamicListLookUpSettings()) {
            parameterValues = getParameterValues(parameter.type(), parameter.dynamicListLookUpSettings())();
        }
        return parameterValues;
    };
    ParameterDialogViewModel.prototype._getParameterDefaultValue = function (param, paramValues) {
        if (param.lookUpSourceType() !== 'None' && param.allowMultiselect()) {
            if (param.selectAllValues()) {
                return paramValues && paramValues.map(function (value) { return value.Value; }) || [];
            }
            else {
                return param._valuesOfDefaultValues() || [];
            }
        }
        else {
            return param.defaultValue();
        }
    };
    return ParameterDialogViewModel;
}(disposable_object_1.DisposableObject));
exports.ParameterDialogViewModel = ParameterDialogViewModel;


/***/ }),
/* 604 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var _utils_1 = __webpack_require__(3);
var data_dashboard_item_1 = __webpack_require__(9);
var date_filter_item_1 = __webpack_require__(143);
var filter_element_item_base_1 = __webpack_require__(110);
var dashboard_tab_page_1 = __webpack_require__(86);
var tab_container_item_1 = __webpack_require__(87);
var dashboard_layout_group_1 = __webpack_require__(105);
var _dashboard_title_view_constants_1 = __webpack_require__(91);
var caption_toolbar_options_1 = __webpack_require__(64);
var _caption_toolbar_css_classes_1 = __webpack_require__(31);
var _mobile_layout_caption_toolbar_1 = __webpack_require__(352);
var _dashboard_title_model_1 = __webpack_require__(156);
var _title_component_1 = __webpack_require__(357);
var _viewer_1 = __webpack_require__(359);
var _viewer_interfaces_1 = __webpack_require__(157);
var _mobile_layout_fullscreen_item_1 = __webpack_require__(360);
var _mobile_layout_item_1 = __webpack_require__(361);
var _mobile_layout_master_filters_editor_1 = __webpack_require__(605);
var DashboardMobileLayout = (function () {
    function DashboardMobileLayout(dashboard, dashboardContext, findExtension, _encodeHtml) {
        if (_encodeHtml === void 0) { _encodeHtml = false; }
        var _this = this;
        this.dashboard = dashboard;
        this.dashboardContext = dashboardContext;
        this._encodeHtml = _encodeHtml;
        this.visibleItemsProvider = null;
        var fullScreenItemLocalContext = new _viewer_interfaces_1.DashboardItemContext({
            addContextToolbarItems: function (options) {
                var dashboardItem = _this.fullscreenItemModel.dashboardItem();
                if (dashboardItem instanceof data_dashboard_item_1.DataDashboardItem)
                    _this.masterFiltersEditorModel.addFilterButton(options.stateItems, dashboardItem);
                options.navigationItems.push({
                    name: caption_toolbar_options_1.dashboardToolbarItemNames.backButton,
                    type: 'button',
                    template: function () {
                        return $('<div/>')
                            .addClass([_caption_toolbar_css_classes_1.cssClasses.flexParent, _caption_toolbar_css_classes_1.cssClasses.ellipsisText].join(' '))
                            .append($('<svg><use xlink:href="#' + _caption_toolbar_css_classes_1.cssClasses.iconBack + '" /></svg>'))
                            .append($('<div/>').text(_default_1.getLocalizationById('DashboardWebStringId.MobileLayout.Back')).addClass([_caption_toolbar_css_classes_1.cssClasses.buttonBack, _caption_toolbar_css_classes_1.cssClasses.truncated].join(' ')));
                    },
                    click: function () {
                        _this.fullscreenItemModel.restoreDownItem();
                    }
                });
            },
            createCaptionToolbar: function (viewerItem, container, controlContainer, popupContainer, viewOptions) {
                return new _mobile_layout_caption_toolbar_1.MobileLayoutCaptionToolbar(container, controlContainer, popupContainer, viewOptions.encodeHtml, _caption_toolbar_css_classes_1.cssClasses.caption, viewOptions.captionToolbarSeparatorRequired);
            },
            viewerItemCreated: function (dashboardItem, viewerItem) { return _mobile_layout_item_1.customizeMobileViewerItems(viewerItem); },
            beforeApplyViewerItemOptions: function (item, options, isCreation) {
                options.ParentContainer = undefined;
                _mobile_layout_item_1.setCardAutoArrangementMode(item, options);
            },
            itemCreatingType: 'secondary'
        });
        var exportExtension = findExtension('dashboard-export');
        if (exportExtension) {
            exportExtension._initializeSecondaryExportItem(fullScreenItemLocalContext);
        }
        this.fullscreenItemModel = new _viewer_1.FullscreenItemModel(dashboardContext, fullScreenItemLocalContext);
        this.masterFiltersEditorModel = new _mobile_layout_master_filters_editor_1.MasterFiltersEditorModel();
        this.dashboardTitleContext = new _title_component_1.DashboardTitleContext(this._encodeHtml, findExtension, false);
        var flatItems = this._getDashboardItemsInLayoutOrder(dashboard.layout());
        this.items = groupLayoutItems(flatItems).map(function (item) { return new DashboardMobileLayoutItem(item.itemComponentNames.map(function (itemName) { return dashboard.findItem(itemName); })
            .filter(function (item) { return !(item instanceof filter_element_item_base_1.FilterElementItemBase) && !(item instanceof date_filter_item_1.DateFilterItem); }), item.groupName); })
            .filter(function (mobileLayoutItem) { return mobileLayoutItem.dashboardItems.length > 0; });
    }
    Object.defineProperty(DashboardMobileLayout.prototype, "fullscreenItemProvider", {
        get: function () {
            return this.fullscreenItemModel;
        },
        enumerable: true,
        configurable: true
    });
    DashboardMobileLayout.prototype._getDashboardItemsInLayoutOrder = function (layoutItem) {
        var _this = this;
        var result = [];
        if (layoutItem.dashboardItem() && !(layoutItem instanceof dashboard_layout_group_1.DashboardLayoutGroup)) {
            var parentContainer = layoutItem.item && layoutItem.item.parentContainer() ? this.dashboard.findItem(layoutItem.item.parentContainer()) : undefined;
            var groupName = this._getGroupName(parentContainer);
            result.push({
                groupName: this._getGroupName(parentContainer),
                groupComponentName: this._getGroupComponentName(parentContainer),
                itemComponentName: layoutItem.dashboardItem()
            });
        }
        if (layoutItem instanceof dashboard_layout_group_1.DashboardLayoutGroup) {
            result = result.concat(layoutItem.childNodes().reduce(function (acc, value) { return acc.concat(_this._getDashboardItemsInLayoutOrder(value)); }, []));
        }
        return result;
    };
    DashboardMobileLayout.prototype._getGroupName = function (parentContainer) {
        if (parentContainer) {
            var showCaption = parentContainer instanceof dashboard_tab_page_1.DashboardTabPage ? this._getParentTabContainer(parentContainer).showCaption() : parentContainer.showCaption();
            return showCaption ? parentContainer.name() : parentContainer.name() + exports.groupWithoutCaptionItemKey;
        }
        else {
            return exports.ungroupedItemKey;
        }
    };
    DashboardMobileLayout.prototype._getGroupComponentName = function (parentContainer) {
        if (parentContainer) {
            var showCaption = parentContainer instanceof dashboard_tab_page_1.DashboardTabPage ? this._getParentTabContainer(parentContainer).showCaption() : parentContainer.showCaption();
            return showCaption ? parentContainer.componentName() : parentContainer.componentName() + exports.groupWithoutCaptionItemKey;
        }
        else {
            return exports.ungroupedItemKey;
        }
    };
    DashboardMobileLayout.prototype._getParentTabContainer = function (tabPage) {
        return this.dashboard.items()
            .filter(function (item) { return item instanceof tab_container_item_1.TabContainerItem; })
            .filter(function (tabContainer) { return tabContainer.tabPages().indexOf(tabPage) !== -1; })[0];
    };
    return DashboardMobileLayout;
}());
exports.DashboardMobileLayout = DashboardMobileLayout;
var DashboardMobileLayoutItem = (function () {
    function DashboardMobileLayoutItem(dashboardItems, groupName) {
        this.dashboardItems = dashboardItems;
        this.groupName = groupName;
    }
    return DashboardMobileLayoutItem;
}());
exports.DashboardMobileLayoutItem = DashboardMobileLayoutItem;
function groupLayoutItems(flatItems) {
    var groupedItems = [];
    var previousGroupedItem;
    flatItems.forEach(function (item) {
        if (previousGroupedItem && previousGroupedItem.groupComponentName === item.groupComponentName) {
            previousGroupedItem.itemComponentNames.push(item.itemComponentName);
        }
        else {
            previousGroupedItem = {
                groupName: item.groupName,
                groupComponentName: item.groupComponentName,
                itemComponentNames: [item.itemComponentName]
            };
            groupedItems.push(previousGroupedItem);
        }
    });
    return groupedItems;
}
exports.groupLayoutItems = groupLayoutItems;
ko.components.register('dashboard-mobile-layout-widget', {
    viewModel: {
        createViewModel: function (params, componentInfo) {
            var disposables = [];
            var layoutModel = params.layoutModel;
            var dashboard = ko.unwrap(layoutModel.dashboard);
            var toolbarHeight = ko.observable(_dashboard_title_view_constants_1.titleHeight);
            var contentToolbarHeight = ko.observable(contentToolbarHeight);
            var viewModel = {};
            var element = componentInfo.element;
            var $element = $(element);
            var currentWidth = $element.width();
            var currentHeight = $element.height();
            var titleWidth = ko.observable(currentWidth);
            var repaintRequest = $.Callbacks();
            var layoutWidget = null;
            var resizeControl = function () {
                if ($element.width() != currentWidth || $element.height() != currentHeight) {
                    if (layoutWidget) {
                        layoutWidget['_renderDimensions']();
                    }
                    repaintRequest.fire();
                    currentWidth = $element.width();
                    currentHeight = $element.height();
                    titleWidth(currentWidth);
                }
            };
            $(window).on('resize.mobilelayout', function () { return resizeControl(); });
            var interval = setInterval(function () { return resizeControl(); }, 300);
            ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                clearInterval(interval);
                $(window).off('.mobilelayout');
            });
            var customizeToolbarOptions = function (options) {
                options.contentItems = options.contentItems.filter(function (item) { return [caption_toolbar_options_1.dashboardToolbarItemNames.titleFilterIcon, caption_toolbar_options_1.dashboardToolbarItemNames.titleFilterText].indexOf(item.name) === -1; });
                layoutModel.masterFiltersEditorModel.addFilterButton(options.actionItems, layoutModel.dashboard);
            };
            var titleModel = new _dashboard_title_model_1.DashboardTitleModel(layoutModel.dashboardTitleContext, layoutModel.dashboard, customizeToolbarOptions);
            var actionToolbarViewModel = createToolbarViewModel(ko.computed(function () {
                return {
                    toolbarOptions: customizeActionToolbar(titleModel.toolbarOptions().toolbarOptions),
                    allowHideEmptyToolbar: true
                };
            }), titleWidth, toolbarHeight, layoutModel.dashboardTitleContext, _caption_toolbar_css_classes_1.cssClasses.actionToolbar);
            var contentToolbarViewModel = createToolbarViewModel(ko.computed(function () {
                return {
                    toolbarOptions: customizeContentToolbar(titleModel.toolbarOptions().toolbarOptions),
                    allowHideEmptyToolbar: true
                };
            }), titleWidth, contentToolbarHeight, layoutModel.dashboardTitleContext, _caption_toolbar_css_classes_1.cssClasses.contentToolbar);
            return {
                itemMasterFiltersViewModel: new _mobile_layout_master_filters_editor_1.ItemMasterFiltersViewModel(layoutModel.masterFiltersEditorModel, layoutModel.dashboardContext, repaintRequest),
                fullscreenItemViewModel: _mobile_layout_fullscreen_item_1.createFullscreenItemViewModel(layoutModel.fullscreenItemModel, layoutModel.masterFiltersEditorModel, repaintRequest),
                titleViewModel: actionToolbarViewModel,
                layoutViewModel: createLayoutViewModel(element, toolbarHeight, layoutModel.dashboardContext, repaintRequest, layoutModel, layoutModel.fullscreenItemModel, function (widget) { return layoutWidget = widget; }, contentToolbarViewModel, layoutModel.dashboard.title.visible())
            };
        }
    },
    template: { element: 'dx-dashboard-mobile-layout-widget' }
});
exports.ungroupedItemKey = '_dx_dashboard_ungrouped_mobile_layout_item_key';
exports.groupWithoutCaptionItemKey = '_dx_dashboard_group_without_caption_mobile_layout_item_key';
exports.dashboardTitleKey = '_dx_dashboard_mobile_layout_title_key';
var mobileLayoutCssClasses = {
    ungroupedItem: 'dx-dashboard-ungrouped-item',
    dashboardDisplayNone: 'dx-dashboard-display-none',
    groupWithoutCaption: 'dx-dashboard-group-without-caption'
};
var createToolbarViewModel = function (options, width, height, context, className) {
    return {
        options: options,
        width: width,
        height: height,
        encodeHtml: context.encodeHtml,
        className: className
    };
};
var customizeActionToolbar = function (options) {
    return {
        staticItems: options.navigationItems,
        actionItems: options.actionItems,
        stateItems: options.stateItems,
        navigationItems: []
    };
};
var customizeContentToolbar = function (options) {
    return {
        staticItems: options.staticItems,
        actionItems: [],
        stateItems: [],
        navigationItems: []
    };
};
var createLayoutViewModel = function (element, actionToolbarHeight, dashboardContext, repaintRequest, mobileLayout, fullscreenItemModel, getWidgetCallback, titleViewModel, titleVisible) {
    var $element = $(element);
    var title = {
        data: titleViewModel,
        name: 'dx-dashboard-mobile-title'
    };
    var layoutItems = mobileLayout.items.map(function (layoutItem) {
        var items = layoutItem.dashboardItems.map(function (dashboardItem) {
            return {
                data: new _mobile_layout_item_1.MobileLayoutItemViewModel(dashboardContext, repaintRequest, dashboardItem, fullscreenItemModel),
                name: 'dx-dashboard-mobile-layout-item'
            };
        });
        return {
            key: layoutItem.groupName,
            items: items
        };
    });
    return {
        indicateLoading: false,
        height: function () {
            return $element.height() - actionToolbarHeight();
        },
        width: function () {
            return $element.width();
        },
        activeStateEnabled: false,
        focusStateEnabled: false,
        hoverStateEnabled: false,
        grouped: true,
        dataSource: ko.computed(function () { return titleVisible && actionToolbarHeight() > 0 ? [{
                key: exports.dashboardTitleKey,
                items: [title]
            }].concat(layoutItems) : layoutItems; }),
        onContentReady: function (e) {
            getWidgetCallback(e.component);
        },
        groupTemplate: function (data, index, element) {
            if (data.key === exports.ungroupedItemKey || data.key === exports.dashboardTitleKey) {
                var className = data.key === exports.dashboardTitleKey || (data.key === exports.ungroupedItemKey && (titleVisible && index === 1 || !titleVisible && index === 0)) ? mobileLayoutCssClasses.dashboardDisplayNone : mobileLayoutCssClasses.ungroupedItem;
                _utils_1.$unwrap(element).classList.add(className);
                return document.createElement('div');
            }
            else if (data.key.search(exports.groupWithoutCaptionItemKey) !== -1) {
                _utils_1.$unwrap(element).classList.add(mobileLayoutCssClasses.groupWithoutCaption);
                return document.createElement('div');
            }
            else {
                var div = document.createElement('div');
                div.innerText = data.key;
                return div;
            }
        }
    };
};


/***/ }),
/* 605 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var _formatter_1 = __webpack_require__(25);
var caption_toolbar_options_1 = __webpack_require__(64);
var _caption_toolbar_css_classes_1 = __webpack_require__(31);
var _mobile_layout_caption_toolbar_1 = __webpack_require__(352);
var _dashboard_title_model_1 = __webpack_require__(156);
var _viewer_interfaces_1 = __webpack_require__(157);
var _mobile_layout_fullscreen_item_1 = __webpack_require__(360);
var _mobile_layout_item_1 = __webpack_require__(361);
var MasterFiltersEditorModel = (function () {
    function MasterFiltersEditorModel() {
        var _this = this;
        this._target = ko.observable(null);
        this._visible = ko.observable(false);
        this.visible = ko.computed(function () { return _this._visible(); });
        this.masterItems = ko.computed(function () {
            if (_this._target()) {
                return _this._target()._masterFilterItems();
            }
            else {
                return [];
            }
        });
    }
    MasterFiltersEditorModel.prototype.addFilterButton = function (toolbarItems, filterableItem) {
        var _this = this;
        if (filterableItem._masterFilterItems().length) {
            toolbarItems.push({
                name: caption_toolbar_options_1.dashboardToolbarItemNames.dashboardFilters,
                type: 'button',
                icon: 'dx-dashboard-filters',
                click: function () {
                    _this.show(filterableItem);
                }
            });
        }
    };
    MasterFiltersEditorModel.prototype.show = function (target) {
        this._target(target);
        this._visible(true);
    };
    MasterFiltersEditorModel.prototype.hide = function () {
        this._visible(false);
    };
    return MasterFiltersEditorModel;
}());
exports.MasterFiltersEditorModel = MasterFiltersEditorModel;
var ItemMasterFilterInfo = (function () {
    function ItemMasterFilterInfo(dashboardItem, click) {
        this.dashboardItem = dashboardItem;
        this.click = click;
        this.name = ko.computed(function () { return dashboardItem.name(); });
        this.filterValues = ko.computed(function () {
            return dashboardItem
                ._getDisplayFilterValues(_dashboard_title_model_1.maxFilterValuesCount)
                .filter(function (value) { return value.Values[0] && !!value.Values[0].Format; })
                .map(function (value) {
                return {
                    name: value.Name,
                    valuesString: value
                        .Values
                        .map(function (filterValue) { return _formatter_1.formatFilterValue(filterValue); })
                        .concat(value.Truncated ? ['…'] : [])
                        .join(', ')
                };
            });
        });
    }
    return ItemMasterFilterInfo;
}());
exports.ItemMasterFilterInfo = ItemMasterFilterInfo;
var ItemMasterFilterPopupViewModel = (function () {
    function ItemMasterFilterPopupViewModel(heightOffset, visible, repaintRequest) {
        this.width = function () { return $(window).width(); };
        this.height = function () { return $(window).height() - heightOffset; };
        this.visible = visible;
        var popupResizeController = new _mobile_layout_fullscreen_item_1.PopupResizeController(repaintRequest);
        this.onInitializing = popupResizeController.onInitialized;
        this.onDisposing = popupResizeController.onDisposing;
    }
    return ItemMasterFilterPopupViewModel;
}());
var ItemMasterFiltersViewModel = (function () {
    function ItemMasterFiltersViewModel(model, dashboardContext, repaintRequest) {
        var _this = this;
        this.model = model;
        this.masterFilterItem = ko.observable(null);
        this.showMasterFilterItem = function (dashboardItem, dashboardContext, repaintRequest) {
            _this.maximizeFiltersPopup(true);
            _this.masterFilterItem({
                dashboardItem: dashboardItem,
                dashboardContext: dashboardContext,
                repaintRequest: repaintRequest,
                localContext: new _viewer_interfaces_1.DashboardItemContext({
                    itemFactory: new _mobile_layout_fullscreen_item_1.MobileItemViewerFactory(),
                    addContextToolbarItems: function (options) {
                        options.actionItems = options.actionItems.filter(function (item) { return item.name !== caption_toolbar_options_1.dashboardToolbarItemNames.exportMenu; });
                    },
                    viewerItemCreated: function (dashboardItem, viewerItem) { return _mobile_layout_item_1.customizeMobileViewerItems(viewerItem); },
                    createCaptionToolbar: function (viewerItem, container, controlContainer, popupContainer, viewOptions) {
                        return new _mobile_layout_caption_toolbar_1.MobileLayoutCaptionToolbar(container, controlContainer, popupContainer, viewOptions.encodeHtml, _caption_toolbar_css_classes_1.cssClasses.caption, viewOptions.captionToolbarSeparatorRequired);
                    },
                    beforeApplyViewerItemOptions: function (item, options, isCreation) {
                        options.ParentContainer = undefined;
                        _mobile_layout_item_1.setCardAutoArrangementMode(item, options);
                    },
                    itemCreatingType: 'primary'
                })
            });
        };
        this.closeMasterFilterItemPopup = function () {
            _this.maximizeFiltersPopup(false);
            _this.masterFilterItem(null);
        };
        this.closeMasterFiltersPopup = function () {
            _this.closeMasterFilterItemPopup();
            _this.model.hide();
        };
        this.maximizeFiltersPopup = ko.observable(false);
        this.masterItems = ko.computed(function () { return model.masterItems().map(function (mi) { return new ItemMasterFilterInfo(mi, function () { return _this.showMasterFilterItem(mi, dashboardContext, repaintRequest); }); }); });
        var masterFiltersVisible = ko.computed(function () { return _this.model.visible(); });
        var masterFilterItemVisible = ko.computed(function () { return !!_this.masterFilterItem(); });
        this.masterFiltersPopup = new ItemMasterFilterPopupViewModel(50, masterFiltersVisible, repaintRequest);
        this.masterFilterMaximizedItemPopup = new ItemMasterFilterPopupViewModel(100, masterFilterItemVisible, repaintRequest);
        this.maximizeFiltersPopup = ko.observable(masterFiltersVisible());
    }
    return ItemMasterFiltersViewModel;
}());
exports.ItemMasterFiltersViewModel = ItemMasterFiltersViewModel;


/***/ }),
/* 606 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = __webpack_require__(69);
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var _utils_1 = __webpack_require__(3);
var disposable_object_1 = __webpack_require__(11);
var _dashboard_item_helper_1 = __webpack_require__(102);
var combo_box_item_1 = __webpack_require__(328);
var date_filter_item_1 = __webpack_require__(143);
var group_item_1 = __webpack_require__(131);
var dashboard_tab_page_1 = __webpack_require__(86);
var tab_container_item_1 = __webpack_require__(87);
var _dashboard_title_view_constants_1 = __webpack_require__(91);
var caption_toolbar_options_1 = __webpack_require__(64);
var _layout_1 = __webpack_require__(155);
var _title_component_1 = __webpack_require__(357);
var _viewer_1 = __webpack_require__(359);
var _viewer_interfaces_1 = __webpack_require__(157);
var DashboardSurface = (function (_super) {
    __extends(DashboardSurface, _super);
    function DashboardSurface(dashboardModel, dataSourceBrowser, context, _findExtension, _allowMaximizeItems, resizeByTimer, repaintRequest, encodeHtml) {
        if (encodeHtml === void 0) { encodeHtml = true; }
        var _this = _super.call(this) || this;
        _this.dashboardModel = dashboardModel;
        _this.dataSourceBrowser = dataSourceBrowser;
        _this.context = context;
        _this._findExtension = _findExtension;
        _this._allowMaximizeItems = _allowMaximizeItems;
        _this.resizeByTimer = resizeByTimer;
        _this.repaintRequest = repaintRequest;
        _this.encodeHtml = encodeHtml;
        _this.itemInteractionInProgress = ko.observable(false);
        _this._selectedLayoutItem = ko.observable();
        _this.selectedDashboardItem = ko.computed(function () {
            return _this._selectedLayoutItem() && _this._selectedLayoutItem().viewModel.item() || null;
        });
        _this.emptyItemTemplates = ko.observableArray();
        _this.emptyItemTemplatesService = function (layoutItem) {
            return {
                data: _this.emptyItemTemplates,
                templateName: 'dx-dashboard-empty-item-templates'
            };
        };
        _this.addDashboardItem = function (data) {
            var item = _layout_1.LayoutItem.findLargestItem(_this.rootItem).item;
            if (!item) {
                item = _this.rootItem;
            }
            var itemJson = _dashboard_item_helper_1.getItemJson(data.type);
            var location = item._parent() && item._parent().viewModel && item._parent().viewModel.orientation() === 'Horizontal' ? 'bottom' : 'right';
            item.create(itemJson, location);
        };
        _this.width = ko.observable(0);
        _this.height = ko.observable(0);
        _this.headerHeight = ko.observable(_dashboard_title_view_constants_1.titleHeight);
        _this.visibleItemsProvider = undefined;
        _this.rootItem = new _layout_1.LayoutItem(dashboardModel.layout()._createViewModel(), null);
        var fullScreenItemLocalContext = new _viewer_interfaces_1.DashboardItemContext({
            ignoreDesignMode: true,
            beforeApplyViewerItemOptions: function (item, options) {
                options.ParentContainer = undefined;
            },
            addContextToolbarItems: function (options) {
                if (_this._allowMaximizeItems) {
                    options.actionItems.push({
                        hint: _default_1.getLocalizationById('DashboardStringId.ActionRestoreDashboardItem'),
                        name: caption_toolbar_options_1.dashboardToolbarItemNames.restoreItem,
                        icon: 'dx-dashboard-restore-item',
                        type: 'button',
                        click: function () {
                            _this.fullscreenItemModel.restoreDownItem();
                        }
                    });
                }
            },
            itemCreatingType: 'secondary'
        });
        var exportExtension = _this._findExtension('dashboard-export');
        if (exportExtension) {
            exportExtension._initializeSecondaryExportItem(fullScreenItemLocalContext);
        }
        _this.fullscreenItemModel = new _viewer_1.FullscreenItemModel(context, fullScreenItemLocalContext);
        var getVisibleItems = function (layoutItemViewModel) {
            var res = [];
            if (layoutItemViewModel.item())
                res.push(layoutItemViewModel.item());
            if (layoutItemViewModel.item() instanceof tab_container_item_1.TabContainerItem) {
                res.push.apply(res, layoutItemViewModel.childItems().map(function (ci) { return ci._createViewModel().item(); }));
            }
            layoutItemViewModel.visibleItems().forEach(function (childItem) {
                res.push.apply(res, getVisibleItems(childItem._createViewModel()));
            });
            return res;
        };
        _this.visibleItemsProvider = {
            visibleItems: ko.pureComputed(function () {
                return getVisibleItems(_this.rootItem.viewModel);
            })
        };
        _this.rootItem.onEvent = function (layoutItem, event) {
            if (event === 'click') {
                _this.select(layoutItem);
            }
            else if (event === 'unselect') {
                _this.select(null);
            }
            else if (event === 'resize-started') {
                setTimeout(function () { return _this.itemInteractionInProgress(true); }, 1);
            }
            else if (event === 'resize-completed') {
                setTimeout(function () { return _this.itemInteractionInProgress(false); }, 1);
            }
            else if (event === 'get-context') {
                return context;
            }
            else if (event === 'get-local-context') {
                var itemModel = layoutItem.viewModel.item;
                var localContext = new _viewer_interfaces_1.DashboardItemContext({
                    disabled: ko.computed(function () { return itemModel() && _this.fullscreenItemModel.maximizedItemName === itemModel().componentName(); }),
                    addContextToolbarItems: function (options, item) {
                        if (_this._allowMaximizeItems
                            && !(item instanceof combo_box_item_1.ComboBoxItem)
                            && !(item instanceof date_filter_item_1.DateFilterItem)
                            && !(item instanceof group_item_1.GroupItem)
                            && !(item instanceof tab_container_item_1.TabContainerItem)
                            && !(item instanceof dashboard_tab_page_1.DashboardTabPage)) {
                            options.actionItems.push({
                                hint: _default_1.getLocalizationById('DashboardStringId.ActionMaximizeDashboardItem'),
                                icon: 'dx-dashboard-maximize-item',
                                name: caption_toolbar_options_1.dashboardToolbarItemNames.maximizeItem,
                                type: 'button',
                                click: function () {
                                    _this.select(null);
                                    _this.fullscreenItemModel.maximizeItem(item);
                                }
                            });
                        }
                    },
                    visualMode: ko.computed(function () {
                        if (itemModel()) {
                            if (itemModel() instanceof tab_container_item_1.TabContainerItem) {
                                return 'caption';
                            }
                            var parent_1 = dashboardModel.findItem(itemModel().parentContainer());
                            if (parent_1 instanceof dashboard_tab_page_1.DashboardTabPage
                                && dashboardModel._getDisplayDashboardItem(parent_1) !== parent_1) {
                                return 'content';
                            }
                        }
                        return 'full';
                    }),
                    itemCreatingType: 'primary'
                });
                var exportExtension = _this._findExtension('dashboard-export');
                if (exportExtension) {
                    exportExtension._initializePrimaryExportItem(localContext);
                }
                return localContext;
            }
        };
        events_1.on(document, 'pointerdown.dxlayout', function (e) {
            if (!_this._selectedLayoutItem()) {
                return;
            }
            var target = _utils_1.$unwrap(e.target), validParents = ['.dx-layout-root',
                '.dx-accordion-item',
                '.dx-treeview-node',
                '.dx-dashboard-context-menu-panel',
                'dx-field-chooser',
                '.dx-dashboard-toolbar',
                '.dx-overlay-content',
                '.dx-overlay-shader',
                '.ace_editor'
            ];
            var found = false;
            if (_utils_1.type.isDefined(target.classList) && target.classList.contains('dx-calendar-cell')) {
                found = true;
            }
            else if (!target.parentNode) {
                found = true;
            }
            else {
                found = found || validParents.some(function (validParent) { return !!_utils_1.closest(target, validParent); });
            }
            if (found)
                return;
            if (target.tagName && target.tagName.toLowerCase() === 'body')
                return;
            if (document.activeElement && document.activeElement.blur) {
                document.activeElement.blur();
            }
            _this.select(null);
        });
        _this.titleContext = new _title_component_1.DashboardTitleContext(_this.encodeHtml, _this._findExtension);
        _this.toDispose(_this.titleContext);
        _this.toDispose(ko.computed(function () {
            if (_this.width() > 0) {
                _this.rootItem.width(_this.width());
            }
            if (_this.height() > 0) {
                _this.rootItem.height(_this.height() - _this.headerHeight());
            }
        }));
        return _this;
    }
    Object.defineProperty(DashboardSurface.prototype, "fullscreenItemProvider", {
        get: function () {
            return this.fullscreenItemModel;
        },
        enumerable: true,
        configurable: true
    });
    DashboardSurface.prototype.select = function (item) {
        var oldSelectedItem = this._selectedLayoutItem.peek();
        if (oldSelectedItem) {
            oldSelectedItem.isSelected(false);
        }
        this._selectedLayoutItem(item);
        if (!!item) {
            item.isSelected(true);
        }
    };
    DashboardSurface.prototype.dispose = function () {
        events_1.off(document, '.dxlayout');
        _super.prototype.dispose.call(this);
    };
    return DashboardSurface;
}(disposable_object_1.DisposableObject));
exports.DashboardSurface = DashboardSurface;


/***/ }),
/* 607 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var browser = __webpack_require__(99);
var $ = __webpack_require__(2);
function findGloballyDefinedMethod() {
    var path = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        path[_i] = arguments[_i];
    }
    return path.reduce(function (acc, item) {
        if (acc)
            return acc[item];
        return undefined;
    }, window);
}
var AjaxRemoteService = (function () {
    function AjaxRemoteService(options) {
        if (options === void 0) { options = {}; }
        this.beforeSend = $.noop;
        this.complete = $.noop;
        this.headers = {};
        if (options.beforeSend) {
            this.beforeSend = options.beforeSend;
        }
        if (options.headers) {
            this.headers = options.headers;
        }
        if (options.complete) {
            this.complete = options.complete;
        }
    }
    AjaxRemoteService.prototype.getFromServer = function (url, data, queryOptions) {
        var obsoleteGetFromServer = findGloballyDefinedMethod('DevExpress', 'Dashboard', 'getFromServer');
        if (obsoleteGetFromServer) {
            console.warn('This method is obsolete. Please use **remoteService** option to customize HTTP requests.');
            return obsoleteGetFromServer(url, data, queryOptions);
        }
        var isIE11 = !!browser.msie && parseInt(browser.version, 10) < 12;
        return $.ajax(__assign({ url: url, dataType: 'json', data: data, beforeSend: this.beforeSend, headers: this.headers, complete: this.complete, cache: !isIE11 }, queryOptions));
    };
    AjaxRemoteService.prototype.postToServer = function (url, data) {
        var obsoletePostToServer = findGloballyDefinedMethod('DevExpress', 'Dashboard', 'postToServer');
        if (obsoletePostToServer) {
            console.warn('This method is obsolete. Please use **remoteService** option to customize HTTP requests.');
            return obsoletePostToServer(url, data);
        }
        return $.ajax({
            method: 'post',
            url: url,
            dataType: 'json',
            contentType: 'application/json',
            jsonp: false,
            data: data === null || data === undefined ? '' : JSON.stringify(data),
            beforeSend: this.beforeSend,
            headers: this.headers,
            complete: this.complete
        });
    };
    AjaxRemoteService.prototype.performPostback = function (url, args) {
        var _this = this;
        var obsoletePerformPostback = findGloballyDefinedMethod('DevExpress', 'Dashboard', 'performPostback');
        if (obsoletePerformPostback) {
            console.warn('This method is obsolete. Please use **remoteService** option to customize HTTP requests.');
            return obsoletePerformPostback(url, args);
        }
        var $div = $('<div>').appendTo('body');
        var $form = $('<form>', {
            action: url,
            method: 'POST',
            target: '_blank'
        }).appendTo($div);
        var $input = $('<input>', {
            id: 'dx-db-export-input-id',
            name: 'dx-db-export',
            type: 'hidden',
            value: encodeURIComponent(args)
        }).appendTo($form);
        Object.keys(this.headers).forEach(function (headerName) {
            var $input = $('<input>', {
                name: headerName,
                type: 'hidden',
                value: encodeURIComponent(_this.headers[headerName])
            }).appendTo($form);
        });
        $form.submit();
        $div.remove();
    };
    return AjaxRemoteService;
}());
exports.AjaxRemoteService = AjaxRemoteService;


/***/ }),
/* 608 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _localization_initializer_1 = __webpack_require__(234);
var _obsolete_helper_1 = __webpack_require__(46);
var _resources_1 = __webpack_require__(730);
var resId = 'dx-dashboard-control-resources';
var ResourceManager = (function () {
    function ResourceManager() {
    }
    ResourceManager.embedBundledResources = function () {
        if (!document.body)
            throw 'HTML <body> element is not created yet.';
        if (!document.getElementById(resId)) {
            var res = '';
            for (var key in _resources_1.resources) {
                res += _resources_1.resources[key];
            }
            var div = document.createElement('div');
            div.style.display = 'none';
            div.innerHTML = res;
            div.id = resId;
            document.body.insertBefore(div, document.body.childNodes[0]);
        }
    };
    ResourceManager.removeEmbeddedResources = function () {
        var resourceElement = document.getElementById(resId);
        if (resourceElement) {
            resourceElement.parentNode.removeChild(resourceElement);
        }
    };
    ResourceManager.setLocalizationMessages = function (localizationMessages) {
        _localization_initializer_1.setLocalization(localizationMessages);
    };
    ResourceManager.registerIcon = function (icon) {
        var div = document.createElement('div');
        div.style.position = 'absolute';
        div.style.visibility = 'hidden';
        div.style.left = '-10px';
        div.style.top = '-10px';
        div.style.width = '1px';
        div.style.height = '1px';
        div.innerHTML = icon;
        document.body.insertBefore(div, document.body.childNodes[0]);
    };
    return ResourceManager;
}());
exports.ResourceManager = ResourceManager;
_obsolete_helper_1.defineObsoleteMethod({
    target: ResourceManager,
    memberName: 'removeEmbededResources',
    oldMemberDisplayName: 'ResourceManager.removeEmbededResources',
    newMemberDisplayName: 'ResourceManager.removeEmbeddedResources',
    action: function () { return ResourceManager.removeEmbeddedResources(); }
});


/***/ }),
/* 609 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _utils_1 = __webpack_require__(3);
var _date_utils_1 = __webpack_require__(41);
var UnderlyingDataProvider = (function () {
    function UnderlyingDataProvider(_serviceClient) {
        this._serviceClient = _serviceClient;
    }
    UnderlyingDataProvider.prototype._getValidDataQueryParamsValues = function (values, dataDashboardItem) {
        var itemQueryParams = _utils_1.deepExtend({}, dataDashboardItem._getDataQueryParams());
        if (itemQueryParams.DrillDown) {
            var drillDownLen = itemQueryParams.DrillDown.length;
            var columnValuesLen = values.length;
            var visibleDimensionsCount = dataDashboardItem._getInteractivityAxisDimensionCount();
            var notInteractivityDimensionsCount = visibleDimensionsCount - dataDashboardItem._interactivityDimensions.length;
            var interactivityColumnsValues = columnValuesLen - notInteractivityDimensionsCount;
            if (drillDownLen > 0) {
                var stateToModelDiff = interactivityColumnsValues - drillDownLen - 1;
                if (stateToModelDiff < 0) {
                    itemQueryParams.DrillDown.splice(stateToModelDiff);
                }
            }
        }
        return itemQueryParams;
    };
    UnderlyingDataProvider.prototype._getUnderlyingDataArgsAxisPoints = function (data, args) {
        var axisNames = data.getAxisNames(), axisPoints = args.axisPoints;
        if (!axisPoints) {
            axisPoints = [];
            axisNames.forEach(function (axisName) {
                var axis = data.getAxis(axisName), axisPoint = undefined;
                if (args.uniqueValuesByAxisName) {
                    var axisValues = args.uniqueValuesByAxisName[axisName];
                    if (axisValues)
                        axisPoint = axis.getPointByUniqueValues(axisValues);
                }
                if (args.valuesByAxisName) {
                    var axisValues = args.valuesByAxisName[axisName];
                    if (axisValues)
                        axisPoint = axis.getPointByValues(axisValues);
                }
                if (!axisPoint)
                    axisPoint = axis.getRootPoint();
                axisPoints.push(axisPoint);
            });
        }
        axisNames.forEach(function (axisName) {
            var points = axisPoints.map(function (axisPoint) {
                return axisPoint.getAxisName() === axisName;
            });
            if (points.length == 0) {
                axisPoints.push(data.getAxis(axisName).getRootPoint());
            }
        });
        return axisPoints;
    };
    UnderlyingDataProvider.prototype.requestUnderlyingData = function (dataDashboardItem, args) {
        var metaData = dataDashboardItem._dataManager().getMetaData(), axisPoints = this._getUnderlyingDataArgsAxisPoints(dataDashboardItem._getItemData(), args), columnNames = args.dataMembers, pivotAreaValues = {};
        axisPoints.forEach(function (axisPoint) {
            var name = axisPoint.getAxisName();
            pivotAreaValues[metaData.getPivotAreaByAxisName(name)] = _date_utils_1.toStringArray(axisPoint.getUniquePath());
        });
        var isInteractivityByColumns = dataDashboardItem._itemInteractivityByColumnAxis();
        var columnValues = pivotAreaValues['Columns'];
        var rowValues = pivotAreaValues['Rows'];
        var itemQueryParams = this._getValidDataQueryParamsValues(isInteractivityByColumns ? columnValues : rowValues, dataDashboardItem);
        var promise = this._serviceClient.getUnderlyingData(dataDashboardItem.componentName(), columnValues, rowValues, columnNames, itemQueryParams);
        return promise.then(function (data) {
            data.Data = data.Data.map(function (row) { return row = row.map(function (value) { return _date_utils_1.tryConvertToDateTime(value); }); });
            return data;
        });
    };
    return UnderlyingDataProvider;
}());
exports.UnderlyingDataProvider = UnderlyingDataProvider;


/***/ }),
/* 610 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function findItemForApi(dashboard, itemName, expectedItemClass) {
    var dashboardItem = dashboard.findItem(itemName);
    if (!dashboardItem) {
        throw new Error("The item with the '" + itemName + "' name does not exist");
    }
    if (!(dashboardItem instanceof expectedItemClass))
        throw new Error("The '" + itemName + "' item has incorrect type.");
    return dashboardItem;
}
exports.findItemForApi = findItemForApi;


/***/ }),
/* 611 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(224);
__webpack_require__(612);
__export(__webpack_require__(224));
__export(__webpack_require__(778));
__export(__webpack_require__(779));
__export(__webpack_require__(780));
__export(__webpack_require__(781));
__export(__webpack_require__(375));
__export(__webpack_require__(376));
__export(__webpack_require__(377));
__export(__webpack_require__(232));
__export(__webpack_require__(783));
__export(__webpack_require__(784));
__export(__webpack_require__(785));
__export(__webpack_require__(786));
__export(__webpack_require__(787));
__export(__webpack_require__(788));
__export(__webpack_require__(789));
__export(__webpack_require__(790));
__export(__webpack_require__(791));
__export(__webpack_require__(792));
__export(__webpack_require__(793));
__export(__webpack_require__(794));
__export(__webpack_require__(622));
__export(__webpack_require__(795));
__export(__webpack_require__(56));


/***/ }),
/* 612 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(741);
__webpack_require__(363);
__webpack_require__(742);
__webpack_require__(613);
__webpack_require__(744);
__webpack_require__(746);
__webpack_require__(370);
__webpack_require__(747);
__webpack_require__(748);
__export(__webpack_require__(371));
__export(__webpack_require__(629));
__export(__webpack_require__(614));
__export(__webpack_require__(632));
__export(__webpack_require__(633));
__export(__webpack_require__(372));
__export(__webpack_require__(634));
__export(__webpack_require__(635));
__export(__webpack_require__(636));
__export(__webpack_require__(228));
__export(__webpack_require__(229));
__export(__webpack_require__(617));
__export(__webpack_require__(618));
__export(__webpack_require__(364));
__export(__webpack_require__(363));
__export(__webpack_require__(225));
__export(__webpack_require__(620));
__export(__webpack_require__(619));
__export(__webpack_require__(638));
__export(__webpack_require__(639));
__export(__webpack_require__(640));
__export(__webpack_require__(230));
__export(__webpack_require__(231));
__export(__webpack_require__(373));
__export(__webpack_require__(161));
__export(__webpack_require__(374));
__export(__webpack_require__(642));
__export(__webpack_require__(615));
__export(__webpack_require__(366));
__export(__webpack_require__(160));
__export(__webpack_require__(621));
__export(__webpack_require__(616));
__export(__webpack_require__(628));
__export(__webpack_require__(158));
__export(__webpack_require__(226));
__export(__webpack_require__(159));
__export(__webpack_require__(10));
__export(__webpack_require__(643));
__export(__webpack_require__(644));
__export(__webpack_require__(227));
__export(__webpack_require__(92));
__export(__webpack_require__(12));
__export(__webpack_require__(645));
__export(__webpack_require__(646));
__export(__webpack_require__(368));
__export(__webpack_require__(647));
__export(__webpack_require__(648));
__export(__webpack_require__(649));
__export(__webpack_require__(650));
__export(__webpack_require__(378));
__export(__webpack_require__(651));
__export(__webpack_require__(652));
__export(__webpack_require__(379));
__export(__webpack_require__(116));
__export(__webpack_require__(653));
__export(__webpack_require__(654));
__export(__webpack_require__(655));
__export(__webpack_require__(656));
__export(__webpack_require__(657));
__export(__webpack_require__(658));
__export(__webpack_require__(659));
__export(__webpack_require__(660));
__export(__webpack_require__(627));
__export(__webpack_require__(661));
__export(__webpack_require__(662));
__export(__webpack_require__(663));
__export(__webpack_require__(664));
__export(__webpack_require__(665));
__export(__webpack_require__(13));
__export(__webpack_require__(625));
__export(__webpack_require__(666));
__export(__webpack_require__(667));
__export(__webpack_require__(668));
__export(__webpack_require__(33));
__export(__webpack_require__(93));
__export(__webpack_require__(752));
__export(__webpack_require__(45));
__export(__webpack_require__(23));
__export(__webpack_require__(753));
__export(__webpack_require__(754));
__export(__webpack_require__(755));
__export(__webpack_require__(756));
__export(__webpack_require__(757));
__export(__webpack_require__(758));
__export(__webpack_require__(760));
__export(__webpack_require__(162));
__export(__webpack_require__(669));
__export(__webpack_require__(761));
__export(__webpack_require__(762));
__export(__webpack_require__(763));
__export(__webpack_require__(764));
__export(__webpack_require__(765));
__export(__webpack_require__(626));
__export(__webpack_require__(766));
__export(__webpack_require__(767));
__export(__webpack_require__(768));
__export(__webpack_require__(769));
__export(__webpack_require__(771));
__export(__webpack_require__(772));
__export(__webpack_require__(670));
__export(__webpack_require__(774));
__export(__webpack_require__(117));
__export(__webpack_require__(775));
__export(__webpack_require__(671));
__export(__webpack_require__(15));
__export(__webpack_require__(370));
__export(__webpack_require__(672));
__export(__webpack_require__(673));
__export(__webpack_require__(7));
__export(__webpack_require__(369));
__export(__webpack_require__(674));
__export(__webpack_require__(79));
__export(__webpack_require__(115));
__export(__webpack_require__(623));
__export(__webpack_require__(624));
__export(__webpack_require__(777));
__export(__webpack_require__(675));
__export(__webpack_require__(367));
__export(__webpack_require__(24));
__export(__webpack_require__(365));


/***/ }),
/* 613 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var form_1 = __webpack_require__(743);
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var _utils_1 = __webpack_require__(3);
var _form_adapter_editors_1 = __webpack_require__(22);
exports.twoWayUpdateInterval = 1;
function extractFormAdapterItem(serializableInfo) {
    if (serializableInfo.formAdapterItem) {
        return serializableInfo.formAdapterItem;
    }
    else {
        return mapEditor(serializableInfo);
    }
}
function mapEditor(serializableInfo) {
    if (!serializableInfo.simpleFormAdapterItem) {
        return null;
    }
    switch (serializableInfo.simpleFormAdapterItem) {
        case 'dateBoxEditor':
            return _form_adapter_editors_1.dateBoxEditor();
        case 'numberBoxEditor':
            return _form_adapter_editors_1.numberBoxEditor();
        case 'checkBoxEditor':
            return _form_adapter_editors_1.checkBoxEditor({ text: _default_1.getLocalizationById(serializableInfo.displayName) });
        case 'textBoxEditor':
            return _form_adapter_editors_1.textBoxEditor();
        case 'guidEditor':
            return _form_adapter_editors_1.guidEditor();
        case 'selectBoxEditor':
            return _form_adapter_editors_1.selectBoxEditor(getEditorValues(serializableInfo));
        case 'onOffButtonGroupEditor':
            return _form_adapter_editors_1.buttonGroupEditor([{ value: true, displayValueId: 'DashboardWebStringId.ButtonOn' }, { value: false, displayValueId: 'DashboardWebStringId.ButtonOff' }]);
        case 'yesNoButtonGroupEditor':
            return _form_adapter_editors_1.buttonGroupEditor([{ value: true, displayValueId: 'DashboardWebStringId.ButtonYes' }, { value: false, displayValueId: 'DashboardWebStringId.ButtonNo' }]);
        case 'buttonGroupEditor':
            return _form_adapter_editors_1.buttonGroupEditor(getEditorValues(serializableInfo));
        case 'discreteContinuousButtonGroupEditor':
            return _form_adapter_editors_1.buttonGroupEditor([{ value: true, displayValueId: 'DashboardWebStringId.ButtonDiscrete' }, { value: false, displayValueId: 'DashboardWebStringId.ButtonContinuous' }]);
        case 'listEditor':
            return _form_adapter_editors_1.listEditor(getEditorValues(serializableInfo));
        default:
            throw new Error('Unsupported simple formAdapterItem type');
    }
}
function getFormItem(target, context) {
    return target
        .getInfo()
        .map(function (serializationInfo) {
        if (serializationInfo.dxFormItem) {
            return serializationInfo.dxFormItem;
        }
        var dynamicEditor = target.getDynamicEditor ? target.getDynamicEditor(serializationInfo.propertyName) : null;
        var formAdapterItemProvider = dynamicEditor || serializationInfo;
        var formAdapterItem = extractFormAdapterItem(formAdapterItemProvider);
        var formAdapterItemOptions = (typeof formAdapterItem === 'function') ? formAdapterItem(context) : formAdapterItem;
        if (!formAdapterItemOptions) {
            return null;
        }
        return {
            dataField: serializationInfo.propertyName,
            name: serializationInfo.propertyName,
            label: __assign({ text: _default_1.getLocalizationById(serializationInfo.displayName), visible: !!serializationInfo.displayName }, formAdapterItemOptions.label),
            visible: target.isPropertyVisible ? target.isPropertyVisible(serializationInfo.propertyName) : true,
            validationRules: (serializationInfo.validationRules || []).concat((formAdapterItemOptions.validationRules || [])),
            editorType: formAdapterItemOptions.editorType,
            template: formAdapterItemOptions.template,
            customEditorType: formAdapterItemOptions.customEditorType,
            editorOptions: __assign({ disabled: target.isPropertyDisabled ? target.isPropertyDisabled(serializationInfo.propertyName) : false }, formAdapterItemOptions.editorOptions, serializationInfo.editorOptions),
        };
    }).filter(function (i) { return !!i; });
}
function getFormItemsCore(target, bindingContext) {
    return getFormItem(target, {
        bindingContext: bindingContext,
        widgetContainer: bindingContext.$root.getWidgetContainer()
    });
}
function updateFormItemsCore(form, target, bindingContext, forced) {
    form.beginUpdate();
    getFormItemsCore(target, bindingContext).forEach(function (newItem) {
        var itemOptions = form.itemOption(newItem.dataField);
        if (itemOptions.visible !== newItem.visible) {
            form.itemOption(newItem.dataField, 'visible', newItem.visible);
        }
        if (!!itemOptions.editorOptions && newItem.editorOptions && itemOptions.editorOptions.disabled !== newItem.editorOptions.disabled) {
            form.itemOption(newItem.dataField, 'editorOptions', newItem.editorOptions);
        }
        if (itemOptions['customEditorType'] !== newItem['customEditorType'] || itemOptions.editorType !== newItem.editorType ||
            _utils_1.type.isDefined(forced) && forced.filter(function (f) { return f === newItem.dataField; }).length > 0) {
            form.itemOption(newItem.dataField, newItem);
        }
    });
    form.endUpdate();
}
exports.updateFormItemsCore = updateFormItemsCore;
function transformValuesDictionary(values) {
    return Object.keys(values).map(function (k) { return ({ value: k, displayValueId: values[k] }); });
}
exports.transformValuesDictionary = transformValuesDictionary;
function getEditorValues(propertyEditorInfo) {
    if (propertyEditorInfo.values) {
        var values = ko.unwrap(propertyEditorInfo.values);
        return transformValuesDictionary(values);
    }
    else if (propertyEditorInfo.valuesArray)
        return propertyEditorInfo.valuesArray.map(function (val) { return ({ value: val.value, displayValueId: val.displayValue }); });
    return undefined;
}
ko.bindingHandlers['dx-dashboard-form-adapter'] = {
    init: function (element, valueAccessor, _, __, bindingContext) {
        var subscriptions = [];
        var params = ko.unwrap(valueAccessor());
        var target = ko.unwrap(params.target);
        var onFormInitialized = ko.unwrap(params.onFormInitialized);
        var getFormItems = function () { return getFormItemsCore(target, bindingContext); };
        var updateFormItems = function (form, forced) {
            updateFormItemsCore(form, target, bindingContext, forced);
        };
        var twoWayTimeout;
        var twoWayPropsUpdated = [];
        var clearTwoWayTimeout = function (propsToClear) {
            twoWayPropsUpdated = twoWayPropsUpdated.filter(function (tw) { return propsToClear.filter(function (tc) { return tc === tw; }).length === 0; });
            if (twoWayPropsUpdated.length === 0) {
                clearTimeout(twoWayTimeout);
                twoWayTimeout = null;
            }
        };
        var updateTwoWay = function (prop) {
            clearTimeout(twoWayTimeout);
            twoWayPropsUpdated.push(prop);
            twoWayTimeout = setTimeout(function () {
                var force = twoWayPropsUpdated;
                clearTwoWayTimeout(twoWayPropsUpdated);
                updateFormItems(form, force);
            }, exports.twoWayUpdateInterval);
        };
        var form = new form_1.default(element, {
            formData: target,
            colCount: 1,
            labelLocation: 'top',
            showColonAfterLabel: false,
            items: getFormItems(),
            onContentReady: function (e) {
                target.onContentReady && target.onContentReady(e);
            },
            onInitialized: function (e) {
                onFormInitialized && onFormInitialized(e);
                target.onInitialized && target.onInitialized(e);
            },
            onFieldDataChanged: function (e) {
                if (twoWayTimeout)
                    clearTwoWayTimeout([e.dataField]);
                updateFormItems(e.component);
                target.onFieldDataChanged && target.onFieldDataChanged(e);
            }
        });
        target.assignValidationPovider(form);
        target.getInfo()
            .forEach(function (propInfo) {
            var property = target[propInfo.propertyName];
            var isExternalDep = target.getInfo().filter(function (si) {
                return si.externalDependencies && si.externalDependencies.filter(function (d) { return d === propInfo.propertyName; }).length > 0;
            }).length > 0;
            var isTwoWay = propInfo.isTwoWay;
            if (property && ko.isObservable(property) && isExternalDep && !isTwoWay) {
                subscriptions.push(property.subscribe(function (newValue) {
                    updateFormItems(form);
                }));
            }
        });
        target.getInfo()
            .filter(function (propInfo) { return propInfo.isTwoWay; })
            .forEach(function (propInfo) {
            var property = target[propInfo.propertyName];
            if (property && ko.isObservable(property)) {
                subscriptions.push(property.subscribe(function (newValue) {
                    updateTwoWay(propInfo.propertyName);
                }));
            }
        });
        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
            target.assignValidationPovider(null);
            subscriptions.forEach(function (d) { return d.dispose(); });
            subscriptions = [];
        });
        return { controlsDescendantBindings: true };
    }
};


/***/ }),
/* 614 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _expression_editor_1 = __webpack_require__(615);
var _expression_editor_functions_1 = __webpack_require__(366);
var CalculationExpressionEditor = (function () {
    function CalculationExpressionEditor(params) {
        var expressionEditorOptions = params.options();
        expressionEditorOptions.functions = _expression_editor_functions_1.getExpressionEditorFunctions();
        this.editor = new _expression_editor_1.DashboardExpressionEditor(expressionEditorOptions, params.fieldListProvider);
        this.editor.textAreaValue(expressionEditorOptions.value());
        this.criteriaString = ko.computed(function () {
            var criteria = params.options().value();
            return criteria;
        });
    }
    CalculationExpressionEditor.prototype.show = function () {
        this.editor.popupVisible(true);
    };
    return CalculationExpressionEditor;
}());
exports.CalculationExpressionEditor = CalculationExpressionEditor;


/***/ }),
/* 615 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var _utils_1 = __webpack_require__(3);
var _dx_designer_integration_1 = __webpack_require__(365);
var _expression_editor_functions_1 = __webpack_require__(366);
var _flat_item_provider_wrapper_1 = __webpack_require__(616);
var DashboardExpressionEditor = (function (_super) {
    __extends(DashboardExpressionEditor, _super);
    function DashboardExpressionEditor(options, fieldListProvider, disabled) {
        var _this = this;
        options.theme = _dx_designer_integration_1.getAceTheme();
        _this = _super.call(this, options, fieldListProvider, disabled) || this;
        var createCompletersBase = _this.languageHelper.createCompleters;
        _this.languageHelper.createCompleters = function (e, b, v) {
            var completers = createCompletersBase.call(_this.languageHelper, e, b, v);
            completers[0]['_fieldListProvider'] = new _flat_item_provider_wrapper_1.FlatItemProviderWrapper(fieldListProvider());
            completers.forEach(function (completer) { return _this._disposables.push(completer); });
            return completers;
        };
        var saveHandler = function (sender) {
            var val = '';
            if (_this.aceAvailable) {
                val = _this.editorContainer().getSession().getValue();
            }
            else {
                val = _this.textAreaValue();
            }
            try {
                if (!!val) {
                    dx_analytics_core_1.default.Analytics.Criteria.CriteriaOperator.parse(val);
                    options.value(val);
                    _this.isValid(true);
                    options.isValid(true);
                }
                else {
                    _this.isValid(false);
                    options.isValid(false);
                }
            }
            catch (exception) {
                var result = dx_analytics_core_1.default.Analytics.Criteria.CriteriaOperator.getNotValidRange(val, exception.message);
                var element = _utils_1.$unwrap(sender.element);
                var textArea = $(element).parents('.dx-overlay-content').find('.dx-expressioneditor').find(':input')[0];
                textArea && textArea.setSelectionRange(result.start, result.end);
                _this.isValid(false);
                options.isValid(false);
            }
            finally {
                return _this.isValid();
            }
        };
        options['saveHandler'] && options['saveHandler'](saveHandler);
        return _this;
    }
    DashboardExpressionEditor.prototype.focus = function () {
        this.editorContainer() && this.editorContainer().focus();
    };
    return DashboardExpressionEditor;
}(dx_analytics_core_1.default.Analytics.Widgets.ExpressionEditor));
exports.DashboardExpressionEditor = DashboardExpressionEditor;
ko.bindingHandlers['dshdExpressionEditor'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var $element = $(element);
        $element.children().remove();
        $element.addClass('dx-filtereditor');
        var templateHtml = dx_analytics_core_1.default.Analytics.Widgets.Internal.getTemplate('dx-expressioneditor-main'), $element = $element.append(templateHtml), editorElement = $element.children()[0], values = valueAccessor();
        values.options.functions = _expression_editor_functions_1.getExpressionEditorFunctions();
        var editor = new DashboardExpressionEditor(values.options, ko.observable(values.fieldListProvider), viewModel.disabled);
        editor.popupVisible(true);
        ko.utils.domNodeDisposal.addDisposeCallback(editorElement, function () {
            editor.dispose();
        });
        ko.applyBindings(editor, editorElement);
        editor.focus();
        return { controlsDescendantBindings: true };
    }
};


/***/ }),
/* 616 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var FlatItemProviderWrapper = (function () {
    function FlatItemProviderWrapper(itemsProvider) {
        this.itemsProvider = itemsProvider;
    }
    FlatItemProviderWrapper.prototype.getItems = function (path) {
        var _this = this;
        var def = $.Deferred();
        this.itemsProvider.getItems(path).done(function (items) {
            if (!path.fullPath) {
                def.resolve(items);
            }
            else {
                var leafs = items.filter(function (i) { return !i.isList; });
                var nodePromises = items
                    .filter(function (i) { return i.isList; })
                    .map(function (node) {
                    var newPath = {
                        dataSource: path.dataSource,
                        fullPath: path.fullPath + '.' + node.name,
                        path: path.path + '.' + node.name,
                        id: path.id,
                        pathParts: path.pathParts && path.pathParts.concat(node.name) || undefined,
                        ref: path.ref
                    };
                    return _this.itemsProvider.getItems(newPath);
                });
                if (nodePromises.length) {
                    $.when.apply($, nodePromises).done(function () {
                        var itemArray = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            itemArray[_i] = arguments[_i];
                        }
                        var itemFlatList = itemArray.reduce(function (acc, items) { return acc.concat(items); }, []);
                        def.resolve(leafs.concat(itemFlatList));
                    });
                }
                else {
                    def.resolve(leafs);
                }
            }
        });
        return def.promise();
    };
    return FlatItemProviderWrapper;
}());
exports.FlatItemProviderWrapper = FlatItemProviderWrapper;


/***/ }),
/* 617 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _utils_1 = __webpack_require__(3);
var _data_field_1 = __webpack_require__(14);
var _format_condition_average_1 = __webpack_require__(265);
var _format_condition_top_bottom_1 = __webpack_require__(184);
var _format_condition_value_1 = __webpack_require__(185);
var range_converter_1 = __webpack_require__(277);
var range_generator_1 = __webpack_require__(84);
var _dashboard_item_format_rule_1 = __webpack_require__(52);
var _appearance_settings_provider_1 = __webpack_require__(123);
var _style_settings_provider_1 = __webpack_require__(112);
var conditionTypes = [{
        propertyName: 'conditionValue',
        constraint: function (dataType) { return dataType !== 'Enum'; },
        specificTypes: Object
            .keys(_format_condition_value_1.conditionInCondition.values)
            .map(function (key) {
            return {
                value: key,
                displayText: _format_condition_value_1.conditionInCondition.values[key],
                constraint: ['Equal', 'NotEqual', 'ContainsText'].indexOf(key) !== -1 ? function () { return true; } : (function (dataType) { return dataType !== 'Text'; })
            };
        })
    }, {
        propertyName: 'conditionTopBottom',
        constraint: function (dataType) { return _data_field_1.IsNumeric(dataType); },
        specificTypes: Object
            .keys(_format_condition_top_bottom_1.topBottom.values)
            .map(function (key) { return { value: key, displayText: _format_condition_top_bottom_1.topBottom.values[key] }; })
    }, {
        propertyName: 'conditionAverage',
        displayText: 'DashboardStringId.CommandFormatRuleAboveBelowAverage',
        constraint: function (dataType) { return _data_field_1.IsNumeric(dataType); },
        specificTypes: Object
            .keys(_format_condition_average_1.averageType.values)
            .map(function (key) { return { value: key, displayText: _format_condition_average_1.averageType.values[key] }; })
    }, {
        propertyName: 'conditionDateOccuring',
        constraint: function (dataType) { return _data_field_1.IsDateTime(dataType); }
    }, {
        propertyName: 'conditionExpression',
        constraint: function (dataType) { return dataType !== 'Enum'; }
    }, {
        propertyName: 'conditionRangeSet',
        displayText: 'DashboardStringId.CommandFormatRuleRangeIcons',
        rangeStyleType: 'Icon',
        constraint: function (dataType) { return !_data_field_1.IsTextual(dataType); },
        subtype: 'icons',
        specificTypes: [{
                key: 'Ranges 2',
                items: [
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.Arrows2, displayText: 'Arrows 2' },
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.ArrowsGray2, displayText: 'Arrows Gray 2' },
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.Circles2, displayText: 'Circles 2' },
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.Symbols2, displayText: 'Symbols 2' },
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.SymbolsCircled2, displayText: 'Symbols Circled 2' }
                ]
            }, {
                key: 'Ranges 3',
                items: [
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.Arrows3, displayText: 'Arrows 3' },
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.ArrowsGray3, displayText: 'Arrows Gray 3' },
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.PositiveNegative3, displayText: 'Positive Negative 3' },
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.Circles3, displayText: 'Circles 3' },
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.TrafficLights3, displayText: 'Traffic Lights 3' },
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.Signs3, displayText: 'Signs 3' },
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.Symbols3, displayText: 'Symbols 3' },
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.SymbolsCircled3, displayText: 'Symbols Circled 3' },
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.Stars3, displayText: 'Stars 3' },
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.Flags3, displayText: 'Flags 3' }
                ]
            }, {
                key: 'Ranges 4',
                items: [
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.Arrows4, displayText: 'Arrows 4' },
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.ArrowsGray4, displayText: 'Arrows Gray 4' },
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.Circles4, displayText: 'Circles 4' },
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.CirclesRedToBlack4, displayText: 'Circles Red To Black 4' },
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.Bars4, displayText: 'Bars 4' }
                ]
            }, {
                key: 'Ranges 5',
                items: [
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.Arrows5, displayText: 'Arrows 5' },
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.ArrowsGray5, displayText: 'Arrows Gray 5' },
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.Quarters5, displayText: 'Quarters 5' },
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.Bars5, displayText: 'Bars 5' },
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.Boxes5, displayText: 'Boxes 5' }
                ]
            }]
    }, {
        propertyName: 'conditionRangeSet',
        rangeStyleType: 'Color',
        constraint: function (dataType) { return !_data_field_1.IsTextual(dataType); },
        subtype: 'colors',
        specificTypes: [{
                key: 'Ranges 2',
                items: [
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsPaleRedGreen, displayText: 'Pale Red Green' },
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsRedGreen, displayText: 'Red Green' }
                ]
            }, {
                key: 'Ranges 3',
                items: [
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsPaleRedGreenBlue, displayText: 'Pale Red Green Blue' },
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsRedGreenBlue, displayText: 'Red Green Blue' }
                ]
            }, {
                key: 'Ranges 4',
                items: [
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsPaleRedYellowGreenBlue, displayText: 'Pale Red Yellow Green Blue' },
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsRedYellowGreenBlue, displayText: 'Red Yellow Green Blue' }
                ]
            }, {
                key: 'Ranges 5',
                items: [
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsPaleRedOrangeYellowGreenBlue, displayText: 'Pale Red Orange Yellow Green Blue' },
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsRedOrangeYellowGreenBlue, displayText: 'Red Orange Yellow Green Blue' }
                ]
            }]
    }, {
        propertyName: 'conditionRangeGradient',
        rangeStyleType: 'Gradient',
        constraint: function (dataType) { return !_data_field_1.IsTextual(dataType); },
        specificTypes: [{
                key: '2 Color Gradient Ranges',
                items: [
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenWhite, displayText: 'Green White' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.WhiteGreen, displayText: 'White Green' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedWhite, displayText: 'Red White' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.WhiteRed, displayText: 'White Red' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenYellow, displayText: 'Green Yellow' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.YellowGreen, displayText: 'Yellow Green' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedYellow, displayText: 'Red Yellow' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.YellowRed, displayText: 'Yellow Red' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueWhite, displayText: 'Blue White' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.WhiteBlue, displayText: 'White Blue' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueRed, displayText: 'Blue Red' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedBlue, displayText: 'Red Blue' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.YellowBlue, displayText: 'Yellow Blue' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueYellow, displayText: 'Blue Yellow' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenBlue, displayText: 'Green Blue' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueGreen, displayText: 'Blue Green' }
                ]
            }, {
                key: '3 Color Gradient Ranges',
                items: [
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenWhiteBlue, displayText: 'Green White Blue' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueWhiteGreen, displayText: 'Blue White Green' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueWhiteRed, displayText: 'Blue White Red' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedWhiteBlue, displayText: 'Red White Blue' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenWhiteRed, displayText: 'Green White Red' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedWhiteGreen, displayText: 'Red White Green' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenYellowRed, displayText: 'Green Yellow Red' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedYellowGreen, displayText: 'Red Yellow Green' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueYellowRed, displayText: 'Blue Yellow Red' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedYellowBlue, displayText: 'Red Yellow Blue' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenYellowBlue, displayText: 'Green Yellow Blue' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueYellowGreen, displayText: 'Blue Yellow Green' }
                ]
            }]
    }, {
        propertyName: 'conditionBar',
        constraint: function (dataType) { return !_data_field_1.IsTextual(dataType); }
    }, {
        propertyName: 'conditionColorRangeBar',
        displayText: 'DashboardStringId.CommandFormatRuleColorRangeBar',
        rangeStyleType: 'ColorBar',
        constraint: function (dataType) { return !_data_field_1.IsTextual(dataType); },
        specificTypes: [{
                key: 'Ranges 2',
                items: [
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsPaleRedGreen, displayText: 'Pale Red Green' },
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsRedGreen, displayText: 'Red Green' }
                ]
            }, {
                key: 'Ranges 3',
                items: [
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsPaleRedGreenBlue, displayText: 'Pale Red Green Blue' },
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsRedGreenBlue, displayText: 'Red Green Blue' }
                ]
            }, {
                key: 'Ranges 4',
                items: [
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsPaleRedYellowGreenBlue, displayText: 'Pale Red Yellow Green Blue' },
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsRedYellowGreenBlue, displayText: 'Red Yellow Green Blue' }
                ]
            }, {
                key: 'Ranges 5',
                items: [
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsPaleRedOrangeYellowGreenBlue, displayText: 'Pale Red Orange Yellow Green Blue' },
                    { value: range_converter_1.FormatConditionRangeSetPredefinedType.ColorsRedOrangeYellowGreenBlue, displayText: 'Red Orange Yellow Green Blue' }
                ]
            }]
    }, {
        propertyName: 'conditionGradientRangeBar',
        displayText: 'DashboardStringId.CommandFormatRuleGradientRangeBar',
        rangeStyleType: 'GradientBar',
        constraint: function (dataType) { return !_data_field_1.IsTextual(dataType); },
        specificTypes: [{
                key: '2 Color Gradient Ranges',
                items: [
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenWhite, displayText: 'Green White' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.WhiteGreen, displayText: 'White Green' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedWhite, displayText: 'Red White' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.WhiteRed, displayText: 'White Red' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenYellow, displayText: 'Green Yellow' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.YellowGreen, displayText: 'Yellow Green' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedYellow, displayText: 'Red Yellow' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.YellowRed, displayText: 'Yellow Red' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueWhite, displayText: 'Blue White' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.WhiteBlue, displayText: 'White Blue' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueRed, displayText: 'Blue Red' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedBlue, displayText: 'Red Blue' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.YellowBlue, displayText: 'Yellow Blue' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueYellow, displayText: 'Blue Yellow' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenBlue, displayText: 'Green Blue' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueGreen, displayText: 'Blue Green' }
                ]
            }, {
                key: '3 Color Gradient Ranges',
                items: [
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenWhiteBlue, displayText: 'Green White Blue' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueWhiteGreen, displayText: 'Blue White Green' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueWhiteRed, displayText: 'Blue White Red' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedWhiteBlue, displayText: 'Red White Blue' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenWhiteRed, displayText: 'Green White Red' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedWhiteGreen, displayText: 'Red White Green' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenYellowRed, displayText: 'Green Yellow Red' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedYellowGreen, displayText: 'Red Yellow Green' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueYellowRed, displayText: 'Blue Yellow Red' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.RedYellowBlue, displayText: 'Red Yellow Blue' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.GreenYellowBlue, displayText: 'Green Yellow Blue' },
                    { value: range_converter_1.FormatConditionRangeGradientPredefinedType.BlueYellowGreen, displayText: 'Blue Yellow Green' }
                ]
            }]
    },
].map(function (typeDescr) {
    typeDescr['displayText'] = typeDescr['displayText'] || _dashboard_item_format_rule_1.conditionTypes.filter(function (t) { return t.propertyName === typeDescr.propertyName; })[0].displayName;
    return typeDescr;
});
var FormatConditionTypeEditorSurface = (function () {
    function FormatConditionTypeEditorSurface(options) {
        var _this = this;
        this.displayMode = ko.observable();
        this.ancestors = ko.observable([]);
        this.backClick = function () {
            _this.displayMode('conditionTypes');
        };
        this.updateItemAppearance = function (e) {
            var element = _utils_1.$unwrap(e.itemElement);
            e.itemData.hasSpecificTypes ? element.classList.add('dx-dashboard-has-children') : element.classList.remove('dx-dashboard-has-children');
        };
        this.dataType = options.dataType;
        this.conditionType = options.conditionType;
        this.specificType = options.specificType;
        this.displayMode.subscribe(function (mode) {
            if (mode === 'conditionTypes') {
                _this.ancestors(['…']);
            }
            else {
                _this.ancestors(['…', _this.availableConditionTypes().filter(function (t) { return t.value === _this.conditionType(); })[0].displayText]);
            }
        });
        this.availableConditionTypes = ko.computed(function () {
            if (!_this.dataType())
                return;
            var types = conditionTypes
                .filter(function (ct) { return !options.conditionTypeFilter || options.conditionTypeFilter(ct.propertyName); })
                .filter(function (ct) { return ct.constraint(_this.dataType()); })
                .map(function (ct) { return ({
                value: ct.propertyName + (ct.subtype ? '_' + ct.subtype : ''),
                displayText: ct.displayText,
                hasSpecificTypes: !!ct.specificTypes
            }); });
            return types;
        });
        this.availableConditionTypes.subscribe(function (types) {
            if (!types.filter(function (t) { return t.value === _this.conditionType.peek(); })[0]) {
                _this.conditionType(null);
            }
        });
        this.availableSpecificTypes = ko.computed(function () {
            var conditionType = _this.conditionType(), dataType = _this.dataType(), types = [];
            conditionType = conditionType;
            if (dataType && conditionType) {
                var conditionTypeDesciptor = conditionTypes.filter(function (ct) { return !!ct.subtype
                    ? ct.propertyName + '_' + ct.subtype === conditionType
                    : ct.propertyName === conditionType; })[0];
                if (conditionTypeDesciptor && conditionTypeDesciptor.specificTypes) {
                    types = conditionTypeDesciptor.specificTypes.filter(function (st) { return !st.constraint || st.constraint(dataType); });
                    types['rangeStyleType'] = conditionTypeDesciptor.rangeStyleType || 'None';
                }
                else {
                    types = [{ value: conditionType, displayText: '-' }];
                    types['rangeStyleType'] = 'None';
                }
            }
            if (types && (types.length > 1)) {
                _this.displayMode('specificTypes');
            }
            else {
                _this.displayMode('conditionTypes');
            }
            return types;
        });
        this.availableSpecificTypes.subscribe(function (types) {
            if (types.length === 1)
                _this.specificType(types[0].value);
        });
        this.selectedSpecificTypes = ko.computed(function () {
            if (_this.availableSpecificTypes()['rangeStyleType'] === 'None') {
                return _this.availableSpecificTypes() && _this.availableSpecificTypes().filter(function (value) { return value.value === _this.specificType(); }) || [];
            }
            else {
                var selection = null, key = null;
                _this.availableSpecificTypes().forEach(function (group) {
                    group.items.forEach(function (item) {
                        if (item.value === _this.specificType()) {
                            key = group.key;
                            selection = item;
                            return false;
                        }
                    });
                    if (selection)
                        return false;
                });
                return selection && [{ key: key, items: [selection] }] || [];
            }
        });
    }
    FormatConditionTypeEditorSurface.prototype.getStyleList = function (rangeStyleType) {
        var _this = this;
        var styleList = range_converter_1.FormatConditionConverter.getStyleList(rangeStyleType).list.reverse();
        return styleList.map(function (styleType) {
            if (_this.availableSpecificTypes()['rangeStyleType'] === 'Icon') {
                return _style_settings_provider_1.styleSettingsProvider.toIconCssClass(styleType);
            }
            else {
                return _appearance_settings_provider_1.appearanceSettingsProvider.toCss(styleType);
            }
        });
    };
    FormatConditionTypeEditorSurface.prototype.getGradientColorsList = function (type) {
        return range_generator_1.FormatConditionRangeGenerator.generateGradientColors(type, 6).reverse();
    };
    return FormatConditionTypeEditorSurface;
}());
exports.FormatConditionTypeEditorSurface = FormatConditionTypeEditorSurface;


/***/ }),
/* 618 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _utils_1 = __webpack_require__(3);
var color_1 = __webpack_require__(50);
var _range_info_1 = __webpack_require__(275);
var range_generator_1 = __webpack_require__(84);
var _format_rules_common_1 = __webpack_require__(54);
var appearance_settings_1 = __webpack_require__(67);
var bar_style_settings_1 = __webpack_require__(53);
var _style_settings_base_1 = __webpack_require__(72);
var _style_settings_container_1 = __webpack_require__(364);
var dataGridColumnTypes = {
    Text: 'string',
    DateTime: 'date',
    Bool: 'boolean',
    Integer: 'number',
    Float: 'number',
    Double: 'number',
    Decimal: 'number',
    Enum: 'string',
    Custom: 'object',
    Unknown: 'object'
};
var RuleRangesEditor = (function (_super) {
    __extends(RuleRangesEditor, _super);
    function RuleRangesEditor(condition) {
        var _this = _super.call(this, condition.isRange(), condition.isGradient(), false) || this;
        _this.selection = ko.observable(null);
        _this.value = ko.observableArray([]);
        _this.closeEditCell = function () {
            _this._closeEditCell && _this._closeEditCell();
        };
        _this._closeEditCell = null;
        _this.condition = condition;
        _this.dataType = _this.condition.dataType;
        _this.isPercent = ko.computed({
            read: function () { return _this.condition.valueType() !== 'Number'; },
            write: function (isPercent) {
                if (isPercent) {
                    _this.condition.setValues(range_generator_1.FormatConditionRangeGenerator.calculateRangePercentValues(_this.condition.rangeSet.ranges.peek().length));
                }
            }
        });
        _this._updateValue();
        _this.condition.rangeSet.ranges.subscribe(function () { return _this._updateValue(); }, null, 'arrayChange');
        return _this;
    }
    RuleRangesEditor.prototype.isLabel = function (type) {
        return _super.prototype.isLabel.call(this, type) && !this.isEmpty(type);
    };
    RuleRangesEditor.prototype.isRangeEmptyAllowed = function (range) {
        if (this.isGradient) {
            var ranges = this.value.peek();
            var index = ranges.indexOf(range);
            return (index != 0) && (index != ranges.length - 1);
        }
        else {
            return true;
        }
    };
    RuleRangesEditor.prototype.getLabelText = function (type) {
        return !this.isEmpty(type) ? _super.prototype.getLabelText.call(this, type) : '';
    };
    Object.defineProperty(RuleRangesEditor.prototype, "dataGridOptions", {
        get: function () {
            var _this = this;
            var valueType = dataGridColumnTypes[this.dataType()];
            return {
                dataSource: this.value,
                twoWayBindingEnabled: false,
                hoverStateEnabled: false,
                showRowLines: true,
                showColumnHeaders: false,
                rowAlternationEnabled: false,
                selection: undefined,
                paging: {
                    enabled: false
                },
                editing: {
                    mode: 'cell',
                    allowFiltering: false,
                    allowSorting: false,
                    allowUpdating: true
                },
                onInitialized: function (e) {
                    e.component.getController('editorFactory')._showRevertButton = function () { };
                    _this._closeEditCell = function () {
                        e.component.closeEditCell();
                        _this._updateValue();
                    };
                },
                onCellHoverChanged: function (e) {
                    var cellElement = _utils_1.$unwrap(e.cellElement);
                    if (e.eventType === 'mouseover') {
                        cellElement.classList.add('dx-dashboard-range-editor-state-hover');
                    }
                    else {
                        cellElement.classList.remove('dx-dashboard-range-editor-state-hover');
                    }
                },
                onRowPrepared: function (e) {
                    if (e.data === this.selection()) {
                        var selectedRow = _utils_1.$unwrap(e.element).querySelector('tr.dx-selection');
                        if (selectedRow) {
                            selectedRow.classList.remove('dx-selection');
                        }
                        _utils_1.$unwrap(e.rowElement).classList.add('dx-selection');
                    }
                },
                onEditingStart: function (e) {
                    if (e.data.leftValue &&
                        (e.data.leftValue() === '∞' && e.column.dataField === 'leftValue') ||
                        (e.data.rightValue() === '-∞' && e.column.dataField === 'rightValue')) {
                        e.cancel = true;
                    }
                },
                onCellPrepared: function (e) {
                    var cellElement = _utils_1.$unwrap(e.cellElement);
                    if (cellElement.classList.contains('dx-editor-cell')) {
                        this.selection(e.data);
                        var selectedRow = _utils_1.$unwrap(e.element).querySelector('tr.dx-selection');
                        if (selectedRow) {
                            selectedRow.classList.remove('dx-selection');
                        }
                        cellElement.parentElement.classList.add('dx-selection');
                    }
                },
                onRowValidating: function (e) {
                    if (!!e.newData.sign || e.brokenRules.length > 0)
                        return;
                    var dataGrid = e.component, value = e.newData.leftValue || e.newData.rightValue, rowIndex = dataGrid.getRowIndexByKey(e.key), bottomValue = undefined, upperValue = undefined;
                    if (!!e.newData.leftValue) {
                        bottomValue = dataGrid.getKeyByRowIndex(rowIndex).rightValue();
                        upperValue = rowIndex - 1 >= 0 ? dataGrid.getKeyByRowIndex(rowIndex - 1).leftValue() : undefined;
                    }
                    else if (!!e.newData.rightValue) {
                        var count = dataGrid.option('dataSource').length;
                        var minBottomValue = this.isPercent() && (rowIndex + 1 == count) ? 0 : undefined;
                        bottomValue = rowIndex + 1 < count ? dataGrid.getKeyByRowIndex(rowIndex + 1).rightValue() : minBottomValue;
                        upperValue = dataGrid.getKeyByRowIndex(rowIndex).leftValue();
                    }
                    if (value == undefined || (bottomValue !== undefined && value < bottomValue) || (upperValue !== undefined && value > upperValue)) {
                        e.isValid = false;
                        e.errorText = 'Invalid value: value should be between [' + bottomValue + ', ' + upperValue + ']';
                    }
                },
                columns: [{
                        dataField: 'style',
                        alignment: 'center',
                        width: 52,
                        cellTemplate: 'dx-dashboard-range-style-template',
                        lookup: {
                            dataSource: []
                        },
                        editCellTemplate: 'dx-dashboard-range-style-editor-template'
                    }, {
                        dataField: 'leftValue',
                        dataType: valueType,
                        width: 74,
                        alignment: 'center',
                        cellTemplate: 'dx-dashboard-range-cell-template',
                        cssClass: 'dx-dashboard-range-value',
                        validationRules: [{ type: 'required' }]
                    }, {
                        dataField: 'sign',
                        alignment: 'center',
                        cellTemplate: 'dx-dashboard-range-cell-template',
                        cssClass: 'dx-dashboard-range-sign',
                        showEditorAlways: false,
                        editorOptions: {
                            searchEnabled: false,
                            showDropDownButton: false
                        },
                        lookup: {
                            dataSource: [{
                                    name: _range_info_1.rangeValueComparison.values['GreaterOrEqual'],
                                    id: 'GreaterOrEqual'
                                }, {
                                    name: _range_info_1.rangeValueComparison.values['Greater'],
                                    id: 'Greater'
                                }],
                            displayExpr: 'name',
                            valueExpr: 'id'
                        }
                    }, {
                        dataField: 'rightValue',
                        dataType: valueType,
                        alignment: 'center',
                        width: 74,
                        cellTemplate: 'dx-dashboard-range-cell-template',
                        cssClass: 'dx-dashboard-range-value',
                        validationRules: [{ type: 'required' }]
                    }
                ]
            };
        },
        enumerable: true,
        configurable: true
    });
    RuleRangesEditor.prototype.add = function () {
        var index = !!this.selection() ? this.condition.rangeSet.ranges.indexOf(this.selection().rangeInfo) : this.condition.rangeSet.ranges().length - 1;
        var rangeInfo = this.condition.rangeSet.ranges()[index];
        this.condition.rangeSet.ranges.splice(index, 0, rangeInfo.clone());
    };
    RuleRangesEditor.prototype.remove = function () {
        if (!!this.selection() && this.condition.rangeSet.ranges().length > 2) {
            var rangeInfo = this.selection().rangeInfo;
            var index = this.condition.rangeSet.ranges.indexOf(rangeInfo);
            this.condition.rangeSet.ranges.splice(index, 1);
            this.selection(this.value()[this.value().indexOf(this.selection())]);
        }
    };
    RuleRangesEditor.prototype.getSelectedStyleChangedHandler = function (range) {
        var _this = this;
        return function (oldType, newType) {
            if (_this.isGradient && newType != oldType) {
                if (newType == _style_settings_base_1.emptyStyleType) {
                    range.rangeInfo.styleSettings(new appearance_settings_1.AppearanceSettings({}));
                }
                else if (oldType == _style_settings_base_1.emptyStyleType) {
                    range.rangeInfo.styleSettings(range.style());
                }
            }
        };
    };
    RuleRangesEditor.prototype._updateValue = function () {
        this.value(generateRanges(this.condition.rangeSet.ranges.peek(), this.isGradient, this.isPercent()));
    };
    return RuleRangesEditor;
}(_style_settings_container_1.StyleSettingsContainer));
exports.RuleRangesEditor = RuleRangesEditor;
var generateRanges = function (ranges, isGradient, isPercent) {
    var value = [];
    var prevIndex = -1, nextIndex = ranges.length;
    var getAppearanceType = function (s) {
        return s instanceof bar_style_settings_1.BarStyleSettings ? s.predefinedColor() : s.appearanceType();
    };
    var isStyleEmpty = function (s) {
        return !s || getAppearanceType(s) == _style_settings_base_1.emptyStyleType;
    };
    var generateStyleSettings = function (currentIndex) {
        var color = color_1.Color.fromAppearance(getAppearanceType(ranges[prevIndex].styleSettings())), nextColor = color_1.Color.fromAppearance(getAppearanceType(ranges[nextIndex].styleSettings()));
        var a = new appearance_settings_1.AppearanceSettings({});
        a.backColor(color_1.Color.fromDxColor(nextColor.blend(color, (currentIndex - nextIndex) / (prevIndex - nextIndex))));
        return ko.observable(a);
    };
    var getRangeValue = function (index) {
        var rangeInfo = ranges[index];
        var value = rangeInfo.value.value;
        return value() === _format_rules_common_1.negativeInfinity ? ko.observable('-∞') : value;
    };
    for (var i = ranges.length - 1; i >= 0; i--) {
        var styleSettings = ranges[i].styleSettings;
        if (isGradient) {
            if (isStyleEmpty(styleSettings())) {
                if (nextIndex > i) {
                    for (var j = i - 1; j >= 0; j--) {
                        if (!isStyleEmpty(ranges[j].styleSettings())) {
                            nextIndex = j;
                            break;
                        }
                    }
                }
                styleSettings = generateStyleSettings(i);
            }
            else {
                prevIndex = i;
            }
        }
        value.push({
            style: styleSettings,
            sign: ranges[i].valueComparison,
            leftValue: (i < ranges.length - 1) ? getRangeValue(i + 1) : (isPercent ? ko.observable(100) : ko.observable('∞')),
            rightValue: (i == 0 && isPercent && getRangeValue(i)() < 0) ? ko.observable(0) : getRangeValue(i),
            rangeInfo: ranges[i]
        });
    }
    return value;
};


/***/ }),
/* 619 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var _format_helper_1 = __webpack_require__(47);
var _knockout_utils_1 = __webpack_require__(17);
var _currencies_1 = __webpack_require__(620);
var CurrencyInfo = (function () {
    function CurrencyInfo(name, displayText, previewText) {
        if (previewText === void 0) { previewText = ''; }
        this.name = name;
        this.displayText = displayText;
        this.previewText = previewText;
    }
    return CurrencyInfo;
}());
exports.CurrencyInfo = CurrencyInfo;
var CultureInfo = (function () {
    function CultureInfo() {
    }
    return CultureInfo;
}());
exports.CultureInfo = CultureInfo;
var CurrencySelector = (function () {
    function CurrencySelector(currencyCultureName, disabled) {
        var _this = this;
        this.disabled = disabled;
        this._defaultCurrency = null;
        this._getDefaultCurrencyInfo = function () {
            if (!this._defaultCurrency) {
                this._defaultCurrency = new CurrencyInfo(null, _default_1.getLocalizationById('DashboardStringId.DashboardCurrencyUseCurrentCurrency'), '');
                this._defaultCurrency.cultures = [{
                        name: null,
                        displayText: _default_1.getLocalizationById('DashboardStringId.DashboardCurrencyUseCurrentCurrency')
                    }];
            }
            return this._defaultCurrency;
        };
        this.getPreviewText = function (value, currency) {
            if (currency) {
                var dashboardFormat = {
                    format: 'currency',
                    currency: currency
                };
                return _format_helper_1.formatHelper.format(value, dashboardFormat);
            }
            else {
                return null;
            }
        };
        this.selectedCurrency = ko.observable(this._getDefaultCurrencyInfo());
        this.selectedCulture = ko.observable(this._getDefaultCurrencyInfo().cultures[0]);
        this.previewPositive = ko.pureComputed(function () { return _this.getPreviewText(123, _this.selectedCurrency().name); });
        this.previewNegative = ko.pureComputed(function () { return _this.getPreviewText(-123, _this.selectedCurrency().name); });
        this.previewWarning = ko.pureComputed(function () { return _this.selectedCurrency().name ? null : _default_1.getLocalizationById('DashboardWebStringId.Currency.DefaultCurrencyWarning'); });
        this.currencies = ko.observableArray([this._getDefaultCurrencyInfo()].concat(_currencies_1.CURRENCIES.map(function (currency) {
            var currencyInfo = new CurrencyInfo(currency.name, currency.displayName, _this.getPreviewText(123, currency.name));
            currencyInfo.cultures = currency.cultures.map(function (culture) {
                var cultureInfo = new CultureInfo();
                cultureInfo.name = culture.name;
                cultureInfo.displayText = culture.displayName;
                if (cultureInfo.name === currencyCultureName()) {
                    _this.selectedCurrency(currencyInfo);
                    _this.selectedCulture(cultureInfo);
                }
                return cultureInfo;
            });
            return currencyInfo;
        }).sort(function (c1, c2) { return c1.displayText.localeCompare(c2.displayText); })));
        _knockout_utils_1.subscribeWithPrev(this.selectedCurrency, function (prevCurrencyInfo, currencyInfo) {
            if (currencyInfo && prevCurrencyInfo !== currencyInfo) {
                _this.selectedCulture(currencyInfo.cultures[0]);
            }
        });
        this.selectedCulture.subscribe(function (currencyCultureInfo) {
            if (currencyCultureInfo) {
                currencyCultureName(currencyCultureInfo.name);
            }
        });
    }
    return CurrencySelector;
}());
exports.CurrencySelector = CurrencySelector;
ko.components.register('dx-dashboard-currency-selector', {
    viewModel: {
        createViewModel: function (params, componentInfo) {
            return new CurrencySelector(params.currencyCultureName, ko.observable(false));
        }
    },
    template: { element: 'dx-dash-currency-selector' }
});


/***/ }),
/* 620 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CURRENCIES = [{
        name: 'DJF',
        displayName: 'DJF (Djiboutian Franc)',
        cultures: [{
                name: 'aa-DJ',
                displayName: 'Afar (Djibouti)'
            }, {
                name: 'ar-DJ',
                displayName: 'Arabic (Djibouti)'
            }, {
                name: 'fr-DJ',
                displayName: 'French (Djibouti)'
            }, {
                name: 'so-DJ',
                displayName: 'Somali (Djibouti)'
            }]
    }, {
        name: 'ERN',
        displayName: 'ERN (Eritrean Nakfa)',
        cultures: [{
                name: 'aa-ER',
                displayName: 'Afar (Eritrea)'
            }, {
                name: 'ar-ER',
                displayName: 'Arabic (Eritrea)'
            }, {
                name: 'byn-ER',
                displayName: 'Blin (Eritrea)'
            }, {
                name: 'en-ER',
                displayName: 'English (Eritrea)'
            }, {
                name: 'ssy-ER',
                displayName: 'Saho (Eritrea)'
            }, {
                name: 'ti-ER',
                displayName: 'Tigrinya (Eritrea)'
            }, {
                name: 'tig-ER',
                displayName: 'Tigre (Eritrea)'
            }]
    }, {
        name: 'ETB',
        displayName: 'ETB (Ethiopian Birr)',
        cultures: [{
                name: 'aa-ET',
                displayName: 'Afar (Ethiopia)'
            }, {
                name: 'am-ET',
                displayName: 'Amharic (Ethiopia)'
            }, {
                name: 'om-ET',
                displayName: 'Oromo (Ethiopia)'
            }, {
                name: 'so-ET',
                displayName: 'Somali (Ethiopia)'
            }, {
                name: 'ti-ET',
                displayName: 'Tigrinya (Ethiopia)'
            }, {
                name: 'wal-ET',
                displayName: 'Wolaytta (Ethiopia)'
            }]
    }, {
        name: 'NAD',
        displayName: 'NAD (Namibian Dollar)',
        cultures: [{
                name: 'af-NA',
                displayName: 'Afrikaans (Namibia)'
            }, {
                name: 'en-NA',
                displayName: 'English (Namibia)'
            }, {
                name: 'naq-NA',
                displayName: 'Nama (Namibia)'
            }]
    }, {
        name: 'ZAR',
        displayName: 'ZAR (South African Rand)',
        cultures: [{
                name: 'af-ZA',
                displayName: 'Afrikaans (South Africa)'
            }, {
                name: 'en-LS',
                displayName: 'English (Lesotho)'
            }, {
                name: 'en-ZA',
                displayName: 'English (South Africa)'
            }, {
                name: 'nr-ZA',
                displayName: 'South Ndebele (South Africa)'
            }, {
                name: 'nso-ZA',
                displayName: 'Sesotho sa Leboa (South Africa)'
            }, {
                name: 'ss-ZA',
                displayName: 'Swati (South Africa)'
            }, {
                name: 'st-LS',
                displayName: 'Sesotho (Lesotho)'
            }, {
                name: 'st-ZA',
                displayName: 'Southern Sotho (South Africa)'
            }, {
                name: 'tn-ZA',
                displayName: 'Setswana (South Africa)'
            }, {
                name: 'ts-ZA',
                displayName: 'Tsonga (South Africa)'
            }, {
                name: 've-ZA',
                displayName: 'Venda (South Africa)'
            }, {
                name: 'xh-ZA',
                displayName: 'isiXhosa (South Africa)'
            }, {
                name: 'zu-ZA',
                displayName: 'isiZulu (South Africa)'
            }]
    }, {
        name: 'XAF',
        displayName: 'XAF (Central African CFA Franc)',
        cultures: [{
                name: 'agq-CM',
                displayName: 'Aghem (Cameroon)'
            }, {
                name: 'ar-TD',
                displayName: 'Arabic (Chad)'
            }, {
                name: 'bas-CM',
                displayName: 'Basaa (Cameroon)'
            }, {
                name: 'dua-CM',
                displayName: 'Duala (Cameroon)'
            }, {
                name: 'en-CM',
                displayName: 'English (Cameroon)'
            }, {
                name: 'es-GQ',
                displayName: 'Spanish (Equatorial Guinea)'
            }, {
                name: 'ewo-CM',
                displayName: 'Ewondo (Cameroon)'
            }, {
                name: 'ff-CM',
                displayName: 'Fulah (Cameroon)'
            }, {
                name: 'fr-CF',
                displayName: 'French (Central African Republic)'
            }, {
                name: 'fr-CG',
                displayName: 'French (Congo)'
            }, {
                name: 'fr-CM',
                displayName: 'French (Cameroon)'
            }, {
                name: 'fr-GA',
                displayName: 'French (Gabon)'
            }, {
                name: 'fr-GQ',
                displayName: 'French (Equatorial Guinea)'
            }, {
                name: 'fr-TD',
                displayName: 'French (Chad)'
            }, {
                name: 'jgo-CM',
                displayName: 'Ngomba (Cameroon)'
            }, {
                name: 'kkj-CM',
                displayName: 'Kako (Cameroon)'
            }, {
                name: 'ksf-CM',
                displayName: 'Bafia (Cameroon)'
            }, {
                name: 'ln-CF',
                displayName: 'Lingala (Central African Republic)'
            }, {
                name: 'ln-CG',
                displayName: 'Lingala (Congo)'
            }, {
                name: 'mgo-CM',
                displayName: "Meta' (Cameroon)"
            }, {
                name: 'mua-CM',
                displayName: 'Mundang (Cameroon)'
            }, {
                name: 'nmg-CM',
                displayName: 'Kwasio (Cameroon)'
            }, {
                name: 'nnh-CM',
                displayName: 'Ngiemboon (Cameroon)'
            }, {
                name: 'pt-GQ',
                displayName: 'Portuguese (Equatorial Guinea)'
            }, {
                name: 'sg-CF',
                displayName: 'Sango (Central African Republic)'
            }, {
                name: 'yav-CM',
                displayName: 'Yangben (Cameroon)'
            }]
    }, {
        name: 'GHS',
        displayName: 'GHS (Ghanaian Cedi)',
        cultures: [{
                name: 'ak-GH',
                displayName: 'Akan (Ghana)'
            }, {
                name: 'ee-GH',
                displayName: 'Ewe (Ghana)'
            }, {
                name: 'en-GH',
                displayName: 'English (Ghana)'
            }, {
                name: 'ha-Latn-GH',
                displayName: 'Hausa (Latin, Ghana)'
            }]
    }, {
        name: 'XDR',
        displayName: 'XDR (Special Drawing Rights)',
        cultures: [{
                name: 'ar-001',
                displayName: 'Arabic (World)'
            }, {
                name: 'en-001',
                displayName: 'English (World)'
            }, {
                name: 'en-150',
                displayName: 'English (Europe)'
            }, {
                name: 'eo-001',
                displayName: 'Esperanto (World)'
            }, {
                name: 'es-419',
                displayName: 'Spanish (Latin America)'
            }, {
                name: 'ia-001',
                displayName: 'Interlingua (World)'
            }, {
                name: 'la-001',
                displayName: 'Latin (World)'
            }, {
                name: 'prg-001',
                displayName: 'Prussian (World)'
            }, {
                name: 'vo-001',
                displayName: 'Volapük (World)'
            }, {
                name: 'yi-001',
                displayName: 'Yiddish (World)'
            }]
    }, {
        name: 'AED',
        displayName: 'AED (United Arab Emirates Dirham)',
        cultures: [{
                name: 'ar-AE',
                displayName: 'Arabic (U.A.E.)'
            }]
    }, {
        name: 'BHD',
        displayName: 'BHD (Bahraini Dinar)',
        cultures: [{
                name: 'ar-BH',
                displayName: 'Arabic (Bahrain)'
            }]
    }, {
        name: 'DZD',
        displayName: 'DZD (Algerian Dinar)',
        cultures: [{
                name: 'ar-DZ',
                displayName: 'Arabic (Algeria)'
            }, {
                name: 'fr-DZ',
                displayName: 'French (Algeria)'
            }, {
                name: 'kab-DZ',
                displayName: 'Kabyle (Algeria)'
            }, {
                name: 'tzm-Latn-DZ',
                displayName: 'Tamazight (Latin, Algeria)'
            }]
    }, {
        name: 'EGP',
        displayName: 'EGP (Egyptian Pound)',
        cultures: [{
                name: 'ar-EG',
                displayName: 'Arabic (Egypt)'
            }]
    }, {
        name: 'ILS',
        displayName: 'ILS (Israeli New Shekel)',
        cultures: [{
                name: 'ar-IL',
                displayName: 'Arabic (Israel)'
            }, {
                name: 'ar-PS',
                displayName: 'Arabic (Palestinian Authority)'
            }, {
                name: 'en-IL',
                displayName: 'English (Israel)'
            }, {
                name: 'he-IL',
                displayName: 'Hebrew (Israel)'
            }]
    }, {
        name: 'IQD',
        displayName: 'IQD (Iraqi Dinar)',
        cultures: [{
                name: 'ar-IQ',
                displayName: 'Arabic (Iraq)'
            }, {
                name: 'ku-Arab-IQ',
                displayName: 'Central Kurdish (Iraq)'
            }, {
                name: 'lrc-IQ',
                displayName: 'Northern Luri (Iraq)'
            }]
    }, {
        name: 'JOD',
        displayName: 'JOD (Jordanian Dinar)',
        cultures: [{
                name: 'ar-JO',
                displayName: 'Arabic (Jordan)'
            }]
    }, {
        name: 'KMF',
        displayName: 'KMF (Comorian Franc)',
        cultures: [{
                name: 'ar-KM',
                displayName: 'Arabic (Comoros)'
            }, {
                name: 'fr-KM',
                displayName: 'French (Comoros)'
            }]
    }, {
        name: 'KWD',
        displayName: 'KWD (Kuwaiti Dinar)',
        cultures: [{
                name: 'ar-KW',
                displayName: 'Arabic (Kuwait)'
            }]
    }, {
        name: 'LBP',
        displayName: 'LBP (Lebanese Pound)',
        cultures: [{
                name: 'ar-LB',
                displayName: 'Arabic (Lebanon)'
            }]
    }, {
        name: 'LYD',
        displayName: 'LYD (Libyan Dinar)',
        cultures: [{
                name: 'ar-LY',
                displayName: 'Arabic (Libya)'
            }]
    }, {
        name: 'MAD',
        displayName: 'MAD (Moroccan Dirham)',
        cultures: [{
                name: 'ar-MA',
                displayName: 'Arabic (Morocco)'
            }, {
                name: 'fr-MA',
                displayName: 'French (Morocco)'
            }, {
                name: 'shi-Latn-MA',
                displayName: 'Tachelhit (Latin, Morocco)'
            }, {
                name: 'shi-Tfng-MA',
                displayName: 'Tachelhit (Tifinagh, Morocco)'
            }, {
                name: 'tzm-Arab-MA',
                displayName: 'Central Atlas Tamazight (Arabic, Morocco)'
            }, {
                name: 'tzm-Latn-MA',
                displayName: 'Central Atlas Tamazight (Latin, Morocco)'
            }, {
                name: 'tzm-Tfng-MA',
                displayName: 'Central Atlas Tamazight (Tifinagh, Morocco)'
            }, {
                name: 'zgh-Tfng-MA',
                displayName: 'Standard Moroccan Tamazight (Tifinagh, Morocco)'
            }]
    }, {
        name: 'MRO',
        displayName: 'MRO (Mauritanian Ouguiya)',
        cultures: [{
                name: 'ar-MR',
                displayName: 'Arabic (Mauritania)'
            }, {
                name: 'ff-MR',
                displayName: 'Fulah (Mauritania)'
            }, {
                name: 'fr-MR',
                displayName: 'French (Mauritania)'
            }]
    }, {
        name: 'OMR',
        displayName: 'OMR (Omani Rial)',
        cultures: [{
                name: 'ar-OM',
                displayName: 'Arabic (Oman)'
            }]
    }, {
        name: 'QAR',
        displayName: 'QAR (Qatari Rial)',
        cultures: [{
                name: 'ar-QA',
                displayName: 'Arabic (Qatar)'
            }]
    }, {
        name: 'SAR',
        displayName: 'SAR (Saudi Riyal)',
        cultures: [{
                name: 'ar-SA',
                displayName: 'Arabic (Saudi Arabia)'
            }]
    }, {
        name: 'SDG',
        displayName: 'SDG (Sudanese Pound)',
        cultures: [{
                name: 'ar-SD',
                displayName: 'Arabic (Sudan)'
            }, {
                name: 'en-SD',
                displayName: 'English (Sudan)'
            }]
    }, {
        name: 'SOS',
        displayName: 'SOS (Somali Shilling)',
        cultures: [{
                name: 'ar-SO',
                displayName: 'Arabic (Somalia)'
            }, {
                name: 'so-SO',
                displayName: 'Somali (Somalia)'
            }]
    }, {
        name: 'SSP',
        displayName: 'SSP (South Sudanese Pound)',
        cultures: [{
                name: 'ar-SS',
                displayName: 'Arabic (South Sudan)'
            }, {
                name: 'en-SS',
                displayName: 'English (South Sudan)'
            }, {
                name: 'nus-SS',
                displayName: 'Nuer (South Sudan)'
            }]
    }, {
        name: 'SYP',
        displayName: 'SYP (Syrian Pound)',
        cultures: [{
                name: 'ar-SY',
                displayName: 'Arabic (Syria)'
            }, {
                name: 'fr-SY',
                displayName: 'French (Syria)'
            }, {
                name: 'syr-SY',
                displayName: 'Syriac (Syria)'
            }]
    }, {
        name: 'TND',
        displayName: 'TND (Tunisian Dinar)',
        cultures: [{
                name: 'ar-TN',
                displayName: 'Arabic (Tunisia)'
            }, {
                name: 'fr-TN',
                displayName: 'French (Tunisia)'
            }]
    }, {
        name: 'YER',
        displayName: 'YER (Yemeni Rial)',
        cultures: [{
                name: 'ar-YE',
                displayName: 'Arabic (Yemen)'
            }]
    }, {
        name: 'CLP',
        displayName: 'CLP (Chilean Peso)',
        cultures: [{
                name: 'arn-CL',
                displayName: 'Mapudungun (Chile)'
            }, {
                name: 'es-CL',
                displayName: 'Spanish (Chile)'
            }]
    }, {
        name: 'INR',
        displayName: 'INR (Indian Rupee)',
        cultures: [{
                name: 'as-IN',
                displayName: 'Assamese (India)'
            }, {
                name: 'bn-IN',
                displayName: 'Bangla (India)'
            }, {
                name: 'bo-IN',
                displayName: 'Tibetan (India)'
            }, {
                name: 'brx-IN',
                displayName: 'Bodo (India)'
            }, {
                name: 'en-IN',
                displayName: 'English (India)'
            }, {
                name: 'gu-IN',
                displayName: 'Gujarati (India)'
            }, {
                name: 'hi-IN',
                displayName: 'Hindi (India)'
            }, {
                name: 'kn-IN',
                displayName: 'Kannada (India)'
            }, {
                name: 'kok-IN',
                displayName: 'Konkani (India)'
            }, {
                name: 'ks-Arab-IN',
                displayName: 'Kashmiri (Perso-Arabic)'
            }, {
                name: 'ks-Deva-IN',
                displayName: 'Kashmiri (Devanagari, India)'
            }, {
                name: 'ml-IN',
                displayName: 'Malayalam (India)'
            }, {
                name: 'mni-IN',
                displayName: 'Manipuri (India)'
            }, {
                name: 'mr-IN',
                displayName: 'Marathi (India)'
            }, {
                name: 'ne-IN',
                displayName: 'Nepali (India)'
            }, {
                name: 'or-IN',
                displayName: 'Odia (India)'
            }, {
                name: 'pa-IN',
                displayName: 'Punjabi (India)'
            }, {
                name: 'sa-IN',
                displayName: 'Sanskrit (India)'
            }, {
                name: 'sd-Deva-IN',
                displayName: 'Sindhi (Devanagari, India)'
            }, {
                name: 'ta-IN',
                displayName: 'Tamil (India)'
            }, {
                name: 'te-IN',
                displayName: 'Telugu (India)'
            }, {
                name: 'ur-IN',
                displayName: 'Urdu (India)'
            }]
    }, {
        name: 'TZS',
        displayName: 'TZS (Tanzanian Shilling)',
        cultures: [{
                name: 'asa-TZ',
                displayName: 'Asu (Tanzania)'
            }, {
                name: 'bez-TZ',
                displayName: 'Bena (Tanzania)'
            }, {
                name: 'en-TZ',
                displayName: 'English (Tanzania)'
            }, {
                name: 'jmc-TZ',
                displayName: 'Machame (Tanzania)'
            }, {
                name: 'kde-TZ',
                displayName: 'Makonde (Tanzania)'
            }, {
                name: 'ksb-TZ',
                displayName: 'Shambala (Tanzania)'
            }, {
                name: 'lag-TZ',
                displayName: 'Langi (Tanzania)'
            }, {
                name: 'mas-TZ',
                displayName: 'Masai (Tanzania)'
            }, {
                name: 'rof-TZ',
                displayName: 'Rombo (Tanzania)'
            }, {
                name: 'rwk-TZ',
                displayName: 'Rwa (Tanzania)'
            }, {
                name: 'sbp-TZ',
                displayName: 'Sangu (Tanzania)'
            }, {
                name: 'sw-TZ',
                displayName: 'Kiswahili (Tanzania)'
            }, {
                name: 'vun-TZ',
                displayName: 'Vunjo (Tanzania)'
            }]
    }, {
        name: 'EUR',
        displayName: 'EUR (Euro)',
        cultures: [{
                name: 'ast-ES',
                displayName: 'Asturian (Spain)'
            }, {
                name: 'br-FR',
                displayName: 'Breton (France)'
            }, {
                name: 'ca-AD',
                displayName: 'Catalan (Andorra)'
            }, {
                name: 'ca-ES',
                displayName: 'Catalan (Catalan)'
            }, {
                name: 'ca-ES-valencia',
                displayName: 'Valencian (Spain)'
            }, {
                name: 'ca-FR',
                displayName: 'Catalan (France)'
            }, {
                name: 'ca-IT',
                displayName: 'Catalan (Italy)'
            }, {
                name: 'co-FR',
                displayName: 'Corsican (France)'
            }, {
                name: 'de-AT',
                displayName: 'German (Austria)'
            }, {
                name: 'de-BE',
                displayName: 'German (Belgium)'
            }, {
                name: 'de-DE',
                displayName: 'German (Germany)'
            }, {
                name: 'de-IT',
                displayName: 'German (Italy)'
            }, {
                name: 'de-LU',
                displayName: 'German (Luxembourg)'
            }, {
                name: 'dsb-DE',
                displayName: 'Lower Sorbian (Germany)'
            }, {
                name: 'el-CY',
                displayName: 'Greek (Cyprus)'
            }, {
                name: 'el-GR',
                displayName: 'Greek (Greece)'
            }, {
                name: 'en-AT',
                displayName: 'English (Austria)'
            }, {
                name: 'en-BE',
                displayName: 'English (Belgium)'
            }, {
                name: 'en-CY',
                displayName: 'English (Cyprus)'
            }, {
                name: 'en-DE',
                displayName: 'English (Germany)'
            }, {
                name: 'en-FI',
                displayName: 'English (Finland)'
            }, {
                name: 'en-IE',
                displayName: 'English (Ireland)'
            }, {
                name: 'en-MT',
                displayName: 'English (Malta)'
            }, {
                name: 'en-NL',
                displayName: 'English (Netherlands)'
            }, {
                name: 'en-SI',
                displayName: 'English (Slovenia)'
            }, {
                name: 'es-ES',
                displayName: 'Spanish (Spain)'
            }, {
                name: 'et-EE',
                displayName: 'Estonian (Estonia)'
            }, {
                name: 'eu-ES',
                displayName: 'Basque (Basque)'
            }, {
                name: 'fi-FI',
                displayName: 'Finnish (Finland)'
            }, {
                name: 'fr-BE',
                displayName: 'French (Belgium)'
            }, {
                name: 'fr-BL',
                displayName: 'French (Saint Barthélemy)'
            }, {
                name: 'fr-FR',
                displayName: 'French (France)'
            }, {
                name: 'fr-GF',
                displayName: 'French (French Guiana)'
            }, {
                name: 'fr-GP',
                displayName: 'French (Guadeloupe)'
            }, {
                name: 'fr-LU',
                displayName: 'French (Luxembourg)'
            }, {
                name: 'fr-MC',
                displayName: 'French (Monaco)'
            }, {
                name: 'fr-MF',
                displayName: 'French (Saint Martin)'
            }, {
                name: 'fr-MQ',
                displayName: 'French (Martinique)'
            }, {
                name: 'fr-PM',
                displayName: 'French (Saint Pierre and Miquelon)'
            }, {
                name: 'fr-RE',
                displayName: 'French (Reunion)'
            }, {
                name: 'fr-YT',
                displayName: 'French (Mayotte)'
            }, {
                name: 'fur-IT',
                displayName: 'Friulian (Italy)'
            }, {
                name: 'fy-NL',
                displayName: 'Frisian (Netherlands)'
            }, {
                name: 'ga-IE',
                displayName: 'Irish (Ireland)'
            }, {
                name: 'gl-ES',
                displayName: 'Galician (Galician)'
            }, {
                name: 'gsw-FR',
                displayName: 'Alsatian (France)'
            }, {
                name: 'hsb-DE',
                displayName: 'Upper Sorbian (Germany)'
            }, {
                name: 'ia-FR',
                displayName: 'Interlingua (France)'
            }, {
                name: 'it-IT',
                displayName: 'Italian (Italy)'
            }, {
                name: 'it-SM',
                displayName: 'Italian (San Marino)'
            }, {
                name: 'it-VA',
                displayName: 'Italian (Vatican City)'
            }, {
                name: 'ksh-DE',
                displayName: 'Ripuarian (Germany)'
            }, {
                name: 'lb-LU',
                displayName: 'Luxembourgish (Luxembourg)'
            }, {
                name: 'lt-LT',
                displayName: 'Lithuanian (Lithuania)'
            }, {
                name: 'lv-LV',
                displayName: 'Latvian (Latvia)'
            }, {
                name: 'mt-MT',
                displayName: 'Maltese (Malta)'
            }, {
                name: 'nds-DE',
                displayName: 'Low German (Germany)'
            }, {
                name: 'nds-NL',
                displayName: 'Low German (Netherlands)'
            }, {
                name: 'nl-BE',
                displayName: 'Dutch (Belgium)'
            }, {
                name: 'nl-NL',
                displayName: 'Dutch (Netherlands)'
            }, {
                name: 'oc-FR',
                displayName: 'Occitan (France)'
            }, {
                name: 'pt-LU',
                displayName: 'Portuguese (Luxembourg)'
            }, {
                name: 'pt-PT',
                displayName: 'Portuguese (Portugal)'
            }, {
                name: 'se-FI',
                displayName: 'Sami, Northern (Finland)'
            }, {
                name: 'sk-SK',
                displayName: 'Slovak (Slovakia)'
            }, {
                name: 'sl-SI',
                displayName: 'Slovenian (Slovenia)'
            }, {
                name: 'smn-FI',
                displayName: 'Sami, Inari (Finland)'
            }, {
                name: 'sms-FI',
                displayName: 'Sami, Skolt (Finland)'
            }, {
                name: 'sq-XK',
                displayName: 'Albanian (Kosovo)'
            }, {
                name: 'sr-Cyrl-ME',
                displayName: 'Serbian (Cyrillic, Montenegro)'
            }, {
                name: 'sr-Cyrl-XK',
                displayName: 'Serbian (Cyrillic, Kosovo)'
            }, {
                name: 'sr-Latn-ME',
                displayName: 'Serbian (Latin, Montenegro)'
            }, {
                name: 'sr-Latn-XK',
                displayName: 'Serbian (Latin, Kosovo)'
            }, {
                name: 'sv-AX',
                displayName: 'Swedish (Åland Islands)'
            }, {
                name: 'sv-FI',
                displayName: 'Swedish (Finland)'
            }, {
                name: 'tr-CY',
                displayName: 'Turkish (Cyprus)'
            }]
    }, {
        name: 'AZN',
        displayName: 'AZN (Azerbaijani Manat)',
        cultures: [{
                name: 'az-Cyrl-AZ',
                displayName: 'Azerbaijani (Cyrillic, Azerbaijan)'
            }, {
                name: 'az-Latn-AZ',
                displayName: 'Azerbaijani (Latin, Azerbaijan)'
            }]
    }, {
        name: 'RUB',
        displayName: 'RUB (Russian Ruble)',
        cultures: [{
                name: 'ba-RU',
                displayName: 'Bashkir (Russia)'
            }, {
                name: 'ce-RU',
                displayName: 'Chechen (Russia)'
            }, {
                name: 'cu-RU',
                displayName: 'Church Slavic (Russia)'
            }, {
                name: 'os-RU',
                displayName: 'Ossetian (Cyrillic, Russia)'
            }, {
                name: 'ru-RU',
                displayName: 'Russian (Russia)'
            }, {
                name: 'sah-RU',
                displayName: 'Sakha (Russia)'
            }, {
                name: 'tt-RU',
                displayName: 'Tatar (Russia)'
            }]
    }, {
        name: 'BYN',
        displayName: 'BYN (Belarusian Ruble)',
        cultures: [{
                name: 'be-BY',
                displayName: 'Belarusian (Belarus)'
            }, {
                name: 'ru-BY',
                displayName: 'Russian (Belarus)'
            }]
    }, {
        name: 'ZMW',
        displayName: 'ZMW (Zambian Kwacha)',
        cultures: [{
                name: 'bem-ZM',
                displayName: 'Bemba (Zambia)'
            }, {
                name: 'en-ZM',
                displayName: 'English (Zambia)'
            }]
    }, {
        name: 'BGN',
        displayName: 'BGN (Bulgarian Lev)',
        cultures: [{
                name: 'bg-BG',
                displayName: 'Bulgarian (Bulgaria)'
            }]
    }, {
        name: 'NGN',
        displayName: 'NGN (Nigerian Naira)',
        cultures: [{
                name: 'bin-NG',
                displayName: 'Edo (Nigeria)'
            }, {
                name: 'en-NG',
                displayName: 'English (Nigeria)'
            }, {
                name: 'ff-NG',
                displayName: 'Fulah (Nigeria)'
            }, {
                name: 'ha-Latn-NG',
                displayName: 'Hausa (Latin, Nigeria)'
            }, {
                name: 'ibb-NG',
                displayName: 'Ibibio (Nigeria)'
            }, {
                name: 'ig-NG',
                displayName: 'Igbo (Nigeria)'
            }, {
                name: 'kr-NG',
                displayName: 'Kanuri (Nigeria)'
            }, {
                name: 'yo-NG',
                displayName: 'Yoruba (Nigeria)'
            }]
    }, {
        name: 'XOF',
        displayName: 'XOF (West African CFA Franc)',
        cultures: [{
                name: 'bm-Latn-ML',
                displayName: 'Bambara (Latin, Mali)'
            }, {
                name: 'dje-NE',
                displayName: 'Zarma (Niger)'
            }, {
                name: 'dyo-SN',
                displayName: 'Jola-Fonyi (Senegal)'
            }, {
                name: 'ee-TG',
                displayName: 'Ewe (Togo)'
            }, {
                name: 'ff-Latn-SN',
                displayName: 'Fulah (Latin, Senegal)'
            }, {
                name: 'fr-BF',
                displayName: 'French (Burkina Faso)'
            }, {
                name: 'fr-BJ',
                displayName: 'French (Benin)'
            }, {
                name: 'fr-CI',
                displayName: 'French (Côte d’Ivoire)'
            }, {
                name: 'fr-ML',
                displayName: 'French (Mali)'
            }, {
                name: 'fr-NE',
                displayName: 'French (Niger)'
            }, {
                name: 'fr-SN',
                displayName: 'French (Senegal)'
            }, {
                name: 'fr-TG',
                displayName: 'French (Togo)'
            }, {
                name: 'ha-Latn-NE',
                displayName: 'Hausa (Latin, Niger)'
            }, {
                name: 'khq-ML',
                displayName: 'Koyra Chiini (Mali)'
            }, {
                name: 'pt-GW',
                displayName: 'Portuguese (Guinea-Bissau)'
            }, {
                name: 'ses-ML',
                displayName: 'Koyraboro Senni (Mali)'
            }, {
                name: 'twq-NE',
                displayName: 'Tasawaq (Niger)'
            }, {
                name: 'wo-SN',
                displayName: 'Wolof (Senegal)'
            }, {
                name: 'yo-BJ',
                displayName: 'Yoruba (Benin)'
            }]
    }, {
        name: 'BDT',
        displayName: 'BDT (Bangladeshi Taka)',
        cultures: [{
                name: 'bn-BD',
                displayName: 'Bangla (Bangladesh)'
            }]
    }, {
        name: 'CNY',
        displayName: 'CNY (Chinese Yuan)',
        cultures: [{
                name: 'bo-CN',
                displayName: 'Tibetan (PRC)'
            }, {
                name: 'ii-CN',
                displayName: 'Yi (PRC)'
            }, {
                name: 'mn-Mong-CN',
                displayName: 'Mongolian (Traditional Mongolian, PRC)'
            }, {
                name: 'ug-CN',
                displayName: 'Uyghur (PRC)'
            }, {
                name: 'zh-CN',
                displayName: 'Chinese (Simplified, PRC)'
            }]
    }, {
        name: 'BAM',
        displayName: 'BAM (Bosnia-Herzegovina Convertible Mark)',
        cultures: [{
                name: 'bs-Cyrl-BA',
                displayName: 'Bosnian (Cyrillic, Bosnia and Herzegovina)'
            }, {
                name: 'bs-Latn-BA',
                displayName: 'Bosnian (Latin, Bosnia and Herzegovina)'
            }, {
                name: 'hr-BA',
                displayName: 'Croatian (Latin, Bosnia and Herzegovina)'
            }, {
                name: 'sr-Cyrl-BA',
                displayName: 'Serbian (Cyrillic, Bosnia and Herzegovina)'
            }, {
                name: 'sr-Latn-BA',
                displayName: 'Serbian (Latin, Bosnia and Herzegovina)'
            }]
    }, {
        name: 'UGX',
        displayName: 'UGX (Ugandan Shilling)',
        cultures: [{
                name: 'cgg-UG',
                displayName: 'Chiga (Uganda)'
            }, {
                name: 'en-UG',
                displayName: 'English (Uganda)'
            }, {
                name: 'lg-UG',
                displayName: 'Ganda (Uganda)'
            }, {
                name: 'nyn-UG',
                displayName: 'Nyankole (Uganda)'
            }, {
                name: 'sw-UG',
                displayName: 'Kiswahili (Uganda)'
            }, {
                name: 'teo-UG',
                displayName: 'Teso (Uganda)'
            }, {
                name: 'xog-UG',
                displayName: 'Soga (Uganda)'
            }]
    }, {
        name: 'USD',
        displayName: 'USD (US Dollar)',
        cultures: [{
                name: 'chr-Cher-US',
                displayName: 'Cherokee (Cherokee)'
            }, {
                name: 'en-AS',
                displayName: 'English (American Samoa)'
            }, {
                name: 'en-FM',
                displayName: 'English (Micronesia)'
            }, {
                name: 'en-GU',
                displayName: 'English (Guam)'
            }, {
                name: 'en-IO',
                displayName: 'English (British Indian Ocean Territory)'
            }, {
                name: 'en-MH',
                displayName: 'English (Marshall Islands)'
            }, {
                name: 'en-MP',
                displayName: 'English (Northern Mariana Islands)'
            }, {
                name: 'en-PR',
                displayName: 'English (Puerto Rico)'
            }, {
                name: 'en-PW',
                displayName: 'English (Palau)'
            }, {
                name: 'en-TC',
                displayName: 'English (Turks and Caicos Islands)'
            }, {
                name: 'en-UM',
                displayName: 'English (US Minor Outlying Islands)'
            }, {
                name: 'en-US',
                displayName: 'English (United States)'
            }, {
                name: 'en-VG',
                displayName: 'English (British Virgin Islands)'
            }, {
                name: 'en-VI',
                displayName: 'English (US Virgin Islands)'
            }, {
                name: 'en-ZW',
                displayName: 'English (Zimbabwe)'
            }, {
                name: 'es-EC',
                displayName: 'Spanish (Ecuador)'
            }, {
                name: 'es-PR',
                displayName: 'Spanish (Puerto Rico)'
            }, {
                name: 'es-SV',
                displayName: 'Spanish (El Salvador)'
            }, {
                name: 'es-US',
                displayName: 'Spanish (United States)'
            }, {
                name: 'haw-US',
                displayName: 'Hawaiian (United States)'
            }, {
                name: 'lkt-US',
                displayName: 'Lakota (United States)'
            }, {
                name: 'nd-ZW',
                displayName: 'North Ndebele (Zimbabwe)'
            }, {
                name: 'nl-BQ',
                displayName: 'Dutch (Bonaire, Sint Eustatius and Saba)'
            }, {
                name: 'pap-029',
                displayName: 'Papiamento (Caribbean)'
            }, {
                name: 'pt-TL',
                displayName: 'Portuguese (Timor-Leste)'
            }, {
                name: 'quz-EC',
                displayName: 'Quechua (Ecuador)'
            }, {
                name: 'sn-Latn-ZW',
                displayName: 'Shona (Latin, Zimbabwe)'
            }]
    }, {
        name: 'CZK',
        displayName: 'CZK (Czech Koruna)',
        cultures: [{
                name: 'cs-CZ',
                displayName: 'Czech (Czech Republic)'
            }]
    }, {
        name: 'GBP',
        displayName: 'GBP (British Pound)',
        cultures: [{
                name: 'cy-GB',
                displayName: 'Welsh (United Kingdom)'
            }, {
                name: 'en-GB',
                displayName: 'English (United Kingdom)'
            }, {
                name: 'en-GG',
                displayName: 'English (Guernsey)'
            }, {
                name: 'en-IM',
                displayName: 'English (Isle of Man)'
            }, {
                name: 'en-JE',
                displayName: 'English (Jersey)'
            }, {
                name: 'gd-GB',
                displayName: 'Scottish Gaelic (United Kingdom)'
            }, {
                name: 'gv-IM',
                displayName: 'Manx (Isle of Man)'
            }, {
                name: 'kw-GB',
                displayName: 'Cornish (United Kingdom)'
            }]
    }, {
        name: 'DKK',
        displayName: 'DKK (Danish Krone)',
        cultures: [{
                name: 'da-DK',
                displayName: 'Danish (Denmark)'
            }, {
                name: 'da-GL',
                displayName: 'Danish (Greenland)'
            }, {
                name: 'en-DK',
                displayName: 'English (Denmark)'
            }, {
                name: 'fo-DK',
                displayName: 'Faroese (Denmark)'
            }, {
                name: 'fo-FO',
                displayName: 'Faroese (Faroe Islands)'
            }, {
                name: 'kl-GL',
                displayName: 'Greenlandic (Greenland)'
            }]
    }, {
        name: 'KES',
        displayName: 'KES (Kenyan Shilling)',
        cultures: [{
                name: 'dav-KE',
                displayName: 'Taita (Kenya)'
            }, {
                name: 'ebu-KE',
                displayName: 'Embu (Kenya)'
            }, {
                name: 'en-KE',
                displayName: 'English (Kenya)'
            }, {
                name: 'guz-KE',
                displayName: 'Gusii (Kenya)'
            }, {
                name: 'kam-KE',
                displayName: 'Kamba (Kenya)'
            }, {
                name: 'ki-KE',
                displayName: 'Kikuyu (Kenya)'
            }, {
                name: 'kln-KE',
                displayName: 'Kalenjin (Kenya)'
            }, {
                name: 'luo-KE',
                displayName: 'Luo (Kenya)'
            }, {
                name: 'luy-KE',
                displayName: 'Luyia (Kenya)'
            }, {
                name: 'mas-KE',
                displayName: 'Masai (Kenya)'
            }, {
                name: 'mer-KE',
                displayName: 'Meru (Kenya)'
            }, {
                name: 'om-KE',
                displayName: 'Oromo (Kenya)'
            }, {
                name: 'saq-KE',
                displayName: 'Samburu (Kenya)'
            }, {
                name: 'so-KE',
                displayName: 'Somali (Kenya)'
            }, {
                name: 'sw-KE',
                displayName: 'Kiswahili (Kenya)'
            }, {
                name: 'teo-KE',
                displayName: 'Teso (Kenya)'
            }]
    }, {
        name: 'CHF',
        displayName: 'CHF (Swiss Franc)',
        cultures: [{
                name: 'de-CH',
                displayName: 'German (Switzerland)'
            }, {
                name: 'de-LI',
                displayName: 'German (Liechtenstein)'
            }, {
                name: 'en-CH',
                displayName: 'English (Switzerland)'
            }, {
                name: 'fr-CH',
                displayName: 'French (Switzerland)'
            }, {
                name: 'gsw-CH',
                displayName: 'Alsatian (Switzerland)'
            }, {
                name: 'gsw-LI',
                displayName: 'Alsatian (Liechtenstein)'
            }, {
                name: 'it-CH',
                displayName: 'Italian (Switzerland)'
            }, {
                name: 'pt-CH',
                displayName: 'Portuguese (Switzerland)'
            }, {
                name: 'rm-CH',
                displayName: 'Romansh (Switzerland)'
            }, {
                name: 'wae-CH',
                displayName: 'Walser (Switzerland)'
            }]
    }, {
        name: 'MVR',
        displayName: 'MVR (Maldivian Rufiyaa)',
        cultures: [{
                name: 'dv-MV',
                displayName: 'Divehi (Maldives)'
            }]
    }, {
        name: 'BTN',
        displayName: 'BTN (Bhutanese Ngultrum)',
        cultures: [{
                name: 'dz-BT',
                displayName: 'Dzongkha (Bhutan)'
            }]
    }, {
        name: 'XCD',
        displayName: 'XCD (Eastern Caribbean Dollar)',
        cultures: [{
                name: 'en-029',
                displayName: 'English (Caribbean)'
            }, {
                name: 'fr-029',
                displayName: 'French (Caribbean)'
            }]
    }, {
        name: 'XCD',
        displayName: 'XCD (East Caribbean Dollar)',
        cultures: [{
                name: 'en-AG',
                displayName: 'English (Antigua and Barbuda)'
            }, {
                name: 'en-AI',
                displayName: 'English (Anguilla)'
            }, {
                name: 'en-DM',
                displayName: 'English (Dominica)'
            }, {
                name: 'en-GD',
                displayName: 'English (Grenada)'
            }, {
                name: 'en-KN',
                displayName: 'English (Saint Kitts and Nevis)'
            }, {
                name: 'en-LC',
                displayName: 'English (Saint Lucia)'
            }, {
                name: 'en-MS',
                displayName: 'English (Montserrat)'
            }, {
                name: 'en-VC',
                displayName: 'English (Saint Vincent and the Grenadines)'
            }]
    }, {
        name: 'AUD',
        displayName: 'AUD (Australian Dollar)',
        cultures: [{
                name: 'en-AU',
                displayName: 'English (Australia)'
            }, {
                name: 'en-CC',
                displayName: 'English (Cocos [Keeling] Islands)'
            }, {
                name: 'en-CX',
                displayName: 'English (Christmas Island)'
            }, {
                name: 'en-KI',
                displayName: 'English (Kiribati)'
            }, {
                name: 'en-NF',
                displayName: 'English (Norfolk Island)'
            }, {
                name: 'en-NR',
                displayName: 'English (Nauru)'
            }, {
                name: 'en-TV',
                displayName: 'English (Tuvalu)'
            }]
    }, {
        name: 'BBD',
        displayName: 'BBD (Barbadian Dollar)',
        cultures: [{
                name: 'en-BB',
                displayName: 'English (Barbados)'
            }]
    }, {
        name: 'BIF',
        displayName: 'BIF (Burundian Franc)',
        cultures: [{
                name: 'en-BI',
                displayName: 'English (Burundi)'
            }, {
                name: 'fr-BI',
                displayName: 'French (Burundi)'
            }, {
                name: 'rn-BI',
                displayName: 'Rundi (Burundi)'
            }]
    }, {
        name: 'BMD',
        displayName: 'BMD (Bermudan Dollar)',
        cultures: [{
                name: 'en-BM',
                displayName: 'English (Bermuda)'
            }]
    }, {
        name: 'BSD',
        displayName: 'BSD (Bahamian Dollar)',
        cultures: [{
                name: 'en-BS',
                displayName: 'English (Bahamas)'
            }]
    }, {
        name: 'BWP',
        displayName: 'BWP (Botswanan Pula)',
        cultures: [{
                name: 'en-BW',
                displayName: 'English (Botswana)'
            }, {
                name: 'tn-BW',
                displayName: 'Setswana (Botswana)'
            }]
    }, {
        name: 'BZD',
        displayName: 'BZD (Belize Dollar)',
        cultures: [{
                name: 'en-BZ',
                displayName: 'English (Belize)'
            }, {
                name: 'es-BZ',
                displayName: 'Spanish (Belize)'
            }]
    }, {
        name: 'CAD',
        displayName: 'CAD (Canadian Dollar)',
        cultures: [{
                name: 'en-CA',
                displayName: 'English (Canada)'
            }, {
                name: 'fr-CA',
                displayName: 'French (Canada)'
            }, {
                name: 'iu-Cans-CA',
                displayName: 'Inuktitut (Syllabics, Canada)'
            }, {
                name: 'iu-Latn-CA',
                displayName: 'Inuktitut (Latin, Canada)'
            }, {
                name: 'moh-CA',
                displayName: 'Mohawk (Mohawk)'
            }]
    }, {
        name: 'NZD',
        displayName: 'NZD (New Zealand Dollar)',
        cultures: [{
                name: 'en-CK',
                displayName: 'English (Cook Islands)'
            }, {
                name: 'en-NU',
                displayName: 'English (Niue)'
            }, {
                name: 'en-NZ',
                displayName: 'English (New Zealand)'
            }, {
                name: 'en-PN',
                displayName: 'English (Pitcairn Islands)'
            }, {
                name: 'en-TK',
                displayName: 'English (Tokelau)'
            }, {
                name: 'mi-NZ',
                displayName: 'Maori (New Zealand)'
            }]
    }, {
        name: 'FJD',
        displayName: 'FJD (Fijian Dollar)',
        cultures: [{
                name: 'en-FJ',
                displayName: 'English (Fiji)'
            }]
    }, {
        name: 'FKP',
        displayName: 'FKP (Falkland Islands Pound)',
        cultures: [{
                name: 'en-FK',
                displayName: 'English (Falkland Islands)'
            }]
    }, {
        name: 'GIP',
        displayName: 'GIP (Gibraltar Pound)',
        cultures: [{
                name: 'en-GI',
                displayName: 'English (Gibraltar)'
            }]
    }, {
        name: 'GMD',
        displayName: 'GMD (Gambian Dalasi)',
        cultures: [{
                name: 'en-GM',
                displayName: 'English (Gambia)'
            }]
    }, {
        name: 'GYD',
        displayName: 'GYD (Guyanaese Dollar)',
        cultures: [{
                name: 'en-GY',
                displayName: 'English (Guyana)'
            }]
    }, {
        name: 'HKD',
        displayName: 'HKD (Hong Kong Dollar)',
        cultures: [{
                name: 'en-HK',
                displayName: 'English (Hong Kong SAR)'
            }, {
                name: 'zh-Hans-HK',
                displayName: 'Chinese (Simplified Han, Hong Kong SAR)'
            }, {
                name: 'zh-HK',
                displayName: 'Chinese (Traditional, Hong Kong S.A.R.)'
            }]
    }, {
        name: 'IDR',
        displayName: 'IDR (Indonesian Rupiah)',
        cultures: [{
                name: 'en-ID',
                displayName: 'English (Indonesia)'
            }, {
                name: 'id-ID',
                displayName: 'Indonesian (Indonesia)'
            }, {
                name: 'jv-Java-ID',
                displayName: 'Javanese (Javanese, Indonesia)'
            }, {
                name: 'jv-Latn-ID',
                displayName: 'Javanese (Indonesia)'
            }]
    }, {
        name: 'JMD',
        displayName: 'JMD (Jamaican Dollar)',
        cultures: [{
                name: 'en-JM',
                displayName: 'English (Jamaica)'
            }]
    }, {
        name: 'KYD',
        displayName: 'KYD (Cayman Islands Dollar)',
        cultures: [{
                name: 'en-KY',
                displayName: 'English (Cayman Islands)'
            }]
    }, {
        name: 'LRD',
        displayName: 'LRD (Liberian Dollar)',
        cultures: [{
                name: 'en-LR',
                displayName: 'English (Liberia)'
            }, {
                name: 'vai-Latn-LR',
                displayName: 'Vai (Latin, Liberia)'
            }, {
                name: 'vai-Vaii-LR',
                displayName: 'Vai (Vai, Liberia)'
            }]
    }, {
        name: 'MGA',
        displayName: 'MGA (Malagasy Ariary)',
        cultures: [{
                name: 'en-MG',
                displayName: 'English (Madagascar)'
            }, {
                name: 'fr-MG',
                displayName: 'French (Madagascar)'
            }, {
                name: 'mg-MG',
                displayName: 'Malagasy (Madagascar)'
            }]
    }, {
        name: 'MOP',
        displayName: 'MOP (Macanese Pataca)',
        cultures: [{
                name: 'en-MO',
                displayName: 'English (Macao SAR)'
            }, {
                name: 'pt-MO',
                displayName: 'Portuguese (Macao SAR)'
            }, {
                name: 'zh-Hans-MO',
                displayName: 'Chinese (Simplified Han, Macao SAR)'
            }, {
                name: 'zh-MO',
                displayName: 'Chinese (Traditional, Macao S.A.R.)'
            }]
    }, {
        name: 'MUR',
        displayName: 'MUR (Mauritian Rupee)',
        cultures: [{
                name: 'en-MU',
                displayName: 'English (Mauritius)'
            }, {
                name: 'fr-MU',
                displayName: 'French (Mauritius)'
            }, {
                name: 'mfe-MU',
                displayName: 'Morisyen (Mauritius)'
            }]
    }, {
        name: 'MWK',
        displayName: 'MWK (Malawian Kwacha)',
        cultures: [{
                name: 'en-MW',
                displayName: 'English (Malawi)'
            }]
    }, {
        name: 'MYR',
        displayName: 'MYR (Malaysian Ringgit)',
        cultures: [{
                name: 'en-MY',
                displayName: 'English (Malaysia)'
            }, {
                name: 'ms-MY',
                displayName: 'Malay (Malaysia)'
            }, {
                name: 'ta-MY',
                displayName: 'Tamil (Malaysia)'
            }]
    }, {
        name: 'PGK',
        displayName: 'PGK (Papua New Guinean Kina)',
        cultures: [{
                name: 'en-PG',
                displayName: 'English (Papua New Guinea)'
            }]
    }, {
        name: 'PHP',
        displayName: 'PHP (Philippine Peso)',
        cultures: [{
                name: 'en-PH',
                displayName: 'English (Republic of the Philippines)'
            }, {
                name: 'es-PH',
                displayName: 'Spanish (Philippines)'
            }, {
                name: 'fil-PH',
                displayName: 'Filipino (Philippines)'
            }]
    }, {
        name: 'PKR',
        displayName: 'PKR (Pakistani Rupee)',
        cultures: [{
                name: 'en-PK',
                displayName: 'English (Pakistan)'
            }, {
                name: 'pa-Arab-PK',
                displayName: 'Punjabi (Islamic Republic of Pakistan)'
            }, {
                name: 'sd-Arab-PK',
                displayName: 'Sindhi (Islamic Republic of Pakistan)'
            }, {
                name: 'ur-PK',
                displayName: 'Urdu (Islamic Republic of Pakistan)'
            }]
    }, {
        name: 'RWF',
        displayName: 'RWF (Rwandan Franc)',
        cultures: [{
                name: 'en-RW',
                displayName: 'English (Rwanda)'
            }, {
                name: 'fr-RW',
                displayName: 'French (Rwanda)'
            }, {
                name: 'rw-RW',
                displayName: 'Kinyarwanda (Rwanda)'
            }]
    }, {
        name: 'SBD',
        displayName: 'SBD (Solomon Islands Dollar)',
        cultures: [{
                name: 'en-SB',
                displayName: 'English (Solomon Islands)'
            }]
    }, {
        name: 'SCR',
        displayName: 'SCR (Seychellois Rupee)',
        cultures: [{
                name: 'en-SC',
                displayName: 'English (Seychelles)'
            }, {
                name: 'fr-SC',
                displayName: 'French (Seychelles)'
            }]
    }, {
        name: 'SEK',
        displayName: 'SEK (Swedish Krona)',
        cultures: [{
                name: 'en-SE',
                displayName: 'English (Sweden)'
            }, {
                name: 'se-SE',
                displayName: 'Sami, Northern (Sweden)'
            }, {
                name: 'sma-SE',
                displayName: 'Sami, Southern (Sweden)'
            }, {
                name: 'smj-SE',
                displayName: 'Sami, Lule (Sweden)'
            }, {
                name: 'sv-SE',
                displayName: 'Swedish (Sweden)'
            }]
    }, {
        name: 'SGD',
        displayName: 'SGD (Singapore Dollar)',
        cultures: [{
                name: 'en-SG',
                displayName: 'English (Singapore)'
            }, {
                name: 'ms-SG',
                displayName: 'Malay (Latin, Singapore)'
            }, {
                name: 'ta-SG',
                displayName: 'Tamil (Singapore)'
            }, {
                name: 'zh-SG',
                displayName: 'Chinese (Simplified, Singapore)'
            }]
    }, {
        name: 'SHP',
        displayName: 'SHP (Saint Helena Pound)',
        cultures: [{
                name: 'en-SH',
                displayName: 'English (St Helena, Ascension, Tristan da Cunha)'
            }]
    }, {
        name: 'SLL',
        displayName: 'SLL (Sierra Leonean Leone)',
        cultures: [{
                name: 'en-SL',
                displayName: 'English (Sierra Leone)'
            }]
    }, {
        name: 'ANG',
        displayName: 'ANG (Netherlands Antillean Guilder)',
        cultures: [{
                name: 'en-SX',
                displayName: 'English (Sint Maarten)'
            }, {
                name: 'nl-CW',
                displayName: 'Dutch (Curaçao)'
            }, {
                name: 'nl-SX',
                displayName: 'Dutch (Sint Maarten)'
            }]
    }, {
        name: 'SZL',
        displayName: 'SZL (Swazi Lilangeni)',
        cultures: [{
                name: 'en-SZ',
                displayName: 'English (Swaziland)'
            }, {
                name: 'ss-SZ',
                displayName: 'Swati (Swaziland)'
            }]
    }, {
        name: 'TOP',
        displayName: 'TOP (Tongan Paʻanga)',
        cultures: [{
                name: 'en-TO',
                displayName: 'English (Tonga)'
            }, {
                name: 'to-TO',
                displayName: 'Tongan (Tonga)'
            }]
    }, {
        name: 'TTD',
        displayName: 'TTD (Trinidad and Tobago Dollar)',
        cultures: [{
                name: 'en-TT',
                displayName: 'English (Trinidad and Tobago)'
            }]
    }, {
        name: 'VUV',
        displayName: 'VUV (Vanuatu Vatu)',
        cultures: [{
                name: 'en-VU',
                displayName: 'English (Vanuatu)'
            }, {
                name: 'fr-VU',
                displayName: 'French (Vanuatu)'
            }]
    }, {
        name: 'WST',
        displayName: 'WST (Samoan Tala)',
        cultures: [{
                name: 'en-WS',
                displayName: 'English (Samoa)'
            }]
    }, {
        name: 'ARS',
        displayName: 'ARS (Argentine Peso)',
        cultures: [{
                name: 'es-AR',
                displayName: 'Spanish (Argentina)'
            }]
    }, {
        name: 'BOB',
        displayName: 'BOB (Bolivian Boliviano)',
        cultures: [{
                name: 'es-BO',
                displayName: 'Spanish (Bolivia)'
            }, {
                name: 'quz-BO',
                displayName: 'Quechua (Bolivia)'
            }]
    }, {
        name: 'BRL',
        displayName: 'BRL (Brazilian Real)',
        cultures: [{
                name: 'es-BR',
                displayName: 'Spanish (Brazil)'
            }, {
                name: 'pt-BR',
                displayName: 'Portuguese (Brazil)'
            }]
    }, {
        name: 'COP',
        displayName: 'COP (Colombian Peso)',
        cultures: [{
                name: 'es-CO',
                displayName: 'Spanish (Colombia)'
            }]
    }, {
        name: 'CRC',
        displayName: 'CRC (Costa Rican Colón)',
        cultures: [{
                name: 'es-CR',
                displayName: 'Spanish (Costa Rica)'
            }]
    }, {
        name: 'CUP',
        displayName: 'CUP (Cuban Peso)',
        cultures: [{
                name: 'es-CU',
                displayName: 'Spanish (Cuba)'
            }]
    }, {
        name: 'DOP',
        displayName: 'DOP (Dominican Peso)',
        cultures: [{
                name: 'es-DO',
                displayName: 'Spanish (Dominican Republic)'
            }]
    }, {
        name: 'GTQ',
        displayName: 'GTQ (Guatemalan Quetzal)',
        cultures: [{
                name: 'es-GT',
                displayName: 'Spanish (Guatemala)'
            }, {
                name: 'quc-Latn-GT',
                displayName: "K'iche' (Guatemala)"
            }]
    }, {
        name: 'HNL',
        displayName: 'HNL (Honduran Lempira)',
        cultures: [{
                name: 'es-HN',
                displayName: 'Spanish (Honduras)'
            }]
    }, {
        name: 'MXN',
        displayName: 'MXN (Mexican Peso)',
        cultures: [{
                name: 'es-MX',
                displayName: 'Spanish (Mexico)'
            }]
    }, {
        name: 'NIO',
        displayName: 'NIO (Nicaraguan Córdoba)',
        cultures: [{
                name: 'es-NI',
                displayName: 'Spanish (Nicaragua)'
            }]
    }, {
        name: 'PAB',
        displayName: 'PAB (Panamanian Balboa)',
        cultures: [{
                name: 'es-PA',
                displayName: 'Spanish (Panama)'
            }]
    }, {
        name: 'PEN',
        displayName: 'PEN (Peruvian Sol)',
        cultures: [{
                name: 'es-PE',
                displayName: 'Spanish (Peru)'
            }, {
                name: 'quz-PE',
                displayName: 'Quechua (Peru)'
            }]
    }, {
        name: 'PYG',
        displayName: 'PYG (Paraguayan Guarani)',
        cultures: [{
                name: 'es-PY',
                displayName: 'Spanish (Paraguay)'
            }, {
                name: 'gn-PY',
                displayName: 'Guarani (Paraguay)'
            }]
    }, {
        name: 'UYU',
        displayName: 'UYU (Uruguayan Peso)',
        cultures: [{
                name: 'es-UY',
                displayName: 'Spanish (Uruguay)'
            }]
    }, {
        name: 'VEF',
        displayName: 'VEF (Venezuelan Bolívar)',
        cultures: [{
                name: 'es-VE',
                displayName: 'Spanish (Bolivarian Republic of Venezuela)'
            }]
    }, {
        name: 'IRR',
        displayName: 'IRR (Iranian Rial)',
        cultures: [{
                name: 'fa-IR',
                displayName: 'Persian (Iran)'
            }, {
                name: 'ku-Arab-IR',
                displayName: 'Kurdish (Perso-Arabic, Iran)'
            }, {
                name: 'lrc-IR',
                displayName: 'Northern Luri (Iran)'
            }, {
                name: 'mzn-IR',
                displayName: 'Mazanderani (Iran)'
            }]
    }, {
        name: 'GNF',
        displayName: 'GNF (Guinean Franc)',
        cultures: [{
                name: 'ff-GN',
                displayName: 'Fulah (Guinea)'
            }, {
                name: 'fr-GN',
                displayName: 'French (Guinea)'
            }, {
                name: 'nqo-GN',
                displayName: "N'ko (Guinea)"
            }]
    }, {
        name: 'CDF',
        displayName: 'CDF (Congolese Franc)',
        cultures: [{
                name: 'fr-CD',
                displayName: 'French (Congo DRC)'
            }, {
                name: 'ln-CD',
                displayName: 'Lingala (Congo DRC)'
            }, {
                name: 'lu-CD',
                displayName: 'Luba-Katanga (Congo DRC)'
            }, {
                name: 'sw-CD',
                displayName: 'Kiswahili (Congo DRC)'
            }]
    }, {
        name: 'HTG',
        displayName: 'HTG (Haitian Gourde)',
        cultures: [{
                name: 'fr-HT',
                displayName: 'French (Haiti)'
            }]
    }, {
        name: 'XPF',
        displayName: 'XPF (CFP Franc)',
        cultures: [{
                name: 'fr-NC',
                displayName: 'French (New Caledonia)'
            }, {
                name: 'fr-PF',
                displayName: 'French (French Polynesia)'
            }, {
                name: 'fr-WF',
                displayName: 'French (Wallis and Futuna)'
            }]
    }, {
        name: 'HRK',
        displayName: 'HRK (Croatian Kuna)',
        cultures: [{
                name: 'hr-HR',
                displayName: 'Croatian (Croatia)'
            }]
    }, {
        name: 'HUF',
        displayName: 'HUF (Hungarian Forint)',
        cultures: [{
                name: 'hu-HU',
                displayName: 'Hungarian (Hungary)'
            }]
    }, {
        name: 'AMD',
        displayName: 'AMD (Armenian Dram)',
        cultures: [{
                name: 'hy-AM',
                displayName: 'Armenian (Armenia)'
            }]
    }, {
        name: 'ISK',
        displayName: 'ISK (Icelandic Króna)',
        cultures: [{
                name: 'is-IS',
                displayName: 'Icelandic (Iceland)'
            }]
    }, {
        name: 'JPY',
        displayName: 'JPY (Japanese Yen)',
        cultures: [{
                name: 'ja-JP',
                displayName: 'Japanese (Japan)'
            }]
    }, {
        name: 'GEL',
        displayName: 'GEL (Georgian Lari)',
        cultures: [{
                name: 'ka-GE',
                displayName: 'Georgian (Georgia)'
            }, {
                name: 'os-GE',
                displayName: 'Ossetian (Cyrillic, Georgia)'
            }]
    }, {
        name: 'CVE',
        displayName: 'CVE (Cape Verdean Escudo)',
        cultures: [{
                name: 'kea-CV',
                displayName: 'Kabuverdianu (Cabo Verde)'
            }, {
                name: 'pt-CV',
                displayName: 'Portuguese (Cabo Verde)'
            }]
    }, {
        name: 'KZT',
        displayName: 'KZT (Kazakhstani Tenge)',
        cultures: [{
                name: 'kk-KZ',
                displayName: 'Kazakh (Kazakhstan)'
            }, {
                name: 'ru-KZ',
                displayName: 'Russian (Kazakhstan)'
            }]
    }, {
        name: 'KHR',
        displayName: 'KHR (Cambodian Riel)',
        cultures: [{
                name: 'km-KH',
                displayName: 'Khmer (Cambodia)'
            }]
    }, {
        name: 'KPW',
        displayName: 'KPW (North Korean Won)',
        cultures: [{
                name: 'ko-KP',
                displayName: 'Korean (North Korea)'
            }]
    }, {
        name: 'KRW',
        displayName: 'KRW (South Korean Won)',
        cultures: [{
                name: 'ko-KR',
                displayName: 'Korean (Korea)'
            }]
    }, {
        name: 'KGS',
        displayName: 'KGS (Kyrgystani Som)',
        cultures: [{
                name: 'ky-KG',
                displayName: 'Kyrgyz (Kyrgyzstan)'
            }, {
                name: 'ru-KG',
                displayName: 'Russian (Kyrgyzstan)'
            }]
    }, {
        name: 'AOA',
        displayName: 'AOA (Angolan Kwanza)',
        cultures: [{
                name: 'ln-AO',
                displayName: 'Lingala (Angola)'
            }, {
                name: 'pt-AO',
                displayName: 'Portuguese (Angola)'
            }]
    }, {
        name: 'LAK',
        displayName: 'LAK (Laotian Kip)',
        cultures: [{
                name: 'lo-LA',
                displayName: 'Lao (Lao P.D.R.)'
            }]
    }, {
        name: 'MZN',
        displayName: 'MZN (Mozambican Metical)',
        cultures: [{
                name: 'mgh-MZ',
                displayName: 'Makhuwa-Meetto (Mozambique)'
            }, {
                name: 'pt-MZ',
                displayName: 'Portuguese (Mozambique)'
            }, {
                name: 'seh-MZ',
                displayName: 'Sena (Mozambique)'
            }]
    }, {
        name: 'MKD',
        displayName: 'MKD (Macedonian Denar)',
        cultures: [{
                name: 'mk-MK',
                displayName: 'Macedonian (Former Yugoslav Republic of Macedonia)'
            }, {
                name: 'sq-MK',
                displayName: 'Albanian (Macedonia, FYRO)'
            }]
    }, {
        name: 'MNT',
        displayName: 'MNT (Mongolian Tugrik)',
        cultures: [{
                name: 'mn-MN',
                displayName: 'Mongolian (Cyrillic, Mongolia)'
            }, {
                name: 'mn-Mong-MN',
                displayName: 'Mongolian (Traditional Mongolian, Mongolia)'
            }]
    }, {
        name: 'BND',
        displayName: 'BND (Brunei Dollar)',
        cultures: [{
                name: 'ms-BN',
                displayName: 'Malay (Brunei Darussalam)'
            }]
    }, {
        name: 'MMK',
        displayName: 'MMK (Myanmar Kyat)',
        cultures: [{
                name: 'my-MM',
                displayName: 'Burmese (Myanmar)'
            }]
    }, {
        name: 'NOK',
        displayName: 'NOK (Norwegian Krone)',
        cultures: [{
                name: 'nb-NO',
                displayName: 'Norwegian, Bokmål (Norway)'
            }, {
                name: 'nb-SJ',
                displayName: 'Norwegian, Bokmål (Svalbard and Jan Mayen)'
            }, {
                name: 'nn-NO',
                displayName: 'Norwegian, Nynorsk (Norway)'
            }, {
                name: 'se-NO',
                displayName: 'Sami, Northern (Norway)'
            }, {
                name: 'sma-NO',
                displayName: 'Sami, Southern (Norway)'
            }, {
                name: 'smj-NO',
                displayName: 'Sami, Lule (Norway)'
            }]
    }, {
        name: 'NPR',
        displayName: 'NPR (Nepalese Rupee)',
        cultures: [{
                name: 'ne-NP',
                displayName: 'Nepali (Nepal)'
            }]
    }, {
        name: 'AWG',
        displayName: 'AWG (Aruban Florin)',
        cultures: [{
                name: 'nl-AW',
                displayName: 'Dutch (Aruba)'
            }]
    }, {
        name: 'SRD',
        displayName: 'SRD (Surinamese Dollar)',
        cultures: [{
                name: 'nl-SR',
                displayName: 'Dutch (Suriname)'
            }]
    }, {
        name: 'PLN',
        displayName: 'PLN (Polish Zloty)',
        cultures: [{
                name: 'pl-PL',
                displayName: 'Polish (Poland)'
            }]
    }, {
        name: 'AFN',
        displayName: 'AFN (Afghan Afghani)',
        cultures: [{
                name: 'prs-AF',
                displayName: 'Dari (Afghanistan)'
            }, {
                name: 'ps-AF',
                displayName: 'Pashto (Afghanistan)'
            }, {
                name: 'uz-Arab-AF',
                displayName: 'Uzbek (Perso-Arabic, Afghanistan)'
            }]
    }, {
        name: 'STD',
        displayName: 'STD (São Tomé and Príncipe Dobra)',
        cultures: [{
                name: 'pt-ST',
                displayName: 'Portuguese (São Tomé and Príncipe)'
            }]
    }, {
        name: 'MDL',
        displayName: 'MDL (Moldovan Leu)',
        cultures: [{
                name: 'ro-MD',
                displayName: 'Romanian (Moldova)'
            }, {
                name: 'ru-MD',
                displayName: 'Russian (Moldova)'
            }]
    }, {
        name: 'RON',
        displayName: 'RON (Romanian Leu)',
        cultures: [{
                name: 'ro-RO',
                displayName: 'Romanian (Romania)'
            }]
    }, {
        name: 'UAH',
        displayName: 'UAH (Ukrainian Hryvnia)',
        cultures: [{
                name: 'ru-UA',
                displayName: 'Russian (Ukraine)'
            }, {
                name: 'uk-UA',
                displayName: 'Ukrainian (Ukraine)'
            }]
    }, {
        name: 'LKR',
        displayName: 'LKR (Sri Lankan Rupee)',
        cultures: [{
                name: 'si-LK',
                displayName: 'Sinhala (Sri Lanka)'
            }, {
                name: 'ta-LK',
                displayName: 'Tamil (Sri Lanka)'
            }]
    }, {
        name: 'ALL',
        displayName: 'ALL (Albanian Lek)',
        cultures: [{
                name: 'sq-AL',
                displayName: 'Albanian (Albania)'
            }]
    }, {
        name: 'RSD',
        displayName: 'RSD (Serbian Dinar)',
        cultures: [{
                name: 'sr-Cyrl-RS',
                displayName: 'Serbian (Cyrillic, Serbia)'
            }, {
                name: 'sr-Latn-RS',
                displayName: 'Serbian (Latin, Serbia)'
            }]
    }, {
        name: 'TJS',
        displayName: 'TJS (Tajikistani Somoni)',
        cultures: [{
                name: 'tg-Cyrl-TJ',
                displayName: 'Tajik (Cyrillic, Tajikistan)'
            }]
    }, {
        name: 'THB',
        displayName: 'THB (Thai Baht)',
        cultures: [{
                name: 'th-TH',
                displayName: 'Thai (Thailand)'
            }]
    }, {
        name: 'TMT',
        displayName: 'TMT (Turkmenistani Manat)',
        cultures: [{
                name: 'tk-TM',
                displayName: 'Turkmen (Turkmenistan)'
            }]
    }, {
        name: 'TRY',
        displayName: 'TRY (Turkish Lira)',
        cultures: [{
                name: 'tr-TR',
                displayName: 'Turkish (Turkey)'
            }]
    }, {
        name: 'UZS',
        displayName: 'UZS (Uzbekistani Som)',
        cultures: [{
                name: 'uz-Cyrl-UZ',
                displayName: 'Uzbek (Cyrillic, Uzbekistan)'
            }, {
                name: 'uz-Latn-UZ',
                displayName: 'Uzbek (Latin, Uzbekistan)'
            }]
    }, {
        name: 'VND',
        displayName: 'VND (Vietnamese Dong)',
        cultures: [{
                name: 'vi-VN',
                displayName: 'Vietnamese (Vietnam)'
            }]
    }, {
        name: 'TWD',
        displayName: 'TWD (New Taiwan Dollar)',
        cultures: [{
                name: 'zh-TW',
                displayName: 'Chinese (Traditional, Taiwan)'
            }]
    }];


/***/ }),
/* 621 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var FilterExpressionEditorViewModel = (function () {
    function FilterExpressionEditorViewModel(params) {
        var _this = this;
        this.criteriaString = ko.observable();
        this.editor = new dx_analytics_core_1.default.Analytics.Widgets.FilterEditor(params.options, params.fieldListProvider, false, params.displayNameProvider);
        ko.computed(function () {
            var displayExpressionConverter = new dx_analytics_core_1.default.Analytics.Internal.DisplayExpressionConverter(params.displayNameProvider);
            displayExpressionConverter.toDisplayExpression(params.options().path(), params.options().value()).done(function (result) {
                _this.criteriaString(result);
            }).fail(function () {
                _this.criteriaString(params.options().value());
            });
        });
    }
    FilterExpressionEditorViewModel.prototype.show = function () {
        this.editor.popupVisible(true);
    };
    return FilterExpressionEditorViewModel;
}());
exports.FilterExpressionEditorViewModel = FilterExpressionEditorViewModel;


/***/ }),
/* 622 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var button_group_1 = __webpack_require__(554);
var ko = __webpack_require__(0);
var FormItemTemplates = (function () {
    function FormItemTemplates() {
    }
    FormItemTemplates.buttonGroup = function (args) {
        var div = document.createElement('div');
        var options = __assign({ width: '100%', onSelectionChanged: function (e) { return args.component.updateData(args.dataField, e.component.option('selectedItemKeys')[0]); }, selectedItemKeys: [ko.unwrap(args.component.option('formData')[args.dataField])] }, args.editorOptions);
        new button_group_1.default(div, options);
        return div;
    };
    return FormItemTemplates;
}());
exports.FormItemTemplates = FormItemTemplates;


/***/ }),
/* 623 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var _collection_editor_viewmodel_base_1 = __webpack_require__(115);
var EditableListEditorViewModel = (function (_super) {
    __extends(EditableListEditorViewModel, _super);
    function EditableListEditorViewModel(params, selectedItem) {
        var _this = _super.call(this, params) || this;
        _this.edit = function () { return _this.editItemHandler && _this.editItemHandler(_this.selectedValue); };
        _this.dataField = params.propertyName;
        _this.dataSource = params.dataSource;
        _this.getDisplayText = params.getDisplayText;
        _this.enableEditItem = params.enableEditItem;
        _this.editItemHandler = params.editItemHandler;
        _this.selectedItem = selectedItem;
        _this.onSelectionChanged = params.onSelectionChanged;
        _this.isToolbarVisible = true;
        _this.allowEditItem = true;
        return _this;
    }
    EditableListEditorViewModel.prototype.getListOptions = function () {
        this._innerSelection = ko.unwrap(this.selectedItem);
        return __assign({}, _super.prototype.getListOptions.call(this), { dataSource: this.dataSource, selectedItems: [this._innerSelection] });
    };
    EditableListEditorViewModel.prototype._getDisplayText = function (itemData) {
        return this.getDisplayText ? this.getDisplayText(itemData) : _default_1.getLocalizationById(ko.unwrap(itemData[this.dataField]));
    };
    EditableListEditorViewModel.prototype._listSelectionChanged = function () {
        this.selectedItem && this.selectedItem(this.selectedValue);
        this.onSelectionChanged && this.onSelectionChanged(this.selectedValue);
    };
    EditableListEditorViewModel.prototype._updateActionsState = function () {
        var selection = this.selectedValue;
        this.editEnabled(!!this.enableEditItem ? this.enableEditItem(selection) : !!selection);
    };
    return EditableListEditorViewModel;
}(_collection_editor_viewmodel_base_1.CollectionEditorViewModelBase));
exports.EditableListEditorViewModel = EditableListEditorViewModel;


/***/ }),
/* 624 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var data_source_1 = __webpack_require__(65);
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var GridDataSourceMapper = (function () {
    function GridDataSourceMapper(dataFields) {
        this.dataFields = dataFields;
        this.gridDataSourceKeyCache = [];
    }
    GridDataSourceMapper.prototype.mapDataSource = function (srcData) {
        var _this = this;
        var updatedCache = [];
        var latestCacheItemKey = this.gridDataSourceKeyCache
            .reduce(function (acc, item) {
            return item && item.key > acc ? item.key : acc;
        }, 0);
        var data = ko.unwrap(srcData)
            .map(function (dataSourceItem) {
            var cacheItem = _this.gridDataSourceKeyCache
                .filter(function (cacheItem) { return cacheItem.objRef === dataSourceItem; })[0];
            if (!cacheItem) {
                cacheItem = {
                    key: ++latestCacheItemKey,
                    objRef: dataSourceItem,
                };
            }
            updatedCache.push(cacheItem);
            return _this.dataFields.reduce(function (acc, field) {
                acc[field] = cacheItem.objRef && ko.unwrap(cacheItem.objRef[field]);
                return acc;
            }, { keyField: cacheItem.key });
        });
        this.gridDataSourceKeyCache = updatedCache;
        return data;
    };
    GridDataSourceMapper.prototype.updateDataSourceItem = function (key, newValues) {
        var cacheItem = this.gridDataSourceKeyCache
            .filter(function (cacheItem) { return cacheItem.key === key; })[0];
        var container = cacheItem && cacheItem.objRef;
        if (container) {
            this.dataFields.forEach(function (field) {
                newValues.hasOwnProperty(field) && ko.isWritableObservable(container[field]) && container[field](newValues[field]);
            });
        }
    };
    GridDataSourceMapper.prototype.getObjectByKey = function (key) {
        var cacheItem = this.gridDataSourceKeyCache
            .filter(function (item) { return item.key === key; })[0];
        return cacheItem && cacheItem.objRef;
    };
    GridDataSourceMapper.prototype.getKeyByObject = function (obj) {
        var cacheItem = this.gridDataSourceKeyCache
            .filter(function (item) { return item.objRef === obj; })[0];
        return cacheItem && cacheItem.key;
    };
    return GridDataSourceMapper;
}());
var InlineEditCollectionEditorViewModel = (function () {
    function InlineEditCollectionEditorViewModel(params, dataSource) {
        var _this = this;
        this.add = function () { return _this._addNewItemRow(); };
        this.remove = function () { return _this.dataSource.remove(_this.selectedValue); };
        this.down = function () { return _this.downEnabled() && _this._moveSelectedGridRow('down'); };
        this.up = function () { return _this.upEnabled() && _this._moveSelectedGridRow('up'); };
        this.dataFields = params.dataFields;
        this.dataSource = dataSource;
        this.noDataText = _default_1.getLocalizationById(params.noDataText);
        this.gridColumns = params.gridColumns;
        this.createNewItemHandler = params.createNewItemHandler;
        this.customizeInlineEditor = params.customizeInlineEditor;
        this.customizeCell = params.customizeCell;
        this.enableAddItem = params.enableAddItem;
        this.enableRemoveItem = params.enableRemoveItem;
        this.enableEditItem = params.enableEditItem;
        this.isToolbarVisible = params.isToolbarVisible === undefined || params.isToolbarVisible;
        this.allowAddItem = params.allowAddItem === undefined || params.allowAddItem;
        this.allowRemoveItem = params.allowRemoveItem === undefined || params.allowRemoveItem;
        this.allowReorderItem = params.allowReorderItem === undefined || params.allowReorderItem;
        this.addEnabled = ko.observable(true);
        this.removeEnabled = ko.observable(false);
        this.upEnabled = ko.observable(false);
        this.downEnabled = ko.observable(false);
        this.dataSourceMapper = new GridDataSourceMapper(this.dataFields);
        params.forceRefreshCallback && params.forceRefreshCallback.subscribe(function () { return _this.gridInstance && _this.gridInstance.refresh(); });
    }
    InlineEditCollectionEditorViewModel.prototype.getGridOptions = function () {
        var _this = this;
        var gridDataSource = new data_source_1.default({
            loadMode: 'raw',
            key: 'keyField',
            load: function () {
                return _this.dataSourceMapper.mapDataSource(_this.dataSource);
            },
            update: function (key, values) {
                _this.dataSourceMapper.updateDataSourceItem(key, values);
                return $.Deferred().resolve().promise();
            },
            insert: function (newRow) {
                var newDataSourceItem = _this.createNewItemHandler();
                if (newDataSourceItem) {
                    _this.dataFields.forEach(function (field) { return newDataSourceItem[field](ko.unwrap(newRow[field])); });
                    _this.dataSource.push(newDataSourceItem);
                }
                return $.Deferred().resolve(newDataSourceItem).promise();
            },
        });
        this.dataSourceSubscription = this.dataSource.subscribe(function () { return _this.gridInstance.refresh(); });
        var dataGridOptions = {
            onInitialized: function (e) { return _this.gridInstance = e.component; },
            dataSource: gridDataSource,
            remoteOperations: false,
            showColumnHeaders: false,
            noDataText: this.noDataText,
            showColumnLines: false,
            showRowLines: true,
            loadPanel: {
                enabled: false,
            },
            paging: {
                enabled: false
            },
            selection: {
                mode: 'single'
            },
            columns: !!this.gridColumns ? this.gridColumns : this.dataFields,
            editing: {
                allowUpdating: true,
                mode: 'cell',
                startEditAction: 'dblClick',
            },
            onCellClick: function (e) {
                if (e.row && e.row.isSelected) {
                    _this.gridInstance.editCell(e.rowIndex, e.columnIndex);
                }
            },
            onCellPrepared: this.customizeCell,
            onEditingStart: function (e) { return e.cancel = _this.enableEditItem && !_this.enableEditItem(_this.selectedValue, e); },
            onSelectionChanged: function (e) { return _this._updateActionsState(); },
            onContentReady: function (e) { return _this._updateActionsState(); },
            onEditorPreparing: function (e) { return _this.customizeInlineEditor && _this.customizeInlineEditor(e); },
        };
        return dataGridOptions;
    };
    Object.defineProperty(InlineEditCollectionEditorViewModel.prototype, "selectedValue", {
        get: function () {
            var selectedKey = this.gridInstance && this.gridInstance.getSelectedRowKeys()[0];
            return this.dataSourceMapper.getObjectByKey(selectedKey);
        },
        enumerable: true,
        configurable: true
    });
    InlineEditCollectionEditorViewModel.prototype.dispose = function () {
        this.dataSourceSubscription && this.dataSourceSubscription.dispose();
    };
    InlineEditCollectionEditorViewModel.prototype._addNewItemRow = function () {
        var _this = this;
        var insertedObject;
        if (this.gridInstance.hasEditData())
            this.gridInstance.saveEditData();
        this.gridInstance.beginUpdate();
        var newObject = this.createNewItemHandler();
        this.gridInstance
            .getDataSource()
            .store()
            .insert(this.dataFields
            .reduce(function (acc, field) {
            acc[field] = newObject[field];
            return acc;
        }, {}))
            .then(function (obj) { return insertedObject = obj; });
        this.gridInstance.endUpdate();
        this.gridInstance.refresh().then(function () {
            setTimeout(function () {
                var rowKey = _this.dataSourceMapper.getKeyByObject(insertedObject);
                if (rowKey) {
                    var rowIndex = _this.gridInstance.getRowIndexByKey(rowKey);
                    _this.gridInstance.focus(_this.gridInstance.getCellElement(rowIndex, 0));
                    _this.gridInstance.editCell(rowIndex, 0);
                }
            }, 1);
        });
    };
    InlineEditCollectionEditorViewModel.prototype._moveSelectedGridRow = function (direction) {
        var selectedValue = this.selectedValue;
        if (!selectedValue)
            return;
        this.gridInstance.beginUpdate();
        var index = this.dataSource().indexOf(selectedValue);
        this.dataSource.splice(index, 1);
        this.dataSource.splice(direction === 'up' ? index - 1 : index + 1, 0, selectedValue);
        this.gridInstance.endUpdate();
    };
    InlineEditCollectionEditorViewModel.prototype._updateActionsState = function () {
        this.addEnabled(!!this.enableAddItem ? this.enableAddItem(this.selectedValue) : true);
        this.removeEnabled(!!this.enableRemoveItem ? this.enableRemoveItem(this.selectedValue) : !!this.selectedValue);
        var selectedRowIndex = this.dataSource.indexOf(this.selectedValue);
        this.upEnabled(this.selectedValue && selectedRowIndex > 0);
        this.downEnabled(this.selectedValue && selectedRowIndex < this.gridInstance.getDataSource().totalCount() - 1);
    };
    return InlineEditCollectionEditorViewModel;
}());
exports.InlineEditCollectionEditorViewModel = InlineEditCollectionEditorViewModel;


/***/ }),
/* 625 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _accordion_tab_1 = __webpack_require__(7);
var _base_properties_composer_1 = __webpack_require__(12);
var _shared_composers_1 = __webpack_require__(13);
var SharedPropertiesComposer = (function (_super) {
    __extends(SharedPropertiesComposer, _super);
    function SharedPropertiesComposer(customizeHandler) {
        return _super.call(this, customizeHandler) || this;
    }
    SharedPropertiesComposer.prototype._composeTabsCore = function (model, args) {
        var result = [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', _shared_composers_1.SharedComposers.getCommonWrapper(model))
        ];
        return result;
    };
    return SharedPropertiesComposer;
}(_base_properties_composer_1.DashboardItemPropertiesComposer));
exports.SharedPropertiesComposer = SharedPropertiesComposer;


/***/ }),
/* 626 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _map_custom_shapefile_properties_composer_1 = __webpack_require__(627);
var MapCustomShapeFileSurface = (function () {
    function MapCustomShapeFileSurface(model, propertiesController) {
        this.model = model;
        this.propertiesController = propertiesController;
        this._disposables = [];
        this.propertiesTabs = ko.observableArray([]);
    }
    MapCustomShapeFileSurface.prototype.startEditing = function (args) {
        args.createImmediately = false;
        var composer = new _map_custom_shapefile_properties_composer_1.MapCustomShapefilePropertiesComposer();
        var tabs = composer.composeTabs(this.model);
        this.propertiesTabs(tabs);
        this.propertiesController.secondaryModel({
            displayText: 'DashboardWebStringId.Map.Area.Custom',
            data: this
        });
    };
    MapCustomShapeFileSurface.prototype.dispose = function () {
        this._disposables.forEach(function (d) {
            d.dispose();
        });
    };
    return MapCustomShapeFileSurface;
}());
exports.MapCustomShapeFileSurface = MapCustomShapeFileSurface;


/***/ }),
/* 627 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _utils_1 = __webpack_require__(3);
var _custom_shape_file_1 = __webpack_require__(306);
var _custom_shape_file_data_1 = __webpack_require__(136);
var _form_adapter_editors_1 = __webpack_require__(22);
var _object_properties_wrapper_1 = __webpack_require__(10);
var _accordion_tab_1 = __webpack_require__(7);
var MapCustomShapefilePropertiesComposer = (function () {
    function MapCustomShapefilePropertiesComposer() {
    }
    MapCustomShapefilePropertiesComposer.prototype.composeTabs = function (model) {
        var layoutsTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.CustomMapOptions, 'DashboardWebStringId.Map.CustomMapOptions');
        this.fillLayoutsTab(layoutsTab, model);
        return [layoutsTab];
    };
    MapCustomShapefilePropertiesComposer.prototype.fillLayoutsTab = function (tab, model) {
        var switcherInfo = {
            propertyName: 'switcher', displayName: 'DashboardWebStringId.Map.CustomMapOptionsSource', defaultVal: !!model.data.shapeData() ? 'file' : 'url', simpleFormAdapterItem: 'buttonGroupEditor', valuesArray: [
                { value: 'url', displayValue: 'DashboardWebStringId.Map.CustomMapOptionsUrl' },
                { value: 'file', displayValue: 'DashboardWebStringId.Map.CustomMapOptionsFile' }
            ]
        };
        var visibilityRules = {};
        visibilityRules[_custom_shape_file_1.customShapefileUrl.propertyName] = [switcherInfo.propertyName, '=', 'url'];
        visibilityRules[_custom_shape_file_data_1.shapeData.propertyName] = visibilityRules[_custom_shape_file_data_1.attributeData.propertyName] = [switcherInfo.propertyName, '=', 'file'];
        var disabilityRules = {};
        disabilityRules[_custom_shape_file_data_1.attributeData.propertyName] = [[_custom_shape_file_data_1.shapeData.propertyName, '=', _custom_shape_file_data_1.shapeData.defaultVal], 'or', [_custom_shape_file_data_1.shapeData.propertyName, '=', '']];
        tab.tabModel(new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: _utils_1.extend(model, {
                switcher: ko.observable(switcherInfo.defaultVal)
            }),
            properties: [
                switcherInfo,
                _custom_shape_file_1.customShapefileUrl, {
                    container: _custom_shape_file_1.customShapefileData,
                    properties: [__assign({}, _custom_shape_file_data_1.shapeData, { formAdapterItem: _form_adapter_editors_1.filePickerEditor({
                                type: 'file',
                                accept: '.shp',
                                placeholderId: 'DashboardWebStringId.Map.ShapeFileLoaded',
                                showClearButton: true,
                                readMode: undefined
                            }) }), __assign({}, _custom_shape_file_data_1.attributeData, { formAdapterItem: _form_adapter_editors_1.filePickerEditor({
                                type: 'file',
                                accept: '.dbf',
                                placeholderId: 'DashboardWebStringId.Map.AttributeFileLoaded',
                                showClearButton: true,
                                readMode: undefined
                            }) })]
                }
            ],
            visibilityFilterRules: visibilityRules,
            disabledFilterRules: disabilityRules
        }));
    };
    return MapCustomShapefilePropertiesComposer;
}());
exports.MapCustomShapefilePropertiesComposer = MapCustomShapefilePropertiesComposer;


/***/ }),
/* 628 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var custom_store_1 = __webpack_require__(120);
var data_source_1 = __webpack_require__(65);
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var _utils_1 = __webpack_require__(3);
var dimension_1 = __webpack_require__(43);
var disposable_object_1 = __webpack_require__(11);
var _array_utils_1 = __webpack_require__(49);
var _display_name_provider_1 = __webpack_require__(24);
var FieldWrapper = (function () {
    function FieldWrapper(dimension, getDisplayName) {
        var _this = this;
        this.getDisplayName = getDisplayName;
        this.add = function (d) { return _this._dimensions.push(d); };
        this.dataMember = function () { return _this._dimensions[0].dataMember(); };
        this.displayName = function () { return _this._dimensions.map(function (d) { return '[' + _this.getDisplayName(d) + ']'; }).join(' - '); };
        this.groupIndex = function () { return _this._dimensions[0].groupIndex(); };
        this.hasItems = function (path) { return (_this.isGroup() && !!path) ? path.length !== _this._dimensions.length : _this.isGroup(); };
        this.isGroup = function () { return _this._dimensions.length > 1; };
        this.reorder = function (dataFields) {
            if (!dataFields)
                return;
            var newDimensions = [];
            dataFields.forEach(function (dataField) {
                var dimension = _this._dimensions.filter(function (d) { return d.dataMember() == dataField.dataMember(); })[0];
                if (!!dimension) {
                    newDimensions.push(dimension);
                }
            });
            _this._dimensions = newDimensions;
        };
        this._dimensions = [dimension];
    }
    return FieldWrapper;
}());
exports.FieldWrapper = FieldWrapper;
var SimpleFilterEditor = (function (_super) {
    __extends(SimpleFilterEditor, _super);
    function SimpleFilterEditor(dashboardItem, dataSourceBrowser) {
        var _this = _super.call(this) || this;
        _this.dashboardItem = dashboardItem;
        _this.dataSourceBrowser = dataSourceBrowser;
        _this.selectedField = ko.observable();
        _this.fields = ko.observableArray();
        _this.applyHandler = function () {
            if (!!_this.selectedField()) {
                _this.dataSourceBrowser.getDimensionFilterString(_this.dashboardItem, _this.selectedField().dataMember(), _this._getFilterItemsState()).done(function (filterString) {
                    _this.dashboardItem.filterString(filterString);
                });
            }
            _this.popupVisible(false);
        };
        var that = _this;
        var uniqueDimensions = _this.dashboardItem._uniqueDataItems.filter(function (item) { return item instanceof dimension_1.Dimension; });
        _this.popupVisible = ko.observable(false);
        _this.loadingVisible = ko.observable(true);
        _this.filterItems = [];
        _this._loadDataFields(uniqueDimensions).done(function (fields) {
            _this.selectedField(fields[0]);
            _this.fields(fields);
        });
        _this.toDispose(_this.selectedField.subscribe(function (dimension) {
            _this.filterItems = [];
            _this.loadingVisible(true);
            _this.treeDataSource.reload();
        }));
        _this.treeRootValue = '0';
        _this.treeDataSource = new data_source_1.default({
            store: new custom_store_1.default({
                load: function (options) {
                    var selectedField = _this.selectedField.peek();
                    if (!selectedField) {
                        return undefined;
                    }
                    var parentId = options.filter && options.filter[1] || _this.treeRootValue;
                    var result = $.Deferred();
                    var pathComponents = !!parentId ? parentId.split('.') : undefined;
                    var parentIndex = -1;
                    _this.filterItems.forEach(function (item, index) {
                        if (item.id == parentId) {
                            parentIndex = index;
                        }
                    });
                    var branch = _this._getBranchIndexes(parentIndex);
                    _this.dataSourceBrowser.getDimensionFilterItems(_this.dashboardItem, selectedField.dataMember(), _this._getFilterItemsState(), branch).done(function (expandedItems) {
                        var index = 0;
                        var items = expandedItems.map(function (item) {
                            return {
                                id: parentId + '.' + index++,
                                parentId: parentId,
                                displayName: item.IsBlank ? '(Blank)' : item.Text,
                                hasItems: selectedField.hasItems(pathComponents),
                                selected: item.IsChecked,
                                data: item
                            };
                        });
                        _this.filterItems = (parentId === _this.treeRootValue) ? items : _array_utils_1.arrayInsert(_this.filterItems, items, parentIndex + 1);
                        result.resolve(items);
                    });
                    return result.promise();
                }
            }),
            onLoadingChanged: function (loadingStarted) {
                if (!loadingStarted) {
                    that.loadingVisible(false);
                }
            }
        });
        return _this;
    }
    Object.defineProperty(SimpleFilterEditor.prototype, "treeOptions", {
        get: function () {
            return {
                dataSource: this.treeDataSource,
                noDataText: '',
                rootValue: this.treeRootValue,
                dataStructure: 'plain',
                keyExpr: 'id',
                parentIdExpr: 'parentId',
                showCheckBoxesMode: 'selectAll',
                selectAllText: '(All)',
                selectNodesRecursive: true,
                virtualModeEnabled: true,
                scrollDirection: 'both',
                onItemRendered: function (e) {
                    var treeItem = e.itemData;
                    if (treeItem.selected == null) {
                        var itemElement = _utils_1.$unwrap(e.itemElement);
                        $(itemElement).siblings('.dx-checkbox').addClass('dx-checkbox-indeterminate');
                    }
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    SimpleFilterEditor.prototype._getBranchIndexes = function (parentIndex) {
        if (parentIndex < 0) {
            return null;
        }
        var branchIndexes = [];
        var parentId = this.filterItems[parentIndex].id;
        for (var i = parentIndex; i >= 0; i--) {
            if (this.filterItems[i].id == parentId) {
                branchIndexes.splice(0, 0, i);
                parentId = parentId.substring(0, parentId.lastIndexOf('.'));
            }
        }
        return branchIndexes;
    };
    SimpleFilterEditor.prototype._getFilterItemsState = function () {
        return this.filterItems.map(function (itemElement) {
            var filterItem = itemElement.data;
            filterItem.IsChecked = itemElement.selected;
            return filterItem;
        });
    };
    SimpleFilterEditor.prototype._generateFields = function (dimensions) {
        var _this = this;
        var fields = [];
        dimensions.forEach(function (dimension, i) {
            if (i > 0 && dimension.groupIndex() > 0 && dimension.groupIndex() === (dimensions[i - 1]).groupIndex()) {
                fields[fields.length - 1].add(dimension);
            }
            else {
                fields.push(new FieldWrapper(dimension, function (dataItem) { return _display_name_provider_1.getDataItemDisplayName(_this.dataSourceBrowser, _this.dashboardItem, dataItem); }));
            }
        });
        return fields;
    };
    SimpleFilterEditor.prototype._loadDataFields = function (dimensions) {
        var _this = this;
        var deferred = $.Deferred(), result = this._generateFields(dimensions), findPromises = dimensions.map(function (dimension) { return _this.dataSourceBrowser.findDataField(_this.dashboardItem.dataSource(), _this.dashboardItem.dataMember(), dimension.dataMember()); });
        $.when.apply($.when, findPromises).done(function () {
            var dataFields = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                dataFields[_i] = arguments[_i];
            }
            result.forEach(function (wrapper) {
                if (wrapper.groupIndex() > 0) {
                    var groupedFields = dataFields.filter(function (dataField) { return !!dataField && dataField.groupIndex() == wrapper.groupIndex(); });
                    wrapper.reorder(groupedFields && groupedFields.length > 0 && groupedFields[0].groupDataItems);
                }
            });
            deferred.resolve(result);
        });
        return deferred.promise();
    };
    SimpleFilterEditor.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.treeDataSource.dispose();
    };
    return SimpleFilterEditor;
}(disposable_object_1.DisposableObject));
exports.SimpleFilterEditor = SimpleFilterEditor;


/***/ }),
/* 629 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _calculation_properties_composer_1 = __webpack_require__(368);
var CalculationSurface = (function () {
    function CalculationSurface(model, measure, dashboardItem, dataSourceBrowser, propertiesController) {
        this.model = model;
        this.measure = measure;
        this.dashboardItem = dashboardItem;
        this.dataSourceBrowser = dataSourceBrowser;
        this.propertiesController = propertiesController;
        this._disposables = [];
        this.propertiesTabs = ko.observableArray([]);
    }
    CalculationSurface.prototype.updatePropertiesTabs = function () {
        var composer = new _calculation_properties_composer_1.CalculationPropertiesComposer();
        var tabs = composer.composeTabs(this.measure, {
            dashboardItem: this.dashboardItem,
            dataSourceBrowser: this.dataSourceBrowser
        });
        this.propertiesTabs(tabs);
        this.propertiesController.secondaryModel({
            displayText: this.model.title,
            data: this
        });
        this.propertiesController.secondarySelectedIndex(0);
    };
    CalculationSurface.prototype.startEditing = function (args) {
        args.createImmediately = false;
        this.updatePropertiesTabs();
    };
    CalculationSurface.prototype.dispose = function () {
        this._disposables.forEach(function (d) {
            d.dispose();
        });
    };
    return CalculationSurface;
}());
exports.CalculationSurface = CalculationSurface;


/***/ }),
/* 630 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function getDimensionExpression(dataMember, gateTimeGroupInterval, textGroupInterval, fieldType) {
    var operand = "[" + dataMember + "]";
    switch (fieldType) {
        case 'DateTime':
            switch (gateTimeGroupInterval) {
                case 'None':
                    return operand;
                case 'DayMonthYear':
                    return "GetDate(" + operand + ")";
                case 'Day':
                    return "GetDay(" + operand + ")";
                case 'DayOfWeek':
                    return "GetDayOfWeek(" + operand + ")";
                case 'DayOfYear':
                    return "GetDayOfYear(" + operand + ")";
                case 'DateHour':
                    return "GetDateHour(" + operand + ")";
                case 'DateHourMinute':
                    return "GetDateHourMinute(" + operand + ")";
                case 'DateHourMinuteSecond':
                    return "GetDateHourMinuteSecond(" + operand + ")";
                case 'Month':
                    return "GetMonth(" + operand + ")";
                case 'MonthYear':
                    return "GetDateMonthYear(" + operand + ")";
                case 'Quarter':
                    return "GetQuarter(" + operand + ")";
                case 'QuarterYear':
                    return "GetDateQuarterYear(" + operand + ")";
                case 'WeekOfMonth':
                    return "GetWeekOfMonth(" + operand + ")";
                case 'WeekOfYear':
                    return "GetWeekOfYear(" + operand + ")";
                case 'WeekYear':
                    return "GetDateWeekYear(" + operand + ")";
                case 'Year':
                    return "GetYear(" + operand + ")";
                case 'Hour':
                    return "GetHour(" + operand + ")";
                case 'Minute':
                    return "GetMinute(" + operand + ")";
                case 'Second':
                    return "GetSecond(" + operand + ")";
            }
        case 'Text':
            switch (textGroupInterval) {
                case 'Alphabetical':
                    return "Substring(" + operand + ", 0, 1)";
            }
    }
    return operand;
}
exports.getDimensionExpression = getDimensionExpression;
function getSummaryExpression(dataMember, summaryType) {
    var operand = "[" + dataMember + "]";
    switch (summaryType) {
        case 'Average':
            return "Avg(" + operand + ")";
        case 'Count':
            return "CountNotNull(" + operand + ")";
        case 'CountDistinct':
            return "CountDistinct(" + operand + ")";
        case 'Max':
            return "Max(" + operand + ")";
        case 'Median':
            return "Median(" + operand + ")";
        case 'Mode':
            return "Mode(" + operand + ")";
        case 'Min':
            return "Min(" + operand + ")";
        case 'StdDev':
            return "StdDev(" + operand + ")";
        case 'StdDevp':
            return "StdDevp(" + operand + ")";
        case 'Sum':
            return "Sum(" + operand + ")";
        case 'Var':
            return "Var(" + operand + ")";
        case 'Varp':
            return "Varp(" + operand + ")";
    }
    throw new Error("Summary expression cannot be determined for the " + summaryType + " summary type.");
}
exports.getSummaryExpression = getSummaryExpression;


/***/ }),
/* 631 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
function getFilterCriteria(filterString) {
    var criteriaSerializer = new dx_analytics_core_1.default.Analytics.Widgets.Internal.FilterEditorSerializer();
    return criteriaSerializer.deserialize(filterString);
}
exports.getFilterCriteria = getFilterCriteria;
function insertDimensionsExpressionsIntoFilterExpression(filterString, dimensionsExpressions) {
    var criteriaSerializer = new dx_analytics_core_1.default.Analytics.Widgets.Internal.FilterEditorSerializer();
    var filterCriteria = criteriaSerializer.deserialize(filterString);
    var dimensionsCriteria = {};
    for (var dimensionName in dimensionsExpressions)
        dimensionsCriteria[dimensionName] = dx_analytics_core_1.default.Analytics.Criteria.CriteriaOperator.parse(dimensionsExpressions[dimensionName]);
    var patched = DimensionExpressionInserter.patch(filterCriteria, dimensionsCriteria);
    return criteriaSerializer.serialize(patched);
}
exports.insertDimensionsExpressionsIntoFilterExpression = insertDimensionsExpressionsIntoFilterExpression;
var DimensionExpressionInserter = (function () {
    function DimensionExpressionInserter(dimensionsCriteria) {
        this._dimensionsCriteria = dimensionsCriteria;
    }
    DimensionExpressionInserter.patch = function (criteria, dimensionsCriteria) {
        var patcher = new DimensionExpressionInserter(dimensionsCriteria);
        return criteria.accept(patcher);
    };
    DimensionExpressionInserter.prototype.visitOperandProperty = function (element) {
        return this._dimensionsCriteria[element.propertyName];
    };
    return DimensionExpressionInserter;
}());
exports.DimensionExpressionInserter = DimensionExpressionInserter;


/***/ }),
/* 632 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _utils_1 = __webpack_require__(3);
var data_item_1 = __webpack_require__(8);
var specific_calc_window_definition_1 = __webpack_require__(261);
var _undo_engine_helper_1 = __webpack_require__(27);
var _form_adapter_editors_1 = __webpack_require__(22);
var _object_properties_wrapper_1 = __webpack_require__(10);
var _display_name_provider_1 = __webpack_require__(24);
var WindowDefinitionMode;
(function (WindowDefinitionMode) {
    WindowDefinitionMode[WindowDefinitionMode["Predefined"] = 0] = "Predefined";
    WindowDefinitionMode[WindowDefinitionMode["Specific"] = 1] = "Specific";
})(WindowDefinitionMode = exports.WindowDefinitionMode || (exports.WindowDefinitionMode = {}));
var WindowDefinitionEditor = (function () {
    function WindowDefinitionEditor(windowDefinition, _params) {
        var _this = this;
        this._params = _params;
        this.mode = ko.observable(null);
        this.value = windowDefinition.windowDefinition;
        if (this.value() instanceof specific_calc_window_definition_1.SpecificWindowDefinition) {
            this.mode(WindowDefinitionMode.Specific);
            var definition = this.value();
            definition._dimensionsInfoPatcher = WindowDefinitionEditor.createPatchSpecificWindowDimensionsInfo(definition, _params.dataDashboardItem, _params.dataSourceBrowser);
        }
        else {
            this.mode(WindowDefinitionMode.Predefined);
        }
        this.mode.subscribe(this.setValue, this);
        this.formAdapterWrapper = ko.pureComputed(function () {
            if (_this.value()) {
                return new _object_properties_wrapper_1.ObjectPropertiesWrapper({ model: _this.value(),
                    properties: _this.value().getInfo() });
            }
        });
    }
    Object.defineProperty(WindowDefinitionEditor.prototype, "dataSource", {
        get: function () {
            return [
                { value: WindowDefinitionMode.Predefined, displayValue: 'DashboardWebStringId.Calculations.WindowDefinitionModePredefined' },
                { value: WindowDefinitionMode.Specific, displayValue: 'DashboardWebStringId.Calculations.WindowDefinitionModeSpecific' }
            ];
        },
        enumerable: true,
        configurable: true
    });
    WindowDefinitionEditor.prototype.setValue = function (newMode) {
        if (newMode === WindowDefinitionMode.Predefined) {
            this.value(this._params.dataDashboardItem._getDefaultCalculationWindowDefinition());
        }
        else {
            var windowDefinition = new specific_calc_window_definition_1.SpecificWindowDefinition();
            windowDefinition._dimensionsInfoPatcher = WindowDefinitionEditor.createPatchSpecificWindowDimensionsInfo(windowDefinition, this._params.dataDashboardItem, this._params.dataSourceBrowser);
            this.value(windowDefinition);
        }
    };
    WindowDefinitionEditor.createPatchSpecificWindowDimensionsInfo = function (definition, dataDashboardItem, dataSourceBrowser) { return function (propertyInfo) {
        var lookupValueFromDimension = function (d) {
            return {
                value: d.uniqueName(),
                displayValue: _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, dataDashboardItem, d)
            };
        };
        var allDimensions = dataDashboardItem._dimensions.map(lookupValueFromDimension);
        var getAvailableDimensions = function () {
            return dataDashboardItem._dimensions
                .filter(function (d) { return !definition.dimensions().some(function (wd) { return wd.uniqueName() === d.uniqueName(); }); })
                .map(lookupValueFromDimension);
        };
        var editorOptions = {
            dataFields: ['uniqueName'],
            gridColumns: [{
                    dataField: 'uniqueName',
                    lookup: {
                        displayExpr: 'displayValue',
                        valueExpr: 'value',
                    },
                    calculateDisplayValue: function (gridRow) {
                        var dimension = allDimensions.filter(function (d) { return d.value === gridRow.uniqueName; })[0];
                        return dimension && dimension.displayValue || gridRow.uniqueName;
                    }
                }],
            enableAddItem: function () { return !!getAvailableDimensions().length; },
            noDataText: 'DashboardWebStringId.CollectionEditor.NoItems',
            createNewItemHandler: function () {
                if (getAvailableDimensions().length > 0) {
                    return new data_item_1.DataItemLink(dataDashboardItem, { '@DefaultId': getAvailableDimensions()[0].value });
                }
            },
            customizeInlineEditor: function (e) {
                var uniqueName = e.row && e.row.data && e.row.data.uniqueName;
                var availableDimensions = getAvailableDimensions();
                if (availableDimensions.filter(function (d) { return d.value === uniqueName; }).length) {
                    e.editorOptions.dataSource = availableDimensions;
                }
                else {
                    e.editorOptions.dataSource = allDimensions
                        .filter(function (d) { return d.value === uniqueName; })
                        .concat(availableDimensions);
                }
            },
        };
        return __assign({}, propertyInfo, { formAdapterItem: _form_adapter_editors_1.inlineEditCollectionEditor(editorOptions) });
    }; };
    __decorate([
        _undo_engine_helper_1.wrapWithUndoRedo
    ], WindowDefinitionEditor.prototype, "setValue", null);
    return WindowDefinitionEditor;
}());
exports.WindowDefinitionEditor = WindowDefinitionEditor;
exports.windowDefinitionEditor = function (params) { return function (context) {
    return {
        template: function (args, itemElement) {
            var windowDefinition = args.component.option('formData')[args.dataField];
            var viewModel = new WindowDefinitionEditor(windowDefinition, params);
            ko.applyBindingsToNode(_utils_1.$unwrap(itemElement), { template: { name: 'dx-dashboard-window-definition-editor', data: viewModel } }, context.bindingContext);
        }
    };
}; };


/***/ }),
/* 633 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var color_1 = __webpack_require__(50);
var color_scheme_entry_1 = __webpack_require__(104);
var ColorPickerModel = (function () {
    function ColorPickerModel(colorSchemeModel, colorPalette) {
        var _this = this;
        this.colorSchemeModel = colorSchemeModel;
        this.colorPalette = colorPalette;
        this.target = ko.observable();
        this.visible = ko.observable();
        this.colorCss = ko.observable('');
        this.confirm = function () {
            _this.entry.paletteIndex(null);
            _this.entry.color(color_1.Color.fromRgbaString(_this.colorCss()));
            if (_this.entry instanceof color_scheme_entry_1.AutoColorSchemeEntry) {
                var newEntry = _this.entry.clone();
                _this.colorSchemeModel.updateEntry(_this.entry, newEntry);
            }
            _this.visible(false);
        };
        this.buttonItems = ko.observableArray([
            { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: _default_1.getLocalizationById('DashboardWebStringId.ButtonConfirm'), onClick: this.confirm } },
            { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: _default_1.getLocalizationById('DashboardStringId.ButtonCancel'), onClick: function () { return _this.visible(false); } } }
        ]);
    }
    ColorPickerModel.prototype.init = function (entry, target) {
        this.entry = entry;
        var color = entry.paletteIndex() === null ? entry.color() : this.colorPalette()[entry.paletteIndex()];
        this.colorCss(color ? color.css : '');
        this.target(target);
        this.visible(true);
    };
    return ColorPickerModel;
}());
exports.ColorPickerModel = ColorPickerModel;


/***/ }),
/* 634 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var _utils_1 = __webpack_require__(3);
var color_1 = __webpack_require__(50);
var color_scheme_entry_1 = __webpack_require__(104);
var disposable_object_1 = __webpack_require__(11);
var index_metadata_1 = __webpack_require__(191);
var _array_utils_1 = __webpack_require__(49);
var _knockout_utils_1 = __webpack_require__(17);
var data_dashboard_item_1 = __webpack_require__(9);
var _color_scheme_entry_creator_1 = __webpack_require__(372);
var measureDefinitionEqual = function (key1, key2) { return key1._id === key2._id; };
function combineEntries(auto, custom) {
    var customEntries = custom.slice();
    var result = [];
    var dimensionValuesEqual = function (value1, value2) { return value1.value() === value2.value(); };
    return auto.map(function (autoEntry) {
        var foundCustom = customEntries.filter(function (customEntry) {
            return customEntry.definition.equals(autoEntry.definition) &&
                _array_utils_1.compareArrays(customEntry.dimensionKeys().map(function (key) { return key.value; }), autoEntry.dimensionKeys().map(function (key) { return key.value; }), dimensionValuesEqual) &&
                _array_utils_1.compareArrays(customEntry.measureKeys(), autoEntry.measureKeys(), measureDefinitionEqual);
        })[0];
        !!foundCustom && customEntries.splice(customEntries.indexOf(foundCustom), 1);
        return foundCustom || autoEntry;
    }).concat(customEntries);
}
var ItemColorScheme = (function (_super) {
    __extends(ItemColorScheme, _super);
    function ItemColorScheme(item, _requestColorSchemeDelegate, _updateHub) {
        var _this = _super.call(this) || this;
        _this.generatedEntries = ko.observableArray();
        _this.componentName = '';
        _this.name = '';
        if (item instanceof data_dashboard_item_1.DataDashboardItem) {
            _this.componentName = item.componentName();
            _this.name = item.name();
        }
        _this.customEntries = item.colorScheme;
        _this.allEntries = ko.computed(function () {
            return combineEntries(_this.generatedEntries(), _this.customEntries());
        });
        _this.toDispose(_this.allEntries);
        var update = _utils_1.debounce(function () {
            if (!_this.disposed) {
                _requestColorSchemeDelegate(_this.componentName).done(function (scheme) {
                    var coloringSchemeEntries = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(scheme, function (item) { return new color_scheme_entry_1.AutoColorSchemeEntry(item, null, _this.componentName, _this.name); })();
                    _this.generatedEntries(coloringSchemeEntries);
                });
            }
        }, 10);
        _this.toDispose(_this.customEntries.subscribe(update));
        var dashboardItemUpdated = function (args) {
            if ((args.category !== index_metadata_1.PropertyCategory.ViewModel && args.category !== index_metadata_1.PropertyCategory.NoUpdate)
                && item._colorableItems().indexOf(args.item) !== -1) {
                update();
            }
        };
        item._colorableItems.subscribe(update);
        _updateHub.dashboardItemPropertyChanged.add(dashboardItemUpdated);
        _this.toDispose({ dispose: function () { _updateHub.dashboardItemPropertyChanged.remove(dashboardItemUpdated); } });
        update();
        return _this;
    }
    return ItemColorScheme;
}(disposable_object_1.DisposableObject));
exports.ItemColorScheme = ItemColorScheme;
function contains(array, item) {
    return array.some(function (element) { return element === item; });
}
var ColorSchemeModel = (function () {
    function ColorSchemeModel(dashboard, _requestColorSchemeDelegate, _updateHub) {
        var _this = this;
        this.dashboard = dashboard;
        this._requestColorSchemeDelegate = _requestColorSchemeDelegate;
        this._updateHub = _updateHub;
        this.isSignatureAutogenerated = function (definition) { return _this.itemColorSchemes[definition.componentName].generatedEntries().some(function (entry) { return entry.definition.equals(definition); }); };
        this.removeEntry = function (entry) {
            _this.getScheme(entry.definition.componentName).remove(entry);
            _this.newEntry(null);
        };
        this.removeTable = function (definition) {
            var scheme = _this.getScheme(definition.componentName);
            scheme.removeAll(scheme().filter(function (entry) { return entry.definition.equals(definition); }));
        };
        this.initNewEntry = function () {
            var entryCreator = new _color_scheme_entry_creator_1.ColorSchemeEntryCreator();
            var entryToClone = _this.selectedSignatureEntries()[0];
            var defaultNames = _this.generateDefaultNames(entryToClone);
            entryCreator.addItemComponentName(entryToClone.definition.componentName);
            entryCreator.addDataSourceName(entryToClone.definition.dataSource);
            entryCreator.addDataMemberName(entryToClone.definition.dataMember);
            entryToClone.dimensionKeys().map(function (key, index) {
                entryCreator.addDimensionKey(key.definition.dataMember(), key.definition.dateTimeGroupInterval(), key.value.type(), defaultNames[index]);
            });
            entryCreator.addColor(color_1.Color.fromArgb(1, 0, 0, 0));
            _this.newEntry(entryCreator.getEntry());
        };
        this.updateEntry = function (entry, editedEntry) {
            var entries = _this.getScheme(editedEntry.definition.componentName);
            var oldEntryIndex = entry instanceof color_scheme_entry_1.AutoColorSchemeEntry ? -1 : entries().indexOf(entry);
            if (oldEntryIndex >= 0) {
                entries.splice(oldEntryIndex, 1);
            }
            if (entries().indexOf(editedEntry) === -1) {
                entries.push(editedEntry);
            }
            _this.newEntry(null);
        };
        this.getAvailableMeasureKeys = function () {
            var result = [];
            var definition = _this.selectedSignatureEntries().length > 0 ? _this.selectedSignatureEntries()[0].definition : null;
            var itemId = definition.componentName;
            var addMeasureDefinition = function (measureDefinition) {
                if (!result.some(function (definition) { return measureDefinitionEqual(definition, measureDefinition); }))
                    result.push(measureDefinition);
            };
            var items = _this.dashboard._dataDashboardItems().
                filter(function (item) { return (!!itemId ? item.componentName() === itemId : item._isGloballyColored) &&
                definition.equals(item._getColoringSignature()); });
            if (items.length > 0) {
                items.forEach(function (item) {
                    item._measures.forEach(function (measure) {
                        if (item._isColoringEnabled(measure)) {
                            addMeasureDefinition(_color_scheme_entry_creator_1.ColorSchemeEntryCreator.createMeasureDefinitionFromMeasure(measure, item.dataItems()));
                        }
                    });
                });
            }
            else {
                _this.selectedSignatureEntries().forEach(function (entry) {
                    entry.measureKeys().forEach(function (measure) { return addMeasureDefinition(_color_scheme_entry_creator_1.ColorSchemeEntryCreator.createMeasureDefinitionCopy(measure)); });
                });
            }
            return result;
        };
        this.selectedSignatures = ko.observable([]);
        this.itemColorSchemes = {};
        this.newEntry = ko.observable();
        this.itemColorSchemes[''] = new ItemColorScheme(dashboard, _requestColorSchemeDelegate, _updateHub);
        var localyColoredItems = ko.computed(function () { return dashboard._dataDashboardItems().filter(function (item) { return item._isLocallyColored; }); });
        localyColoredItems().forEach(function (item) { return _this.createItemColorScheme(item); });
        _knockout_utils_1.subscribeWithPrev(localyColoredItems, function (oldValues, newValues) {
            var deleted = oldValues
                .filter(function (oldValue) { return !newValues.some(function (element) { return element === oldValue; }); })
                .forEach(function (item) {
                _this.itemColorSchemes[item.componentName()].dispose();
                delete _this.itemColorSchemes[item.componentName()];
            });
            var added = newValues
                .filter(function (newValue) { return !oldValues.some(function (element) { return element === newValue; }); })
                .forEach(function (item) { return _this.createItemColorScheme(item); });
        });
        this.allEntries = ko.computed(function () {
            var result = [];
            $.each(_this.itemColorSchemes, function (componentName, scheme) {
                result = result.concat(scheme.allEntries());
            });
            return result;
        });
        this.availableSignatures = ko.computed(function () {
            var result = [];
            _this.allEntries().forEach(function (entry) {
                var definition = entry.definition;
                if (!result.some(function (resultDefinition) { return resultDefinition.equals(definition); })) {
                    result.push(definition);
                }
            });
            return result;
        });
        this.editableSignatures = ko.computed(function () {
            return _this.availableSignatures().filter(function (s) { return s.dataItems().length > 0; });
        });
        this.selectedSignatureEntries = ko.pureComputed(function () {
            return _this.allEntries().filter(function (entry) { return !!_this.selectedSignatures().length && entry.definition.equals(_this.selectedSignatures()[0]); }).concat(_this.newEntry() ? [_this.newEntry()] : []);
        });
    }
    ColorSchemeModel.prototype.createItemColorScheme = function (item) {
        this.itemColorSchemes[item.componentName()] = new ItemColorScheme(item, this._requestColorSchemeDelegate, this._updateHub);
    };
    ColorSchemeModel.prototype.getScheme = function (componentName) {
        if (componentName === void 0) { componentName = ''; }
        return this.itemColorSchemes[componentName].customEntries;
    };
    ColorSchemeModel.prototype.retainColorIndex = function (entry) {
        var newEntry = entry.clone();
        newEntry.color(null);
        newEntry.paletteIndex(entry.paletteIndex());
        this.getScheme(entry.definition.componentName).push(newEntry);
    };
    ColorSchemeModel.prototype.generateDefaultNames = function (newEntry) {
        var result = [];
        var entries = this.itemColorSchemes[newEntry.definition.componentName].allEntries().filter(function (entry) { return entry.definition.equals(newEntry.definition); });
        var dimensionKeys = newEntry.dimensionKeys();
        var lastDimensionIndex = null;
        var isString = function (dimensionKey) {
            return dimensionKey.value.type() === 'System.String';
        };
        for (var i = dimensionKeys.length - 1; i >= 0; i--) {
            if (isString(dimensionKeys[i])) {
                lastDimensionIndex = i;
                break;
            }
        }
        if (lastDimensionIndex != null) {
            for (var i = 0; i < lastDimensionIndex; i++) {
                result.push(isString(dimensionKeys[i]) ? dimensionKeys[i].definition.dataMember() + '1' : null);
            }
            var lastDimensionPattern = dimensionKeys[lastDimensionIndex].definition.dataMember();
            var lastDimensionPostfix = 1;
            while (entries.some(function (entry) { return entry.dimensionKeys()[lastDimensionIndex].value.value() === lastDimensionPattern + (lastDimensionPostfix).toString(); })) {
                lastDimensionPostfix++;
            }
            result[lastDimensionIndex] = lastDimensionPattern + lastDimensionPostfix.toString();
        }
        return result;
    };
    ColorSchemeModel.prototype.isEntryAutogenerated = function (entry) {
        return this.itemColorSchemes[entry.definition.componentName].generatedEntries().some(function (generatedEntry) { return generatedEntry.equals(entry); });
    };
    return ColorSchemeModel;
}());
exports.ColorSchemeModel = ColorSchemeModel;


/***/ }),
/* 635 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _knockout_utils_1 = __webpack_require__(17);
var ColorEntryTreeItem = (function () {
    function ColorEntryTreeItem(value, uniqueKey, entry, editColor, entryComputedColor) {
        this.value = value;
        this.uniqueKey = uniqueKey;
        this.entry = entry;
        this.items = [];
        this.expanded = true;
        this.custom = false;
        if (editColor) {
            this.editColor = function (_, ev) {
                editColor(entry, ev);
            };
            this.custom = entry.custom;
        }
        var entryColor = !!editColor && entryComputedColor;
        this.color = !!entryColor ? entryColor.css : null;
    }
    return ColorEntryTreeItem;
}());
exports.ColorEntryTreeItem = ColorEntryTreeItem;
var ColorTreeViewModel = (function () {
    function ColorTreeViewModel(params) {
        var _this = this;
        this.removeItem = function (item) {
            _this.removeEntry(item.entry);
            _this.selectedEntry(null);
        };
        this.selectedTreeItems = ko.observable([]);
        this.onItemSelectionChanged = function (e) {
            _this.selectedEntry(e.node.itemData.entry);
        };
        this.dataSource = ko.computed(function () {
            var tree = [];
            params.dataSource().forEach(function (entry) {
                var plainValues = entry.dimensionKeys().map(function (dim) { return ({
                    displayValue: dim.displayText(),
                    id: dim.displayText()
                }); });
                if (entry.measureKeys().length) {
                    plainValues.push({
                        displayValue: entry.measureKeys().map(function (m) { return m.displayText(); }).join(' | '),
                        id: entry.measureKeys().map(function (m) { return m._id; }).join(' | ')
                    });
                }
                var entryComputedColor = entry.paletteIndex() === null ? entry.color() : params.colorPalette()[entry.paletteIndex()];
                ColorTreeViewModel.construct(plainValues, tree, entry, ko.unwrap(params.editColor), entryComputedColor);
            });
            return tree;
        });
        this.colorPickerModel = params.colorPickerModel;
        this.isTreeMode = ko.computed(function () {
            return params.dataSource().length > 0 && (params.dataSource()[0].dimensionKeys().length + params.dataSource()[0].measureKeys().length) > 1;
        });
        this.allowModify = params.allowModify;
        this.selectedEntry = params.selectedEntry;
        this.addNewEntry = params.addNewEntry;
        this.removeEntry = ko.unwrap(params.removeEntry);
        this.allowAddNewEntry = _knockout_utils_1.safeComputed({ colorSchemeEntries: params.dataSource }, function (args) { return _this.allowModify && args.colorSchemeEntries.some(function (entry) { return entry.dimensionKeys().length > 0; }); });
    }
    ColorTreeViewModel.construct = function (values, children, entry, editColor, entryComputedColor) {
        if (editColor === void 0) { editColor = function () { }; }
        var value = values.shift();
        var foundChild = children.filter(function (item) { return item.uniqueKey === value.id; })[0];
        if (!foundChild && !!value) {
            foundChild = new ColorEntryTreeItem(value.displayValue, value.id, entry, values.length === 0 ? editColor : null, entryComputedColor);
            children.push(foundChild);
        }
        if (foundChild && values.length > 0) {
            ColorTreeViewModel.construct(values, foundChild.items, entry, editColor, entryComputedColor);
        }
    };
    return ColorTreeViewModel;
}());
exports.ColorTreeViewModel = ColorTreeViewModel;
exports.colorSchemeTreeViewEditor = function (options) { return function (context) { return ({
    template: function (args) { return colorSchemeTreeViewEditorTemplate(args, context, options); }
}); }; };
var colorSchemeTreeViewEditorTemplate = function (args, context, options) {
    var div = document.createElement('div');
    div.classList.add('dx-dashboard-form-column-content-wrapper');
    var viewModel = new ColorTreeViewModel(options);
    ko.applyBindingsToNode(div, { template: { name: 'dx-dashboard-colors-view', data: viewModel } }, context.bindingContext);
    return div;
};
ko.components.register('dx-dashboard-colors-component', {
    viewModel: ColorTreeViewModel,
    template: { element: 'dx-dashboard-colors-view' }
});


/***/ }),
/* 636 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var validation_engine_1 = __webpack_require__(423);
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var color_1 = __webpack_require__(50);
var _item_filter_items_provider_1 = __webpack_require__(159);
var _color_scheme_entry_creator_1 = __webpack_require__(372);
var EntryEditorViewModel = (function () {
    function EntryEditorViewModel(colorPalette) {
        var _this = this;
        this.colorPalette = colorPalette;
        this.editEntry = function (dataSourceBrowser, entry, colorByMeasures, availableMeasures, updateEntry, isAutoGenerated) {
            _this.invalidate();
            _this.isAutogenerated(isAutoGenerated);
            _this.updateEntry = updateEntry;
            _this.hasMeasures(colorByMeasures);
            _this.availableMeasures(availableMeasures);
            _this.entryToEdit(entry.clone());
            _this.subscribeObservables();
            if (colorByMeasures) {
                _this.measuresValidationRules = [{
                        type: 'custom',
                        validationCallback: function () {
                            return _this.measureKeys().length > 0;
                        },
                        message: _default_1.getLocalizationById('DashboardWebStringId.Colorization.ValidationSelectMeasure')
                    }];
            }
            var dimensionEditors = [];
            var promises = [];
            _this.dimensionKeys().forEach(function (key) {
                promises.push(dataSourceBrowser
                    .findDataField(entry.definition.dataSource, entry.definition.dataMember, key.definition.dataMember())
                    .done(function (field) {
                    var type = field && _item_filter_items_provider_1.getRealDimensionType(key.definition, field) || 'Unknown';
                    dimensionEditors.push({
                        dimensionKey: key,
                        valueType: type
                    });
                }));
            });
            $.when.apply($, promises).done(function (fields) {
                _this.dimensionEditors(dimensionEditors);
                _this.visible(true);
            });
        };
        this.close = function () {
            _this.visible(false);
            _this.invalidate();
        };
        this.validate = function () {
            var validationGroup = validation_engine_1.default.getGroupConfig(_this._validationGroupName);
            if (!!validationGroup && validationGroup.validate().isValid) {
                _this.dimensionKeys().forEach(function (key, index) { return _this.entryToEdit().dimensionKeys()[index].value.value(key.value.value()); });
                _this.entryToEdit().measureKeys(_this.measureKeys().map(function (key) { return _color_scheme_entry_creator_1.ColorSchemeEntryCreator.createMeasureDefinitionCopy(key); }));
                _this.entryToEdit().paletteIndex(null);
                _this.entryToEdit().color(color_1.Color.fromRgbaString(_this.color()));
                _this.updateEntry(_this.entryToEdit());
            }
        };
        this.invalidate = function () {
            _this._subscriptions.forEach(function (s) { return s.dispose(); });
            _this._subscriptions = [];
            _this.entryToEdit(null);
            _this.isAutogenerated(false);
            _this.measuresValidationRules = [];
            _this.dimensionKeys([]);
            _this.measureKeys([]);
        };
        this.visible = ko.observable(false);
        this.entryToEdit = ko.observable();
        this.isAutogenerated = ko.observable(false);
        this.hasMeasures = ko.observable();
        this.availableMeasures = ko.observableArray();
        this.measuresValidationRules = [];
        this.dimensionEditors = ko.observableArray();
        this.dimensionKeys = ko.observableArray();
        this.measureKeys = ko.observableArray();
        this.selectedMeasuresIds = ko.computed({
            read: function () {
                return _this.measureKeys().map(function (md) { return md._id; });
            },
            write: function (selectedIds) {
                _this.measureKeys(_this.availableMeasures().filter(function (md) { return selectedIds.some(function (id) { return id === md._id; }); }));
            }
        });
        this.color = ko.observable();
        this._subscriptions = [];
        this._validationGroupName = 'newEntry';
    }
    EntryEditorViewModel.prototype.subscribeObservables = function () {
        var _this = this;
        this.entryToEdit().dimensionKeys().forEach(function (key) { return _this.dimensionKeys.push(_color_scheme_entry_creator_1.ColorSchemeEntryCreator.createDimensionKey(key.definition.dataMember(), key.definition.dateTimeGroupInterval(), key.value.type(), key.value.value())); });
        this.measureKeys(this.entryToEdit().measureKeys().map(function (key) { return _color_scheme_entry_creator_1.ColorSchemeEntryCreator.createMeasureDefinitionCopy(key); }));
        var computedColor = this.entryToEdit().paletteIndex() === null ? this.entryToEdit().color() : this.colorPalette()[this.entryToEdit().paletteIndex()];
        this.color(computedColor ? computedColor.toHex() : '');
        this.dimensionKeys().forEach(function (key) {
            _this._subscriptions.push(key.value.value.subscribe(_this.validate));
        });
        this._subscriptions.push(this.measureKeys.subscribe(this.validate));
        this._subscriptions.push(this.color.subscribe(this.validate));
    };
    return EntryEditorViewModel;
}());
exports.EntryEditorViewModel = EntryEditorViewModel;


/***/ }),
/* 637 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var card_item_delta_format_rule_1 = __webpack_require__(126);
var card_item_format_rule_1 = __webpack_require__(129);
var _card_item_delta_format_rule_1 = __webpack_require__(453);
var _card_item_format_rule_1 = __webpack_require__(454);
var _card_item_format_rule_base_1 = __webpack_require__(279);
var _card_layout_template_element_1 = __webpack_require__(293);
var _delta_options_1 = __webpack_require__(133);
var _base_metadata_1 = __webpack_require__(4);
var _form_adapter_editors_1 = __webpack_require__(22);
var _display_name_provider_1 = __webpack_require__(24);
var _shared_format_rule_properties_composer_1 = __webpack_require__(228);
function getCardItemFormatRuleDataItems(dashboardItem) {
    return dashboardItem.seriesDimensions().concat(dashboardItem.hiddenMeasures());
}
function isDataItemFormatRuleAvaliable(dashboardItem) {
    return getCardItemFormatRuleDataItems(dashboardItem).length > 0;
}
exports.isDataItemFormatRuleAvaliable = isDataItemFormatRuleAvaliable;
function createCardItemFormatRulePropertiesComposer(selectedRuleContainer) {
    return new _shared_format_rule_properties_composer_1.FormatRulePropertiesComposer({
        createDataTypeObservable: _shared_format_rule_properties_composer_1.createDataTypeObservable,
        getCommonFormatRuleProperties: function (formatRule, dashboardItem, dataSourceBrowser) {
            var propertiesInfo = {
                properties: [],
                disabledFilterRules: {},
                dynamicEditorRules: {},
                visibilityFilterRules: {}
            };
            var dataItems = getCardItemFormatRuleDataItems(dashboardItem);
            var dataItemsDisplayText = ko.pureComputed(function () {
                return dataItems.map(function (dataItem) {
                    return {
                        value: dataItem.uniqueName(),
                        displayValueId: _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, dashboardItem, dataItem)
                    };
                });
            });
            if (!formatRule.dataItemName() && dataItems.length) {
                formatRule.dataItemName(dataItems[0].uniqueName());
            }
            propertiesInfo.properties.push(__assign({}, _card_item_format_rule_1.cardItemformatRuleDataItem, { formAdapterItem: _form_adapter_editors_1.dynamicSelectBoxEditor(dataItemsDisplayText) }));
            return getCommonCardFormatRuleProperties(formatRule, dashboardItem, propertiesInfo, selectedRuleContainer);
        },
        getMiscFormatRuleProperties: function () { return ({ properties: [] }); },
        conditionTypeFilter: exports.cardItemConditionTypeFilter,
        getConditionFormatRuleProperties: getConditionFormatRuleProperties,
    });
}
exports.createCardItemFormatRulePropertiesComposer = createCardItemFormatRulePropertiesComposer;
function cardItemDeltaFormatRuleCards(dashboardItem) {
    return dashboardItem.cards();
}
function isDeltaFormatRuleAvaliable(dashboardItem) {
    return cardItemDeltaFormatRuleCards(dashboardItem).length > 0;
}
exports.isDeltaFormatRuleAvaliable = isDeltaFormatRuleAvaliable;
function createCardItemDeltaFormatRulePropertiesComposer(selectedRuleContainer) {
    return new _shared_format_rule_properties_composer_1.FormatRulePropertiesComposer({
        createDataTypeObservable: _shared_format_rule_properties_composer_1.createDeltaDataTypeObservable,
        getCommonFormatRuleProperties: function (formatRule, dashboardItem, dataSourceBrowser, requestRecalculation) {
            var propertiesInfo = {
                properties: [],
                disabledFilterRules: {},
                dynamicEditorRules: {},
                visibilityFilterRules: {}
            };
            var card = cardItemDeltaFormatRuleCards(dashboardItem);
            var cardsDisplayText = ko.pureComputed(function () {
                return card.map(function (card) {
                    return {
                        value: card._getDataId(),
                        displayValueId: _display_name_provider_1.getDataItemContainerDisplayName(dataSourceBrowser, dashboardItem, card)
                    };
                });
            });
            if (!formatRule.cardId() && cardsDisplayText().length) {
                formatRule.cardId(cardsDisplayText()[0].value);
            }
            propertiesInfo.disabledFilterRules[_card_item_delta_format_rule_1.cardId.propertyName] = function (_) { return !!formatRule.condition(); };
            propertiesInfo.disabledFilterRules[_card_item_delta_format_rule_1.deltaValueType.propertyName] = function (_) { return !!formatRule.condition(); };
            propertiesInfo.properties.push(__assign({}, _card_item_delta_format_rule_1.cardId, { formAdapterItem: _form_adapter_editors_1.dynamicSelectBoxEditor(cardsDisplayText) }));
            propertiesInfo.properties.push(__assign({}, _card_item_delta_format_rule_1.deltaValueType, { simpleFormAdapterItem: 'selectBoxEditor', values: _delta_options_1.deltaValueTypeMap }));
            propertiesInfo.properties.push(__assign({}, _card_item_delta_format_rule_1.deltaValueType, { replacementPropertyName: 'fakeDeltaValueTypeActual', sourceObject: ko.observable('ActualValue'), simpleFormAdapterItem: 'selectBoxEditor', values: { 'ActualValue': 'DashboardStringId.DeltaValueTypeActualValueCaption' } }));
            propertiesInfo.properties.push(__assign({}, _card_item_delta_format_rule_1.deltaValueType, { sourceObject: ko.observable('TargetValue'), replacementPropertyName: 'fakeDeltaValueTypeTarget', simpleFormAdapterItem: 'selectBoxEditor', values: { 'TargetValue': 'DashboardStringId.DeltaValueTypeTargetValueCaption' } }));
            var getActualCard = function () { return dashboardItem.cards().filter(function (card) { return card._getDataId() === formatRule.cardId(); })[0]; };
            var hasActualDataItem = function () { return !!getActualCard().actualValue(); };
            var hasTargetDataItem = function () { return !!getActualCard().targetValue(); };
            requestRecalculation.add(function (_) {
                if (dashboardItem.formatRules.indexOf(formatRule) === -1) {
                    if (hasActualDataItem() && !hasTargetDataItem())
                        formatRule.deltaValueType('ActualValue');
                    else if (!hasActualDataItem() && hasTargetDataItem()) {
                        formatRule.deltaValueType('TargetValue');
                    }
                }
            });
            propertiesInfo.visibilityFilterRules[_card_item_delta_format_rule_1.deltaValueType.propertyName] = function (_) { return hasActualDataItem() && hasTargetDataItem(); };
            propertiesInfo.visibilityFilterRules['fakeDeltaValueTypeActual'] = function (_) { return hasActualDataItem() && !hasTargetDataItem(); };
            propertiesInfo.visibilityFilterRules['fakeDeltaValueTypeTarget'] = function (_) { return !hasActualDataItem() && hasTargetDataItem(); };
            propertiesInfo.disabledFilterRules['fakeDeltaValueTypeActual'] = function (_) { return true; };
            propertiesInfo.disabledFilterRules['fakeDeltaValueTypeTarget'] = function (_) { return true; };
            return getCommonCardFormatRuleProperties(formatRule, dashboardItem, propertiesInfo, selectedRuleContainer);
        },
        getConditionFormatRuleProperties: getConditionFormatRuleProperties,
        getMiscFormatRuleProperties: function () { return ({ properties: [] }); },
        conditionTypeFilter: exports.cardItemConditionTypeFilter
    });
}
exports.createCardItemDeltaFormatRulePropertiesComposer = createCardItemDeltaFormatRulePropertiesComposer;
function getConditionFormatRuleProperties(formatRule, dashboardItem) {
    return {
        properties: [__assign({}, _card_item_format_rule_base_1.layoutItemApplyTo, { simpleFormAdapterItem: 'selectBoxEditor', values: _card_layout_template_element_1.сardFormatRuleLayoutElementValuesMap })],
        disabledFilterRules: {},
        dynamicEditorRules: {},
        visibilityFilterRules: {}
    };
}
exports.cardItemConditionTypeFilter = function (conditionTypePropertyName) {
    return ['conditionBar', 'conditionColorRangeBar', 'conditionGradientRangeBar'].indexOf(conditionTypePropertyName) === -1;
};
function getCommonCardFormatRuleProperties(formatRule, dashboardItem, calculatedByProperties, selectedRuleContainer) {
    var _a;
    var propertiesInfo = {
        properties: [],
        disabledFilterRules: {},
        dynamicEditorRules: {},
        visibilityFilterRules: {}
    };
    var selectedRuleType = ko.observable(formatRule.itemType());
    selectedRuleType.subscribe(function (newSelectedContainer) {
        if (newSelectedContainer === 'CardItemFormatRule') {
            selectedRuleContainer(new card_item_format_rule_1.CardItemFormatRule());
        }
        else if (newSelectedContainer === 'CardItemDeltaFormatRule') {
            selectedRuleContainer(new card_item_delta_format_rule_1.CardItemDeltaFormatRule());
        }
    });
    propertiesInfo.properties.push(__assign({}, _base_metadata_1.itemType, { sourceObject: selectedRuleType, replacementPropertyName: 'selectedContainer', displayName: 'DashboardWebStringId.ConditionalFormatting.CalculatedBy', formAdapterItem: _form_adapter_editors_1.buttonGroupEditor([
            {
                displayValueId: 'DashboardWebStringId.ConditionalFormatting.CardRuleTypeCard',
                value: 'CardItemDeltaFormatRule'
            },
            {
                displayValueId: 'DashboardWebStringId.ConditionalFormatting.CardRuleTypeDataItem',
                value: 'CardItemFormatRule'
            }
        ]) }));
    propertiesInfo.disabledFilterRules['selectedContainer'] = function (m) { return !!formatRule.condition() || !isDeltaFormatRuleAvaliable(dashboardItem) || !isDataItemFormatRuleAvaliable(dashboardItem); };
    (_a = propertiesInfo.properties).push.apply(_a, calculatedByProperties.properties);
    propertiesInfo.disabledFilterRules = __assign({}, propertiesInfo.disabledFilterRules, calculatedByProperties.disabledFilterRules);
    propertiesInfo.dynamicEditorRules = __assign({}, propertiesInfo.dynamicEditorRules, calculatedByProperties.dynamicEditorRules);
    propertiesInfo.visibilityFilterRules = __assign({}, propertiesInfo.visibilityFilterRules, calculatedByProperties.visibilityFilterRules);
    return propertiesInfo;
}


/***/ }),
/* 638 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var _data_source_browser_1 = __webpack_require__(40);
var data_item_1 = __webpack_require__(8);
var olap_data_source_1 = __webpack_require__(139);
var sql_data_source_1 = __webpack_require__(90);
var DataFieldViewModel = (function () {
    function DataFieldViewModel(name, displayName, hasItems, specifics, field, isList, isCorruptedCalcField) {
        this.name = name;
        this.displayName = displayName;
        this.hasItems = hasItems;
        this.specifics = specifics;
        this.field = field;
        this.isList = isList;
        this.isCorruptedCalcField = isCorruptedCalcField;
        this.innerActions = ko.observableArray();
    }
    return DataFieldViewModel;
}());
exports.DataFieldViewModel = DataFieldViewModel;
var FieldListItemProvider = (function () {
    function FieldListItemProvider(_dataSourceBrowserViewModel, _getDataFieldArrayCallback, isFieldValid) {
        this._dataSourceBrowserViewModel = _dataSourceBrowserViewModel;
        this._getDataFieldArrayCallback = _getDataFieldArrayCallback;
        this.isFieldValid = isFieldValid;
        this.loading = ko.observable(false);
        this._changeTrigger = ko.observable(false);
    }
    FieldListItemProvider.prototype.triggerItemsChanged = function () {
        this._changeTrigger.valueHasMutated();
    };
    FieldListItemProvider.prototype.getItems = function (pathRequest) {
        var _this = this;
        var deferred = $.Deferred();
        var dataSource = this._dataSourceBrowserViewModel.selectedDataSource();
        this._changeTrigger();
        if (!!dataSource) {
            var _a = _data_source_browser_1.findDataMember(dataSource, pathRequest.path), dataMember = _a.dataMember, fieldPath = _a.fieldPath;
            this.loading(true);
            this._getDataFieldArrayCallback(dataSource.componentName(), dataMember, fieldPath).done(function (dataFields) {
                deferred.resolve(dataFields
                    .filter(function (field) { return !!field.dataMember(); })
                    .filter(function (field) { return !_this.isFieldValid || _this.isFieldValid(field); })
                    .map(function (dataNode) {
                    var name = dataSource instanceof olap_data_source_1.OlapDataSource ? dataNode.dataMember() : dataNode.name();
                    var dataFieldViewModel = new DataFieldViewModel(name, ko.unwrap(dataNode.displayName), !dataNode.isDataFieldNode(), data_item_1.DataItem.typesMap[dataNode.fieldType()] || 'string', dataNode, !_data_source_browser_1.isNonCollectionDataField(dataNode), dataNode.isCorruptedCalcField && dataNode.isCorruptedCalcField());
                    if (dataSource instanceof sql_data_source_1.SqlDataSource) {
                        var canEditNode = false;
                        var canDeleteNode = false;
                        var isSqlQueryNode = pathRequest.path.length === 0;
                        var query = dataSource.queries().filter(function (query) { return query.name() === dataNode.dataMember(); })[0];
                        if (_this._dataSourceBrowserViewModel.canEditDataSource && query != null && isSqlQueryNode) {
                            if (_this._dataSourceBrowserViewModel.canEditCustomSqlQueries || query.type() !== 'CustomSqlQuery') {
                                dataFieldViewModel.innerActions.push({
                                    click: function () {
                                        _this._dataSourceBrowserViewModel.editQuery(dataNode.dataMember());
                                    },
                                    icon: 'dx-dashboard-ds-edit',
                                    style: 'dx-dashboard-datasource-field-icon-edit'
                                });
                            }
                            dataFieldViewModel.innerActions.push({
                                click: function () {
                                    _this._dataSourceBrowserViewModel.removeQuery(dataNode.dataMember());
                                },
                                icon: 'dx-dashboard-remove-small',
                                style: 'dx-dashboard-datasource-field-icon-remove'
                            });
                        }
                    }
                    if (dataNode.nodeType() === 'CalculatedDataField') {
                        dataFieldViewModel.style = 'dx-dashboard-calculated-field';
                        var calcField = dataSource.calculatedFields().filter(function (calculatedField) { return calculatedField.name() === dataNode.dataMember(); })[0];
                        if (calcField) {
                            dataFieldViewModel.innerActions.push({
                                click: function () {
                                    _this._dataSourceBrowserViewModel.editCalcField(calcField);
                                },
                                icon: 'dx-dashboard-ds-edit',
                                style: 'dx-dashboard-datasource-field-icon-edit'
                            });
                            dataFieldViewModel.innerActions.push({
                                click: function () {
                                    _this._dataSourceBrowserViewModel.removeCalcField(calcField);
                                },
                                icon: 'dx-dashboard-remove-small',
                                style: 'dx-dashboard-datasource-field-icon-remove'
                            });
                        }
                    }
                    _this.customizeDataFieldViewModel && _this.customizeDataFieldViewModel(dataFieldViewModel);
                    return dataFieldViewModel;
                }));
            });
        }
        else {
            deferred.resolve([]);
        }
        deferred.always(function () {
            _this.loading(false);
        });
        return deferred.promise();
    };
    return FieldListItemProvider;
}());
exports.FieldListItemProvider = FieldListItemProvider;


/***/ }),
/* 639 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var dashboard_1 = __webpack_require__(89);
var AddDataSourcePopup = (function () {
    function AddDataSourcePopup(accessibleDataSourcesExtension, addDataSourcesCallback, popupVisible) {
        this.title = _default_1.getLocalizationById('DashboardWebStringId.DataSources.AddDataSource');
        this.toolbarItems = [];
        this.addButtonDisable = ko.computed(function () { return accessibleDataSourcesExtension && accessibleDataSourcesExtension().selectedDataSources().length === 0; });
        this.template = accessibleDataSourcesExtension().templateName;
        this.bindingData = accessibleDataSourcesExtension().viewModel;
        this.toolbarItems = [{
                toolbar: 'bottom',
                location: 'after',
                widget: 'dxButton',
                disabled: this.addButtonDisable,
                options: {
                    text: _default_1.getLocalizationById('DashboardWebStringId.DataSources.IncludeToTheDashboard'),
                    type: 'default',
                    onClick: function () {
                        addDataSourcesCallback(accessibleDataSourcesExtension().selectedDataSources().map(function (dataSource) {
                            return dashboard_1.Dashboard._createDataSource(new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer({ useRefs: false }).serialize(dataSource), new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer());
                        }));
                        popupVisible(false);
                    }
                }
            },
            {
                toolbar: 'bottom',
                location: 'after',
                widget: 'dxButton',
                options: {
                    text: _default_1.getLocalizationById('DashboardWebStringId.DataSources.Cancel'),
                    onClick: function () { popupVisible(false); }
                }
            }];
    }
    return AddDataSourcePopup;
}());
exports.AddDataSourcePopup = AddDataSourcePopup;


/***/ }),
/* 640 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var _data_source_browser_1 = __webpack_require__(40);
var _default_1 = __webpack_require__(6);
var json_data_source_1 = __webpack_require__(322);
var sql_data_source_1 = __webpack_require__(90);
var disposable_object_1 = __webpack_require__(11);
var _helper_classes_1 = __webpack_require__(36);
var _undo_engine_helper_1 = __webpack_require__(27);
var _calc_field_editor_1 = __webpack_require__(371);
var _expression_editor_item_provider_1 = __webpack_require__(160);
var _filter_utils_1 = __webpack_require__(158);
var _field_list_item_provider_1 = __webpack_require__(638);
var _add_data_source_popup_1 = __webpack_require__(639);
var DataSourceBrowserViewModel = (function (_super) {
    __extends(DataSourceBrowserViewModel, _super);
    function DataSourceBrowserViewModel(dataSourceBrowser, dataSourceWizardExtension, accessibleDataSourcesExtension, updateHub) {
        var _this = _super.call(this) || this;
        _this.dataSourceBrowser = dataSourceBrowser;
        _this.dataSourceWizardExtension = dataSourceWizardExtension;
        _this.accessibleDataSourcesExtension = accessibleDataSourcesExtension;
        _this.editDataSourceActions = ko.observableArray();
        _this.addDataSources = function (dataSources) {
            dataSources.forEach(function (dataSource) {
                if (!dataSource.name() || !_helper_classes_1.NameGenerator.isValidName(dataSource.name(), _this.dataSourceBrowser._dataSources(), 'name')) {
                    var prefix = !dataSource.name() ? _default_1.getLocalizationById(dataSource.getDisplayNamePrefix()) : dataSource.name();
                    dataSource.name(_helper_classes_1.NameGenerator.generateName(prefix + ' ', _this.dataSourceBrowser._dataSources(), 'name', 1));
                }
                _this.dataSourceBrowser._dataSources.push(dataSource);
                _this.selectedDataSource(dataSource);
            });
        };
        _this.addQuery = function () {
            _this.editQuery(null);
        };
        _this.dataSourceActions = ko.observableArray();
        _this.removeDataSource = function (dataSource) {
            _this._removeDataSource(dataSource);
        };
        _this.usedDataSourcesExist = function () {
            return _this.dataSourceBrowser._dataSources().length > 0;
        };
        _this.availableDataSourcesExist = function () {
            return _this.accessibleDataSourcesExtension() && _this.accessibleDataSourcesExtension().dataSources().length > 0;
        };
        _this.popupContent = ko.observable();
        _this.popupVisible = ko.computed({
            read: function () {
                return !!_this.popupContent();
            },
            write: function (val) {
                if (!val) {
                    _this.popupContent(undefined);
                }
            }
        });
        _this.addCalculatedField = function () {
            if (_this.canAddCalculatedField) {
                var dataSource = _this.selectedDataSource();
                var _a = _data_source_browser_1.findDataMember(dataSource, _data_source_browser_1.trimLeadingPathElement(_this.selectedPath(), dataSource.componentName())), dataMember = _a.dataMember, fieldPath = _a.fieldPath;
                if (!dataMember && dataSource.supportDataMembers) {
                    dataMember = _data_source_browser_1.getFirstDataMember(dataSource);
                }
                var pathInCache = [_this.selectedDataSourceComponentName()].concat(dataMember ? [dataMember] : []);
                _this.calcFieldEditor.showAddDialog(dataSource.componentName(), dataMember)
                    .then(function (calcField) {
                    var newCalculatedFieldPath = pathInCache.concat([calcField.name()]);
                    _this.selectedPath(newCalculatedFieldPath.join('.'));
                });
            }
        };
        _this.editCalcField = function (field) {
            _this.calcFieldEditor.showEditDialog(field, _this.selectedDataSourceComponentName(), field.dataMember());
        };
        _this.removeCalcField = function (field) {
            _this.calcFieldEditor.removeCalcField(field, _this.selectedDataSource().componentName());
        };
        _this.treeListController = new DashboardTreeListController();
        _this.selectedPath = ko.observable();
        _this.selectedDataSource = ko.observable();
        _this.filterEditorModel = ko.computed(function () {
            if (_this.selectedDataSource() && _this.selectedDataSource().hasFilter) {
                var filterString = _this.selectedDataSource().filter;
                var options = _filter_utils_1.createItemFilterOptions(filterString, undefined, _this.dataSourceBrowser);
                options().path(_this.selectedDataSource().componentName());
                var filterEditorItemsProvider = new _expression_editor_item_provider_1.ExpressionEditorItemsProvider(_this.dataSourceBrowser, _this.dataSourceBrowser, _this.dataSourceBrowser.parameters(), _this.selectedDataSource().componentName, ko.observable(''), function (field) { return !field.isAggregate(); });
                return new dx_analytics_core_1.default.Analytics.Widgets.FilterEditor(options, ko.observable(filterEditorItemsProvider));
            }
            return null;
        });
        _this.editFilter = function () {
            _this.filterEditorModel() && _this.filterEditorModel().popupVisible(true);
        };
        var getFieldsCallback = function (dataSourceName, dataMember, fieldPath) { return _this.dataSourceBrowser.getDataFieldsArray(dataSourceName, dataMember, fieldPath, function () { return true; }); };
        _this.itemsProvider = new _field_list_item_provider_1.FieldListItemProvider(_this, getFieldsCallback);
        _this.calcFieldEditor = new _calc_field_editor_1.CalcFieldEditor(_this.dataSourceBrowser);
        if (dataSourceBrowser._dataSources().length > 0) {
            _this.selectedDataSource(dataSourceBrowser._dataSources()[0]);
        }
        _this.selectedDataSourceComponentName = ko.computed(function () {
            return _this.selectedDataSource() && _this.selectedDataSource().componentName() || '';
        });
        _this.allowAddQuery = ko.computed(function () {
            return _this.selectedDataSource() instanceof sql_data_source_1.SqlDataSource;
        });
        _this.allowEditDataSource = ko.computed(function () {
            return _this.selectedDataSource() instanceof json_data_source_1.JsonDataSource;
        });
        _this.toDispose(_this.allowAddQuery);
        _this.toDispose(_this.allowEditDataSource);
        _this.toDispose(updateHub.dataSourcePropertyChanged.add(function (args) { return _this._onDataSourcePropertyChanged(args); }));
        _this.toDispose(_this.selectedDataSource.subscribe(function (dataSource) {
            _this.selectedPath('');
            if (dataSource instanceof sql_data_source_1.SqlDataSource) {
                var sqlDataSource = dataSource;
                if (sqlDataSource.queries.length > 0)
                    _this._expandQuery(sqlDataSource, sqlDataSource.queries()[0].name());
            }
        }));
        if (_this.accessibleDataSourcesExtension()) {
            _this.dataSourceActions.push({
                click: function () { return _this.showAddDataSourceForm(); },
                text: _default_1.getLocalizationById('DashboardWebStringId.Add'),
                disabled: ko.computed(function () { return !_this.availableDataSourcesExist(); })
            });
        }
        _this.editDataSourceActions.push({
            click: function () { return _this.addCalculatedField(); },
            text: _default_1.getLocalizationById('DashboardWebStringId.DataSources.AddCalculatedField'),
            visible: ko.computed(function () { return _this.canAddCalculatedField; })
        });
        if (_this.canEditDataSource) {
            _this.editDataSourceActions.push({
                click: function () { return _this.addQuery(); },
                text: _default_1.getLocalizationById('DashboardWebStringId.DataSources.AddQuery'),
                visible: ko.computed(function () { return _this.allowAddQuery(); })
            });
            _this.editDataSourceActions.push({
                click: function () { return _this.editDataSource(); },
                text: _default_1.getLocalizationById('DashboardWebStringId.DataSources.Edit'),
                visible: ko.computed(function () { return _this.allowEditDataSource(); })
            });
        }
        _this.editDataSourceActions.push({
            click: function () { return _this.editFilter(); },
            text: _default_1.getLocalizationById('DashboardWebStringId.DataSources.Filter'),
            visible: ko.computed(function () { return _this.filterEditorModel() !== null; })
        });
        return _this;
    }
    DataSourceBrowserViewModel.prototype._expandQuery = function (dataSource, queryName) {
        var _this = this;
        this.dataSourceBrowser.getDataFieldsArray(dataSource.componentName(), queryName, '', _data_source_browser_1.isNonCollectionDataField).done(function (dataFields) {
            if (dataFields.length > 0) {
                _this.selectedPath([dataSource.componentName(), queryName, dataFields[0].name()].join('.'));
            }
        });
    };
    Object.defineProperty(DataSourceBrowserViewModel.prototype, "canEditDataSource", {
        get: function () {
            return !!this.dataSourceWizardExtension();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSourceBrowserViewModel.prototype, "canEditCustomSqlQueries", {
        get: function () {
            return this.dataSourceWizardExtension() && this.dataSourceWizardExtension().isCustomSqlEnabled || false;
        },
        enumerable: true,
        configurable: true
    });
    DataSourceBrowserViewModel.prototype.refreshFieldList = function () {
        this.dataSourceBrowser.clearFieldsCache(this.selectedDataSourceComponentName());
        this.dataSourceBrowser.initDataSource(this.selectedDataSource());
        this.itemsProvider.triggerItemsChanged();
    };
    DataSourceBrowserViewModel.prototype.showAddDataSourceForm = function () {
        this.popupContent(new _add_data_source_popup_1.AddDataSourcePopup(this.accessibleDataSourcesExtension, this.addDataSources, this.popupVisible));
    };
    DataSourceBrowserViewModel.prototype.editQuery = function (queryName) {
        if (this.canEditDataSource) {
            this.dataSourceWizardExtension().showSqlQueryEditingDialog(this.selectedDataSource(), queryName);
        }
    };
    DataSourceBrowserViewModel.prototype.removeQuery = function (queryName) {
        var sqlDataSource = this.selectedDataSource();
        if (sqlDataSource) {
            var queryToRemove = sqlDataSource.queries().filter(function (query) { return query.name() === queryName; })[0];
            if (queryToRemove) {
                sqlDataSource.queries.remove(queryToRemove);
                sqlDataSource.calculatedFields.remove(function (calcFiled) { return calcFiled.dataMember() === queryName; });
            }
        }
    };
    DataSourceBrowserViewModel.prototype.editDataSource = function () {
        if (this.canEditDataSource) {
            var selectedDataSource = this.selectedDataSource();
            if (selectedDataSource instanceof json_data_source_1.JsonDataSource)
                this.dataSourceWizardExtension()._showEditJsonDataSourceDialog(selectedDataSource);
        }
    };
    DataSourceBrowserViewModel.prototype._removeDataSource = function (dataSource) {
        this.selectedDataSource(null);
        this.dataSourceBrowser.removeDataSource(dataSource);
        if (this.dataSourceBrowser._dataSources().length > 0) {
            this.selectedDataSource(this.dataSourceBrowser._dataSources()[0]);
        }
    };
    Object.defineProperty(DataSourceBrowserViewModel.prototype, "canAddCalculatedField", {
        get: function () {
            return this.calcFieldEditor.canAddCalculatedField(this.selectedDataSourceComponentName());
        },
        enumerable: true,
        configurable: true
    });
    DataSourceBrowserViewModel.prototype._onDataSourcePropertyChanged = function (args) {
        if (!args.propertyName)
            this.refreshFieldList();
        else {
            if (args.dataSource instanceof sql_data_source_1.SqlDataSource) {
                var sqlDataSource = args.dataSource;
                switch (args.propertyName) {
                    case 'queries':
                        if (args.status === 'added') {
                            var queryName = args.model.name();
                            this._expandQuery(sqlDataSource, queryName);
                            this.refreshFieldList();
                        }
                        else if (args.status === 'deleted') {
                            this.refreshFieldList();
                        }
                }
            }
            else if (args.dataSource instanceof json_data_source_1.JsonDataSource) {
                switch (args.propertyName) {
                    case 'rootElement':
                    case 'schema':
                        this.refreshFieldList();
                        break;
                }
            }
            if (args.dataSource.hasCalculatedFields) {
                switch (args.propertyName) {
                    case 'fieldType':
                    case 'expression':
                        this.refreshFieldList();
                        break;
                    case 'calculatedFields':
                        if (args.status === 'added' || args.status === 'deleted')
                            this.refreshFieldList();
                        break;
                }
            }
        }
    };
    __decorate([
        _undo_engine_helper_1.wrapWithUndoRedo
    ], DataSourceBrowserViewModel.prototype, "_removeDataSource", null);
    return DataSourceBrowserViewModel;
}(disposable_object_1.DisposableObject));
exports.DataSourceBrowserViewModel = DataSourceBrowserViewModel;
var DashboardTreeListController = (function (_super) {
    __extends(DashboardTreeListController, _super);
    function DashboardTreeListController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DashboardTreeListController.prototype.hasItems = function (item) {
        return item['hasItems'];
    };
    DashboardTreeListController.prototype.canSelect = function (value) {
        return !value.data.isList;
    };
    return DashboardTreeListController;
}(dx_analytics_core_1.default.Analytics.Widgets.Internal.TreeListController));


/***/ }),
/* 641 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_querybuilder_1 = __webpack_require__(1);
var page_id_1 = __webpack_require__(232);
var DataSourceWizardPageIteratorBase = (function (_super) {
    __extends(DataSourceWizardPageIteratorBase, _super);
    function DataSourceWizardPageIteratorBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DataSourceWizardPageIteratorBase.prototype.getInitialPage = function () {
        return page_id_1.DataSourceWizardPageId.ChooseDataSourceTypePage;
    };
    DataSourceWizardPageIteratorBase.prototype.getNextPageId = function (pageId) {
        if (!pageId) {
            return this.getInitialPage();
        }
        else {
            var currentState = this._getCurrentState();
            switch (pageId) {
                case page_id_1.DataSourceWizardPageId.ChooseDataSourceTypePage:
                    switch (currentState.dashboardDataSourceType) {
                        case 'Sql':
                            return dx_querybuilder_1.default.Analytics.Wizard.SqlDataSourceWizardPageId.ChooseConnectionPage;
                        case 'Olap':
                            return page_id_1.OlapDataSourceWizardPageId.ChooseConnectionPage;
                        case 'Json':
                            return dx_querybuilder_1.default.Analytics.Wizard.JsonDataSourceWizardPageId.ChooseConnectionPage;
                        default:
                            throw new Error('Unknown datasource type.');
                    }
                case dx_querybuilder_1.default.Analytics.Wizard.SqlDataSourceWizardPageId.ChooseConnectionPage:
                    return this.getConfigureQueryPage();
                case dx_querybuilder_1.default.Analytics.Wizard.ObjectDataSourceWizardPageId.ChooseTypesPage:
                    return dx_querybuilder_1.default.Analytics.Wizard.ObjectDataSourceWizardPageId.ChooseDataMembersPage;
                case dx_querybuilder_1.default.Analytics.Wizard.ObjectDataSourceWizardPageId.ChooseDataMembersPage:
                    return dx_querybuilder_1.default.Analytics.Wizard.ObjectDataSourceWizardPageId.ConfigureParametersPage;
                case this.getConfigureQueryPage():
                    return this.getConfigureSqlParametersPage();
                case dx_querybuilder_1.default.Analytics.Wizard.JsonDataSourceWizardPageId.ChooseConnectionPage:
                    if (currentState.jsonDataSourceWizard.connectionName) {
                        return dx_querybuilder_1.default.Analytics.Wizard.JsonDataSourceWizardPageId.ChooseJsonSchemaPage;
                    }
                    else {
                        return dx_querybuilder_1.default.Analytics.Wizard.JsonDataSourceWizardPageId.ChooseJsonSourcePage;
                    }
                case dx_querybuilder_1.default.Analytics.Wizard.JsonDataSourceWizardPageId.ChooseJsonSourcePage:
                    return dx_querybuilder_1.default.Analytics.Wizard.JsonDataSourceWizardPageId.ChooseJsonSchemaPage;
            }
        }
    };
    DataSourceWizardPageIteratorBase.prototype.getConfigureQueryPage = function () {
        return dx_querybuilder_1.default.Analytics.Wizard.SqlDataSourceWizardPageId.ConfigureQueryPage;
    };
    DataSourceWizardPageIteratorBase.prototype.getConfigureSqlParametersPage = function () {
        return dx_querybuilder_1.default.Analytics.Wizard.SqlDataSourceWizardPageId.ConfigureParametersPage;
    };
    DataSourceWizardPageIteratorBase.prototype.getConfigureObjectParametersPage = function () {
        return dx_querybuilder_1.default.Analytics.Wizard.ObjectDataSourceWizardPageId.ConfigureParametersPage;
    };
    return DataSourceWizardPageIteratorBase;
}(dx_querybuilder_1.default.Analytics.Wizard.PageIterator));
exports.DataSourceWizardPageIteratorBase = DataSourceWizardPageIteratorBase;


/***/ }),
/* 642 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_querybuilder_1 = __webpack_require__(1);
var _utils_1 = __webpack_require__(3);
var _data_source_wizard_model_1 = __webpack_require__(230);
var choose_data_source_type_page_1 = __webpack_require__(376);
var choose_olap_connection_string_page_1 = __webpack_require__(377);
var _choose_json_schema_page_1 = __webpack_require__(231);
var _create_query_page_1 = __webpack_require__(373);
var _parameters_item_provider_1 = __webpack_require__(161);
var _data_source_wizard_page_iterator_1 = __webpack_require__(641);
var _edit_query_wizard_1 = __webpack_require__(374);
var DashboardMultiQueryWizardIterator = (function (_super) {
    __extends(DashboardMultiQueryWizardIterator, _super);
    function DashboardMultiQueryWizardIterator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DashboardMultiQueryWizardIterator.prototype.getInitialPage = function () {
        return _super.prototype.getInitialPage.call(this);
    };
    DashboardMultiQueryWizardIterator.prototype.getConfigureQueryPage = function () {
        return dx_querybuilder_1.default.Analytics.Wizard.SqlDataSourceWizardPageId.MultiQueryConfigurePage;
    };
    DashboardMultiQueryWizardIterator.prototype.getConfigureSqlParametersPage = function () {
        return dx_querybuilder_1.default.Analytics.Wizard.SqlDataSourceWizardPageId.MultiQueryConfigureParametersPage;
    };
    return DashboardMultiQueryWizardIterator;
}(_data_source_wizard_page_iterator_1.DataSourceWizardPageIteratorBase));
exports.DashboardMultiQueryWizardIterator = DashboardMultiQueryWizardIterator;
var DashboardMultiQueryDataSourceWizard = (function (_super) {
    __extends(DashboardMultiQueryDataSourceWizard, _super);
    function DashboardMultiQueryDataSourceWizard(pageFactory) {
        var _this = _super.call(this, pageFactory) || this;
        _this._extendCssClass = 'dxrd-multiqueries-sqldatasource-wizard';
        _this.height(443);
        return _this;
    }
    return DashboardMultiQueryDataSourceWizard;
}(_edit_query_wizard_1.DashboardQueryWizard));
exports.DashboardMultiQueryDataSourceWizard = DashboardMultiQueryDataSourceWizard;
function createDashboardMultiQueryWizard(requestWrapper, parameters, disableCustomSql, allowCreateNewJsonConnection, wizardSettings, dashboardConnectionStrings) {
    var factory = new dx_querybuilder_1.default.Analytics.Wizard.PageFactory();
    var wizardOptions = new _data_source_wizard_model_1.DashboardMultiQueryDataSourceWizardOptions();
    wizardOptions.callbacks = _create_query_page_1.createQueryPageCallback(requestWrapper, parameters, DashboardMultiQueryDataSourceWizard.customQueriesPreset);
    wizardOptions.disableCustomSql = disableCustomSql;
    wizardOptions.requestWrapper = requestWrapper;
    wizardOptions.wizardSettings.enableSqlDataSource = wizardSettings && _utils_1.type.isDefined(wizardSettings.enableSqlDataSource) ? wizardSettings.enableSqlDataSource : true;
    wizardOptions.wizardSettings.enableJsonDataSource = wizardSettings && _utils_1.type.isDefined(wizardSettings.enableJsonDataSource) ? wizardSettings.enableJsonDataSource : true;
    wizardOptions.wizardSettings.enableOlapDataSource = wizardSettings && _utils_1.type.isDefined(wizardSettings.enableOlapDataSource) ? wizardSettings.enableOlapDataSource : true;
    wizardOptions.wizardSettings.enableObjectDataSource = false;
    wizardOptions.allowCreateNewJsonConnection = allowCreateNewJsonConnection || false;
    wizardOptions.connectionStrings = dashboardConnectionStrings;
    choose_data_source_type_page_1._registerChooseDataSourceTypePage(factory, wizardOptions);
    dx_querybuilder_1.default.Analytics.Wizard._registerChooseSqlConnectionPage(factory, dashboardConnectionStrings.sql);
    choose_olap_connection_string_page_1._registerOlapConnectionStringsPage(factory, dashboardConnectionStrings.olap);
    dx_querybuilder_1.default.Analytics.Wizard._registerMultiQueryConfigurePage(factory, wizardOptions);
    dx_querybuilder_1.default.Analytics.Wizard._registerMultiQueryConfigureParametersPage(factory, requestWrapper);
    dx_querybuilder_1.default.Analytics.Wizard._registerChooseJsonConnectionPage(factory, wizardOptions);
    dx_querybuilder_1.default.Analytics.Wizard._registerChooseJsonSourcePage(factory, requestWrapper, function () { return new _parameters_item_provider_1.ParametersItemProvider(parameters()); });
    _choose_json_schema_page_1._registerChooseJsonSchemaPage(factory, requestWrapper);
    dx_querybuilder_1.default.Analytics.Wizard._registerChooseObjectDataSourceTypesPage(factory, wizardOptions);
    dx_querybuilder_1.default.Analytics.Wizard._registerChooseObjectDataSourceDataMembersPage(factory, wizardOptions);
    dx_querybuilder_1.default.Analytics.Wizard._registerConfigureObjectDataSourceParametersPage(factory, function () { return new _parameters_item_provider_1.ParametersItemProvider(parameters()); });
    var multiQueryConfigurePageMeta = factory.getMetadata(dx_querybuilder_1.default.Analytics.Wizard.SqlDataSourceWizardPageId.MultiQueryConfigurePage);
    multiQueryConfigurePageMeta.canNext = function (page) { return page._hasParametersToEdit(); };
    return new DashboardMultiQueryDataSourceWizard(factory);
}
exports.createDashboardMultiQueryWizard = createDashboardMultiQueryWizard;


/***/ }),
/* 643 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var model_1 = __webpack_require__(38);
var _data_field_1 = __webpack_require__(14);
var data_item_container_1 = __webpack_require__(141);
var _base_metadata_1 = __webpack_require__(4);
var DataItemContainerSeed = (function (_super) {
    __extends(DataItemContainerSeed, _super);
    function DataItemContainerSeed(dataItemProvider, dataItemType) {
        var _this = _super.call(this) || this;
        _this.dataItemType = dataItemType;
        _this.name = ko.observable('NewContainer');
        _this.dataLink = new model_1.DataItemLink(dataItemProvider);
        _this.dataLink.itemType('Seed');
        return _this;
    }
    DataItemContainerSeed.prototype._getDataId = function () {
        return null;
    };
    DataItemContainerSeed.prototype._getContainerType = function () {
        return 'Stub';
    };
    DataItemContainerSeed.prototype._getBindingModel = function () {
        return [{
                propertyName: 'dataLink',
                dataItemType: this.dataItemType,
                emptyPlaceholder: 'Data',
                selectedPlaceholder: 'Configure Data'
            }];
    };
    DataItemContainerSeed.prototype.grow = function (dataItemProvider, bindingProperty, dataField) {
        var containerModels = [];
        if (!_data_field_1.IsOlapHierarchyField(dataField)) {
            var cm = bindingProperty.creator(undefined, dataField);
            var dataItem = dataItemProvider._createDataItem(dataField, cm._getBindingModel()[0]);
            var newDataItemBinding = cm._getBindingModel()[0];
            cm[newDataItemBinding.propertyName].uniqueName(dataItem.uniqueName());
            containerModels.push(cm);
        }
        else {
            dataField.groupDataItems.forEach(function (groupItem) {
                var cm = bindingProperty.creator(undefined, groupItem);
                var dataItem = dataItemProvider._createDataItem(groupItem, cm._getBindingModel()[0]);
                dataItem.groupIndex(dataField.groupIndex());
                var newDataItemBinding = cm._getBindingModel()[0];
                cm[newDataItemBinding.propertyName].uniqueName(dataItem.uniqueName());
                containerModels.push(cm);
            });
        }
        return containerModels;
    };
    DataItemContainerSeed.prototype._getInfoCore = function () {
        return [_base_metadata_1.itemType, name];
    };
    DataItemContainerSeed.prototype._getDefaultItemType = function () {
        return 'Stub';
    };
    return DataItemContainerSeed;
}(data_item_container_1.DataItemContainer));
exports.DataItemContainerSeed = DataItemContainerSeed;


/***/ }),
/* 644 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var _data_source_browser_1 = __webpack_require__(40);
var _undo_engine_helper_1 = __webpack_require__(27);
var _accordion_tab_1 = __webpack_require__(7);
var _display_name_provider_1 = __webpack_require__(24);
var _data_item_surface_1 = __webpack_require__(227);
var DataItemContainerSurface = (function () {
    function DataItemContainerSurface(model, detailsPropertiesComposer, itemSurface, _removeDataItemContainer) {
        var _this = this;
        this.detailsPropertiesComposer = detailsPropertiesComposer;
        this.itemSurface = itemSurface;
        this._removeDataItemContainer = _removeDataItemContainer;
        this._disposables = [];
        this.propertiesTabs = ko.observableArray([]);
        this.selectItem = function (model, binding) {
            if (model[binding.propertyName]._specifics.isAttribute &&
                _this.model()._getBindingModel().some(function (bindingProp) { return _this.model()[bindingProp.propertyName] !== model[binding.propertyName] && !_this.model()[bindingProp.propertyName].dataItem(); }))
                return;
            var dataItemSurface = new _data_item_surface_1.DataItemSurface(model[binding.propertyName], binding, _this.itemSurface.dashboardItem, _this.itemSurface._dataSourceBrowser, _this.itemSurface.propertiesController, false);
            dataItemSurface.newItemCreated.add(function (link, newField) {
                if (!_this.model()._getBindingModel().some(function (bindingProp) {
                    return (_this.model()[bindingProp.propertyName] !== link) && _this.model()[bindingProp.propertyName].dataItem();
                })) {
                    _this.dataFieldChoosed.fire(newField, link);
                }
            });
            _this.itemSurface.propertiesController.secondaryModel({
                displayText: binding.emptyPlaceholder,
                data: dataItemSurface
            });
        };
        this.model = ko.observable();
        this.containerType = ko.observable();
        this.singleItemSurface = ko.observable();
        this.dataFieldChoosed = $.Callbacks();
        this.removeDataItem = function (dataItemLink) {
            _this._removeDataItem(dataItemLink);
        };
        this.dataItemDisplayNameProvider = function (dataItem) {
            return _display_name_provider_1.getDataItemDisplayName(_this.itemSurface._dataSourceBrowser, _this.itemSurface.dashboardItem, dataItem);
        };
        if (model.itemType) {
            this.containerType(model._getContainerType());
        }
        var updatePropertiesTabs = function (otherTabs) {
            var promises = [];
            promises.push(_this.itemSurface._dataSourceBrowser.getDataFieldsArray(_this.itemSurface.dashboardItem.dataSource(), _this.itemSurface.dashboardItem.dataMember(), '', _data_source_browser_1.isNonCollectionDataField));
            _this.model()._getBindingModel().forEach(function (b) {
                _this.model()[b.propertyName].uniqueName() && promises.push(_this.itemSurface._dataSourceBrowser.findDataField(_this.itemSurface.dashboardItem.dataSource(), _this.itemSurface.dashboardItem.dataMember(), _this.model()[b.propertyName].dataItem().dataMember()));
            });
            $.when.apply($, promises).done(function () {
                var fields = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    fields[_i] = arguments[_i];
                }
                otherTabs = otherTabs.concat(_this.detailsPropertiesComposer.composeTabs(_this.model(), {
                    dashboardItem: _this.itemSurface.dashboardItem,
                    containerType: _this.containerType,
                    dataSourceBrowser: _this.itemSurface._dataSourceBrowser
                }));
                _this.propertiesTabs(otherTabs);
            });
        };
        this._disposables.push(this.model.subscribe(function (newModel) {
            if (!!_this.singleItemSurface.peek()) {
                _this.singleItemSurface.peek().dispose();
                _this.singleItemSurface(null);
            }
            if (newModel._getBindingModel().length === 1) {
                var binding = newModel._getBindingModel()[0];
                var dataItemSurface = new _data_item_surface_1.DataItemSurface(newModel[binding.propertyName], binding, _this.itemSurface.dashboardItem, _this.itemSurface._dataSourceBrowser, _this.itemSurface.propertiesController, false);
                dataItemSurface.newItemCreated.add(function (link, newField) {
                    _this.dataFieldChoosed.fire(newField, link);
                });
                _this.singleItemSurface(dataItemSurface);
                _this._disposables.push(dataItemSurface.propertiesTabs.subscribe(function (newTabs) {
                    updatePropertiesTabs(dataItemSurface.propertiesTabs());
                }));
                updatePropertiesTabs(dataItemSurface.propertiesTabs());
            }
            else if (newModel._getBindingModel().length > 1) {
                updatePropertiesTabs([new _accordion_tab_1.ItemGroupAccordionTab(_accordion_tab_1.KnownTabs.DataItemsGroup, 'Data Items', _this)]);
            }
            else {
                updatePropertiesTabs([]);
            }
        }));
        this.model(model);
        this._disposables.push({
            dispose: function () {
                _this.dataFieldChoosed.empty();
            }
        });
    }
    DataItemContainerSurface.prototype._removeDataItem = function (dataItemLink) {
        var _this = this;
        var dataItem = dataItemLink.dataItem();
        if (!!dataItem) {
            dataItemLink.uniqueName(undefined);
            this.itemSurface.dashboardItem._removeDataItem(dataItem);
            if (!this.model()._getBindingModel().some(function (b) { return !!_this.model()[b.propertyName].dataItem() && !_this.model()[b.propertyName]._specifics.isAttribute; })) {
                this.itemSurface.propertiesController.mainModel(null);
                this._removeDataItemContainer(this.model());
            }
        }
    };
    DataItemContainerSurface.prototype.dataItemErrorFactory = function (dataItem) {
        var _this = this;
        var dataItemLinkErrorState = ko.observable(false);
        this._disposables.push(ko.computed(function () {
            if (!!dataItem && dataItem.dataMember()) {
                _this.itemSurface._dataSourceBrowser.findDataField(_this.itemSurface.dashboardItem.dataSource(), _this.itemSurface.dashboardItem.dataMember(), dataItem.dataMember()).done(function (result) {
                    dataItemLinkErrorState(!result);
                });
            }
        }));
        return dataItemLinkErrorState;
    };
    DataItemContainerSurface.prototype.dispose = function () {
        this._disposables.forEach(function (d) {
            d.dispose();
        });
    };
    __decorate([
        _undo_engine_helper_1.wrapWithUndoRedo
    ], DataItemContainerSurface.prototype, "_removeDataItem", null);
    return DataItemContainerSurface;
}());
exports.DataItemContainerSurface = DataItemContainerSurface;
ko.components.register('dx-dashboard-group-data-items', {
    viewModel: function (params) {
        var model = ko.unwrap(params.model);
        var viewModel = {
            dataItems: model._getBindingModel().map(function (binding) {
                return {
                    binding: binding,
                    item: model[binding.propertyName],
                    placeholder: binding.emptyPlaceholder,
                    removeDataItem: function (item) {
                        params.holder.removeDataItem && params.holder.removeDataItem(item);
                    },
                    dataItemDisplayNameProvider: function (dataItem) {
                        return params.holder.dataItemDisplayNameProvider && params.holder.dataItemDisplayNameProvider(dataItem) || '';
                    },
                    click: function () {
                        params.holder.selectItem && params.holder.selectItem(model, binding) || '';
                    }
                };
            }),
            holder: params.holder
        };
        return viewModel;
    },
    template: { element: 'dx-dashboard-group-data-items' }
});


/***/ }),
/* 645 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _bound_image_item_1 = __webpack_require__(202);
var _image_item_1 = __webpack_require__(137);
var _accordion_tab_1 = __webpack_require__(7);
var _base_properties_composer_1 = __webpack_require__(12);
var _shared_composers_1 = __webpack_require__(13);
var BoundImageItemPropertiesComposer = (function (_super) {
    __extends(BoundImageItemPropertiesComposer, _super);
    function BoundImageItemPropertiesComposer(customizeHandler) {
        return _super.call(this, customizeHandler) || this;
    }
    BoundImageItemPropertiesComposer.prototype._composeTabsCore = function (model) {
        var specificDisabledRules = {};
        specificDisabledRules[_bound_image_item_1.uriPattern.propertyName] = [_bound_image_item_1.dataBindingMode.propertyName, '<>', 'Uri'];
        var result = [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.ImageOptions', _shared_composers_1.SharedComposers.getCommonWrapper(model, [
                _bound_image_item_1.dataBindingMode,
                _bound_image_item_1.uriPattern,
                _image_item_1.sizeMode,
                _image_item_1.horizontalAlignment,
                _image_item_1.verticalAlignment,
            ], specificDisabledRules))
        ];
        return result;
    };
    return BoundImageItemPropertiesComposer;
}(_base_properties_composer_1.DashboardItemPropertiesComposer));
exports.BoundImageItemPropertiesComposer = BoundImageItemPropertiesComposer;


/***/ }),
/* 646 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _geo_point_map_item_base_1 = __webpack_require__(68);
var _map_item_1 = __webpack_require__(44);
var _accordion_tab_1 = __webpack_require__(7);
var _base_properties_composer_1 = __webpack_require__(12);
var _shared_composers_1 = __webpack_require__(13);
var BubleMapItemPropertiesComposer = (function (_super) {
    __extends(BubleMapItemPropertiesComposer, _super);
    function BubleMapItemPropertiesComposer(customizeHandler) {
        return _super.call(this, customizeHandler) || this;
    }
    BubleMapItemPropertiesComposer.prototype._composeTabsCore = function (model, args) {
        var commonTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common');
        ko.computed(function () {
            commonTab.tabModel(_shared_composers_1.SharedComposers.getCommonMapWrapper(model, args.propertiesController, [
                _map_item_1.lockNavigation,
                _geo_point_map_item_base_1.enableClustering,
                _shared_composers_1.SharedComposers.getShapeTitleSerializationInfo(model)
            ]));
        });
        return [
            commonTab,
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ColorLegend, 'DashboardWebStringId.AccordionTab.MapLegend', _shared_composers_1.SharedComposers.getColorLegendWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.WeightedLegend, 'DashboardWebStringId.AccordionTab.WeightedLegend', _shared_composers_1.SharedComposers.getWeightedLegendWrapper(model))
        ];
    };
    return BubleMapItemPropertiesComposer;
}(_base_properties_composer_1.DashboardItemPropertiesComposer));
exports.BubleMapItemPropertiesComposer = BubleMapItemPropertiesComposer;


/***/ }),
/* 647 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var card_item_delta_format_rule_1 = __webpack_require__(126);
var _dashboard_item_format_rule_1 = __webpack_require__(52);
var _undo_engine_helper_1 = __webpack_require__(27);
var card_1 = __webpack_require__(208);
var card_layout_template_1 = __webpack_require__(209);
var _card_1 = __webpack_require__(290);
var _card_row_1 = __webpack_require__(292);
var _data_dashboard_item_1 = __webpack_require__(26);
var _sparkline_options_1 = __webpack_require__(193);
var _base_metadata_1 = __webpack_require__(4);
var _form_adapter_editors_1 = __webpack_require__(22);
var _object_properties_wrapper_1 = __webpack_require__(10);
var _accordion_tab_1 = __webpack_require__(7);
var _display_name_provider_1 = __webpack_require__(24);
var _base_properties_composer_1 = __webpack_require__(12);
var _shared_composers_1 = __webpack_require__(13);
var CardElementPropertiesComposer = (function (_super) {
    __extends(CardElementPropertiesComposer, _super);
    function CardElementPropertiesComposer(customizeHandler, editTemplateHandler, editFormat, applyTemplateToAllCards, editRuleHandler) {
        if (editTemplateHandler === void 0) { editTemplateHandler = function (model) { }; }
        if (editFormat === void 0) { editFormat = function (model) { }; }
        if (applyTemplateToAllCards === void 0) { applyTemplateToAllCards = function (template) { }; }
        if (editRuleHandler === void 0) { editRuleHandler = function () { }; }
        var _this = _super.call(this, customizeHandler) || this;
        _this.editTemplateHandler = editTemplateHandler;
        _this.editFormat = editFormat;
        _this.applyTemplateToAllCards = applyTemplateToAllCards;
        _this.editRuleHandler = editRuleHandler;
        return _this;
    }
    CardElementPropertiesComposer.prototype._composeTabsCore = function (model, args) {
        var commonTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.Options', this.getCommonWrapper(model, args.dashboardItem, args.dataSourceBrowser)), deltaTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.DeltaOptions, 'DashboardWebStringId.Grid.DeltaOptions'), sparklineTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.SparklineOptions, 'DashboardWebStringId.Card.SparklineOptions', this.getSparklineWrapper(model)), templatesTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.CardTemplates, 'DashboardWebStringId.CardLayout.Editor.CardLayout'), deltaFormatsTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.DeltaFormats, 'DashboardWebStringId.CardLayout.Editor.FormatOptions'), conditionalFormattingTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ConditionalFormatting, 'DashboardWebStringId.ConditionalFormatting'), result = [commonTab, templatesTab, deltaTab, sparklineTab, deltaFormatsTab, conditionalFormattingTab];
        if (model instanceof card_1.Card) {
            ko.computed(function () {
                deltaTab.tabModel(_shared_composers_1.SharedComposers.getDeltaOptionsWrapper(model._isTypeEmpty() ? model.deltaOptions : model.cardDeltaOptions));
            });
            conditionalFormattingTab.tabModel(this.getFormatRulesWrapper(model, args.dashboardItem));
            this.fillTemplatesTab(templatesTab, model);
            deltaFormatsTab.tabModel(_shared_composers_1.SharedComposers.getDeltaFormatsOptionsWrapper(model, this.editFormat));
        }
        return result;
    };
    CardElementPropertiesComposer.prototype.getCommonWrapper = function (model, dashboardItem, dataSourceBrowser) {
        var properties = [
            __assign({ editorOptions: { placeholder: _display_name_provider_1.getDataItemContainerDisplayName(dataSourceBrowser, dashboardItem, model) } }, _base_metadata_1.name)
        ];
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties,
            disabledFilterRules: null
        });
    };
    CardElementPropertiesComposer.prototype.getSparklineWrapper = function (model) {
        var properties = _shared_composers_1.SharedComposers.getSparklineOptionsProperties();
        var disabledRules = {};
        disabledRules[_sparkline_options_1.viewType.propertyName] = [_card_1.showSparkline.propertyName, '=', false];
        disabledRules[_sparkline_options_1.highlightMinMaxPoints.propertyName] = [_card_1.showSparkline.propertyName, '=', false];
        disabledRules[_sparkline_options_1.highlightStartEndPoints.propertyName] = [_card_1.showSparkline.propertyName, '=', false];
        var visibilityRules = {};
        visibilityRules[_card_1.showSparkline.propertyName] = function () { return model._isTypeEmpty(); };
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: [
                _card_1.showSparkline,
                {
                    container: _card_row_1.cardSparklineRowOptions,
                    properties: properties
                }
            ],
            disabledFilterRules: disabledRules,
            visibilityFilterRules: visibilityRules
        });
    };
    CardElementPropertiesComposer.prototype.fillTemplatesTab = function (tab, card) {
        var _this = this;
        var availableTemplates = ko.computed(function () { return _this.getAvailableTemplates(card); });
        var selectedTemplate = ko.computed({
            read: function () {
                return card.layoutTemplate();
            },
            write: function (newTemplate) {
                _this.switchTemplate(card, newTemplate);
            }
        });
        var singleChoiceEditorOptions = {
            propertyName: 'title',
            dataSource: availableTemplates(),
            enableEditItem: function (item) { return !(item instanceof card_layout_template_1.CardEmptyLayoutTemplate); },
            editItemHandler: this.editTemplateHandler,
            customToolbarItems: [{
                    name: _default_1.getLocalizationById('DashboardWebStringId.CardLayout.ApplyToAllCards'),
                    icon: '#dx-dashboard-template-to-all-cards',
                    action: function () { _this.applyTemplateToAllCards(selectedTemplate()); }
                }],
        };
        tab.tabModel(new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: { layoutTemplates: selectedTemplate },
            properties: [{
                    formAdapterItem: _form_adapter_editors_1.editableListEditor(singleChoiceEditorOptions),
                    propertyName: 'layoutTemplates'
                }]
        }));
    };
    CardElementPropertiesComposer.prototype.switchTemplate = function (card, newTemplate) {
        var templateChanged = function (newTemplate) {
            return card.layoutTemplate().getType() !== newTemplate.getType();
        };
        if (templateChanged(newTemplate)) {
            card._setTemplateSwitchingOptions(newTemplate);
        }
    };
    CardElementPropertiesComposer.prototype.getAvailableTemplates = function (card) {
        var result = [];
        var currentTemplateAdded = false;
        var currentTemplate = card.layoutTemplate();
        var addTemplate = function (templateClass) {
            var templateInstance = new templateClass();
            if (templateInstance.getType() === currentTemplate.getType()) {
                result.push(currentTemplate);
                currentTemplateAdded = true;
            }
            else {
                templateInstance._resetToDefaults();
                result.push(templateInstance);
            }
        };
        addTemplate(card_layout_template_1.CardStretchedLayoutTemplate);
        addTemplate(card_layout_template_1.CardCenteredLayoutTemplate);
        addTemplate(card_layout_template_1.CardCompactLayoutTemplate);
        addTemplate(card_layout_template_1.CardLightweightLayoutTemplate);
        if (!currentTemplateAdded) {
            result.push(currentTemplate);
        }
        return result;
    };
    CardElementPropertiesComposer.prototype.getFormatRulesWrapper = function (model, dashboardItem) {
        var collectionEditorOptions = {
            propertyName: _dashboard_item_format_rule_1.classCaption.propertyName,
            createNewItemHandler: function () {
                var rule = new card_item_delta_format_rule_1.CardItemDeltaFormatRule();
                rule.cardId(model._getDataId());
                return rule;
            },
            editItemHandler: this.editRuleHandler,
            visibleItemsFilter: function (rule) { return (rule instanceof card_item_delta_format_rule_1.CardItemDeltaFormatRule) && rule.cardId() === model._getDataId(); },
        };
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: dashboardItem,
            properties: [__assign({}, _data_dashboard_item_1.formatRules, { formAdapterItem: _form_adapter_editors_1.collectionEditor(collectionEditorOptions) })]
        });
    };
    __decorate([
        _undo_engine_helper_1.wrapWithUndoRedo
    ], CardElementPropertiesComposer.prototype, "switchTemplate", null);
    return CardElementPropertiesComposer;
}(_base_properties_composer_1.DataItemContainerPropertiesComposer));
exports.CardElementPropertiesComposer = CardElementPropertiesComposer;


/***/ }),
/* 648 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var card_item_delta_format_rule_1 = __webpack_require__(126);
var card_item_format_rule_1 = __webpack_require__(129);
var _card_item_format_rule_properties_composer_1 = __webpack_require__(637);
var _accordion_tab_1 = __webpack_require__(7);
var _base_properties_composer_1 = __webpack_require__(12);
var _data_item_properties_composer_1 = __webpack_require__(116);
var _shared_composers_1 = __webpack_require__(13);
var CardItemPropertiesComposer = (function (_super) {
    __extends(CardItemPropertiesComposer, _super);
    function CardItemPropertiesComposer(customizeHandler, editRuleHandler) {
        var _this = _super.call(this, customizeHandler) || this;
        _this.editRuleHandler = editRuleHandler;
        return _this;
    }
    CardItemPropertiesComposer.prototype._composeTabsCore = function (model, args) {
        return [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', _shared_composers_1.SharedComposers.getCommonWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ContentArrangement, 'DashboardWebStringId.AccordionTab.Layout', _shared_composers_1.SharedComposers.getContentArrangementWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ConditionalFormatting, 'DashboardWebStringId.ConditionalFormatting', _data_item_properties_composer_1.DataItemsPropertiesComposer.getFormatRulesWrapper(model, function () { return !_card_item_format_rule_properties_composer_1.isDeltaFormatRuleAvaliable(model) ? new card_item_format_rule_1.CardItemFormatRule() : new card_item_delta_format_rule_1.CardItemDeltaFormatRule(); }, function () { return true; }, this.editRuleHandler))
        ];
    };
    return CardItemPropertiesComposer;
}(_base_properties_composer_1.DashboardItemPropertiesComposer));
exports.CardItemPropertiesComposer = CardItemPropertiesComposer;


/***/ }),
/* 649 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var _utils_1 = __webpack_require__(3);
var _knockout_utils_1 = __webpack_require__(17);
var _undo_engine_helper_1 = __webpack_require__(27);
var _card_layout_1 = __webpack_require__(195);
var _form_adapter_editors_1 = __webpack_require__(22);
var _object_properties_wrapper_1 = __webpack_require__(10);
var _accordion_tab_1 = __webpack_require__(7);
var _collection_editor_viewmodel_base_1 = __webpack_require__(115);
var CardTemplatePropertiesComposer = (function () {
    function CardTemplatePropertiesComposer() {
    }
    CardTemplatePropertiesComposer.prototype.composeTabs = function (model, args) {
        if (args.applyTemplateToAllCards === undefined)
            args.applyTemplateToAllCards = function (template) { };
        var layoutsTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.CardTemplateSettings, 'DashboardWebStringId.CardLayout.LayoutOptions');
        this.fillLayoutsTab(layoutsTab, model, args.dimensionNames, args.applyTemplateToAllCards);
        return [layoutsTab];
    };
    CardTemplatePropertiesComposer.prototype.fillLayoutsTab = function (tab, template, dimensionNames, applyTemplateToAllCards) {
        var _this = this;
        var refreshCallback = new _collection_editor_viewmodel_base_1.CollectionEditorRefreshCallback();
        var propertiesList = template._collectProperties(dimensionNames);
        var subscriptions = propertiesList.map(function (item) { return _knockout_utils_1.safeSubscribe({ checked: item.checked, selectedItem: item.selectedItem || (function () { }) }, function () { return refreshCallback.refresh(); }); });
        var collectionEditorOptions = {
            dataFields: ['checked', 'title', 'selectedItem', 'lookupDataSource'],
            isToolbarVisible: false,
            gridColumns: [{
                    dataField: 'checked',
                    dataType: 'boolean',
                    width: 40,
                }, {
                    dataField: 'selectedItem',
                    calculateDisplayValue: function (rowData) { return rowData.title; },
                    lookup: {
                        displayExpr: 'displayText',
                        valueExpr: 'key',
                    },
                }],
            customizeInlineEditor: function (e) {
                e.editorOptions.dataSource = e.row.data.lookupDataSource;
                if (e.dataField === 'selectedItem') {
                    var oldValueChanged = e.editorOptions.onValueChanged;
                    e.editorOptions.onValueChanged = function (ee) {
                        oldValueChanged.call(ee.component, ee);
                        setTimeout(function () { return e.component.saveEditData(); });
                    };
                }
            },
            customizeCell: function (e) {
                if (!e.isEditing && e.column.dataField === 'selectedItem' && !!e.data.lookupDataSource) {
                    var icon = _utils_1.createSvgIconElement('dx-dashboard-ce-edit');
                    var div = document.createElement('div');
                    div.appendChild(icon);
                    div.classList.add('custom-edit-icon');
                    div.classList.add('dx-dashboard-editable-cell');
                    _utils_1.$unwrap(e.cellElement).appendChild(div);
                }
            },
            enableEditItem: function (selectedItem, e) {
                if (e.column.dataField === 'selectedItem')
                    return !!e.data.lookupDataSource;
                return true;
            },
            forceRefreshCallback: refreshCallback,
        };
        tab.tabModel(new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: {
                minWidth: template.minWidth,
                maxWidth: template.maxWidth,
                templateProperties: ko.observableArray(propertiesList),
                buttonsFakeProperty: {},
            },
            properties: [
                __assign({}, _card_layout_1.minWidth, { formAdapterItem: _form_adapter_editors_1.numberBoxEditor({ min: 1, format: '0#' }) }),
                __assign({}, _card_layout_1.maxWidth, { formAdapterItem: _form_adapter_editors_1.nullableNumberBoxEditor({ defaultValue: 200, editorOptions: { min: 1, format: '0#' } }) }),
                {
                    formAdapterItem: _form_adapter_editors_1.inlineEditCollectionEditor(collectionEditorOptions),
                    propertyName: 'templateProperties',
                }, {
                    propertyName: 'buttonsFakeProperty',
                    formAdapterItem: _form_adapter_editors_1.actionButtons([
                        {
                            text: dx_analytics_core_1.default.Analytics.Internal.localize('DashboardWebStringId.CardLayout.ResetTemplate'),
                            onClick: function () { return _this.resetTemplate(template); },
                            elementAttr: { class: 'dx-dashboard-card-template-reset-button' }
                        },
                        {
                            text: dx_analytics_core_1.default.Analytics.Internal.localize('DashboardWebStringId.CardLayout.ApplyToAllCards'),
                            onClick: function () { return applyTemplateToAllCards(template); },
                            elementAttr: { class: 'dx-dashboard-card-template-apply-all-button' }
                        }
                    ]),
                }
            ],
            disposableModelSubscriptions: subscriptions,
        }));
    };
    CardTemplatePropertiesComposer.prototype.resetTemplate = function (template) {
        template._resetToDefaults();
    };
    __decorate([
        _undo_engine_helper_1.wrapWithUndoRedo
    ], CardTemplatePropertiesComposer.prototype, "resetTemplate", null);
    return CardTemplatePropertiesComposer;
}());
exports.CardTemplatePropertiesComposer = CardTemplatePropertiesComposer;


/***/ }),
/* 650 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var _data_field_1 = __webpack_require__(14);
var _chart_axis_1 = __webpack_require__(134);
var _chart_item_1 = __webpack_require__(135);
var _accordion_tab_1 = __webpack_require__(7);
var _display_name_provider_1 = __webpack_require__(24);
var _base_properties_composer_1 = __webpack_require__(12);
var _shared_composers_1 = __webpack_require__(13);
var ChartItemPropertiesComposer = (function (_super) {
    __extends(ChartItemPropertiesComposer, _super);
    function ChartItemPropertiesComposer(customizeHandler) {
        return _super.call(this, customizeHandler) || this;
    }
    ChartItemPropertiesComposer.prototype._getAxisXTabModel = function (model, dataSourceBrowser, argumentDataField) {
        var groupInterval = model.arguments()[0] ? model.arguments()[0].dateTimeGroupInterval() : 'None';
        var isOlap = argumentDataField && _data_field_1.DataField.isOlap(argumentDataField.dataMember());
        return _shared_composers_1.SharedComposers.getAxisWrapper(model.axisX, ko.pureComputed(function () {
            var argumentsNumber = model.arguments().length;
            if (!argumentsNumber) {
                return '';
            }
            else if (argumentsNumber === 1) {
                return model.arguments()[0] && _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, model, model.arguments()[0]);
            }
            else
                return 'Arguments';
        }), null, _data_field_1.DataField.isDateTime(argumentDataField) && !isOlap, _data_field_1.DataField.isNumeric(argumentDataField) && !isOlap, groupInterval);
    };
    ChartItemPropertiesComposer.prototype._composeTabsCore = function (model, args) {
        var _this = this;
        var argumentDataField = ko.observable();
        if (model.arguments().length == 1) {
            var dimension = model.arguments()[0];
            args.dataSourceBrowser.findDataField(model.dataSource(), model.dataMember(), dimension.dataMember()).done(function (dataField) {
                argumentDataField(dataField);
            });
        }
        var result = [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', _shared_composers_1.SharedComposers.getCommonWrapper(model, [_chart_item_1.chartRotated])),
        ];
        var axisXTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.AxisX, 'DashboardWebStringId.Chart.AxisX');
        axisXTab.tabModel(this._getAxisXTabModel(model, args.dataSourceBrowser, argumentDataField()));
        argumentDataField.subscribe(function (dataField) { axisXTab.tabModel(_this._getAxisXTabModel(model, args.dataSourceBrowser, dataField)); });
        result.push(axisXTab);
        if (model) {
            model.panes().forEach(function (pane) {
                var numberPostfix = model.panes().length === 1 ? '' : ' (' + pane.name() + ')';
                result.push(new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.AxisY + numberPostfix, _default_1.getLocalizationById('DashboardWebStringId.Chart.AxisY') + numberPostfix, _shared_composers_1.SharedComposers.getAxisWrapper(pane.primaryAxisY, ko.pureComputed(function () {
                    var series = pane.series().filter(function (s) { return !s.plotOnSecondaryAxis(); });
                    if (!series.length) {
                        return '';
                    }
                    var dataItems = series.reduce(function (array, singleSeries) {
                        return array.concat(singleSeries
                            ._getBindingModel()
                            .map(function (b) { return singleSeries[b.propertyName]; })
                            .filter(function (dil) { return !!dil.dataItem(); })
                            .map(function (dil) { return dil.dataItem(); }));
                    }, []);
                    if (dataItems.length === 1) {
                        return _display_name_provider_1.getDataItemDisplayName(args.dataSourceBrowser, model, dataItems[0]);
                    }
                    else
                        return 'Values';
                }), _chart_axis_1.chartAlwaysShowZeroLevel)));
                if (pane.series().filter(function (s) { return s.plotOnSecondaryAxis(); }).length > 0) {
                    result.push(new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.AxisY + 'secondary' + numberPostfix, _default_1.getLocalizationById('DashboardWebStringId.Chart.AxisYSecondary') + numberPostfix, _shared_composers_1.SharedComposers.getAxisWrapper(pane.secondaryAxisY, ko.pureComputed(function () {
                        var series = pane.series().filter(function (s) { return s.plotOnSecondaryAxis(); });
                        if (!series.length) {
                            return '';
                        }
                        else if (series.length === 1) {
                            return _display_name_provider_1.getDataItemContainerDisplayName(args.dataSourceBrowser, model, series[0]);
                        }
                        else
                            return 'Values';
                    }), _chart_axis_1.chartAlwaysShowZeroLevel)));
                }
            });
        }
        result.push(new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Legend, 'DashboardWebStringId.AccordionTab.ChartLegend', _shared_composers_1.SharedComposers.getLegendWrapper(model)));
        return result;
    };
    return ChartItemPropertiesComposer;
}(_base_properties_composer_1.DashboardItemPropertiesComposer));
exports.ChartItemPropertiesComposer = ChartItemPropertiesComposer;


/***/ }),
/* 651 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var chorolpeth_map_1 = __webpack_require__(332);
var chorolpeth_map_item_1 = __webpack_require__(333);
var _chorolpeth_map_1 = __webpack_require__(308);
var _base_metadata_1 = __webpack_require__(4);
var _object_properties_wrapper_1 = __webpack_require__(10);
var _accordion_tab_1 = __webpack_require__(7);
var _container_type_selector_1 = __webpack_require__(92);
var _base_properties_composer_1 = __webpack_require__(12);
var _shared_composers_1 = __webpack_require__(13);
var ChoroplethMapElementPropertiesComposer = (function (_super) {
    __extends(ChoroplethMapElementPropertiesComposer, _super);
    function ChoroplethMapElementPropertiesComposer(customizeHandler, editDeltaFormatHandler) {
        if (editDeltaFormatHandler === void 0) { editDeltaFormatHandler = function (model) { }; }
        var _this = _super.call(this, customizeHandler) || this;
        _this.editDeltaFormatHandler = editDeltaFormatHandler;
        return _this;
    }
    ChoroplethMapElementPropertiesComposer.prototype._composeTabsCore = function (model, args) {
        var typeTab = new _accordion_tab_1.TypeAccordionTab(_accordion_tab_1.KnownTabs.Type, 'DashboardWebStringId.Map.WeightedLegendType', this.getMapTypeWrapper(model, args.containerType)), commonTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.Options', new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: [
                _base_metadata_1.name,
                _chorolpeth_map_1.valueName,
                _chorolpeth_map_1.actualValueName,
                _chorolpeth_map_1.deltaName
            ]
        })), result = [typeTab, commonTab];
        if (model instanceof chorolpeth_map_1.DeltaMap) {
            result.push(new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.DeltaOptions, 'DashboardWebStringId.Grid.DeltaOptions', _shared_composers_1.SharedComposers.getDeltaOptionsWrapper(model.deltaOptions)));
            result.push(new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.DeltaFormats, 'DashboardWebStringId.CardLayout.Editor.FormatOptions', _shared_composers_1.SharedComposers.getDeltaFormatsOptionsWrapper(model, this.editDeltaFormatHandler)));
        }
        return result;
    };
    ChoroplethMapElementPropertiesComposer.prototype.getMapTypeWrapper = function (model, containerType) {
        if (model) {
            return new _container_type_selector_1.ContainerTypeSelector(chorolpeth_map_item_1.ChoroplethMapItem.choroplethMapTypesMap, containerType);
        }
        return null;
    };
    return ChoroplethMapElementPropertiesComposer;
}(_base_properties_composer_1.DataItemContainerPropertiesComposer));
exports.ChoroplethMapElementPropertiesComposer = ChoroplethMapElementPropertiesComposer;


/***/ }),
/* 652 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _chorolpeth_map_item_1 = __webpack_require__(201);
var _map_item_1 = __webpack_require__(44);
var _object_properties_wrapper_1 = __webpack_require__(10);
var _accordion_tab_1 = __webpack_require__(7);
var _base_properties_composer_1 = __webpack_require__(12);
var _shared_composers_1 = __webpack_require__(13);
var ChoroplethMapItemPropertiesComposer = (function (_super) {
    __extends(ChoroplethMapItemPropertiesComposer, _super);
    function ChoroplethMapItemPropertiesComposer(customizeHandler) {
        return _super.call(this, customizeHandler) || this;
    }
    ChoroplethMapItemPropertiesComposer.prototype._composeTabsCore = function (model, args) {
        var commonTabWrapper = _shared_composers_1.SharedComposers.getCommonMapWrapper(model, args.propertiesController, [
            _shared_composers_1.SharedComposers.getAttributeNamesSerializationInfo(model, _chorolpeth_map_item_1.attributeName, false),
            _map_item_1.lockNavigation
        ]);
        return [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', commonTabWrapper),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ShapeLabels, 'DashboardWebStringId.AccordionTab.ChoroplethMapShapeLabelsAttribute', this.getShapeLabelsWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ColorLegend, 'DashboardWebStringId.AccordionTab.MapLegend', _shared_composers_1.SharedComposers.getColorLegendWrapper(model))
        ];
    };
    ChoroplethMapItemPropertiesComposer.prototype.getShapeLabelsWrapper = function (model) {
        var properties = [
            _shared_composers_1.SharedComposers.getShapeTitleSerializationInfo(model),
            _shared_composers_1.SharedComposers.getAttributeNamesSerializationInfo(model, _chorolpeth_map_item_1.tooltipAttributeName, true, 'DashboardWebStringId.Map.UseBindingAttribute'),
            _chorolpeth_map_item_1.includeSummaryValueToShapeTitle
        ];
        var disabledRules = {};
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties,
            disabledFilterRules: disabledRules
        });
    };
    return ChoroplethMapItemPropertiesComposer;
}(_base_properties_composer_1.DashboardItemPropertiesComposer));
exports.ChoroplethMapItemPropertiesComposer = ChoroplethMapItemPropertiesComposer;


/***/ }),
/* 653 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_internal_1 = __webpack_require__(37);
var index_metadata_1 = __webpack_require__(191);
var _object_properties_wrapper_1 = __webpack_require__(10);
var _accordion_tab_1 = __webpack_require__(7);
var _base_properties_composer_1 = __webpack_require__(12);
var _shared_composers_1 = __webpack_require__(13);
var DateFilterItemPropertiesComposer = (function (_super) {
    __extends(DateFilterItemPropertiesComposer, _super);
    function DateFilterItemPropertiesComposer(customizeHandler, editRuleHandler) {
        var _this = _super.call(this, customizeHandler) || this;
        _this.editRuleHandler = editRuleHandler;
        return _this;
    }
    DateFilterItemPropertiesComposer.prototype._composeTabsCore = function (model, args) {
        return [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', _shared_composers_1.SharedComposers.getCommonWrapper(model, [], {})),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Layout, 'Layout', this.getLayoutWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.CustomRanges, 'DashboardWebStringId.RangeFilter.CustomPeriods', _shared_composers_1.SharedComposers.getCustomRangesWrapper(model, this.editRuleHandler, args.dataSourceBrowser, model.dimension))
        ];
    };
    DateFilterItemPropertiesComposer.prototype.getLayoutWrapper = function (model) {
        var properties = [
            index_metadata_1.filterType,
            index_metadata_1.arrangementMode,
            index_metadata_1.datePickerLocation,
            index_metadata_1.displayTextPattern
        ];
        index_metadata_1.displayTextPattern.editorOptions['placeholder'] = index_internal_1.getLocalizationById(index_metadata_1.displayTextPattern.editorOptions['placeholder']);
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties
        });
    };
    return DateFilterItemPropertiesComposer;
}(_base_properties_composer_1.DashboardItemPropertiesComposer));
exports.DateFilterItemPropertiesComposer = DateFilterItemPropertiesComposer;


/***/ }),
/* 654 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var combo_box_item_1 = __webpack_require__(328);
var list_box_item_1 = __webpack_require__(534);
var _combo_box_item_1 = __webpack_require__(297);
var _filter_element_item_base_1 = __webpack_require__(88);
var _list_box_item_1 = __webpack_require__(299);
var _tree_view_item_1 = __webpack_require__(300);
var _accordion_tab_1 = __webpack_require__(7);
var _base_properties_composer_1 = __webpack_require__(12);
var _shared_composers_1 = __webpack_require__(13);
var FilterItemPropertiesComposer = (function (_super) {
    __extends(FilterItemPropertiesComposer, _super);
    function FilterItemPropertiesComposer(customizeHandler) {
        return _super.call(this, customizeHandler) || this;
    }
    FilterItemPropertiesComposer.prototype._composeTabsCore = function (model) {
        var disabledRules = {};
        disabledRules[_filter_element_item_base_1.showAllValue.propertyName] = function (args) {
            var model = args.model;
            if (model instanceof list_box_item_1.ListBoxItem) {
                return model.listBoxType() === 'Checked';
            }
            if (model instanceof combo_box_item_1.ComboBoxItem) {
                return model.comboBoxType() === 'Checked';
            }
            return false;
        };
        var showAllValuePropertyInfo = _filter_element_item_base_1.showAllValue;
        if (model._useNeutralFilterMode()) {
            showAllValuePropertyInfo.displayName = 'DashboardWebStringId.FilterItem.AllowEmptyFilter';
        }
        var result = [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', _shared_composers_1.SharedComposers.getCommonWrapper(model, [
                _combo_box_item_1.comboBoxType,
                _list_box_item_1.listBoxType,
                _filter_element_item_base_1.showAllValue,
                _tree_view_item_1.autoExpand,
                _filter_element_item_base_1.enableSearch
            ], disabledRules))
        ];
        return result;
    };
    return FilterItemPropertiesComposer;
}(_base_properties_composer_1.DashboardItemPropertiesComposer));
exports.FilterItemPropertiesComposer = FilterItemPropertiesComposer;


/***/ }),
/* 655 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var gauge_1 = __webpack_require__(212);
var _gauge_1 = __webpack_require__(301);
var _base_metadata_1 = __webpack_require__(4);
var _form_adapter_editors_1 = __webpack_require__(22);
var _object_properties_wrapper_1 = __webpack_require__(10);
var _accordion_tab_1 = __webpack_require__(7);
var _display_name_provider_1 = __webpack_require__(24);
var _base_properties_composer_1 = __webpack_require__(12);
var _shared_composers_1 = __webpack_require__(13);
var GaugeElementPropertiesComposer = (function (_super) {
    __extends(GaugeElementPropertiesComposer, _super);
    function GaugeElementPropertiesComposer(customizeHandler, editFormatHandler) {
        if (editFormatHandler === void 0) { editFormatHandler = function (model) { }; }
        var _this = _super.call(this, customizeHandler) || this;
        _this.editFormatHandler = editFormatHandler;
        return _this;
    }
    GaugeElementPropertiesComposer.prototype._composeTabsCore = function (model, args) {
        var result = [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.Options', this.getCommonWrapper(model, args.dashboardItem, args.dataSourceBrowser)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ScaleOptions, 'DashboardWebStringId.Gauge.ScaleOptions', this.getScaleWrapper(model))
        ];
        if (model instanceof gauge_1.Gauge) {
            result.push(new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.DeltaOptions, 'DashboardWebStringId.Grid.DeltaOptions', _shared_composers_1.SharedComposers.getDeltaOptionsWrapper(model.deltaOptions)));
            var wrapper = _shared_composers_1.SharedComposers.getDeltaFormatsOptionsWrapper(model, this.editFormatHandler, { title: 'Gauge Scale', numericFormat: model.scaleLabelNumericFormat });
            var formatsTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.NumericFormat, 'DashboardWebStringId.CardLayout.Editor.FormatOptions', wrapper);
            result.push(formatsTab);
        }
        return result;
    };
    GaugeElementPropertiesComposer.prototype.getCommonWrapper = function (model, dashboardItem, dataSourceBrowser) {
        var properties = [
            __assign({ editorOptions: { placeholder: _display_name_provider_1.getDataItemContainerDisplayName(dataSourceBrowser, dashboardItem, model) } }, _base_metadata_1.name),
        ];
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties,
            disabledFilterRules: null
        });
    };
    GaugeElementPropertiesComposer.prototype.getScaleWrapper = function (model) {
        var disabledRules = {};
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: [
                __assign({}, _gauge_1.minimum, { formAdapterItem: _form_adapter_editors_1.nullableNumberBoxEditor({}) }),
                __assign({}, _gauge_1.maximum, { formAdapterItem: _form_adapter_editors_1.nullableNumberBoxEditor({}) })
            ],
            disabledFilterRules: disabledRules
        });
    };
    return GaugeElementPropertiesComposer;
}(_base_properties_composer_1.DataItemContainerPropertiesComposer));
exports.GaugeElementPropertiesComposer = GaugeElementPropertiesComposer;


/***/ }),
/* 656 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _gauge_item_1 = __webpack_require__(302);
var _accordion_tab_1 = __webpack_require__(7);
var _container_type_selector_1 = __webpack_require__(92);
var _base_properties_composer_1 = __webpack_require__(12);
var _shared_composers_1 = __webpack_require__(13);
var GaugeItemPropertiesComposer = (function (_super) {
    __extends(GaugeItemPropertiesComposer, _super);
    function GaugeItemPropertiesComposer(customizeHandler) {
        return _super.call(this, customizeHandler) || this;
    }
    GaugeItemPropertiesComposer.prototype._composeTabsCore = function (model) {
        var result = [
            new _accordion_tab_1.StyleAccordionTab(_accordion_tab_1.KnownTabs.Type, 'DashboardWebStringId.Type', this.getTypeWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', _shared_composers_1.SharedComposers.getCommonWrapper(model, [
                _gauge_item_1.showGaugeCaptions
            ])),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Layout', _shared_composers_1.SharedComposers.getContentArrangementWrapper(model))
        ];
        return result;
    };
    GaugeItemPropertiesComposer.prototype.getTypeWrapper = function (model) {
        return new _container_type_selector_1.ContainerTypeSelector({
            'CircularFull': { displayName: 'DashboardWebStringId.Gauge.Type.FullQuarterGauge', icon: 'dx-dashboard-gauge-circular-full', group: 'Circular' },
            'CircularHalf': { displayName: 'DashboardWebStringId.Gauge.Type.HalfCircular', icon: 'dx-dashboard-gauge-circular-half', group: 'Circular' },
            'CircularQuarterLeft': { displayName: 'DashboardWebStringId.Gauge.Type.LeftQuarterCircular', icon: 'dx-dashboard-gauge-circular-left-quarter', group: 'Circular' },
            'CircularQuarterRight': { displayName: 'DashboardWebStringId.Gauge.Type.RightQuarterCircular', icon: 'dx-dashboard-gauge-circular-right-quarter', group: 'Circular' },
            'CircularThreeFourth': { displayName: 'DashboardWebStringId.Gauge.Type.ThreeFourthCircular', icon: 'dx-dashboard-gauge-circular-three-fourth', group: 'Circular' },
            'LinearHorizontal': { displayName: 'DashboardWebStringId.Gauge.Type.LinearHorizontal', icon: 'dx-dashboard-gauge-linear-horizontal', group: 'Linear' },
            'LinearVertical': { displayName: 'DashboardWebStringId.Gauge.Type.LinearVertical', icon: 'dx-dashboard-gauge-linear-vertical', group: 'Linear' }
        }, model.viewType);
    };
    return GaugeItemPropertiesComposer;
}(_base_properties_composer_1.DashboardItemPropertiesComposer));
exports.GaugeItemPropertiesComposer = GaugeItemPropertiesComposer;


/***/ }),
/* 657 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _geo_point_map_item_base_1 = __webpack_require__(68);
var _map_item_1 = __webpack_require__(44);
var _accordion_tab_1 = __webpack_require__(7);
var _base_properties_composer_1 = __webpack_require__(12);
var _shared_composers_1 = __webpack_require__(13);
var GeoPointMapItemPropertiesComposer = (function (_super) {
    __extends(GeoPointMapItemPropertiesComposer, _super);
    function GeoPointMapItemPropertiesComposer(customizeHandler) {
        return _super.call(this, customizeHandler) || this;
    }
    GeoPointMapItemPropertiesComposer.prototype._composeTabsCore = function (model, args) {
        var tabModel = _shared_composers_1.SharedComposers.getCommonMapWrapper(model, args.propertiesController, [
            _map_item_1.lockNavigation,
            _geo_point_map_item_base_1.enableClustering,
            _shared_composers_1.SharedComposers.getShapeTitleSerializationInfo(model)
        ]);
        return [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', tabModel)
        ];
    };
    return GeoPointMapItemPropertiesComposer;
}(_base_properties_composer_1.DashboardItemPropertiesComposer));
exports.GeoPointMapItemPropertiesComposer = GeoPointMapItemPropertiesComposer;


/***/ }),
/* 658 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var _data_field_1 = __webpack_require__(14);
var _dashboard_item_format_rule_1 = __webpack_require__(52);
var _knockout_utils_1 = __webpack_require__(17);
var data_dashboard_item_1 = __webpack_require__(9);
var grid_column_total_1 = __webpack_require__(330);
var grid_columns_1 = __webpack_require__(145);
var grid_item_1 = __webpack_require__(146);
var _grid_columns_1 = __webpack_require__(303);
var _data_dashboard_item_1 = __webpack_require__(26);
var _delta_options_1 = __webpack_require__(133);
var _base_metadata_1 = __webpack_require__(4);
var _form_adapter_editors_1 = __webpack_require__(22);
var _object_properties_wrapper_1 = __webpack_require__(10);
var _accordion_tab_1 = __webpack_require__(7);
var _display_name_provider_1 = __webpack_require__(24);
var _container_type_selector_1 = __webpack_require__(92);
var _base_properties_composer_1 = __webpack_require__(12);
var _shared_composers_1 = __webpack_require__(13);
var GridColumnPropertiesComposer = (function (_super) {
    __extends(GridColumnPropertiesComposer, _super);
    function GridColumnPropertiesComposer(customizeHandler, editRuleHandler, editDeltaFormatHandler) {
        if (editDeltaFormatHandler === void 0) { editDeltaFormatHandler = function (model) { }; }
        var _this = _super.call(this, customizeHandler) || this;
        _this.editRuleHandler = editRuleHandler;
        _this.editDeltaFormatHandler = editDeltaFormatHandler;
        return _this;
    }
    GridColumnPropertiesComposer.prototype._composeTabsCore = function (model, args) {
        var columnWidthTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.Grid.ColumnWidth'), deltaTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.DeltaOptions, 'DashboardWebStringId.Grid.DeltaOptions'), deltaFormatsTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.DeltaFormats, 'DashboardWebStringId.CardLayout.Editor.FormatOptions'), sparklineTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.SparklineOptions, 'DashboardWebStringId.Card.SparklineOptions'), conditionalFormattingTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ConditionalFormatting, 'DashboardWebStringId.ConditionalFormatting'), totalTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Totals, 'DashboardWebStringId.AccordionTab.ShowTotals');
        var gridItem = args.dashboardItem;
        var result = [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.Options', this.getColumnWrapper(model, args.dashboardItem, args.dataSourceBrowser)),
            columnWidthTab,
            deltaTab,
            sparklineTab,
            totalTab,
            conditionalFormattingTab,
            deltaFormatsTab
        ];
        var isOlap = model.actualDataItem ? _data_field_1.DataField.isOlap(model.actualDataItem.dataMember()) : false;
        if (!isOlap || args.containerType() !== 'GridDimensionColumn')
            result.unshift(new _accordion_tab_1.TypeAccordionTab(_accordion_tab_1.KnownTabs.Type, 'DashboardWebStringId.Type', this.getColumnTypeWrapper(model, args.containerType)));
        if (gridItem.gridOptions.columnWidthMode() === 'Manual') {
            columnWidthTab.tabModel(this.getWidthWrapper(model));
        }
        if (model instanceof grid_columns_1.GridDeltaColumn) {
            deltaTab.tabModel(this.getDeltaWrapper(model));
            deltaFormatsTab.tabModel(_shared_composers_1.SharedComposers.getDeltaFormatsOptionsWrapper(model, this.editDeltaFormatHandler));
        }
        if (model instanceof grid_columns_1.GridSparklineColumn) {
            sparklineTab.tabModel(this.getSparklineWrapper(model));
        }
        if ((model instanceof grid_columns_1.GridDimensionColumn) || (model instanceof grid_columns_1.GridMeasureColumn)) {
            conditionalFormattingTab.tabModel(this.getFormatRulesWrapper(model, gridItem));
        }
        if (model instanceof grid_columns_1.GridColumn) {
            totalTab.tabModel(this.getTotalsWrapper(model, args.dashboardItem));
        }
        return result;
    };
    GridColumnPropertiesComposer.prototype.getColumnTypeWrapper = function (model, containerType) {
        if (model) {
            var properties = [
                _grid_columns_1.columnType
            ];
            var isOlap = model.actualDataItem ? _data_field_1.DataField.isOlap(model.actualDataItem.dataMember()) : undefined;
            var buttonTypes = void 0;
            if (!isOlap)
                buttonTypes = grid_item_1.GridItem._gridColumnTypesMap;
            else {
                buttonTypes = __assign({}, grid_item_1.GridItem._gridColumnTypesMap);
                delete buttonTypes['GridDimensionColumn'];
            }
            return new _container_type_selector_1.ContainerTypeSelector(buttonTypes, containerType);
        }
        return null;
    };
    GridColumnPropertiesComposer.prototype.getColumnWrapper = function (model, dashboardItem, dataSourceBrowser) {
        var properties = [__assign({ editorOptions: { placeholder: _display_name_provider_1.getDataItemContainerDisplayName(dataSourceBrowser, dashboardItem, model) } }, _base_metadata_1.name)];
        var disabledRules = {};
        var visibilityRules = {};
        if (model instanceof grid_columns_1.GridDimensionColumn) {
            properties.push(_grid_columns_1.dimensionDisplayMode);
            visibilityRules[_grid_columns_1.dimensionDisplayMode.propertyName] = function () {
                var result = false;
                if (model.dimension()) {
                    dataSourceBrowser
                        .findDataField(dashboardItem.dataSource(), dashboardItem.dataMember(), model.dimension().dataMember())
                        .done(function (dataField) {
                        result = dataField && dataField.fieldType() === 'Custom';
                    });
                }
                return result;
            };
        }
        if (model instanceof grid_columns_1.GridMeasureColumn) {
            properties.push(_grid_columns_1.displayMode);
            properties.push(_grid_columns_1.alwaysShowZeroLevel);
            disabledRules[_grid_columns_1.alwaysShowZeroLevel.propertyName] = [_grid_columns_1.displayMode.propertyName, '<>', 'Bar'];
        }
        if (model instanceof grid_columns_1.GridHyperlinkColumn) {
            _grid_columns_1.gridColumnUriPattern.validationRules.forEach(function (rule) { if (rule.message) {
                rule.message = _default_1.getLocalizationById(rule.message);
            } });
            properties.push(_grid_columns_1.gridColumnUriPattern);
        }
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties,
            disabledFilterRules: disabledRules,
            visibilityFilterRules: visibilityRules
        });
    };
    GridColumnPropertiesComposer.prototype.getWidthWrapper = function (model) {
        var properties = [
            _grid_columns_1.widthType,
            _grid_columns_1.fixedWidth,
            _grid_columns_1.columnWeight,
        ];
        var disabledRules = {};
        disabledRules[_grid_columns_1.fixedWidth.propertyName] = [_grid_columns_1.widthType.propertyName, '<>', 'FixedWidth'];
        disabledRules[_grid_columns_1.columnWeight.propertyName] = [_grid_columns_1.widthType.propertyName, '<>', 'Weight'];
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties,
            disabledFilterRules: disabledRules
        });
    };
    GridColumnPropertiesComposer.prototype.getTotalsWrapper = function (model, p) {
        var collectionEditorOptions = {
            dataFields: [grid_column_total_1._totalTypeTemplate.propertyName],
            noDataText: 'DashboardWebStringId.CollectionEditor.Totals.NoItems',
            gridColumns: [{
                    dataField: grid_column_total_1._totalTypeTemplate.propertyName,
                    lookup: {}
                }],
            customizeInlineEditor: function (e) {
                var totalTypes = ko.pureComputed(function () { return model._getAvailableTotalTypes(p); });
                var _a = _knockout_utils_1.createObservableDataSource({ totalTypes: totalTypes }, function (arg) { return arg.totalTypes; }), dataSource = _a.dataSource, dataSourceDispose = _a.dispose;
                e.editorOptions.dataSource = dataSource;
                e.editorOptions.onDisposing = function () {
                    dataSourceDispose();
                    totalTypes.dispose();
                };
            },
            createNewItemHandler: function () { return new grid_column_total_1.GridColumnTotal({}); },
        };
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: [__assign({}, _grid_columns_1.totalsTemplate, { formAdapterItem: _form_adapter_editors_1.inlineEditCollectionEditor(collectionEditorOptions) })],
            summary: ko.computed(function () { return model.totals().length ? 'DashboardWebStringId.ButtonOn' : ''; })
        });
    };
    GridColumnPropertiesComposer.prototype.getDeltaWrapper = function (model) {
        var properties = [
            _grid_columns_1.displayMode,
            _grid_columns_1.alwaysShowZeroLevel,
            {
                container: _grid_columns_1.gridColumnDeltaOptions,
                properties: _delta_options_1.deltaOptionsSerializationsInfo
            }
        ];
        var visibleRules = {};
        visibleRules[_grid_columns_1.alwaysShowZeroLevel.propertyName] = [_grid_columns_1.displayMode.propertyName, '=', 'Bar'];
        _delta_options_1.deltaOptionsSerializationsInfo.forEach(function (opt) {
            visibleRules[opt.propertyName] = [_grid_columns_1.displayMode.propertyName, '=', 'Value'];
        });
        var disabledRules = {};
        disabledRules[_delta_options_1.resultIndicationThresholdType.propertyName] = function (deltaOptions) { return deltaOptions.resultIndicationMode() === 'NoIndication'; };
        disabledRules[_delta_options_1.resultIndicationThreshold.propertyName] = function (deltaOptions) { return deltaOptions.resultIndicationMode() === 'NoIndication'; };
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties,
            disabledFilterRules: disabledRules,
            visibilityFilterRules: visibleRules
        });
    };
    GridColumnPropertiesComposer.prototype.getSparklineWrapper = function (model) {
        var properties = [
            _grid_columns_1.showStartEndValues,
            {
                container: _grid_columns_1.sparklineOptions,
                properties: _shared_composers_1.SharedComposers.getSparklineOptionsProperties()
            }
        ];
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties
        });
    };
    GridColumnPropertiesComposer.prototype.getFormatRulesWrapper = function (model, dashboardItem) {
        var collectionEditorOptions = {
            propertyName: _dashboard_item_format_rule_1.classCaption.propertyName,
            createNewItemHandler: function () { return data_dashboard_item_1.DataDashboardItem._createFormatRule(null, {
                '@ItemType': 'GridItemFormatRule',
                '@DataItem': model.actualDataItem && model.actualDataItem.uniqueName() || undefined,
                '@DataItemApplyTo': model.actualDataItem && model.actualDataItem.uniqueName() || undefined
            }); },
            editItemHandler: this.editRuleHandler,
            visibleItemsFilter: function (rule) {
                var uniqueName = model.actualDataItem && model.actualDataItem.uniqueName() || undefined;
                return rule.dataItemName() === uniqueName || rule.dataItemApplyToName() === uniqueName;
            },
        };
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: dashboardItem,
            properties: [__assign({}, _data_dashboard_item_1.formatRules, { formAdapterItem: _form_adapter_editors_1.collectionEditor(collectionEditorOptions) })]
        });
    };
    return GridColumnPropertiesComposer;
}(_base_properties_composer_1.DataItemContainerPropertiesComposer));
exports.GridColumnPropertiesComposer = GridColumnPropertiesComposer;


/***/ }),
/* 659 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var _dashboard_item_format_rule_1 = __webpack_require__(52);
var data_dashboard_item_1 = __webpack_require__(9);
var _grid_options_1 = __webpack_require__(305);
var _data_dashboard_item_1 = __webpack_require__(26);
var _form_adapter_editors_1 = __webpack_require__(22);
var _object_properties_wrapper_1 = __webpack_require__(10);
var _accordion_tab_1 = __webpack_require__(7);
var _base_properties_composer_1 = __webpack_require__(12);
var _shared_composers_1 = __webpack_require__(13);
var GridItemPropertiesComposer = (function (_super) {
    __extends(GridItemPropertiesComposer, _super);
    function GridItemPropertiesComposer(customizeHandler, editRuleHandler) {
        var _this = _super.call(this, customizeHandler) || this;
        _this.editRuleHandler = editRuleHandler;
        return _this;
    }
    GridItemPropertiesComposer.prototype._composeTabsCore = function (model, args) {
        var result = [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', _shared_composers_1.SharedComposers.getCommonWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Layout, 'DashboardWebStringId.AccordionTab.Layout', this.getLayoutWrapper(model.gridOptions)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ConditionalFormatting, 'DashboardWebStringId.ConditionalFormatting', this.getFormatRulesWrapper(model, args.dataSourceBrowser))
        ];
        return result;
    };
    GridItemPropertiesComposer.prototype.getLayoutWrapper = function (model) {
        var properties = [
            _grid_options_1.showHorizontalLines,
            _grid_options_1.showVerticalLines,
            _grid_options_1.enableBandedRows,
            _grid_options_1.showColumnHeaders,
            _grid_options_1.wordWrap,
            _grid_options_1.columnWidthMode
        ];
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties
        });
    };
    GridItemPropertiesComposer.prototype.getFormatRulesWrapper = function (model, dataSourceBrowser) {
        var collectionEditorOptions = {
            propertyName: _dashboard_item_format_rule_1.classCaption.propertyName,
            createNewItemHandler: function () { return data_dashboard_item_1.DataDashboardItem._createFormatRule(null, { '@ItemType': 'GridItemFormatRule' }); },
            editItemHandler: this.editRuleHandler
        };
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: [__assign({}, _data_dashboard_item_1.formatRules, { formAdapterItem: _form_adapter_editors_1.collectionEditor(collectionEditorOptions) })]
        });
    };
    return GridItemPropertiesComposer;
}(_base_properties_composer_1.DashboardItemPropertiesComposer));
exports.GridItemPropertiesComposer = GridItemPropertiesComposer;


/***/ }),
/* 660 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var _image_item_1 = __webpack_require__(137);
var _form_adapter_editors_1 = __webpack_require__(22);
var _accordion_tab_1 = __webpack_require__(7);
var _base_properties_composer_1 = __webpack_require__(12);
var _shared_composers_1 = __webpack_require__(13);
var ImageItemPropertiesComposer = (function (_super) {
    __extends(ImageItemPropertiesComposer, _super);
    function ImageItemPropertiesComposer(customizeHandler) {
        return _super.call(this, customizeHandler) || this;
    }
    ImageItemPropertiesComposer.prototype._composeTabsCore = function (model, args) {
        throw new Error('Method not implemented.');
    };
    ImageItemPropertiesComposer.prototype.composeTabs = function (model) {
        var visibilityRules = {};
        visibilityRules[_image_item_1.image64.propertyName] = function (m) { return m.imageType() == 'embedded'; };
        visibilityRules[_image_item_1.urlPath.propertyName] = function (m) { return m.imageType() == 'linked'; };
        var specificProperties = [
            _image_item_1.sizeMode,
            _image_item_1.horizontalAlignment,
            _image_item_1.verticalAlignment,
            _image_item_1.imageType,
            _image_item_1.urlPath,
            __assign({}, _image_item_1.image64, { formAdapterItem: _form_adapter_editors_1.filePickerEditor({ placeholderId: 'Image', accept: 'image/*', type: 'img' }) })
        ];
        return [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.ImageOptions', _shared_composers_1.SharedComposers.getCommonWrapper(model, specificProperties, {}, visibilityRules))
        ];
    };
    return ImageItemPropertiesComposer;
}(_base_properties_composer_1.DashboardItemPropertiesComposer));
exports.ImageItemPropertiesComposer = ImageItemPropertiesComposer;


/***/ }),
/* 661 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _pie_item_1 = __webpack_require__(310);
var _object_properties_wrapper_1 = __webpack_require__(10);
var _accordion_tab_1 = __webpack_require__(7);
var _container_type_selector_1 = __webpack_require__(92);
var _base_properties_composer_1 = __webpack_require__(12);
var _shared_composers_1 = __webpack_require__(13);
var PieItemPropertiesComposer = (function (_super) {
    __extends(PieItemPropertiesComposer, _super);
    function PieItemPropertiesComposer(customizeHandler) {
        return _super.call(this, customizeHandler) || this;
    }
    PieItemPropertiesComposer.prototype._composeTabsCore = function (model) {
        var result = [
            new _accordion_tab_1.StyleAccordionTab(_accordion_tab_1.KnownTabs.Type, 'DashboardWebStringId.Type', this.getTypeWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', _shared_composers_1.SharedComposers.getCommonWrapper(model, [_pie_item_1.showPieCaptions])),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ContentArrangement, 'DashboardWebStringId.AccordionTab.Layout', _shared_composers_1.SharedComposers.getContentArrangementWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Labels, 'DashboardWebStringId.AccordionTab.Labels', this.getLabelsWrapper(model))
        ];
        return result;
    };
    PieItemPropertiesComposer.prototype.getTypeWrapper = function (model) {
        return new _container_type_selector_1.ContainerTypeSelector({
            'Pie': {
                displayName: 'DashboardWebStringId.Pie',
                icon: 'dx-dashboard-pie-pie',
                group: undefined
            },
            'Donut': {
                displayName: 'DashboardWebStringId.Pie.Donut',
                icon: 'dx-dashboard-pie-donut',
                group: undefined
            }
        }, model.pieType);
    };
    PieItemPropertiesComposer.prototype.getLabelsWrapper = function (model) {
        var properties = [
            _pie_item_1.labelContentType,
            _pie_item_1.tooltipContentType,
            _pie_item_1.labelPosition,
        ];
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties
        });
    };
    return PieItemPropertiesComposer;
}(_base_properties_composer_1.DashboardItemPropertiesComposer));
exports.PieItemPropertiesComposer = PieItemPropertiesComposer;


/***/ }),
/* 662 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _geo_point_map_item_base_1 = __webpack_require__(68);
var _map_item_1 = __webpack_require__(44);
var _pie_map_item_1 = __webpack_require__(309);
var _accordion_tab_1 = __webpack_require__(7);
var _base_properties_composer_1 = __webpack_require__(12);
var _shared_composers_1 = __webpack_require__(13);
var PieMapItemPropertiesComposer = (function (_super) {
    __extends(PieMapItemPropertiesComposer, _super);
    function PieMapItemPropertiesComposer(customizeHandler) {
        return _super.call(this, customizeHandler) || this;
    }
    PieMapItemPropertiesComposer.prototype._composeTabsCore = function (model, args) {
        var commonTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common');
        ko.computed(function () {
            commonTab.tabModel(_shared_composers_1.SharedComposers.getCommonMapWrapper(model, args.propertiesController, [
                _map_item_1.lockNavigation,
                _geo_point_map_item_base_1.enableClustering,
                _shared_composers_1.SharedComposers.getShapeTitleSerializationInfo(model),
                _pie_map_item_1.isWeighted
            ]));
        });
        return [
            commonTab,
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ColorLegend, 'DashboardWebStringId.AccordionTab.MapLegend', _shared_composers_1.SharedComposers.getColorLegendWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.WeightedLegend, 'DashboardWebStringId.AccordionTab.WeightedLegend', _shared_composers_1.SharedComposers.getWeightedLegendWrapper(model))
        ];
    };
    return PieMapItemPropertiesComposer;
}(_base_properties_composer_1.DashboardItemPropertiesComposer));
exports.PieMapItemPropertiesComposer = PieMapItemPropertiesComposer;


/***/ }),
/* 663 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var _dashboard_item_format_rule_1 = __webpack_require__(52);
var data_dashboard_item_1 = __webpack_require__(9);
var _data_dashboard_item_1 = __webpack_require__(26);
var _pivot_item_1 = __webpack_require__(311);
var _form_adapter_editors_1 = __webpack_require__(22);
var _object_properties_wrapper_1 = __webpack_require__(10);
var _accordion_tab_1 = __webpack_require__(7);
var _base_properties_composer_1 = __webpack_require__(12);
var _shared_composers_1 = __webpack_require__(13);
var PivotItemPropertiesComposer = (function (_super) {
    __extends(PivotItemPropertiesComposer, _super);
    function PivotItemPropertiesComposer(customizeHandler, editRuleHandler) {
        var _this = _super.call(this, customizeHandler) || this;
        _this.editRuleHandler = editRuleHandler;
        return _this;
    }
    PivotItemPropertiesComposer.prototype._composeTabsCore = function (model, args) {
        var result = [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', _shared_composers_1.SharedComposers.getCommonWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.DataLayout, 'DashboardWebStringId.AccordionTab.Layout', this.getLayoutDataWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.DataLayout, 'DashboardWebStringId.AccordionTab.PivotInitialState', this.getInitialStateDataWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ConditionalFormatting, 'DashboardWebStringId.ConditionalFormatting', PivotItemPropertiesComposer.getFormatRulesWrapper(model, args.dataSourceBrowser, this.editRuleHandler))
        ];
        return result;
    };
    PivotItemPropertiesComposer.getFormatRulesWrapper = function (model, dataSourceBrowser, editHandler) {
        var collectionEditorOptions = {
            propertyName: _dashboard_item_format_rule_1.classCaption.propertyName,
            createNewItemHandler: function () { return data_dashboard_item_1.DataDashboardItem._createFormatRule(null, { '@ItemType': 'PivotItemFormatRule' }); },
            editItemHandler: editHandler
        };
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: [__assign({}, _data_dashboard_item_1.formatRules, { formAdapterItem: _form_adapter_editors_1.collectionEditor(collectionEditorOptions) })]
        });
    };
    PivotItemPropertiesComposer.prototype.getLayoutDataWrapper = function (model) {
        var properties = [
            _pivot_item_1.layoutType,
            _pivot_item_1.showColumnTotals,
            _pivot_item_1.showRowTotals,
            _pivot_item_1.showColumnGrandTotals,
            _pivot_item_1.showRowGrandTotals,
            _pivot_item_1.columnTotalsPosition,
            _pivot_item_1.rowTotalsPosition,
            _pivot_item_1.valuesPosition
        ];
        var disabledRules = {};
        disabledRules[_pivot_item_1.rowTotalsPosition.propertyName] = function (m) { return model.layoutType() === 'Compact'; };
        disabledRules[_pivot_item_1.showRowTotals.propertyName] = function (m) { return model.layoutType() === 'Compact'; };
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties,
            disabledFilterRules: disabledRules
        });
    };
    PivotItemPropertiesComposer.prototype.getInitialStateDataWrapper = function (model) {
        var properties = [
            _pivot_item_1.autoExpandColumnGroups,
            _pivot_item_1.autoExpandRowGroups
        ];
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties
        });
    };
    return PivotItemPropertiesComposer;
}(_base_properties_composer_1.DashboardItemPropertiesComposer));
exports.PivotItemPropertiesComposer = PivotItemPropertiesComposer;


/***/ }),
/* 664 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _accordion_tab_1 = __webpack_require__(7);
var _base_properties_composer_1 = __webpack_require__(12);
var _shared_composers_1 = __webpack_require__(13);
var RangeFilterItemPropertiesComposer = (function (_super) {
    __extends(RangeFilterItemPropertiesComposer, _super);
    function RangeFilterItemPropertiesComposer(customizeHandler, editRuleHandler) {
        var _this = _super.call(this, customizeHandler) || this;
        _this.editRuleHandler = editRuleHandler;
        return _this;
    }
    RangeFilterItemPropertiesComposer.prototype._composeTabsCore = function (model, args) {
        return [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', _shared_composers_1.SharedComposers.getCommonWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.CustomRanges, 'DashboardWebStringId.RangeFilter.CustomPeriods', _shared_composers_1.SharedComposers.getCustomRangesWrapper(model, this.editRuleHandler, args.dataSourceBrowser, model.argument))
        ];
    };
    return RangeFilterItemPropertiesComposer;
}(_base_properties_composer_1.DashboardItemPropertiesComposer));
exports.RangeFilterItemPropertiesComposer = RangeFilterItemPropertiesComposer;


/***/ }),
/* 665 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _chart_axis_1 = __webpack_require__(134);
var _chart_item_1 = __webpack_require__(135);
var _accordion_tab_1 = __webpack_require__(7);
var _display_name_provider_1 = __webpack_require__(24);
var _base_properties_composer_1 = __webpack_require__(12);
var _shared_composers_1 = __webpack_require__(13);
var ScatterChartItemPropertiesComposer = (function (_super) {
    __extends(ScatterChartItemPropertiesComposer, _super);
    function ScatterChartItemPropertiesComposer(customizeHandler) {
        return _super.call(this, customizeHandler) || this;
    }
    ScatterChartItemPropertiesComposer.prototype._composeTabsCore = function (model, args) {
        var result = [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', _shared_composers_1.SharedComposers.getCommonWrapper(model, [_chart_item_1.chartRotated])),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.AxisX, 'DashboardWebStringId.Chart.AxisX', _shared_composers_1.SharedComposers.getAxisWrapper(model.axisX, ko.pureComputed(function () {
                return model.axisXMeasure() && _display_name_provider_1.getDataItemDisplayName(args.dataSourceBrowser, model, model.axisXMeasure());
            }), null)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.AxisY, 'DashboardWebStringId.Chart.AxisY', _shared_composers_1.SharedComposers.getAxisWrapper(model.axisY, ko.pureComputed(function () {
                return model.axisYMeasure() && _display_name_provider_1.getDataItemDisplayName(args.dataSourceBrowser, model, model.axisYMeasure());
            }), _chart_axis_1.alwaysShowZeroLevelScatter)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Labels, 'DashboardWebStringId.AccordionTab.Labels', _shared_composers_1.SharedComposers.getLabelsWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Legend, 'DashboardWebStringId.AccordionTab.ChartLegend', _shared_composers_1.SharedComposers.getLegendWrapper(model))
        ];
        return result;
    };
    return ScatterChartItemPropertiesComposer;
}(_base_properties_composer_1.DashboardItemPropertiesComposer));
exports.ScatterChartItemPropertiesComposer = ScatterChartItemPropertiesComposer;


/***/ }),
/* 666 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _knockout_utils_1 = __webpack_require__(17);
var _dashboard_layout_node_1 = __webpack_require__(287);
var _form_adapter_editors_1 = __webpack_require__(22);
var _object_properties_wrapper_1 = __webpack_require__(10);
var _accordion_tab_1 = __webpack_require__(7);
var _collection_editor_viewmodel_base_1 = __webpack_require__(115);
var _base_properties_composer_1 = __webpack_require__(12);
var TabContainerItemPropertiesComposer = (function (_super) {
    __extends(TabContainerItemPropertiesComposer, _super);
    function TabContainerItemPropertiesComposer(editTabPageHandler) {
        var _this = _super.call(this, function () { }) || this;
        _this.editTabPageHandler = editTabPageHandler;
        return _this;
    }
    TabContainerItemPropertiesComposer.prototype._composeTabsCore = function () { };
    TabContainerItemPropertiesComposer.prototype.composeTabs = function (tabContainer, args) {
        var _this = this;
        var tabContainerLayoutItem = args.dashboard.layout().findLayoutItem(tabContainer);
        if (!tabContainerLayoutItem) {
            return [];
        }
        var customItemTemplate = function (itemData, itemIndex, itemElement) {
            var item = ko.unwrap(itemData.item);
            var div = document.createElement('div');
            div.innerText = item && args.dashboard._getDisplayDashboardItem(item).name() || '';
            div.style.fontWeight = tabContainer._activeTabPage() === item ? '800' : 'normal';
            itemElement.appendChild(div);
            return div;
        };
        var refreshCallback = new _collection_editor_viewmodel_base_1.CollectionEditorRefreshCallback();
        var subscriptions = [];
        subscriptions.push(_knockout_utils_1.safeSubscribe({ activeTabPage: tabContainer._activeTabPage }, function (_) { return refreshCallback.refresh(); }));
        subscriptions.push(_knockout_utils_1.subscribeToArrayItemProperties(tabContainerLayoutItem.childNodes, function (node) {
            var tabPage = node.item;
            return tabPage && [tabPage.showItemAsTabPage, tabPage.name].map(function (s) { return s.subscribe(function () { return refreshCallback.refresh(); }); });
        }));
        var collectionEditorOptions = {
            createNewItemHandler: function () { return tabContainerLayoutItem._createTabPage(); },
            editItemHandler: function (layoutItem, args) { return _this.editTabPageHandler(layoutItem.item, args); },
            removeItemHandler: function (layoutItem) { return layoutItem._createViewModel().delete(); },
            enableRemoveItem: function () { return tabContainerLayoutItem.childNodes().length > 1; },
            reorderItemsHandler: function (layoutItem, direction) {
                var prevActiveTab = tabContainer._activeTabPage();
                var index = tabContainerLayoutItem.childNodes().indexOf(layoutItem);
                tabContainerLayoutItem.childNodes.splice(index, 1);
                tabContainerLayoutItem.childNodes.splice(index + (direction === 'up' ? -1 : 1), 0, layoutItem);
                if (prevActiveTab !== tabContainer._activeTabPage()) {
                    tabContainer._activeTabPage(prevActiveTab);
                }
            },
            customTemplate: customItemTemplate,
            forceRefreshCallback: refreshCallback,
        };
        return [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.TabContainer, 'DashboardStringId.DefaultNameTabContainerItem', new _object_properties_wrapper_1.ObjectPropertiesWrapper({
                model: tabContainerLayoutItem,
                properties: [
                    __assign({}, _dashboard_layout_node_1.layoutItemsSerializable, { displayName: 'DashboardWebStringId.TabPages', formAdapterItem: _form_adapter_editors_1.collectionEditor(collectionEditorOptions) })
                ],
                disposableModelSubscriptions: subscriptions,
            }))
        ];
    };
    return TabContainerItemPropertiesComposer;
}(_base_properties_composer_1.DashboardItemPropertiesComposer));
exports.TabContainerItemPropertiesComposer = TabContainerItemPropertiesComposer;


/***/ }),
/* 667 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var _text_box_item_1 = __webpack_require__(203);
var _form_adapter_editors_1 = __webpack_require__(22);
var _accordion_tab_1 = __webpack_require__(7);
var _base_properties_composer_1 = __webpack_require__(12);
var _shared_composers_1 = __webpack_require__(13);
var TextBoxItemPropertiesComposer = (function (_super) {
    __extends(TextBoxItemPropertiesComposer, _super);
    function TextBoxItemPropertiesComposer(customizeHandler) {
        return _super.call(this, customizeHandler) || this;
    }
    TextBoxItemPropertiesComposer.prototype._composeTabsCore = function (model) {
        var result = [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', _shared_composers_1.SharedComposers.getCommonWrapper(model, [__assign({}, _text_box_item_1.textBoxText, { formAdapterItem: _form_adapter_editors_1.filePickerEditor({ type: 'file', accept: '.rtf', readMode: 'text' }) })]))
        ];
        return result;
    };
    return TextBoxItemPropertiesComposer;
}(_base_properties_composer_1.DashboardItemPropertiesComposer));
exports.TextBoxItemPropertiesComposer = TextBoxItemPropertiesComposer;


/***/ }),
/* 668 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _dimension_1 = __webpack_require__(71);
var _treemap_item_1 = __webpack_require__(316);
var _object_properties_wrapper_1 = __webpack_require__(10);
var _accordion_tab_1 = __webpack_require__(7);
var _base_properties_composer_1 = __webpack_require__(12);
var _shared_composers_1 = __webpack_require__(13);
var TreemapItemPropertiesComposer = (function (_super) {
    __extends(TreemapItemPropertiesComposer, _super);
    function TreemapItemPropertiesComposer(customizeHandler) {
        return _super.call(this, customizeHandler) || this;
    }
    TreemapItemPropertiesComposer.prototype._composeTabsCore = function (model) {
        var result = [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', _shared_composers_1.SharedComposers.getCommonWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Layout, 'DashboardWebStringId.AccordionTab.Layout', this.getLayoutWrapper(model)),
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Labels, 'DashboardWebStringId.AccordionTab.Labels', this.getLabelsWrapper(model))
        ];
        return result;
    };
    TreemapItemPropertiesComposer.prototype.getLayoutWrapper = function (model) {
        var properties = [
            _treemap_item_1.layoutAlgorithm,
            _treemap_item_1.layoutDirection
        ];
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties
        });
    };
    TreemapItemPropertiesComposer.prototype.getLabelsWrapper = function (model) {
        var properties = [
            _treemap_item_1.tilesLabelContentType,
            _treemap_item_1.tilesTooltipContentType,
            _treemap_item_1.groupsLabelContentType,
            _treemap_item_1.groupsTooltipContentType
        ];
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties
        });
    };
    TreemapItemPropertiesComposer.getTileOptionsTab = function (model, dataItem) {
        return new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.TileOptions, 'DashboardWebStringId.TileOptions', TreemapItemPropertiesComposer.getTileOptionsWrapper(model, dataItem));
    };
    TreemapItemPropertiesComposer.getTileOptionsWrapper = function (model, dataItem) {
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: dataItem,
            properties: [_dimension_1.groupChildValues]
        });
    };
    return TreemapItemPropertiesComposer;
}(_base_properties_composer_1.DashboardItemPropertiesComposer));
exports.TreemapItemPropertiesComposer = TreemapItemPropertiesComposer;


/***/ }),
/* 669 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _card_layout_template_properties_composer_1 = __webpack_require__(649);
var EditCardTemplateSurface = (function () {
    function EditCardTemplateSurface(model, propertiesController, dimensionNames, applyTemplateToAllCards) {
        if (applyTemplateToAllCards === void 0) { applyTemplateToAllCards = function (template) { }; }
        this.model = model;
        this.propertiesController = propertiesController;
        this.dimensionNames = dimensionNames;
        this.applyTemplateToAllCards = applyTemplateToAllCards;
        this._disposables = [];
        this.propertiesTabs = ko.observableArray([]);
    }
    EditCardTemplateSurface.prototype.updatePropertiesTabs = function () {
        var composer = new _card_layout_template_properties_composer_1.CardTemplatePropertiesComposer();
        var tabs = composer.composeTabs(this.model, {
            dimensionNames: this.dimensionNames,
            applyTemplateToAllCards: this.applyTemplateToAllCards
        });
        this.propertiesTabs(tabs);
        this.propertiesController.secondaryModel({
            displayText: this.model.title,
            data: this
        });
    };
    EditCardTemplateSurface.prototype.startEditing = function (args) {
        args.createImmediately = false;
        this.updatePropertiesTabs();
    };
    EditCardTemplateSurface.prototype.dispose = function () {
        this._disposables.forEach(function (d) {
            d.dispose();
        });
    };
    return EditCardTemplateSurface;
}());
exports.EditCardTemplateSurface = EditCardTemplateSurface;


/***/ }),
/* 670 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _textbox_item_properties_composer_1 = __webpack_require__(667);
var _data_item_collection_surface_1 = __webpack_require__(33);
var _section_descriptors_1 = __webpack_require__(15);
var _base_item_surface_1 = __webpack_require__(23);
var TextBoxItemSurface = (function (_super) {
    __extends(TextBoxItemSurface, _super);
    function TextBoxItemSurface(dashboardItem, dashboardModel, dataSourceBrowser) {
        return _super.call(this, dashboardItem, dashboardModel, dataSourceBrowser) || this;
    }
    TextBoxItemSurface.prototype.fillSections = function () {
        var _this = this;
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.Values, function (tabs, model) { return _this.extendTabsHandler && _this.extendTabsHandler(tabs, model, _this.dashboardItem); }));
    };
    TextBoxItemSurface.prototype.getPropertiesComposer = function () {
        return new _textbox_item_properties_composer_1.TextBoxItemPropertiesComposer(this._dashboardItemCustomization);
    };
    return TextBoxItemSurface;
}(_base_item_surface_1.DataDashboardItemSurface));
exports.TextBoxItemSurface = TextBoxItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('TextBox', TextBoxItemSurface);


/***/ }),
/* 671 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var bound_image_item_1 = __webpack_require__(530);
var _data_dashboard_item_1 = __webpack_require__(26);
var _interactivity_options_1 = __webpack_require__(130);
var pivot_item_1 = __webpack_require__(334);
var text_box_item_1 = __webpack_require__(537);
var _object_properties_wrapper_1 = __webpack_require__(10);
var _accordion_tab_1 = __webpack_require__(7);
var InteractivityPropertiesComposer = (function () {
    function InteractivityPropertiesComposer(propertiesController) {
        this.propertiesController = propertiesController;
    }
    InteractivityPropertiesComposer.prototype.composeTabs = function (model) {
        var result = [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Interactivity, 'DashboardWebStringId.InteractivityOptions')
        ];
        var properties = [{
                container: _interactivity_options_1.commonInteractivityOptions,
                properties: [
                    _interactivity_options_1.isMasterFilterDefaultFalse,
                    _interactivity_options_1.masterFilterMode,
                    _interactivity_options_1.isDrillDownEnabled,
                    _interactivity_options_1.targetDimensions,
                    _interactivity_options_1.ignoreMasterFiltersDefaultFalse
                ]
            }];
        if (!((model instanceof pivot_item_1.PivotItem) || (model instanceof bound_image_item_1.BoundImageItem) || (model instanceof text_box_item_1.TextBoxItem))) {
            properties.push(_data_dashboard_item_1.isMasterFilterCrossDataSource);
        }
        var disabledRules = {};
        disabledRules[_data_dashboard_item_1.isMasterFilterCrossDataSource.propertyName] = [_interactivity_options_1.masterFilterMode.propertyName, '=', 'None'];
        if (model.interactivityOptions.targetDimensions) {
            model.interactivityOptions.targetDimensions.subscribe(function (newTargetDimension) {
                if (newTargetDimension === 'Points') {
                    model.interactivityOptions.isDrillDownEnabled(false);
                }
            });
            disabledRules[_interactivity_options_1.isDrillDownEnabled.propertyName] = [_interactivity_options_1.targetDimensions.propertyName, '=', 'Points'];
        }
        result[0].tabModel(new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model,
            properties: properties,
            disabledFilterRules: disabledRules
        }));
        return result;
    };
    return InteractivityPropertiesComposer;
}());
exports.InteractivityPropertiesComposer = InteractivityPropertiesComposer;


/***/ }),
/* 672 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var custom_store_1 = __webpack_require__(120);
var data_source_1 = __webpack_require__(65);
var tag_box_1 = __webpack_require__(101);
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var look_up_value_1 = __webpack_require__(108);
exports.singleLookupValueEditor = function (options) { return function (context) {
    return {
        editorType: 'dxSelectBox',
        editorOptions: getLookupValueEditorOptions(options.parameter, options.dataSourceBrowser, context.widgetContainer)
    };
}; };
exports.multipleLookupValueEditor = function (options) { return function (context) {
    return {
        template: function (args) {
            var div = document.createElement('div');
            new tag_box_1.default(div, __assign({}, args.editorOptions, getLookupValuesEditorOptions(options.parameter, options.dataSourceBrowser, context.widgetContainer)));
            return div;
        }
    };
}; };
function getLookupValueEditorOptions(parameter, dataSourceBrowser, container) {
    var disposables = [];
    var parameterValues;
    var items = ko.observable([]);
    disposables.push(ko.computed(function () {
        if (!!parameter.staticListLookUpSettings()) {
            items(parameter.staticListLookUpSettings().values().filter(function (lookUpValue) { return !!lookUpValue.value(); }).map(function (lookUpValue) { return { Value: lookUpValue.value(), DisplayText: lookUpValue.value() }; }));
        }
        else if (!!parameter.dynamicListLookUpSettings()) {
            parameterValues = dataSourceBrowser.getParameterValues(parameter.type(), parameter.dynamicListLookUpSettings());
            if (parameterValues().length === 0) {
                parameterValues.subscribe(function (newValues) { return items(newValues); });
            }
            else {
                items(parameterValues());
            }
        }
    }));
    var dataSource = new data_source_1.default({
        store: getSortableCustomStorage(items, 'DisplayText'),
        paginate: true,
        pageSize: 100
    });
    disposables.push(items.subscribe(function (newItems) {
        dataSource.reload();
    }));
    return {
        dataSource: dataSource,
        searchEnabled: true,
        valueExpr: 'Value',
        searchExpr: ['Value', 'DisplayText'],
        displayExpr: 'DisplayText',
        noDataText: _default_1.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'),
        placeholder: _default_1.getLocalizationById('DashboardStringId.ParametersSelectorText'),
        showClearButton: true,
        multiline: false,
        showSelectionControls: true,
        dropDownOptions: {
            container: container
        },
        onDisposing: function (e) {
            disposables.forEach(function (d) { return d.dispose(); });
            disposables = [];
        }
    };
}
function getLookupValuesEditorOptions(parameter, dataSourceBrowser, container) {
    return __assign({}, getLookupValueEditorOptions(parameter, dataSourceBrowser, container), { value: parameter._valuesOfDefaultValues.peek(), onValueChanged: function (e) {
            parameter.defaultValues((e.value || []).map(function (val) {
                var lookUpValue = new look_up_value_1.LookUpValue();
                lookUpValue.value(val);
                return lookUpValue;
            }));
        } });
}
function getSortableCustomStorage(getItems, sortPropertyName) {
    return new custom_store_1.default({
        load: function (options) {
            var result = [].concat(_sortItems(getItems(), sortPropertyName));
            if (options.take)
                result = result.splice(options.skip, options.take);
            return $.Deferred().resolve(result).promise();
        },
        loadMode: 'raw'
    });
}
function _sortItems(items, sortPropertyName) {
    return items.sort(function (a, b) {
        var propA = ko.unwrap(a[sortPropertyName]), propB = ko.unwrap(b[sortPropertyName]);
        if (propA && propB) {
            var diff = propA - propB;
            if (!isNaN(diff))
                return diff;
            propA = propA.toLowerCase ? propA.toLowerCase() : propA;
            propB = propB.toLowerCase ? propB.toLowerCase() : propB;
            return (propA < propB) ? -1 : (propA > propB) ? 1 : 0;
        }
    });
}


/***/ }),
/* 673 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var disposable_object_1 = __webpack_require__(11);
var _helper_classes_1 = __webpack_require__(36);
var parameter_1 = __webpack_require__(140);
var _parameter_editor_viewmodel_1 = __webpack_require__(776);
var ParameterListEditorViewModel = (function (_super) {
    __extends(ParameterListEditorViewModel, _super);
    function ParameterListEditorViewModel(dashboard, _dataSourceBrowserGetter) {
        var _this = _super.call(this) || this;
        _this.dashboard = dashboard;
        _this._dataSourceBrowserGetter = _dataSourceBrowserGetter;
        _this.selectedParameters = ko.observable([]);
        _this.selectedParameter = ko.computed(function () {
            return _this.selectedParameters()[0];
        });
        _this.parameterEditorViewModel = ko.observable(null);
        _this.allowReordering = ko.observable(false);
        _this.toggleReordering = function () {
            _this.allowReordering(!_this.allowReordering());
        };
        _this.addParameter = function () {
            var name = _helper_classes_1.NameGenerator.generateName(_default_1.getLocalizationById('DashboardStringId.NewParameterNamePrefix'), _this.dashboard().parameters(), 'name', 1), param = new parameter_1.Parameter({ '@Name': name });
            _this.dashboard().parameters.push(param);
            _this.selectedParameters([param]);
        };
        _this.removeParameter = function () {
            _this.dashboard().parameters.remove(_this.selectedParameter());
            _this.selectedParameters([_this.dashboard().parameters()[0]]);
        };
        _this.reorderParameters = function (e) {
            var reorder = function (array, from, to) {
                var innerArray = array();
                innerArray.splice(to, 0, innerArray.splice(from, 1)[0]);
                array(innerArray);
            };
            reorder(_this.dashboard().parameters, e.fromIndex, e.toIndex);
            _this.selectedParameters([_this.dashboard().parameters()[e.toIndex]]);
        };
        _this.selectedParameter.subscribe(function (sp) {
            if (sp) {
                var isNameValid = function (name) {
                    return _this.dashboard().parameters().filter(function (p) { return p !== sp && p.name() === name; }).length === 0;
                };
                _this.parameterEditorViewModel(new _parameter_editor_viewmodel_1.ParameterEditorViewModel(sp, _dataSourceBrowserGetter, isNameValid));
            }
            else {
                _this.parameterEditorViewModel(undefined);
            }
        });
        _this.toDispose(_this.selectedParameter);
        return _this;
    }
    ParameterListEditorViewModel.prototype.initialize = function () {
        var _this = this;
        var setDefaultSelectedParameter = function (dashboard) {
            if (dashboard && dashboard.parameters.peek().length > 0) {
                _this.selectedParameters([dashboard.parameters.peek()[0]]);
            }
            else {
                _this.selectedParameters([]);
            }
        };
        this.toDispose(this.dashboard.subscribe(setDefaultSelectedParameter));
        setDefaultSelectedParameter(this.dashboard.peek());
    };
    return ParameterListEditorViewModel;
}(disposable_object_1.DisposableObject));
exports.ParameterListEditorViewModel = ParameterListEditorViewModel;


/***/ }),
/* 674 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _interfaces_1 = __webpack_require__(76);
var ToolboxViewModel = (function () {
    function ToolboxViewModel(menuVisible, _defaultMenuItemData, _menuItems, _toolboxGroups, _toolbarGroups) {
        var _this = this;
        this._defaultMenuItemData = _defaultMenuItemData;
        this._menuItems = _menuItems;
        this._toolboxGroups = _toolboxGroups;
        this._toolbarGroups = _toolbarGroups;
        this.leftPanelWidth = 81;
        this.toggleMenu = function () {
            _this.settingsFormVisible(false);
            _this.settingsForm(null);
            _this.menuVisible(!_this.menuVisible());
        };
        this.toolbarHeight = ko.observable(0);
        this.settingsForm = ko.observable();
        this.closeMenu = function () {
            if (_this.menuVisible()) {
                _this.toggleMenu();
            }
        };
        this.showMenu = function () {
            if (!_this.menuVisible()) {
                _this.toggleMenu();
            }
        };
        this.menuItemClick = function (menuItem) {
            menuItem.click && menuItem.click();
            if (menuItem.template) {
                _this.settingsForm({
                    title: menuItem.title.replace('…', ''),
                    template: menuItem.template,
                    data: !!menuItem.data ? menuItem.data : _this._defaultMenuItemData
                });
                _this._menuItems().forEach(function (item) { return item.selected(item === menuItem); });
            }
        };
        this.menuVisible = ko.observable(false);
        this.designerPanelLeft = ko.observable(menuVisible ? 0 : -this.leftPanelWidth);
        this.menuItemsSorted = ko.pureComputed(function () {
            return _this._menuItems().sort(function (a, b) { return (a.index || Number.MAX_VALUE) - (b.index || Number.MAX_VALUE); });
        });
        this.toolboxGroupsSorted = ko.pureComputed(function () {
            return _this._toolboxGroups().sort(function (a, b) { return (a.index || Number.MAX_VALUE) - (b.index || Number.MAX_VALUE); });
        });
        this.toolbarGroupsSorted = ko.pureComputed(function () {
            return _this._toolbarGroups().sort(function (a, b) { return (a.index || Number.MAX_VALUE) - (b.index || Number.MAX_VALUE); });
        });
        this.settingsFormVisible = ko.computed({
            read: function () { return _this.menuVisible() && _this._menuItems().some(function (contextMenuItem) { return contextMenuItem.selected(); }); },
            write: function (val) { return _this._menuItems().forEach(function (item) { return item.selected(val); }); }
        });
    }
    ToolboxViewModel.prototype.processKeyEvent = function (keyEventType, eventArgs) {
        var _this = this;
        if (keyEventType === 'keyup') {
            if (eventArgs.altKey) {
                var menuItem = this._menuItems().filter(function (item) { return item.hotKey === eventArgs.keyCode; })[0];
                if (menuItem) {
                    setTimeout(function () {
                        setTimeout(function () { return _this.menuItemClick(menuItem); }, _this.menuVisible() ? 10 : 250);
                        _this.menuVisible(true);
                    }, 1);
                    return true;
                }
            }
        }
        else if (keyEventType === 'keydown') {
            if (eventArgs.keyCode === _interfaces_1.KeyCodes.Esc && this.menuVisible()) {
                this.closeMenu();
                return true;
            }
            else if (eventArgs.altKey && this._menuItems().map(function (menuItem) { return menuItem.hotKey; }).indexOf(eventArgs.keyCode) !== -1) {
                eventArgs.preventDefault();
                return true;
            }
        }
        return false;
    };
    ToolboxViewModel.prototype.showDesignerPanel = function () {
        this.designerPanelLeft(0);
    };
    ToolboxViewModel.prototype.hideDesignerPanel = function () {
        this.designerPanelLeft(-this.leftPanelWidth);
    };
    return ToolboxViewModel;
}());
exports.ToolboxViewModel = ToolboxViewModel;


/***/ }),
/* 675 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(164);
__webpack_require__(121);
var text_box_1 = __webpack_require__(121);
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var _data_source_browser_1 = __webpack_require__(40);
var _default_1 = __webpack_require__(6);
var _utils_1 = __webpack_require__(3);
var _data_field_1 = __webpack_require__(14);
var _calc_field_editor_1 = __webpack_require__(371);
var commonSelectedFieldName;
var isListMode = ko.observable(_utils_1.LocalStorageHelper.getItem('dx-dashboard-field-chooser-is-list-mode') === 'true');
var FieldChooserItem = (function () {
    function FieldChooserItem(data) {
        this.data = data;
    }
    FieldChooserItem.getName = function (data) {
        return data.nodeType && data.nodeType() && data.nodeType().toLowerCase().indexOf('olap') !== -1 ? data.dataMember() : data.name();
    };
    Object.defineProperty(FieldChooserItem.prototype, "displayName", {
        get: function () {
            return this.data.displayName();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldChooserItem.prototype, "name", {
        get: function () {
            return FieldChooserItem.getName(this.data);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldChooserItem.prototype, "isHierarchy", {
        get: function () {
            return this.data.nodeType && this.data.nodeType() === 'OlapHierarchy';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldChooserItem.prototype, "isLeaf", {
        get: function () {
            return this.data.isDataFieldNode();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldChooserItem.prototype, "isGroup", {
        get: function () {
            return !this.isLeaf && !this.isList;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldChooserItem.prototype, "type", {
        get: function () {
            return this.data.isDataFieldNode() ? this.data.fieldType() : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldChooserItem.prototype, "normalizedType", {
        get: function () {
            if (this.isList)
                return 'list';
            if (!this.isLeaf || this.type === undefined || this.data.nodeType && this.data.nodeType() === 'DataSource') {
                return '';
            }
            switch (this.type) {
                case 'Text':
                    return 'string';
                case 'Integer':
                    return 'integer';
                case 'Float':
                case 'Double':
                case 'Decimal':
                    return 'float';
                case 'DateTime':
                    return 'datetime';
                case 'Bool':
                case 'Boolean':
                    return 'boolean';
                case 'Binary':
                case 'ByteArray':
                    return 'binary';
            }
            return 'object';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldChooserItem.prototype, "isCalcField", {
        get: function () {
            return this.data.nodeType && this.data.nodeType() === 'CalculatedDataField';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldChooserItem.prototype, "isCorruptedCalcField", {
        get: function () {
            return this.isCalcField && this.data.isCorruptedCalcField();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldChooserItem.prototype, "isOlap", {
        get: function () {
            return _data_field_1.DataField.isOlap(this.data.dataMember());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldChooserItem.prototype, "isOlapDimension", {
        get: function () {
            return this.data.nodeType && this.data.nodeType() === 'OlapDimension';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldChooserItem.prototype, "isOlapDimensionHierarchy", {
        get: function () {
            return this.data.nodeType && this.data.nodeType() === 'OlapHierarchy';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldChooserItem.prototype, "isOlapMeasure", {
        get: function () {
            return this.data.nodeType && (this.data.nodeType() === 'OlapMeasure' || this.data.nodeType() === 'OlapMeasureFolder');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldChooserItem.prototype, "isAggregate", {
        get: function () {
            return this.data.isAggregate && this.data.isAggregate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldChooserItem.prototype, "isList", {
        get: function () {
            return !_data_source_browser_1.isNonCollectionDataField(this.data);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldChooserItem.prototype, "disabled", {
        get: function () {
            return this.isList;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldChooserItem.prototype, "typeTooltip", {
        get: function () {
            if (this.isList)
                return _default_1.getLocalizationById('DashboardStringId.MessageCollectionTypesNotSupported');
            if (this.isCorruptedCalcField)
                return _default_1.getLocalizationById('DashboardWebStringId.DataSources.CalculatedField.Corrupted');
            return this.data.fieldType();
        },
        enumerable: true,
        configurable: true
    });
    return FieldChooserItem;
}());
exports.FieldChooserItem = FieldChooserItem;
var TreeViewFieldChooserItem = (function (_super) {
    __extends(TreeViewFieldChooserItem, _super);
    function TreeViewFieldChooserItem(data, id, parentId) {
        var _this = _super.call(this, data) || this;
        _this.data = data;
        _this.id = id;
        _this.parentId = parentId;
        _this.selected = undefined;
        return _this;
    }
    return TreeViewFieldChooserItem;
}(FieldChooserItem));
exports.TreeViewFieldChooserItem = TreeViewFieldChooserItem;
var FieldChooserList = (function () {
    function FieldChooserList(owner, path, pathParts, _selectedField) {
        if (path === void 0) { path = ''; }
        var _this = this;
        this.owner = owner;
        this.path = path;
        this.pathParts = pathParts;
        this._selectedField = _selectedField;
        this.itemClick = function (args) {
            var item = args.itemData;
            if (!item.isLeaf) {
                _this.owner.slide(_this, item);
            }
            else {
                commonSelectedFieldName = item.data && item.data.dataMember();
                if (!_this._selectedField() || (_this._selectedField().dataMember() !== item.data.dataMember()) || ((item.data['dataSourceName']))) {
                    _this._selectedField(item.data);
                }
            }
        };
        this.items = ko.observable();
        this.index = ko.observable(0);
        this.ready = ko.observable(false);
        this.selectedItemName = ko.observable();
        this.loading = ko.observable(true);
        var fieldSelector = function (field) {
            if (field && ((field.dataMember() !== _this.selectedItemName()) || field['dataSourceName'])) {
                _this.selectedItemName(field.dataMember());
            }
        };
        _selectedField.subscribe(fieldSelector);
        fieldSelector(_selectedField());
        this.reload();
        this.ancestors = pathParts && pathParts.length ? ['…'].concat(pathParts) : null;
    }
    FieldChooserList.prototype.reload = function () {
        var _this = this;
        this.items([]);
        var loadingTimeout = setTimeout(function () { return _this.loading(true); }, 25);
        var _a = this.owner.dataSourceBrowser.splitFullPath(this.path), dataSource = _a.dataSource, dataMember = _a.dataMember, fieldPath = _a.fieldPath;
        this.owner.dataSourceBrowser.getDataFieldsArray(dataSource, dataMember, fieldPath, function () { return true; }).done(function (fields) {
            clearTimeout(loadingTimeout);
            _this.items(fields
                .filter(function (field) { return !_this.owner.filter || _this.owner.filter(field); })
                .map(function (field) { return new FieldChooserItem(field); }));
            _this.loading(false);
        });
    };
    return FieldChooserList;
}());
exports.FieldChooserList = FieldChooserList;
var SliderController = (function () {
    function SliderController(params) {
        var _this = this;
        this.lists = ko.observableArray();
        this.isSliding = false;
        this.backClick = function (pathItem, ancestors) {
            if (!_this.isSliding) {
                _this.isSliding = true;
                var pathIndex = ancestors.length - 1 - ancestors.indexOf(pathItem);
                _this.lists().forEach(function (list) { return list.index(list.index() + pathIndex); });
                setTimeout(function () {
                    _this.lists.splice(_this.lists().length - pathIndex);
                    _this.isSliding = false;
                }, FieldChooserController.TRANSITION_TIME);
            }
        };
        this.rootPath = params.startPath;
        this.dataSourceBrowser = params.dataSourceBrowser;
        this.filter = params.filter;
        this.selectedField = params.selectedField;
        this.lists([new FieldChooserList(this, this.rootPath(), [], this.selectedField)]);
        this.lists()[0].ready(true);
    }
    SliderController.prototype.slide = function (list, item) {
        var _this = this;
        if (!this.isSliding) {
            this.isSliding = true;
            var newList = new FieldChooserList(this, list.path === '' ? item.name : list.path + '.' + item.name, list.pathParts.concat([item.name]), this.selectedField);
            newList.index(1);
            this.lists.push(newList);
            setTimeout(function () {
                newList.ready(true);
                _this.lists().forEach(function (list) { return list.index(list.index() - 1); });
                setTimeout(function () {
                    _this.isSliding = false;
                }, FieldChooserController.TRANSITION_TIME);
            }, 1);
        }
    };
    SliderController.TRANSITION_TIME = 310;
    return SliderController;
}());
exports.SliderController = SliderController;
var FieldChooserController = (function (_super) {
    __extends(FieldChooserController, _super);
    function FieldChooserController(params) {
        var _this = _super.call(this, params) || this;
        _this.addCalcField = function () {
            var _a = _this.dataSourceBrowser.splitFullPath(_this.rootPath()), dataSource = _a.dataSource, dataMember = _a.dataMember, fieldPath = _a.fieldPath;
            _this.calcFieldEditor
                .showAddDialog(dataSource, dataMember)
                .then(function (cf) {
                _this.onCalcFieldSaveHandler(cf);
            });
        };
        _this.editCalcField = function () {
            var _a = _this.dataSourceBrowser.splitFullPath(_this.rootPath()), dataSource = _a.dataSource, dataMember = _a.dataMember, fieldPath = _a.fieldPath;
            var calcField = _this.getCurrentCalcField();
            _this.calcFieldEditor
                .showEditDialog(calcField, dataSource, dataMember)
                .then(function (cf) {
                _this.onCalcFieldSaveHandler(cf);
            });
        };
        _this.removeCalcField = function () {
            var _a = _this.dataSourceBrowser.splitFullPath(_this.rootPath()), dataSource = _a.dataSource, dataMember = _a.dataMember, fieldPath = _a.fieldPath;
            var calcField = _this.getCurrentCalcField();
            _this.calcFieldEditor
                .removeCalcField(calcField, dataSource)
                .then(function (cf) {
                _this.onCalcFieldSaveHandler(cf);
            });
        };
        _this.onCalcFieldSaveHandler = function (calcField) {
            var _a = _this.dataSourceBrowser.splitFullPath(_this.rootPath()), dataSource = _a.dataSource, dataMember = _a.dataMember, fieldPath = _a.fieldPath;
            var updateUI = function () {
                if (_this.isListMode.peek()) {
                    var list = _this.lists()[0];
                    list.reload();
                }
                else {
                    _this.treeViewInstanceResolver.then(function (treeViewInstance) { return treeViewInstance.option('dataSource', treeViewInstance.option('dataSource')); });
                }
            };
            updateUI();
            _this.dataSourceBrowser
                .findDataField(dataSource, dataMember, calcField.name())
                .then(function (field) {
                _this.selectedField(field);
                _this._navigateToSelection(field.dataMember());
                return field;
            })
                .then(updateUI);
        };
        _this.getCurrentCalcField = function () {
            if (!_this.selectedField())
                return null;
            var _a = _this.dataSourceBrowser.splitFullPath(_this.rootPath()), dataSource = _a.dataSource, dataMember = _a.dataMember, fieldPath = _a.fieldPath;
            var dataSourceInstance = _this.dataSourceBrowser.findDataSource(dataSource);
            if (!dataSourceInstance.hasCalculatedFields)
                return null;
            return dataSourceInstance.calculatedFields().filter(function (cf) { return cf.name() == _this.selectedField().name(); })[0];
        };
        _this.isCalcFieldSelected = ko.pureComputed(function () {
            return _this.selectedField() && _this.selectedField().nodeType && _this.selectedField().nodeType() === 'CalculatedDataField';
        });
        _this.isSearchMode = ko.observable(false);
        _this.searchString = ko.observable().extend({ throttle: 300 });
        _this.searchResults = ko.observableArray();
        _this.hasSearchResults = ko.observable(false);
        _this.searchButtonClick = function (_, ev) {
            var newValue = !_this.isSearchMode();
            _this.isSearchMode(newValue);
            if (newValue) {
                var textBoxContainer = ev.currentTarget.parentElement.parentElement.querySelector('.dx-textbox');
                var textBox_1 = text_box_1.default.getInstance(textBoxContainer);
                setTimeout(function () {
                    textBox_1.focus();
                    textBox_1.reset();
                }, 100);
            }
            else {
                _this.searchString(null);
            }
        };
        _this.selectViaSearchResults = function (data) {
            var searchResultItem = data.itemData;
            if ((searchResultItem.item.data.dataMember != null) &&
                (!_this.selectedField() || (searchResultItem.item.data.dataMember() !== _this.selectedField().dataMember()))) {
                _this.selectedField(searchResultItem.item.data);
            }
        };
        _this.selectedSearchResult = ko.computed(function () {
            return _this.searchResults().filter(function (res) { return res.item.data.dataMember && _this.selectedField() && res.item.data.dataMember() === _this.selectedField().dataMember(); })[0];
        });
        _this.isListMode = isListMode;
        _this.setListMode = function () {
            isListMode(true);
            _utils_1.LocalStorageHelper.setItem('dx-dashboard-field-chooser-is-list-mode', 'true');
            _this.lists().forEach(function (list, index) { return list.index.notifySubscribers(); });
        };
        _this.setTreeMode = function () {
            isListMode(false);
            _utils_1.LocalStorageHelper.setItem('dx-dashboard-field-chooser-is-list-mode', 'false');
        };
        _this.hasGroups = ko.computed(function () { return !_this.lists()[0].items().every(function (item) { return item.isLeaf; }); });
        _this.treeViewInstanceResolver = $.Deferred();
        var selectedFieldName = _this.selectedField() && _this.selectedField().dataMember() || commonSelectedFieldName;
        _this._navigateToSelection(selectedFieldName);
        if (!_this.selectedField()) {
            var navigationSubscription = _this.selectedField.subscribe(function (newSelection) {
                if (newSelection) {
                    _this._navigateToSelection(newSelection.dataMember());
                    navigationSubscription.dispose();
                }
            });
        }
        _this.searchString.subscribe(function (searchFor) {
            _this.searchResults([]);
            _this.hasSearchResults(false);
            if (!!searchFor) {
                _this.dataSourceBrowser.fuzzyFindFields(_this.rootPath(), searchFor).done(function (res) {
                    _this.searchResults(res
                        .filter(function (item) { return item.field.isDataFieldNode() && (!_this.filter || _this.filter(item.field)); })
                        .map(function (item) { return ({
                        path: _this.dataSourceBrowser.splitFullPath(item.path).fieldPath,
                        item: new FieldChooserItem(item.field)
                    }); }));
                    _this.hasSearchResults(true);
                });
            }
        });
        ko.computed(function () {
            if (!_this.hasGroups() && !_this.isListMode.peek()) {
                _this.isListMode(true);
            }
        });
        _this.calcFieldEditor = new _calc_field_editor_1.CalcFieldEditor(_this.dataSourceBrowser);
        return _this;
    }
    Object.defineProperty(FieldChooserController.prototype, "dataSourceName", {
        get: function () {
            var _a = this.dataSourceBrowser.splitFullPath(this.rootPath()), dataSource = _a.dataSource, dataMember = _a.dataMember, fieldPath = _a.fieldPath;
            return dataSource;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldChooserController.prototype, "canAddCalculatedField", {
        get: function () {
            return this.calcFieldEditor.canAddCalculatedField(this.dataSourceName);
        },
        enumerable: true,
        configurable: true
    });
    FieldChooserController.prototype._navigateToSelection = function (selectedFieldName) {
        var _this = this;
        if (!selectedFieldName) {
            return;
        }
        var pathComponents = (this.rootPath() || '').split('.');
        var fieldChooserConstraint = function (field) { return !_this.filter || _this.filter(field); };
        this.dataSourceBrowser.findPathToFieldInTree(pathComponents.shift(), pathComponents.join('.'), selectedFieldName, fieldChooserConstraint)
            .done(function (fieldPath) {
            if (_this.isListMode()) {
                if (fieldPath) {
                    if (_this.lists().length === 1) {
                        _this.lists()[0].ready(false);
                        var selectionList = fieldPath.split('.');
                        var currentPath = _this.rootPath(), currentPathParts = [];
                        selectionList.forEach(function (pathItem, index) {
                            currentPath = currentPath + '.' + pathItem;
                            if (_this.dataSourceBrowser.isFolder(currentPath)) {
                                currentPathParts = currentPathParts.concat(pathItem);
                                var newList = new FieldChooserList(_this, currentPath, currentPathParts, _this.selectedField);
                                newList.index(index + 1);
                                _this.lists.push(newList);
                            }
                        });
                    }
                    _this.isSliding = true;
                    _this.lists().forEach(function (list, index) { return list.index(index - _this.lists().length + 1); });
                    setTimeout(function () {
                        _this.lists().forEach(function (list) { return list.ready(true); });
                        _this.isSliding = false;
                    }, 1);
                }
                else {
                    _this.isSliding = true;
                    _this.lists().forEach(function (list, index) { return list.index(index); });
                    setTimeout(function () {
                        _this.isSliding = false;
                        _this.lists([_this.lists()[0]]);
                        _this.lists().forEach(function (list) { return list.ready(true); });
                    }, SliderController.TRANSITION_TIME);
                }
            }
            else {
                _this.treeViewInstanceResolver.then(function (treeViewInstance) {
                    if (fieldPath) {
                        var keys = fieldPath.split('.');
                        var nextNodeKey = _this.rootPath(), num = 1;
                        while (keys.length) {
                            var keyparts = keys.splice(0, num);
                            var key = keyparts.join('.');
                            num++;
                            nextNodeKey = nextNodeKey + '.' + key;
                            treeViewInstance.expandItem(nextNodeKey);
                        }
                    }
                });
            }
        });
    };
    Object.defineProperty(FieldChooserController.prototype, "dataSourceTreeOptions", {
        get: function () {
            var _this = this;
            return {
                dataSource: {
                    load: function (options) {
                        var parentId = options.filter && options.filter[1] || _this.rootPath();
                        var result = $.Deferred();
                        var _a = _this.dataSourceBrowser.splitFullPath(parentId), dataSource = _a.dataSource, dataMember = _a.dataMember, fieldPath = _a.fieldPath;
                        _this.dataSourceBrowser.getDataFieldsArray(dataSource, dataMember, fieldPath, function () { return true; }).done(function (fields) {
                            var data = fields
                                .filter(function (field) { return !_this.filter || _this.filter(field); })
                                .map(function (field) {
                                var name = FieldChooserItem.getName(field);
                                var item = new TreeViewFieldChooserItem(field, parentId + '.' + name, parentId === _this.rootPath ? undefined : parentId);
                                item.selected = _this.selectedField() && (field.dataMember() === _this.selectedField().dataMember());
                                return item;
                            });
                            result.resolve(data);
                        });
                        return result.promise();
                    },
                },
                rootValue: this.rootPath(),
                dataStructure: 'plain',
                keyExpr: 'id',
                parentIdExpr: 'parentId',
                hasItemsExpr: 'isGroup',
                showCheckBoxesMode: 'none',
                selectNodesRecursive: false,
                selectionMode: 'single',
                onItemClick: function (args) {
                    var field = args.itemData.data;
                    if (field.isDataFieldNode()) {
                        args.component.selectItem(args.itemData);
                    }
                },
                onItemSelectionChanged: function (model) {
                    var field = model.itemData.data;
                    commonSelectedFieldName = field && field.dataMember();
                    if (!_this.selectedField() || (_this.selectedField().dataMember() !== field.dataMember())) {
                        _this.selectedField(field);
                    }
                },
                virtualModeEnabled: true,
                onInitialized: function (e) { return _this.treeViewInstanceResolver.resolve(e.component); }
            };
        },
        enumerable: true,
        configurable: true
    });
    return FieldChooserController;
}(SliderController));
exports.FieldChooserController = FieldChooserController;
ko.components.register('dx-field-chooser', {
    viewModel: {
        createViewModel: function (params) {
            return new FieldChooserController(params);
        }
    },
    template: { element: 'dx-field-chooser-slider' }
});


/***/ }),
/* 676 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _obsolete_helper_1 = __webpack_require__(46);
__webpack_require__(677);
var Data = __webpack_require__(233);
var DataInternal = __webpack_require__(37);
var ViewerInternal = __webpack_require__(215);
var Common = __webpack_require__(244);
var CommonInternal = __webpack_require__(335);
var Metadata = __webpack_require__(191);
var Model = __webpack_require__(38);
var ModelInternal = __webpack_require__(58);
var Designer = __webpack_require__(411);
var DesignerInternal = __webpack_require__(612);
var DevExpress = window.DevExpress || {};
DevExpress.Dashboard = Common;
DevExpress.Dashboard.Data = Data;
DevExpress.Dashboard.Model = Model;
DevExpress.Dashboard.Designer = Designer;
Object.defineProperty(DevExpress.Dashboard.Designer, 'TextBoxItemEditorExtension', {
    get: function () {
        return __webpack_require__(796).TextBoxItemEditorExtension;
    },
    enumerable: false,
    configurable: true
});
DevExpress.Dashboard.Metadata = Metadata;
DevExpress.Dashboard.Internal = CommonInternal;
DevExpress.Dashboard.Internal.Data = DataInternal;
DevExpress.Dashboard.Internal.Model = ModelInternal;
DevExpress.Dashboard.Internal.Designer = DesignerInternal;
DevExpress.Dashboard.Internal.Viewer = ViewerInternal;
if (!DevExpress['JS']) {
    DevExpress['JS'] = {};
}
DevExpress['JS']['Dashboard'] = DevExpress.Dashboard;
if (!DevExpress['Localization']) {
    DevExpress['Localization'] = DevExpress.Analytics && DevExpress.Analytics.Localization;
}
function defineClassReplace(memberName) {
    _obsolete_helper_1.defineClassMoved(memberName, DevExpress.Dashboard, DevExpress.Dashboard.Designer, 'DevExpress.Dashboard', 'DevExpress.Dashboard.Designer', 'See https://www.devexpress.com/bcid=BC4459 for details.');
}
defineClassReplace('DashboardItemMenuExtension');
defineClassReplace('DashboardColorSchemeEditorExtension');
defineClassReplace('DashboardCurrencyEditorExtension');
defineClassReplace('DataSourceBrowserExtension');
defineClassReplace('MultiQueryDataSourceWizardExtension');
defineClassReplace('DataSourceWizardExtension');
defineClassReplace('AvailableDataSourcesExtension');
defineClassReplace('BindingPanelExtension');
defineClassReplace('ConversionPanelExtension');
defineClassReplace('CreateDashboardExtension');
defineClassReplace('InteractivityPanelExtension');
defineClassReplace('OpenDashboardExtension');
defineClassReplace('OptionsPanelExtension');
defineClassReplace('SaveDashboardExtension');
defineClassReplace('DashboardTitleEditorExtension');
defineClassReplace('UndoRedoExtension');
defineClassReplace('DashboardParameterEditorExtension');
defineClassReplace('ToolboxExtension');
defineClassReplace('DashboardMenuItem');
defineClassReplace('DashboardToolboxItem');
defineClassReplace('DashboardToolbarItem');
defineClassReplace('DashboardToolboxGroup');
defineClassReplace('DashboardToolbarGroup');
module.exports = DevExpress['Dashboard'];


/***/ }),
/* 677 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(233);
__webpack_require__(411);
__export(__webpack_require__(244));


/***/ }),
/* 678 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),
/* 679 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.tagValuesProvider = {
    getTag: function (listSource, tagDataMembers, rowIndex) {
        var values = null;
        if (tagDataMembers === null)
            return values;
        values = [];
        for (var i = 0; i < tagDataMembers.length; i++) {
            values.push(listSource.getRowValue(rowIndex, tagDataMembers[i]));
        }
        return this.getTagByValues(values);
    },
    getTagByValues: function (values) {
        if (!values || values.length === 0)
            return null;
        return values;
    }
};


/***/ }),
/* 680 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var tuple = (function () {
    function tuple(axisPoints) {
        var that = this;
        that.axisPoints = axisPoints;
    }
    tuple.prototype.getAxisPoint = function (axisName) {
        var that = this;
        return $.grep(that.axisPoints, function (axisPoint) {
            return axisPoint.AxisName == axisName;
        })[0];
    };
    return tuple;
}());
exports.tuple = tuple;


/***/ }),
/* 681 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),
/* 682 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),
/* 683 */
/***/ (function(module, exports) {

module.exports = DevExpress.registerComponent;

/***/ }),
/* 684 */
/***/ (function(module, exports) {

module.exports = DevExpress.utils.console;

/***/ }),
/* 685 */
/***/ (function(module, exports) {

module.exports = DevExpress;

/***/ }),
/* 686 */
/***/ (function(module, exports) {

module.exports = DevExpress.localization;

/***/ }),
/* 687 */
/***/ (function(module, exports) {

module.exports = DevExpress.ui.CollectionWidget;

/***/ }),
/* 688 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.ui.themes };

/***/ }),
/* 689 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),
/* 690 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),
/* 691 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),
/* 692 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),
/* 693 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),
/* 694 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),
/* 695 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dx_querybuilder_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var _base_metadata_1 = __webpack_require__(4);
var _data_source_1 = __webpack_require__(61);
exports.jsonDataSourceSerializationsInfo = _data_source_1.dataSourceSerializationsInfo.concat([
    _base_metadata_1.filter,
    { propertyName: 'connectionName', modelName: '@ConnectionName' },
    { propertyName: 'rootElement', modelName: '@RootElement', defaultVal: 'root' },
    {
        propertyName: 'schema', modelName: 'Schema',
        from: function (model, serializer) { return ko.observable(dx_querybuilder_1.default.Analytics.Data.JsonSchemaRootNode.from(model, serializer)); },
        toJsonObject: dx_querybuilder_1.default.Analytics.Data.JsonSchemaRootNode.toJson,
        category: _base_metadata_1.PropertyCategory.NoUpdateByObservableValue
    }
]);


/***/ }),
/* 696 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var data_source_1 = __webpack_require__(62);
var _xpo_data_source_1 = __webpack_require__(697);
var XpoDataSource = (function (_super) {
    __extends(XpoDataSource, _super);
    function XpoDataSource(dataSourceJSON, serializer) {
        if (dataSourceJSON === void 0) { dataSourceJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, dataSourceJSON, serializer) || this;
        _this.hasFilter = true;
        _this.hasCalculatedFields = true;
        return _this;
    }
    XpoDataSource.prototype.getInfo = function () {
        return _xpo_data_source_1.xpoDataSourceSerializationsInfo;
    };
    XpoDataSource.prototype.getDisplayNamePrefix = function () {
        return 'DashboardStringId.DefaultXpoDataSourceName';
    };
    XpoDataSource.prototype._getDefaultItemType = function () {
        return 'XPObjectSource';
    };
    return XpoDataSource;
}(data_source_1.DataSource));
exports.XpoDataSource = XpoDataSource;


/***/ }),
/* 697 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _base_metadata_1 = __webpack_require__(4);
var _data_source_1 = __webpack_require__(61);
exports.xpoDataSourceSerializationsInfo = _data_source_1.dataSourceSerializationsInfo.concat([_base_metadata_1.filter, _base_metadata_1.nameTag]);


/***/ }),
/* 698 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var serializable_model_1 = __webpack_require__(5);
var filter_element_item_base_1 = __webpack_require__(110);
var _tree_view_item_1 = __webpack_require__(300);
var TreeViewItem = (function (_super) {
    __extends(TreeViewItem, _super);
    function TreeViewItem(dashboardItemJSON, serializer) {
        if (dashboardItemJSON === void 0) { dashboardItemJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        return _super.call(this, dashboardItemJSON, serializer) || this;
    }
    TreeViewItem.prototype._getInfoCore = function () {
        return _tree_view_item_1.treeViewDashboardItemSerializationsInfo;
    };
    TreeViewItem.prototype._getDefaultItemType = function () {
        return 'TreeView';
    };
    TreeViewItem.prototype._allowAllValue = function () { return true; };
    TreeViewItem.prototype._isMultiselectable = function () { return true; };
    return TreeViewItem;
}(filter_element_item_base_1.FilterElementItemBase));
exports.TreeViewItem = TreeViewItem;
serializable_model_1.itemTypesMap['TreeView'] = { type: TreeViewItem, groupName: 'filter', title: 'DashboardStringId.DefaultNameTreeViewItem', index: 340 };


/***/ }),
/* 699 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var serializable_model_1 = __webpack_require__(5);
var dashboard_item_1 = __webpack_require__(60);
var _image_item_1 = __webpack_require__(137);
var ImageItem = (function (_super) {
    __extends(ImageItem, _super);
    function ImageItem(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.imageType = ko.observable('linked');
        if (_this.image64()) {
            _this.imageType('embedded');
        }
        else {
            _this.imageType('linked');
        }
        _this.imageType.subscribe(function (imageType) {
            switch (imageType) {
                case 'embedded':
                    _this.urlPath(null);
                    break;
                default:
                    _this.image64(null);
                    break;
            }
        });
        return _this;
    }
    ImageItem.prototype._getInfoCore = function () {
        return _image_item_1.imageDashboardItemSerializationsInfo;
    };
    ImageItem.prototype._getDefaultItemType = function () {
        return 'Image';
    };
    ImageItem.prototype._updateContentViewModel = function (content) {
        _super.prototype._updateContentViewModel.call(this, content);
        content.ViewModel.SizeMode = this.sizeMode();
        content.ViewModel.HorizontalAlignment = this.horizontalAlignment();
        content.ViewModel.VerticalAlignment = this.verticalAlignment();
    };
    return ImageItem;
}(dashboard_item_1.DashboardItem));
exports.ImageItem = ImageItem;
serializable_model_1.itemTypesMap['Image'] = { type: ImageItem, groupName: 'common', title: 'DashboardStringId.DefaultNameImageItem', index: 90 };


/***/ }),
/* 700 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var serializable_model_1 = __webpack_require__(5);
var geo_point_map_item_base_1 = __webpack_require__(213);
var _bubble_map_item_1 = __webpack_require__(500);
var BubbleMapItem = (function (_super) {
    __extends(BubbleMapItem, _super);
    function BubbleMapItem(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this._attachDataItem(_this, _bubble_map_item_1.bubbleMapWeight.propertyName);
        _this._attachDataItem(_this, _bubble_map_item_1.bubbleMapColor.propertyName);
        return _this;
    }
    BubbleMapItem.prototype._getInfoCore = function () {
        return _bubble_map_item_1.bubbleMapDashboardItemSerializationsInfo;
    };
    BubbleMapItem.prototype._clearBindings = function () {
        _super.prototype._clearBindings.call(this);
        this.__weight.uniqueName(null);
        this.__color.uniqueName(null);
    };
    BubbleMapItem.prototype._getDefaultItemType = function () {
        return 'BubbleMap';
    };
    return BubbleMapItem;
}(geo_point_map_item_base_1.GeoPointMapItemBase));
exports.BubbleMapItem = BubbleMapItem;
serializable_model_1.itemTypesMap['BubbleMap'] = { type: BubbleMapItem, groupName: 'maps', title: 'DashboardWebStringId.DefaultNameBubbleMapItem', index: 230 };


/***/ }),
/* 701 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var data_item_1 = __webpack_require__(8);
var serializable_model_1 = __webpack_require__(5);
var geo_point_map_item_base_1 = __webpack_require__(213);
var _geo_point_map_item_1 = __webpack_require__(506);
var GeoPointMapItem = (function (_super) {
    __extends(GeoPointMapItem, _super);
    function GeoPointMapItem(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this._attachDataItem(_this, _geo_point_map_item_1.value.propertyName);
        _this.__value._specifics.acceptableShapingType = data_item_1.AcceptableShapingType.String;
        return _this;
    }
    GeoPointMapItem.prototype._getInfoCore = function () {
        return _geo_point_map_item_1.geoPointMapDashboardItemSerializationsInfo;
    };
    GeoPointMapItem.prototype._getDefaultItemType = function () {
        return 'GeoPointMap';
    };
    return GeoPointMapItem;
}(geo_point_map_item_base_1.GeoPointMapItemBase));
exports.GeoPointMapItem = GeoPointMapItem;
serializable_model_1.itemTypesMap['GeoPointMap'] = { type: GeoPointMapItem, groupName: 'maps', title: 'DashboardWebStringId.DefaultNameGeoPointMapItem', index: 210 };


/***/ }),
/* 702 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var data_item_1 = __webpack_require__(8);
var _utils_1 = __webpack_require__(18);
var _base_metadata_1 = __webpack_require__(4);
var serializable_model_1 = __webpack_require__(5);
var data_dashboard_item_1 = __webpack_require__(9);
var geo_point_map_item_base_1 = __webpack_require__(213);
var _pie_map_item_1 = __webpack_require__(309);
var PieMapItem = (function (_super) {
    __extends(PieMapItem, _super);
    function PieMapItem(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.values = ko.observableArray([]);
        _this.__values = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(modelJson.Values, function (item) { return new data_item_1.DataItemLink(_this, item, serializer); });
        _this._subscribeDataItemLinkArrays(_pie_map_item_1.pieMapValues);
        _this._attachDataItem(_this, _pie_map_item_1.pieMapArgument.propertyName);
        data_dashboard_item_1.DataDashboardItem._addColoringMeta([_this.__argument]);
        return _this;
    }
    PieMapItem.prototype._clearBindings = function () {
        _super.prototype._clearBindings.call(this);
        this.__values.removeAll();
        this.__argument.uniqueName(null);
    };
    PieMapItem.prototype._getInfoCore = function () {
        return _pie_map_item_1.pieMapDashboardItemSerializationsInfo;
    };
    PieMapItem.prototype._getDefaultItemType = function () {
        return 'PieMap';
    };
    PieMapItem.prototype._getLayersCount = function () {
        return !!this.__values ? this.__values().length : 0;
    };
    PieMapItem.prototype._getLayerName = function () {
        return this._getDataItemDisplayName(this.__values()[this._selectedElementIndex() || 0].dataItem());
    };
    PieMapItem.prototype._getSliceDimensions = function () {
        return _super.prototype._getSliceDimensions.call(this).concat(this.__argument);
    };
    PieMapItem.prototype._getIsDimensionColoredByDefault = function (dimension) {
        return this.__argument.dataItem() === dimension;
    };
    PieMapItem.prototype._getAreMeasuresColoredByDefault = function () {
        return this.__values().length > 1 && !this.__argument.dataItem();
    };
    PieMapItem.prototype._getCanColorByMeasures = function () { return true; };
    PieMapItem.prototype._getCanColorByDimensions = function () { return true; };
    PieMapItem.prototype._getColorizableDataItemsInfo = function () {
        return [{
                items: [this.__argument],
                prefixId: _base_metadata_1.BindingSectionTitles.SingleArgument
            }];
    };
    __decorate([
        _utils_1.collectionItemType('Value')
    ], PieMapItem.prototype, "__values", void 0);
    return PieMapItem;
}(geo_point_map_item_base_1.GeoPointMapItemBase));
exports.PieMapItem = PieMapItem;
serializable_model_1.itemTypesMap['PieMap'] = { type: PieMapItem, groupName: 'maps', title: 'DashboardWebStringId.DefaultNamePieMapItem', index: 240 };


/***/ }),
/* 703 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var data_item_1 = __webpack_require__(8);
var pie_calc_window_definition_1 = __webpack_require__(526);
var _utils_1 = __webpack_require__(18);
var serializable_model_1 = __webpack_require__(5);
var chart_item_base_1 = __webpack_require__(326);
var _pie_item_1 = __webpack_require__(310);
var PieItem = (function (_super) {
    __extends(PieItem, _super);
    function PieItem(dashboardItemJSON, serializer) {
        if (dashboardItemJSON === void 0) { dashboardItemJSON = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, dashboardItemJSON, serializer) || this;
        _this.values = ko.observableArray([]);
        _this.__values = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(dashboardItemJSON.Values, function (item) { return new data_item_1.DataItemLink(_this, item, serializer); });
        _this._subscribeDataItemLinkArrays(_pie_item_1.pieValues);
        return _this;
    }
    PieItem.prototype._getInfoCore = function () {
        return _pie_item_1.pieDashboardItemSerializationsInfo;
    };
    PieItem.prototype._clearBindings = function () {
        _super.prototype._clearBindings.call(this);
        this.__values.removeAll();
    };
    PieItem.prototype._getDefaultItemType = function () {
        return 'Pie';
    };
    PieItem.prototype._getTargetDimensions = function () { return this.interactivityOptions.targetDimensions(); };
    PieItem.prototype._getMasterFilterMode = function () { return this.interactivityOptions.masterFilterMode(); };
    PieItem.prototype._getDrillDownEnabled = function () { return this.interactivityOptions.isDrillDownEnabled(); };
    PieItem.prototype._getIgnoreMasterFilter = function () { return this.interactivityOptions.ignoreMasterFilters(); };
    PieItem.prototype._getAreMeasuresColoredByDefault = function () { return this.values().length > 1 && this.arguments().length == 0; };
    PieItem.prototype._getIsDimensionColoredByDefault = function (dimension) {
        return !!this.arguments().filter(function (dim) { return dim === dimension; })[0];
    };
    PieItem.prototype._getLayersCount = function () {
        return !!this.__seriesDimensions && this.__seriesDimensions().length > 0 ? this.__values().length : 0;
    };
    PieItem.prototype._getLayerName = function () {
        return this._getDataItemDisplayName(this.__values()[this._selectedElementIndex() || 0].dataItem());
    };
    PieItem.prototype._getDefaultCalculationWindowDefinition = function () {
        return new pie_calc_window_definition_1.PieWindowDefinition();
    };
    __decorate([
        _utils_1.collectionItemType('Value')
    ], PieItem.prototype, "__values", void 0);
    return PieItem;
}(chart_item_base_1.ChartItemBase));
exports.PieItem = PieItem;
serializable_model_1.itemTypesMap['Pie'] = { type: PieItem, groupName: 'common', title: 'DashboardStringId.DefaultNamePieItem', index: 45 };


/***/ }),
/* 704 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var data_item_1 = __webpack_require__(8);
var _utils_1 = __webpack_require__(18);
var _base_metadata_1 = __webpack_require__(4);
var serializable_model_1 = __webpack_require__(5);
var data_dashboard_item_1 = __webpack_require__(9);
var _treemap_item_1 = __webpack_require__(316);
var TreemapItem = (function (_super) {
    __extends(TreemapItem, _super);
    function TreemapItem(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.values = ko.observableArray([]);
        _this.__arguments = ko.observableArray([]);
        _this.arguments = ko.observableArray([]);
        _this.__arguments.subscribe(function (newArguments) {
            data_dashboard_item_1.DataDashboardItem._addColoringMeta(newArguments);
        });
        _this.__arguments(dx_analytics_core_1.default.Analytics.Utils.deserializeArray(modelJson.Arguments, function (item) { return new data_item_1.DataItemLink(_this, item, serializer); })());
        _this._subscribeDataItemLinkArrays(_treemap_item_1.treeMapArgumentsMeta);
        _this.__values = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(modelJson.Values, function (item) { return new data_item_1.DataItemLink(_this, item, serializer); });
        _this._subscribeDataItemLinkArrays(_treemap_item_1.treeMapvalues);
        return _this;
    }
    TreemapItem.prototype._getInfoCore = function () {
        return _treemap_item_1.treemapDashboardItemSerializationsInfo;
    };
    TreemapItem.prototype._clearBindings = function () {
        _super.prototype._clearBindings.call(this);
        this.__arguments.removeAll();
        this.__values.removeAll();
    };
    TreemapItem.prototype._isCalculationSupported = function () {
        return false;
    };
    TreemapItem.prototype._getDefaultItemType = function () {
        return 'Treemap';
    };
    TreemapItem.prototype._getCanColorByMeasures = function () { return true; };
    TreemapItem.prototype._getCanColorByDimensions = function () { return true; };
    TreemapItem.prototype._getAreMeasuresColoredByDefault = function () { return this.__values().length > 1 && this.__arguments().length === 0; };
    TreemapItem.prototype._getIsDimensionColoredByDefault = function (dimension) {
        return this.__arguments().length > 0 && this.__arguments()[0].dataItem() === dimension;
    };
    TreemapItem.prototype._getMasterFilterMode = function () { return this.interactivityOptions.masterFilterMode(); };
    TreemapItem.prototype._getDrillDownEnabled = function () { return this.interactivityOptions.isDrillDownEnabled(); };
    TreemapItem.prototype._getIgnoreMasterFilter = function () { return this.interactivityOptions.ignoreMasterFilters(); };
    TreemapItem.prototype._getInteractivityDimensionLinks = function () { return this.__arguments(); };
    TreemapItem.prototype._getLayersCount = function () {
        return !!this.__arguments && this.__arguments().length > 0 ? this.__values().length : 0;
    };
    TreemapItem.prototype._getLayerName = function () {
        return this._getDataItemDisplayName(this.__values()[this._selectedElementIndex() || 0].dataItem());
    };
    TreemapItem.prototype._getColorizableDataItemsInfo = function () {
        return [{
                items: this.__arguments(),
                prefixId: _base_metadata_1.BindingSectionTitles.Arguments
            }];
    };
    TreemapItem.prototype._isSortingEnabled = function () {
        return false;
    };
    __decorate([
        _utils_1.collectionItemType('Value')
    ], TreemapItem.prototype, "__values", void 0);
    __decorate([
        _utils_1.collectionItemType('Argument')
    ], TreemapItem.prototype, "__arguments", void 0);
    return TreemapItem;
}(data_dashboard_item_1.DataDashboardItem));
exports.TreemapItem = TreemapItem;
serializable_model_1.itemTypesMap['Treemap'] = { type: TreemapItem, groupName: 'common', title: 'DashboardStringId.DefaultNameTreemapItem', index: 40 };


/***/ }),
/* 705 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var _undo_engine_helper_1 = __webpack_require__(27);
var index_internal_1 = __webpack_require__(58);
var dashboard_layout_group_1 = __webpack_require__(105);
var dashboard_layout_tab_page_1 = __webpack_require__(538);
var _layout_utils_1 = __webpack_require__(106);
var DashboardLayoutTabContainer = (function (_super) {
    __extends(DashboardLayoutTabContainer, _super);
    function DashboardLayoutTabContainer(modelJson, serializer) {
        if (modelJson === void 0) { modelJson = {}; }
        if (serializer === void 0) { serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this._activeTabIndex = ko.computed(function () {
            return _this.childNodes().map(function (node) { return node.item; }).indexOf(_this._activeTabPage());
        });
        _this._activeTabPage = ko.computed({
            read: function () {
                return _this.item ? _this.item._activeTabPage() : undefined;
            },
            write: function (tabPage) {
                var containerItem = _this.item;
                if (containerItem && containerItem._activeTabPage() !== tabPage) {
                    containerItem._activeTabPage(tabPage);
                }
            }
        });
        _this._visibleItemsCore = ko.observableArray();
        ko.computed(function () {
            var tabContainerItem = _this.item;
            if (tabContainerItem && !tabContainerItem._activeTabPage.peek()) {
                var firstTabPageLayoutItem = _this.childNodes()[0];
                if (firstTabPageLayoutItem && firstTabPageLayoutItem.item) {
                    tabContainerItem._activeTabPage(firstTabPageLayoutItem.item);
                }
            }
        });
        index_internal_1.subscribeArrayChange(_this.childNodes, {
            added: function (page, index) {
                if (_this.childNodes().length === 1 && !_this._activeTabPage()) {
                    if (page.item) {
                        _this._activeTabPage(page.item);
                    }
                    else {
                        var _disposables_1 = ko.computed(function () {
                            if (page.item) {
                                _this._activeTabPage(page.item);
                                _disposables_1.dispose();
                            }
                        });
                    }
                }
            },
            deleted: function (page) {
                if (_this._activeTabPage() && _this._activeTabPage().componentName() === page.dashboardItem()) {
                    _this._activeTabPage(_this.childNodes().length ? _this.childNodes()[0].item : null);
                }
            }
        });
        ko.computed(function () {
            _this._visibleItemsCore.removeAll();
            if (_this._tabContainer && _this._tabContainer._activeTabPage()) {
                var item = _this.childNodes().filter(function (childNode) { return childNode.item === _this._tabContainer._activeTabPage(); })[0];
                if (item)
                    _this._visibleItemsCore.push(item);
            }
        });
        return _this;
    }
    Object.defineProperty(DashboardLayoutTabContainer.prototype, "_tabContainer", {
        get: function () { return this.item; },
        enumerable: true,
        configurable: true
    });
    DashboardLayoutTabContainer.prototype._getDefaultItemType = function () { return 'LayoutTabContainer'; };
    Object.defineProperty(DashboardLayoutTabContainer.prototype, "_template", {
        get: function () { return 'dx-dashboard-tab-container'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardLayoutTabContainer.prototype, "_visibleItems", {
        get: function () { return this._visibleItemsCore; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardLayoutTabContainer.prototype, "_ignoreChildMaxHeight", {
        get: function () { return true; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardLayoutTabContainer.prototype, "_dragOverInnerElementController", {
        get: function () {
            var _this = this;
            return {
                selector: '.dx-layout-item-container .dx-tab', onDragOver: function (index) {
                    if (_this._tabContainer) {
                        _this._activeTabPage(_this.childNodes()[index].item);
                    }
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    DashboardLayoutTabContainer.prototype._setItemCore = function (newItem) {
        var _this = this;
        _super.prototype._setItemCore.call(this, newItem);
        var tabContainerItem = newItem;
        tabContainerItem.tabPages().forEach(function (tabPage) { return _this._addLayoutTabPage(tabPage); });
    };
    DashboardLayoutTabContainer.prototype._createTabPage = function () {
        if (this._tabContainer) {
            var tabPageModel = this._tabContainer._addNewPage();
            var layoutTabPage = this._addLayoutTabPage(tabPageModel);
            this._activeTabPage(tabPageModel);
            return layoutTabPage;
        }
        return undefined;
    };
    DashboardLayoutTabContainer.prototype._removeLayoutTabPage = function (tabPageModel) {
        var tabPageLayoutItem = this._dashboard().layout().findLayoutItem(tabPageModel);
        if (tabPageLayoutItem) {
            tabPageLayoutItem._createViewModel().delete();
        }
    };
    DashboardLayoutTabContainer.prototype._deleteDashbordItem = function () {
        if (this._dashboard()) {
            _super.prototype._deleteDashbordItem.call(this);
            this.childNodes().forEach(function (layoutPage) { return layoutPage._deleteDashbordItem(); });
            this._dashboard().items.remove(this.item);
        }
    };
    DashboardLayoutTabContainer.prototype._addLayoutTabPage = function (tabPageModel) {
        var layoutItem = new dashboard_layout_tab_page_1.DashboardLayoutTabPage();
        layoutItem.item = tabPageModel;
        this.childNodes.push(layoutItem);
        return layoutItem;
    };
    __decorate([
        _undo_engine_helper_1.wrapWithUndoRedo
    ], DashboardLayoutTabContainer.prototype, "_createTabPage", null);
    __decorate([
        _undo_engine_helper_1.wrapWithUndoRedo
    ], DashboardLayoutTabContainer.prototype, "_removeLayoutTabPage", null);
    return DashboardLayoutTabContainer;
}(dashboard_layout_group_1.DashboardLayoutGroup));
exports.DashboardLayoutTabContainer = DashboardLayoutTabContainer;
_layout_utils_1._layoutItemTypeMap['LayoutTabContainer'] = DashboardLayoutTabContainer;


/***/ }),
/* 706 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),
/* 707 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _interfaces_1 = __webpack_require__(76);
ko.components.register('dashboard-standalone-item', {
    viewModel: {
        createViewModel: function (params, componentInfo) {
            var element = componentInfo.element;
            return {
                dashboardItem: ko.unwrap(params.dashboardItem),
                dashboardContext: ko.unwrap(params.dashboardContext),
                localContext: ko.unwrap(params.localContext),
                sizeController: new _interfaces_1.SingleItemSizeController(element.parentElement, ko.unwrap(params.repaintRequest)),
                isStandalone: false
            };
        }
    },
    template: { element: 'dx-dashboard-standalone-item' }
});


/***/ }),
/* 708 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var devices_1 = __webpack_require__(119);
var events_1 = __webpack_require__(69);
var eventUtils = __webpack_require__(416);
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var mouseMoveHandlerKey = 'dxpointermove.dx-ko-layout-resize';
var mouseDownHandlerKey = 'dxpointerdown';
var mouseUpHandlerKey = 'dxpointerup.dx-ko-layout-resize';
function skipDevice(ev) {
    return devices_1.default.real().ios && eventUtils.isMouseEvent(ev);
}
function createHResizeHandler(layoutItem, $element, $ghostbar) {
    return function (ev) {
        $element.parents('.dx-layout').addClass('dx-layout-drag-in-progress');
        layoutItem.resizeStarted && layoutItem.resizeStarted();
        ev.preventDefault();
        var currentWidth = 0;
        var ghostOffsetX = ev.offsetX ? ev.offsetX : 0;
        var originalX = ev.pageX;
        var $ghostbar = $('<div>', {
            class: 'dx-ghostbar-e',
            css: {
                position: 'fixed',
                height: $element.outerHeight(),
                top: $element.offset().top,
                left: originalX - ghostOffsetX
            }
        }).appendTo('body');
        events_1.on(document, mouseMoveHandlerKey, function (e) {
            if (!skipDevice(e)) {
                var newWidth = layoutItem.width() + e.pageX - originalX;
                if (!layoutItem.isValidWidth || layoutItem.isValidWidth(newWidth)) {
                    currentWidth = newWidth;
                    $ghostbar.css('left', e.pageX - ghostOffsetX);
                }
            }
            e.preventDefault();
            return false;
        });
        events_1.on(document, mouseUpHandlerKey, function (e) {
            setTimeout(function () { return layoutItem.width(currentWidth); }, 1);
            $ghostbar.remove();
            $element.parents('.dx-layout').removeClass('dx-layout-drag-in-progress');
            events_1.off(document, mouseMoveHandlerKey);
            events_1.off(document, mouseUpHandlerKey);
            layoutItem.resizeCompleted && layoutItem.resizeCompleted();
            e.preventDefault();
        });
    };
}
function createVResizeHandler(layoutItem, $element, $ghostbar) {
    return function (ev) {
        $element.parents('.dx-layout').addClass('dx-layout-drag-in-progress');
        layoutItem.resizeStarted && layoutItem.resizeStarted();
        ev.preventDefault();
        var currentHeight = 0;
        var ghostOffsetY = ev.offsetY ? ev.offsetY : 0;
        var originalY = ev.pageY;
        var $ghostbar = $('<div>', {
            class: 'dx-ghostbar-s',
            css: {
                position: 'fixed',
                width: $element.outerWidth(),
                left: $element.offset().left,
                top: originalY - ghostOffsetY
            }
        }).appendTo('body');
        events_1.on(document, mouseMoveHandlerKey, function (e) {
            if (!skipDevice(e)) {
                var newHeight = layoutItem.height() + e.pageY - originalY;
                if (!layoutItem.isValidHeight || layoutItem.isValidHeight(newHeight)) {
                    currentHeight = newHeight;
                    $ghostbar.css('top', e.pageY - ghostOffsetY);
                }
            }
            return false;
        });
        events_1.on(document, mouseUpHandlerKey, function (e) {
            setTimeout(function () { return layoutItem.height(currentHeight); }, 1);
            $ghostbar.remove();
            $element.parents('.dx-layout').removeClass('dx-layout-drag-in-progress');
            events_1.off(document, mouseMoveHandlerKey);
            events_1.off(document, mouseUpHandlerKey);
            layoutItem.resizeCompleted && layoutItem.resizeCompleted();
        });
    };
}
ko.bindingHandlers['dx-ko-resizable'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var layoutItem = valueAccessor();
        var $element = $(element);
        var subscriptions = [];
        var unsubscribe = function () {
            subscriptions.forEach(function (subscr) {
                subscr.subscribable.dispose();
                events_1.off(subscr.dragbar.get(0), mouseDownHandlerKey);
                subscr.dragbar.remove();
            });
            subscriptions.splice(0, subscriptions.length);
        };
        var createResizeDragBars = function (resizeHandles) {
            unsubscribe();
            if (resizeHandles === 'e') {
                var $dragBar = $('<div>', {
                    class: 'dx-dragbar-e',
                    ondragover: 'event.stopPropagation();',
                    ondrop: 'event.stopPropagation();',
                    css: {
                        height: layoutItem.height()
                    }
                }).appendTo($element);
                var subscr = layoutItem.height.subscribe(function (val) {
                    $dragBar.css('height', val);
                });
                events_1.on($dragBar.get(0), mouseDownHandlerKey, createHResizeHandler(layoutItem, $element, $dragBar));
                subscriptions.push({
                    subscribable: subscr,
                    dragbar: $dragBar
                });
            }
            else if (resizeHandles === 's') {
                var $dragBar = $('<div>', {
                    class: 'dx-dragbar-s',
                    ondragover: 'event.stopPropagation();',
                    ondrop: 'event.stopPropagation();',
                    css: {
                        width: layoutItem.width()
                    }
                }).appendTo($element);
                var subscr = layoutItem.width.subscribe(function (val) {
                    $dragBar.css('width', val);
                });
                events_1.on($dragBar.get(0), mouseDownHandlerKey, createVResizeHandler(layoutItem, $element, $dragBar));
                subscriptions.push({
                    subscribable: subscr,
                    dragbar: $dragBar
                });
            }
        };
        if (ko.isSubscribable(layoutItem.resizeHandles)) {
            (layoutItem.resizeHandles).subscribe(createResizeDragBars);
        }
        createResizeDragBars(layoutItem.resizeHandles());
        ko.utils.domNodeDisposal.addDisposeCallback(element, unsubscribe);
    }
};


/***/ }),
/* 709 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),
/* 710 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),
/* 711 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),
/* 712 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),
/* 713 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var _title_toolbar_1 = __webpack_require__(338);
var _dashboard_title_toolbar_adapter_1 = __webpack_require__(337);
var DashboardTitleView = (function () {
    function DashboardTitleView() {
        this.onUpdated = $.Callbacks();
    }
    Object.defineProperty(DashboardTitleView.prototype, "_visible", {
        get: function () {
            return this._titleViewModel && this._titleViewModel.Visible;
        },
        enumerable: true,
        configurable: true
    });
    DashboardTitleView.prototype.initialize = function (container, controlContainer, encodeHtml, options, titleViewModel) {
        this._options = options;
        this._titleViewModel = titleViewModel;
        if (this._visible) {
            this._captionToolbar = new _title_toolbar_1.DashboardTitleToolbar(container, controlContainer, container, encodeHtml);
        }
    };
    DashboardTitleView.prototype.calcHeight = function (masterFilterValues) {
        if (this._visible) {
            var options = _dashboard_title_toolbar_adapter_1.DashboardTitleToolbarAdapter.getTitleOptions(this._titleViewModel, masterFilterValues, this._options.showExportDialog, this._options.showParametersDialog, this._options.allowExport);
            this._raiseUpdated(options);
            return this._captionToolbar.calcHeight(this._convertToToolbarOptions(options));
        }
        return 0;
    };
    DashboardTitleView.prototype.update = function (masterFilterValues) {
        if (this._visible) {
            var options = _dashboard_title_toolbar_adapter_1.DashboardTitleToolbarAdapter.getTitleOptions(this._titleViewModel, masterFilterValues, this._options.showExportDialog, this._options.showParametersDialog, this._options.allowExport);
            this._raiseUpdated(options);
            this._captionToolbar.update(this._convertToToolbarOptions(options), this._titleViewModel.LayoutModel.Alignment === 'Center');
        }
    };
    DashboardTitleView.prototype.resize = function () {
        if (this._visible) {
            this._captionToolbar.onResize();
        }
    };
    DashboardTitleView.prototype._convertToToolbarOptions = function (options) {
        return {
            staticItems: options.contentItems,
            actionItems: options.actionItems,
            stateItems: []
        };
    };
    DashboardTitleView.prototype._raiseUpdated = function (option) {
        this.onUpdated.fire(option);
    };
    return DashboardTitleView;
}());
exports.DashboardTitleView = DashboardTitleView;


/***/ }),
/* 714 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.ui.dxPopover };

/***/ }),
/* 715 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var fx_1 = __webpack_require__(716);
var string_1 = __webpack_require__(30);
var button_1 = __webpack_require__(169);
var button_group_1 = __webpack_require__(554);
var calendar_1 = __webpack_require__(717);
var date_box_1 = __webpack_require__(100);
var overlay_1 = __webpack_require__(172);
var $ = __webpack_require__(2);
var index_internal_1 = __webpack_require__(37);
var _formatter_1 = __webpack_require__(25);
var _utils_1 = __webpack_require__(3);
var _render_helper_1 = __webpack_require__(28);
var _utils_2 = __webpack_require__(555);
var _date_filter_widget_options_1 = __webpack_require__(718);
var DateFilterWidget = (function () {
    function DateFilterWidget(element, viewerOptions, boundaryElementContainer) {
        this.boundaryElementContainer = boundaryElementContainer;
        this._defaultButtonText = index_internal_1.getLocalizationById('DashboardStringId.DateFilterDatePickerButtonDefaultText');
        this._overlayShown = false;
        this._lockSelectionEvents = false;
        this._updateScrollableContainer = function () { };
        this._getBtnsContainerScrollWidth = function () { return 0; };
        this._datePickerContent = new _date_filter_widget_options_1.DatePickerButtons();
        this.quickButtons = [];
        var parent = document.createElement('div');
        element.appendChild(parent);
        this._scrollableContent = _render_helper_1.RenderHelper.wrapScrollable(parent, viewerOptions.overflow, 'both');
        this._updateScrollableContainer = function () { return _render_helper_1.RenderHelper.updateScrollable(parent); };
    }
    DateFilterWidget.prototype.element = function () {
        return _utils_1.wrapPublicElement(this._scrollableContent);
    };
    DateFilterWidget.prototype._update = function (widgetOptions) {
        var _this = this;
        this._options = __assign({}, this._getDefaultOptions(), widgetOptions);
        this._dispose();
        this._startDate = this._options.startDate;
        this._endDate = this._options.endDate;
        var hasQuickFilters = this._options.buttonsInfo.length > 0;
        var content = this._scrollableContent;
        this._widgetDiv = this._createDiv(content, _date_filter_widget_options_1.dateFilterWidgetClassNames.widget);
        var buttonsDiv = this._createButtonDiv();
        this._getBtnsContainerScrollWidth = function () { return Math.ceil(buttonsDiv.scrollWidth); };
        if (this._options.datePickerLocation == 'Near')
            this._addDatePicker(buttonsDiv);
        if (hasQuickFilters) {
            this._options.buttonsInfo.forEach(function (info) {
                var buttonDiv = _this._createDiv(buttonsDiv, _date_filter_widget_options_1.dateFilterWidgetClassNames.button);
                var button = new button_group_1.default(buttonDiv, {
                    items: [{ text: info }],
                    selectionMode: 'multiple',
                    focusStateEnabled: false,
                    onSelectionChanged: function (e) {
                        if (!_this._lockSelectionEvents) {
                            if (e.removedItems.length > 0)
                                _this._options.clearAction();
                            if (e.addedItems.length > 0) {
                                _this._selectQuickButton(e.component);
                                _this._options.buttonClick(e.component.option('items')[0].text);
                            }
                        }
                    }
                });
                _this.quickButtons.push(button);
            });
        }
        if (this._options.datePickerLocation == 'Far')
            this._addDatePicker(buttonsDiv);
        var overlayDiv = this._createDiv(this._widgetDiv, _date_filter_widget_options_1.dateFilterWidgetClassNames.overlayWrapper);
        this._createDropDownContent();
        this._overlay = new overlay_1.default(overlayDiv, this._getOverlayOptions());
        this._updateDropDownButtonText();
    };
    DateFilterWidget.prototype._getHeight = function () {
        return this._widgetDiv.offsetHeight;
    };
    DateFilterWidget.prototype._updateSize = function (width, height) {
        this._widgetDiv.style.height = 'auto';
        if (this._options.arrangementMode === 'Vertical') {
            this._widgetDiv.style.height = height + 'px';
            this._widgetDiv.style.width = width + 'px';
            var btnsContainerWidth = this._getBtnsContainerScrollWidth();
            var negativeBtnsContainerMargin = this._options.hasOuterMargin ? 0 : 6;
            if (btnsContainerWidth - Math.ceil(width) - negativeBtnsContainerMargin > 0) {
                this._widgetDiv.style.width = btnsContainerWidth + "px";
            }
            this._updateScrollableContainer();
        }
        else
            this._widgetDiv.style.width = width + 'px';
    };
    DateFilterWidget.prototype._setSelectedValues = function (values) {
        if (!!values && values.length > 0 && (!!values[0] || !!values[1])) {
            this._startDate = values[0];
            this._endDate = values[1];
            this._setDatePickerBtnState(true);
        }
        else {
            this._clearSelectedPeriods();
            this._setDatePickerBtnState(false);
        }
        this._updateDropDownButtonText();
    };
    DateFilterWidget.prototype._setPeriod = function (periodIndex) {
        var buttons = this.quickButtons;
        if (periodIndex != null && periodIndex < buttons.length) {
            this._setDatePickerBtnState(false);
            var button = buttons[periodIndex];
            button.option('selectedItems', button.option('items'));
        }
    };
    DateFilterWidget.prototype._clearSelectedPeriods = function () {
        var _this = this;
        this._performWithLockedEvents(function () {
            var buttons = _this.quickButtons;
            for (var i = 0; i < buttons.length; i++) {
                buttons[i].option('selectedItems', []);
            }
        });
    };
    DateFilterWidget.prototype._clearSelectedValues = function () {
        this._setSelectedValues([]);
        this._clearSelectedPeriods();
    };
    DateFilterWidget.prototype._submit = function () {
        var filterType = this._options.filterType;
        if (filterType === 'After') {
            this._startDate = this.calendarFrom.option('value');
            this._endDate = null;
        }
        if (filterType === 'Before') {
            this._startDate = null;
            this._endDate = this.calendarTo.option('value');
        }
        if (filterType === 'Exact') {
            this._startDate = this.calendarFrom.option('value');
            this._endDate = this.calendarFrom.option('value');
        }
        if (filterType === 'Between') {
            this._startDate = this.calendarFrom.option('value');
            this._endDate = this.calendarTo.option('value');
        }
        this._applyValues();
        this._overlay.hide();
        this._updateDropDownButtonText();
    };
    DateFilterWidget.prototype._applyValues = function () {
        var _this = this;
        this._processItemClick([this._startDate, this._endDate]);
        this._performWithLockedEvents(function () {
            for (var i = 0; i < _this.quickButtons.length; i++) {
                _this.quickButtons[i].option('selectedItems', []);
            }
            _this._setDatePickerBtnState(true);
        });
    };
    DateFilterWidget.prototype._addDatePicker = function (parentElement) {
        var _this = this;
        this._datePickerDiv = this._createDiv(parentElement, _date_filter_widget_options_1.dateFilterWidgetClassNames.button);
        this.datePickerButton = new button_group_1.default(this._datePickerDiv, {
            items: this._datePickerContent.getButtons(),
            focusStateEnabled: false,
            keyExpr: 'key',
            selectionMode: 'multiple',
            onSelectionChanged: function (e) {
                if (!_this._lockSelectionEvents) {
                    if (e.removedItems.length > 0 && e.removedItems[0].key === 'Check') {
                        _this._onDatePickerUnchecked();
                    }
                    var clickedButton = e.addedItems[0];
                    if (clickedButton) {
                        if (clickedButton.key === 'DropDown') {
                            _this._showPopup();
                        }
                        if (clickedButton.key === 'Check') {
                            if (_this._startDate == null && _this._endDate == null) {
                                e.component.option('selectedItemKeys', []);
                                _this._showPopup();
                            }
                            else {
                                _this._applyValues();
                            }
                        }
                        var selection = e.component.option('selectedItemKeys');
                        selection = selection.filter(function (key) { return key !== 'DropDown'; });
                        e.component.option('selectedItemKeys', selection);
                    }
                }
            }
        });
    };
    DateFilterWidget.prototype._getStartCalendarValue = function () {
        return this._startDate || this._options.minimum;
    };
    DateFilterWidget.prototype._getEndCalendarValue = function () {
        return this._endDate || this._options.maximum;
    };
    DateFilterWidget.prototype._createDiv = function (container) {
        var _this = this;
        var classes = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            classes[_i - 1] = arguments[_i];
        }
        var div = document.createElement('div');
        if (container != null)
            container.appendChild(div);
        classes.forEach(function (className) { return _this._addClass(div, className); });
        return div;
    };
    DateFilterWidget.prototype._createButtonDiv = function () {
        var classNames = [_date_filter_widget_options_1.dateFilterWidgetClassNames.buttons];
        if (this._options.arrangementMode === 'Vertical')
            classNames.push(_date_filter_widget_options_1.dateFilterWidgetClassNames.buttonsTopDown);
        else
            classNames.push(_date_filter_widget_options_1.dateFilterWidgetClassNames.buttonsLeftToRight);
        if (!this._options.hasOuterMargin)
            classNames.push(_date_filter_widget_options_1.dateFilterWidgetClassNames.buttonsNoPaddings);
        return this._createDiv.apply(this, [this._widgetDiv].concat(classNames));
    };
    DateFilterWidget.prototype._createDropDownContent = function () {
        var _this = this;
        var filterType = this._options.filterType;
        this._dropDownContentDiv = this._createDiv(null, _date_filter_widget_options_1.dateFilterWidgetClassNames.overlay);
        if (this._options.mobileLayout)
            this._addClass(this._dropDownContentDiv, _date_filter_widget_options_1.dateFilterWidgetClassNames.mobile);
        var createCalendar1 = function (withButton) {
            _this.calendarFrom = _this._createDatePicker(_this._dropDownContentDiv, function (value) { _this._startDate = value; }, withButton);
        };
        var createCalendar2 = function (withButton) {
            _this.calendarTo = _this._createDatePicker(_this._dropDownContentDiv, function (value) { _this._endDate = value; }, withButton);
        };
        if (filterType === 'Between') {
            createCalendar1(false);
            createCalendar2(true);
        }
        else if (filterType === 'Before')
            createCalendar2(true);
        else
            createCalendar1(true);
    };
    DateFilterWidget.prototype._createDatePicker = function (containerDiv, setDate, createButton) {
        if (this._options.mobileLayout)
            return this._createMobileCalendar(containerDiv, setDate, createButton);
        return this._createDesktopCalendar(containerDiv, createButton);
    };
    DateFilterWidget.prototype._createDesktopCalendar = function (containerDiv, createButton) {
        var div = this._createDiv(containerDiv, _date_filter_widget_options_1.dateFilterWidgetClassNames.overlayCalendarContainer);
        var calendar = this._createCalendar(div, function (e) {
            textBox.option('value', e.value);
        });
        var textBoxValueChanged = function (value) {
            calendar.option('value', value);
        };
        var textBox = this._createTextBox(div, textBoxValueChanged);
        if (createButton)
            this._createSubmitButton(div);
        return calendar;
    };
    DateFilterWidget.prototype._createMobileCalendar = function (containerDiv, setDate, createButton) {
        var div = this._createDiv(containerDiv, _date_filter_widget_options_1.dateFilterWidgetClassNames.overlayCalendarContainer);
        var textBoxValueChanged = function (value) {
            setDate(value);
        };
        var textBox = this._createTextBox(div, textBoxValueChanged);
        if (createButton)
            this._createSubmitButton(div);
        return textBox;
    };
    DateFilterWidget.prototype._createCalendar = function (containerDiv, valueChanged) {
        var div = this._createDiv(containerDiv, _date_filter_widget_options_1.dateFilterWidgetClassNames.overlayCalendar);
        return new calendar_1.default(div, {
            focusStateEnabled: false,
            maxZoomLevel: _utils_2.CalendarHelper.getCalendarMaxZoomLevel(this._options.groupInterval),
            onValueChanged: valueChanged
        });
    };
    DateFilterWidget.prototype._createTextBox = function (containerDiv, textBoxValueChanged) {
        var div = this._createDiv(containerDiv, _date_filter_widget_options_1.dateFilterWidgetClassNames.overlayTextBox);
        return new date_box_1.default(div, {
            width: 'auto',
            useMaskBehavior: true,
            displayFormat: 'shortdate',
            showDropDownButton: false,
            type: 'date',
            onValueChanged: function (e) {
                textBoxValueChanged(e.value);
            }
        });
    };
    DateFilterWidget.prototype._createSubmitButton = function (containerDiv) {
        var _this = this;
        var div = this._createDiv(containerDiv, _date_filter_widget_options_1.dateFilterWidgetClassNames.overlayButton);
        return new button_1.default(div, {
            text: index_internal_1.getLocalizationById('DashboardStringId.ButtonApply'),
            onClick: function (e) {
                _this._submit();
            }
        });
    };
    DateFilterWidget.prototype._processItemClick = function (values) {
        this._options.valueChanged && this._options.valueChanged(values);
    };
    DateFilterWidget.prototype._updateDropDownButtonText = function () {
        var start = this._startDate;
        var end = this._endDate;
        if (this.datePickerButton) {
            if (start || end) {
                var formatHandler = this._options.format;
                var startText = start ? formatHandler(start) : null;
                var endText = end ? formatHandler(end) : null;
                var formatPatten = this._options.displayTextPattern;
                if (!formatPatten) {
                    this._setDatePickerText(_formatter_1.constructIntervalFilterText({ left: startText, right: endText }), true);
                }
                else
                    this._setDatePickerText(string_1.format(formatPatten, startText, endText), true);
            }
            else {
                this._setDatePickerText(this._defaultButtonText, false);
            }
        }
    };
    DateFilterWidget.prototype._getDefaultOptions = function () {
        return {
            arrangementMode: 'AutoHeight',
            filterType: 'Between',
            datePickerLocation: 'Far',
            buttonsInfo: [],
            displayTextPattern: index_internal_1.getLocalizationById('DashboardStringId.FromToDatePeriodCaption'),
            groupInterval: 'DayMonthYear',
            format: function (value) { return value.toString(); }
        };
    };
    DateFilterWidget.prototype._addClass = function (el, className) {
        el.classList.add(className);
    };
    DateFilterWidget.prototype._removeClass = function (el, className) {
        el.classList.remove(className);
    };
    DateFilterWidget.prototype._dispose = function () {
        if (this.calendarFrom) {
            this.calendarFrom.dispose();
            this.calendarFrom = null;
        }
        if (this.calendarTo) {
            this.calendarTo.dispose();
            this.calendarTo = null;
        }
        this._scrollableContent.innerHTML = '';
        if (this.datePickerButton != null) {
            this.datePickerButton.dispose();
            this.datePickerButton = null;
        }
        for (var i = 0; i < this.quickButtons.length; i++)
            this.quickButtons[i].dispose();
        this.quickButtons = [];
        if (this._overlay) {
            this._overlay.dispose();
            this._overlay = null;
        }
    };
    DateFilterWidget.prototype._getOverlayOptions = function () {
        var _this = this;
        var that = this;
        return {
            container: that.boundaryElementContainer,
            animation: false,
            width: this._getOverlayWidth(),
            height: 'auto',
            position: {
                collision: 'flip',
                my: 'top left',
                at: 'bottom left',
                of: that._datePickerDiv
            },
            onHidden: function (e) {
                that._overlayShown = false;
            },
            contentTemplate: function (contentElement) {
                _utils_1.$unwrap(contentElement).appendChild(_this._dropDownContentDiv);
            },
            closeOnOutsideClick: true
        };
    };
    DateFilterWidget.prototype._getOverlayWidth = function () {
        if (this._options.mobileLayout)
            return function () { return $(window).width() * 0.9; };
        return 'auto';
    };
    DateFilterWidget.prototype._setDatePickerText = function (text, showDropDown) {
        if (!showDropDown)
            this._addClass(this._datePickerDiv, _date_filter_widget_options_1.dateFilterWidgetClassNames.datePickerButtonEmpty);
        else
            this._removeClass(this._datePickerDiv, _date_filter_widget_options_1.dateFilterWidgetClassNames.datePickerButtonEmpty);
        this._datePickerContent.showDropDown = showDropDown;
        this._datePickerContent.text = text;
        this.datePickerButton.option('items', this._datePickerContent.getButtons());
    };
    DateFilterWidget.prototype._selectQuickButton = function (button) {
        var _this = this;
        this._performWithLockedEvents(function () {
            _this._setDatePickerBtnState(false);
            for (var i = 0; i < _this.quickButtons.length; i++) {
                if (button != _this.quickButtons[i])
                    _this.quickButtons[i].option('selectedItems', []);
            }
        });
    };
    DateFilterWidget.prototype._showPopup = function () {
        this._overlayShown = !this._overlayShown;
        this._overlay.toggle(this._overlayShown);
        fx_1.default.off = true;
        this.calendarFrom && this.calendarFrom.option('value', this._getStartCalendarValue());
        this.calendarTo && this.calendarTo.option('value', this._getEndCalendarValue());
        fx_1.default.off = false;
    };
    DateFilterWidget.prototype._setDatePickerBtnState = function (checked) {
        if (this.datePickerButton) {
            if (checked && this.datePickerButton.option('selectedItemKeys')[0] !== 'Check') {
                this.datePickerButton.option('selectedItemKeys', ['Check']);
            }
            else if (!checked && this.datePickerButton.option('selectedItemKeys').length !== 0) {
                this.datePickerButton.option('selectedItemKeys', []);
            }
        }
    };
    DateFilterWidget.prototype._onDatePickerUnchecked = function () {
        if (this.quickButtons.every(function (button) { return button.option('selectedItemKeys').length === 0; }))
            this._options.clearAction();
    };
    DateFilterWidget.prototype._performWithLockedEvents = function (action) {
        this._lockSelectionEvents = true;
        try {
            action();
        }
        finally {
            this._lockSelectionEvents = false;
        }
    };
    return DateFilterWidget;
}());
exports.DateFilterWidget = DateFilterWidget;


/***/ }),
/* 716 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.fx };

/***/ }),
/* 717 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.ui.dxCalendar };

/***/ }),
/* 718 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.dateFilterWidgetClassNames = {
    widget: 'dx-dashboard-date-filter-widget',
    buttons: 'dx-dashboard-date-filter-buttons',
    buttonsNoPaddings: 'dx-dashboard-date-filter-buttons-no-caption',
    buttonsLeftToRight: 'dx-dashboard-date-filter-buttons-left-to-right',
    buttonsTopDown: 'dx-dashboard-date-filter-buttons-top-down',
    button: 'dx-dashboard-date-filter-button',
    datePickerButtonEmpty: 'dx-dashboard-date-filter-datepicker-button-empty',
    overlayWrapper: 'dx-dashboard-date-filter-overlay-wrapper',
    overlay: 'dx-dashboard-date-filter-overlay',
    mobile: 'dx-dashboard-date-filter-mobile',
    overlayCalendarContainer: 'dx-dashboard-date-filter-overlay-calendar-container',
    overlayCalendar: 'dx-dashboard-date-filter-overlay-calendar',
    overlayTextBox: 'dx-dashboard-date-filter-overlay-text-box',
    overlayButton: 'dx-dashboard-date-filter-overlay-button'
};
var DateFilterWidgetOptions = (function () {
    function DateFilterWidgetOptions() {
    }
    return DateFilterWidgetOptions;
}());
exports.DateFilterWidgetOptions = DateFilterWidgetOptions;
var DatePickerButtonElement = (function () {
    function DatePickerButtonElement() {
    }
    return DatePickerButtonElement;
}());
exports.DatePickerButtonElement = DatePickerButtonElement;
var DatePickerButtons = (function () {
    function DatePickerButtons() {
        this.showDropDown = false;
        this.checkButton = { key: 'Check' };
        this.dropDownButton = { key: 'DropDown', icon: 'edit' };
    }
    Object.defineProperty(DatePickerButtons.prototype, "text", {
        get: function () {
            return this.checkButton.text;
        },
        set: function (value) {
            this.checkButton.text = value;
        },
        enumerable: true,
        configurable: true
    });
    DatePickerButtons.prototype.getButtons = function () {
        var buttons = [];
        buttons.push(this.checkButton);
        if (this.showDropDown)
            buttons.push(this.dropDownButton);
        return buttons;
    };
    return DatePickerButtons;
}());
exports.DatePickerButtons = DatePickerButtons;


/***/ }),
/* 719 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var CardWidgetImplementation = (function () {
    function CardWidgetImplementation(notifyHandler) {
        var _this = this;
        this._onCustomizeText = undefined;
        this._cardBackColor = undefined;
        this.element = function () {
            return _this._element;
        };
        this._notifyChanged = notifyHandler;
    }
    CardWidgetImplementation.prototype._changed = function () {
        this._notifyChanged && this._notifyChanged();
    };
    Object.defineProperty(CardWidgetImplementation.prototype, "onCustomizeText", {
        get: function () {
            return this._onCustomizeText;
        },
        set: function (value) {
            this._onCustomizeText = value;
            this._changed();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardWidgetImplementation.prototype, "cardBackColor", {
        get: function () {
            return this._cardBackColor;
        },
        set: function (value) {
            this._cardBackColor = value;
            this._changed();
        },
        enumerable: true,
        configurable: true
    });
    return CardWidgetImplementation;
}());
exports.CardWidgetImplementation = CardWidgetImplementation;


/***/ }),
/* 720 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _base_item_1 = __webpack_require__(29);
var stubItem = (function (_super) {
    __extends(stubItem, _super);
    function stubItem(container, options) {
        return _super.call(this, container, options) || this;
    }
    stubItem.prototype.renderContentUnsafe = function (element, changeExisting, afterRenderCallback) {
        var options = this.options;
        element.innerText = options.Type;
        return false;
    };
    return stubItem;
}(_base_item_1.baseItem));
exports.stubItem = stubItem;


/***/ }),
/* 721 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var widgetItemCore = (function () {
    function widgetItemCore() {
    }
    return widgetItemCore;
}());
exports.widgetItemCore = widgetItemCore;


/***/ }),
/* 722 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.ui.dxRadioGroup };

/***/ }),
/* 723 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var circular_gauge_1 = __webpack_require__(251);
var utils_1 = __webpack_require__(174);
var linear_gauge_1 = __webpack_require__(252);
var _format_helper_1 = __webpack_require__(47);
var _utils_1 = __webpack_require__(3);
var _delta_indicator_1 = __webpack_require__(151);
var DELTA_INDENT = 10, DELTA_SIZE_COEFF = 0.5, DELTA_ASPECT_RATIO = 3 / 4;
var GaugeDeltaIndicator = (function () {
    function GaugeDeltaIndicator(parameters) {
        this._renderer = parameters.renderer;
        this._root = parameters.renderer.g().attr({ 'class': 'dxg-delta-indicator' }).linkOn(parameters.container, { name: 'delta-indicator', after: 'peripheral' });
        this._getOptions = parameters.optionsCallback;
    }
    GaugeDeltaIndicator.prototype.dispose = function () {
        this._root.linkOff();
        this._renderer = this._root = null;
        return this;
    };
    GaugeDeltaIndicator.prototype.draw = function () {
        var that = this, options = that._getOptions(), textValue = formatText(options.text);
        if (textValue === null)
            return null;
        that._root.linkAppend();
        var text = that._renderer.text(textValue, 0, 0).attr({
            align: 'center',
            'class': _delta_indicator_1.DeltaIndicator.getIndicatorColorType(options.type, options.hasPositiveMeaning, options.text.useDefaultColor)
        }).css(utils_1.patchFontOptions(options.text.font)).append(that._root);
        var textBox = text.getBBox(), shapeHeight = Math.round(textBox.height * DELTA_SIZE_COEFF), shapeWidth = Math.round(shapeHeight / DELTA_ASPECT_RATIO);
        var shape = new _delta_indicator_1.DeltaIndicator({ renderer: that._renderer }).draw({
            type: options.type,
            hasPositiveMeaning: options.hasPositiveMeaning,
            rect: {
                left: 0,
                right: shapeWidth,
                top: -textBox.y - shapeHeight,
                bottom: -textBox.y
            }
        });
        var width = textBox.width, height = textBox.height, x = Math.round(textBox.width / 2), y = -textBox.y;
        if (shape) {
            shape.append(that._root);
            width += shapeWidth + DELTA_INDENT;
            x += shapeWidth + DELTA_INDENT;
        }
        text.attr({ x: x, y: y });
        return [width, height];
    };
    GaugeDeltaIndicator.prototype.layoutOptions = function () {
        var options = this._getOptions(), layout = options.layout || {};
        return formatText(options.text) !== null ? {
            horizontalAlignment: layout.horizontalAlignment || 'center',
            verticalAlignment: layout.verticalAlignment || 'bottom'
        } : null;
    };
    GaugeDeltaIndicator.prototype.measure = function () {
        this.freeSpace();
        return this.draw();
    };
    GaugeDeltaIndicator.prototype.move = function (rect) {
        this._root.attr({ translateX: Math.round(rect[0]), translateY: Math.round(rect[1]) });
    };
    GaugeDeltaIndicator.prototype.freeSpace = function () {
        this._root.linkRemove().clear();
    };
    return GaugeDeltaIndicator;
}());
exports.GaugeDeltaIndicator = GaugeDeltaIndicator;
var formatText = function (options) {
    var text;
    if (options.value !== undefined) {
        var obj = {
            value: options.value,
            valueText: _format_helper_1.formatHelper.format(options.value, { type: options.format, precision: options.precision })
        };
        text = _utils_1.type.isFunction(options.customizeText) ? options.customizeText.call(obj, obj) : obj.valueText;
    }
    if (_utils_1.type.isString(text) && text) {
        return text;
    }
    return null;
};
var plugin = {
    name: 'delta_indicator',
    init: function () {
        var that = this;
        that._delta_indicator = new GaugeDeltaIndicator({
            renderer: that._renderer,
            container: that._renderer.root,
            optionsCallback: function () { return that._getOption('indicator'); }
        });
        that._layout.add(that._delta_indicator);
    },
    dispose: function () {
        this._delta_indicator.freeSpace();
        this._delta_indicator.dispose();
    }
};
circular_gauge_1.default.addPlugin(plugin);
linear_gauge_1.default.addPlugin(plugin);


/***/ }),
/* 724 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var disposable_object_1 = __webpack_require__(11);
var dashboard_item_1 = __webpack_require__(60);
var data_dashboard_item_1 = __webpack_require__(9);
var date_filter_item_1 = __webpack_require__(143);
var grid_item_1 = __webpack_require__(146);
var map_item_1 = __webpack_require__(214);
var pivot_item_1 = __webpack_require__(334);
var range_filter_item_1 = __webpack_require__(111);
var _data_item_viewer_adapter_1 = __webpack_require__(113);
var _grid_item_viewer_adapter_1 = __webpack_require__(591);
var _item_viewer_adapter_base_1 = __webpack_require__(356);
var _map_item_viewer_adapter_1 = __webpack_require__(592);
var _pivot_item_viewer_adapter_1 = __webpack_require__(593);
var _predefined_periods_item_viewer_adapter_1 = __webpack_require__(594);
var ViewerItemAdapterRecordElement = (function () {
    function ViewerItemAdapterRecordElement(adapter, visualMode) {
        if (adapter)
            this.setAdapter(adapter, visualMode);
    }
    ViewerItemAdapterRecordElement.prototype.setAdapter = function (adapter, visualMode) {
        if (this.storage && (this.storage instanceof _item_viewer_adapter_base_1.ItemViewerAdapterBase || visualMode === 'full'))
            throw new Error('Try to replace a primary dashboard item with the new one');
        if (!visualMode || visualMode === 'full') {
            this.storage = adapter;
        }
        else {
            if (!this.storage)
                this.storage = {};
            if (visualMode === 'caption') {
                this.storage.captionItem = adapter;
            }
            else {
                this.storage.contentItem = adapter;
            }
        }
    };
    ViewerItemAdapterRecordElement.prototype.suspend = function () {
        this.processMapRecordElement(function (adapter) { return adapter.suspend(); });
    };
    ViewerItemAdapterRecordElement.prototype.resume = function () {
        this.processMapRecordElement(function (adapter) { return adapter.resume(); });
    };
    ViewerItemAdapterRecordElement.prototype.dispose = function () {
        this.processMapRecordElement(function (adapter) { return adapter.dispose(); });
        this.storage = null;
    };
    ViewerItemAdapterRecordElement.prototype.processMapRecordElement = function (handler) {
        if (!this.storage)
            return;
        if (this.storage instanceof _item_viewer_adapter_base_1.ItemViewerAdapterBase) {
            handler(this.storage);
        }
        else {
            this.storage.captionItem && handler(this.storage.captionItem);
            this.storage.contentItem && handler(this.storage.contentItem);
        }
    };
    return ViewerItemAdapterRecordElement;
}());
var ViewerItemAdaptersManager = (function (_super) {
    __extends(ViewerItemAdaptersManager, _super);
    function ViewerItemAdaptersManager() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.viewerItemAdaptersMap = {};
        _this.modelSubscriberDict = [
            { type: range_filter_item_1.RangeFilterItem, ctor: _predefined_periods_item_viewer_adapter_1.PredefinedPeriodsItemViewerAdapter },
            { type: date_filter_item_1.DateFilterItem, ctor: _predefined_periods_item_viewer_adapter_1.PredefinedPeriodsItemViewerAdapter },
            { type: grid_item_1.GridItem, ctor: _grid_item_viewer_adapter_1.GridItemViewerAdapter },
            { type: pivot_item_1.PivotItem, ctor: _pivot_item_viewer_adapter_1.PivotItemViewerAdapter },
            { type: map_item_1.MapItem, ctor: _map_item_viewer_adapter_1.MapItemViewerAdapter },
            { type: data_dashboard_item_1.DataDashboardItem, ctor: _data_item_viewer_adapter_1.DataItemViewerAdapter },
            { type: dashboard_item_1.DashboardItem, ctor: _item_viewer_adapter_base_1.ItemViewerAdapterBase }
        ];
        _this.createAdapterCore = function (dashboardItem, element, context, localContext, beforeRender) {
            if (beforeRender === void 0) { beforeRender = function (item) { }; }
            var modelSubscriberCtor = null;
            for (var i = 0; i < _this.modelSubscriberDict.length; i++) {
                if (dashboardItem instanceof _this.modelSubscriberDict[i].type) {
                    modelSubscriberCtor = _this.modelSubscriberDict[i].ctor;
                    break;
                }
            }
            if (!modelSubscriberCtor) {
                modelSubscriberCtor = _this.modelSubscriberDict[_this.modelSubscriberDict.length - 1].ctor;
            }
            return (new modelSubscriberCtor(dashboardItem, element, context, localContext, beforeRender, function () { return _this.releaseAdapter(dashboardItem, localContext && localContext.itemCreatingType === 'secondary'); }));
        };
        return _this;
    }
    ViewerItemAdaptersManager.prototype.releaseAdapter = function (dashboardItem, isSecondaryAdapter) {
        if (!dashboardItem || !dashboardItem.componentName())
            return;
        var mapRecord = this.viewerItemAdaptersMap[dashboardItem.componentName()];
        if (mapRecord && isSecondaryAdapter) {
            if (mapRecord.secondary) {
                mapRecord.secondary = null;
                mapRecord.primary && mapRecord.primary.resume();
            }
        }
        else {
            delete this.viewerItemAdaptersMap[dashboardItem.componentName()];
        }
    };
    ViewerItemAdaptersManager.prototype.create = function (dashboardItem, element, context, localContext, beforeRender) {
        if (beforeRender === void 0) { beforeRender = function (item) { }; }
        var itemComponentName = dashboardItem.componentName();
        this.viewerItemAdaptersMap[itemComponentName] = this.viewerItemAdaptersMap[itemComponentName] || {};
        var visualMode = localContext && localContext.visualMode && localContext.visualMode() || 'full';
        var newAdapter = this.createAdapterCore(dashboardItem, element, context, localContext, beforeRender);
        var mapRecord = this.viewerItemAdaptersMap[itemComponentName];
        if (localContext && localContext.itemCreatingType === 'secondary') {
            if (visualMode !== 'full')
                throw new Error('Try to create a secondary dashboard item with non-full visual mode');
            mapRecord.primary && mapRecord.primary.suspend();
            mapRecord.secondary = new ViewerItemAdapterRecordElement(newAdapter, visualMode);
        }
        else {
            if (!mapRecord.primary)
                mapRecord.primary = new ViewerItemAdapterRecordElement(newAdapter, visualMode);
            else
                mapRecord.primary.setAdapter(newAdapter, visualMode);
        }
        return newAdapter;
    };
    ViewerItemAdaptersManager.prototype.dispose = function () {
        var _this = this;
        Object.keys(this.viewerItemAdaptersMap).forEach(function (componentName) {
            var mapRecord = _this.viewerItemAdaptersMap[componentName];
            if (mapRecord) {
                mapRecord.primary && mapRecord.primary.dispose();
                mapRecord.secondary && mapRecord.secondary.dispose();
            }
            delete _this.viewerItemAdaptersMap[componentName];
        });
        _super.prototype.dispose.call(this);
    };
    return ViewerItemAdaptersManager;
}(disposable_object_1.DisposableObject));
exports.ViewerItemAdaptersManager = ViewerItemAdaptersManager;


/***/ }),
/* 725 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _utils_1 = __webpack_require__(3);
var disposable_object_1 = __webpack_require__(11);
var index_internal_1 = __webpack_require__(58);
var _dashboard_item_helper_1 = __webpack_require__(102);
var _layout_1 = __webpack_require__(155);
var _dashboard_tabs_view_model_1 = __webpack_require__(596);
var _element_size_utils_1 = __webpack_require__(358);
function createViewerItemAdapter(element, dashboardItem, dashboardContext, localContext, sizeController) {
    var _disposables = [];
    var beforeRender = function (viewerItem) {
        var updateConstraintsHandler = function (viewerItem) {
            if (viewerItem && sizeController.setConstraints) {
                sizeController.setConstraints(viewerItem.getConstraints(true));
            }
        };
        updateConstraintsHandler(viewerItem);
        _disposables.push(dashboardItem.showCaption.subscribe(function () {
            setTimeout(function () { return updateConstraintsHandler(viewerItem); }, 100);
        }));
        viewerItem.constraintsUpdated.add(function () {
            updateConstraintsHandler(viewerItem);
        });
        _element_size_utils_1.setElementSize(element, sizeController);
        _disposables.push(_element_size_utils_1.createItemSizeUpdater(viewerItem, sizeController));
        if (sizeController.visible) {
            _disposables.push(sizeController.visible.subscribe(function (isVisible) {
                if (!isVisible) {
                    var castedItem = viewerItem;
                    if (castedItem.chartViewer) {
                        castedItem.chartViewer.hideTooltip();
                    }
                }
            }));
        }
    };
    var itemViewerAdapter = dashboardContext.viewerItemsManager.create(dashboardItem, element, dashboardContext, localContext, beforeRender);
    itemViewerAdapter.itemUpdated = function (viewerItem) { updateLayoutItemBackbound(element, viewerItem._isTransparentBackground()); };
    itemViewerAdapter.initialize();
    _disposables.push(itemViewerAdapter);
    return { dispose: function () { _disposables.forEach(function (disposable) { return disposable.dispose(); }); } };
}
function renderItemViewer(element, dashboardItem, dashboardContext, localContext, sizeController) {
    var perViewerItemDisposable;
    var subscription = null;
    if (localContext && localContext.visualMode) {
        subscription = index_internal_1.subscribeAndPerform(localContext.visualMode, function (_) {
            perViewerItemDisposable && perViewerItemDisposable.dispose();
            perViewerItemDisposable = createViewerItemAdapter(element, dashboardItem, dashboardContext, localContext, sizeController);
        });
    }
    else {
        subscription = createViewerItemAdapter(element, dashboardItem, dashboardContext, localContext, sizeController);
    }
    return {
        dispose: function () {
            perViewerItemDisposable && perViewerItemDisposable.dispose();
            subscription && subscription.dispose();
        }
    };
}
function getUiStateTemplate(dashboardItem, sizeController) {
    var sizeObservable = ko.observable();
    var setSizeClass = function (sizeController) {
        var height = sizeController.getHeight();
        if (height > 120) {
            sizeObservable('dx-dashboard-layout-state-large');
        }
        else if (height > 80) {
            sizeObservable('dx-dashboard-layout-state-medium');
        }
        else {
            sizeObservable('dx-dashboard-layout-state-small');
        }
    };
    setSizeClass(sizeController);
    var resizeHandler = function () { return setSizeClass(sizeController); };
    sizeController.requestRepaint.add(resizeHandler);
    var disposable = {
        dispose: function () {
            sizeController.requestRepaint.remove(resizeHandler);
        }
    };
    if (dashboardItem._uiState() === 'loading') {
        return { template: { name: 'dx-dashboard-item-state-loading' }, disposable: disposable };
    }
    else if (dashboardItem._uiState() === 'error') {
        return {
            template: {
                name: 'dx-dashboard-item-state-error',
                data: {
                    icon: _dashboard_item_helper_1.getItemIconName(dashboardItem),
                    title: _dashboard_item_helper_1.getItemTitle(dashboardItem),
                    errorState: dashboardItem._errorState,
                    sizeClass: sizeObservable
                }
            },
            disposable: disposable
        };
    }
    else if (dashboardItem._uiState() === 'empty') {
        return {
            template: {
                name: 'dx-dashboard-item-state-empty',
                data: {
                    icon: _dashboard_item_helper_1.getItemIconName(dashboardItem),
                    title: _dashboard_item_helper_1.getItemTitle(dashboardItem),
                    sizeClass: sizeObservable
                }
            },
            disposable: disposable
        };
    }
}
function updateLayoutItemBackbound(element, isTransparent) {
    if (isTransparent) {
        element.classList.add('dx-layout-item-container-transparent');
    }
    else {
        element.classList.remove('dx-layout-item-container-transparent');
    }
}
ko.bindingHandlers['dx-dashboard-item-binding'] = {
    init: function (element, valueAccessor, _, __, bindingContext) {
        var perUiStateSubscriptions = [];
        var params = ko.unwrap(valueAccessor());
        var dashboardItem = params.dashboardItem;
        var sizeController = params.sizeController;
        _element_size_utils_1.setElementSize(element, sizeController);
        element.classList.add('dx-dashboard-item-container');
        var renderDashboardItemState = function () {
            perUiStateSubscriptions.forEach(function (d) { return d.dispose(); });
            perUiStateSubscriptions = [];
            updateLayoutItemBackbound(element, false);
            if (dashboardItem._uiState() === 'live') {
                perUiStateSubscriptions.push(renderItemViewer(element, dashboardItem, params.dashboardContext, params.localContext, sizeController));
            }
            else {
                var _a = getUiStateTemplate(dashboardItem, sizeController), template = _a.template, disposable = _a.disposable;
                perUiStateSubscriptions.push(disposable);
                perUiStateSubscriptions.push(_element_size_utils_1.createElementSizeUpdater(element, sizeController));
                ko.applyBindingsToNode(element, { template: template }, bindingContext);
            }
        };
        renderDashboardItemState();
        var uiStateSubscription = dashboardItem._uiState.subscribe(function () { return renderDashboardItemState(); });
        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
            perUiStateSubscriptions.forEach(function (d) { return d.dispose(); });
            perUiStateSubscriptions = [];
            uiStateSubscription.dispose();
        });
        return { controlsDescendantBindings: true };
    }
};
ko.bindingHandlers['dx-dashboard-layout-group-binding'] = {
    init: function (element, valueAccessor) {
        var _disposables = [];
        var params = ko.unwrap(valueAccessor());
        element.classList.add('dx-dashboard-item-container');
        var sizeController = params.sizeController;
        _element_size_utils_1.setElementSize(element, sizeController);
        var itemViewerAdapter = params.dashboardContext.viewerItemsManager.create(params.dashboardItem, element, params.dashboardContext, params.localContext, function (viewerItem) {
            _disposables.push(ko.computed(function () {
                params.headerHeight(params.dashboardItem.showCaption() ? _layout_1.DashboardItemHeaderHeight : 0);
            }));
            _element_size_utils_1.setElementSize(element, sizeController);
            _disposables.push(_element_size_utils_1.createItemSizeUpdater(viewerItem, params.sizeController));
        });
        itemViewerAdapter.initialize();
        _disposables.push(itemViewerAdapter);
        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
            _disposables.forEach(function (d) { return d.dispose(); });
        });
        return { controlsDescendantBindings: true };
    }
};
ko.bindingHandlers['dx-dashboard-layout-tab-binding'] = {
    init: function (element, valueAccessor) {
        var _disposables = [];
        var params = ko.unwrap(valueAccessor());
        element.classList.add('dx-dashboard-item-container');
        if (params.ignoreBorder())
            element.classList.add('dx-dashboard-ignore-border');
        var sizeController = params.sizeController;
        _element_size_utils_1.setElementSize(element, sizeController);
        _disposables.push(params.sizeController.width.subscribe(function (newValue) { _element_size_utils_1.setElementSize(element, sizeController); }));
        _disposables.push(params.sizeController.height.subscribe(function (newValue) { _element_size_utils_1.setElementSize(element, sizeController); }));
        _disposables.push(params.ignoreBorder.subscribe(function (newValue) {
            if (newValue) {
                element.classList.add('dx-dashboard-ignore-border');
            }
            else {
                element.classList.remove('dx-dashboard-ignore-border');
            }
        }));
        var itemViewerAdapter = params.dashboardContext.viewerItemsManager.create(params.dashboardItem, element, params.dashboardContext, params.localContext, function (viewerItem) {
            _element_size_utils_1.setElementSize(element, sizeController);
            _disposables.push(_element_size_utils_1.createItemSizeUpdater(viewerItem, params.sizeController));
        });
        itemViewerAdapter.initialize();
        _disposables.push(itemViewerAdapter);
        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
            _disposables.forEach(function (d) { return d.dispose(); });
        });
        return { controlsDescendantBindings: true };
    }
};
var GroupViewModel = (function (_super) {
    __extends(GroupViewModel, _super);
    function GroupViewModel(params) {
        var _this = _super.call(this) || this;
        _this.defaultPadding = _layout_1.SplitterSize * 2;
        _this.padding = ko.observable(_this.defaultPadding);
        _this.headerHeight = ko.observable(_layout_1.DashboardItemHeaderHeight);
        _this.layoutItem = ko.computed(function () { return ko.unwrap(params.layoutItem); });
        ko.computed(function () {
            _this.layoutItem().verticalPaddings(_this.padding() * 2 + _this.headerHeight());
            _this.layoutItem().horizontalPaddings(_this.padding() * 2);
        });
        ko.computed(function () {
            _this.layoutItem().setConstraints({
                min: {
                    width: _this.layoutItem().items().length === 0 ? 100 : 0,
                    height: _this.layoutItem().items().length === 0 ? 100 : 0
                },
                max: {
                    width: Number.MAX_VALUE,
                    height: Number.MAX_VALUE
                }
            });
        });
        return _this;
    }
    return GroupViewModel;
}(disposable_object_1.DisposableObject));
exports.GroupViewModel = GroupViewModel;
var TabContainerViewModel = (function (_super) {
    __extends(TabContainerViewModel, _super);
    function TabContainerViewModel(params) {
        var _this = _super.call(this, params) || this;
        _this.activeItems = ko.observableArray();
        _this._activeItemsUpdateDebounced = _utils_1.debounce(function () {
            _this._updateActiveItems();
        }, 1);
        _this.headerHeight(0);
        _this._updateActiveItems();
        var isItemShownInsteadTabPage = ko.computed(function () {
            var activeLayoutItem = _this.layoutItem().items().length > 0 ? _this.layoutItem().items()[0] : undefined;
            if (!activeLayoutItem)
                return false;
            return !!activeLayoutItem._parent().viewModel.activeTabPage()
                && activeLayoutItem._parent().viewModel.activeTabPage() !== activeLayoutItem.viewModel.item();
        });
        ko.computed(function () {
            var newPadding = _this.defaultPadding;
            if (isItemShownInsteadTabPage()) {
                newPadding = _this.layoutItem().isDesignMode() ? 2 : 0;
            }
            _this.padding(newPadding);
        });
        _this.toDispose(_this.layoutItem().items.subscribe(function (newValue) {
            _this.activeItems.removeAll();
            _this._activeItemsUpdateDebounced();
        }));
        return _this;
    }
    TabContainerViewModel.prototype._updateActiveItems = function () {
        var _this = this;
        this.layoutItem().items().forEach(function (item) {
            _this.activeItems.push(item);
        });
    };
    return TabContainerViewModel;
}(GroupViewModel));
exports.TabContainerViewModel = TabContainerViewModel;
ko.components.register('dx-dashboard-layout-group', {
    viewModel: GroupViewModel,
    template: { element: 'dx-dashboard-layout-group' }
});
ko.components.register('dx-dashboard-layout-tab-container', {
    viewModel: TabContainerViewModel,
    template: { element: 'dx-dashboard-layout-tab-container' }
});
ko.components.register('dashboard-layout-tabs', {
    viewModel: {
        createViewModel: function (params, componentInfo) {
            return new _dashboard_tabs_view_model_1.DashboardTabsViewModel(params.layoutItem, params.headerHeight, componentInfo.element);
        }
    },
    template: { element: 'dx-dashboard-layout-tabs' }
});


/***/ }),
/* 726 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var DashboardEvent = (function () {
    function DashboardEvent() {
        this.handlers = [];
    }
    DashboardEvent.prototype.add = function (handler) {
        var _this = this;
        this.handlers.push(handler);
        return {
            dispose: function () { return _this.remove(handler); }
        };
    };
    DashboardEvent.prototype.remove = function (handler) {
        this.handlers = this.handlers.filter(function (h) { return h !== handler; });
    };
    DashboardEvent.prototype.fire = function (args) {
        this.handlers.forEach(function (h) { return h(args); });
    };
    return DashboardEvent;
}());
exports.DashboardEvent = DashboardEvent;


/***/ }),
/* 727 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _item_data_tuple_1 = __webpack_require__(98);
var _default_1 = __webpack_require__(6);
var _utils_1 = __webpack_require__(3);
var _date_filter_element_1 = __webpack_require__(222);
var _inspected_data_colum_generator_1 = __webpack_require__(601);
function _createDimensionColumnInfo(dimension, axisName) {
    return {
        getValue: function (row) {
            var point = row.getAxisPoint(axisName);
            if (point) {
                var dimensionValue = point.getDimensionValue(dimension.id);
                if (dimensionValue) {
                    return {
                        displayValue: dimensionValue.getDisplayText(),
                        value: dimensionValue.getUniqueValue()
                    };
                }
            }
            return null;
        },
        getGridColumn: function () {
            return {
                dataField: dimension.id,
                caption: dimension.name || dimension.dataMember || dimension.id,
                calculateCellValue: function (row) { return row[dimension.id] && row[dimension.id].value; }
            };
        }
    };
}
function _createMeasureColumnInfo(itemData, measure, isSparklineMeasure) {
    var sparklineColumnId = '_Sparkline';
    var getSparklineCellText = function (defaultAxisPoint) {
        var argumentValueSeparator = _default_1.getLocalizationById('DashboardStringId.SparklineArgumentValueSeparator');
        var valuesSeparator = _default_1.getLocalizationById('DashboardStringId.SparklineValuesSeparator');
        return itemData
            .getAxis('Sparkline')
            .getPoints()
            .map(function (sparklinePoint) {
            var measureValue = itemData.getSlice(sparklinePoint).getSlice(defaultAxisPoint).getMeasureValue(measure.id);
            if (measureValue) {
                return sparklinePoint.getDisplayText() + argumentValueSeparator + measureValue.getDisplayText();
            }
            return '';
        })
            .join(valuesSeparator);
    };
    return {
        getValue: function (row) {
            if (isSparklineMeasure && itemData.getAxisNames().indexOf('Sparkline') !== -1) {
                var cellText = getSparklineCellText(row.getAxisPoint());
                return { displayValue: cellText, value: cellText };
            }
            return {
                displayValue: itemData.getSlice(row).getMeasureValue(measure.id).getDisplayText(),
                value: itemData.getSlice(row).getMeasureValue(measure.id).getValue()
            };
        },
        getGridColumn: function () {
            var dataField = !isSparklineMeasure ? measure.id : measure.id + sparklineColumnId;
            var caption = measure.name || measure.dataMember || measure.id;
            switch (measure.id) {
                case _date_filter_element_1.dateFilterElement.MinMeasureId:
                    caption += ' ' + _default_1.getLocalizationById('DashboardStringId.StartDate');
                    break;
                case _date_filter_element_1.dateFilterElement.MaxMeasureId:
                    caption += ' ' + _default_1.getLocalizationById('DashboardStringId.EndDate');
                    break;
            }
            return {
                dataField: dataField,
                caption: caption,
                calculateCellValue: function (row) { return row[dataField] && row[dataField].value; }
            };
        }
    };
}
function _createColumns(itemData, axes, args) {
    return axes
        .reduce(function (acc, axis) {
        var distinctDimensions = _utils_1.distinct(itemData.getDimensions(axis), function (dim1, dim2) { return dataInspectorItemDataDimensionComparer(dim1, dim2, itemData); });
        return acc.concat(distinctDimensions.map(function (dimension) { return _createDimensionColumnInfo(dimension, axis); }));
    }, [])
        .concat(_utils_1.distinct(_inspected_data_colum_generator_1.getMeasureColumns(itemData), function (m1, m2) { return dataInspectorItemDataMeasureComparer(m1, m2, itemData, args.addSparklineTotal, args.sparklineMeasures); })
        .reduce(function (acc, measure) {
        var isSparklineMeasure = args.sparklineMeasures != null && args.sparklineMeasures.indexOf(measure.id) !== -1;
        acc.push(_createMeasureColumnInfo(itemData, measure, isSparklineMeasure));
        if (isSparklineMeasure && args.addSparklineTotal) {
            acc.push(_createMeasureColumnInfo(itemData, measure, false));
        }
        return acc;
    }, []));
}
function _createRows(itemData, axes) {
    if (axes.length) {
        return itemData
            .getAxis(axes[0])
            .getAvaliableLeafPoints()
            .reduce(function (acc, primaryAxisPoint) {
            if (axes.length > 1) {
                acc = acc.concat(itemData
                    .getAxis(axes[1])
                    .getAvaliableLeafPoints()
                    .map(function (secondaryAxisPoint) { return new _item_data_tuple_1.itemDataTuple([primaryAxisPoint, secondaryAxisPoint]); }));
            }
            else {
                acc.push(new _item_data_tuple_1.itemDataTuple([primaryAxisPoint]));
            }
            return acc;
        }, []);
    }
    else {
        var defaultAxis = itemData.getAxisNames()[0];
        var axisPoints = defaultAxis ? [itemData.getAxis(defaultAxis).getRootPoint()] : [];
        return [new _item_data_tuple_1.itemDataTuple(axisPoints)];
    }
}
function generateAggregatedSource(itemData, args) {
    if (itemData && !itemData.isEmpty()) {
        var axes = _inspected_data_colum_generator_1.getSortedAxes(itemData, true);
        var columnsInfo_1 = _createColumns(itemData, axes, args);
        var rows = _createRows(itemData, axes);
        return {
            columns: columnsInfo_1.map(function (columnInfo) { return columnInfo.getGridColumn(); }),
            customizeColumns: function () { },
            data: rows.map(function (row) {
                return columnsInfo_1.reduce(function (acc, columnInfo) {
                    acc[columnInfo.getGridColumn().dataField] = columnInfo.getValue(row);
                    return acc;
                }, {});
            })
        };
    }
    return {
        columns: [],
        customizeColumns: function () { },
        data: []
    };
}
exports.generateAggregatedSource = generateAggregatedSource;
function dataInspectorItemDataDimensionComparer(x, y, data) {
    return x.name === y.name
        && x.dataMember === y.dataMember
        && x.dateTimeGroupInterval === y.dateTimeGroupInterval
        && x.textGroupInterval === y.textGroupInterval
        && _utils_1.deepStrictEquals(data.getDimensionFormat(x.id), data.getDimensionFormat(y.id));
}
exports.dataInspectorItemDataDimensionComparer = dataInspectorItemDataDimensionComparer;
function dataInspectorItemDataMeasureComparer(x, y, data, addSparklineTotal, sparklineMeasures) {
    return x.name === y.name
        && x.dataMember == y.dataMember
        && (addSparklineTotal ||
            !sparklineMeasures || ((sparklineMeasures.indexOf(x.id) !== -1) === (sparklineMeasures.indexOf(y.id) !== -1)))
        && ((_utils_1.type.isDefined(data.getMeasureExpression(x.id)) || _utils_1.type.isDefined(data.getMeasureExpression(y.id))) ?
            (data.getMeasureExpression(x.id) === data.getMeasureExpression(y.id)) : (x.summaryType === y.summaryType))
        && _utils_1.deepStrictEquals(data.getMeasureCalculation(x.id), data.getMeasureCalculation(y.id))
        && _utils_1.deepStrictEquals(data.getMeasureWindowDefinition(x.id), data.getMeasureWindowDefinition(y.id))
        && _utils_1.deepStrictEquals(data.getMeasureFormat(x.id), data.getMeasureFormat(y.id));
}
exports.dataInspectorItemDataMeasureComparer = dataInspectorItemDataMeasureComparer;


/***/ }),
/* 728 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var custom_store_1 = __webpack_require__(120);
var notificator_1 = __webpack_require__(114);
var _inspected_data_colum_generator_1 = __webpack_require__(601);
function generateUnderlyingDataSource(underlyingDataProvider, dashbordItem) {
    var DataFieldPrefix = 'DataField';
    var itemData = dashbordItem._getItemData();
    if (underlyingDataProvider && itemData && !itemData.isEmpty()) {
        var columnsState_1 = {};
        return {
            columns: null,
            customizeColumns: function (columns) {
                columns.forEach(function (column) {
                    var columnState = columnsState_1[column.dataField];
                    if (columnState) {
                        column.name = columnState.dataMember;
                        column.caption = columnState.displayName;
                    }
                });
            },
            data: new custom_store_1.default({
                loadMode: 'raw',
                load: function () {
                    return underlyingDataProvider.requestUnderlyingData(dashbordItem, {
                        dataMembers: _inspected_data_colum_generator_1.getSortedColumns(itemData)
                    }).then(function (_a) {
                        var DataMembers = _a.DataMembers, DataMembersDisplayNames = _a.DataMembersDisplayNames, Data = _a.Data, ErrorMessage = _a.ErrorMessage;
                        if (ErrorMessage) {
                            new Error(ErrorMessage);
                        }
                        DataMembers.forEach(function (member, index) {
                            columnsState_1[DataFieldPrefix + index.toString()] = {
                                dataMember: member,
                                displayName: DataMembersDisplayNames[index] || member,
                            };
                        });
                        return Data.map(function (row) {
                            return DataMembers.reduce(function (acc, _, index) {
                                acc[DataFieldPrefix + index.toString()] = row[index];
                                return acc;
                            }, {});
                        });
                    }, function (result) {
                        throw new Error(notificator_1.NotificationController._getDetailedErrorMessage(result));
                    });
                }
            })
        };
    }
    else {
        return {
            columns: [],
            customizeColumns: function () { },
            data: [],
        };
    }
}
exports.generateUnderlyingDataSource = generateUnderlyingDataSource;


/***/ }),
/* 729 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var popup_1 = __webpack_require__(247);
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var _utils_1 = __webpack_require__(3);
var dashboard_1 = __webpack_require__(89);
var _knockout_utils_1 = __webpack_require__(17);
var _obsolete_helper_1 = __webpack_require__(46);
var custom_item_1 = __webpack_require__(103);
var serializable_model_1 = __webpack_require__(5);
var legacy_settings_1 = __webpack_require__(80);
var _dx_devextreme_themes_integration_1 = __webpack_require__(176);
var control_options_1 = __webpack_require__(19);
var _dashboard_update_hub_1 = __webpack_require__(597);
var _interfaces_1 = __webpack_require__(76);
var _options_manager_1 = __webpack_require__(78);
var notificator_1 = __webpack_require__(114);
var remote_service_1 = __webpack_require__(607);
var resource_manager_1 = __webpack_require__(608);
var index_internal_1 = __webpack_require__(215);
var _dashboard_surface_1 = __webpack_require__(606);
var _data_source_browser_1 = __webpack_require__(40);
var _service_client_1 = __webpack_require__(362);
var DashboardControl = (function () {
    function DashboardControl(element, options) {
        if (options === void 0) { options = {}; }
        var _this = this;
        this.element = element;
        this._extensions = ko.observableArray();
        this._repaintRequest = $.Callbacks();
        this._optionsManager = new _options_manager_1.OptionsManager();
        this._dashboardSurface = ko.observable();
        this._serviceClient = ko.observable();
        this._displayAllData = ko.observable();
        this._isLoading = ko.observable(false);
        this._perDashboardDisposables = [];
        this._layoutTemplate = ko.observable(null);
        this._layoutBindersCollection = ko.observableArray([]);
        this._emptyControlTemplates = ko.observableArray();
        this._surfaceLeft = ko.observable(0);
        this.surfaceLeft = ko.observable(0);
        this.isDesignMode = ko.observable();
        this.dashboardContainer = ko.observable();
        this.dashboard = ko.computed(function () { return _this.dashboardContainer() && _this.dashboardContainer().dashboard || null; });
        this.customTemplates = ko.observableArray();
        this.getWidgetContainer = function () {
            if (!_this._widgetContainer) {
                var wc = _this.element.querySelector('.dx-dashboard-widget-container');
                if (wc) {
                    _this._widgetContainer = wc;
                }
            }
            return _this._widgetContainer;
        };
        this._optionsManager.initialize({
            limitVisibleDataMode: 'Designer',
            resizeByTimer: true,
            ajaxRemoteService: {},
            encodeHtml: true,
            useNeutralFilterMode: false,
            allowMaximizeItems: true,
            useCardLegacyLayout: false,
            showConfirmationOnBrowserClosing: true,
            workingMode: 'Designer',
            loadDefaultDashboard: true,
            dataRequestOptions: {}
        }, options, this);
        this._endpointCollection = this._unrollEndpointCollection(this._optionsManager.options);
        this.resizeByTimer = ko.observable(this._optionsManager.options.resizeByTimer);
        this.remoteService = new remote_service_1.AjaxRemoteService(this._optionsManager.options.ajaxRemoteService);
        legacy_settings_1.LegacySettings._useCardLegacyLayout = this._optionsManager.options.useCardLegacyLayout;
        this.showConfirmationOnBrowserClosing = this._optionsManager.options.showConfirmationOnBrowserClosing;
        this.surfaceLeft.subscribe(function (value) {
            _this._surfaceLeft(value);
            _this.repaint();
        });
        this.isDesignMode(this._optionsManager.options.workingMode === 'Designer');
        this._dashboardContext = {
            beforeApplyViewerItemOptions: $.Callbacks(),
            viewerItemCreated: $.Callbacks(),
            viewerItemDispose: $.Callbacks(),
            addContextToolbarItems: $.Callbacks(),
            viewerItemCreator: {},
            refresh: function (itemName) { return _this.refresh(itemName); },
            useNeutralFilterMode: function () { return _this._optionsManager.options.useNeutralFilterMode; },
            isDesignMode: this.isDesignMode,
            viewerItemsManager: null
        };
        this._dashboardContext.beforeApplyViewerItemOptions.add(function (item, itemOptions, isCreation) {
            itemOptions.useNeutralFilterMode = _this._optionsManager.options.useNeutralFilterMode;
            itemOptions.encodeHtml = _this.encodeHtml;
        });
        this._externalTemplates = ko.computed(function () {
            var result = [];
            _this.customTemplates().forEach(function (template) {
                result.push(template);
            });
            _this._extensions().forEach(function (extension) {
                if (extension['template']) {
                    if (typeof extension['template'] === 'string') {
                        result.push({
                            name: extension['template'],
                            data: extension
                        });
                    }
                    else {
                        result.push(extension['template']);
                    }
                }
            });
            return result;
        });
        this.notificationController = new notificator_1.NotificationController();
        this.isDesignMode.subscribe(function (isDesignMode) {
            _this._validateWorkingMode();
        }, null, 'beforeChange');
        this.isDesignMode.subscribe(function (isDesignMode) {
            _this._validateWorkingMode();
            _this._initializeServiceClient(_this.dashboardContainer());
            if (_this._dashboardSurface() && _this._dashboardSurface().rootItem) {
                _this._dashboardSurface().rootItem.isDesignMode(_this.isDesignMode());
                _this._dashboardSurface().select(null);
            }
        });
        this._allowSwitchToDesigner = this._optionsManager.options.workingMode !== 'ViewerOnly';
        var extensionsToRegister = {};
        for (var name_1 in control_options_1.defaultExtensions) {
            extensionsToRegister[name_1] = control_options_1.defaultExtensions[name_1];
        }
        if (this.allowSwitchToDesigner) {
            for (var name_2 in control_options_1.designerExtensions) {
                extensionsToRegister[name_2] = control_options_1.designerExtensions[name_2];
            }
        }
        dx_analytics_core_1.default.Analytics.Internal.ShowMessage = function (msg, type, displayTime, debugInfo) { };
        this._layoutBindersCollection.push({
            name: 'dx-dashboard-resizable-layout',
            condition: function () { return true; },
            getData: function () { return _this._dashboardSurface; }
        });
        ko.computed(function () {
            var binders = _this._layoutBindersCollection();
            var binder = binders.filter(function (b) { return b.condition(); })[0];
            if (binder && (!_this._layoutTemplate.peek() || binder.name !== _this._layoutTemplate.peek().name)) {
                _this._layoutTemplate({
                    name: binder.name,
                    data: binder.getData()
                });
            }
        });
        this._optionsManager.events.raise('initializing', { component: this });
        this._registerDefaultExtensions(extensionsToRegister, this._optionsManager.options.extensions);
        this._registerKeyProcessing();
        this._isLoading.subscribe(function (isLoading) { return _this.notificationController.suspended(isLoading); });
        this._isLoading(true);
        setTimeout(function () {
            if (!_this.dashboard()) {
                _this._loadDefaultDashboard(_this._optionsManager.options.initialDashboardId, _this._optionsManager.options.initialDashboardState, _this._optionsManager.options.loadDefaultDashboard)
                    .always(function () { _this._isLoading(false); });
            }
            else {
                _this._isLoading(false);
            }
        }, 1);
        _defineDashboardControlObsoleteMethods(this);
    }
    DashboardControl.recursiveAsyncEval = function (sequence, endCallback, previousOptions, currentIndex) {
        if (currentIndex === void 0) { currentIndex = 0; }
        if (!previousOptions) {
            previousOptions = {
                surfaceLeft: 0
            };
        }
        if (sequence[currentIndex]) {
            sequence[currentIndex].action(previousOptions).done(function (options) { return DashboardControl.recursiveAsyncEval(sequence, endCallback, options, currentIndex + 1); });
        }
        else {
            endCallback(previousOptions);
        }
    };
    Object.defineProperty(DashboardControl.prototype, "_updateHub", {
        get: function () {
            return this._updateHubPrivate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardControl.prototype, "encodeHtml", {
        get: function () {
            return this._optionsManager.options.encodeHtml;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardControl.prototype, "allowSwitchToDesigner", {
        get: function () {
            return this._allowSwitchToDesigner;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardControl.prototype, "maximizedDashboardItemName", {
        get: function () {
            var fullscreenItemProvider = this._getFullscreenItemProvider();
            return fullscreenItemProvider && fullscreenItemProvider.maximizedItemName || '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardControl.prototype, "extensions", {
        get: function () {
            return this._extensions();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardControl.prototype, "_colorSchemeCss", {
        get: function () {
            return _dx_devextreme_themes_integration_1.getBaseColorScheme() === 'light' ? 'dx-color-scheme-light' : 'dx-color-scheme-dark';
        },
        enumerable: true,
        configurable: true
    });
    DashboardControl.prototype.repaint = function () {
        this._repaintRequest.fire();
    };
    DashboardControl.prototype.render = function () {
        var openComment = document.createComment(" ko template: { name: 'dx-dashboard-control' } "), closingComment = document.createComment(' /ko ');
        this.element.appendChild(openComment);
        this.element.appendChild(closingComment);
        this._applyBindings(this.element);
    };
    DashboardControl.prototype.maximizeDashboardItem = function (itemName) {
        if (this.dashboard()) {
            var dashboardItem = this.dashboard().findItem(itemName);
            if (dashboardItem) {
                var fullscreenItemProvider = this._getFullscreenItemProvider();
                if (fullscreenItemProvider) {
                    fullscreenItemProvider.maximizeItem(dashboardItem);
                }
            }
            else {
                throw Error("The item with the '" + itemName + "' name does not exist");
            }
        }
    };
    DashboardControl.prototype.restoreDashboardItem = function () {
        var fullscreenItemProvider = this._getFullscreenItemProvider();
        fullscreenItemProvider && fullscreenItemProvider.restoreDownItem();
    };
    DashboardControl.prototype.initializeDashboard = function (id, dashboardJson, initialState) {
        var _this = this;
        this._unloadDashboardServices();
        var dashboard = new dashboard_1.Dashboard(dashboardJson);
        if (initialState) {
            dashboard._state(initialState);
        }
        var e = {
            component: this,
            dashboard: dashboard,
            dashboardId: id,
            ready: $.Deferred().resolve().promise()
        };
        this._optionsManager.events.raise('dashboardInitializing', e);
        e.ready.done(function () {
            dashboard.items().forEach(function (item) { return item._useNeutralFilterMode(_this._optionsManager.options.useNeutralFilterMode); });
            _this._perDashboardDisposables.push(_knockout_utils_1.subscribeArrayChange(dashboard.items, {
                added: function (newItem) { return newItem._useNeutralFilterMode(_this._optionsManager.options.useNeutralFilterMode); }
            }));
            var dashboardContainer = { id: id, dashboard: dashboard };
            _this._initializeServiceClient(dashboardContainer);
            _this._dataSourceBrowser = new _data_source_browser_1.DataSourceBrowser(dashboard.dataSources, _this.isDesignMode, dashboard.parameters, _this._serviceClient, _this._isLoading);
            _this._dashboardContext.viewerItemsManager = new index_internal_1.ViewerItemAdaptersManager();
            _this._perDashboardDisposables.push(_this._dashboardContext.viewerItemsManager);
            _this._dashboardSurface(new _dashboard_surface_1.DashboardSurface(dashboard, _this._dataSourceBrowser, _this._dashboardContext, function (name) { return _this.findExtension(name); }, _this._optionsManager.options.allowMaximizeItems, _this.resizeByTimer, _this._repaintRequest, _this.encodeHtml));
            _this._dashboardSurface().rootItem.isDesignMode(_this.isDesignMode());
            _this._updateHubPrivate = new _dashboard_update_hub_1.DashboardUpdateHub(dashboard, _this._optionsManager.options.dataRequestOptions, {
                getItemData: function (item) { return _this._serviceClient().getItemData(item, isModeAllowsToReduceData()); },
                getBatchItemData: function (items) { return _this._serviceClient().getBatchItemData(items, isModeAllowsToReduceData()); },
                getMapShapeFile: function (item) { return _this._serviceClient().getMapShapeFile(item.componentName()); }
            }, _this._layoutTemplate().data() && _this._layoutTemplate().data().visibleItemsProvider);
            _this._updateHubPrivate.dashboardBeginUpdate = function () { return _this._optionsManager.events.raise('dashboardBeginUpdate', {
                component: _this,
                dashboardId: _this.dashboardContainer().id
            }); };
            _this._updateHubPrivate.dashboardEndUpdate = function () { return _this._optionsManager.events.raise('dashboardEndUpdate', {
                component: _this,
                dashboardId: _this.dashboardContainer().id
            }); };
            _this._updateHubPrivate.itemBeginUpdate = function (itemName) { return _this._optionsManager.events.raise('itemBeginUpdate', {
                component: _this,
                dashboardId: _this.dashboardContainer().id,
                itemName: itemName
            }); };
            _this._updateHubPrivate.itemEndUpdate = function (itemName) { return _this._optionsManager.events.raise('itemEndUpdate', {
                component: _this,
                dashboardId: _this.dashboardContainer().id,
                itemName: itemName
            }); };
            _this.dashboardContainer(dashboardContainer);
            _this.notificationController.reset();
            _this._optionsManager.events.raise('dashboardInitialized', {
                component: _this,
                dashboardId: id,
                dashboard: dashboard
            });
            _this._optionsManager.events.raise('dashboardStateChanged', {
                component: _this,
                dashboard: dashboard,
                dashboardId: id,
                stateString: dashboard.stateString
            });
            var isModeAllowsToReduceData = function () {
                var limitMode = _this._optionsManager.options.limitVisibleDataMode;
                return limitMode === 'DesignerAndViewer' || (_this.isDesignMode() && limitMode === 'Designer');
            };
            _this._updateHubPrivate.initialize();
            _this._perDashboardDisposables.push(_this.dashboard()._state.subscribe(function (_) {
                _this._optionsManager.events.raise('dashboardStateChanged', {
                    component: _this,
                    dashboard: _this.dashboard(),
                    dashboardId: _this.dashboardContainer().id,
                    stateString: dashboard.stateString
                });
            }));
        }).fail(function () {
            _this.notificationController.reset();
        });
    };
    DashboardControl.prototype.requestDashboardList = function () {
        var _this = this;
        var urls = this._endpointCollection.dashboardUrls;
        if (urls) {
            return this.remoteService.getFromServer(urls.GetDashboardsAction, null, { cache: false })
                .fail(function () {
                _this.notificationController.showError(_default_1.getLocalizationById('DashboardWebStringId.Notification.AttemptToLoadDashboards'));
            });
        }
        return $.Deferred().reject().promise();
    };
    DashboardControl.prototype.loadDashboard = function (dashboardId) {
        var _this = this;
        var urls = this._endpointCollection.dashboardUrls;
        if (urls) {
            this.notificationController.showState(_default_1.getLocalizationById('DashboardWebStringId.Notification.DashboardLoading'));
            return this.remoteService.getFromServer(urls.DashboardAction + '/' + encodeURIComponent(dashboardId), null, { cache: false })
                .done(function (result) {
                _this.initializeDashboard(dashboardId, result.Dashboard, result.initialState);
            }).fail(function (val) {
                _this.notificationController.showError(_default_1.getLocalizationById('DashboardWebStringId.Notification.AttemptToLoadDashboard') + (name || dashboardId), val);
            });
        }
        return $.Deferred().reject().promise();
    };
    DashboardControl.prototype.unloadDashboard = function () {
        this._unloadDashboardServices();
        this.dashboardContainer(null);
    };
    DashboardControl.prototype.switchToViewer = function () {
        var _this = this;
        var actions = this.extensions
            .filter(function (extension) { return !!extension.designerToViewerAction; })
            .map(function (extension) { return extension.designerToViewerAction; })
            .sort(function (a, b) { return a.orderNo - b.orderNo; });
        DashboardControl.recursiveAsyncEval(actions, function (options) {
            _this.surfaceLeft(options.surfaceLeft);
            _this.isDesignMode(false);
        });
    };
    DashboardControl.prototype.switchToDesigner = function () {
        var _this = this;
        this._validateWorkingMode();
        var actions = this.extensions
            .filter(function (extension) { return !!extension.viewerToDesignerAction; })
            .map(function (extension) { return extension.viewerToDesignerAction; })
            .sort(function (a, b) { return a.orderNo - b.orderNo; });
        DashboardControl.recursiveAsyncEval(actions, function (options) {
            _this.surfaceLeft(options.surfaceLeft);
            _this.isDesignMode(true);
        });
    };
    DashboardControl.prototype.reloadData = function () {
        var _this = this;
        if (this.dashboard()) {
            this._serviceClient().markDataSourcesForReload().done(function (result) {
                _this.refresh();
            });
        }
    };
    DashboardControl.prototype.refresh = function (args) {
        if (this.dashboard()) {
            var itemNames = [];
            if (!args) {
                itemNames = this.dashboard()._dataDashboardItems().map(function (item) { return item.componentName(); });
            }
            else if (typeof args === 'string') {
                itemNames = [args];
            }
            else if (Array.isArray(itemNames)) {
                itemNames = args;
            }
            else {
                throw Error('Invalid arguments');
            }
            this._updateHubPrivate.refreshItems(itemNames);
        }
    };
    DashboardControl.prototype.getDashboardState = function () {
        var dashboard = this.dashboard();
        if (dashboard)
            return dashboard.stateString;
        return null;
    };
    DashboardControl.prototype.setDashboardState = function (dashboardState) {
        var dashboard = this.dashboard();
        if (dashboard) {
            if (typeof dashboardState === 'string') {
                dashboard.stateString = dashboardState;
            }
            else {
                dashboard._state(dashboardState);
            }
        }
    };
    DashboardControl.prototype.getDashboardId = function () {
        var dashboardContainer = this.dashboardContainer();
        if (dashboardContainer)
            return dashboardContainer.id;
        return null;
    };
    DashboardControl.prototype.registerIcon = function (icon) {
        resource_manager_1.ResourceManager.registerIcon(icon);
    };
    DashboardControl.prototype.registerExtension = function () {
        var _this = this;
        var extensions = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            extensions[_i] = arguments[_i];
        }
        extensions.forEach(function (extension) {
            if (_this._canAddExtension(extension)) {
                _this._addExtension(extension);
                _this._startExtension(extension);
            }
        });
    };
    DashboardControl.prototype.findExtension = function (extensionName) {
        return this._extensions().filter(function (ext) { return ext.name === extensionName; })[0];
    };
    DashboardControl.prototype.unregisterExtension = function () {
        var _this = this;
        var extensionNames = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            extensionNames[_i] = arguments[_i];
        }
        extensionNames.forEach(function (extensionName) {
            var extension = _this.findExtension(extensionName);
            if (!!extension) {
                var customItemExtension = extension;
                if (customItemExtension.createViewerItem) {
                    _this._dashboardContext.viewerItemCreator[extension.name] = undefined;
                }
                if (customItemExtension.metaData) {
                    delete serializable_model_1.itemTypesMap[extension.name];
                }
                extension.stop && extension.stop();
                _this._extensions.remove(extension);
            }
        });
    };
    DashboardControl.prototype.subscribeExtensionsChanged = function (handlers) {
        return _knockout_utils_1.subscribeArrayChange(this._extensions, handlers);
    };
    DashboardControl.prototype.dispose = function () {
        this.unloadDashboard();
        $(document).off('.dx-dshd');
        ko.cleanNode(this.element);
    };
    DashboardControl.prototype._renderDashboardItem = function (element, dashboardItemName, isStandalone) {
        var _this = this;
        if (isStandalone === void 0) { isStandalone = true; }
        var openComment = document.createComment(" ko template: { name: 'dx-dashboard-standalone-item' } "), closingComment = document.createComment(' /ko ');
        element.appendChild(openComment);
        element.appendChild(closingComment);
        var dashboardItem = ko.computed(function () { return _this.dashboard() && _this.dashboard().items().filter(function (i) { return i.componentName.peek() === dashboardItemName; })[0]; });
        this._applyBindings(element, {
            dashboardItem: dashboardItem,
            context: this._dashboardContext,
            sizeController: new _interfaces_1.SingleItemSizeController(element, this._repaintRequest),
            isStandalone: isStandalone
        });
    };
    DashboardControl.prototype._getFullscreenItemProvider = function () {
        var currentLayout = this._layoutTemplate();
        if (currentLayout && currentLayout.data && currentLayout.data().fullscreenItemProvider) {
            return currentLayout.data().fullscreenItemProvider;
        }
        return null;
    };
    DashboardControl.prototype._registerKeyProcessing = function () {
        var _this = this;
        _staticInitialize();
        var _ignoreKeyProcessing = function () {
            if (!_this.isDesignMode() || !_this._dashboardSurface()) {
                return true;
            }
            var activeElement = $(document.activeElement);
            if (activeElement.is('textarea') || activeElement.is(':input') && (['password', 'text', 'number'].indexOf(activeElement.attr('type')) != -1)) {
                return true;
            }
            return false;
        };
        $(document).on('keyup.dx-dshd', function (e) {
            if (_ignoreKeyProcessing()) {
                return;
            }
            if (e.keyCode === _interfaces_1.KeyCodes.Delete && _this._dashboardSurface()._selectedLayoutItem() && !_this._dashboardSurface().itemInteractionInProgress()) {
                _this._dashboardSurface()._selectedLayoutItem().delete();
                return false;
            }
            var i;
            for (i = 0; i < _this._extensions().length; i++) {
                var extension = _this._extensions()[i];
                if (extension.processKeyEvent && extension.processKeyEvent('keyup', e)) {
                    return false;
                }
            }
        });
        $(document).on('keydown.dx-dshd', function (e) {
            if (_ignoreKeyProcessing()) {
                return;
            }
            var i;
            for (i = 0; i < _this._extensions().length; i++) {
                var extension = _this._extensions()[i];
                if (extension.processKeyEvent && extension.processKeyEvent('keydown', e)) {
                    return false;
                }
            }
        });
    };
    DashboardControl.prototype._registerDefaultExtensions = function (extensions, extensionOptions) {
        var _this = this;
        if (extensionOptions === void 0) { extensionOptions = {}; }
        if (extensionOptions !== false) {
            for (var extensionName in extensions) {
                var options = extensionOptions[extensionName];
                if (options !== false) {
                    if (!!options && typeof options !== 'object') {
                        throw Error('Extension options ');
                    }
                    var extension = extensions[extensionName](this, options);
                    this._canAddExtension(extension) && this._addExtension(extension);
                }
            }
            if (typeof extensionOptions === 'object') {
                for (var extensionName in extensionOptions) {
                    var extensionCreator = extensionOptions[extensionName];
                    if (typeof extensionCreator === 'function') {
                        var extension = extensionCreator(this);
                        this._canAddExtension(extension) && this._addExtension(extension);
                    }
                }
            }
        }
        this.extensions.forEach(function (extension) { return _this._startExtension(extension); });
    };
    DashboardControl.prototype._unrollEndpointCollection = function (options) {
        if (options['endpointCollection']) {
            return options['endpointCollection'];
        }
        else if (options.endpoint) {
            return {
                dashboardUrls: {
                    DashboardAction: options.endpoint + '/dashboards',
                    GetDashboardsAction: options.endpoint + '/dashboards'
                },
                dataSourceUrls: {
                    GetDataSourcesAction: options.endpoint + '/dataSources'
                },
                dataSourceWizardUrls: {
                    DataSourceWizardAction: options.endpoint + '/data/DataSourceWizardAction',
                    GetConnectionStringsAction: options.endpoint + '/data/GetConnectionStringsAction'
                },
                dataServiceUrls: {
                    ConvertItemAction: options.endpoint + '/data/ConvertItemAction',
                    DashboardItemGetAction: options.endpoint + '/data/DashboardItemGetAction',
                    DimensionFilterItemsAction: options.endpoint + '/data/DimensionFilterItemsAction',
                    DimensionFilterStringAction: options.endpoint + '/data/DimensionFilterStringAction',
                    DimensionUniqueValuesAction: options.endpoint + '/data/DimensionUniqueValuesAction',
                    FieldListAction: options.endpoint + '/data/FieldListAction',
                    GetColoringSchemeAction: options.endpoint + '/data/GetColoringSchemeAction',
                    GetDashboardPaletteAction: options.endpoint + '/data/GetDashboardPaletteAction',
                    GetMapShapeFileAction: options.endpoint + '/data/GetMapShapeFileAction',
                    GetUnderlyingDataAction: options.endpoint + '/data/GetUnderlyingDataAction',
                    MarkDataSourcesForReloadAction: options.endpoint + '/data/MarkDataSourcesForReloadAction',
                    ParameterValuesAction: options.endpoint + '/data/ParameterValuesAction',
                    PerformExportAction: options.endpoint + '/data/PerformExportAction',
                    DashboardItemBatchGetAction: options.endpoint + '/data/DashboardItemBatchGetAction'
                }
            };
        }
        else {
            return {};
        }
    };
    DashboardControl.prototype._loadDefaultDashboard = function (initialDashboardId, initialDashboardState, loadDefaultDashboard) {
        var _this = this;
        if (!!initialDashboardId) {
            return this.loadDashboard(initialDashboardId)
                .done(function () {
                if (!!initialDashboardState) {
                    _this.dashboard().stateString = initialDashboardState;
                }
            });
        }
        else if (!!loadDefaultDashboard) {
            var res = $.Deferred();
            this.requestDashboardList()
                .done(function (items) {
                if (items[0]) {
                    _this.loadDashboard(items[0].id).done(function () {
                        if (!!initialDashboardState) {
                            _this.dashboard().stateString = initialDashboardState;
                        }
                    })
                        .done(function () { return res.resolve(); })
                        .fail(function () { return res.reject(); });
                }
                else {
                    res.reject();
                }
            })
                .fail(function () {
                res.reject();
            });
            return res.promise();
        }
        else {
            return $.Deferred().resolve().promise();
        }
    };
    DashboardControl.prototype._initializeServiceClient = function (dashboardContainer) {
        var serviceClient = this.isDesignMode() ?
            !this._validateWorkingMode() && new _service_client_1.DesignerDataServiceClient(dashboardContainer, this.notificationController, this._endpointCollection.dataServiceUrls, this.remoteService) || null :
            new _service_client_1.ViewerDataServiceClient(dashboardContainer, this.notificationController, this._endpointCollection.dataServiceUrls, this.remoteService);
        this._serviceClient(serviceClient);
    };
    DashboardControl.prototype._validateWorkingMode = function () {
        if (!this.allowSwitchToDesigner) {
            throw Error('Cannot switch to Designer from the ViewerOnly mode.');
        }
        return false;
    };
    DashboardControl.prototype._canAddExtension = function (extension) {
        if (!!this.findExtension(extension.name)) {
            console.error("The extension with the '" + extension.name + "' name is already registered.");
            return false;
        }
        return true;
    };
    DashboardControl.prototype._addExtension = function (extension) {
        this._extensions.push(extension);
        var customItemExtension = extension;
        if (customItemExtension.createViewerItem) {
            this._dashboardContext.viewerItemCreator[extension.name] = customItemExtension.createViewerItem;
        }
        if (customItemExtension.metaData) {
            serializable_model_1.itemTypesMap[extension.name] = _utils_1.deepExtend({
                type: custom_item_1.CustomItem,
                customItemType: extension.name,
            }, customItemExtension.metaData);
        }
    };
    DashboardControl.prototype._startExtension = function (extension) {
        extension.start && extension.start();
    };
    DashboardControl.prototype._unloadDashboardServices = function () {
        var dashboard = this.dashboard();
        if (dashboard) {
            dashboard.dispose();
            if (this._updateHubPrivate) {
                this._updateHubPrivate.dispose();
                this._updateHubPrivate = null;
            }
            if (this._dataSourceBrowser) {
                this._dataSourceBrowser.dispose();
                this._dataSourceBrowser = null;
            }
            if (this._dashboardSurface()) {
                this._dashboardSurface().dispose();
                this._dashboardSurface(undefined);
            }
        }
        this._perDashboardDisposables.forEach(function (d) { return d.dispose(); });
        this._perDashboardDisposables.splice(0, this._perDashboardDisposables.length);
    };
    DashboardControl.prototype._applyBindings = function (element, additionalProperties) {
        var _this = this;
        var viewModel = __assign({ getWidgetContainer: this.getWidgetContainer, surfaceLeft: this._surfaceLeft, colorSchemeCss: this._colorSchemeCss, isDashboardLoaded: ko.computed(function () { return !!_this.dashboard(); }), layoutTemplate: this._layoutTemplate, externalTemplates: this._externalTemplates, emptyControlTemplates: this._emptyControlTemplates, notificationController: this.notificationController, isLoading: this._isLoading, getLocalizationById: _default_1.getLocalizationById, extend: _utils_1.extend, $unwrap: _utils_1.$unwrap, $: $, ko: ko }, additionalProperties);
        dx_analytics_core_1.default.Analytics.Internal.appendStaticContextToRootViewModel(viewModel);
        ko.applyBindings(viewModel, element);
    };
    return DashboardControl;
}());
exports.DashboardControl = DashboardControl;
ko.bindingHandlers['element-height-change-provider'] = {
    init: function (el, valueAccessor, allbindings, viewmodel, bindingcontext) {
        var data = ko.unwrap(valueAccessor());
        var recalculate = function () {
            setTimeout(function () {
                data.height($(el).height());
            }, 0);
        };
        data.model.subscribe(function () {
            recalculate();
        });
        recalculate();
    }
};
ko.bindingHandlers['xlinkHref'] = {
    update: function (element, valueAccessor, allBindingsAccessor, viewModel) {
        element.setAttributeNS('http://www.w3.org/1999/xlink', 'href', '#' + valueAccessor());
    }
};
ko.bindingHandlers['dxAttach2Model'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var attachmentName = ko.unwrap(valueAccessor());
        if (['getLookupDefaultValuesSelectBoxOptions', 'getLookupDefaultValueSelectBoxOptions', 'dataSourceBrowser'].indexOf(attachmentName) === -1) {
            throw 'non supported';
        }
        var findAttachment = function (name) {
            var context = bindingContext.$parents.filter(function (item) { return item[name] !== undefined; })[0];
            if (context) {
                return context[name];
            }
            return null;
        }, attachment = findAttachment(attachmentName);
        if (attachment) {
            viewModel[attachmentName] = attachment;
        }
    }
};
function _staticInitialize() {
    popup_1.default.defaultOptions({
        options: {
            onInitialized: function (e) {
                var popup = e.component;
                popup.registerKeyHandler('escape', function (e) {
                    e.originalEvent.stopPropagation();
                    popup.hide();
                });
            }
        }
    });
}
function _defineDashboardControlObsoleteMethods(control) {
    _obsolete_helper_1.defineObsoleteProperty({
        target: control,
        memberName: 'toolbox',
        oldMemberDisplayName: 'DashboardControl.toolbox',
        newMemberDisplayName: 'ToolboxExtension.toolboxGroups',
        action: function () {
            var toolboxExtension = control.findExtension('toolbox');
            if (toolboxExtension) {
                return toolboxExtension.toolboxGroups;
            }
            else {
                console.error('The ToolboxExtension could not be found.');
            }
        }
    });
    _obsolete_helper_1.defineObsoleteProperty({
        target: control,
        memberName: 'toolbarItems',
        oldMemberDisplayName: 'DashboardControl.toolbarItems',
        newMemberDisplayName: 'ToolboxExtension.toolbarGroups',
        action: function () {
            var toolboxExtension = control.findExtension('toolbox');
            if (toolboxExtension) {
                return toolboxExtension.toolbarGroups;
            }
            else {
                console.error('The ToolboxExtension could not be found.');
            }
        }
    });
    _obsolete_helper_1.defineObsoleteProperty({
        target: control,
        memberName: 'menuItems',
        oldMemberDisplayName: 'DashboardControl.menuItems',
        newMemberDisplayName: 'ToolboxExtension.menuItems',
        action: function () {
            var toolboxExtension = control.findExtension('toolbox');
            if (toolboxExtension) {
                return toolboxExtension.menuItems;
            }
            else {
                console.error('The ToolboxExtension could not be found.');
            }
        }
    });
    _obsolete_helper_1.defineObsoleteProperty({
        target: control,
        memberName: 'menuVisible',
        oldMemberDisplayName: 'DashboardControl.menuVisible',
        newMemberDisplayName: 'ToolboxExtension.menuVisible',
        action: function () {
            var toolboxExtension = control.findExtension('toolbox');
            if (toolboxExtension) {
                return toolboxExtension.menuVisible;
            }
            else {
                console.error('The toolboxExtension could not be found.');
            }
        }
    });
    _obsolete_helper_1.defineObsoleteProperty({
        target: control,
        memberName: 'selectMenuItem',
        oldMemberDisplayName: 'DashboardControl.selectMenuItem',
        newMemberDisplayName: 'ToolboxExtension.selectMenuItem',
        action: function () {
            var toolboxExtension = control.findExtension('toolbox');
            if (toolboxExtension) {
                return toolboxExtension.selectMenuItem;
            }
            else {
                console.error('The toolboxExtension could not be found.');
            }
        }
    });
    _obsolete_helper_1.defineObsoleteProperty({
        target: control,
        memberName: 'undoEngine',
        oldMemberDisplayName: 'DashboardControl.undoEngine',
        newMemberDisplayName: 'UndoRedoExtension.undoEngine',
        action: function () {
            var undoEngineExtension = control.findExtension('undo-redo');
            if (undoEngineExtension) {
                return undoEngineExtension.undoEngine;
            }
            else {
                console.error('The UndoRedoExtension could not be found.');
            }
        }
    });
    _obsolete_helper_1.defineObsoleteProperty({
        target: control,
        memberName: 'colorSchemeCss',
        warmMessage: 'The DashboardControl.colorSchemeCss is obsolete. Use the DevExpress.ui.themes.current method instead.',
        action: function () { return control._colorSchemeCss; }
    });
    _obsolete_helper_1.defineObsoleteMethod({
        target: control,
        memberName: 'saveDashboard',
        oldMemberDisplayName: 'DashboardControl.saveDashboard',
        newMemberDisplayName: 'SaveDashboardExtension.saveDashboard',
        action: function () {
            var saveDashboardExtension = control.findExtension('save-dashboard');
            if (saveDashboardExtension) {
                return saveDashboardExtension.saveDashboard();
            }
            else {
                console.error('The SaveDashboardExtension could not be found.');
            }
        }
    });
    _obsolete_helper_1.defineObsoleteMethod({
        target: control,
        memberName: 'ensureDashboardSaved',
        oldMemberDisplayName: 'DashboardControl.ensureDashboardSaved',
        newMemberDisplayName: 'SaveDashboardExtension.ensureDashboardSaved',
        action: function (action) {
            var saveDashboardExtension = control.findExtension('save-dashboard');
            if (saveDashboardExtension) {
                return saveDashboardExtension.ensureDashboardSaved(action);
            }
            else {
                console.error('The SaveDashboardExtension could not be found.');
            }
        }
    });
    _obsolete_helper_1.defineObsoleteMethod({
        target: control,
        memberName: 'clearDesigner',
        oldMemberDisplayName: 'DashboardControl.clearDesigner',
        newMemberDisplayName: 'DashboardControl.unloadDashboard',
        action: function () { return control.unloadDashboard(); }
    });
    _obsolete_helper_1.defineObsoleteMethod({
        target: control,
        memberName: 'close',
        oldMemberDisplayName: 'DashboardControl.close',
        newMemberDisplayName: 'DashboardControl.unloadDashboard',
        action: function () { return control.unloadDashboard(); }
    });
}


/***/ }),
/* 730 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.resources = { "SvgResources": "<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><symbol id=\"dx-dashboard-add-pane\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-icon\" d=\"M17 6H5c-.6 0-1 .4-1 1v9c0 .6.4 1 1 1h12c.6 0 1-.4 1-1V7c0-.6-.4-1-1-1zm0 10H5V7h12v9zm-4-7h2v6h-2V9zm-3 2h2v4h-2v-4zm-3 2h2v2H7v-2z\"/><path class=\"dx-dashboard-green-icon\" d=\"M24 3h-3V0h-2v3h-3v2h3v3h2V5h3z\"/></symbol><symbol id=\"dx-dashboard-calc-field-add\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-green-icon\" d=\"M20 15h-3v-3h-2v3h-3v2h3v3h2v-3h3z\"/><path class=\"dx-dashboard-icon\" d=\"M9.5 6.3c-.1.2-.3 1.3-.6 2.7H6v2h2.5c-.4 2.3-.8 4.5-.8 4.5-.1.7-.3 1-.6 1-.1 0-.1 0-.2-.1-.1 0-.1-.1-.2-.2-.2-.2-.3-.4-.3-.4-.1-.1-.2-.1-.3-.2-.1 0-.2-.1-.3-.1-.2 0-.4.1-.6.3-.1.3-.2.5-.2.8 0 .4.2.7.5 1 .3.3.7.4 1.2.4s2.8.3 3.3-4c0 0 .3-1.5.5-3H13V9h-2.1c0-.4.1-.7.1-.9.4-2.5 2.3-2.2 3-2v-2s-3.3-.8-4.5 2.2z\"/></symbol><symbol id=\"dx-dashboard-calc-field-aggregate\" viewBox=\"0 0 16 16\"><path class=\"dx-dashboard-icon\" d=\"M6.5 2.3c-.1.2-.3 1.3-.6 2.7H3v2h2.5c-.4 2.3-.8 4.5-.8 4.5-.1.7-.3 1-.6 1-.1 0-.1 0-.2-.1-.1 0-.1-.1-.2-.2-.2-.2-.3-.4-.3-.4-.1-.1-.2-.1-.3-.2-.1 0-.2-.1-.3-.1-.2 0-.4.1-.6.3-.1.3-.2.5-.2.8 0 .4.2.7.5 1 .3.3.7.4 1.2.4s2.8.3 3.3-4c0 0 .3-1.5.5-3H10V5H7.9c0-.4.1-.7.1-.9.4-2.5 2.3-2.2 3-2v-2S7.7-.7 6.5 2.3zM16 9H9.2c-.4 0-.7.5-.3.9l2.6 2.6-2.7 2.6c-.3.4-.1.9.4.9H16v-2h-3.3l1.1-1.1c.2-.2.2-.5 0-.7l-1-1.2H16V9z\"/></symbol><symbol id=\"dx-dashboard-calc-field-corrupted\" viewBox=\"0 0 16 16\"><path class=\"dx-dashboard-yellow-icon\" d=\"M7.45 1.41c.3-.54.75-.54 1.05 0l6.37 11.62c.3.54.05.97-.5.97H1.64c-.6 0-.8-.43-.5-.97L7.45 1.41z\"/><path class=\"dx-dashboard-black-icon\" d=\"M7.02 5h2v4h-2V5zM9 10H7v2h2v-2z\"/></symbol><symbol id=\"dx-dashboard-calc-field\" viewBox=\"0 0 16 16\"><path class=\"dx-dashboard-icon\" d=\"M6.5 3.3c-.1.2-.3 1.3-.6 2.7H3v2h2.5c-.4 2.3-.8 4.5-.8 4.5-.1.7-.3 1-.6 1-.1 0-.1 0-.2-.1-.1 0-.1-.1-.2-.2-.2-.2-.3-.4-.3-.4-.1-.1-.2-.1-.3-.2-.1 0-.2-.1-.3-.1-.2 0-.4.1-.6.3-.1.3-.2.5-.2.8 0 .4.2.7.5 1 .3.3.7.4 1.2.4s2.8.3 3.3-4c0 0 .3-1.5.5-3H10V6H7.9c0-.4.1-.7.1-.9.4-2.5 2.3-2.2 3-2v-2S7.7.3 6.5 3.3z\"/></symbol><symbol id=\"dx-dashboard-ce-add\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-icon\" d=\"M19 11h-6V5h-2v6H5v2h6v6h2v-6h6z\"/></symbol><symbol id=\"dx-dashboard-ce-arrow-down\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-icon\" d=\"M13 14V5h-2v9H7l5 5 5-5z\"/></symbol><symbol id=\"dx-dashboard-ce-arrow-up\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-icon\" d=\"M13 10v9h-2v-9H7l5-5 5 5z\"/></symbol><symbol id=\"dx-dashboard-ce-edit\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-icon\" d=\"M15 6l-9 9v3h3l9-9-3-3zm-7 8.9l5-4.9 1 1-5 5-1-1.1z\"/></symbol><symbol id=\"dx-dashboard-checkmark\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-icon\" fill=\"#7B7B7B\" d=\"M7 18l-5-5v3l5 5L22 6V3z\"/></symbol><symbol id=\"dx-dashboard-close\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-icon\" d=\"M19 7h-3l-4 4-4-4H5l5.5 5.5L5 18h3l4-4 4 4h3l-5.5-5.5z\"/></symbol><symbol id=\"dx-dashboard-designer-menu-icon\" viewBox=\"-467 269 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M-465 274h20v2h-20zM-465 280h20v2h-20zM-465 286h20v2h-20z\"/></symbol><symbol id=\"dx-dashboard-drag\" viewBox=\"-467 269 24 24\"><path class=\"dx_white\" d=\"M-445 281l-4-4v3h-5v-5h3l-4-4-4 4h3v5h-5v-3l-4 4 4 4v-3h5v5h-3l4 4 4-4h-3v-5h5v3z\"/></symbol><symbol id=\"dx-dashboard-ds-edit\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-icon\" d=\"M14 6l-8 8.1V18h4l8-8-4-4zm2 4l-1.2 1.2-2-2L14 8l2 2zm-8 4l3.4-3.4 2 2L10 16l-2-2z\"/></symbol><symbol id=\"dx-dashboard-ds-embed\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-icon\" d=\"M20 4h-4v2h3v12H5V6h3V4H4c-.6 0-1 .4-1 1v14c0 .6.4 1 1 1h16c.6 0 1-.4 1-1V5c0-.6-.4-1-1-1z\"/><path class=\"dx-dashboard-icon\" d=\"M20 4h-4v2h3v12H5V6h3V4H4c-.6 0-1 .4-1 1v14c0 .6.4 1 1 1h16c.6 0 1-.4 1-1V5c0-.6-.4-1-1-1z\"/><path class=\"dx-dashboard-icon\" d=\"M13 11V4h-2v7H7l5 5 5-5z\"/></symbol><symbol id=\"dx-dashboard-ds-link\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-icon\" d=\"M8.5 18.5c-.4.4-1 .4-1.4 0l-1.6-1.6c-.4-.4-.4-1 0-1.4L10 11H7l-3.1 3.1c-1.2 1.2-1.2 3.1 0 4.2l1.8 1.8c1.2 1.2 3.1 1.2 4.2 0L13 17v-3l-4.5 4.5z\"/><path class=\"dx-dashboard-icon\" d=\"M8.5 18.5c-.4.4-1 .4-1.4 0l-1.6-1.6c-.4-.4-.4-1 0-1.4L10 11H7l-3.1 3.1c-1.2 1.2-1.2 3.1 0 4.2l1.8 1.8c1.2 1.2 3.1 1.2 4.2 0L13 17v-3l-4.5 4.5z\"/><path class=\"dx-dashboard-icon\" d=\"M8.04 14.97l7-7 .99.99-7 7z\"/><g><path class=\"dx-dashboard-icon\" d=\"M15.5 5.5c.4-.4 1-.4 1.4 0l1.6 1.6c.4.4.4 1 0 1.4L14 13h3l3.1-3.1c1.2-1.2 1.2-3.1 0-4.2l-1.8-1.8c-1.2-1.2-3.1-1.2-4.2 0L11 7v3l4.5-4.5z\"/><path class=\"dx-dashboard-icon\" d=\"M15.5 5.5c.4-.4 1-.4 1.4 0l1.6 1.6c.4.4.4 1 0 1.4L14 13h3l3.1-3.1c1.2-1.2 1.2-3.1 0-4.2l-1.8-1.8c-1.2-1.2-3.1-1.2-4.2 0L11 7v3l4.5-4.5z\"/></g></symbol><symbol id=\"dx-dashboard-ds-options\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-accent-icon\" d=\"M20 14v-2h-2.1c-.2-.9-.5-1.8-1-2.5L18.4 8 17 6.6l-1.5 1.5c-.7-.5-1.6-.9-2.5-1V5h-2v2.1c-.9.2-1.8.5-2.5 1L7.1 6.6 5.6 8.1l1.5 1.5c-.5.7-.9 1.6-1 2.5H4v2h2.1c.2.9.5 1.8 1 2.5l-1.5 1.5L7 19.5 8.5 18c.7.5 1.6.9 2.5 1v2h2v-2.1c.9-.2 1.8-.5 2.5-1l1.5 1.5 1.4-1.4-1.5-1.5c.5-.7.9-1.6 1-2.5H20zm-8 3c-2.2 0-4-1.8-4-4s1.8-4 4-4 4 1.8 4 4-1.8 4-4 4z\"/></symbol><symbol id=\"dx-dashboard-ds-preview\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-icon\" d=\"M12 7c-2.8 0-5 2.2-5 5s2.2 5 5 5 5-2.2 5-5-2.2-5-5-5zm0 8c-1.7 0-3-1.3-3-3s1.3-3 3-3c.2 0 .4 0 .6.1-.9.2-1.5 1-1.5 1.9 0 1.1.9 2 2 2 .9 0 1.7-.7 1.9-1.5 0 .2.1.3.1.5-.1 1.7-1.4 3-3.1 3z\"/><path class=\"dx-dashboard-icon\" d=\"M12 6c4.5 0 8.2 2.2 8.9 5H23c-.7-3.9-5.3-7-11-7S1.7 7.1 1 11h2.1c.7-2.8 4.4-5 8.9-5zM12 18c-4.5 0-8.2-2.2-8.9-5H1c.7 3.9 5.3 7 11 7s10.3-3.1 11-7h-2.1c-.7 2.8-4.4 5-8.9 5z\"/><g><path class=\"dx-dashboard-icon\" d=\"M12 6c4.5 0 8.2 2.2 8.9 5H23c-.7-3.9-5.3-7-11-7S1.7 7.1 1 11h2.1c.7-2.8 4.4-5 8.9-5zM12 18c-4.5 0-8.2-2.2-8.9-5H1c.7 3.9 5.3 7 11 7s10.3-3.1 11-7h-2.1c-.7 2.8-4.4 5-8.9 5z\"/></g></symbol><symbol id=\"dx-dashboard-fc-arrow-right\" viewBox=\"0 0 12 12\"><path class=\"dx-dashboard-icon\" d=\"M5 10l4-4-4-4z\"/></symbol><symbol id=\"dx-dashboard-fc-dropdown-icon\" viewBox=\"0 0 16 16\"><path class=\"dx-dashboard-icon\" d=\"M4 6l4 4 4-4z\"/></symbol><symbol id=\"dx-dashboard-fc-mode-list\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M5 5h14v2H5zM5 9h14v2H5zM5 13h14v2H5zM5 17h14v2H5z\"/></symbol><symbol id=\"dx-dashboard-fc-mode-tree\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M11 9h8v2h-8V9zm0 8h8v2h-8v-2zM9 5h10v2H9V5zM5 5h2v2H5V5zm4 8h10v2H9v-2zm-4 0h2v2H5v-2z\"/></symbol><symbol id=\"dx-dashboard-fc-search\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-icon\" d=\"M14 5c-2.8 0-5 2.2-5 5 0 1.1.4 2.2 1 3l-5 5 1 1 5-5c.8.6 1.9 1 3 1 2.8 0 5-2.2 5-5s-2.2-5-5-5zm0 8c-1.7 0-3-1.3-3-3s1.3-3 3-3 3 1.3 3 3-1.3 3-3 3z\"/></symbol><symbol id=\"dx-dashboard-fc-treeview-collapse\" viewBox=\"0 0 13 13\"><path class=\"dx-dashboard-icon\" d=\"M10 6H7V3H6v3H3v1h3v3h1V7h3z\"/></symbol><symbol id=\"dx-dashboard-fc-treeview-expand\" viewBox=\"0 0 13 13\"><path class=\"dx-dashboard-icon\" d=\"M3 6h7v1H3z\"/></symbol><symbol id=\"dx-dashboard-main-menu-close\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-icon\" d=\"M22 4h-3l-7 7-7-7H2l8.5 8.5L2 21h3l7-7 7 7h3l-8.5-8.5z\"/></symbol><symbol id=\"dx-dashboard-olap-dimension-hierarchy\" viewBox=\"0 0 16 16\"><path class=\"dx-dashboard-icon\" d=\"M6 0h4v4H6zM0 12h4v4H0zM6 12h4v4H6zM12 12h4v4h-4zM3 6h4v4H3zM9 6h4v4H9z\"/></symbol><symbol id=\"dx-dashboard-olap-dimension\" viewBox=\"0 0 16 16\"><path class=\"dx-dashboard-icon\" d=\"M15 12l-4-3v2H5V5h2L4 1 1 5h2v8h8v2z\"/></symbol><symbol id=\"dx-dashboard-olap-measure\" viewBox=\"0 0 16 16\"><path class=\"dx-dashboard-icon\" d=\"M15 1H1l7 7-7 7h14v-2H6l5-5-5-5h9z\"/></symbol><symbol id=\"dx-dashboard-remove-small\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-red-icon\" d=\"M11 5c-.6 0-1 .4-1 1v1h1V6h3v1h1V6c0-.6-.4-1-1-1h-3zm7 4H7V8c0-.6.4-1 1-1h9c.6 0 1 .4 1 1v1zM8 10v7c0 .6.4 1 1 1h7c.6 0 1-.4 1-1v-7H8zm3 6h-1v-4h1v4zm2 0h-1v-4h1v4zm2 0h-1v-4h1v4z\"/></symbol><symbol id=\"dx-dashboard-remove\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-red-icon\" d=\"M4 8v13c0 .5.5 1 1 1h14c.5 0 1-.5 1-1V8H4zm5 11H7v-8h2v8zm4 0h-2v-8h2v8zm4 0h-2v-8h2v8zM20 5h-4V3c0-.6-.4-1-1-1H9c-.6 0-1 .4-1 1v2H4c-.5 0-1 .5-1 1v1h18V6c0-.5-.5-1-1-1zm-6 0h-4V4h4v1z\"/><g><path class=\"dx-dashboard-red-icon\" d=\"M4 8v13c0 .5.5 1 1 1h14c.5 0 1-.5 1-1V8H4zm5 11H7v-8h2v8zm4 0h-2v-8h2v8zm4 0h-2v-8h2v8zM20 5h-4V3c0-.6-.4-1-1-1H9c-.6 0-1 .4-1 1v2H4c-.5 0-1 .5-1 1v1h18V6c0-.5-.5-1-1-1zm-6 0h-4V4h4v1z\"/></g></symbol><symbol id=\"dx-dashboard-template-to-all-cards\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-icon\" d=\"M5 9v9h11V9H5zm9 7H7v-5h7v5z\"/><path class=\"dx-dashboard-icon\" d=\"M7 7v2h9v7h2V7z\" opacity=\".75\"/><path class=\"dx-dashboard-icon\" d=\"M9 5v2h9v7h2V5z\" opacity=\".5\"/></symbol><symbol id=\"dx-dashboard-textbox-search-clear\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-icon\" fill=\"#7B7B7B\" d=\"M12 5c-3.9 0-7 3.1-7 7s3.1 7 7 7 7-3.1 7-7-3.1-7-7-7zm4 10h-2l-2-2-2 2H8l3-3-3-3h2l2 2 2-2h2l-3 3 3 3z\"/></symbol><symbol id=\"dx-dashboard-transparent-background\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-icon\" d=\"M0 0h6v6H0zM12 0h6v6h-6zM6 6h6v6H6zM18 6h6v6h-6zM0 12h6v6H0zM12 12h6v6h-6zM6 18h6v6H6zM18 18h6v6h-6z\"/></symbol><symbol id=\"dx-dashboard-tree-connector\" viewBox=\"0 0 16 16\"><path class=\"dx-dashboard-icon\" d=\"M2 2h1v10H2zM2 12h12v1H2z\"/></symbol><symbol id=\"dx-dashboard-arrow-left\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-icon\" d=\"M19 11H8.9L14 6h-3l-6 6 6 6h3l-5.1-5H19z\"/></symbol><symbol id=\"dx-dashboard-group-types-full-list\" viewBox=\"0 0 24 24\"><circle class=\"dx-dashboard-icon\" cx=\"6\" cy=\"12\" r=\"2\"/><circle class=\"dx-dashboard-icon\" cx=\"12\" cy=\"12\" r=\"2\"/><circle class=\"dx-dashboard-icon\" cx=\"18\" cy=\"12\" r=\"2\"/></symbol><symbol id=\"dx-dashboard-back\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-icon\" d=\"M19 11H8.9L14 6h-3l-6 6 6 6h3l-5.1-5H19z\"/></symbol><symbol id=\"dx-dashboard-clear-master-filter\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-icon\" d=\"M20 5H4l7 7v8h2v-8z\"/><path class=\"dx-dashboard-red-icon\" d=\"M19 18l1.8-1.8c.3-.3.3-.7 0-1-.3-.3-.7-.3-1 0L18 17l-1.8-1.8c-.3-.3-.7-.3-1 0-.3.3-.3.7 0 1L17 18l-1.8 1.8c-.3.3-.3.7 0 1 .3.3.7.3 1 0L18 19l1.8 1.8c.3.3.7.3 1 0 .3-.3.3-.7 0-1L19 18z\"/></symbol><symbol id=\"dx-dashboard-clear-selection\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-icon\" d=\"M19 4H8c-.6 0-1 .4-1 1v1h10c.6 0 1 .4 1 1v10h1c.6 0 1-.4 1-1V5c0-.6-.4-1-1-1z\" opacity=\".5\"/><path class=\"dx-dashboard-icon\" d=\"M16 7H5c-.6 0-1 .4-1 1v11c0 .6.4 1 1 1h11c.6 0 1-.4 1-1V8c0-.6-.4-1-1-1zm-1 11H6V9h9v9z\"/><path class=\"dx-dashboard-red-icon\" d=\"M11.3 13.5l1.5-1.5c.2-.2.2-.6 0-.8-.2-.2-.6-.2-.8 0l-1.5 1.5L9 11.2c-.2-.2-.6-.2-.8 0-.2.2-.2.6 0 .8l1.5 1.5L8.2 15c-.2.2-.2.6 0 .8.2.2.6.2.8 0l1.5-1.5 1.5 1.5c.2.2.6.2.8 0 .2-.2.2-.6 0-.8l-1.5-1.5z\"/></symbol><symbol id=\"dx-dashboard-content-selection\" viewBox=\"0 0 24 24\"><g class=\"st0\"><path class=\"dx-dashboard-icon\" d=\"M21 14l-9 6-9-6 9-6z\"/></g><path class=\"dx-dashboard-icon\" d=\"M21 10l-9 6-9-6 9-6z\"/></symbol><symbol id=\"dx-dashboard-data-inspector\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-icon\" d=\"M9.7 11H4V9h7.1c-.6.6-1.1 1.3-1.4 2zM17 7V5H4v2h13zm-8 7c0-.3 0-.7.1-1H4v2h5.1c-.1-.3-.1-.7-.1-1zm7-5c-2.8 0-5 2.2-5 5 0 .9.2 1.7.6 2.4l-3.2 3.2c-.6.6-.6 1.4 0 2 .6.6 1.4.6 2 0l3.2-3.2c.7.4 1.5.6 2.4.6 2.8 0 5-2.2 5-5s-2.2-5-5-5zm0 8c-1.7 0-3-1.3-3-3s1.3-3 3-3 3 1.3 3 3-1.3 3-3 3z\"/></symbol><symbol id=\"dx-dashboard-data-reduced\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-yellow-icon\" d=\"M12 3c-5 0-9 4-9 9s4 9 9 9 9-4 9-9-4-9-9-9zm0 16c-3.9 0-7-3.1-7-7s3.1-7 7-7 7 3.1 7 7-3.1 7-7 7z\"/><path class=\"dx-dashboard-yellow-icon\" d=\"M12 14c-.6 0-1-.4-1-1V8c0-.6.4-1 1-1s1 .4 1 1v5c0 .6-.4 1-1 1zM12 17c-.6 0-1-.4-1-1s.4-1 1-1 1 .4 1 1-.4 1-1 1z\"/></symbol><symbol id=\"dx-dashboard-drill-up\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-icon\" d=\"M11 5V2L5 7l6 5V9h1c1.7 0 4 1 4 3 0 5-3 8-3 8s6-3 6-9c0-4-3-6-7-6h-1z\"/></symbol><symbol id=\"dx-dashboard-export-to-excel\" viewBox=\"0 0 48 48\"><path class=\"dx-dashboard-green-icon\" d=\"M42.7 8.4H28.4v3h3.9v3.7h-3.9v1.6h3.9v3.7h-3.9V22h3.9v3.7h-3.9v1.6h3.9V31h-3.9v1.6h3.9v3.7h-3.9v3.1h14.2c.7 0 1.3-.6 1.3-1.3V9.7c.1-.7-.5-1.3-1.2-1.3zm-2.3 27.7h-6.6v-3.7h6.6v3.7zm0-5.2h-6.6v-3.7h6.6v3.7zm0-5.3h-6.6v-3.7h6.6v3.7zm0-5.3h-6.6v-3.7h6.6v3.7zm0-5.2h-6.6v-3.7h6.6v3.7zM4 8.4v30.8L27.3 44V4L4 8.4zm13.8 23.7l-2.5-6.2-2.4 5.9-3-.2 3.7-7.4-3.4-7.2 3.1-.2 2.1 5.7 2.3-6 3.3-.2-3.9 7.8 4.1 8.2-3.4-.2z\"/></symbol><symbol id=\"dx-dashboard-export-to-image\" viewBox=\"0 0 48 48\"><path class=\"dx-dashboard-icon\" d=\"M5 5v38h38V5H5zm36 36H7V7h34v34z\" opacity=\".5\"/><path class=\"dx-dashboard-green-icon\" d=\"M8 40h32V25l-12 5-10-10-10 5z\"/><circle class=\"dx-dashboard-yellow-icon\" cx=\"32\" cy=\"16\" r=\"5\"/></symbol><symbol id=\"dx-dashboard-export-to-pdf\" viewBox=\"0 0 48 48\"><path class=\"dx-dashboard-red-icon\" d=\"M39.1 27.7c-1.8 0-4 .1-6.3.5-1-.6-2.1-1.2-2.9-2-2.2-2.1-4.1-5-5.3-8.1.1-.3.1-.5.2-.8.3-1.5.6-6.3.6-6.5v-.2c.1-.3.5-1.9.4-2.9-.2-.9-.9-2.7-2.6-2.7h-.6c-1.2 0-2.2.6-2.5 1.5-.8 2.8 0 7 1.5 12.5l-.4.9c-1 2.5-2.3 5-3.4 7.2l-.2.3C16.3 30 15.1 32.2 14 34c-.2-.2-.4-.2-.6-.1-.1 0-1.8 1-2.2 1.2-3.5 2.1-5.8 4.4-6.2 6.3-.1.6 0 1.4.6 1.8l1 .5c.5.2 1 .3 1.4.3 2.5 0 5.4-3.1 9.3-9.9 4.5-1.5 9.7-2.7 14.2-3.4 4.2 2.3 9.4 3.8 11.7 3.1.5-.1 1-.5 1.3-.9.2-.3.4-1.1.4-1.4v-.2s.1-.6.1-.9c-.1-.6-.3-1.2-.7-1.6-.8-.6-2.5-1.1-5.2-1.1zm-2.4 2.4c2.6-.2 4.6-.1 5.7.3 1.3.4 1.5.8 1.6.8v.1c-.1.2-.3.3-.4.4-.9.3-3.6-.2-6.9-1.6zM24.3 10.3V10.6c-.1.3-.6 2.3-.9 3.5-.4-1.8-.6-3.5-.6-4.9 0-.5 0-1.5.2-2.3 0-.2.1-.3.1-.4.2.2.5.6.8 1.4.4.8.4 1.7.4 2.4zm-4.1 18.4c1.4-2.6 2.3-4.7 3-6.4 1.3 2.4 3 4.4 4.9 6 .2.2.4.4.7.5-3.9.8-7.2 1.7-10.2 2.8.5-.9 1-1.9 1.6-2.9zM13 35.8c-2.5 3.9-4.2 5.6-5.4 6.2.5-1.2 2.3-3.6 4.8-5.6.1-.2.3-.4.6-.6z\"/><path class=\"dx-dashboard-red-icon\" d=\"M31.5 15.5h.6c.7 0 1.3-.2 1.7-.7.4-.5.7-1.1.7-1.8 0-.8-.2-1.4-.6-1.8-.4-.4-1-.6-1.7-.6H30v7.6h1.5v-2.7zm0-3.7h.5c.3 0 .5.1.7.3s.3.5.3.9c0 .8-.3 1.2-1 1.2h-.5v-2.4zM39.7 17c.5-.7.8-1.6.8-2.8 0-2.5-1.1-3.7-3.1-3.7h-2v7.6h2c1 0 1.7-.4 2.3-1.1zm-2.9-5.2h.6c.5 0 .9.2 1.2.7.3.4.4 1 .4 1.8s-.1 1.4-.4 1.9c-.3.5-.7.7-1.2.7h-.6v-5.1zM45 11.8v-1.3h-3.5v7.6H43v-3h1.8v-1.3H43v-2z\"/></symbol><symbol id=\"dx-dashboard-export\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-icon\" d=\"M19 8h-4v2h3v8H6v-8h3V8H5c-.6 0-1 .4-1 1v10c0 .6.4 1 1 1h14c.6 0 1-.4 1-1V9c0-.6-.4-1-1-1zm-8-2v7h2V6h3l-4-4-4 4h3z\"/></symbol><symbol id=\"dx-dashboard-filter\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-accent-icon\" d=\"M14 2H2l5 5v6h2V7z\"/></symbol><symbol id=\"dx-dashboard-filters\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-icon\" d=\"M20 5H4l7 7v8h2v-8z\"/></symbol><symbol id=\"dx-dashboard-map-initial-extent\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-icon\" d=\"M14.5 4C11.5 4 9 6.5 9 9.5c0 1 .3 1.9.7 2.8l-5.3 5.3c-.6.6-.6 1.4 0 2 .6.6 1.4.6 2 0l5.3-5.3c.8.5 1.7.7 2.8.7 3 0 5.5-2.5 5.5-5.5S17.5 4 14.5 4zm0 9c-1.9 0-3.5-1.6-3.5-3.5S12.6 6 14.5 6 18 7.6 18 9.5 16.4 13 14.5 13z\"/><circle class=\"dx-dashboard-icon\" cx=\"14.5\" cy=\"9.5\" r=\"1.5\"/></symbol><symbol id=\"dx-dashboard-maximize-item\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-icon\" d=\"M10 5H5v5l2-2 2 2 1-1-2-2 2-2zM19 10V5h-5l2 2-2 2 1 1 2-2 2 2zM14 19h5v-5l-2 2-2-2-1 1 2 2-2 2zM5 14v5h5l-2-2 2-2-1-1-2 2-2-2z\"/></symbol><symbol id=\"dx-dashboard-open-tab-pages\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-icon\" d=\"M8 12c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zm4-2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"/></symbol><symbol id=\"dx-dashboard-parameters\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-icon\" d=\"M6 12c-1.7 0-3 1.3-3 3s1.3 3 3 3 3-1.3 3-3-1.3-3-3-3zm0 4c-.6 0-1-.4-1-1s.4-1 1-1 1 .4 1 1-.4 1-1 1zM12 6c-1.7 0-3 1.3-3 3s1.3 3 3 3 3-1.3 3-3-1.3-3-3-3zm0 4c-.6 0-1-.4-1-1s.4-1 1-1 1 .4 1 1-.4 1-1 1z\"/><g opacity=\".5\"><path class=\"dx-dashboard-icon\" d=\"M6 12c.4 0 .7.1 1 .2V5c0-.6-.4-1-1-1s-1 .4-1 1v7.2c.3-.1.6-.2 1-.2zM6 18c-.4 0-.7-.1-1-.2V19c0 .6.4 1 1 1s1-.4 1-1v-1.2c-.3.1-.6.2-1 .2zM12 6c.4 0 .7.1 1 .2V5c0-.6-.4-1-1-1s-1 .4-1 1v1.2c.3-.1.6-.2 1-.2zM12 12c-.4 0-.7-.1-1-.2V19c0 .6.4 1 1 1s1-.4 1-1v-7.2c-.3.1-.6.2-1 .2zM18 17c-.4 0-.7-.1-1-.2V19c0 .6.4 1 1 1s1-.4 1-1v-2.2c-.3.1-.6.2-1 .2zM18 11c.4 0 .7.1 1 .2V5c0-.6-.4-1-1-1s-1 .4-1 1v6.2c.3-.1.6-.2 1-.2z\"/></g><path class=\"dx-dashboard-icon\" d=\"M18 11c-1.7 0-3 1.3-3 3s1.3 3 3 3 3-1.3 3-3-1.3-3-3-3zm0 4c-.6 0-1-.4-1-1s.4-1 1-1 1 .4 1 1-.4 1-1 1z\"/></symbol><symbol id=\"dx-dashboard-range-time-periods\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-icon\" d=\"M16 13.2l6-2.2-8-3v10h-4V3L2 6l6 2.2V18H4v2h16v-2h-4z\"/></symbol><symbol id=\"dx-dashboard-restore-item\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-red-icon\" d=\"M19 14h-5v5l2-2 2 2 1-1-2-2 2-2zM10 19v-5H5l2 2-2 2 1 1 2-2 2 2zM5 10h5V5L8 7 6 5 5 6l2 2-2 2zM14 5v5h5l-2-2 2-2-1-1-2 2-2-2z\"/></symbol><symbol id=\"dx-dashboard-toggle-multiselection\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-icon\" d=\"M19 4H8c-.6 0-1 .4-1 1v1h10c.6 0 1 .4 1 1v10h1c.6 0 1-.4 1-1V5c0-.6-.4-1-1-1z\" opacity=\".5\"/><path class=\"dx-dashboard-icon\" d=\"M16 7H5c-.6 0-1 .4-1 1v11c0 .6.4 1 1 1h11c.6 0 1-.4 1-1V8c0-.6-.4-1-1-1zm-1 11H6V9h9v9z\"/><path class=\"dx-dashboard-icon\" d=\"M9.1 16.8c.3.3.8.3 1-.1L14 10c-.7 0-1.3.4-1.6 1l-2.7 4L8 13.7c-.2-.2-.6-.2-.8.1-.2.2-.2.5-.1.7l2 2.3z\"/></symbol><symbol id=\"dx-dashboard-datatype-binary\" viewBox=\"0 0 16 16\"><path class=\"dx-dashboard-accent-icon\" d=\"M6.4 6.2c-.7 0-.8.6-.8 2 0 1.5.1 2.1.8 2.1.7 0 .8-.6.8-2.1 0-1.4-.1-2-.8-2z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M15 1H1c-.5 0-1 .5-1 1v12c0 .5.5 1 1 1h14c.5 0 1-.5 1-1V2c0-.5-.5-1-1-1zM6.3 11.1c-1.4 0-1.9-.8-1.9-2.8 0-2 .6-2.8 2-2.8s1.9.7 1.9 2.7c.1 1.9-.5 2.9-2 2.9zm5.3-.1H9.5l-.1-.7c.1-.1.4-.2.6-.3V6.5c-.2 0-.5-.1-.7-.2v-.5c.5-.2 1.2-.3 1.9-.3v4.6c.2.1.4.2.4.3v.6z\"/></symbol><symbol id=\"dx-dashboard-datatype-boolean\" viewBox=\"0 0 16 16\"><path class=\"dx-dashboard-yellow-icon\" d=\"M10.6 6.4h-.5v1.5h.5c.7 0 1.1-.2 1.1-.7-.1-.7-.5-.8-1.1-.8zM5.3 6.3c-.7 0-1.1.4-1.1 1.9s.5 2 1.1 2c.7 0 1.1-.5 1.1-1.9 0-1.5-.5-2-1.1-2z\"/><path class=\"dx-dashboard-yellow-icon\" d=\"M15 1H1c-.5 0-1 .5-1 1v12c0 .5.5 1 1 1h14c.5 0 1-.5 1-1V2c0-.5-.5-1-1-1zM5.2 11.1c-1.4 0-2.2-.8-2.2-2.8 0-2 .9-2.8 2.4-2.8s2.3.7 2.3 2.7c-.1 1.9-1 2.9-2.5 2.9zm8-.1h-1.4l-.9-2c0-.1-.2-.3-.3-.3h-.5V10c.3.1.6.2.7.3v.7H8.6l-.1-.7c.1-.1.2-.2.4-.3V6.4c-.1-.1-.3-.1-.4-.3l.1-.7h2c1.4 0 2.2.3 2.2 1.6 0 .8-.6 1.2-1.2 1.5.2.1.4.2.5.4l.6 1.1c.2.1.4.2.5.3v.7z\"/></symbol><symbol id=\"dx-dashboard-datatype-datetime\" viewBox=\"0 0 16 16\"><path class=\"dx-dashboard-green-icon\" d=\"M15 1H1c-.5 0-1 .5-1 1v12c0 .5.5 1 1 1h14c.5 0 1-.5 1-1V2c0-.5-.5-1-1-1zM8 12c-2.2 0-4-1.8-4-4s1.8-4 4-4 4 1.8 4 4-1.8 4-4 4z\"/><path class=\"dx-dashboard-green-icon\" d=\"M8 6H7v3h3V8H8z\"/></symbol><symbol id=\"dx-dashboard-datatype-float\" viewBox=\"0 0 16 16\"><path class=\"dx-dashboard-accent-icon\" d=\"M15 1H1c-.5 0-1 .5-1 1v12c0 .5.5 1 1 1h14c.5 0 1-.5 1-1V2c0-.5-.5-1-1-1zM3.4 11.1c-.4 0-.7-.1-.7-.6.1-.5.3-.6.7-.6.4 0 .7.2.7.6 0 .4-.3.6-.7.6zm5.4-.1H5.2L5 10l2-2.2c.3-.3.6-.7.6-1.2 0-.4-.2-.6-.6-.6-.2 0-.5 0-.7.1-.1.4-.2.8-.3.9h-.7c-.1-.2-.1-.6-.1-.9v-.2c.4-.3 1.1-.5 1.8-.5.9 0 1.7.2 1.7 1.4 0 .4-.3.9-.5 1.2L7 9.4c-.3.3-.8.7-.8.7v.1s.4-.1.8-.1h.6c0-.3.1-.6.2-.7h.8c.3.4.3 1.2.2 1.6zm2.3.1c-.5 0-1.1-.2-1.4-.3l.3-.8c.3.1.6.2 1 .2.7 0 1.1-.3 1.1-.9 0-.9-.5-1-.9-1s-.7.1-.9.1l-.3-.6V5.5h3v.9h-2v1.1h.7c1 0 1.7.5 1.7 1.7-.1 1.3-1 1.9-2.3 1.9z\"/></symbol><symbol id=\"dx-dashboard-datatype-integer\" viewBox=\"0 0 16 16\"><path class=\"dx-dashboard-accent-icon\" d=\"M15 1H1c-.5 0-1 .5-1 1v12c0 .5.5 1 1 1h14c.5 0 1-.5 1-1V2c0-.5-.5-1-1-1zM6.7 11H4.6l-.1-.7c.1-.1.4-.2.6-.3V6.5c-.1 0-.4 0-.6-.1v-.6c.5-.3 1.2-.4 1.8-.3v4.6c.2.1.4.2.4.3v.6zm4.8 0H7.8l-.2-1 2-2.2c.3-.3.6-.7.6-1.2 0-.4-.2-.6-.6-.6-.2 0-.5 0-.7.1 0 .3-.1.6-.2.8L8 7c-.1-.2-.2-.6-.2-.9v-.2c.4-.3 1.1-.5 1.8-.5.9 0 1.7.2 1.7 1.4 0 .4-.3.9-.5 1.2L9.7 9.4c-.3.3-.8.7-.8.7v.1s.4-.1.8-.1h.6c0-.3.1-.6.2-.7h.8c.2.4.3 1.2.2 1.6z\"/></symbol><symbol id=\"dx-dashboard-datatype-list\" viewBox=\"0 0 16 16\"><path class=\"dx-dashboard-icon\" d=\"M0 1v14h16V1H0zm15 13H1V2h14v12z\"/><path class=\"dx-dashboard-red-icon\" d=\"M9.05 8l1.84-1.84c.15-.15.15-.38 0-.53l-.52-.52a.357.357 0 00-.52 0L8 6.95 6.16 5.11a.357.357 0 00-.52 0l-.53.53c-.15.15-.15.38 0 .53L6.95 8 5.11 9.84c-.15.15-.15.38 0 .52l.52.52c.15.15.38.15.53 0L8 9.05l1.84 1.84c.15.15.38.15.52 0l.52-.52c.15-.15.15-.38 0-.53L9.05 8z\"/></symbol><symbol id=\"dx-dashboard-datatype-object\" viewBox=\"0 0 16 16\"><path class=\"dx-dashboard-icon\" d=\"M15 1H1c-.5 0-1 .5-1 1v12c0 .5.5 1 1 1h14c.5 0 1-.5 1-1V2c0-.5-.5-1-1-1zm-4.6 4.8l-.8.1c-.1-.1-.3-.4-.3-.7H7.7V7h1.4c.1-.2.2-.3.2-.4l.7.1v1.8h-.7c-.1-.1-.1-.2-.2-.4H7.7v1.7c.4.1.8.2 1 .4l-.1.8H5.8l-.1-.8c.1-.2.3-.3.6-.4V5.3c-.3-.1-.5-.2-.6-.4l.1-.8h4.6v1.7z\"/></symbol><symbol id=\"dx-dashboard-datatype-string\" viewBox=\"0 0 16 16\"><path class=\"dx-dashboard-red-icon\" d=\"M4.5 9.6c0 .3.2.5.5.5.4 0 .6-.2.7-.3v-.7h-.5c-.5 0-.7.2-.7.5zM10.7 7.4c-.4 0-.7.1-.9.3V10c.3.1.5.2.7.2.6 0 .9-.6.9-1.4 0-1.1-.2-1.4-.7-1.4z\"/><path class=\"dx-dashboard-red-icon\" d=\"M15 1H1c-.5 0-1 .5-1 1v12c0 .5.5 1 1 1h14c.5 0 1-.5 1-1V2c0-.5-.5-1-1-1zm-7.4 9.9s-.5.2-1.3.2c0 0-.1-.2-.2-.6-.2.2-.5.6-1.4.6-.8 0-1.5-.5-1.5-1.3 0-.7.5-1.3 1.6-1.3h1V8c0-.5-.2-.7-.7-.7-.2 0-.3 0-.5.1 0 .2-.1.5-.1.6h-.9c-.1-.3-.2-.7-.1-1.1.4-.2 1.2-.5 1.9-.5 1.1 0 1.7.4 1.7 1.6v1.9c.2 0 .4.1.5.2v.8zm3 .2c-.4 0-.9-.1-1.2-.3-.1.1-.2.2-.4.2h-.4V5.6c-.2-.1-.4-.2-.5-.3l.1-.7c.5-.1 1.2-.1 1.7-.1v2.3c.2-.2.7-.3 1.1-.3 1.3 0 1.8.6 1.8 2.2-.1 1.8-1.2 2.4-2.2 2.4z\"/></symbol><symbol id=\"dx-dashboard-convert\" viewBox=\"0 0 24 24\"><path class=\"dx_white\" d=\"M17 12V9H3V5h14V2l5 5z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M7 12v3h14v4H7v3l-5-5z\"/></symbol><symbol id=\"dx-dashboard-interactivity\" viewBox=\"-467 269 24 24\"><path class=\"dx_white\" d=\"M-446 279h-6v-7c0-.6-.4-1-1-1h-11c-.6 0-1 .4-1 1v10c0 .6.4 1 1 1h6v7c0 .6.4 1 1 1h11c.6 0 1-.4 1-1v-10c0-.6-.4-1-1-1zm-17 2v-8h9v8h-9zm16 8h-9v-6h3c.6 0 1-.4 1-1v-1h5v8z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M-447 273l2-2h-6v6l2-2 3 3 2-2zM-461 287l-3-3-2 2 3 3-2 2h6v-6z\"/></symbol><symbol id=\"dx-dashboard-item-options\" viewBox=\"-467 269 24 24\"><path class=\"dx_white\" d=\"M-456.8 288.9l.3 3.1h3.1l.3-3.1c.9-.2 1.8-.6 2.5-1.1l2.4 1.9 2-2-2-2.4c.5-.8.9-1.6 1.1-2.5l3.1-.3v-3.1l-3.1-.3c-.2-.9-.6-1.8-1.1-2.5l1.9-2.4-2-2-2.4 2c-.8-.5-1.6-.9-2.5-1.1l-.3-3.1h-3.1l-.3 3.1c-.9.2-1.8.6-2.5 1.1l-2.4-1.9-2 2 2 2.4c-.5.8-.9 1.6-1.1 2.5l-3.1.3v3.1l3.1.3c.2.9.6 1.8 1.1 2.5l-1.9 2.4 2 2 2.4-2c.7.6 1.6.9 2.5 1.1zm-4.2-7.9c0-3.3 2.7-6 6-6s6 2.7 6 6-2.7 6-6 6-6-2.7-6-6z\"/></symbol><symbol id=\"dx-dashboard-properties\" viewBox=\"0 0 24 24\"><path class=\"dx_white\" d=\"M17.8 10.2c-1.1 1.1-2.9 1.1-4 0s-1.1-2.9 0-4l3.7-3.7c-.8-.3-1.6-.5-2.5-.5-3.9 0-7 3.1-7 7 0 1.2.3 2.3.8 3.2l-6.2 6.2c-.8.8-.8 2.2 0 3s2.2.8 3 0l6.2-6.2c1 .5 2.1.8 3.2.8 3.9 0 7-3.1 7-7 0-.9-.2-1.7-.5-2.5l-3.7 3.7z\"/></symbol><symbol id=\"dx-dashboard-redo\" viewBox=\"4 -4 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M25 10l-1-9-3 3c-2.3-2.3-4.4-3-7-3-4 0-7 2.7-7 7 0 4 2 7 2 7l2-2c-.3-.7-.9-2.1-1-4-.2-3.4 1.4-5 4-5 3 0 5 2 5 2l-3 3 9 1z\"/></symbol><symbol id=\"dx-dashboard-undo\" viewBox=\"4 -4 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M18 1c-2.6 0-4.7.7-7 3L8 1l-1 9 9-1-3-3s2-2 5-2c2.6 0 4.2 1.6 4 5-.1 1.9-.8 3.3-1 4l2 2s2-3 2-7c0-4.3-3-7-7-7z\"/></symbol><symbol id=\"dx-dashboard-toolbox-boundImage\" viewBox=\"0 0 24 24\"><circle class=\"dx-dashboard-contrast-icon\" cx=\"7.5\" cy=\"9.5\" r=\"1.5\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M9 12l-3 4h3l1.4-2.1zM14 10l-4 6h8z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M20.5 8c-1.5 0-2.8-.4-3.3-1-.1.2-.2.3-.2.5v1c0 .8 1.6 1.5 3.5 1.5S24 9.3 24 8.5v-1c0-.2-.1-.3-.2-.5-.5.6-1.8 1-3.3 1zM20.5 5c-1.5 0-2.8-.4-3.3-1-.1.2-.2.3-.2.5v1c0 .8 1.6 1.5 3.5 1.5S24 6.3 24 5.5v-1c0-.2-.1-.3-.2-.5-.5.6-1.8 1-3.3 1z\"/><ellipse class=\"dx-dashboard-accent-icon\" cx=\"20.5\" cy=\"2.5\" rx=\"3.5\" ry=\"1.5\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M21 12v8H3V4h12V3c0-.4.1-.7.3-1H2c-.5 0-1 .5-1 1v18c0 .6.4 1 1 1h20c.5 0 1-.5 1-1v-9.5c-.6.3-1.3.4-2 .5z\"/></symbol><symbol id=\"dx-dashboard-toolbox-bubbleMap\" viewBox=\"4 -4 24 24\"><circle class=\"dx-dashboard-accent-icon\" cx=\"12\" cy=\"11\" r=\"6\"/><circle class=\"dx-dashboard-contrast-icon\" cx=\"22\" cy=\"6\" r=\"4\"/><circle class=\"dx-dashboard-icon\" cx=\"13.5\" cy=\"1.5\" r=\"2.5\"/></symbol><symbol id=\"dx-dashboard-toolbox-card\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M22 2H5c-.6 0-1 .4-1 1v2H2c-.6 0-1 .4-1 1v15c0 .6.4 1 1 1h17c.6 0 1-.4 1-1v-2h2c.6 0 1-.4 1-1V3c0-.6-.4-1-1-1zm-4 18H3V7h15v13zm-7-8H5v-2h6v2zm5 5H5v-2h11v2z\"/></symbol><symbol id=\"dx-dashboard-toolbox-chart\" viewBox=\"4 -4 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M26 17h-3c-.6 0-1-.4-1-1V7c0-.6.4-1 1-1h3c.6 0 1 .4 1 1v9c0 .6-.4 1-1 1z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M9 17H6c-.6 0-1-.4-1-1v-5c0-.6.4-1 1-1h3c.6 0 1 .4 1 1v5c0 .6-.4 1-1 1zM21 17h-3c-.6 0-1-.4-1-1V0c0-.6.4-1 1-1h3c.6 0 1 .4 1 1v16c0 .6-.4 1-1 1z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M14 17h-3c-.6 0-1-.4-1-1V4c0-.6.4-1 1-1h3c.6 0 1 .4 1 1v12c0 .6-.4 1-1 1z\"/></symbol><symbol id=\"dx-dashboard-toolbox-choroplethMap\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M20.9 2h-9.8c-.6 0-1.1.5-1.1 1.1V8h5v6h5.9c.6 0 1.1-.5 1.1-1.1V3.1c0-.6-.5-1.1-1.1-1.1z\"/><path class=\"dx-dashboard-icon\" d=\"M16.9 6H7.1C6.5 6 6 6.5 6 7.1V12h6v6h4.9c.6 0 1.1-.5 1.1-1.1V7.1c0-.6-.5-1.1-1.1-1.1z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M12.9 22H3.1c-.6 0-1.1-.5-1.1-1.1v-9.8c0-.6.5-1.1 1.1-1.1h9.8c.6 0 1.1.5 1.1 1.1v9.8c0 .6-.5 1.1-1.1 1.1z\"/></symbol><symbol id=\"dx-dashboard-toolbox-comboBox\" viewBox=\"4 -4 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M26 1H6c-.6 0-1 .4-1 1v12c0 .6.4 1 1 1h20c.6 0 1-.4 1-1V2c0-.6-.4-1-1-1zm-1 12H7V3h18v10z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M16 4v8h8V4h-8zm4 6l-3-3h6l-3 3z\"/></symbol><symbol id=\"dx-dashboard-toolbox-dateFilter\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M9 14H5v-4h4v4zm5-4h-4v4h4v-4zm-5 5H5v4h4v-4zm5 0h-4v4h4v-4zm8-12h-2v2c0 .5-.5 1-1 1h-2c-.5 0-1-.5-1-1V3H8v2c0 .5-.5 1-1 1H5c-.5 0-1-.5-1-1V3H2c-.5 0-1 .5-1 1v18c0 .5.5 1 1 1h20c.5 0 1-.5 1-1V4c0-.5-.5-1-1-1zm-1 18H3V8h18v13zM7 5H5V1h2v4zm12-4h-2v4h2V1z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M19 14h-4v-4h4v4zm0 1h-4v4h4v-4z\"/></symbol><symbol id=\"dx-dashboard-toolbox-gauge\" viewBox=\"4 -4 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M16-3C9.9-3 5 1.9 5 8s4.9 11 11 11 11-4.9 11-11S22.1-3 16-3zm0 20c-5 0-9-4-9-9s4-9 9-9 9 4 9 9-4 9-9 9z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M16 6c-.3 0-.6.1-.8.2L11 2l-1 1 4.2 4.2c-.1.2-.2.5-.2.8 0 1.1.9 2 2 2s2-.9 2-2-.9-2-2-2z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M9 8c0 1.9.8 3.7 2.1 4.9l1.4-1.4C11.6 10.6 11 9.4 11 8c0-.6.1-1.2.3-1.7L9.8 4.8c-.5.9-.8 2-.8 3.2zM16 1c-1.2 0-2.3.3-3.2.8l1.5 1.5c.5-.2 1.1-.3 1.7-.3 1.4 0 2.6.6 3.5 1.5l1.4-1.4C19.7 1.8 17.9 1 16 1z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M20.9 3.1l-1.4 1.4c.9.9 1.5 2.1 1.5 3.5s-.6 2.6-1.5 3.5l1.4 1.4c1.3-1.3 2.1-3 2.1-4.9 0-1.9-.8-3.7-2.1-4.9z\"/></symbol><symbol id=\"dx-dashboard-toolbox-geoPointMap\" viewBox=\"4 -4 24 24\"><circle class=\"dx-dashboard-contrast-icon\" cx=\"19\" cy=\"13\" r=\"3\"/><circle class=\"dx-dashboard-contrast-icon\" cx=\"20\" cy=\"3\" r=\"3\"/><circle class=\"dx-dashboard-contrast-icon\" cx=\"12\" cy=\"8\" r=\"3\"/></symbol><symbol id=\"dx-dashboard-toolbox-grid\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M5 5h4v4H5V5zm5 0h4v4h-4V5zm5 0h4v4h-4V5zM5 10h4v4H5v-4zm5 0h4v4h-4v-4zm5 0h4v4h-4v-4zM5 15h4v4H5v-4zm5 0h4v4h-4v-4zm5 0h4v4h-4v-4zm8-13c0-.6-.4-1-1-1H2c-.6 0-1 .4-1 1v20c0 .6.4 1 1 1h20c.6 0 1-.4 1-1V2zm-2 19H3V3h18v18z\"/></symbol><symbol id=\"dx-dashboard-toolbox-group\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M22 1H2c-.6 0-1 .4-1 1v20c0 .6.4 1 1 1h20c.6 0 1-.4 1-1V2c0-.6-.4-1-1-1zm-1 20H3V3h18v18zM6 19h9c.6 0 1-.4 1-1v-2h2c.6 0 1-.4 1-1V6c0-.6-.4-1-1-1H9c-.6 0-1 .4-1 1v2H6c-.6 0-1 .4-1 1v9c0 .6.4 1 1 1zm1-9h7v7H7v-7z\"/></symbol><symbol id=\"dx-dashboard-toolbox-image\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M22 2H2c-.5 0-1 .5-1 1v18c0 .6.4 1 1 1h20c.5 0 1-.5 1-1V3c0-.6-.4-1-1-1zm-1 18H3V4h18v16zM7.5 8C8.3 8 9 8.7 9 9.5S8.3 11 7.5 11 6 10.3 6 9.5 6.7 8 7.5 8zM9 12l-3 4h3l1.4-2.1L9 12zm5-2l-4 6h8l-4-6z\"/></symbol><symbol id=\"dx-dashboard-toolbox-listBox\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M10 7h8v2h-8V7zM6 7h2v2H6V7zm4 4h8v2h-8v-2zm-4 0h2v2H6v-2zm4 4h8v2h-8v-2zm-4 0h2v2H6v-2zM21 1H3c-.6 0-1 .4-1 1v20c0 .6.4 1 1 1h18c.6 0 1-.4 1-1V2c0-.6-.4-1-1-1zm-1 20H4V3h16v18z\"/></symbol><symbol id=\"dx-dashboard-toolbox-pie\" viewBox=\"4 -4 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M5 7h10V-3C9.5-3 5 1.5 5 7z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M17-1V9H7c0 5.5 4.5 10 10 10s10-4.5 10-10S22.5-1 17-1z\"/></symbol><symbol id=\"dx-dashboard-toolbox-pieMap\" viewBox=\"0 0 24 24\"><circle class=\"dx-dashboard-contrast-icon\" cx=\"18\" cy=\"10\" r=\"4\"/><circle class=\"dx-dashboard-contrast-icon\" cx=\"9.5\" cy=\"5.5\" r=\"2.5\"/><path class=\"dx-dashboard-accent-icon\" d=\"M8 9v6l-4.2 4.2C4.8 20.3 6.3 21 8 21c3.3 0 6-2.7 6-6s-2.7-6-6-6z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M8 9c-3.3 0-6 2.7-6 6 0 .8.2 1.6.5 2.3.2.4.3.7.6 1 .2.3.5.6.7.9L8 15V9z\"/></symbol><symbol id=\"dx-dashboard-toolbox-pivot\" viewBox=\"4 -4 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M27-3H5L16 8 5 19h22v-3H12l8-8-8-8h15z\"/></symbol><symbol id=\"dx-dashboard-toolbox-rangeFilter\" viewBox=\"4 -4 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M26-1H6c-.6 0-1 .4-1 1v16c0 .6.4 1 1 1h7V5L7 8.8V1h18v4l-6 6v6h7c.6 0 1-.4 1-1V0c0-.6-.4-1-1-1z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M21-3V9l-2 2-6-6-2 1.3V-3H9v22h2v-2h10v2h2V-3z\"/></symbol><symbol id=\"dx-dashboard-toolbox-scatterChart\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M22 1H2c-.6 0-1 .4-1 1v20c0 .6.4 1 1 1h20c.6 0 1-.4 1-1V2c0-.6-.4-1-1-1zm-1 20H3V3h18v18zM8 13c-1.7 0-3 1.3-3 3s1.3 3 3 3 3-1.3 3-3-1.3-3-3-3zm0 4c-.6 0-1-.4-1-1s.4-1 1-1 1 .4 1 1-.4 1-1 1zm8-6c-1.7 0-3 1.3-3 3s1.3 3 3 3 3-1.3 3-3-1.3-3-3-3zm0 4c-.6 0-1-.4-1-1s.4-1 1-1 1 .4 1 1-.4 1-1 1zm-2-7c0-1.7-1.3-3-3-3S8 6.3 8 8s1.3 3 3 3 3-1.3 3-3zm-3 1c-.6 0-1-.4-1-1s.4-1 1-1 1 .4 1 1-.4 1-1 1z\"/></symbol><symbol id=\"dx-dashboard-toolbox-tabContainer\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-accent-icon\" d=\"M22 4H11V1c0-.5-.5-1-1-1H1C.5 0 0 .5 0 1v21c0 .5.5 1 1 1h21c.5 0 1-.5 1-1V5c0-.5-.5-1-1-1zm-1 17H2V2h7v4h12v15z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M16 8h-6c-.5 0-1 .5-1 1v2H7c-.5 0-1 .5-1 1v6c0 .5.5 1 1 1h6c.5 0 1-.5 1-1v-2h2c.5 0 1-.5 1-1V9c0-.5-.5-1-1-1zm-4 9H8v-4h4v4z\"/></symbol><symbol id=\"dx-dashboard-toolbox-textBox\" viewBox=\"4 -4 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M26 3c.6 0 1-.4 1-1v-4c0-.6-.4-1-1-1h-4c-.6 0-1 .4-1 1v1H11v-1c0-.6-.4-1-1-1H6c-.6 0-1 .4-1 1v4c0 .6.4 1 1 1h1v10H6c-.6 0-1 .4-1 1v4c0 .6.4 1 1 1h4c.6 0 1-.4 1-1v-1h10v1c0 .6.4 1 1 1h4c.6 0 1-.4 1-1v-4c0-.6-.4-1-1-1h-1V3h1zM7-1h2v2H7v-2zm0 18v-2h2v2H7zm14-3v1H11v-1c0-.6-.4-1-1-1H9V3h1c.6 0 1-.4 1-1V1h10v1c0 .6.4 1 1 1h1v10h-1c-.6 0-1 .4-1 1zm4 3h-2v-2h2v2zM23 1v-2h2v2h-2z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M18 11h2l-3-7h-2l-3 7h2l.4-1h3.1l.5 1zm-2.7-3l.7-1.7.7 1.7h-1.4z\"/></symbol><symbol id=\"dx-dashboard-toolbox-treemap\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-accent-icon\" d=\"M2 1c-.6 0-1 .4-1 1v20c0 .6.4 1 1 1h5V1H2z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M23 9V2c0-.6-.4-1-1-1H9v8h14zM17 18v5h5c.6 0 1-.4 1-1v-4h-6z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M17 11h6v5h-6zM9 11h6v12H9z\"/></symbol><symbol id=\"dx-dashboard-toolbox-treeView\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M14 8H2c-.6 0-1 .4-1 1v12c0 .6.4 1 1 1h12c.6 0 1-.4 1-1V9c0-.6-.4-1-1-1zm-1 12H3V10h10v10zm-2-6H9v-2H7v2H5v2h2v2h2v-2h2v-2zM22 2H10c-.6 0-1 .4-1 1v4h2V4h10v10h-5v2h6c.6 0 1-.4 1-1V3c0-.6-.4-1-1-1zm-6 8h3V8h-3.3c.2.3.3.6.3 1v1z\"/></symbol><symbol id=\"dx-dashboard-chart-series-area\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M19 18H5c-.6 0-1-.4-1-1v-5l5-5 5 5 6-6v11c0 .6-.4 1-1 1z\"/></symbol><symbol id=\"dx-dashboard-chart-series-bar\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M7 20H5c-.6 0-1-.4-1-1v-5c0-.6.4-1 1-1h2c.6 0 1 .4 1 1v5c0 .6-.4 1-1 1zM13 20h-2c-.6 0-1-.4-1-1V9c0-.6.4-1 1-1h2c.6 0 1 .4 1 1v10c0 .6-.4 1-1 1zM19 20h-2c-.6 0-1-.4-1-1V5c0-.6.4-1 1-1h2c.6 0 1 .4 1 1v14c0 .6-.4 1-1 1z\"/></symbol><symbol id=\"dx-dashboard-chart-series-candle-stick\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M17 6V4h-2v2h-2v9h2v2h2v-2h2V6h-2zm0 7h-2V8h2v5z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M9 9V7H7v2H5v9h2v2h2v-2h2V9z\"/></symbol><symbol id=\"dx-dashboard-chart-series-full-stacked-area\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-accent-icon\" d=\"M4 5v14h16V5c0-.6-.4-1-1-1H5c-.6 0-1 .4-1 1z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M9 11l-5 5v3c0 .6.4 1 1 1h14c.6 0 1-.4 1-1v-9l-6 6-5-5z\"/></symbol><symbol id=\"dx-dashboard-chart-series-full-stacked-bar\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M13 20h-2c-.6 0-1-.4-1-1v-8h4v8c0 .6-.4 1-1 1zM19 20h-2c-.6 0-1-.4-1-1V8h4v11c0 .6-.4 1-1 1zM7 20H5c-.6 0-1-.4-1-1v-4h4v4c0 .6-.4 1-1 1z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M20 9h-4V5c0-.6.4-1 1-1h2c.6 0 1 .4 1 1v4zM14 12h-4V5c0-.6.4-1 1-1h2c.6 0 1 .4 1 1v7zM8 16H4V5c0-.6.4-1 1-1h2c.6 0 1 .4 1 1v11z\"/></symbol><symbol id=\"dx-dashboard-chart-series-full-stacked-line\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-accent-icon\" d=\"M4 5h16v2H4z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M14 16l-5-5-5 5v3l5-5 5 5 6-6v-3z\"/></symbol><symbol id=\"dx-dashboard-chart-series-full-stacked-spline-area\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-accent-icon\" d=\"M19 4H5c-.6 0-1 .4-1 1v8.9s3.2 6.8 8 0c4.7-6.6 8 0 8 0V5c0-.6-.4-1-1-1z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M12 13c-4.8 6.8-8 0-8 0v6c0 .6.4 1 1 1h14c.6 0 1-.4 1-1v-6s-3.3-6.6-8 0z\"/></symbol><symbol id=\"dx-dashboard-chart-series-high-low-close\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-accent-icon\" d=\"M9 7H7v13h2v-3h2v-2H9z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M15 14V4h-2v12h4v-2z\"/></symbol><symbol id=\"dx-dashboard-chart-series-line\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M14 13L9 8l-5 5v3l5-5 5 5 6-6V7z\"/></symbol><symbol id=\"dx-dashboard-chart-series-points\" viewBox=\"0 0 24 24\"><circle class=\"dx-dashboard-contrast-icon\" cx=\"6\" cy=\"18\" r=\"2\"/><circle class=\"dx-dashboard-contrast-icon\" cx=\"18\" cy=\"6\" r=\"2\"/><circle class=\"dx-dashboard-contrast-icon\" cx=\"11\" cy=\"9\" r=\"2\"/><circle class=\"dx-dashboard-contrast-icon\" cx=\"13\" cy=\"15\" r=\"2\"/></symbol><symbol id=\"dx-dashboard-chart-series-range-area\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M14 12L9 7l-5 5v6l5-5 5 5 6-6V6z\"/></symbol><symbol id=\"dx-dashboard-chart-series-range-bar\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M7 17H5c-.6 0-1-.4-1-1V8c0-.6.4-1 1-1h2c.6 0 1 .4 1 1v8c0 .6-.4 1-1 1zM13 20h-2c-.6 0-1-.4-1-1v-7c0-.6.4-1 1-1h2c.6 0 1 .4 1 1v7c0 .6-.4 1-1 1zM19 13h-2c-.6 0-1-.4-1-1V5c0-.6.4-1 1-1h2c.6 0 1 .4 1 1v7c0 .6-.4 1-1 1z\"/></symbol><symbol id=\"dx-dashboard-chart-series-spline-area\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M12 8.9c-4.8 6.8-8 0-8 0v8c0 .6.4 1 1 1h14c.6 0 1-.5 1-1v-8s-3.3-6.6-8 0z\"/></symbol><symbol id=\"dx-dashboard-chart-series-spline\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M8.2 16h-.3C5.5 16 4 12.5 4 12.4l1.5-.8c.3.6 1.2 2.4 2.4 2.4 1.5 0 2.4-1.2 3.3-2.5C12.9 9 14.2 8 16 8c2.5 0 3.9 3.4 4 3.5l-1.6.9c-.3-.6-.8-2.4-2.4-2.4-1.8 0-2.5 1.3-3.3 2.5-1.4 2.1-3 3.5-4.5 3.5z\"/></symbol><symbol id=\"dx-dashboard-chart-series-stacked-area\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M9 10l-5 5v4c0 .6.4 1 1 1h14c.6 0 1-.4 1-1V9l-6 6-5-5z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M14 10L9 5l-5 5v6l5-5 5 5 6-6V4z\"/></symbol><symbol id=\"dx-dashboard-chart-series-stacked-bar\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M14 15h-4V9c0-.6.4-1 1-1h2c.6 0 1 .4 1 1v6zM8 17H4v-3c0-.6.4-1 1-1h2c.6 0 1 .4 1 1v3zM20 12h-4V5c0-.6.4-1 1-1h2c.6 0 1 .4 1 1v7z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M13 20h-2c-.6 0-1-.4-1-1v-5h4v5c0 .6-.4 1-1 1zM19 20h-2c-.6 0-1-.4-1-1v-8h4v8c0 .6-.4 1-1 1zM7 20H5c-.6 0-1-.4-1-1v-3h4v3c0 .6-.4 1-1 1z\"/></symbol><symbol id=\"dx-dashboard-chart-series-stacked-line\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M11 10l-6 6v3l6-6 6 6 2-2v-3l-2 2z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M15 9l-4-4-6 6v3l6-6 4 4 4-4V5z\"/></symbol><symbol id=\"dx-dashboard-chart-series-stacked-spline-area\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M12 6.9c-4.8 6.8-8 0-8 0V14s3.2 6.4 8 0c4.7-6.3 8 0 8 0V6.9s-3.3-6.6-8 0z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M12 13c-4.7 6.5-8 0-8 0v6c0 .6.4 1 1 1h14c.6 0 1-.4 1-1v-6s-3.3-6.6-8 0z\"/><g><path class=\"dx-dashboard-accent-icon\" d=\"M12 6.9c-4.8 6.8-8 0-8 0V14s3.2 6.4 8 0c4.7-6.3 8 0 8 0V6.9s-3.3-6.6-8 0z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M12 13c-4.7 6.5-8 0-8 0v6c0 .6.4 1 1 1h14c.6 0 1-.4 1-1v-6s-3.3-6.6-8 0z\"/></g></symbol><symbol id=\"dx-dashboard-chart-series-step-area\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M5 20h14c.6 0 1-.4 1-1V9h-4V4h-4v11H8v-3H4v7c0 .6.4 1 1 1z\"/></symbol><symbol id=\"dx-dashboard-chart-series-step-line\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M12 4v14H8v-4H4v2h2v4h8V6h4v9h2V4z\"/></symbol><symbol id=\"dx-dashboard-chart-series-stock\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-accent-icon\" d=\"M10 7H8v3H6v2h2v8h2v-3h2v-2h-2z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M16 14V4h-4v2h2v10h4v-2z\"/></symbol><symbol id=\"dx-dashboard-chart-series-weighted\" viewBox=\"0 0 24 24\"><circle class=\"dx-dashboard-contrast-icon\" cx=\"7\" cy=\"17\" r=\"2\"/><circle class=\"dx-dashboard-contrast-icon\" cx=\"12\" cy=\"9\" r=\"4\"/><circle class=\"dx-dashboard-contrast-icon\" cx=\"16.5\" cy=\"15.5\" r=\"2.5\"/></symbol><symbol id=\"dx-dashboard-gauge-circular-full\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-accent-icon\" d=\"M12 4c-4.4 0-8 3.6-8 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8zm0 14c-3.3 0-6-2.7-6-6s2.7-6 6-6 6 2.7 6 6-2.7 6-6 6z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M12 4c-4.4 0-8 3.6-8 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8zm0 14c-3.3 0-6-2.7-6-6s2.7-6 6-6 6 2.7 6 6-2.7 6-6 6z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M12 10c-.3 0-.6.1-.8.2L5 4 4 5l6.2 6.2c-.1.2-.2.5-.2.8 0 1.1.9 2 2 2s2-.9 2-2-.9-2-2-2z\"/></symbol><symbol id=\"dx-dashboard-gauge-circular-half\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-accent-icon\" d=\"M12 9c3.3 0 6 2.7 6 6h2c0-4.4-3.6-8-8-8s-8 3.6-8 8h2c0-3.3 2.7-6 6-6z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M12 9c3.3 0 6 2.7 6 6h2c0-4.4-3.6-8-8-8s-8 3.6-8 8h2c0-3.3 2.7-6 6-6z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M12 13c-.3 0-.6.1-.8.2L5 7 4 8l6.2 6.2c-.1.2-.2.5-.2.8 0 1.1.9 2 2 2s2-.9 2-2-.9-2-2-2z\"/></symbol><symbol id=\"dx-dashboard-gauge-circular-left-quarter\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-accent-icon\" d=\"M6 17h2c0-5 4-9 9-9V6C10.9 6 6 10.9 6 17z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M16 14c-.3 0-.6.1-.8.2L8 7 7 8l7.2 7.2c-.1.2-.2.5-.2.8 0 1.1.9 2 2 2s2-.9 2-2-.9-2-2-2z\"/></symbol><symbol id=\"dx-dashboard-gauge-circular-right-quarter\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-accent-icon\" d=\"M18 17h-2c0-5-4-9-9-9V6c6.1 0 11 4.9 11 11z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M8 14c.3 0 .6.1.8.2L16 7l1 1-7.2 7.2c.1.2.2.5.2.8 0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2z\"/></symbol><symbol id=\"dx-dashboard-gauge-circular-three-fourth\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-accent-icon\" d=\"M20 13c0-4.4-3.6-8-8-8s-8 3.6-8 8c0 2.2.9 4.2 2.4 5.6l1.4-1.4C6.7 16.1 6 14.7 6 13c0-3.3 2.7-6 6-6s6 2.7 6 6c0 1.7-.7 3.1-1.8 4.2l1.4 1.4c1.5-1.4 2.4-3.4 2.4-5.6z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M20 13c0-4.4-3.6-8-8-8s-8 3.6-8 8c0 2.2.9 4.2 2.4 5.6l1.4-1.4C6.7 16.1 6 14.7 6 13c0-3.3 2.7-6 6-6s6 2.7 6 6c0 1.7-.7 3.1-1.8 4.2l1.4 1.4c1.5-1.4 2.4-3.4 2.4-5.6z\"/><path class=\"dx-dashboard-contrast-icon\" d=\"M12 11c-.3 0-.6.1-.8.2L5 5 4 6l6.2 6.2c-.1.2-.2.5-.2.8 0 1.1.9 2 2 2s2-.9 2-2-.9-2-2-2z\"/></symbol><symbol id=\"dx-dashboard-gauge-linear-horizontal\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M4 10h16v4H4z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M4 10h10v4H4z\"/></symbol><symbol id=\"dx-dashboard-gauge-linear-vertical\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M10 4h4v16h-4z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M10 10h4v10h-4z\"/></symbol><symbol id=\"dx-dashboard-grid-column-delta\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M12 4L4 20h16L12 4zm-1 6l4 8H7l4-8z\"/></symbol><symbol id=\"dx-dashboard-grid-column-dimension\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M20 17l-4-3v2H8V8h2L7 4 4 8h2v10h10v2z\"/></symbol><symbol id=\"dx-dashboard-grid-column-hyperlink\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M7.8 15l-.5-2.2H5.2L4.7 15H3l2.3-9h1.9l2.2 9H7.8zM6.4 8.6c0-.2-.1-.5-.1-1v-.2c-.1.6-.2.9-.2 1.1l-.6 2.9H7l-.6-2.8zM10.3 15V6h2.5c1.6 0 2.3.7 2.3 2.1 0 .5-.1.9-.4 1.3-.2.4-.6.6-1 .7.5.1.8.3 1.1.7.3.4.4.9.4 1.4 0 .8-.2 1.5-.6 2-.4.5-1 .7-1.8.7h-2.5zm1.6-7.5v2.2h.7c.3 0 .5-.1.7-.3s.3-.5.3-.8c0-.7-.4-1-1.1-1h-.6zm0 3.6v2.4h.8c.3 0 .6-.1.8-.3s.3-.5.3-.9-.1-.6-.3-.8c-.2-.2-.4-.3-.7-.3h-.9zM21 14.6c-.5.3-1 .4-1.6.4-1 0-1.8-.4-2.4-1.2-.6-.8-.9-1.8-.9-3.1 0-1.5.3-2.7.9-3.5S18.5 6 19.6 6c.5 0 1 .1 1.4.3v1.6c-.4-.3-.8-.5-1.3-.5-.6 0-1 .3-1.4.8-.3.6-.5 1.3-.5 2.3 0 .9.2 1.7.5 2.2.3.5.8.8 1.3.8s.9-.2 1.4-.5v1.6zM3 17h18v1H3z\"/></symbol><symbol id=\"dx-dashboard-grid-column-measure\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M20 5H4l7 7-7 7h16v-2H9l5-5-5-5h11z\"/></symbol><symbol id=\"dx-dashboard-grid-column-sparkline\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M20 7c-1.1 0-2 .9-2 2 0 .3.1.6.2.8l-3.4 3.4c-.2-.1-.5-.2-.8-.2s-.6.1-.8.2l-2.4-2.4c.1-.3.2-.5.2-.8 0-1.1-.9-2-2-2s-2 .9-2 2c0 .3.1.6.2.8l-2.4 2.4c-.2-.1-.5-.2-.8-.2-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2c0-.3-.1-.6-.2-.8l2.4-2.4c.2.1.5.2.8.2s.6-.1.8-.2l2.4 2.4c-.1.2-.2.5-.2.8 0 1.1.9 2 2 2s2-.9 2-2c0-.3-.1-.6-.2-.8l3.4-3.4c.3.1.5.2.8.2 1.1 0 2-.9 2-2s-.9-2-2-2z\"/></symbol><symbol id=\"dx-dashboard-pie-donut\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M8 12c0-2.2 1.8-4 4-4V4c-4.4 0-8 3.6-8 8 0 2.2.9 4.2 2.3 5.7l2.8-2.8C8.4 14.1 8 13.1 8 12z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M12 4v4c2.2 0 4 1.8 4 4s-1.8 4-4 4c-1.1 0-2.1-.4-2.8-1.2l-2.8 2.8C7.8 19.1 9.8 20 12 20c4.4 0 8-3.6 8-8s-3.6-8-8-8z\"/></symbol><symbol id=\"dx-dashboard-pie-pie\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M12 4c-4.4 0-8 3.6-8 8 0 2.2.9 4.2 2.3 5.7L12 12V4z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M12 4v8l-5.7 5.7C7.8 19.1 9.8 20 12 20c4.4 0 8-3.6 8-8s-3.6-8-8-8z\"/></symbol><symbol id=\"dx-dashboard-sparkline-win-loss\" viewBox=\"0 0 24 24\"><path class=\"dx-dashboard-contrast-icon\" d=\"M2 13v-2c0-.6.4-1 1-1h2c.6 0 1 .4 1 1v2c0 .6-.4 1-1 1H3c-.6 0-1-.4-1-1zM7 13v-2c0-.6.4-1 1-1h2c.6 0 1 .4 1 1v2c0 .6-.4 1-1 1H8c-.6 0-1-.4-1-1zM18 13v-2c0-.6.4-1 1-1h2c.6 0 1 .4 1 1v2c0 .6-.4 1-1 1h-2c-.6 0-1-.4-1-1z\"/><path class=\"dx-dashboard-accent-icon\" d=\"M12 13v-2c0-.6.4-1 1-1h3c.6 0 1 .4 1 1v2c0 .6-.4 1-1 1h-3c-.6 0-1-.4-1-1z\"/></symbol></svg>", "HtmlResources": "<script type=\"text/html\" id=\"dx-dashboard-control\">\r\n    <div class=\"dx-dashboard-widget-container dx-dashboard-control dx-dashboard-typography dx-dashboard-theme dx-viewport dx-designer-viewport\" data-bind=\"css: colorSchemeCss\">\r\n\r\n        <!-- ko foreach: externalTemplates -->\r\n            <!-- ko template: $data -->\r\n            <!-- /ko -->\r\n        <!-- /ko -->        \r\n        \r\n        <div class=\"dx-dashboard-surface\" data-bind=\"style: { left: surfaceLeft() + 'px' }\">\r\n            <!-- ko if: isDashboardLoaded()  -->\r\n                <!-- ko template: $data.layoutTemplate() -->\r\n                <!-- /ko -->\r\n            <!-- /ko -->\r\n\r\n            <!-- ko ifnot: isDashboardLoaded()  -->\r\n            <div class=\"dx-dashboard-no-visible-dashboard\">\r\n                <div>\r\n                    <!-- ko if: isLoading() -->\r\n                    <div class=\"dx-dashboard-control-loading\" data-bind=\"text:$root.getLocalizationById('DashboardStringId.MessageLoading')\"></div>\r\n                    <!-- /ko -->\r\n                    <!-- ko ifnot: isLoading() -->\r\n                    <div data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.NoDashboards')\"></div><br />\r\n                        <!-- ko foreach: emptyControlTemplates -->\r\n                            <!-- ko template: $data -->\r\n                            <!-- /ko -->\r\n                        <!-- /ko -->     \r\n                    <!-- /ko -->\r\n                </div>\r\n            </div>\r\n            <!-- /ko -->\r\n        </div>\r\n        <!-- ko template:  { name: \"dx-dashboard-notification-controller\", data: notificationController._viewModel } -->\r\n        <!-- /ko -->\r\n    </div>\r\n</script>\r\n\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-standalone-item\">\r\n    <div class=\"dx-dashboard-standalone-item\" \r\n         data-bind=\"css: {'dx-dashboard-widget-container': isStandalone, 'dx-dashboard-typography': isStandalone  },\r\n         dx-dashboard-item-binding: { \r\n              dashboardItem: $data.dashboardItem,\r\n              dashboardContext: $data.dashboardContext,\r\n              localContext: $data.localContext,\r\n              sizeController: $data.sizeController \r\n         }\">   \r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-resizable-layout\">\r\n    <!-- ko if: $data -->\r\n    <div class=\"dx-dashboard-viewer-content\">\r\n\r\n        <dashboard-viewer class=\"dx-dashboard-viewer dx-dashboard-container\"\r\n                            data-bind=\"css: { 'dx-dashboard-in-work': itemInteractionInProgress }\"\r\n                            params=\"dashboard: dashboardModel,\r\n                            dataSourceBrowser: dataSourceBrowser,\r\n                            encodeHtml: encodeHtml,\r\n                            titleContext: titleContext,\r\n                            resizeByTimer : resizeByTimer ,\r\n                            layout: rootItem,\r\n                            headerHeight: headerHeight,\r\n                            repaintRequest: repaintRequest,\r\n                            fullscreenItemModel: fullscreenItemModel\r\n                          \"></dashboard-viewer>\r\n    </div>\r\n    <!-- /ko -->\r\n</script>\r\n\r\n\n<script type=\"text/html\" id=\"dx-dashboard-mobile-layout\">\r\n    <!-- ko if: $data -->\r\n    <dashboard-mobile-layout-widget \r\n        params=\"layoutModel: $data\" \r\n        style=\"position: absolute; top: 0; left: 0; bottom: 0; right: 0;\"\r\n        class=\"dx-dashboard-viewer dx-dashboard-container dx-dashboard-mobile-layout-widget\"\r\n                             >\r\n    </dashboard-mobile-layout-widget>\r\n    <!-- /ko -->\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-mobile-layout-widget\">\r\n    <!-- ko template: { name: 'dx-dashboard-mobile-title', data: titleViewModel } -->\r\n    <!-- /ko -->\r\n    <div data-bind=\"dxList: layoutViewModel,\r\n         style: { top: titleViewModel.height() + 'px' }\"\r\n         style=\"position:absolute\"\r\n         class=\"dx-dashboard-mobile-layout dx-dashboard-container\">\r\n        <div data-options=\"dxTemplate:{ name: 'item' }\">\r\n            <!-- ko template: $data -->\r\n            <!-- /ko -->\r\n        </div>\r\n    </div>\r\n    <!-- ko template: { name: 'dx-dashboard-mobile-fullscreen-item', data: fullscreenItemViewModel } -->\r\n    <!-- /ko -->\r\n    <!-- ko template: { name: 'dx-dashboard-mobile-item-master-filters', data: itemMasterFiltersViewModel } -->\r\n    <!-- /ko -->\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-mobile-title\">\r\n    <dashboard-title params='options: options,\r\n                              width: width,\r\n                              height: height,\r\n                              encodeHtml: encodeHtml,\r\n                              className: className'></dashboard-title>\r\n</script>\n<script type=\"text/html\" id=\"dx-dashboard-mobile-fullscreen-item\">\r\n    <div class=\"dx-dashboard-fullscreen-item-popup\" data-bind=\"dxOverlay: {\r\n                shading: false,\r\n                width: width,\r\n                height: height,\r\n                deferRendering: true,\r\n                visible: visible,\r\n                animation: {\r\n                    show: { type: 'slide', duration: 400, from: { position: { my: 'left', at: 'right', of: window } }, to: { position: { my: 'center', at: 'center', of: window } } },\r\n                    hide: { type: 'slide', duration: 400, from: { position: { my: 'center', at: 'center', of: window } }, to: { position: { my: 'left', at: 'right', of: window } } }\r\n                },\r\n                onInitialized: onInitialized,\r\n                onDisposing: onDisposing\r\n            }\">\r\n        <!-- ko if: visible -->\r\n            <!-- ko with: itemViewModel -->\r\n            <dashboard-standalone-item class=\"dx-dashboard-container dx-dashboard-theme\"\r\n                                       style=\"width:100%;height:100%;display:block;\" params='dashboardItem: dashboardItem,\r\n                                           dashboardContext: dashboardContext,\r\n                                           localContext: localContext,\r\n                                           repaintRequest: repaintRequest,\r\n                                           '></dashboard-standalone-item>\r\n            <!-- /ko -->\r\n        <!-- /ko -->\r\n    </div>\r\n</script>\r\n\n<script type=\"text/html\" id=\"dx-dashboard-mobile-layout-item\">\r\n    <div class=\"dx-dashboard-mobile-layout-maximize-icon\" data-bind=\"\r\n                 css: { 'dx-dashboard-mobile-layout-maximize-icon-selected': isReadyForAction() },\r\n                 style: { 'opacity': maximizeIconOpacity()  }\r\n                 \">\r\n        <svg><use xlink:href=\"#dx-dashboard-maximize-item\"></use></svg>\r\n        <div>Maximize</div>\r\n    </div>\r\n    <dashboard-standalone-item data-bind=\"style: { 'transform': 'translateX(' + itemOffsetInPixels() + 'px)'  }\"\r\n                               class=\"dx-dashboard-standalone-item-container dx-state-disabled\"\r\n                               params='dashboardItem: dashboardItem, \r\n                                       dashboardContext: dashboardContext,\r\n                                       localContext: localContext,\r\n                                       repaintRequest: repaintRequest,\r\n                               '></dashboard-standalone-item>\r\n    <div class=\"dx-dashboard-mobile-layout-item-shield\" data-bind=\"\r\n                 dxclick: click,\r\n                 dxpointerdown: selectItem,\r\n                 dxpointerup: unselectItem,\r\n                 dxpointermove: unselectItem\r\n                \r\n                 \"></div>\r\n\r\n    <!--dxswipestart: { execute: swipestart, direction: 'horizontal' },\r\n    dxswipe: { execute: swipeupdate, direction: 'horizontal' },\r\n    dxswipeend: { execute: swipeend, direction: 'horizontal' }-->\r\n    \r\n</script>\r\n\r\n\n<script type=\"text/html\" id=\"dx-dashboard-mobile-item-master-filters\">\r\n    <div class=\"dx-dashboard-master-filters-popup\" data-bind=\"\r\n         dxOverlay: {\r\n                height: masterFiltersPopup.height,\r\n                width: masterFiltersPopup.width,\r\n                closeOnOutsideClick: true,\r\n                visible: masterFiltersPopup.visible,\r\n                onHiding: function() { closeMasterFiltersPopup() },\r\n                position: { my: 'bottom', at: 'bottom', of: window } ,\r\n                animation: {\r\n                    show: { type: 'slide', duration: 250, from: { position: { my: 'top', at: 'bottom', of: window } } },\r\n                    hide: { type: 'slide', duration: 250, to: { position: { my: 'top', at: 'bottom', of: window } } }\r\n                },\r\n                onInitialized: masterFiltersPopup.onInitialized,\r\n                onDisposing: masterFiltersPopup.onDisposing\r\n            }\">\r\n        <div class=\"master-filters-list-container\">\r\n            <div class=\"master-filters-list-spring\" data-bind=\"style: { \r\n                 flex: maximizeFiltersPopup() ? 0 : 1 },\r\n                 dxclick: function() { closeMasterFiltersPopup() }\">\r\n            </div>\r\n            <div class=\"master-filters-list master-filter-popup\" data-bind=\"style: { flex: maximizeFiltersPopup() ? 1 : 0 }\">\r\n                <!-- ko foreach: masterItems-->\r\n                    <div class=\"dx-dashboard-masters-preview-item\" data-bind=\"dxclick: click\">\r\n                        <div class=\"dx-dashboard-masters-preview-item-name\" data-bind=\"text: name\"></div>\r\n                        <div class=\"dx-dashboard-masters-preview-filtervalues\">\r\n                            <!-- ko foreach: filterValues -->\r\n                                <b data-bind=\"text: name\"></b>:<span data-bind=\"text: valuesString\"></span>\r\n                            <!-- /ko -->\r\n                        </div>\r\n                    </div>\r\n                <!-- /ko -->\r\n            </div>\r\n        </div>\r\n        <div class=\"apply-buttons\" style=\"position: absolute; left:0; right:0; bottom: 0px;\">\r\n            <div data-bind=\"dxButton: {\r\n                    text:  $root.getLocalizationById('DashboardStringId.ButtonOK'),\r\n                    onClick: closeMasterFiltersPopup,\r\n                    type: 'default'\r\n                    }\">\r\n            </div>\r\n        </div>\r\n        \r\n    </div>\r\n    <div class=\"dx-dashboard-master-filters-popup\" data-bind=\"dxOverlay: {\r\n                height: masterFilterMaximizedItemPopup.height,\r\n                width: masterFilterMaximizedItemPopup.width,\r\n                closeOnOutsideClick: true,\r\n                onHiding: function() { closeMasterFilterItemPopup() },\r\n                visible: masterFilterMaximizedItemPopup.visible,\r\n                position: { my: 'bottom', at: 'bottom', of: window } ,\r\n                animation: {\r\n                    show: { type: 'slide', duration: 250, from: { position: { my: 'top', at: 'bottom', of: window } } },\r\n                    hide: { type: 'slide', duration: 250, to: { position: { my: 'top', at: 'bottom', of: window } } }\r\n                },\r\n                onInitialized: masterFilterMaximizedItemPopup.onInitialized,\r\n                onDisposing: masterFilterMaximizedItemPopup.onDisposing\r\n            }\">\r\n        <!-- ko with: masterFilterItem -->\r\n            <div class=\"master-filter-popup\" style=\"position: absolute;left:0; right:0; top:0; bottom: 70px;display: block;\">\r\n                <dashboard-standalone-item \r\n                                           class=\"dx-dashboard-standalone-item-container dx-dashboard-container dx-dashboard-theme\"\r\n                                           params='dashboardItem: dashboardItem, \r\n                                                dashboardContext: dashboardContext,\r\n                                                localContext: localContext,\r\n                                                repaintRequest: repaintRequest,\r\n                                           '></dashboard-standalone-item>\r\n            </div>\r\n        <!-- /ko -->\r\n        <div class=\"apply-buttons\"  style=\"position: absolute; left:0; right:0; bottom: 0px;\">\r\n            <div data-bind=\"dxButton: {\r\n                    text: $root.getLocalizationById('DashboardStringId.ButtonOK'),\r\n                    onClick: closeMasterFilterItemPopup,\r\n                    type: 'default'\r\n                    }\">\r\n            </div>\r\n        </div>\r\n    </div>\r\n</script>\r\n\n<script type=\"text/html\" id=\"dx-dashboard-notification-controller\">\r\n    <div data-bind=\"dxToast: {\r\n            type: 'custom',\r\n            visible: visible() && !suspended(),\r\n            width: 'auto',\r\n            target: $root.getWidgetContainer(), \r\n            container: $root.getWidgetContainer(),\r\n            position: { \r\n                my: 'bottom right', \r\n                at: 'bottom right', \r\n                offset: '0 0',\r\n                boundary: $root.getWidgetContainer(),\r\n                of: $root.getWidgetContainer()\r\n            },\r\n            displayTime: displayTime,\r\n            closeOnClick: true,\r\n            closeOnSwipe: false,\r\n            onInitialized: onInitialized\r\n        }\">\r\n        <div class=\"dx-dashboard-notificator\" data-bind=\"foreach: notifications,\r\n                css: {  'dx-dashboard-error': type() === 'error', 'dx-dashboard-success': type() === 'success', 'dx-dashboard-info': type() === 'info'}\r\n                 \">\r\n            <h1 data-bind=\"text: title\"></h1>\r\n            <!-- ko if: detail !== null -->\r\n            <span data-bind=\"text: detail\"></span>\r\n            <!-- /ko -->\r\n        </div>\r\n    </div>\r\n</script>\n<script type=\"text/html\" id=\"dx-dashboard-empty-item-templates\">\r\n    <!-- ko foreach: $data -->\r\n        <!-- ko template: $data -->\r\n        <!-- /ko -->\r\n    <!-- /ko -->\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-item\">\r\n    <div class=\"dx-layout-item-container\" data-bind=\"dx-dashboard-item-binding: { \r\n          dashboardItem: $data.viewModel.model.item,\r\n          dashboardContext: $data.getContext(),\r\n          localContext: $data.getLocalContext(),\r\n          sizeController: $data.sizeController }, \r\n         css: { \r\n             'dx-layout-item-selected': isSelected\r\n          }\">        \r\n    </div>\r\n\r\n    <!-- ko if: isDesignMode -->\r\n    <div class=\"dx-layout-item-cover dx-layout-float-cover\" data-bind=\"dxclick: coverClickHandler, event: { mouseover: coverMouseOverHandler }, css: itemStyle\"></div>\r\n    <!-- ko if: isSelected -->\r\n    <div data-bind=\"service: { name: 'contextMenu' }\"></div>\r\n    <!-- /ko -->\r\n    <!-- /ko -->\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-item-state-loading\">\r\n    <div class=\"dx-dashboard-layout-state dx-layout-item-loading\">\r\n        <div class=\"dx-dashboard-control-loading\" data-bind=\"text:$root.getLocalizationById('DashboardStringId.MessageLoading')\"></div>\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-item-state-empty\">\r\n    <div class=\"dx-dashboard-layout-state dx-dashboard-layout-state-empty dx-layout-item-empty\" data-bind=\"class: sizeClass\">\r\n        <!-- ko if: $data -->\r\n        <svg class=\"dx-dashboard-item-type-icon\"><use data-bind=\"xlinkHref: icon\"></use></svg>\r\n        <div class=\"dx-dashboard-item-type-title\" data-bind=\"text: title\"></div>\r\n        <!-- /ko -->\r\n        <div class=\"dx-dashboard-layout-state-content\">\r\n            <div  data-bind=\"service: { name: 'emptyItemTemplatesService' }\"></div>\r\n        </div>\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-item-state-error\">\r\n    <div class=\"dx-dashboard-layout-state dx-dashboard-layout-state-error dx-layout-item-empty\" data-bind=\"class: sizeClass\">\r\n        <!-- ko if: $data -->\r\n        <svg class=\"dx-dashboard-item-type-icon\"><use data-bind=\"xlinkHref: icon\"></use></svg>\r\n        <div class=\"dx-dashboard-item-type-title\" data-bind=\"text: title\"></div>\r\n        <!-- /ko -->\r\n        <div class=\"dx-dashboard-layout-state-content dx-dashboard-layout-text\">\r\n            <p data-bind=\"text: errorState().title\"></p>\r\n            <p data-bind=\"text: errorState().detail\"></p>\r\n        </div>\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-group\">\r\n    <dx-dashboard-layout-group params=\"layoutItem: $data\"></dx-dashboard-layout-group>\r\n</script>\r\n<script type=\"text/html\" id=\"dx-dashboard-tab-container\">\r\n    <dx-dashboard-layout-tab-container params=\"layoutItem: $data\"></dx-dashboard-layout-tab-container>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-layout-tab-container\">\r\n    <!-- ko with: layoutItem -->\r\n        <dashboard-layout-tabs params=\"layoutItem: $data,\r\n                               headerHeight: $parent.headerHeight\" class=\"dx-layout-item-container dx-dashboard-item-container dx-dashboard-tabs-container\">\r\n        </dashboard-layout-tabs>\r\n        <!-- ko if: isDesignMode -->\r\n            <div class=\"dx-layout-item-cover\" data-bind=\"\r\n                    dxclick: coverClickHandler,\r\n                    event: { mouseover: coverMouseOverHandler },\r\n                    css: itemStyle\">\r\n            </div>\r\n        <!-- /ko -->\r\n\r\n        <!-- ko if: $parent.activeItems().length !== 0 -->\r\n              <!-- ko if: $parent.activeItems()[0].items().length !== 0 -->\r\n                  <div data-bind=\"style: { top: $parent.headerHeight() + 'px', padding: $parent.padding() + 'px' }\" \r\n                       style=\"position: absolute; top: 0; bottom: 0;\" \r\n                       class=\"dx-dashboard-tabs-content\">\r\n                        <!-- ko template: 'dx-layout-group-container' -->\r\n                        <!-- /ko -->\r\n                    </div>\r\n                <!-- /ko -->\r\n                <!-- ko if: $parent.activeItems()[0].items().length === 0 && isDesignMode() -->\r\n                    <div class=\"dx-layout-item-cover\" data-bind=\"\r\n                        dxclick: coverClickHandler,\r\n                        event: { mouseover: coverMouseOverHandler },\r\n                        css: itemStyle\">\r\n                            <div data-bind=\"style: { top: $parent.headerHeight() + 'px', padding: $parent.padding() + 'px' }\" \r\n                                 style=\"position: absolute; top: 0; right:0; left: 0; bottom: 0;\" >\r\n                                    <!-- ko with:  $parent.activeItems()[0].getPlaceholder() -->\r\n                                    <!-- ko template: viewModel.template -->\r\n                                    <!-- /ko -->\r\n                                    <!-- /ko -->\r\n                            </div>\r\n                    </div>\r\n                <!-- /ko -->\r\n        <!-- /ko -->\r\n        <!-- ko if: $parent.activeItems().length === 0 && isDesignMode() -->\r\n            <div>\r\n            </div>\r\n        <!-- /ko -->\r\n        <!-- ko if: isSelected -->\r\n            <div data-bind=\"service: { name: 'contextMenu' }\"></div>\r\n        <!-- /ko -->\r\n    <!-- /ko -->\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-layout-tabs\">\r\n    <div class=\"dx-dashboard-layout-tabs-container\">\r\n        <div class=\"dx-dashboard-layout-tabs dx-dashboard-stretched\" data-bind=\"dxTabs: {\r\n                items: tabPageBindings,\r\n                itemTemplate: 'dx-dasbhoard-layout-tab-item',\r\n                selectionMode: 'single',\r\n                keyExpr: 'id',\r\n                selectedItemKeys: selectedItemKeys,\r\n                onSelectionChanged: onSelectionChanged,\r\n                hoverStateEnabled: true,\r\n                scrollingEnabled: false,\r\n                focusStateEnabled: false}\">\r\n            <div data-options=\"dxTemplate:{ name:'dx-dasbhoard-layout-tab-item' }\" class='dx-dashboard-tab-content'>\r\n                <div class=\"dx-dashboard-standalone-item\"\r\n                     data-bind=\"dx-dashboard-layout-tab-binding: {\r\n                              dashboardItem: $data.dashboardItem,\r\n                              dashboardContext: $data.context,\r\n                              localContext: $data.localContext,\r\n                              sizeController: $data.sizeController,\r\n                              ignoreBorder: $data.ignoreBorder\r\n                         }\">\r\n                </div>\r\n                <div class=\"dx-dashboard-cover\"></div>\r\n            </div>\r\n        </div>\r\n        <!-- ko if: showMenu() -->\r\n        <div class=\"dx-dashboard-tab-button dx-dashboard-toggle-menu-button\" data-bind=\"click: toggleMenu\">\r\n            <div>\r\n                <svg><use xlink:href=\"#dx-dashboard-open-tab-pages\"></use></svg>\r\n            </div>\r\n        </div>\r\n        <!-- /ko -->\r\n        <!-- ko if: showAddButton() -->\r\n        <div class=\"dx-dashboard-tab-button dx-dashboard-create-tab-page-button\" data-bind=\"click: createTabPage\">\r\n            <div>\r\n                <svg><use xlink:href=\"#dx-dashboard-ce-add\"></use></svg>\r\n            </div>\r\n        </div>\r\n        <!-- /ko -->\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-layout-group\">\r\n    <!-- ko with: layoutItem -->\r\n    <div class=\"dx-layout-item-container\" data-bind=\"dx-dashboard-layout-group-binding: {\r\n             dashboardContext: $data.getContext(),\r\n             localContext: $data.getLocalContext(),\r\n             sizeController: $data.sizeController,\r\n             dashboardItem: $data.viewModel.model.item,\r\n             headerHeight: $parent.headerHeight }\"></div>\r\n    <!-- ko if: isDesignMode -->\r\n    <div class=\"dx-layout-item-cover\" data-bind=\"\r\n             dxclick: coverClickHandler,\r\n             event: { mouseover: coverMouseOverHandler },\r\n             css: itemStyle\">\r\n    </div>\r\n    <!-- /ko -->\r\n    <!-- ko if: items().length !== 0 -->\r\n    <div data-bind=\"style: { top: $parent.headerHeight() + 'px', padding: $parent.padding() + 'px' }\" style=\"position: absolute; bottom: 0;\">\r\n        <!-- ko template: 'dx-layout-group-container' -->\r\n        <!-- /ko -->\r\n    </div>\r\n    <!-- /ko -->\r\n    <!-- ko if: items().length === 0 && isDesignMode() -->\r\n    <div class=\"dx-layout-item-cover\" data-bind=\"\r\n                    dxclick: coverClickHandler,\r\n                    event: { mouseover: coverMouseOverHandler },\r\n                    css: itemStyle\">\r\n        <div data-bind=\"style: { top: $parent.headerHeight() + 'px', padding: $parent.padding() + 'px' }\"\r\n             style=\"position: absolute;\r\n                                bottom: 0;\r\n                                left: 0;\r\n                                right: 0;\r\n                                \">\r\n            <!-- ko with: $data.getPlaceholder() -->\r\n            <!-- ko template: viewModel.template -->\r\n            <!-- /ko -->\r\n            <!-- /ko -->\r\n        </div>\r\n    </div>\r\n    <!-- /ko -->\r\n    <!-- ko if: isSelected -->\r\n    <div data-bind=\"service: { name: 'contextMenu' }\"></div>\r\n    <!-- /ko -->\r\n    <!-- /ko -->\r\n</script>\r\n\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-item-placeholder\">\r\n    <!-- ko if: $parent.isDesignMode() -->\r\n        <div class=\"dx-layout-item-placeholder\" data-bind=\"css: itemStyle\">\r\n            <!-- ko if: !dragOverLocation() -->\r\n                <div data-bind=\"service: { name: 'layoutItemPlaceholderService' }\">\r\n                </div>\r\n            <!-- /ko -->\r\n        </div>\r\n    <!-- /ko -->\r\n</script>\n<script type=\"text/html\" id=\"dx-dashboard-viewer\">\r\n    <!-- ko if: showTitle() -->      \r\n    <dashboard-title style=\"position: absolute; top: 0; \" data-bind=\"style: { height: headerHeight() + 'px', left: left + 'px', right: right + 'px'}\"\r\n                     params='options: toolbarOptions,\r\n                             width: $root.ko.unwrap(layout).width,\r\n                             height: headerHeight,\r\n                             encodeHtml: encodeHtml'></dashboard-title>\r\n    <!-- /ko -->\r\n    <!-- ko with: layout -->\r\n    <dx-layout-item data-bind=\"dx-ko-layout-draggable: { enabled: isDesignMode }, \r\n                    style: { top: $parent.layoutTop() + 'px' },\r\n                    css: { 'dx-state-underlying-selection': $data.areChildrenSelected() }\" \r\n                    class=\"dx-layout-item dx-layout-root\" \r\n                    params='layoutItem: $data' \r\n                    style=\"position: absolute; bottom: 0;\"></dx-layout-item>\r\n    <!-- /ko -->\r\n    <!-- ko if: fullscreenItemModel.visible() -->\r\n        <div class=\"dx-layout-item-wrapper dx-dashboard-fullscreen-item\" style=\"\r\n                    position: absolute; \r\n                    bottom: 0;\r\n                    z-index: 1500;  /*devextreme popup base z-index*/\r\n                    \" \r\n                data-bind=\"style: { \r\n                      top: layoutTop + 'px',\r\n                  }\">\r\n            <div class=\"dx-layout-item-container dx-dashboard-container\"\r\n                 data-bind=\"\r\n                  dx-dashboard-item-binding: {\r\n                      dashboardItem: fullscreenItemModel.viewModel().dashboardItem,\r\n                      dashboardContext: fullscreenItemModel.viewModel().dashboardContext,\r\n                      localContext:  fullscreenItemModel.viewModel().localContext,\r\n                      sizeController: layout.sizeController\r\n                  }\">\r\n            </div>\r\n        </div>\r\n    <!-- /ko -->\r\n</script>\r\n\n<script type=\"text/html\" id=\"dx-dashboard-working-mode-extension\">\r\n    <div class=\"dx-dashboard-panel-extension dx-dashboard-typography\"\r\n         data-bind=\"css: { 'dx-dashboard-card-view-panel': isMobile() },\r\n        dxPopup: {\r\n            target: $root.getWidgetContainer(),\r\n            container: $root.getWidgetContainer(),\r\n            position: {\r\n                my: 'left top',\r\n                at: 'left top',\r\n                collision: 'flipfit',\r\n                boundaryOffset: '0, 0',\r\n                boundary: $root.getWidgetContainer(),\r\n                offset: '0, 0'\r\n            },\r\n            animation: enableAnimation () ? {\r\n                show: { type: 'slide', from: { left: -panelWidth() }, to: { left: 0 }, duration: 500 },\r\n                hide: { type: 'slide', from: { left: 0 }, to: { left: -panelWidth() }, duration: 500 }\r\n            } : null,\r\n            focusStateEnabled: false,\r\n            showCloseButton: isMobile,\r\n            dragEnabled: false,\r\n            width: panelWidth,\r\n            height: '100%',\r\n            shading: false,\r\n             toolbarItems: [{\r\n                text: $root.getLocalizationById('DashboardWebStringId.Dashboards'),\r\n                location: 'before',\r\n                toolbar: 'top',\r\n\r\n             }],\r\n            closeOnOutsideClick: false,\r\n            onInitialized: onPopupInitialized,\r\n            onDisposing: onPopupDisposing,\r\n            onContentReady: function() { enableAnimation(true) },\r\n            visible: visible\r\n    }\">\r\n\r\n        <div class=\"dx-dashboard-dashboard-list dx-dashboard-typography\"\r\n             data-bind=\"dxList: listOptions,\r\n                        css: {\r\n                            'dx-dashboard-dashboard-list-full': !allowSwitchToDesigner(),\r\n                            'dx-dashboard-dashboard-list-clipped': allowSwitchToDesigner()\r\n                        }\">\r\n            <div data-options=\"dxTemplate:{ name: 'dashboard-card-view' }\">\r\n                <div class=\"dx-dashboard-card-view\">\r\n                    <div class='dx-dashboard-card-name' data-bind=\"text: name\"></div>\r\n                </div>\r\n            </div>\r\n            <div data-options=\"dxTemplate:{ name: 'dashboard-preview' }\">\r\n                <div class=\"dx-dashboard-preview\" data-bind=\"css: { 'dx-dashboard-minimized': hidden }\">\r\n                    <div class='dx-dashboard-image-container' data-bind=\"css: { 'dx-dashboard-hidden': hidden }\">\r\n                        <img class=\"dx-dashboard-image\" data-bind=\"attr: {\r\n                             src: imageUrl, alt: name },\r\n                             event: { error: hide }\" />\r\n                    </div>\r\n                    <div class=\"dx-dashboard-name-container\">\r\n                        <div class='dx-dashboard-name' data-bind=\"text: name\"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div data-options=\"dxTemplate:{ name: 'dashboard-list-item' }\">\r\n                <div data-bind=\"text: name\"></div>\r\n            </div>\r\n        </div>\r\n        <!-- ko if: allowSwitchToDesigner -->\r\n        <!-- ko template: 'dx-dashboard-working-mode-extension-designer-button' -->\r\n        <!-- /ko -->\r\n        <!-- /ko -->\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-working-mode-extension-designer-button-icon\">\r\n    <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\r\n         viewBox=\"0 0 32 32\" style=\"enable-background:new 0 0 32 32;\" xml:space=\"preserve\">\r\n        <style type=\"text/css\">\r\n            .editDashboardIcon {\r\n                fill: #FFFFFF;\r\n            }\r\n        </style>\r\n        <g>\r\n        <path class=\"editDashboardIcon\" d=\"M25.5,5.5C23.3,3.3,20.3,2,17,2C10.5,2,5.3,7.1,5,13.5C6,13.2,7,13,8,13c5,0,9,4,9,9c0,1.4-0.3,2.8-0.9,4\r\n\t\t                                c0.3,0,0.6,0,0.9,0c6.6,0,12-5.4,12-12H17L25.5,5.5z\" />\r\n        <path class=\"editDashboardIcon\" d=\"M32,13c0-3.3-1.3-6.3-3.5-8.5L20,13H32z\" />\r\n        <path class=\"editDashboardIcon\" d=\"M8,14c-4.4,0-8,3.6-8,8s3.6,8,8,8s8-3.6,8-8S12.4,14,8,14z M13.7,24H9.3l1.7-5l-4.2,5H2.3\r\n\t\t                                C2.1,23.4,2,22.7,2,22c0-3.3,2.7-6,6-6s6,2.7,6,6C14,22.7,13.9,23.4,13.7,24z\" />\r\n        </g>\r\n    </svg>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-working-mode-extension-designer-button\">\r\n    <div class=\"dx-dashboard-edit-in-designer-button\" data-bind=\"dxButton: { onClick: switchToDesigner, type: 'default', template: 'template' }\">\r\n        <div data-options=\"dxTemplate: { name: 'template' }\" class=\"designer-button-content\">\r\n            <div>\r\n                <!-- ko template: 'dx-dashboard-working-mode-extension-designer-button-icon' -->\r\n                <!-- /ko -->\r\n                <br />\r\n                <span data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.EditInDesigner')\"></span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-working-mode-extension-viewer-button\">\r\n    <div class=\"dx-dashboard-viewer-button\" data-bind=\"dxButton: { onClick: click, type: 'default', text: $root.getLocalizationById('DashboardWebStringId.Viewer') }\">\r\n    </div>\r\n</script>\r\n\r\n\n<script type=\"text/html\" id=\"dx-dashboard-data-inspector-extension\">\r\n    <div class=\"dx-dashboard-data-inspector-dialog\" data-bind=\"dxPopup: {\r\n             target: $root.getWidgetContainer(),\r\n             container: $root.getWidgetContainer(),\r\n             title: title,\r\n             onShowing: options.onDialogShowing,\r\n             onShown: options.onDialogShown,\r\n             onHidden: options.onDialogHidden,\r\n             visible: visible,\r\n             fullScreen: isMobile,\r\n             toolbarItems: [{\r\n                toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {\r\n                    text: $root.getLocalizationById('DashboardStringId.CloseCaption'),\r\n                    onClick: function() { visible(false) },\r\n                }\r\n                }]\r\n             }\">\r\n        <!-- ko if: allowSwitchInspectedDataType -->\r\n        <div class=\"dx-dashboard-inspected-data-type-chooser\">\r\n\r\n            <span class=\"dx-dashboard-inspected-data-type-text\" data-bind=\"text: $root.getLocalizationById('DashboardStringId.InspectedData')\"></span>\r\n            <div class=\"dx-dashboard-inspected-data-radio-group\" data-bind=\"dxRadioGroup: {\r\n                 layout: 'horizontal',\r\n                 displayExpr: 'text',\r\n                 valueExpr: 'value',\r\n                 dataSource: avaliableInspectedDataType,\r\n                 value: inspectedDataType\r\n                 }\">\r\n            </div>\r\n        </div>\r\n        <!-- /ko -->\r\n        <!-- ko with: gridOptions -->\r\n        <div class=\"dx-dashboard-data-inspector-grid\" data-bind=\"dxDataGrid: $data\"></div>\r\n        <!-- /ko -->\r\n    </div>\r\n</script>\n<script type=\"text/html\" id=\"dx-layout-item\">\r\n    <!-- ko with: layoutItem -->\r\n    <div class=\"dx-layout-item-wrapper\" data-bind=\"dx-ko-resizable: $data, visible: visible\">\r\n        <!-- ko if: viewModel.hasItem() -->\r\n            <!-- ko template: viewModel.template || 'dx-layout-item-container' -->\r\n            <!-- /ko -->\r\n        <!-- /ko -->\r\n        <!-- ko ifnot: viewModel.hasItem() -->\r\n            <!-- ko template: 'dx-layout-group-container' -->\r\n            <!-- /ko -->\r\n        <!-- /ko -->\r\n    </div>\r\n    <!-- /ko -->\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-layout-item-container\">\r\n    <div class=\"dx-layout-item-container\" data-bind=\"style: { width: containerWidth() + 'px', height: containerHeight() + 'px' }\"></div>\r\n    <!-- ko if: isDesignMode -->\r\n    <div class=\"dx-layout-item-cover\" data-bind=\"dxclick: coverClickHandler, css: itemStyle\" draggable=\"true\"></div>\r\n    <div class=\"dx-layout-item-plate\" data-bind=\"visible: isSelected\" draggable=\"true\"></div>\r\n    <!-- /ko -->\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-layout-group-container\">\r\n    <div class=\"dx-layout\">\r\n        <!-- ko if: viewModel.orientation() === 'Horizontal' -->\r\n        <div class=\"dx-layout-group\">\r\n            <!-- ko foreach: items -->\r\n            <dx-layout-item class=\"dx-layout-item\" params=\"layoutItem: $data\"></dx-layout-item>\r\n            <!-- /ko -->\r\n        </div>\r\n        <!-- /ko -->\r\n        <!-- ko if: viewModel.orientation() === 'Vertical' -->\r\n        <!-- ko foreach: items -->\r\n        <div class=\"dx-layout-group\">\r\n            <dx-layout-item class=\"dx-layout-item\" params=\"layoutItem: $data\"></dx-layout-item>\r\n        </div>\r\n        <!-- /ko -->\r\n        <!-- /ko -->\r\n        <!-- ko if: items().length === 0 && !!$data.getPlaceholder -->\r\n        <div data-bind=\"style: { width: containerWidth() + 'px', height: containerHeight() + 'px' }\">\r\n            <!-- ko with: $data.getPlaceholder() -->\r\n            <!-- ko template: viewModel.template -->\r\n            <!-- /ko -->\r\n            <!-- /ko -->\r\n        </div>\r\n        <!-- /ko -->\r\n    </div>\r\n</script>\r\n\n\r\n<script type=\"text/html\" id=\"dx-dashboard-button-group-template\"> \r\n    <div data-bind=\"dxButtonGroup: $data\"></div>\r\n</script>\n<script id=\"dx-dashboard-calc-field-editor\" type=\"text/html\">\r\n    <!-- ko with: viewModel -->\r\n        <div class=\"dx-dashboard-calc-field-editor-popup dx-dashboard-popup\" data-bind=\"dxPopup: {\r\n                target: $root.getWidgetContainer(),\r\n                container: $root.getWidgetContainer(),\r\n                position: {\r\n                    my: 'center',\r\n                    at: 'center'\r\n                },\r\n                width: '687px',\r\n                animation: { },\r\n                focusStateEnabled: true,\r\n                closeOnOutsideClick: false,\r\n                toolbarItems: toolbarItems,\r\n                visible: popupVisible,\r\n                showTitle: true,\r\n                closeOnTargetScroll: false,\r\n                title: $root.getLocalizationById('DashboardWebStringId.DataSources.EditCalculatedField')\r\n            }\">\r\n            <div class=\"dx-dashboard-calc-field-dialog\" data-bind=\"dxScrollView: { direction: 'vertical' }\">\r\n                <div class=\"dx-fieldset\">\r\n                    <div class=\"dx-field\">\r\n                        <div class=\"dx-field-label\" data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.DataSources.CalculatedField.Name')\"></div>\r\n                        <div class=\"dx-field-value\">\r\n                            <div data-bind=\"dxTextBox: { value: name }, dxValidator: { isValid: isCalcFieldNameValid, validationRules: nameValidationRules }\"></div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"dx-field\">\r\n                        <div class=\"dx-field-label\" data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.DataSources.CalculatedField.FieldType')\"></div>\r\n                        <div class=\"dx-field-value\">\r\n                            <div data-bind=\"dxSelectBox: { \r\n                                 items: availableTypes, \r\n                                 value: fieldType, \r\n                                 editEnabled: false,\r\n                                 dropDownOptions: {\r\n                                    container: $root.getWidgetContainer()\r\n                                 }\r\n                             }\"></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"dx-dashboard-calc-field-expression\" data-bind=\"css: { 'dx-invalid': !expressionEditable.isValid() }\">\r\n                    <div class=\"dx-designer dx-expressioneditor\" style=\"height: 100%;\" data-bind=\"dshdExpressionEditor: { options: expressionEditable, fieldListProvider: expressionEditable.itemsProvider }\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    <!-- /ko -->\r\n</script>\n<script type=\"text/html\" id='dx-dashboard-calculation-expression-editor'>\r\n    <!-- ko with: editor -->\r\n    <div class=\"dx-designer dx-expressioneditor dx-popup-general\" data-bind=\"dxPopup: {\r\n            showTitle: true,\r\n            title: $root.getLocalizationById('AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption'),\r\n            visible: popupVisible,\r\n            toolbarItems: buttonItems,\r\n            showCloseButton: true,\r\n            fullScreen: false,\r\n            height: '95%',\r\n            width: '645px',\r\n            container: $root.getWidgetContainer(),\r\n            position: { of: $root.getWidgetContainer() }\r\n        }\">\r\n        <div data-bind=\"dxScrollView: { direction: 'vertical', height: '100%' }\">\r\n        <!-- ko template: \"dx-expressioneditor-main\" -->\r\n        <!-- /ko -->\r\n        </div>\r\n    </div>\r\n    <!-- /ko -->\r\n    <div class=\"dx-dashboard-calculation-expression-editor\">\r\n        <div class=\"dx-dashboard-calculation-expression-area\">\r\n            <div class=\"dx-dashboard-calculation-expression-edit-button\" data-bind=\"click: show\">\r\n                <svg><use xlink:href=\"#dx-dashboard-ce-edit\" /></svg>\r\n            </div>\r\n            <div class=\"dx-dashboard-calculation-expression-edit-criteria\">\r\n                <div data-bind=\"text: criteriaString\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</script>\n<script type=\"text/html\" id='dx-dashboard-window-definition-editor'>\r\n    <div class=\"dx-dashboard-window-definition-editor\">\r\n        <dx-dashboard-button-group class=\"dx-dashboard-window-definition-selector\" params=\"value: mode, values: dataSource\"></dx-dashboard-button-group>\r\n        <!-- ko with: formAdapterWrapper -->\r\n        <div data-bind=\"dx-dashboard-form-adapter: { target: $data }\" class=\"dx-dashboard-properties\"></div>\r\n        <!-- /ko -->\r\n    </div>\r\n</script>\r\n\n<script type=\"text/html\" id=\"dx-dashboard-form-color-scheme\">\r\n    <div class=\"dx-dashboard-form-column dx-dashboard-form-left-column dx-dashboard-color-scheme-editor-form\">\r\n        <div class=\"dx-dashboard-form-column-content-wrapper dx-dashboard-coloring-form-color-tables-panel\">\r\n            <!-- ko with: colorSchemeModel -->\r\n                <div class=\"dx-dashboard-form-row-caption\">\r\n                    <span data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.Colorization.ColorSchemes')\"></span>\r\n                </div>\r\n                <!-- ko if: editableSignatures().length > 0 -->\r\n                <div class=\"dx-dashboard-list dx-dashboard-form-row-content\">\r\n                    <div class=\"dx-dashboard-color-tables-list\" data-bind=\"dxList: {\r\n                         dataSource: editableSignatures,\r\n                         selectedItems: selectedSignatures,\r\n                         selectionMode: 'single',\r\n                         keyExpr: 'key',\r\n                         nextButtonText: $root.getLocalizationById('DashboardWebStringId.More')\r\n                         }\">\r\n                        <div class=\"dx-dashboard-color-table-item\">\r\n                            <div class=\"dx-dashboard-color-table-item-description\">\r\n                                <div>\r\n                                    <!-- ko foreach: dataItems -->\r\n                                    <div class=\"dx-dashboard-color-definition-tree\" data-bind=\"style: { 'margin-left': ($index() > 1 ? ($index() -1) * 21 : 0).toString() + 'px' }\">\r\n                                        <!-- ko if: $index() > 0 -->\r\n                                        <svg><use xlink:href=\"#dx-dashboard-tree-connector\" /></svg>\r\n                                        <!-- /ko -->\r\n                                        <span data-bind=\"text: $data, attr: { title: $data }\"></span>\r\n                                    </div>\r\n                                    <!-- /ko -->\r\n                                    <br />\r\n\r\n                                    <span class=\"dx-dashboard-definition-caption\">\r\n                                        <span data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.Colorization.ColorSchemeType')\"></span>:&nbsp;\r\n                                    </span>\r\n                                    <span data-bind=\"text: typeText, attr: {title: typeText}\"></span>\r\n                                    <br />\r\n\r\n                                    <span class=\"dx-dashboard-definition-caption\">\r\n                                        <span data-bind=\"text: $root.getLocalizationById('DashboardStringId.DefaultDataSourceName')\"></span>:&nbsp;\r\n                                    </span>\r\n                                    <span data-bind=\"text: dataSourceText, attr: {title: dataSourceText}\"></span>\r\n                                </div>\r\n                            </div>\r\n                            <!-- ko if: !$parent.isSignatureAutogenerated($data) -->\r\n                            <div class=\"dx-dashboard-remove-icon\" data-bind=\"click: $parent.removeTable\">\r\n                                <svg><use xlink:href=\"#dx-dashboard-remove-small\" /></svg>\r\n                            </div>\r\n                            <!-- /ko -->\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <!-- /ko -->\r\n                <!-- ko ifnot: editableSignatures().length > 0 -->\r\n                <div class=\"dx-dashboard-form-row-content\">\r\n                    <div class=\"dx-dashboard-form-parameter-placeholder\">\r\n                        <div>\r\n                            <span data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.ColorScheme.Empty')\"></span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <!-- /ko -->\r\n            <!-- /ko -->\r\n        </div>\r\n    </div>\r\n    <div class=\"dx-dashboard-form-column dx-dashboard-form-right-column dx-dashboard-color-scheme-editor-form\">\r\n        <div class=\"dx-dashboard-form-column-content-holder\">\r\n            <div class=\"dx-dashboard-form-column-content-wrapper\">\r\n                <!-- ko if: colorSchemeModel().selectedSignatureEntries().length > 0 -->\r\n                <div class=\"dx-dashboard-form-row-content\">\r\n                    <div data-bind=\"template: { name :'dx-dashboard-edit-color-scheme' }\" class=\"dx-dashboard-color-scheme-editor\"></div>\r\n                </div>\r\n                <!-- /ko -->\r\n                <!-- ko ifnot: colorSchemeModel().selectedSignatureEntries().length > 0 -->\r\n                <div class=\"dx-dashboard-form-row-content\">\r\n                    <div class=\"dx-dashboard-form-parameter-placeholder\">\r\n                        <div data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.Colorization.NoSelectedSchema')\"></div>\r\n                    </div>\r\n                </div>\r\n                <!-- /ko -->\r\n            </div>\r\n        </div>\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id='dx-dashboard-edit-color-scheme'>\r\n    <div class=\"dx-dashboard-form-column dx-dashboard-form-left-column dx-dashboard-color-scheme-editor-form\">\r\n        <div class=\"dx-dashboard-coloring-form-colors-panel\">\r\n            <dx-dashboard-colors-component params=\"dataSource: colorSchemeModel().selectedSignatureEntries, allowModify: true, selectedEntry: selectedEntry, addNewEntry: createNewEntry, removeEntry: colorSchemeModel().removeEntry, colorPalette: colorPalette\"></dx-dashboard-colors-component>\r\n        </div>\r\n    </div>\r\n    <div class=\"dx-dashboard-form-column dx-dashboard-form-right-column\">\r\n        <div class=\"dx-dashboard-form-column-content-holder\">\r\n            <div class=\"dx-dashboard-form-column-content-wrapper dx-dashboard-properties\">\r\n                <div class=\"dx-dashboard-form-row-content\">\r\n                    <div class=\"dx-dashboard-edit-color-entry-panel\">\r\n                        <!-- ko if: entryEditorModel.visible -->\r\n                        <!-- ko with: entryEditorModel -->\r\n                        <!-- ko template: 'dx-dashboard-enter-new-entry-editor' -->\r\n                        <!-- /ko -->\r\n                        <div class=\"dx-dashboard-coloring-form-colorbox-panel\">\r\n                            <div class=\"dx-dashboard-coloring-form-panel-header\">\r\n                                <span data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.ColorScheme.Color')\"></span>\r\n                            </div>\r\n                            <div data-bind=\"dxColorBox: {\r\n                                value: color,\r\n                                editAlphaChannel: $root.ko.observable(false),\r\n                                dropDownOptions: {\r\n                                    container: $root.getWidgetContainer()\r\n                                }\r\n                                }\">\r\n                            </div>\r\n                        </div>\r\n                        <!-- /ko -->\r\n                        <!-- /ko -->\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-color-picker-editor\">\r\n    <div data-bind=\"dxPopover: {\r\n        target: target,\r\n        container: $root.getWidgetContainer(),\r\n        toolbarItems: buttonItems,\r\n        visible: visible\r\n       }\">\r\n        <div data-bind=\"dxColorView: {\r\n             value: colorCss,\r\n             editAlphaChannel: $root.ko.observable(false),\r\n             applyValueMode: 'instantly'\r\n             }\">\r\n        </div>\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-enter-new-entry-editor\">\r\n    <div class=\"dx-dashboard-new-entry-panel\">\r\n        <!-- ko foreach: dimensionEditors || [] -->\r\n        <div class=\"dx-dashboard-new-entry-item\">\r\n            <div class=\"dx-dashboard-coloring-form-panel-header\" data-bind=\"text: dimensionKey.definition.dataMember\"></div>\r\n            <!-- ko if: [\"Integer\", \"Float\", \"Double\", \"Decimal\"].indexOf(valueType) > -1 -->\r\n            <div data-bind=\"dxNumberBox: {\r\n                        height: 40,\r\n                        showSpinButtons:true,\r\n                        disabled: $parent.isAutogenerated,\r\n                        value: dimensionKey.value.value\r\n                     },\r\n                     dxValidator: {\r\n                        validationGroup: 'newEntry',\r\n                        name: dimensionKey.definition.dataMember(),\r\n                        validationRules: [{ type: 'required' } ]\r\n                     }\">\r\n            </div>\r\n            <!-- /ko -->\r\n            <!-- ko if: [\"DateTime\"].indexOf(valueType) > -1 -->\r\n            <div data-bind=\"dxDateBox: {\r\n                        height: 40,\r\n                        width: 'auto',\r\n                        disabled: $parent.isAutogenerated,\r\n                        value: dimensionKey.value.value,\r\n                        dropDownOptions: {\r\n                            container: $root.getWidgetContainer()\r\n                        }\r\n                     },    \r\n                     dxValidator: {\r\n                        validationGroup: 'newEntry',\r\n                        name: dimensionKey.definition.dataMember(),\r\n                        validationRules: [{ type: 'required' } ]\r\n                     }\">\r\n            </div>\r\n            <!-- /ko -->\r\n            <!-- ko if: [\"Bool\",\"Boolean\"].indexOf(valueType) > -1 -->\r\n            <div data-bind=\"dxCheckBox: {\r\n                        height: 40,\r\n                        disabled: $parent.isAutogenerated,\r\n                        value: dimensionKey.value.value\r\n                     }\">\r\n            </div>\r\n            <!-- /ko -->\r\n            <!-- ko ifnot: [\"Integer\", \"Float\", \"Double\", \"Decimal\", \"DateTime\", \"Bool\", \"Boolean\"].indexOf(valueType) > -1 -->\r\n            <div data-bind=\"dxTextBox: {\r\n                            height: 40,\r\n                            disabled: $parent.isAutogenerated,\r\n                            value: dimensionKey.value.value\r\n                            },\r\n                            dxValidator: {\r\n                            validationGroup: 'newEntry',\r\n                            name: dimensionKey.definition.dataMember(),\r\n                            validationRules: [{ type: 'required' } ]\r\n                            }\">\r\n            </div>\r\n            <!-- /ko -->\r\n        </div>\r\n        <!-- /ko -->\r\n        <!-- ko if: hasMeasures -->\r\n        <div class=\"dx-dashboard-color-entry-measures-selector\">\r\n            <div class=\"dx-dashboard-coloring-form-panel-header\" data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.Colorization.MeasureNames')\"></div>\r\n            <div data-bind=\"dxTagBox: {\r\n                    dataSource: availableMeasures,\r\n                    value: selectedMeasuresIds,\r\n                    disabled: isAutogenerated,\r\n                    displayExpr: 'displayText',\r\n                    valueExpr: '_id',\r\n                 }, dxValidator: {\r\n                    validationGroup: 'newEntry',\r\n                    validationRules: measuresValidationRules || []\r\n                 }\">\r\n            </div>\r\n        </div>\r\n        <!-- /ko -->\r\n    </div>\r\n</script>\r\n\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-colors-view\">\r\n    <!-- ko with: colorPickerModel -->\r\n        <!-- ko template: { name : 'dx-dashboard-color-picker-editor', data: $data } -->\r\n        <!-- /ko -->\r\n    <!-- /ko -->\r\n    <div class=\"dx-dashboard-colors-view-panel\">\r\n        <!-- ko if: allowAddNewEntry -->\r\n        <div class=\"dx-dashboard-form-row-caption dx-dashboard-form-row-caption-with-actions dx-dashboard-coloring-form-panel-header\">\r\n            <span data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.ColorScheme.Colors')\"></span>\r\n            <div class=\"dx-dashboard-add-entry-button\" data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.Colorization.AddColor'), click: addNewEntry\"></div>\r\n        </div>\r\n        <!-- /ko -->\r\n        <div class=\"dx-color-scheme-tree-view-container dx-dashboard-form-row-content\" data-bind=\"visible: allowModify || isTreeMode()\">\r\n            <div class=\"dx-dashboard-treeview dx-dashboard-empty-message dx-color-scheme-tree-view\" data-bind=\"dxTreeView: {\r\n                dataSource: dataSource,\r\n                dataStructure: 'tree',\r\n                height: !allowModify ? '450px' : '100%',\r\n                selectByClick: allowModify ? true : false,\r\n                selectionMode: allowModify ? 'single' : 'none',\r\n                onItemSelectionChanged: allowModify ? onItemSelectionChanged : null,\r\n                searchEnabled: true,\r\n                searchExpr: ['value'],\r\n                searchEditorOptions: {\r\n                     placeholder: $root.getLocalizationById('DashboardWebStringId.Search'),\r\n                     focusStateEnabled: false,\r\n                     hoverStateEnabled: false  \r\n                }\r\n             }\">\r\n                <div class=\"dx-color-scheme-tree-item\" data-bind=\"css: { 'dx-color-scheme-group-tree-item': !$data.editColor }\">\r\n                    <!-- ko if: $data.editColor -->\r\n                    <div class=\"dx-dashboard-color-scheme-item-color\" data-bind=\"click: editColor, style: { 'backgroundColor': color }\"></div>\r\n                    <!-- /ko -->\r\n                    <span class=\"dx-dashboard-color-scheme-item-name\" data-bind=\"text: value\"></span>\r\n                    <!-- ko if: $parent.allowModify && custom -->\r\n                    <div class=\"dx-dashboard-remove-icon\" data-bind=\"click: $parent.removeItem\">\r\n                        <svg><use xlink:href=\"#dx-dashboard-remove-small\" /></svg>\r\n                    </div>\r\n                    <!-- /ko -->\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"dx-dashboard-colors-list-compact dx-dashboard-list dx-dashboard-empty-message\" data-bind=\"visible: !allowModify && !isTreeMode(), dxList: {\r\n            dataSource: dataSource,\r\n            focusStateEnabled: false,\r\n            hoverStateEnabled: false,\r\n            activeStateEnabled: false,\r\n            searchEnabled: true,\r\n            searchMode: 'contains', \r\n            searchExpr: ['value'],\r\n            noDataText: $root.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'),\r\n            searchEditorOptions: {\r\n                    placeholder: $root.getLocalizationById('DashboardWebStringId.Search'),\r\n                    focusStateEnabled: false,\r\n                    hoverStateEnabled: false  \r\n            },\r\n            height: !allowModify ? '450px' : '805px',\r\n         }\">\r\n            <div class=\"dx-dashboard-color-scheme-item\" data-bind=\"style: { 'backgroundColor': color }\">\r\n                <div class=\"dx-dashboard-color-scheme-item-name\" data-bind=\"text: value\"></div>\r\n                <!-- ko if: $data.editColor -->\r\n                <div class=\"dx-dashboard-edit-color-icon\" data-bind=\"click: editColor\">\r\n                    <svg><use xlink:href=\"#dx-dashboard-ds-edit\" /></svg>\r\n                </div>\r\n                <!-- /ko -->\r\n            </div>\r\n        </div>\r\n    </div>\r\n</script>\r\n\n<script type=\"text/html\" id=\"dx-dashboard-format-rule-condition-type-editor\">\r\n    <div class=\"dx-dashboard-condition-type-editor\">\r\n        <div class=\"dx-field-chooser-header-container\">\r\n            <!-- ko template: 'dx-slidable-lists-navigation-area' -->\r\n            <!-- /ko -->\r\n        </div>\r\n        <div class=\"dx-dashboard-condition-types-container dx-dashboard-list\" data-bind=\"css: { 'dx-dashboard-state-condition-selected': displayMode() === 'specificTypes' }\">\r\n            <div class=\"dx-dashboard-list dx-dashboard-empty-message\" data-bind=\"dxList: {\r\n                     dataSource: availableConditionTypes,\r\n                     selectionMode: 'single',\r\n                     selectedItems: availableConditionTypes() && availableConditionTypes().filter(function(value) { return value.value === conditionType(); }) || [],\r\n                     onItemClick: function (e) { conditionType(e.itemData.value); },\r\n                     itemTemplate: 'item',\r\n                     onItemRendered: updateItemAppearance,\r\n                     noDataText: $root.getLocalizationById('DashboardWebStringId.ConditionalFormatting.UnsupportedDataType')\r\n                }\">\r\n\r\n                <div data-options=\"dxTemplate:{ name:'item' }\">\r\n                    <span data-bind=\"text: $root.getLocalizationById(displayText)\"></span>\r\n                </div>\r\n            </div>\r\n\r\n            <div data-bind=\"dxList: {\r\n                     dataSource: availableSpecificTypes,\r\n                     selectionMode: 'single',\r\n                     grouped: availableSpecificTypes().rangeStyleType !== 'None',\r\n                     selectedItems: selectedSpecificTypes,\r\n                     onItemClick: function (e) { specificType(e.itemData.value); },\r\n                     itemTemplate: 'item' \r\n                }, css: { 'dx-dashboard-gallery-list': availableSpecificTypes().rangeStyleType !== 'None' }\">\r\n\r\n                <div data-options=\"dxTemplate: { name:'item' }\">\r\n                    <!-- ko if: $parent.availableSpecificTypes().rangeStyleType === 'None' -->\r\n                    <span data-bind=\"text: $root.getLocalizationById(displayText)\"></span>\r\n                    <!-- /ko -->\r\n                    <!-- ko if: $parent.availableSpecificTypes().rangeStyleType === 'Color' -->\r\n                    <div class=\"dx-dashboard-gallery-item\" data-bind=\"attr: { title: $root.getLocalizationById(displayText) }, foreach: $parent.getStyleList(value)\">\r\n                        <div data-bind=\"css: 'dx-dashboard-appearance-range-preview', attr: { style: $data }\"></div>\r\n                    </div>\r\n                    <!-- /ko -->\r\n                    <!-- ko if: $parent.availableSpecificTypes().rangeStyleType === 'ColorBar' -->\r\n                    <div class=\"dx-dashboard-gallery-item\" data-bind=\"attr: { title: $root.getLocalizationById(displayText) }, foreach: $parent.getStyleList(value)\">\r\n                        <div data-bind=\"css: 'dx-dashboard-appearance-bar-preview', attr: { style: $data }\"></div>\r\n                    </div>\r\n                    <!-- /ko -->\r\n                    <!-- ko if: $parent.availableSpecificTypes().rangeStyleType === 'Icon' -->\r\n                    <div class=\"dx-dashboard-gallery-item\" data-bind=\"attr: { title: $root.getLocalizationById(displayText) }, foreach: $parent.getStyleList(value)\">\r\n                        <div class=\"dx-icon-dashboard-cf\" data-bind=\"css: $data\"></div>\r\n                    </div>\r\n                    <!-- /ko -->\r\n                    <!-- ko if: $parent.availableSpecificTypes().rangeStyleType === 'Gradient' -->\r\n                    <div class=\"dx-dashboard-gallery-item\" data-bind=\"attr: { title: $root.getLocalizationById(displayText) }, foreach: $parent.getGradientColorsList(value)\">\r\n                        <div data-bind=\"css: 'dx-dashboard-appearance-gradient-preview', attr: { style: 'background-color:' + $data.css }\"></div>\r\n                    </div>\r\n                    <!-- /ko -->\r\n                    <!-- ko if: $parent.availableSpecificTypes().rangeStyleType === 'GradientBar' -->\r\n                    <div class=\"dx-dashboard-gallery-item\" data-bind=\"attr: { title: $root.getLocalizationById(displayText) }, foreach: $parent.getGradientColorsList(value)\">\r\n                        <div data-bind=\"css: 'dx-dashboard-appearance-gradient-bar-preview', attr: { style: 'background-color:' + $data.css }\"></div>\r\n                    </div>\r\n                    <!-- /ko -->\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</script>\r\n\n<script type=\"text/html\" id='dx-dashboard-rule-ranges-editor'>\r\n    <div class=\"dx-dashboard-range-editor\">\r\n        <!-- ko if: !$data.isGradient -->\r\n        <div class=\"dx-dashboard-range-editor-header\">\r\n            <div class=\"dx-dashboard-ce-icon dx-dashboard-ce-icon-add\" data-bind=\"click: add\">\r\n                <svg><use xlink:href=\"#dx-dashboard-ce-add\" /></svg>\r\n            </div>\r\n            <div class=\"dx-dashboard-ce-remove-icon\" data-bind=\"click: remove, css: { 'dx-dashboard-state-selected': (!!selection() && value().length > 2) }\">\r\n                <svg><use xlink:href=\"#dx-dashboard-remove-small\" /></svg>\r\n            </div>\r\n        </div>\r\n        <!-- /ko -->\r\n        <div class=\"dx-dashboard-range-editor-content\" data-bind=\"dxDataGrid: dataGridOptions\">\r\n            <div data-options=\"dxTemplate:{ name: 'dx-dashboard-range-cell-template' }\">\r\n                <div class=\"dx-dashboard-range-cell\" data-bind=\"text: $data.text\"></div>\r\n            </div>\r\n            <div data-options=\"dxTemplate:{ name: 'dx-dashboard-range-style-template' }\">\r\n                <!-- ko template: 'dx-dashboard-style-settings-view'-->\r\n                <!-- /ko -->\r\n            </div>\r\n            <div data-options=\"dxTemplate:{ name: 'dx-dashboard-range-style-editor-template' }\">\r\n                <!-- ko template: 'dx-dashboard-style-settings-view'-->\r\n                <!-- /ko -->\r\n                <div class=\"dx-dashboard-style-settings-editor-popup dx-dropdowneditor-overlay\" data-bind=\"dxPopover: {\r\n                    visible: true,\r\n\r\n                    width: '241px',\r\n                    height: 'auto',\r\n                    closeOnOutsideClick: false,\r\n                    position: {\r\n                        of: $element,\r\n                        my: 'left top',\r\n                        at: 'left bottom',\r\n                        offset: '-8 -8'\r\n                    },\r\n                    container: $root.getWidgetContainer(),\r\n                    contentTemplate: 'dx-dashboard-style-settings-editor-template'\r\n                }\">\r\n                    <div data-options=\"dxTemplate:{ name: 'dx-dashboard-style-settings-editor-template' }\" tabindex=\"0\">\r\n                        <dx-dashboard-style-settings-editor params=\"target: $root.ko.observable(value),\r\n                          allowChangeMode: false,\r\n                          isRange: $parent.isRange,\r\n                          isGradient: $parent.isGradient,\r\n                          isEmptyAllowed: $parent.isRangeEmptyAllowed($data.data),\r\n                          selectedChanged: $parent.getSelectedStyleChangedHandler($data.data),\r\n                          closeEditCell: $parent.closeEditCell\">\r\n                        </dx-dashboard-style-settings-editor>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</script>\r\n\r\n\r\n\r\n<script type=\"text/html\" id='dx-dashboard-style-settings-view'>\r\n    <div class=\"dx-dashboard-range-style dx-dashboard-range-cell\">\r\n        <!-- ko if: !$parent.isIconSettings($data.value) -->\r\n        <div class=\"dx-dashboard-range-appearance-item\"\r\n             data-bind=\"attr: {\r\n                 style: $parent.getAppearanceOrBarStyleCSS($data.value),\r\n                 title: $parent.getAppearanceTypeLocalization($parent.getAppearanceOrBarStyleType($data.value)),\r\n                 'data-label': $parent.getLabelText($parent.getAppearanceOrBarStyleType($data.value))\r\n             },\r\n             css: {\r\n                 'dx-dashboard-appearance-item-empty': $parent.isEmpty($parent.getAppearanceOrBarStyleType($data.value)),\r\n                 'dx-dashboard-appearance-item-label': $parent.isLabel($parent.getAppearanceOrBarStyleType($data.value))\r\n             }\"></div>\r\n        <div class=\"dx-dashboard-rangestop\" data-bind=\"visible: $parent.getAppearanceOrBarStyleType($data.value) != 'None' && $parent.isGradient\"></div>\r\n        <!-- /ko -->\r\n        <!-- ko if: $parent.isIconSettings($data.value) -->\r\n        <div class=\"dx-dashboard-rangeicon\" data-bind=\"css: $parent.getIconClass($data.value.iconType()) \"></div>\r\n        <!-- /ko -->\r\n    </div>\r\n</script>\n<script type=\"text/html\" id='dx-dashboard-style-settings-editor'>\r\n    <!-- ko if: !isRange &&  mode() !== 'Bar' -->\r\n    <dx-dashboard-button-group class=\"dx-dashboard-window-definition-selector\" params=\"value: mode, values: \r\n                     [{ value: 'Appearance', displayValue: 'DashboardStringId.FormatRuleStyleAppearance'},\r\n                      { value: 'Icon', displayValue: 'DashboardStringId.FormatRuleStyleIcons'}]\"></dx-dashboard-button-group>\r\n\r\n    <div style=\"height: 4px;\"></div>\r\n    <!-- /ko -->\r\n    <div class=\"dx-dashboard-style-settings-editor\">\r\n        <!-- ko if: mode() === 'Appearance' || mode() === 'Bar' -->\r\n        <div data-bind=\"foreach: list\">\r\n            <div class=\"dx-dashboard-appearance-item\"\r\n                 data-bind=\"click: function() { $parent.setStyleType($data); },\r\n             attr: {\r\n                 style: $parent.getAppearanceStyleCSS($data),\r\n                 title: $parent.getAppearanceTypeLocalization($data),\r\n                 'data-label': $parent.getLabelText($data)\r\n             },\r\n             css: {\r\n                 'dx-state-selected': $data === $parent.selected(),\r\n                 'dx-dashboard-appearance-item-empty': $parent.isEmpty($data),\r\n                 'dx-dashboard-appearance-item-label': $parent.isLabel($data),\r\n                 'dx-dashboard-appearance-item-transparent': $parent.isTransparent($data)\r\n             }\">\r\n            </div>\r\n        </div>\r\n        <!-- /ko -->\r\n        <!-- ko if: mode() === 'Icon' -->\r\n        <div data-bind=\"foreach: iconList\">\r\n            <div data-bind=\"click: function() { $parent.setStyleType($data); },\r\n             attr: {\r\n                 title: $parent.getIconTypeLocalization($data),\r\n                 'data-label': $parent.getLabelText($data)\r\n             },\r\n             css: $parent.getIconClass($data)\">\r\n            </div>\r\n        </div>\r\n        <!-- /ko -->\r\n    </div>\r\n</script>\n<script type=\"text/html\" id=\"dx-dashboard-confirm-dialog\">\r\n    <div class=\"dx-dashboard-confirm dx-dashboard-typography dx-dashboard-popup\" data-bind=\"dxPopup: {\r\n             target: $root.getWidgetContainer(), \r\n             container: $root.getWidgetContainer(),\r\n             title: confirmTitle,\r\n             visible: confirmVisible,\r\n             toolbarItems: confirmButtons,\r\n             width: '550px',\r\n             height: '280px'\r\n             }\">\r\n        <span data-bind=\"html: confirmText\"></span>\r\n    </div>\r\n\r\n\r\n</script>\n<script type=\"text/html\" id='dx-dash-currency-selector'>\r\n    <div class=\"dx-dashboard-currency-selector dx-dashboard-properties\">\r\n        <div class=\"dx-dashboard-form-column dx-dashboard-form-left-column\">\r\n            <div class=\"dx-dashboard-form-column-content-wrapper\">\r\n                <div class=\"dx-dashboard-form-row-field\" style=\"height:calc(100% - 57px);\">\r\n                    <div class=\"dx-dashboard-form-row-caption\" data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.Currency.Currency')\"></div>\r\n                    <div class=\"dx-dashboard-list\" style=\"height:calc(100% - 30px);\" data-bind=\"dxList: {\r\n                        dataSource: {\r\n                            store: currencies,\r\n                            paginate: false\r\n                        },\r\n                        displayExpr: 'displayText',\r\n                        selectedItem: selectedCurrency,\r\n                        selectionMode: 'single',                        \r\n                        onContentReady: function (e) { e.component.scrollToItem(currencies.indexOf(selectedCurrency()) + 1); },\r\n                        itemTemplate: 'currencyItemWithPreview',\r\n                        searchEnabled: true,\r\n                        searchExpr: 'displayText',\r\n                        searchEditorOptions: {\r\n                          placeholder: $root.getLocalizationById('DashboardWebStringId.Search')\r\n                        }\r\n                    }\">\r\n                        <div data-options=\"dxTemplate:{ name:'currencyItemWithPreview' }\">\r\n                            <!-- ko template: { name: 'dx-dashboard-currency-list-item' }-->\r\n                            <!-- /ko -->\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"dx-dashboard-form-row-field\">\r\n                    <div class=\"dx-dashboard-form-row-caption\" data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.Currency.CurrencyCulture')\"></div>\r\n                    <div data-bind=\"dxSelectBox: {\r\n                        dataSource: selectedCurrency() && selectedCurrency().cultures || [],\r\n                        displayExpr: 'displayText',\r\n                        value: selectedCulture,\r\n                        width: '100%',\r\n                        placeholder: $root.getLocalizationById('DashboardStringId.ParametersSelectorText'),\r\n                        noDataText: $root.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'),\r\n                        dropDownOptions: {\r\n                            container: $root.getWidgetContainer()\r\n                        },\r\n                        searchEnabled: true,\r\n                        searchExpr: 'displayText'\r\n                    }\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"dx-dashboard-form-column dx-dashboard-form-right-column\">\r\n            <div class=\"dx-dashboard-form-column-content-holder\">\r\n                <div class=\"dx-dashboard-form-column-content-wrapper\">\r\n                    <div class=\"dx-dashboard-form-row-caption\" data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.Preview')\"></div>\r\n                    <div class=\"dx-dashboard-form-row-content\">\r\n                        <div class=\"dx-dashboard-currency-selector-preview\">\r\n                            <!-- ko if: $data.previewPositive && $data.previewNegative -->\r\n                            <div data-bind=\"text: $data.previewPositive\"></div>\r\n                            <div data-bind=\"text: $data.previewNegative\"></div>\r\n                            <!-- /ko -->\r\n                            <!-- ko if: $data.previewWarning -->\r\n                            <div class=\"dx-dashboard-currency-selector-preview-warn\" data-bind=\"text: $data.previewWarning\"></div>\r\n                            <!-- /ko -->\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id='dx-dashboard-currency-editor-template'>\r\n    <div data-bind=\"dxSelectBox: {\r\n                        dataSource: currencies,\r\n                        displayExpr: 'displayText',\r\n                        value: selectedCurrency,\r\n                        disabled: disabled,\r\n                        placeholder: $root.getLocalizationById('DashboardStringId.ParametersSelectorText'),\r\n                        noDataText: $root.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'),\r\n                        dropDownOptions: { container: $root.getWidgetContainer() },\r\n                        itemTemplate: 'currencyItemWithPreview',\r\n                        searchEnabled: true,\r\n                        searchExpr: 'displayText'\r\n                    }\">\r\n        <div data-options=\"dxTemplate:{ name:'currencyItemWithPreview' }\">\r\n            <!-- ko template: { name: 'dx-dashboard-currency-list-item' } -->\r\n            <!-- /ko -->\r\n        </div>\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-currency-list-item\">\r\n    <div class=\"dx-dashboard-currency-list-item\">\r\n        <div class=\"dx-dashboard-currency-list-item-display-text\">\r\n            <div data-bind=\"text: displayText\">\r\n            </div>\r\n        </div>\r\n        <div class=\"dx-dashboard-currency-list-item-preview\" data-bind=\"text: previewText\">\r\n        </div>\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-form-currency-settings\">\r\n    <dx-dashboard-currency-selector params=\"currencyCultureName: dashboard() && dashboard().currencyCultureName\" style=\"height: 100%;\"></dx-dashboard-currency-selector>\r\n</script>\r\n\r\n\n<script type=\"text/html\" id='dx-dashboard-datasource-browser'>\r\n    <div class=\"dx-dashboard-datasource-browser-wrapper\" data-bind=\"\">\r\n        <div class=\"dx-dashboard-form-column dx-dashboard-form-left-column\">\r\n            <div class=\"dx-dashboard-form-row\">\r\n                <div class=\"dx-dashboard-form-row-caption dx-dashboard-form-row-caption-with-actions\">\r\n                    <span data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.DataSources.UsedDataSources')\"></span>\r\n                    <!-- ko foreach: dataSourceActions -->\r\n                      <div class=\"dx-dashboard-datasource-list-action\" data-bind=\"click: click,\r\n                             text: text,\r\n                             css: { 'disabled-action': disabled }\">\r\n                      </div>\r\n                    <!-- /ko -->\r\n                </div>                \r\n                <div class=\"dx-dashboard-form-row-content dx-dashboard-datasource-list-wrapper\">\r\n                    <!-- ko template: 'dx-dashboard-datasource-used-datasources' -->\r\n                    <!-- /ko -->\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"dx-dashboard-form-column dx-dashboard-form-right-column\">\r\n            <div class=\"dx-dashboard-form-column-content-holder\">\r\n                <div class=\"dx-dashboard-form-column-content-wrapper\">\r\n                    <div class=\"dx-dashboard-form-row-caption dx-dashboard-form-row-caption-with-actions dx-dashboard-datasource-tree-actions-wrapper\">\r\n                        <!-- ko foreach: editDataSourceActions -->\r\n                        <!-- ko if: visible() -->\r\n                        <div class=\"dx-dashboard-datasource-list-action\" data-bind=\"click: click,\r\n                             text: text\">\r\n                        </div>\r\n                        <!-- /ko -->\r\n                        <!-- /ko -->\r\n\r\n                        <!-- ko if: $data.filterEditorModel() !== null -->\r\n                            <!-- ko template: { name: 'dx-filtereditor-popup', data: filterEditorModel } -->\r\n                            <!-- /ko -->\r\n                        <!-- /ko -->\r\n                    </div>\r\n                    <div class=\"dx-dashboard-form-row-content dx-dashboard-datasource-tree-wrapper\">\r\n                        <!-- ko template: { name: 'dx-dashboard-datasource-tree', data: $data } -->\r\n                        <!-- /ko -->\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"dx-dashboard-datasource-browser-popup dx-dashboard-typography dx-dashboard-popup\" data-bind=\"dxPopup: {\r\n        target: $root.getWidgetContainer(),\r\n        container: $root.getWidgetContainer(),\r\n        position: {\r\n            my: 'center',\r\n            at: 'center',\r\n            boundary: '.dx-dashboard-datasource-browser-wrapper'\r\n        },\r\n        width: '700px',\r\n        animation: { },\r\n        focusStateEnabled: true,\r\n        closeOnOutsideClick: false,\r\n        toolbarItems: popupContent() && popupContent().toolbarItems || [],\r\n        onHidden: function() { $data.popupContent(undefined); },\r\n        visible: popupVisible,\r\n        showTitle: true,\r\n        title: popupContent() && popupContent().title || ''\r\n    }\">\r\n        <!-- ko if: popupVisible -->\r\n            <!-- ko with: popupContent -->\r\n                <!-- ko template: { name: template, data: $data.bindingData ? $data.bindingData : $data } -->\r\n                <!-- /ko -->\r\n            <!-- /ko -->\r\n        <!-- /ko -->\r\n    </div>\r\n\r\n    <!-- ko template: { name: 'dx-dashboard-calc-field-editor', data: calcFieldEditor  } -->\r\n    <!-- /ko -->\r\n</script>\r\n\r\n<script type=\"text/html\" id='dx-dashboard-datasource-used-datasources'>\r\n    <!-- ko if: $data.usedDataSourcesExist() -->\r\n    <div class=\"dx-dashboard-datasources-list\" data-bind=\"dxList: { \r\n         dataSource: dataSourceBrowser._dataSources, \r\n         selectionMode: 'single', \r\n         selectedItem: selectedDataSource,\r\n         nextButtonText: $root.getLocalizationById('DashboardWebStringId.More'),\r\n         searchEnabled: true,\r\n         searchExpr: 'name',\r\n         searchEditorOptions: {\r\n           placeholder: $root.getLocalizationById('DashboardWebStringId.Search')\r\n         }\r\n        }\">\r\n        <div class=\"dx-dashboard-datasource-item\">\r\n            <div class=\"dx-dashboard-datasource-description\">\r\n                <span data-bind=\"text: name()\"></span>\r\n            </div>\r\n            <div class=\"dx-dashboard-datasource-icons\">\r\n                <div class=\"dx-dashboard-datasource-icon dx-dashboard-datasource-icon-remove\" data-bind=\"click: $parent.removeDataSource\">\r\n                    <svg><use xlink:href=\"#dx-dashboard-remove-small\" /></svg>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <!-- /ko -->    \r\n    <!-- ko ifnot: $data.usedDataSourcesExist() -->\r\n    <div class=\"dx-dashboard-form-parameter-placeholder\">\r\n        <div>\r\n            <!-- ko if: availableDataSourcesExist() --> \r\n            <span data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.DataSources.NoUsedDataSources')\"></span>\r\n            <br /><br />\r\n            <!-- ko if: $data.sqlDataSourceWizard -->\r\n            <span class=\"dx-dashboard-form-inline-action\" data-bind=\"click: showAddDataSourceForm, text: $root.getLocalizationById('DashboardWebStringId.DataSources.AddDataSource')\"></span>\r\n            <!-- /ko -->\r\n            <!-- /ko -->\r\n            <!-- ko if: !availableDataSourcesExist() -->\r\n            <span data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.DataSources.NoAvailableDataSources')\"></span>\r\n            <!-- /ko -->\r\n        </div>\r\n    </div>\r\n    <!-- /ko -->\r\n</script>\r\n\r\n<script type=\"text/html\" id='dx-dashboard-datasource-tree'>\r\n    <div data-bind=\"dxScrollView: { direction: 'vertical' }\">\r\n        <!-- ko if: !!selectedDataSource() -->\r\n        <div class=\"dx-dashboard-datasource-browser-tree\" \r\n             data-bind=\"treelist: { itemsProvider: itemsProvider, treeListController: treeListController, selectedPath: selectedPath, templateName: 'dx-dashboard-treelist-item-template', path: selectedDataSourceComponentName },\r\n            css: {'dx-state-loading': itemsProvider.loading() }\"></div>\r\n        <div class=\"dx-dashboard-treelist-loading\" data-bind=\"css: { 'dx-state-active': itemsProvider.loading() }\">Loading</div>\r\n        <!-- /ko -->\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-treelist-item-template\">\r\n    <div class=\"dx-treelist-item\" data-bind=\"event: { dblclick: function() { $data.dblClickHandler ? $data.dblClickHandler($data) : $data.toggleCollapsed() } }, css: { 'dx-treelist-item-selected': isSelected, 'dx-treelist-item-collapsed': collapsed, 'dx-treelist-group-item': hasItems, 'dx-dashboard-treelist-item-disabled': data.isList, 'dx-dashboard-corrupted-calc-field': data.isCorruptedCalcField }, click: toggleSelected\">\r\n        <div class=\"dx-dashboard-datasource-tree-item-column\" data-bind=\"styleunit: { 'paddingLeft': 20 * level + 10 }\">\r\n            <div class=\"dx-treelist-item-images\">\r\n                <!-- ko if: !data.style -->\r\n                <div class=\"dx-treelist-collapsedbutton\" data-bind=\"css: nodeImageClass, click: toggleCollapsed\"></div>\r\n                <!-- /ko -->\r\n                <!-- ko if: !!data.style -->\r\n                    <div class=\"dx-dashboard-datasource-field-icon\" data-bind=\"css: data.style\">\r\n                        <div>\r\n                            <svg>\r\n                                <use xlink:href=\"#dx-dashboard-calc-field\"/>\r\n                            </svg>\r\n                        </div>\r\n                    </div>\r\n                <!-- /ko -->\r\n            </div>\r\n            <div class=\"dx-treelist-caption\">\r\n                <div class=\"dx-treelist-selectedcontent\" data-bind=\"event: { dblclick: function() { $data.dblClickHandler && $data.dblClickHandler($data); } }\">\r\n                    <div class=\"dx-treelist-text\" data-bind=\"text: text, attr: { title: text }\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"dx-dashboard-datasource-tree-item-column\" style=\"padding-left: 12px;\">\r\n            <!-- ko if: !data.isCorruptedCalcField -->\r\n                <!-- ko if: data.field.fieldType && data.field.fieldType() !== 'Unknown' -->\r\n                <span data-bind=\"text: data.field.fieldType\"></span>\r\n                <!-- /ko -->\r\n                <!-- ko if: data.isList -->\r\n                <span data-bind=\"text: $root.getLocalizationById('DashboardStringId.MessageCollectionTypesNotSupported')\"></span>\r\n                <!-- /ko -->\r\n            <!-- /ko -->\r\n            <!-- ko if: data.isCorruptedCalcField -->\r\n            <span data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.DataSources.CalculatedField.Corrupted')\"></span>\r\n            <!-- /ko -->\r\n        </div>\r\n        <div class=\"dx-dashboard-datasource-tree-item-column\" style=\"border-right: none; text-align: center;\">\r\n            <!-- ko foreach: data.innerActions -->\r\n                <div class=\"dx-dashboard-datasource-field-icon\"  data-bind=\"click: click, css: style\">\r\n                    <svg><use data-bind=\"xlinkHref: icon\" /></svg>\r\n                </div>\r\n            <!-- /ko -->\r\n        </div>\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-form-datasource-browser\">\r\n    <!-- ko with: $data -->\r\n        <!-- ko template: { name :'dx-dashboard-datasource-browser' } -->\r\n        <!-- /ko -->\r\n    <!-- /ko -->\r\n</script>\r\n\n<script type=\"text/html\" id=\"dx-dashboard-data-source-wizard\">\r\n    <div data-bind=\"dxLoadPanel: {\r\n        visible: loadingPanelVisible,\r\n        closeOnOutsideClick: true,\r\n        container: $root.getWidgetContainer(),\r\n        position: { of: $root.getWidgetContainer() }\r\n    }\"></div>\r\n    <!-- Data Source wizard popup should be first child of DashboardControl -->\r\n    <!-- ko dx-dashboard-element-accessor-binding: { element: wizardElement } -->\r\n    <!-- /ko -->\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-data-source-wizard-binding\">\r\n    <!-- ko template: { name: 'dx-wizard-newlayout', data: wizardModel } --> \r\n    <!-- /ko -->\r\n</script>\n<script type=\"text/html\" id='dx-dashboard-datasource-available-datasources'>\r\n    <div class=\"dx-dashboard-datasources-list-holder\">\r\n        <!-- ko if: uiState() === 'error' -->\r\n            <!-- ko if: errorState() -->\r\n                <div class=\"dx-dashboard-datasources-content dx-dashboard-datasources-error\">\r\n                    <div class=\"dx-dashboard-datasources-error-item\">\r\n                        <span class=\"dx-dashboard-datasources-error-title\" data-bind=\"text: errorState().title\"></span>\r\n                        <br><br>\r\n                        <span class=\"dx-dashboard-datasources-error-details\" data-bind=\"text: errorState().detail\"></span>\r\n                    </div>\r\n                </div>\r\n            <!-- /ko -->\r\n        <!-- /ko -->\r\n        <!-- ko if: uiState() === 'loading' -->\r\n            <div class=\"dx-dashboard-datasources-content dx-dashboard-datasources-loading\">\r\n                <div class=\"dx-dashboard-control-loading\" data-bind=\"text:$root.getLocalizationById('DashboardStringId.MessageLoading')\"></div>\r\n            </div>\r\n        <!-- /ko -->\r\n        <!-- ko if: uiState() === 'live' -->\r\n            <div class=\"dx-dashboard-datasources-list-header\">\r\n                <span data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.DataSources.ChooseDataSource')\"></span>\r\n                <!-- ko if: canCreateDataSourceWizard -->\r\n                <span class=\"dx-dashboard-datasource-action\" data-bind=\"click: showCreateDataSourceWizard, text: $root.getLocalizationById('DashboardWebStringId.DataSources.CreateNewDataSource'),\r\n                    attr: { title: $root.getLocalizationById('DashboardWebStringId.DataSources.CreateDataSource.Tooltip') } \"></span>\r\n                <!-- /ko -->\r\n            </div>\r\n            <div class=\"dx-dashboard-datasources-list dx-dashboard-list\" data-bind=\"dxList: { \r\n                 dataSource: dataSources, \r\n                 selectionMode: 'single', \r\n                 selectedItems: selectedDataSources,\r\n                 noDataText: '',\r\n                 nextButtonText: $root.getLocalizationById('DashboardWebStringId.More'),\r\n                 searchEnabled: true,\r\n                 searchExpr: 'name',\r\n                 searchEditorOptions: {\r\n                   placeholder: $root.getLocalizationById('DashboardWebStringId.Search')\r\n                 }}\">\r\n                <div class=\"dx-dashboard-datasource-item\">\r\n                    <div class=\"dx-dashboard-datasource-description\">\r\n                        <span data-bind=\"text: name()\"></span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        <!-- /ko -->\r\n    </div>\r\n</script>\n\r\n<script type=\"text/html\" id=\"dx-dashboard-binding-properties-empty-item\">\r\n    <!-- ko if: isDesignMode -->\r\n        <div class=\"dx-dashboard-layout-text\">\r\n            <span class=\"dx-dashboard-layout-link\" data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.ClickHereInvitation'), click: click\"></span> <span data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.BindDataInvitation')\"></span>\r\n        </div>\r\n    <!-- /ko -->\r\n</script>\r\n<script type=\"text/html\" id=\"dx-dashboard-binding-properties\">\r\n    <!-- ko template: { name: template, data: $data } -->\r\n    <!-- /ko -->\r\n    <div data-bind=\"css: { 'dx-visible-properties': !!propertiesController.mainModel() }\" class=\"dx-dashboard-binding-panel-properties-content\">\r\n        <div class=\"dx-dashboard-binding-panel-header-container\">\r\n            <div class=\"dx-dashboard-arrow-back\" data-bind=\"click: $parents[1].hideBindingProperties\">\r\n                <!-- ko lazy: { if: $parent.detailVisible } -->\r\n                <svg><use xlink:href=\"#dx-dashboard-arrow-left\"></use></svg>\r\n                <!-- /ko -->\r\n            </div>\r\n            <!-- ko if: $parents[1].isSecondaryPanelVisible() -->\r\n            <h5 data-bind=\"text: $root.getLocalizationById(propertiesController.secondaryModel().displayText)\"></h5>\r\n            <!-- /ko -->\r\n        </div>\r\n        <div class=\"dx-dashboard-binding-panel-details dx-dashboard-slidable-content\"\r\n             data-bind=\"parentHeightCalculator: { selector: '.dx-overlay-content' }, css: {'dx-dashboard-slide-to-right': $parents[1].isSecondaryPanelVisible() }\">\r\n            <div>\r\n                <div data-bind=\"dxScrollView: { height: parentHeight - 40 }\">\r\n                    <!-- ko if: propertiesController.mainModel() -->\r\n                        <!-- ko template: { name: 'dx-dashboard-properties-accordion', data: { propertiesController: $data.propertiesController } } -->\r\n                        <!-- /ko -->\r\n                    <!-- /ko -->\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <div data-bind=\"dxScrollView: { height: parentHeight - 40 }\">\r\n                    <div>\r\n                        <!-- ko if: propertiesController.secondaryModel()  -->\r\n                            <!-- ko template: { name: 'dx-dashboard-properties-accordion', data: { propertiesController: $data.propertiesController, useSecondaryModel: true } } -->\r\n                            <!-- /ko -->\r\n                        <!-- /ko -->\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</script>\r\n\n<script type=\"text/html\" id=\"dx-dashboard-convert-to\">\r\n    <div class=\"dx-dashboard-binding-panel-options dx-dashboard-slidable-content dx-dashboard-slide-to-right\"\r\n         style=\"overflow:visible;\">\r\n        <div class=\"dx-dashboard-binding-panel-details dx-dashboard-toolbox-extension\">\r\n            <div data-bind=\"dxScrollView: { direction: 'vertical', height: $parent.parentHeight }\">\r\n                <div class=\"dx-dashboard-toolbox\">\r\n                    <div class=\"dx-dashboard-toolbox-group-separator\"></div>\r\n                    <!-- ko foreach: groups -->\r\n                        <div class=\"dx-dashboard-toolbox-group\" data-bind=\"text: $root.getLocalizationById(title)\"></div>\r\n                        <!-- ko foreach: items -->\r\n                            <!-- ko if: $parents[1].supportConvert(type) -->\r\n                            <div class=\"dx-dashboard-toolbox-item\" data-bind=\"attr: { 'data-item-type': type, title: $root.getLocalizationById(title) }, click: function() { $parents[1].convertTo(type); }, css: {'dx-state-disabled': $parents[3].selectedItemSurface.dashboardItem.itemType() === $data.type }\">\r\n                                <svg>\r\n                                    <use data-bind=\"xlinkHref: icon\"></use>\r\n                                </svg>\r\n                                <div class=\"dx-dashboard-toolbox-item-hover\"></div>\r\n                            </div>\r\n                            <!-- /ko -->\r\n                        <!-- /ko -->\r\n                        <div class=\"dx-dashboard-toolbox-group-separator\"></div>\r\n                    <!-- /ko -->\r\n                </div>\r\n                <div class=\"dx-dashboard-duplicate-action\" data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.Duplicate'), click: duplicate\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</script>\r\n\n<script type=\"text/html\" id=\"dx-dashboard-form-new\">\r\n    <div class=\"dx-dashboard-form-new dx-dashboard-form-column\">\r\n        <div class=\"dx-dashboard-form-row\">\r\n            <div class=\"dx-dashboard-form-row-caption\" data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.New.DashboardName')\"></div>\r\n            <div data-bind=\"dxTextBox: { placeholder: $root.getLocalizationById('DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder'), value: dashboardName }\"></div>\r\n            <div class=\"dx-dashboard-form-new-content\">\r\n                <!-- ko with: accessibleDataSourcesExtension() -->\r\n                    <!-- ko template: { name: templateName, data: viewModel } -->\r\n                    <!-- /ko -->\r\n                <!-- /ko -->\r\n            </div>\r\n            <div class=\"dx-dashboard-form-new-button\">\r\n                <div data-bind=\"dxButton: {\r\n                    text: $root.getLocalizationById('DashboardWebStringId.DataSources.CreateDataSource'),\r\n                    onClick: createNewDashboard,\r\n                    disabled: createNewDashboardDisabled,\r\n                    width: '160px',\r\n                    height: '40px',\r\n                    type: 'default'\r\n                    }\">\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</script>\r\n\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-add-new-dashboard\">\r\n    <!-- ko if: isDesignMode() -->\r\n        <div data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.AddNewDashboard')\"></div>&nbsp;\r\n        <a href=\"#\" data-bind=\"click: showCreateNewDashboard, text: $root.getLocalizationById('DashboardWebStringId.DashboardMenuNewDashboardCreate')\"></a>.\r\n    <!-- /ko -->\r\n</script>\n<script type=\"text/html\" id=\"dx-dashboard-options\">\r\n    <div class=\"dx-dashboard-binding-panel-options dx-dashboard-slidable-content\"\r\n         data-bind=\"css: {'dx-dashboard-slide-to-right': $parents[1].isSecondaryPanelVisible() }\"\r\n         style=\"overflow:visible;\">\r\n        <div class=\"dx-dashboard-binding-panel-details\">\r\n            <div data-bind=\"dxScrollView: { direction: 'vertical', height: $parent.parentHeight }\">\r\n                <!-- ko ifnot: $data.propertiesController.accordionDataSource().length > 1 -->\r\n                <!-- ko with: $data.propertiesController.accordionDataSource()[0] -->\r\n\r\n                <div class=\"dx-dashboard-properties-single-tab\">\r\n                    <!-- ko template: 'dx-dashboard-accordion-tab-content' -->\r\n                    <!-- /ko -->\r\n                </div>\r\n\r\n                <!-- /ko -->\r\n                <!-- /ko -->\r\n                <!-- ko if: $data.propertiesController.accordionDataSource().length > 1 -->\r\n                <!-- ko template: { name: 'dx-dashboard-properties-accordion', data: { propertiesController: $data.propertiesController } } -->\r\n                <!-- /ko -->\r\n                <!-- /ko -->\r\n            </div>\r\n        </div>\r\n        <div>\r\n            <div class=\"dx-dashboard-secondary-header-container\">\r\n                <div class=\"dx-dashboard-arrow-back\" data-bind=\"click: $parents[1].hideBindingProperties\">\r\n                    <svg><use xlink:href=\"#dx-dashboard-arrow-left\"></use></svg>\r\n                </div>\r\n                <!-- ko if: $data.propertiesController.secondaryModel-->\r\n                <h5 data-bind=\"text: $root.getLocalizationById(propertiesController.secondaryModel().displayText)\"></h5>\r\n                <!-- /ko -->\r\n            </div>\r\n            <div data-bind=\"dxScrollView: { direction: 'vertical', height: $parent.parentHeight }\">\r\n                <!-- ko if: $data.propertiesController.secondaryModel-->\r\n                    <!-- ko template: { name: 'dx-dashboard-properties-accordion', data: { propertiesController: $data.propertiesController, useSecondaryModel: true } } -->\r\n                    <!-- /ko -->\r\n                <!-- /ko -->\r\n            </div>\r\n        </div>\r\n    </div>\r\n</script>\r\n\n<script type=\"text/html\" id=\"dx-dashboard-form-open\">\r\n    <div data-bind=\"dxList: { \r\n         dataSource: { load: dashboardsListStore, totalCount: function() { return 0; }, paginate: false, searchExpr: 'name' },\r\n         noDataText: '',\r\n         searchEnabled: true,\r\n         pageLoadingText: $root.getLocalizationById('DashboardStringId.MessageLoading'),\r\n         nextButtonText: $root.getLocalizationById('DashboardWebStringId.More'),\r\n         displayExpr: 'name',\r\n         keyExpr: 'id',\r\n         searchEditorOptions: {\r\n            placeholder: $root.getLocalizationById('DashboardWebStringId.Search')\r\n         },\r\n         hoverStateEnabled: true,\r\n         \r\n         height: '100%',\r\n         onItemClick: openDashboard }\" \r\n        class=\"dx-dashboard-form-open\">\r\n    </div>\r\n</script>\n<script type=\"text/html\" id=\"dx-dashboard-form-title-settings\">\r\n    <div class=\"dx-dashboard-form-column dx-dashboard-form-left-column\">\r\n        <div class=\"dx-dashboard-form-column-content-wrapper\">\r\n            <div class=\"dx-dashboard-form-row-content\" data-bind=\"dxScrollView: { direction: 'vertical' }\">\r\n                <div data-bind=\"dx-dashboard-form-adapter: { target: titleSettings }\" class=\"dx-dashboard-properties\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"dx-dashboard-form-column dx-dashboard-form-right-column\">\r\n        <div class=\"dx-dashboard-form-column-content-holder\">\r\n            <div class=\"dx-dashboard-form-column-content-wrapper\">\r\n                <div class=\"dx-dashboard-form-row-caption\" data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.Preview')\"></div>\r\n                <div class=\"dx-dashboard-form-row-content\">\r\n                    <div class=\"dx-dashboard-title-settings-preview-wrapper\">\r\n                        <dashboard-title params=\"options: preview,\r\n                                         width: $root.ko.computed(function() { $element.parentElement.innerWidth }), \r\n                                         height: headerHeight\">\r\n                        </dashboard-title>\r\n                        <div class=\"dx-dashboard-title-settings-preview-dashboard\" data-bind=\"style: { top: headerHeight() + 5 + 'px' }\">\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</script>\r\n\n@@ -1,12 +0,0 @@\r\n﻿<script type=\"text/html\" id='dx-dashboard-filter-expression-editor'>\r\n    <!-- ko template: { name: 'dx-filtereditor-popup', data: editor } -->\r\n    <!-- /ko -->\r\n    <div class=\"dx-dashboard-filter-expression-editor\">\r\n        <div class=\"dx-dashboard-filter-expression-edit-button\" data-bind=\"click: show\">\r\n            <svg><use xlink:href=\"#dx-dashboard-ce-edit\" /></svg>\r\n        </div>\r\n        <div class=\"dx-dashboard-filter-expression-edit-criteria\">\r\n            <div data-bind=\"text: criteriaString\"></div>\r\n        </div>\r\n    </div>\r\n</script>\r\nNo newline at end of file\r\n\n<script type=\"text/html\" id='dx-simple-filter-popup'>\r\n    <div class=\"dx-filter-popup dx-dashboard-typography\" data-bind=\"dxPopup: {\r\n            target: $root.getWidgetContainer(),\r\n            container:$root.getWidgetContainer(),\r\n            position: {\r\n                my: 'center',\r\n                at: 'center',\r\n                boundary: $root.getWidgetContainer()\r\n            },\r\n            height: '50%',\r\n            width: '50%',\r\n            minHeight: '250px',\r\n            minWidth: '250px',\r\n            animation: { },\r\n            focusStateEnabled: true,\r\n            resizeEnabled: true,\r\n            closeOnOutsideClick: false,\r\n            toolbarItems: [\r\n                { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: $root.getLocalizationById('DashboardWebStringId.DataSources.Save'), onClick: applyHandler } },\r\n                { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: $root.getLocalizationById('DashboardWebStringId.DataSources.Cancel'), onClick: function() { popupVisible(false); } } }\r\n            ],\r\n            onHidden: function() { },\r\n            visible: popupVisible,\r\n            shadingColor: 'rgba(0, 0, 0, 0.2)',\r\n            showTitle: true,\r\n            title: $root.getLocalizationById('DataAccessUIStringId.FiltersView')\r\n        }\">\r\n\r\n        <div data-bind=\"dxSelectBox: {\r\n             dataSource: fields,\r\n             displayExpr: 'displayName',\r\n             value: selectedField,\r\n             placeholder: $root.getLocalizationById('DashboardStringId.ParametersSelectorText'),\r\n             noDataText: $root.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'),\r\n             dropDownOptions: { container: $root.getWidgetContainer() }\r\n        }\"></div>\r\n        <p></p>\r\n        <!-- ko template: \"dx-filter\" -->\r\n        <!-- /ko -->\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-filter\">\r\n    <div class=\"dx-filter-loading\" data-bind=\"visible: loadingVisible, text: $root.getLocalizationById('DashboardWebStringId.Loading')\"></div>\r\n    <div class=\"dx-filter dx-treeview-border-visible\" data-bind=\"dxTreeView: $data.treeOptions\">\r\n        <div class=\"dx-filter-item\">\r\n            <span data-bind=\"text: displayName\"></span>\r\n        </div>\r\n    </div>\r\n</script>\n<script type=\"text/html\" id=\"dx-dashboard-text-preview\">\r\n    <div data-bind=\"text: $data\"></div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-flow-mode-settings\">\r\n    <div class=\"dx-dashboard-flow-mode-settings\">\r\n        <div data-bind=\"dxSelectBox: selectBoxOptions\" class=\"dx-dashboard-list\" style=\"display: inline-block; margin-right: 5px; width: 60%\">\r\n        </div><div data-bind=\"dxNumberBox: numberBoxOptions\" style=\"display: inline-block; width: calc(40% - 5px)\"></div>\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-action-buttons\">\r\n    <div class=\"dx-dashboard-action-buttons\" data-bind=\"foreach: buttons\">\r\n        <div data-bind=\"dxButton: $data\"></div>\r\n    </div>\r\n</script>\r\n\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-nested-propertygrid-editor\">\r\n    <div class=\"dx-dashboard-accordion-group\">\r\n        <div class=\"dx-accordion-item-title\">\r\n            <h5 data-bind=\"text: caption\"></h5>\r\n        </div>\r\n        <div data-bind=\"dx-dashboard-form-adapter: { target: object }\" class=\"dx-dashboard-properties\"></div>\r\n    </div>\r\n</script>\r\n\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-nullable-numberbox\">\r\n    <div data-bind=\"dxButtonGroup: buttonGroupOptions\"></div>\r\n    <div class=\"dx-dashboard-gauge-nb\" data-bind=\"dxNumberBox: numberBoxOptions\" style=\"margin-top: 10px;\"></div>\r\n</script>\n<script type=\"text/html\" id=\"dx-dashboard-base-item-surface\">\r\n    <div class=\"dx-dashboard-data-binding-surface\" data-bind=\"css: { 'dx-visible-properties': !!propertiesController.mainModel() }\">\r\n        <div class=\"dx-dashboard-data-binding-panel\">\r\n            <div data-bind=\"dxScrollView: { direction: 'vertical' }\">\r\n                <div class=\"dx-dashboard-binding-panel-content\" data-bind=\"dx-dashboard-container-draggable: $data\">\r\n                    <!-- ko foreach: dataSections -->\r\n                    <div class=\"dx-dashboard-section\">\r\n                        <!-- ko if: $data.sectionInfo && sectionInfo.actions -->\r\n                        <div class=\"dx-dashboard-section-actions\">\r\n                            <!-- ko foreach: sectionInfo.actions -->\r\n                            <div class=\"dx-dashboard-section-action\" data-bind=\"attr: { title: $root.getLocalizationById(title) }, click: action\">\r\n                                <!-- ko lazy: { if: $parents[3].detailVisible } -->\r\n                                <svg><use data-bind=\"xlinkHref: icon\"></use></svg>\r\n                                <!-- /ko -->\r\n                            </div>\r\n                            <!-- /ko -->\r\n                        </div>\r\n                        <!-- /ko -->\r\n                        <!-- ko template: { name: $data.template, data: $data } -->\r\n                        <!-- /ko -->\r\n                    </div>\r\n                    <!-- /ko -->\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"dx-dashboard-close-panel\" data-bind=\"click: $parents[2].hideBindingPanel\">\r\n            <!-- ko lazy: { if: $parents[1].detailVisible } -->\r\n            <svg><use xlink:href=\"#dx-dashboard-close\"></use></svg>\r\n            <!-- /ko -->\r\n        </div>\r\n        <!-- ko template: 'dx-dashboard-item-datasource' -->\r\n        <!-- /ko -->\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-item-datasource\">\r\n    <div class=\"dx-dashboard-data-source-panel\"  data-bind=\"style: { height: changeDataSourcePanelVisible() ? '404px': '' }\">\r\n        <div class=\"dx-dashboard-data-source-header\" data-bind=\"click: changeDataSource\">\r\n            <div class=\"dx-dashboard-text-overflow\" data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.Binding.DataFiltering')\"></div>\r\n            <div class=\"dx-dashboard-data-source-options\" data-bind=\"css: { 'dx-dashboard-data-source-options-active': changeDataSourcePanelVisible()  }\">\r\n                <svg><use xlink:href=\"#dx-dashboard-ds-options\" /></svg>\r\n            </div>\r\n        </div>\r\n        <div class=\"dx-dashboard-data-source-body\">\r\n            <div class=\"dx-dashboard-data-source-options-panel\" data-bind=\"style: { height: changeDataSourcePanelVisible() ? '' : '0px' } \">\r\n                <div>\r\n                    <div class=\"dx-dashboard-data-source-chooser\">\r\n                        <dx-datasource-chooser params=\"dataSourceBrowser: dataSourceBrowser, dataSource: dataSourceName, dataMember: dataMemberName, active: changeDataSourcePanelVisible\"></dx-datasource-chooser>\r\n                    </div>\r\n                    <div class=\"dx-dashboard-data-item-filter\">\r\n                        <span class=\"dx-dashboard-text-overflow\" data-bind=\"click: showFilterEditor, text: $root.getLocalizationById('DashboardWebStringId.ClickToSetFilterCriteria')\"></span>\r\n                        <!-- ko if: filterEditorModel -->\r\n                            <!-- ko template: { name: isOlap ? 'dx-simple-filter-popup' : 'dx-filtereditor-popup', data: filterEditorModel } -->\r\n                            <!-- /ko -->\r\n                        <!-- /ko -->\r\n                    </div>\r\n                    <span class=\"dx-dashboard-data-source-options-control\">\r\n                        <span class=\"dx-dashboard-text-overflow\" data-bind=\"click: saveDataSourceChanges, text: $root.getLocalizationById('DashboardWebStringId.DataSources.OK')\">OK</span>\r\n                        <span class=\"dx-dashboard-text-overflow\" data-bind=\"click: changeDataSource, text: $root.getLocalizationById('DashboardWebStringId.DataSources.Cancel')\"></span>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n            <div class=\"dx-dashboard-data-source-info\" data-bind=\"text: $root.getLocalizationById(dataSourceDisplayText()), attr: { title: $root.getLocalizationById('DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip') }, style: { height: changeDataSourcePanelVisible() ? '0px' : '' }, click: changeDataSource, css: { 'dx-dashboard-data-source-info-alert': needSetDataSource }\"></div>\r\n        </div>\r\n    </div>\r\n    <!-- ko template: { name: \"dx-dashboard-confirm-dialog\", data: confirmDialogViewModel } -->\r\n    <!-- /ko -->\r\n</script>\r\n\n<script type=\"text/html\" id=\"dx-dashboard-item-menu-holder\">\r\n    <div class=\"dx-dashboard-item-controls\">\r\n        <dx-dashboard-item-menu params=\"surface: $data.dashboardSurface, layoutItem: $data.layoutItem, itemMenuViewModelContainer: $data.itemMenuViewModelContainer\"  \r\n                           data-bind=\"css: { 'dx-state-selected': $data.layoutItem.isSelected }\"></dx-dashboard-item-menu>\r\n        <!-- ko with: $data.layoutItem -->\r\n        <div class=\"dx-dashboard-item-plate dx-layout-item-plate\" data-bind=\"css: { 'dx-state-selected': $data.isSelected }\" >\r\n            <div draggable=\"true\">\r\n                <svg><use xlink:href=\"#dx-dashboard-drag\" /></svg>\r\n            </div>\r\n        </div>\r\n        <!-- /ko -->\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-item-menu\">\r\n    <div class=\"dx-dashboard-item-menu\" data-bind=\"\r\n         css: { 'dx-position-left': isLeft, \r\n                'dx-state-selected': layoutItem.isSelected,\r\n                'dx-dashboard-item-top': verticalPosition() === 'top',\r\n                'dx-dashboard-item-bottom': verticalPosition() === 'bottom'\r\n         },\r\n  \r\n          menuVisibilitySubscription: { visible: menuItemDetailVisible }\">\r\n        <!-- ko foreach: contextMenuItemsSorted -->\r\n        <div data-bind=\"css: 'dx-dashboard-' + menuItemId + '-options-button' + (detailVisible() ? ' dx-state-selected' : ''), \r\n             click: $parent.menuItemClick,\r\n             attr: { title: $root.getLocalizationById($data.hint || $data.title) }\" class=\"dx-dashboard-designer-menu-item\">\r\n            <svg><use data-bind=\"xlinkHref: icon\"></use></svg>\r\n            <div class=\"dx-dashboard-property-grid dx-disappearing-overlay dx-dashboard-context-menu-container\" data-bind=\"css: $data.popoverClass + ' dx-menu-position-' + ($parent.isLeft() ? 'left' : 'right'), dxPopover: {\r\n                target: $root.getWidgetContainer().querySelector('.dx-dashboard-item-menu.dx-state-selected .dx-dashboard-' + menuItemId + '-options-button'),\r\n                container: $root.getWidgetContainer(),\r\n                visible: detailVisible,\r\n                position: {\r\n                    my: $parent.positionMy,\r\n                    at: $parent.positionAt,\r\n                    boundary:  $root.getWidgetContainer().querySelector('.dx-layout-root'),\r\n                    collision: 'flipfit',\r\n                    boundaryOffset: '0, 0',\r\n                    offset: $parent.isLeft() ? '+10, 0' : '-10, 0'\r\n                },\r\n                height: $parent.surface.rootItem.height,\r\n                width: panelWidth + 2,\r\n                hoverStateEnabled: false,\r\n                onShown: $parent.initForFirstShown,\r\n                closeOnOutsideClick: false,\r\n                animation: {},\r\n                onInitialized: $parent.popupInitialized,\r\n                closeOnTargetScroll: false\r\n            }\">\r\n                <!-- ko lazy: { template: 'dx-dashboard-context-menu-panel-content' } -->\r\n                <!-- /ko -->\r\n            </div>\r\n        </div>\r\n        <!-- /ko -->\r\n        <div class=\"dx-dashboard-designer-menu-separator\"></div>\r\n        <div class=\"dx-dashboard-remove-item-button dx-dashboard-designer-menu-item\" data-bind=\"click: deleteCurrentItem, attr: { title: $root.getLocalizationById('DashboardWebStringId.Remove') }\">\r\n            <svg><use xlink:href=\"#dx-dashboard-remove\"></use></svg>\r\n        </div>\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-context-menu-panel-content\">\r\n    <div class=\"dx-dashboard-context-menu-panel\" data-bind=\"css: { 'dx-visible-properties': $parent.selectedItemSurface && $parent.selectedItemSurface.propertiesController.mainModel() }, style: $parent.propertiesPanelStyle\">\r\n        <!-- ko if: !!$data.title -->\r\n        <div class=\"dx-dashboard-panel-header\">\r\n            <div class=\"dx-dashboard-panel-header-title\" data-bind=\"text: $root.getLocalizationById(title)\"></div>\r\n            <div class=\"dx-dashboard-close-panel\" data-bind=\"click: $parent.hideBindingPanel\">\r\n                <!-- ko lazy: { if: detailVisible } -->\r\n                <svg><use xlink:href=\"#dx-dashboard-close\"></use></svg>\r\n                <!-- /ko -->\r\n            </div>\r\n        </div>\r\n        <!-- /ko -->\r\n        <!-- ko if: detailVisible -->\r\n            <!-- ko template: { name: templateName, data: $data.customData } -->\r\n            <!-- /ko -->\r\n        <!-- /ko -->\r\n    </div>\r\n</script>\n<script type=\"text/html\" id=\"dx-dashboard-custom-range-collection-item\">\r\n    <div class=\"dx-dashboard-collection-editor-item\" data-bind=\"style: { 'font-weight': $data.customTemplateGetItemWeight($data.itemModel)}\">\r\n        <div data-bind=\"text: $root.getLocalizationById($data.parent.getItemText($data.itemModel))\"></div>\r\n    </div>\r\n</script>\n<script type=\"text/html\" id='dx-dashboard-field-picker'>\r\n    <div data-bind=\"dxFieldListPicker: { path: pathToMembers, value: value, displayValue: displayValue, itemsProvider: itemsProvider, treeListController: treeListController, disabled: disabled, placeholder: $root.getLocalizationById('DashboardStringId.ParametersSelectorText') }\"></div>\r\n</script>\n<script type=\"text/html\" id='dx-dashboard-parameter-settings'>\r\n    <div class=\"dx-dashboard-form-column dx-dashboard-form-left-column\">\r\n        <div data-bind=\"dxScrollView: { direction: 'vertical', height: '100%' }\">\r\n            <div data-bind=\"dx-dashboard-form-adapter: { target: commonParameterSettings  }\" class=\"dx-dashboard-properties\"></div>\r\n        </div>\r\n    </div>\r\n    <div class=\"dx-dashboard-form-column dx-dashboard-form-right-column\">\r\n        <div class=\"dx-dashboard-form-column-content-holder\">\r\n            <div class=\"dx-dashboard-form-column-content-wrapper dx-dashboard-properties\">\r\n                <div class=\"dx-dashboard-form-row-content\" data-bind=\"dxScrollView: { direction: 'vertical' }\">\r\n                    <div data-bind=\"dx-dashboard-form-adapter: { target: lookUpParameterType  }\" class=\"dx-dashboard-properties\"></div>\r\n                    <div class=\"dx-dashboard-parameter-lookup-settings\">\r\n                        <!-- ko with: staticListLookUpSettings -->\r\n                            <div data-bind=\"dx-dashboard-form-adapter: { target: $data }\" class=\"dx-dashboard-properties\"></div>\r\n                        <!-- /ko-->\r\n                        <!-- ko with: dynamicListLookUpSettings -->\r\n                            <div data-bind=\"dx-dashboard-form-adapter: { target: $data }\" class=\"dx-dashboard-properties\"></div>\r\n                        <!-- /ko -->\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</script>\n<script type=\"text/html\" id=\"dx-dashboard-form-parameters-settings\">\r\n    <div class=\"dx-dashboard-form-column dx-dashboard-form-left-column\">\r\n        <div class=\"dx-dashboard-form-column-content-wrapper\">\r\n            <div class=\"dx-dashboard-form-row-caption dx-dashboard-form-row-caption-with-actions\">\r\n                <span data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.Parameters.ParameterList')\"></span>\r\n                <div>\r\n                    <!-- ko if: dashboard().parameters().length > 0 -->\r\n                    <div class=\"dx-dashboard-form-row-action\" data-bind=\"click: addParameter,\r\n                            text: $root.getLocalizationById('DashboardWebStringId.Add'),\r\n                            attr: { title: $root.getLocalizationById('DashboardWebStringId.Parameters.AddParameter.Tooltip') }\">\r\n                    </div>\r\n                    <!-- /ko -->\r\n                    <!-- ko if: dashboard().parameters().length > 1 -->\r\n                    <div class=\"dx-dashboard-form-row-action\" data-bind=\"click: toggleReordering,\r\n                            text: allowReordering() ? $root.getLocalizationById('DashboardWebStringId.Parameters.Done'): $root.getLocalizationById('DashboardWebStringId.Parameters.Reorder')\">\r\n                    </div>\r\n                    <!-- /ko -->\r\n                </div>\r\n            </div>\r\n            <!-- ko if: dashboard().parameters().length > 0 -->\r\n            <div class=\"dx-dashboard-form-row-content\">\r\n                <div class=\"dx-dashboard-form-settings-parameters-list\" data-bind=\"dxList: {\r\n                     dataSource: dashboard().parameters,\r\n                     selectionMode: 'single',\r\n                     itemDragging: {\r\n                         allowReordering: allowReordering,\r\n                     },\r\n                     onItemReordered: reorderParameters,\r\n                     selectedItems: $data.selectedParameters,\r\n                     nextButtonText: $root.getLocalizationById('DashboardWebStringId.More'),\r\n                     searchEnabled: true,\r\n                     searchExpr: ['name', 'description'],\r\n                     searchEditorOptions: {\r\n                       placeholder: $root.getLocalizationById('DashboardWebStringId.Search')\r\n                     }\r\n                }\">\r\n                    <div class=\"dx-dashboard-parameter-item\">\r\n                        <div class=\"dx-dashboard-parameter-entry\">\r\n                            <div>\r\n                                <span class=\"dx-dashboard-parameter-name\" data-bind=\"text: name\"></span>\r\n                                <!-- ko if: description-->\r\n                                <br/>\r\n                                <span class=\"dx-dashboard-parameter-description\" data-bind=\"text: description\"></span>\r\n                                <!-- /ko -->\r\n                            </div>\r\n                        </div>\r\n                        <!-- ko ifnot: $parent.allowReordering -->\r\n                        <div class=\"dx-dashboard-remove-icon\" data-bind=\"click: $parent.removeParameter\">\r\n                            <svg><use xlink:href=\"#dx-dashboard-remove\" /></svg>\r\n                        </div>\r\n                        <!-- /ko -->\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!-- /ko -->\r\n            <!-- ko ifnot: dashboard().parameters().length > 0 -->\r\n            <div class=\"dx-dashboard-form-row-content\">\r\n                <div class=\"dx-dashboard-form-parameter-placeholder\">\r\n                    <div>\r\n                        <span class=\"dx-dashboard-form-inline-action\" data-bind=\"click: addParameter, text: $root.getLocalizationById('DashboardWebStringId.Parameters.AddParameter')\"></span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!-- /ko -->\r\n        </div>\r\n    </div>\r\n    <div class=\"dx-dashboard-form-column dx-dashboard-form-right-column\">\r\n        <div class=\"dx-dashboard-form-column-content-holder\">\r\n            <div class=\"dx-dashboard-form-column-content-wrapper\">\r\n                <!-- ko if: dashboard().parameters().length > 0 -->\r\n                <div class=\"dx-dashboard-form-row-content\">\r\n                    <!-- ko if: parameterEditorViewModel  -->\r\n                        <div data-bind=\"template: { name: 'dx-dashboard-parameter-settings', data: parameterEditorViewModel }\" class=\"dx-dashboard-parameter-settings\"></div>\r\n                    <!-- /ko -->\r\n                </div>\r\n                <!-- /ko -->\r\n                <!-- ko ifnot: dashboard().parameters().length > 0 -->\r\n                <div class=\"dx-dashboard-form-row-content\">\r\n                    <div class=\"dx-dashboard-form-parameter-placeholder\">\r\n                        <div data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.Parameters.NoSelectedParameter')\"></div>\r\n                    </div>\r\n                </div>\r\n                <!-- /ko -->\r\n            </div>\r\n        </div>\r\n    </div>\r\n</script>\r\n\n<script type=\"text/html\" id=\"dx-dashboard-properties-accordion\">\r\n    <div data-bind=\"dxAccordion: {\r\n                dataSource: !$data.useSecondaryModel ? propertiesController.accordionDataSource : propertiesController.secondaryAccordionDataSource,\r\n                itemTitleTemplate: 'title',\r\n                itemTemplate: 'itemCategory',\r\n                focusStateEnabled: false,\r\n                selectedIndex: !$data.useSecondaryModel ? propertiesController.selectedIndex : propertiesController.secondarySelectedIndex,\r\n                collapsible: true,\r\n                noDataText: $root.getLocalizationById('DashboardStringId.MessageLoading'),\r\n                onItemRendered: function (e) {\r\n                    if(e.itemData.hasNoBorder) {\r\n                        $root.$unwrap(e.itemElement).classList.add('dx-dashboard-accordion-item-no-border');\r\n                    }\r\n                },\r\n                onSelectionChanged: function(e) {\r\n                    if(e.addedItems[0] && e.addedItems[0].tabModel) {\r\n                        e.addedItems[0].tabModel(e.addedItems[0].tabModel())\r\n                    }\r\n                }\r\n           }\">\r\n        <div data-options=\"dxTemplate : { name: 'title', visible: 'visible' }\" data-bind=\"\r\n        css: $data.style, \r\n        style: { height: $data.headerHeight ? $data.headerHeight + 'px': '' },\r\n        dxclick: function(data, event) { $data.onTitleClick && $data.onTitleClick($data.headerModel || $data.tabModel, data, event); }\r\n        \"\r\n        >\r\n            <!-- ko if: $data.headerTemplate -->\r\n                <!-- ko template: { name: $data.headerTemplate, data: $data.headerModel || $data.tabModel } -->\r\n                <!-- /ko -->\r\n            <!-- /ko -->\r\n            <!-- ko ifnot: $data.headerTemplate -->\r\n                <!-- ko template: { name: 'dx-dashboard-properties-header-template' } -->\r\n                <!-- /ko -->\r\n            <!-- /ko -->\r\n        </div>\r\n        <div data-options=\"dxTemplate : { name: 'itemCategory', visible: 'visible' }\" data-bind=\"css: $data.style\">\r\n            <div>\r\n                <!-- ko template: 'dx-dashboard-accordion-tab-content' -->\r\n                <!-- /ko -->\r\n            </div>\r\n            <div class=\"dx-shadow dx-shadow-bottom\"></div>\r\n        </div>\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-accordion-tab-content\">\r\n    <!-- ko if: $data.tabTemplate -->\r\n    <!-- ko template: { name: $data.tabTemplate, data: $data.tabModel } -->\r\n    <!-- /ko -->\r\n    <!-- /ko -->\r\n    <!-- ko ifnot: $data.tabTemplate -->\r\n        <!-- ko with: $data.tabModel -->\r\n            <div data-bind=\"dx-dashboard-form-adapter: { target: $data }\" class=\"dx-dashboard-properties\"></div>\r\n        <!-- /ko -->\r\n    <!-- /ko -->\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-content-in-tab-header-template\">\r\n     <!-- ko with: $data -->\r\n        <div data-bind=\"dx-dashboard-form-adapter: { target: $data }\" class=\"dx-dashboard-properties\"></div>\r\n    <!-- /ko -->\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-properties-header-template\">\r\n    <div class=\"dx-shadow dx-shadow-top\"></div>\r\n    <div class=\"dx-dashboard-accordion-title-content\">\r\n        <h5 data-bind=\"text: $root.getLocalizationById($data.category)\"></h5>\r\n        <!-- ko if: $data.summary -->\r\n        <h6 data-bind=\"text: $root.getLocalizationById($data.summary && $data.summary()), attr: { title: $data.summaryHint && $data.summaryHint() }\"></h6>\r\n        <!-- /ko -->\r\n        <!-- ko ifnot: $data.summary -->\r\n        <h6></h6>\r\n        <!-- /ko -->\r\n    </div>\r\n</script>\r\n\n<script type=\"text/html\" id=\"dx-dashboard-text-box-item-editor-extension\">\r\n    <div class=\"dx-dashboard-text-box-item-editor-popup\" data-bind=\"dxPopup: {\r\n             target: $root.getWidgetContainer(),\r\n             container: $root.getWidgetContainer(),\r\n             closeOnOutsideClick: true,\r\n             showTitle: true,\r\n             deferRendering: true,\r\n             onHiding: onHiding,\r\n             onHidden: onHidden,\r\n             onInitialized: onInitialized,\r\n             title: $root.getLocalizationById('DashboardWebStringId.TextBoxItemEditor.DialogCaption'),\r\n             toolbarItems: [\r\n                {\r\n                    toolbar: 'bottom', location: 'after', widget: 'dxButton', \r\n                    options: {\r\n                        text: $root.getLocalizationById('DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose'),\r\n                        onClick: saveAndClose,\r\n                        type: 'default'\r\n                    }\r\n                },\r\n                {\r\n                    toolbar: 'bottom', location: 'after', widget: 'dxButton', \r\n                    options: {\r\n                        text: $root.getLocalizationById('DashboardWebStringId.TextBoxItemEditor.DialogClose'),\r\n                        onClick: close\r\n                    }\r\n                }\r\n                ]\r\n             }\">\r\n             <!-- ko with: richEditorOptions -->\r\n             <div style=\"display: block; position: relative;\" data-bind=\"dx-dashboard-rich-edit: $data\"> </div>\r\n             <!-- /ko -->\r\n    </div>\r\n    \r\n    <!-- ko template: { name: \"dx-dashboard-confirm-dialog\", data: confirmDialogViewModel } -->\r\n    <!-- /ko -->\r\n</script>\n<script type=\"text/html\" id=\"dx-dashboard-toolbox-extension\">\r\n    <div class=\"dx-dashboard-toolbox-extension\" data-bind=\"style: { left: designerPanelLeft() + 'px' }\">\r\n        <!-- ko template: 'dx-dashboard-menu' -->\r\n        <!-- /ko -->\r\n        <!-- ko template: 'dx-dashboard-toolbox' -->\r\n        <!-- /ko -->\r\n        <!-- ko template: 'dx-dashboard-toolbar' -->\r\n        <!-- /ko -->\r\n    </div>\r\n</script>\r\n\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-menu\">\r\n\r\n    <!-- toogle menu button -->\r\n    <div class=\"dx-dashboard-designer-menu-button\" data-bind=\"click: toggleMenu\">\r\n        <svg><use xlink:href=\"#dx-dashboard-designer-menu-icon\"></use></svg>\r\n    </div>\r\n\r\n    <!-- menu -->\r\n    <div class=\"dx-dashboard-designer-menu-popup\" data-bind=\"dxPopup: {\r\n        target: $root.getWidgetContainer(),\r\n        container: $root.getWidgetContainer(),\r\n        position: {\r\n            my: 'left top',\r\n            at: 'left top',\r\n            collision: 'flipfit',\r\n            boundaryOffset: '0, 0',\r\n            boundary: $root.getWidgetContainer(),\r\n            offset: '0, 0'\r\n        },\r\n        animation: {\r\n            show: { type: 'slide', from: { left: -240 }, to: { left: 0 } },\r\n            hide: { type: 'slide', from: { left: 0 }, to: { left: -240 } }\r\n        },\r\n        focusStateEnabled: false,\r\n        showCloseButton: false,\r\n        dragEnabled: false,\r\n        width: settingsFormVisible() ? '100%' : 240,\r\n        height: '100%',\r\n        titleTemplate: 'menuTitleTemplate',\r\n        closeOnOutsideClick: !settingsFormVisible(),\r\n        closeOnTargetScroll: false,\r\n        visible: menuVisible\r\n    }\">\r\n        <div class=\"dx-dashboard-designer-menu-header\" data-options=\"dxTemplate: { name: 'menuTitleTemplate' }\">\r\n            <span data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.DashboardMenu')\"></span>\r\n            <div class=\"dx-dashboard-designer-menu-close\" data-bind=\"click: function() { toggleMenu(); }\">\r\n                <svg><use xlink:href=\"#dx-dashboard-main-menu-close\"></use></svg>\r\n            </div>\r\n        </div>\r\n        <div class=\"dx-dashboard-designer-menu\" data-bind=\"dxScrollView: { direction: 'vertical' }\">\r\n            <ul class=\"dx-theme-generic-typography\">\r\n                <!-- ko foreach: menuItemsSorted -->\r\n                <li class=\"dx-dashboard-main-menu-item\" data-bind=\"click: disabled() ? null : $parent.menuItemClick,\r\n                text: $root.getLocalizationById(title), css: {\r\n                    'dx-state-selected': selected,\r\n                    'dx-state-disabled': disabled,\r\n                    'dx-separator': $data.hasSeparator\r\n                }\"></li>\r\n                <!-- /ko -->\r\n            </ul>\r\n        </div>\r\n        <!-- ko if: settingsFormVisible() && settingsForm() -->\r\n        <div class=\"dx-dashboard-dashboard-form dx-dashboard-typography dx-dashboard-property-grid dx-dashboard-settings-form\">\r\n            <div class=\"dx-dashboard-settings-form-title\" data-bind=\"text: $root.getLocalizationById(settingsForm().title)\">\r\n            </div>\r\n            <div class=\"dx-dashboard-settings-form-content\">\r\n                <div>\r\n                    <!-- ko template:{ name: settingsForm().template, data: settingsForm().data } -->\r\n                    <!-- /ko -->\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <!-- /ko -->\r\n    </div>\r\n\r\n        <!-- right form -->\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-toolbar\">\r\n\r\n    <!-- toolbar -->\r\n    <div class=\"dx-dashboard-toolbar\" data-bind=\"element-height-change-provider: { model: toolbarGroupsSorted, height: toolbarHeight } \">\r\n        <div class=\"dx-dashboard-toolbox-group-separator\"></div>\r\n        <!-- ko foreach: toolbarGroupsSorted -->\r\n        <!-- ko foreach: items -->\r\n            <!-- ko if: $data['template'] -->\r\n                <!-- ko template: $data['template'] -->\r\n                <!-- /ko -->\r\n            <!-- /ko -->\r\n            <!-- ko if: $data['icon']-->\r\n                    <div class=\"dx-dashboard-toolbar-action\" data-bind=\"attr: { title: $root.getLocalizationById(title) },\r\n                         click: click, \r\n                         css: { 'dx-state-disabled': disabled }\">\r\n                        <svg><use data-bind=\"xlinkHref: icon\"></use></svg>\r\n                    </div>\r\n            <!-- /ko -->\r\n        <!-- /ko -->\r\n        <div class=\"dx-dashboard-toolbox-group-separator\"></div>\r\n        <!-- /ko -->\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-toolbox\">\r\n\r\n    <!-- toolbox -->\r\n    <div class=\"dx-dashboard-toolbox dx-dashboard-toolbox-group-separator\" data-bind=\"\r\n         dxScrollView: { direction: 'vertical'},\r\n         style: { bottom: toolbarHeight() + 'px' }\">\r\n        <!-- ko foreach: toolboxGroupsSorted -->\r\n        <div class=\"dx-dashboard-toolbox-group\" data-bind=\"text: $root.getLocalizationById(title)\"></div>\r\n        <!-- ko foreach: items -->\r\n        <div class=\"dx-dashboard-toolbox-item\" data-bind=\"toolboxitemdraggable: $data,\r\n                attr: { 'data-item-type': type, title: $root.getLocalizationById(title) },\r\n                click: click,\r\n                css: { 'dx-state-disabled': disabled }\"\r\n             draggable=\"true\">\r\n            <svg>\r\n                <use data-bind=\"xlinkHref: icon\"></use>\r\n            </svg>\r\n            <div class=\"dx-dashboard-toolbox-item-hover\"></div>\r\n        </div>\r\n        <!-- /ko -->\r\n        <div class=\"dx-dashboard-toolbox-group-separator\"></div>\r\n        <!-- /ko -->\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-toolbox-extension-layout-item-placeholder\">\r\n    <div class=\"dx-toolbox-extension-layout-item-placeholder-wrapper\">\r\n        <div class=\"dx-toolbox-extension-layout-item-placeholder\">\r\n            <div data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.AddItemInvitation')\"></div>\r\n            <div>\r\n                <!-- ko foreach: dashboardItems -->\r\n                <div class=\"dx-dashboard-toolbox-item\" data-bind=\"attr: { title: $root.getLocalizationById(title) }\">\r\n                    <svg>\r\n                        <use data-bind=\"xlinkHref: iconName\"></use>\r\n                    </svg>\r\n                    <div class=\"dx-dashboard-toolbox-item-button\" data-bind=\"attr: { 'data-item-type': type }, click:  $parent.addDashboardItem\"></div>\r\n                </div>\r\n                <!-- /ko -->\r\n            </div>\r\n        </div>\r\n    </div>\r\n</script>\r\n\n<script type=\"text/html\" id=\"dx-slidable-lists-navigation-area\">\r\n    <div class=\"dx-slidable-lists-navigation\" data-bind=\"visible: !!ancestors\">\r\n        <!-- ko with: ancestors -->\r\n        <div class=\"dx-slidable-lists-breadcrumb\" data-bind=\"attr: { title: $data.map(function(el) { return $root.getLocalizationById(el); }).join('/') }\">\r\n            <!-- ko foreach: $data -->\r\n                <!-- ko if: ($index() !== ($parent.length - 1)) -->\r\n                <span class=\"dx-slidable-lists-navigation-path-item dx-slidable-lists-navigation-path-item-link\" data-bind=\"text: $root.getLocalizationById($data), click: function(data) { var handler = $parents[3].backClick || $parents[1].backClick; handler(data, $parent); }\"></span>\r\n                <span>/</span>\r\n                <!-- /ko -->\r\n                <!-- ko if: ($index() === ($parent.length - 1)) -->\r\n                <span class=\"dx-slidable-lists-navigation-path-item\" data-bind=\"text: $root.getLocalizationById($data)\"></span>\r\n                <!-- /ko -->\r\n            <!-- /ko -->\r\n        </div>\r\n        <!-- /ko -->\r\n        <div class=\"dx-slidable-lists-navigation-empty-area\"></div>\r\n    </div>\r\n</script>\n<script type=\"text/html\" id=\"dx-dashboard-page-data-source-type\">\r\n    <div class=\"dx-dashboard-page-data-source-type\">\r\n        <div data-bind=\"css: { selected: selectedType() === 'Sql' }, click: function() { return selectedType('Sql'); }\">\r\n            Sql\r\n        </div>\r\n        <div data-bind=\"css: { selected: selectedType() === 'Olap' }, click: function() { return selectedType('Olap'); }\">\r\n            Olap\r\n        </div>\r\n    </div>\r\n</script>\r\n\r\n\n\r\n\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-data-items-header\">\r\n    <div data-bind=\"dxclick: function(data, event) { event.stopPropagation(); return false; }\">\r\n    <dx-dashboard-group-data-items params=\"model: $data.model(), holder: $data\"></dx-dashboard-group-data-items>\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-group-data-items\">\r\n    <!-- ko foreach: dataItems -->\r\n    <dx-dashboard-data-item-link params=\"binding: binding,\r\n        item: item, \r\n        click: click,\r\n        selected: false,\r\n        dataItemDisplayNameProvider: dataItemDisplayNameProvider,\r\n        removeDataItem: removeDataItem,\r\n        placeholder: placeholder,\r\n        embeddedRemovalIcon: true,\r\n        error: $parent.holder.dataItemErrorFactory && $parent.holder.dataItemErrorFactory($data.item.dataItem())\"></dx-dashboard-data-item-link>\r\n    <!-- /ko -->\r\n</script>\r\n\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-data-item-general\">\r\n    <div class=\"dx-dashboard-field-chooser\" data-bind=\"css: { 'dx-dashboard-include-summary': $data.additionalProperties()}\">\r\n        <dx-field-chooser params=\"dataSourceBrowser: dataSourceBrowser, filter: constraint, startPath: dataMemberPath(), selectedField: choosenField()\"></dx-field-chooser>\r\n    </div> \r\n    <!-- ko with: additionalProperties -->\r\n    <div data-bind=\"if: $data\">\r\n        <div data-bind=\"dx-dashboard-form-adapter: { target: $data }\" class=\"dx-dashboard-properties\"></div>\r\n    </div>   \r\n    <!-- /ko -->\r\n</script>\r\n\r\n\n<script type=\"text/html\" id=\"dx-dashboard-container-types-header\">\r\n    <div class=\"dx-dashboard-container-types-header\">\r\n        <!-- do NOT reindent these lines -->\r\n        <!-- ko foreach: shortAvailableContainerTypes --><div \r\n            class=\"dx-dashboard-container-type\"\r\n            data-bind=\"\r\n                component: {\r\n                    name: 'dx-dashboard-checked-button',\r\n                    params: {  \r\n                        isSelected: $data.selected,\r\n                        hint: $root.getLocalizationById(displayName),\r\n                        icon: icon,\r\n                        click: function(e) { $parent.itemClick($data, e.event) }\r\n                    }\r\n                }\">\r\n        </div><!-- /ko --><!-- ko if: hasFullList -->\r\n        <div class=\"dx-dashboard-container-type dx-dashboard-type-more\">\r\n            <div class=\"dx-dashboard-type-selector-more-close\" \r\n                data-bind=\"\r\n                    component: {\r\n                        name: 'dx-dashboard-checked-button',\r\n                        params: {  \r\n                            hint: $root.getLocalizationById('DashboardStringId.CloseCaption'),\r\n                            icon: 'dx-dashboard-close'\r\n                        }\r\n                    }\">\r\n            </div>\r\n            <div class=\"dx-dashboard-type-selector-more-full\" \r\n                data-bind=\"\r\n                    component: {\r\n                        name: 'dx-dashboard-checked-button',\r\n                        params: {  \r\n                            hint: $root.getLocalizationById('DashboardWebStringId.Binding.ShowAll'),\r\n                            icon: 'dx-dashboard-group-types-full-list'\r\n                        }\r\n                    }\">\r\n            </div>\r\n        </div><!-- /ko -->\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-container-type-selector-header\">\r\n    <div class=\"dx-dashboard-container-types-header-container\">\r\n        <h5 data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.FilterItem.Type')\"></h5>\r\n        <div data-bind=\"template: { name: 'dx-dashboard-container-types-header' }\"></div>\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-container-style-selector-header\">\r\n    <div class=\"dx-dashboard-container-types-header-container\">\r\n        <h5 data-bind=\"text: $root.getLocalizationById('DashboardWebStringId.StyleSettings')\"></h5>\r\n        <div data-bind=\"template: { name: 'dx-dashboard-container-types-header' }\"></div>\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-container-type-selector-full\">\r\n    <!-- ko foreach: availableContainerTypeGroups -->\r\n    <div class=\"dx-dashboard-container-types\">\r\n        <!-- ko if: $data.displayName-->\r\n            <h4 data-bind=\"text: $root.getLocalizationById($data.displayName)\"></h4>\r\n        <!-- /ko -->\r\n        <!-- do NOT reindent these lines -->\r\n        <!-- ko foreach: $parent.availableContainerTypes.filter(function (type) { return type.group === $data.name; } ) --><div \r\n            class=\"dx-dashboard-container-type\"\r\n            data-bind=\"\r\n                component: {\r\n                    name: 'dx-dashboard-checked-button',\r\n                    params: {  \r\n                        isSelected: $data.selected,\r\n                        hint: $root.getLocalizationById(displayName),\r\n                        icon: icon,\r\n                        click: function(e) { $parents[1].itemClick($data, e.event) }\r\n                    }\r\n                }\">\r\n        </div><!-- /ko -->\r\n    </div><!-- /ko -->\r\n</script>\n<script type=\"text/html\" id=\"dx-dashboard-data-item-link\">\r\n    <div \r\n    class=\"dx-dashboard-data-item\"\r\n    data-bind=\"\r\n    component: {\r\n        name: 'dx-dashboard-checked-button',\r\n        params: {  \r\n            isSelected: $data.selected,\r\n            text: $data.item && $data.item.dataItem && $data.item.dataItem() && dataItemDisplayNameProvider($data.item.dataItem()) || (($root.ko.unwrap($data.selected) && $data.selectedPlaceholder) || $data.placeholder),\r\n            click: function(e) { !!$data.propertiesController ? $data.propertiesController.processDataItemClick($data) : $data.click($data); }\r\n        }\r\n    },\r\n    style: { 'z-index': 1000 - $data.index },\r\n    css: { \r\n        'dx-dashboard-data-item-remove-action-visible': $root.ko.unwrap($data.selected) && !$root.ko.unwrap($data.isEmpty),\r\n        'dx-empty': $data.isEmpty, \r\n        'dx-state-warning': $data.warning, \r\n        'dx-state-error': $data.error\r\n    },\r\n    attr: { draggable: !!$root.ko.unwrap($data.draggable) }\"></div>\r\n    \r\n    <!-- ko ifnot: $data.isEmpty  -->\r\n    <div class=\"dx-dashboard-data-item-remove-action\" data-bind=\"\r\n        click: function(model, event) { removeDataItem(item); event.stopPropagation(); },\r\n        css: { \r\n            'dx-dashboard-data-item-remove-action-visible': $root.ko.unwrap($data.selected) ,\r\n            'dx-dashboard-data-item-remove-action-embeded': $data.embeddedRemovalIcon\r\n            }\r\n        \">\r\n        <svg><use xlink:href=\"#dx-dashboard-remove-small\" /></svg>\r\n    </div>\r\n    <!-- /ko -->\r\n</script>\n<script type=\"text/html\" id=\"dx-dashboard-data-item-collection\">\r\n    <h4 data-bind=\"text: $root.getLocalizationById(sectionInfo.title)\"></h4>\r\n    <div class=\"dx-dashboard-collection\">\r\n        <!-- ko foreach: groups -->\r\n            <div class=\"dx-dashboard-drop-target\">\r\n                <div></div>\r\n            </div>\r\n            <div data-bind=\"css: { 'dx-dashboard-hierarchical-group': $data.groupIndex !== undefined }\">\r\n                <!-- ko foreach: items -->                \r\n                <dx-dashboard-data-item-link params=\"item: $data,\r\n                                        click: $parents[1].selectDataItem,\r\n                                        removeDataItem: $parents[1].removeDataItem,\r\n                                        index: $index(),\r\n                                        dataItemDisplayNameProvider: $parents[1].dataItemDisplayNameProvider,\r\n                                        propertiesController: $parents[1].itemSurface.propertiesController,\r\n                                        error: $parents[1].errorFactory($data),\r\n                                        draggable: true\"></dx-dashboard-data-item-link>\r\n\r\n                <!-- /ko -->\r\n            </div>\r\n        <!-- /ko -->\r\n\r\n        <div class=\"dx-dashboard-drop-target dx-dashboard-cover-item\" data-bind=\"css: {'dx-dashboard-hierarchical-group-cover': false}\">\r\n            <div></div>\r\n        </div>\r\n        <dx-dashboard-data-item-link params=\"selectionTarget: newItemSample,\r\n                                placeholder: sectionInfo.bindingProperty.emptyPlaceholder,\r\n                                selectedPlaceholder: sectionInfo.bindingProperty.selectedPlaceholder,\r\n                                click: addClick,\r\n                                propertiesController: $parent.itemSurface.propertiesController,\r\n                                warning: $data.warning\"></dx-dashboard-data-item-link>\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-add-pane-section\">\r\n    <div class=\"dx-dashboard-add-pane\" data-bind=\"click: addPane, title: $root.getLocalizationById('DashboardWebStringId.Chart.AddPane')\">\r\n        <!-- ko lazy: { if: $parents[3].detailVisible } -->\r\n        <svg><use xlink:href=\"#dx-dashboard-add-pane\"></use></svg>\r\n        <!-- /ko -->\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-data-item-container-collection\">\r\n    <h4 data-bind=\"text: $root.getLocalizationById(sectionInfo.title)\"></h4>\r\n    <div class=\"dx-dashboard-collection\">\r\n        <!-- ko foreach: groups -->\r\n            <div class=\"dx-dashboard-drop-target\">\r\n                <div></div>\r\n            </div>\r\n            <div data-bind=\"css: { 'dx-dashboard-hierarchical-group': $data.groupIndex !== undefined }\">\r\n                <!-- ko foreach: items -->\r\n                <dx-dashboard-data-item-link params=\"draggable: true,\r\n                                click: $parents[1].selectDataItemContainer,\r\n                                item: $data,\r\n                                removeDataItem: $parents[1].removeDataItem,\r\n                                dataItemDisplayNameProvider: $parents[1].dataItemDisplayNameProvider,\r\n                                placeholder: $parents[1].getDisplayName($data),\r\n                                isEmpty: false,\r\n                                error: $parents[1].errorFactory($data),\r\n                                propertiesController: $parents[1].itemSurface.propertiesController\r\n                                \"></dx-dashboard-data-item-link>\r\n                <!-- /ko -->\r\n            </div>\r\n        <!-- /ko -->\r\n\r\n        <div class=\"dx-dashboard-drop-target dx-dashboard-cover-item\">\r\n            <div></div>\r\n        </div>\r\n        <dx-dashboard-data-item-link params=\"selectionTarget: newContainerSample,\r\n            placeholder: sectionInfo.bindingProperty.emptyPlaceholder,\r\n            selectedPlaceholder: sectionInfo.bindingProperty.selectedPlaceholder,\r\n            click: addDataItemContainerClick,\r\n            propertiesController: $parent.itemSurface.propertiesController,\r\n            warning: $data.warning\"/>\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-dashboard-data-item-single\">\r\n    <h4 data-bind=\"text: $root.getLocalizationById(sectionInfo.title)\"></h4>\r\n    <div class=\"dx-dashboard-collection\">\r\n        <div class=\"dx-dashboard-drop-target dx-dashboard-cover-item\">\r\n            <div></div>\r\n        </div>\r\n        <dx-dashboard-data-item-link params=\"item: dataItemLink,\r\n            removeDataItem: removeDataItem,\r\n            dataItemDisplayNameProvider: dataItemDisplayNameProvider,\r\n            click: selectDataItem,\r\n            placeholder: sectionInfo.bindingProperty.emptyPlaceholder,\r\n            selectedPlaceholder: sectionInfo.bindingProperty.selectedPlaceholder,\r\n            propertiesController: $parent.itemSurface.propertiesController,\r\n            error: errorFactory(dataItemLink),\r\n            draggable: dataItemLink.uniqueName,\r\n            warning: $data.warning\" />\r\n    </div>\r\n</script>\r\n\n<script type=\"text/html\" id='dx-dashboard-collection-editor'>\r\n    <div class=\"dx-dashboard-collection-editor\">\r\n        <div class=\"dx-dashboard-collection-editor-header\" data-bind=\"visible: isToolbarVisible\">\r\n            <!-- ko if: allowAddItem -->\r\n            <div class=\"dx-dashboard-ce-icon dx-dashboard-ce-icon-add\" data-bind=\"click: add, css: { 'dx-state-disabled': !addEnabled() }\">\r\n                <svg><use xlink:href=\"#dx-dashboard-ce-add\" /></svg>\r\n            </div>\r\n            <!-- /ko -->\r\n            <!-- ko if: allowEditItem -->\r\n            <div class=\"dx-dashboard-ce-icon dx-dashboard-ce-icon-edit\" data-bind=\"click: edit, css: { 'dx-state-disabled': !editEnabled() }\">\r\n                <svg><use xlink:href=\"#dx-dashboard-ce-edit\" /></svg>\r\n            </div>\r\n            <!-- /ko -->\r\n            <!-- ko if: allowReorderItem -->\r\n            <div class=\"dx-dx-dashboard-icon-separator\"></div>\r\n            <div class=\"dx-dashboard-ce-icon dx-dashboard-ce-icon-arrow-down\" data-bind=\"click: down, css: { 'dx-state-disabled': !downEnabled() }\">\r\n                <svg><use xlink:href=\"#dx-dashboard-ce-arrow-down\" /></svg>\r\n            </div>\r\n            <div class=\"dx-dashboard-ce-icon dx-dashboard-ce-icon-arrow-up\" data-bind=\"click: up, css: { 'dx-state-disabled': !upEnabled() }\">\r\n                <svg><use xlink:href=\"#dx-dashboard-ce-arrow-up\" /></svg>\r\n            </div>\r\n            <!-- /ko -->\r\n            <!-- ko if: allowRemoveItem -->\r\n            <div class=\"dx-dashboard-ce-remove-icon\" data-bind=\"click: remove, css: { 'dx-dashboard-state-selected': !!removeEnabled() }\">\r\n                <svg><use xlink:href=\"#dx-dashboard-remove-small\" /></svg>\r\n            </div>\r\n            <!-- /ko -->\r\n            <!-- ko foreach: customToolbarItems -->\r\n            <div class=\"dx-dx-dashboard-icon-separator\"></div>\r\n            <div class=\"dx-dashboard-ce-icon dx-dashboard-ce-custom-action-icon\" data-bind=\"click: action, attr: { title: name }\">\r\n                <svg><use data-bind=\"attr: { 'xlink:href': icon }\" xlink:href='' /></svg>\r\n            </div>\r\n            <!-- /ko -->\r\n        </div>\r\n        <div class=\"dx-dashboard-list dx-dashboard-empty-message\" data-bind=\"dxList: $data.getListOptions()\"></div>\r\n    </div>\r\n</script>\n<script type=\"text/html\" id='dx-dashboard-editable-collection-editor'>\r\n    <div class=\"dx-dashboard-collection-editor\">\r\n        <div class=\"dx-dashboard-collection-editor-header\" data-bind=\"visible: isToolbarVisible\">\r\n            <!-- ko if: allowAddItem -->\r\n            <div class=\"dx-dashboard-ce-icon dx-dashboard-ce-icon-add\" data-bind=\"click: add, css: { 'dx-state-disabled': !addEnabled() }\">\r\n                <svg><use xlink:href=\"#dx-dashboard-ce-add\" /></svg>\r\n            </div>\r\n            <!-- /ko -->\r\n            <!-- ko if: allowReorderItem -->\r\n            <div class=\"dx-dx-dashboard-icon-separator\"></div>\r\n            <div class=\"dx-dashboard-ce-icon dx-dashboard-ce-icon-arrow-down\" data-bind=\"css: { 'dx-state-disabled': !downEnabled() }, click: down\">\r\n                <svg><use xlink:href=\"#dx-dashboard-ce-arrow-down\" /></svg>\r\n            </div>\r\n            <div class=\"dx-dashboard-ce-icon dx-dashboard-ce-icon-arrow-up\" data-bind=\"css: { 'dx-state-disabled': !upEnabled() }, click: up\">\r\n                <svg><use xlink:href=\"#dx-dashboard-ce-arrow-up\" /></svg>\r\n            </div>\r\n            <!-- /ko -->\r\n            <!-- ko if: allowRemoveItem -->\r\n            <div class=\"dx-dashboard-ce-remove-icon\" data-bind=\"click: remove, \r\n                 css: { 'dx-dashboard-state-selected': removeEnabled() }\">\r\n                <svg><use xlink:href=\"#dx-dashboard-remove-small\" /></svg>\r\n            </div>\r\n            <!-- /ko -->\r\n        </div>\r\n    <div class=\"dx-dashboard-editable-collection-editor\" data-bind=\"dxDataGrid: $data.getGridOptions()\"></div>\r\n</script>\n<script type=\"text/html\" id=\"dx-datasource-chooser-slider\">\r\n    <div>\r\n        <div class=\"dx-field-chooser-header-container\">\r\n        </div>\r\n        <div class=\"dx-field-chooser-scroll-holder dx-data-source-scroll-holder\">\r\n            <!-- ko template: 'dx-field-chooser-content-list' --> <!-- /ko -->\r\n        </div>\r\n    </div>\r\n</script>\n<script type=\"text/html\" id=\"dx-field-chooser-slider\">\r\n    <div>\r\n        <div class=\"dx-field-chooser-header-container\">\r\n            <!-- ko template: 'dx-field-chooser-header-area' -->\r\n            <!-- /ko -->\r\n        </div>\r\n        <div class=\"dx-field-chooser-scroll-holder\">\r\n            <!-- ko if: hasSearchResults() && isSearchMode() -->\r\n                <!-- ko template: 'dx-field-chooser-content-search-results' --> <!-- /ko -->\r\n            <!-- /ko -->\r\n            <!-- ko if: !$data.hasSearchResults || !$data.isListMode || (!hasSearchResults() && isListMode()) -->\r\n                <!-- ko template: 'dx-field-chooser-content-list' --> <!-- /ko -->\r\n            <!-- /ko -->\r\n            <!-- ko if: !hasSearchResults() && !isListMode() -->\r\n                <!-- ko template: 'dx-field-chooser-content-treeview' --> <!-- /ko -->\r\n            <!-- /ko -->\r\n        </div>\r\n\r\n    </div>\r\n    <!-- ko template: { name: 'dx-dashboard-calc-field-editor', data: calcFieldEditor  } -->\r\n    <!-- /ko -->\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-field-chooser-header-area\">\r\n    <div class=\"dx-field-chooser-header\" data-bind=\"css: { 'dx-field-chooser-search-mode': isSearchMode() }\">\r\n        <div class=\"dx-field-chooser-toolbar\">\r\n            <div class=\"dx-dashboard-ce-icon dx-field-chooser-search-button\" data-bind=\"click: searchButtonClick\">\r\n                <svg><use xlink:href=\"#dx-dashboard-fc-search\" /></svg>\r\n            </div>\r\n            <!-- ko if: canAddCalculatedField -->\r\n            <div class=\"dx-dx-dashboard-icon-separator\"></div>\r\n            <div class=\"dx-dashboard-ce-icon dx-dashboard-ce-icon-add\" data-bind=\"click: addCalcField\">\r\n                <svg><use xlink:href=\"#dx-dashboard-calc-field-add\" /></svg>\r\n            </div>\r\n            <div class=\"dx-dashboard-ce-icon\" data-bind=\"click: editCalcField, css: {'dx-state-disabled': !isCalcFieldSelected()}\">\r\n                <svg><use xlink:href=\"#dx-dashboard-ce-edit\" /></svg>\r\n            </div>\r\n            <!-- /ko -->\r\n            <div class=\"dx-field-chooser-mode-buttons\">\r\n                <!-- ko if: canAddCalculatedField -->\r\n                <div class=\"dx-dashboard-ce-icon\" data-bind=\"click: removeCalcField, css: {'dx-state-disabled': !isCalcFieldSelected()}\">\r\n                    <svg><use xlink:href=\"#dx-dashboard-remove-small\" /></svg>\r\n                </div>\r\n                <!-- /ko -->\r\n                <!-- ko if: hasGroups() -->\r\n\r\n                    <div class=\"dx-field-chooser-header-button\" \r\n                        data-bind=\"\r\n                            component: {\r\n                                name: 'dx-dashboard-checked-button',\r\n                                params: {  \r\n                                    isSelected: isListMode,\r\n                                    icon: 'dx-dashboard-fc-mode-list',\r\n                                    click: setListMode\r\n                                }\r\n                            }\">\r\n                    </div>\r\n                    <div class=\"dx-field-chooser-header-button\" \r\n                        data-bind=\"\r\n                            component: {\r\n                                name: 'dx-dashboard-checked-button',\r\n                                params: {  \r\n                                    isSelected: !isListMode(),\r\n                                    icon: 'dx-dashboard-fc-mode-tree',\r\n                                    click: setTreeMode\r\n                                }\r\n                            }\">\r\n                    </div>\r\n                <!-- /ko -->\r\n            </div>\r\n        </div>\r\n        <div class=\"dx-field-chooser-find-area\">            \r\n            <div class=\"dx-field-chooser-search\">\r\n                <div data-bind=\"dxTextBox: { value: searchString, valueChangeEvent: 'keyup', showClearButton: true, \r\n                     placeholder: $root.getLocalizationById('DashboardWebStringId.Binding.Searching'), disabled: !isSearchMode() }\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-field-chooser-content-search-results\">\r\n    <div class=\"dx-field-chooser-lists-container\">\r\n        <div class=\"dx-dashboard-list dx-dashboard-empty-message\" data-bind=\"dxList: {\r\n                 items: searchResults,\r\n                 onItemClick: selectViaSearchResults,\r\n                 selectionMode: 'single',\r\n                 selectedItems: [selectedSearchResult()],\r\n                 noDataText: $root.getLocalizationById('DashboardWebStringId.Binding.EmptySearchResult'),\r\n                 }\">\r\n            <div data-options=\"dxTemplate : { name: 'item' }\">\r\n                <div class=\"dx-field-chooser-search-list-item\" data-bind=\"css: {'dx-has-path': path.length > 0 }\">\r\n                    <div class=\"dx-field-chooser-search-list-item-name\" data-bind=\"text: item.displayName, attr: { title: $root.ko.unwrap(item.displayName).length > 30 ? item.displayName : null }, css: {'dx-dashboard-corrupted-calc-field': item.isCorruptedCalcField }\"></div>\r\n                    <div class=\"dx-field-chooser-search-list-item-path\" data-bind=\"text: path, attr: { title: path.length > 30 ? path : null }\"></div>\r\n                    <!-- ko template: { name: 'dx-field-chooser-field-type', data: item } -->\r\n                    <!-- /ko -->\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-field-chooser-content-list\">\r\n    <div class=\"dx-field-chooser-lists-container\">\r\n        <!-- ko foreach: lists -->\r\n        <div class=\"dx-field-chooser-list\" data-bind=\"css: { 'dx-state-ready': ready }, style: { left: $element.offsetWidth * index() + 'px' }\">\r\n            <!-- ko template: { name: 'dx-slidable-lists-navigation-area', data: $data } -->\r\n            <!-- /ko -->\r\n            <div class=\"dx-dashboard-list dx-dashboard-empty-message\" data-bind=\"dxList: {\r\n                dataSource: items,\r\n                pageLoadMode: 'scrollBottom',\r\n                onItemClick: itemClick,\r\n                selectionMode: 'single',\r\n                selectedItemKeys:  selectedItemName(),\r\n                keyExpr: 'name',\r\n                noDataText: $root.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay')\r\n                }, css: { 'dx-hierarchical-field-chooser-list' : !!ancestors }\">\r\n                <div data-options=\"dxTemplate : { name: 'item' }\">\r\n                    <div class=\"dx-field-chooser-list-item\" data-bind=\"attr: { title: $root.ko.unwrap(displayName).length > 22 ? displayName : null }, \r\n                        css: { 'dx-dashboard-has-children': $root.ko.unwrap(isGroup) }\">\r\n                        <span data-bind=\"text: displayName, css: {'dx-dashboard-corrupted-calc-field': $data.isCorruptedCalcField }\"></span>\r\n                        <!-- ko template: 'dx-field-chooser-field-type' -->\r\n                        <!-- /ko -->\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"dx-field-chooser-list-loading\" data-bind=\"dxLoadIndicator: { visible: loading }\">\r\n            </div>\r\n        </div>\r\n        <!-- /ko -->\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-field-chooser-content-treeview\">\r\n    <div class=\"dx-field-chooser-tree-view-container\">\r\n        <div class=\"dx-dashboard-treeview dx-dashboard-empty-message dx-field-chooser-tree-view\" data-bind=\"dxTreeView: dataSourceTreeOptions\">\r\n            <div class=\"dx-field-chooser-list-item\" data-bind=\"css: { 'dx-field-chooser-group-list-item': $data.isGroup }\">\r\n                <span data-bind=\"text: displayName, attr: { title: $root.ko.unwrap(displayName).length > 20 ? displayName : null }, css: {'dx-dashboard-corrupted-calc-field': $data.isCorruptedCalcField }\" ></span>\r\n                <!-- ko template: 'dx-field-chooser-field-type' -->\r\n                <!-- /ko -->\r\n            </div>\r\n        </div>\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"dx-field-chooser-field-type\">\r\n    <div class=\"dx-dashboard-field-kind\" data-bind=\"if: isOlap || isCalcField\">\r\n        <!-- ko if: $data.isOlapDimension-->\r\n        <svg>\r\n            <use xlink:href=\"#dx-dashboard-olap-dimension\" />\r\n        </svg>\r\n        <!-- /ko -->\r\n        <!-- ko if: $data.isOlapDimensionHierarchy-->\r\n        <svg>\r\n            <use xlink:href=\"#dx-dashboard-olap-dimension-hierarchy\" />\r\n        </svg>\r\n        <!-- /ko -->\r\n        <!-- ko if: $data.isOlapMeasure-->\r\n        <svg>\r\n            <use xlink:href=\"#dx-dashboard-olap-measure\" />\r\n        </svg>\r\n        <!-- /ko -->\r\n        <!-- ko if: $data.isCalcField-->\r\n            <!-- ko if: $data.isAggregate-->\r\n                <svg><use xlink:href=\"#dx-dashboard-calc-field-aggregate\" /></svg>\r\n            <!-- /ko -->\r\n            <!-- ko ifnot: $data.isAggregate-->\r\n                <svg><use xlink:href=\"#dx-dashboard-calc-field\" /></svg>\r\n            <!-- /ko -->\r\n        <!-- /ko -->\r\n\r\n    </div>\r\n    <div class=\"dx-dashboard-field-type\" style=\"pointer-events: auto;\" data-bind=\"attr: { title: $data.typeTooltip}, style: { cursor: $data.isList ? 'default' : 'inherit' }\">\r\n        <!-- ko if: !$data.isCorruptedCalcField -->\r\n            <svg>\r\n                <use data-bind=\"xlinkHref: 'dx-dashboard-datatype-' + $data.normalizedType\"></use>\r\n            </svg>\r\n        <!-- /ko -->\r\n        <!-- ko if: $data.isCorruptedCalcField -->\r\n            <svg>\r\n                <use xlink:href=\"#dx-dashboard-calc-field-corrupted\" />\r\n            </svg>\r\n        <!-- /ko -->\r\n    </div>\r\n</script>" };


/***/ }),
/* 731 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var devices_1 = __webpack_require__(119);
var string_1 = __webpack_require__(30);
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var _utils_1 = __webpack_require__(3);
var caption_toolbar_options_1 = __webpack_require__(64);
var DashboardPanelExtension = (function () {
    function DashboardPanelExtension(dashboardControl, options) {
        if (options === void 0) { options = {}; }
        var _this = this;
        this.dashboardControl = dashboardControl;
        this.options = options;
        this.name = 'dashboard-panel';
        this._iconBack = 'dx-dashboard-back';
        this._flexParent = 'dx-dashboard-flex-parent';
        this._dashboardsButton = 'dx-dashboard-back-button';
        this._dashboardTruncated = 'dx-dashboard-truncated';
        this._ellipsisText = 'dx-dashboard-ellipsis';
        this._itemTemplate = ko.observable();
        this._isMobile = ko.observable(false);
        this._disposables = [];
        this.panelWidth = 250;
        this.visible = ko.observable(false);
        this.allowSwitchToDesigner = ko.observable();
        this.selectedItemKeys = ko.observableArray();
        this.availableDashboards = ko.observableArray();
        this._actualPanelWidth = ko.observable();
        this.showPanelAsync = function (options) {
            var def = $.Deferred();
            _this.visible(true);
            _this.updateDashboardsList();
            setTimeout(function () {
                options.surfaceLeft = _this.panelWidth;
                def.resolve(options);
            }, 500);
            return def.promise();
        };
        this.hidePanelAsync = function (options) {
            var def = $.Deferred();
            _this.visible(false);
            setTimeout(function () {
                options.surfaceLeft = 0;
                def.resolve(options);
            }, 500);
            return def.promise();
        };
        this.switchToViewer = function () {
            _this.dashboardControl.switchToViewer();
        };
        this.switchToDesigner = function () {
            _this.dashboardControl.switchToDesigner();
        };
        this.designerToViewerAction = {
            orderNo: 60,
            action: this.showPanelAsync
        };
        this.viewerToDesignerAction = {
            orderNo: 20,
            action: this.hidePanelAsync
        };
    }
    Object.defineProperty(DashboardPanelExtension.prototype, "_templateName", {
        get: function () {
            if (this._isMobile()) {
                return this.options.dashboardThumbnail ? 'dashboard-preview' : 'dashboard-card-view';
            }
            return 'dashboard-list-item';
        },
        enumerable: true,
        configurable: true
    });
    DashboardPanelExtension.prototype.start = function () {
        var _this = this;
        var mobileExtension = this.dashboardControl.findExtension('mobile-layout');
        this._isMobile(mobileExtension && mobileExtension.mobileLayoutEnabled());
        mobileExtension && mobileExtension.mobileLayoutEnabled.subscribe(function () {
            _this.stop();
            _this.start();
        });
        if (this._isMobile())
            this.allowSwitchToDesigner(false);
        else if (this.allowSwitchToDesigner() === undefined) {
            this.allowSwitchToDesigner(this.dashboardControl.allowSwitchToDesigner);
        }
        this.visible(this._isMobile() ? false : !this.dashboardControl.isDesignMode());
        this._itemTemplate(this._templateName);
        if (this._isMobile()) {
            this._actualPanelWidth($(window).width());
            devices_1.default.on('orientationChanged', function (e) {
                _this._actualPanelWidth($(window).width());
            });
        }
        else {
            this._actualPanelWidth(this.panelWidth);
        }
        this._customTemplate = this._getCustomTemplate();
        this.dashboardControl.customTemplates.push(this._customTemplate);
        this._disposables.push(this.dashboardControl.dashboardContainer.subscribe(function (dashboardContainer) {
            if (dashboardContainer) {
                _this._validateSelection(dashboardContainer, _this.availableDashboards());
            }
        }));
        if (this._isMobile()) {
            var api = this.dashboardControl.findExtension('viewer-api');
            api.on('dashboardTitleToolbarUpdated', function (args) {
                args.options.navigationItems.push({
                    name: caption_toolbar_options_1.dashboardToolbarItemNames.dashboardList,
                    type: 'button',
                    template: function () {
                        return $('<div/>')
                            .addClass([_this._flexParent, _this._ellipsisText].join(' '))
                            .append($('<svg><use xlink:href="#' + _this._iconBack + '" /></svg>'))
                            .append($('<div/>').text(_default_1.getLocalizationById('DashboardWebStringId.Dashboards')).addClass([_this._dashboardsButton, _this._dashboardTruncated].join(' ')));
                    },
                    click: function () {
                        _this.showPanelAsync({ surfaceLeft: _this._actualPanelWidth() });
                    }
                });
            });
        }
        if (!this.dashboardControl.isDesignMode()) {
            this.dashboardControl.surfaceLeft(this._isMobile() ? 0 : this.panelWidth);
        }
        this.updateDashboardsList();
    };
    DashboardPanelExtension.prototype.stop = function () {
        this._disposables.forEach(function (d) { return d.dispose(); });
        this._disposables = [];
        this.dashboardControl.customTemplates.remove(this._customTemplate);
    };
    DashboardPanelExtension.prototype.updateDashboardsList = function () {
        var _this = this;
        var dashboardContainer = this.dashboardControl.dashboardContainer();
        var options = this.options;
        this.dashboardControl.requestDashboardList().done(function (availableDashboards) {
            _this.availableDashboards(availableDashboards.map(function (dashboard) { return new PanelExtensionDashboardInfo(dashboard.id, dashboard.name, options.dashboardThumbnail ? string_1.format(options.dashboardThumbnail, dashboard.id) : undefined); }));
            _this._validateSelection(_this.dashboardControl.dashboardContainer(), _this.availableDashboards());
        });
    };
    DashboardPanelExtension.prototype._validateSelection = function (dashboardContainer, avaliableDashboards) {
        if (dashboardContainer) {
            var dashboardInfo = avaliableDashboards.filter(function (info) { return info.id === dashboardContainer.id; })[0];
            if (dashboardInfo) {
                this.selectedItemKeys([dashboardInfo.id]);
            }
        }
    };
    DashboardPanelExtension.prototype._hidePanel = function () {
        if (this._isMobile()) {
            this.hidePanelAsync({ surfaceLeft: 0 });
        }
    };
    DashboardPanelExtension.prototype._getCustomTemplate = function () {
        var _this = this;
        var enableAnimation = ko.observable(!this.visible());
        var listOptions = {
            noDataText: '',
            keyExpr: 'id',
            selectionMode: 'single',
            itemTemplate: this._itemTemplate,
            activeStateEnabled: false,
            selectedItemKeys: this.selectedItemKeys,
            onItemClick: function () { _this._hidePanel(); },
            searchEnabled: ko.computed(function () { return _this._isMobile(); }),
            searchExpr: ['id', 'name'],
            hoverStateEnabled: ko.computed(function () { return !_this._isMobile(); }),
            focusStateEnabled: false,
            searchEditorOptions: {
                placeholder: _default_1.getLocalizationById('DashboardWebStringId.Search')
            },
            onOptionChanged: function (e) {
                if (e.name === 'selectedItemKeys' && _this.selectedItemKeys().length > 0) {
                    var selectedItem = _this.availableDashboards().filter(function (item) { return item.id === _this.selectedItemKeys()[0]; })[0];
                    e.component.scrollToItem(_this.availableDashboards().indexOf(selectedItem));
                }
            },
            onSelectionChanged: function (e) {
                if (e.addedItems.length) {
                    var newDashboardId = e.addedItems[0].id;
                    if (!_this.dashboardControl.dashboardContainer() || _this.dashboardControl.dashboardContainer().id !== newDashboardId) {
                        _this.dashboardControl.loadDashboard(newDashboardId);
                    }
                }
            },
        };
        if (this._isMobile()) {
            listOptions.dataSource = this.availableDashboards;
        }
        else {
            listOptions.items = this.availableDashboards;
        }
        var resizeTimer;
        var prevContainerHeight;
        var getContainerHeight = function (component) { return _utils_1.$unwrap(component.option('container')).clientHeight; };
        return {
            name: 'dx-dashboard-working-mode-extension',
            data: {
                panelWidth: this._actualPanelWidth,
                allowSwitchToDesigner: this.allowSwitchToDesigner,
                visible: this.visible,
                isMobile: this._isMobile,
                hidePanel: function () { _this._hidePanel(); },
                switchToDesigner: this.switchToDesigner,
                switchToViewer: this.switchToViewer,
                listOptions: listOptions,
                enableAnimation: enableAnimation,
                onPopupInitialized: function (e) {
                    prevContainerHeight = getContainerHeight(e.component);
                    resizeTimer = setInterval(function () {
                        if (e.component.option('visible')) {
                            var currentContainerHeight = getContainerHeight(e.component);
                            if (currentContainerHeight !== prevContainerHeight) {
                                prevContainerHeight = currentContainerHeight;
                                e.component.repaint();
                            }
                        }
                    }, 300);
                },
                onPopupDisposing: function (e) {
                    clearTimeout(resizeTimer);
                }
            }
        };
    };
    return DashboardPanelExtension;
}());
exports.DashboardPanelExtension = DashboardPanelExtension;
var PanelExtensionDashboardInfo = (function () {
    function PanelExtensionDashboardInfo(id, name, imageUrl) {
        this.id = id;
        this.name = name;
        this.imageUrl = imageUrl;
        this.hidden = ko.observable(false);
    }
    PanelExtensionDashboardInfo.prototype.hide = function () {
        this.hidden(true);
    };
    return PanelExtensionDashboardInfo;
}());


/***/ }),
/* 732 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var index_internal_1 = __webpack_require__(37);
var model_1 = __webpack_require__(38);
var disposable_object_1 = __webpack_require__(11);
var caption_toolbar_options_1 = __webpack_require__(64);
var control_options_1 = __webpack_require__(19);
var _underlying_data_provider_1 = __webpack_require__(609);
var utils_1 = __webpack_require__(610);
var _options_manager_1 = __webpack_require__(78);
var _data_inspector_view_model_1 = __webpack_require__(600);
var name = 'data-inspector';
var DataInspectorExtension = (function (_super) {
    __extends(DataInspectorExtension, _super);
    function DataInspectorExtension(dashboardControl, options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this) || this;
        _this._optionsManager = new _options_manager_1.OptionsManager();
        _this._defaultOptions = {
            allowInspectAggregatedData: false,
            allowInspectRawData: false,
            onDialogShowing: function () { },
            onDialogShown: function () { },
            onDialogHidden: function () { },
            onGridInitialized: function () { },
            onGridContentReady: function () { }
        };
        _this.name = name;
        _this._addContextToolbarItem = function (toolbarOptions, dashboardItem) {
            if ((_this._optionsManager.options.allowInspectAggregatedData || _this._optionsManager.options.allowInspectRawData) && dashboardItem instanceof model_1.DataDashboardItem) {
                toolbarOptions.actionItems.push({
                    hint: index_internal_1.getLocalizationById('DashboardStringId.ActionShowDataInspector'),
                    icon: 'dx-dashboard-data-inspector',
                    name: caption_toolbar_options_1.dashboardToolbarItemNames.dataInspector,
                    type: 'button',
                    click: function () {
                        _this._viewModel.show(dashboardItem);
                    }
                });
            }
        };
        _this._optionsManager.initialize(_this._defaultOptions, options, _this);
        _this._dashboardControl = dashboardControl;
        _this._viewModel = new _data_inspector_view_model_1.DataInspectorViewModel({
            onGridContentReady: function (e) { _this._optionsManager.events.raise('gridContentReady', e); },
            onGridInitialized: function (e) { _this._optionsManager.events.raise('gridInitialized', e); },
            onDialogShowing: function (e) { _this._optionsManager.events.raise('dialogShowing', e); },
            onDialogShown: function (e) { _this._optionsManager.events.raise('dialogShown', e); },
            onDialogHidden: function (e) { _this._optionsManager.events.raise('dialogHidden', e); },
            allowInspectAggregatedData: _this._optionsManager.options.allowInspectAggregatedData,
            allowInspectRawData: _this._optionsManager.options.allowInspectRawData
        });
        _this._customTemplate = {
            name: 'dx-dashboard-data-inspector-extension',
            data: _this._viewModel
        };
        return _this;
    }
    DataInspectorExtension.prototype.start = function () {
        var _this = this;
        this._dashboardControl.customTemplates.push(this._customTemplate);
        if (this._dashboardControl._serviceClient()) {
            this._viewModel.setUnderlyingDataProvider(new _underlying_data_provider_1.UnderlyingDataProvider(this._dashboardControl._serviceClient()));
        }
        this.toDispose(this._dashboardControl._serviceClient.subscribe(function (serviceClient) {
            _this._viewModel.setUnderlyingDataProvider(new _underlying_data_provider_1.UnderlyingDataProvider(serviceClient));
        }));
        this._dashboardControl._dashboardContext.addContextToolbarItems.add(this._addContextToolbarItem);
    };
    DataInspectorExtension.prototype.stop = function () {
        this._dashboardControl.customTemplates.remove(this._customTemplate);
        this._dashboardControl._dashboardContext.addContextToolbarItems.remove(this._addContextToolbarItem);
    };
    DataInspectorExtension.prototype.showDataInspector = function (dashboardItemName, inspectedType) {
        var dashboard = this._dashboardControl.dashboard();
        if (dashboard) {
            var dashboardItem = utils_1.findItemForApi(dashboard, dashboardItemName, model_1.DataDashboardItem);
            this._viewModel.show(dashboardItem, inspectedType);
        }
    };
    DataInspectorExtension.prototype.currentInspectedType = function () {
        return this._viewModel.visible() && this._viewModel.inspectedDataType() || null;
    };
    DataInspectorExtension.prototype.hideDataInspector = function () {
        this._viewModel.visible(false);
    };
    return DataInspectorExtension;
}(disposable_object_1.DisposableObject));
exports.DataInspectorExtension = DataInspectorExtension;
control_options_1.defaultExtensions[name] = function (dashboardControl, options) { return new DataInspectorExtension(dashboardControl, options); };


/***/ }),
/* 733 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _obsolete_helper_1 = __webpack_require__(46);
var _dashboard_layout_mode_helper_1 = __webpack_require__(77);
var control_options_1 = __webpack_require__(19);
var _options_manager_1 = __webpack_require__(78);
var _export_dialog_binder_1 = __webpack_require__(602);
var name = 'dashboard-export';
var DashboardExportExtension = (function () {
    function DashboardExportExtension(dashboardControl, options) {
        if (options === void 0) { options = {}; }
        var _this = this;
        this.dashboardControl = dashboardControl;
        this._exportInfoContoller = new _export_dialog_binder_1.ExportInfoManager();
        this.name = name;
        this._optionsManager = new _options_manager_1.OptionsManager();
        this._defaultOptions = {
            allowExportDashboard: true,
            allowExportDashboardItems: true
        };
        this._optionsManager.initialize(this._defaultOptions, options, this);
        this.allowExportDashboardItems = this._optionsManager.options.allowExportDashboardItems;
        this.allowExportDashboard = this._optionsManager.options.allowExportDashboard;
        this._dialogBinder = new _export_dialog_binder_1.ExportDialogBinder({
            dashboard: dashboardControl.dashboard,
            serviceClient: dashboardControl._serviceClient,
            getContainer: function () { return _dashboard_layout_mode_helper_1.DashboardLayoutModeHelper.isMobile ? window.document.body : dashboardControl.getWidgetContainer(); },
            exportInfoProvider: this._exportInfoContoller,
            excelExportOptions: this._optionsManager.options.excelExportOptions,
            imageExportOptions: this._optionsManager.options.imageExportOptions,
            pdfExportOptions: this._optionsManager.options.pdfExportOptions,
            onExportDialogHidden: function (e) { return _this._optionsManager.events.raise('exportDialogHidden', e); },
            onExportDialogShowing: function (e) { return _this._optionsManager.events.raise('exportDialogShowing', e); },
            onExportDialogShown: function (e) { return _this._optionsManager.events.raise('exportDialogShown', e); }
        });
        defineObsoleteMethods(this);
    }
    DashboardExportExtension.prototype._initializeExportButton = function (localContext) {
        var _this = this;
        localContext.beforeApplyViewerItemOptions.add(function (item, options, isCreation) {
            options.allowExport = _this.allowExportDashboardItems;
            options.showExportDialog = function (format) { return _this._dialogBinder.showItemDialog(item.componentName(), format); };
        });
    };
    DashboardExportExtension.prototype._initializePrimaryExportItem = function (localContext) {
        var _this = this;
        this._initializeExportButton(localContext);
        localContext.viewerItemCreated.add(function (item, viewerItem) {
            if (viewerItem.visualMode === 'caption') {
                _this._exportInfoContoller.registerCaptionExportItem(item.componentName(), function () { return viewerItem.getInfo(); });
            }
            else {
                _this._exportInfoContoller.registerPrimaryExportItem(item.componentName(), function () { return viewerItem.getInfo(); });
            }
        });
        localContext.viewerItemDispose.add(function (item, viewerItem) {
            if (viewerItem.visualMode === 'caption') {
                _this._exportInfoContoller.unregisterCaptionExportItem(item.componentName());
            }
            else {
                _this._exportInfoContoller.unregisterPrimaryExportItem(item.componentName());
            }
        });
    };
    DashboardExportExtension.prototype._initializeSecondaryExportItem = function (localContext) {
        var _this = this;
        this._initializeExportButton(localContext);
        localContext.viewerItemCreated.add(function (item, viewerItem) {
            _this._exportInfoContoller.registerSecondaryExportItem(item.componentName(), function () { return viewerItem.getInfo(); });
        });
        localContext.viewerItemDispose.add(function (item, viewerItem) {
            _this._exportInfoContoller.unregisterSecondaryExportItem(item.componentName());
        });
    };
    DashboardExportExtension.prototype.start = function () {
        var _this = this;
        this._dialogBinderSubscription = this.dashboardControl.dashboard.subscribe(function () { return _this._dialogBinder.reset(); });
    };
    DashboardExportExtension.prototype.stop = function () {
        this._dialogBinderSubscription.dispose();
        this._exportInfoContoller.dispose();
    };
    DashboardExportExtension.prototype.showExportDashboardDialog = function (format) {
        this._dialogBinder.showDashboardDialog(format);
    };
    DashboardExportExtension.prototype.showExportDashboardItemDialog = function (itemComponentName, format) {
        this._dialogBinder.showItemDialog(itemComponentName, format);
    };
    DashboardExportExtension.prototype.hideExportDialog = function () {
        this._dialogBinder.hide();
    };
    DashboardExportExtension.prototype.getPdfExportOptions = function () {
        return this._dialogBinder.exportOptions.pdfExportOptions;
    };
    DashboardExportExtension.prototype.getImageExportOptions = function () {
        return this._dialogBinder.exportOptions.imageExportOptions;
    };
    DashboardExportExtension.prototype.getExcelExportOptions = function () {
        return this._dialogBinder.exportOptions.excelExportOptions;
    };
    DashboardExportExtension.prototype.setPdfExportOptions = function (options) {
        this._dialogBinder.exportOptions.setPdfOptions(options);
    };
    DashboardExportExtension.prototype.setImageExportOptions = function (options) {
        this._dialogBinder.exportOptions.setImageOptions(options);
    };
    DashboardExportExtension.prototype.setExcelExportOptions = function (options) {
        this._dialogBinder.exportOptions.setExcelOptions(options);
    };
    DashboardExportExtension.prototype.exportToPdf = function (options, fileName) {
        this._dialogBinder.exportDashboardTo('PDF', options, fileName);
    };
    DashboardExportExtension.prototype.exportToImage = function (options, fileName) {
        this._dialogBinder.exportDashboardTo('Image', options, fileName);
    };
    DashboardExportExtension.prototype.exportToExcel = function (options, fileName) {
        this._dialogBinder.exportDashboardTo('Excel', options, fileName);
    };
    DashboardExportExtension.prototype.exportDashboardItemToPdf = function (itemName, options, fileName) {
        this._dialogBinder.exportDashboardItemTo(itemName, 'PDF', options, fileName);
    };
    DashboardExportExtension.prototype.exportDashboardItemToImage = function (itemName, options, fileName) {
        this._dialogBinder.exportDashboardItemTo(itemName, 'Image', options, fileName);
    };
    DashboardExportExtension.prototype.exportDashboardItemToExcel = function (itemName, options, fileName) {
        this._dialogBinder.exportDashboardItemTo(itemName, 'Excel', options, fileName);
    };
    return DashboardExportExtension;
}());
exports.DashboardExportExtension = DashboardExportExtension;
control_options_1.defaultExtensions[name] = function (dashboardControl, options) { return new DashboardExportExtension(dashboardControl, options); };
function defineObsoleteMethods(extension) {
    _obsolete_helper_1.defineObsoleteMethod({
        target: extension,
        memberName: 'showDashboardDialog',
        oldMemberDisplayName: 'DashboardExportExtension.showDashboardDialog',
        newMemberDisplayName: 'DashboardExportExtension.showExportDashboardDialog',
        ignoreWarmMessage: true,
        action: function (format) { return extension.showExportDashboardDialog(format); }
    });
    _obsolete_helper_1.defineObsoleteMethod({
        target: extension,
        memberName: 'hide',
        oldMemberDisplayName: 'DashboardExportExtension.hide',
        newMemberDisplayName: 'DashboardExportExtension.hideExportDialog',
        ignoreWarmMessage: true,
        action: function () { return extension.hideExportDialog(); }
    });
    _obsolete_helper_1.defineObsoleteMethod({
        target: extension,
        memberName: 'showItemDialog',
        oldMemberDisplayName: 'DashboardExportExtension.showItemDialog',
        newMemberDisplayName: 'DashboardExportExtension.showExportDashboardItemDialog',
        ignoreWarmMessage: true,
        action: function (itemName, format) { return extension.showExportDashboardItemDialog(itemName, format); }
    });
    _obsolete_helper_1.defineObsoleteMethod({
        target: extension,
        memberName: 'showDashboardExportDialog',
        oldMemberDisplayName: 'DashboardExportExtension.showDashboardExportDialog',
        newMemberDisplayName: 'DashboardExportExtension.showExportDashboardDialog',
        ignoreWarmMessage: true,
        action: function (format) { return extension.showExportDashboardDialog(format); }
    });
    _obsolete_helper_1.defineObsoleteMethod({
        target: extension,
        memberName: 'showItemExportDialog',
        oldMemberDisplayName: 'DashboardExportExtension.showItemExportDialog',
        newMemberDisplayName: 'DashboardExportExtension.showExportDashboardItemDialog',
        ignoreWarmMessage: true,
        action: function (itemName, format) { return extension.showExportDashboardItemDialog(itemName, format); }
    });
    _obsolete_helper_1.defineObsoleteProperty({
        target: extension,
        memberName: 'documentOptions',
        oldMemberDisplayName: 'DashboardExportExtension.documentOptions',
        ignoreWarmMessage: true,
        action: function () {
            return extension._dialogBinder.exportOptions;
        }
    });
    _obsolete_helper_1.defineObsoleteMethod({
        target: extension,
        memberName: 'getExportOptions',
        oldMemberDisplayName: 'DashboardExportExtension.getExportOptions',
        warmMessage: 'The DashboardExportExtension.getExportOptions method is obsolete.  Use the DashboardExportExtension.getPdfExportOptions, DashboardExportExtension.getImageExportOptions, or DashboardExportExtension.getExcelExportOptions method instead.',
        ignoreWarmMessage: true,
        action: function () { return extension._dialogBinder.exportOptions.convertToASPxClientDashboardExportOptions(); }
    });
    _obsolete_helper_1.defineObsoleteMethod({
        target: extension,
        memberName: 'setExportOptions',
        oldMemberDisplayName: 'DashboardExportExtension.setExportOptions',
        warmMessage: 'The DashboardExportExtension.setExportOptions method is obsolete.  Use the DashboardExportExtension.setPdfExportOptions, DashboardExportExtension.setImageExportOptions, or DashboardExportExtension.setExcelExportOptions method instead.',
        ignoreWarmMessage: true,
        action: function (options) {
            var exportOptions = extension._dialogBinder.exportOptions.convertToExportOptions(options);
            extension._dialogBinder.exportOptions.setOptions(exportOptions);
        }
    });
    _obsolete_helper_1.defineObsoleteMethod({
        target: extension,
        memberName: 'exportDashboardTo',
        oldMemberDisplayName: 'DashboardExportExtension.exportDashboardTo',
        warmMessage: 'The DashboardExportExtension.exportDashboardTo method is obsolete.  Use the DashboardExportExtension.exportToPdf, DashboardExportExtension.exportToImage, or DashboardExportExtension.exportToExcel method instead.',
        ignoreWarmMessage: true,
        action: function (format, options, fileName) {
            if (format === 'PDF') {
                extension.exportToPdf(options, fileName);
            }
            else if (format === 'Image') {
                extension.exportToImage(options, fileName);
            }
            else if (format === 'Excel') {
                extension.exportToExcel(options, fileName);
            }
        }
    });
    _obsolete_helper_1.defineObsoleteMethod({
        target: extension,
        memberName: 'exportDashboardItemTo',
        oldMemberDisplayName: 'DashboardExportExtension.exportDashboardItemTo',
        warmMessage: 'The DashboardExportExtension.exportDashboardItemTo method is obsolete.  Use the DashboardExportExtension.exportDashboardItemToPdf, DashboardExportExtension.exportDashboardItemToImage, or DashboardExportExtension.exportDashboardItemToExcel method instead.',
        ignoreWarmMessage: true,
        action: function (itemName, format, options, fileName) {
            if (format === 'PDF') {
                extension.exportDashboardItemToPdf(itemName, options, fileName);
            }
            else if (format === 'Image') {
                extension.exportDashboardItemToImage(itemName, options, fileName);
            }
            else if (format === 'Excel') {
                extension.exportDashboardItemToExcel(itemName, options, fileName);
            }
        }
    });
}


/***/ }),
/* 734 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _utils_1 = __webpack_require__(3);
var disposable_object_1 = __webpack_require__(11);
var _obsolete_helper_1 = __webpack_require__(46);
var _parameters_dialog_1 = __webpack_require__(354);
var _dashboard_layout_mode_helper_1 = __webpack_require__(77);
var control_options_1 = __webpack_require__(19);
var _options_manager_1 = __webpack_require__(78);
var _parameter_dialog_binder_1 = __webpack_require__(603);
var name = 'dashboard-parameter-dialog';
var DashboardParameterDialogExtension = (function (_super) {
    __extends(DashboardParameterDialogExtension, _super);
    function DashboardParameterDialogExtension(dashboardControl, options) {
        var _this = _super.call(this) || this;
        _this._customDialogContent = [];
        _this._optionsManager = new _options_manager_1.OptionsManager();
        _this.name = name;
        _this.showDialogButton = ko.observable(true);
        _this._updateViewModel = function (dashboard) {
            _this._clear();
            if (!!dashboard) {
                _this._viewModel = new _parameter_dialog_binder_1.ParameterDialogViewModel(dashboard.parameters, function (parameterType, settings) { return _this._dashboardControl._dataSourceBrowser.getParameterValues(parameterType, settings); });
                _this._viewModel.parameterCollection.subscribe(function (value) {
                    _this._clearContent();
                    _this._customDialogContent.concat(_this._parameterDialog)
                        .filter(function (dialog) { return dialog && dialog.setActualState; })
                        .forEach(function (dialog) { return dialog.setActualState(); });
                });
            }
        };
        _this._optionsManager.initialize({}, options, _this);
        _this._dashboardControl = dashboardControl;
        _this.onShowing = _this._optionsManager.options.onShowing || (function () { });
        _this.onShown = _this._optionsManager.options.onShowing || (function () { });
        _this.onHidden = _this._optionsManager.options.onHidden || (function () { });
        return _this;
    }
    ;
    DashboardParameterDialogExtension.prototype.start = function () {
        var _this = this;
        if (this._dashboardControl.dashboard()) {
            this._updateViewModel(this._dashboardControl.dashboard());
            this._subscribeDynamicLookUpValuesLoaded();
        }
        this.toDispose(this._dashboardControl.dashboard.subscribe(function (newDashboard) { return _this._updateViewModel(newDashboard); }));
        this.toDispose(this._dashboardControl.dashboard.subscribe(function () { return _this._subscribeDynamicLookUpValuesLoaded(); }));
        _obsolete_helper_1.defineObsoleteMethod({
            target: this,
            memberName: 'showDialog',
            oldMemberDisplayName: 'DashboardParameterDialogExtension.showDialog',
            newMemberDisplayName: 'DashboardParameterDialogExtension.show',
            action: function () { return _this.show(); }
        });
        _obsolete_helper_1.defineObsoleteMethod({
            target: this,
            memberName: 'hideDialog',
            oldMemberDisplayName: 'DashboardParameterDialogExtension.hideDialog',
            newMemberDisplayName: 'DashboardParameterDialogExtension.hide',
            action: function () { return _this.hide(); }
        });
    };
    DashboardParameterDialogExtension.prototype.stop = function () {
        this._clear();
        this.dispose();
    };
    DashboardParameterDialogExtension.prototype.show = function () {
        if (this._parameterDialog) {
            this._parameterDialog.dispose();
        }
        this._parameterDialog = this._createParameterDialog();
        this._parameterDialog.show();
    };
    DashboardParameterDialogExtension.prototype.hide = function () {
        if (!!this._parameterDialog) {
            this._parameterDialog.hide();
        }
    };
    DashboardParameterDialogExtension.prototype.subscribeToContentChanges = function (callback) {
        return this._viewModel.parameterCollection.subscribe(callback);
    };
    DashboardParameterDialogExtension.prototype.getParameters = function () {
        if (!this._viewModel)
            throw 'Dashboard is not loaded';
        return this._viewModel.parameterCollection();
    };
    DashboardParameterDialogExtension.prototype.renderContent = function (element) {
        var _this = this;
        var customParameterDialog = this._createParameterDialog();
        this._customDialogContent.push(customParameterDialog);
        return customParameterDialog.generateContent(_utils_1.$unwrap(element), function () {
            _this._customDialogContent.splice(_this._customDialogContent.indexOf(customParameterDialog), 1);
        });
    };
    DashboardParameterDialogExtension.prototype._createParameterDialog = function () {
        var _this = this;
        return new _parameters_dialog_1.parametersDialog({
            parametersDialogContainer: _dashboard_layout_mode_helper_1.DashboardLayoutModeHelper.isMobile ? window.document.body : this._dashboardControl.getWidgetContainer(),
            getParametersCollection: function () { return _this.getParameters(); },
            submitParameters: function (newParameters) {
                _this._viewModel.parameterCollection.peek().setParameters(newParameters);
            },
            onShowing: function (args) { return _this._optionsManager.events.raise('showing', args); },
            onShown: function (args) { return _this._optionsManager.events.raise('shown', args); },
            onHidden: function (args) { return _this._optionsManager.events.raise('hidden', args); }
        });
    };
    DashboardParameterDialogExtension.prototype._clearContent = function () {
        this._customDialogContent.forEach(function (dialog) { return dialog.dispose(); });
        this._customDialogContent = [];
    };
    DashboardParameterDialogExtension.prototype._clear = function () {
        this._clearContent();
        if (this._parameterDialog) {
            this._parameterDialog.dispose();
            this._parameterDialog = undefined;
        }
        if (this._viewModel) {
            this._viewModel.dispose();
            this._viewModel = undefined;
        }
    };
    DashboardParameterDialogExtension.prototype._subscribeDynamicLookUpValuesLoaded = function () {
        var _this = this;
        var dataSourceBrowser = this._dashboardControl._dataSourceBrowser;
        if (dataSourceBrowser) {
            dataSourceBrowser.dynamicLookUpValuesLoaded = function (dynamicListLookUpSettings) {
                _this._dashboardControl
                    .dashboard()
                    .parameters()
                    .filter(function (param) {
                    return param.dynamicListLookUpSettings() && param.dynamicListLookUpSettings().equals(dynamicListLookUpSettings);
                })
                    .map(function (param) { return param.name(); })
                    .forEach(function (paramName) {
                    _this._optionsManager.events.raise('dynamicLookUpValuesLoaded', { parameterName: paramName });
                });
            };
        }
    };
    return DashboardParameterDialogExtension;
}(disposable_object_1.DisposableObject));
exports.DashboardParameterDialogExtension = DashboardParameterDialogExtension;
control_options_1.defaultExtensions[name] = function (dashboardControl, options) { return new DashboardParameterDialogExtension(dashboardControl, options); };


/***/ }),
/* 735 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var disposable_object_1 = __webpack_require__(11);
var control_options_1 = __webpack_require__(19);
var _service_client_1 = __webpack_require__(362);
var name = 'url-state';
var UrlStateExtension = (function (_super) {
    __extends(UrlStateExtension, _super);
    function UrlStateExtension(dashboardControl, options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this) || this;
        _this._dashboardContaierSubscriptions = [];
        _this._defaultOptions = {
            includeDashboardIdToUrl: false,
            includeDashboardStateToUrl: false
        };
        _this.name = name;
        _this._options = __assign({}, _this._defaultOptions, options);
        _this._dashboardControl = dashboardControl;
        return _this;
    }
    UrlStateExtension.prototype.start = function () {
        var _this = this;
        this.toDispose(this._dashboardControl.dashboardContainer.subscribe(function (dashboardContainer) {
            _this._dashboardContaierSubscriptions.forEach(function (disposable) { return disposable.dispose(); });
            _this._dashboardContaierSubscriptions = [];
            _this._processDashboardChanged(dashboardContainer);
        }));
        this.toDispose(this._dashboardControl.isDesignMode.subscribe(function (isDesignMode) {
            _this._updateDashboardState();
        }));
        this._processDashboardChanged(this._dashboardControl.dashboardContainer());
    };
    UrlStateExtension.prototype.stop = function () {
        this.dispose();
    };
    UrlStateExtension.prototype._processDashboardChanged = function (dashboardInfo) {
        var _this = this;
        if (dashboardInfo) {
            if (this._options.includeDashboardIdToUrl) {
                this._updateUrl('dashboardId', dashboardInfo.id);
            }
            this._updateDashboardState();
            if (!!dashboardInfo.dashboard) {
                this._dashboardContaierSubscriptions.push(dashboardInfo.dashboard._state.subscribe(function (_) { return _this._updateDashboardState(); }));
            }
        }
    };
    UrlStateExtension.prototype._updateDashboardState = function () {
        var dashboard = this._dashboardControl.dashboardContainer() && this._dashboardControl.dashboardContainer().dashboard || null;
        var state = dashboard && !this._dashboardControl.isDesignMode() ? dashboard.stateString : null;
        if (this._options.includeDashboardStateToUrl) {
            this._updateUrl('dashboardState', state);
        }
    };
    UrlStateExtension.prototype._updateUrl = function (key, value) {
        var newUrl = this._replaceValue(key, value);
        if (newUrl) {
            if (newUrl.length > _service_client_1.ViewerDataServiceClient.maxQueryStringLength) {
                newUrl = this._replaceValue(key, null);
            }
            this._setUrl(newUrl);
        }
    };
    UrlStateExtension.prototype._replaceValue = function (key, value) {
        var uri = this._getUrl();
        var re = new RegExp('([?&])' + key + '=.*?(&|$)', 'i');
        var separator = uri.indexOf('?') !== -1 ? '&' : '?';
        var newParameterValue = value ? key + '=' + encodeURIComponent(value) : '';
        if (uri.match(re)) {
            var separator = !!newParameterValue ? '$1' : '';
            return uri.replace(re, separator + newParameterValue + '$2');
        }
        else if (!!newParameterValue) {
            return uri + separator + newParameterValue;
        }
        else {
            return uri;
        }
    };
    UrlStateExtension.prototype._getUrl = function () {
        return location.href;
    };
    UrlStateExtension.prototype._setUrl = function (url) {
        if (!url)
            url = location.pathname;
        history.replaceState({}, '', url);
    };
    return UrlStateExtension;
}(disposable_object_1.DisposableObject));
exports.UrlStateExtension = UrlStateExtension;
control_options_1.defaultExtensions[name] = function (dashboardControl, options) { return new UrlStateExtension(dashboardControl, options); };


/***/ }),
/* 736 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _drill_through_data_wrapper_1 = __webpack_require__(404);
var _default_1 = __webpack_require__(6);
var _common_1 = __webpack_require__(35);
var model_1 = __webpack_require__(38);
var disposable_object_1 = __webpack_require__(11);
var _array_utils_1 = __webpack_require__(49);
var _helper_classes_1 = __webpack_require__(36);
var _knockout_utils_1 = __webpack_require__(17);
var data_dashboard_item_1 = __webpack_require__(9);
var date_filter_item_1 = __webpack_require__(143);
var range_filter_item_1 = __webpack_require__(111);
var _events_helper_1 = __webpack_require__(584);
var control_options_1 = __webpack_require__(19);
var _underlying_data_provider_1 = __webpack_require__(609);
var utils_1 = __webpack_require__(610);
var _options_manager_1 = __webpack_require__(78);
var notificator_1 = __webpack_require__(114);
var name = 'viewer-api';
var ViewerApiExtension = (function (_super) {
    __extends(ViewerApiExtension, _super);
    function ViewerApiExtension(dashboardControl, options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this) || this;
        _this.dashboardControl = dashboardControl;
        _this.name = name;
        _this._viewerItems = {};
        _this._optionManager = new _options_manager_1.OptionsManager();
        _this._defaultOptions = {
            onItemClick: function (args) { },
            onItemSelectionChanged: function (args) { },
            onItemWidgetCreated: function (args) { },
            onItemWidgetUpdating: function (args) { },
            onItemWidgetUpdated: function (args) { },
            onItemElementCustomColor: function (args) { },
            onItemVisualInteractivity: function (args) { },
            onItemMasterFilterStateChanged: function (args) { },
            onItemDrillDownStateChanged: function (args) { },
            onItemActionAvailabilityChanged: function (args) { },
            onItemCaptionToolbarUpdated: function (args) { },
            onDashboardTitleToolbarUpdated: function (args) { },
            onSelectedTabPageChanged: function (args) { },
            onDynamicLookUpValuesLoaded: function (args) { },
            onItemBeginUpdate: function (args) { },
            onItemEndUpdate: function (args) { },
            onDashboardBeginUpdate: function (args) { },
            onDashboardEndUpdate: function (args) { },
            onItemWidgetOptionsPrepared: function (args) { }
        };
        _this._dashboardDisposables = [];
        _this._title = ko.observable(null);
        _this._viewerItemCreated = function (item, viewerItem) {
            if (!!viewerItem) {
                if (item instanceof data_dashboard_item_1.DataDashboardItem) {
                    viewerItem.itemClick.add(_this._raiseItemClick);
                    viewerItem.itemSelectionChanged.add(_this._raiseItemSelectionChanged);
                    viewerItem.clearMasterFilter.add(_this._raiseClearMasterFilter);
                }
                if (!!viewerItem['itemElementCustomColor']) {
                    viewerItem['itemElementCustomColor'].add(_this._raiseItemElementCustomColor);
                }
                viewerItem.itemWidgetCreated.add(_this._raiseItemWidgetCreated);
                viewerItem.itemWidgetUpdating.add(_this._raiseItemWidgetUpdating);
                viewerItem.itemWidgetUpdated.add(_this._raiseItemWidgetUpdated);
                viewerItem.itemWidgetOptionsPrepared.add(_this._raiseItemWidgetOptionsPrepared);
                viewerItem.itemCaptionToolbarUpdated.add(_this._raiseItemCaptionToolbarUpdated);
            }
            if (!_this._viewerItems[item.componentName()]) {
                _this._viewerItems[item.componentName()] = [];
            }
            if (_this._viewerItems[item.componentName()].indexOf(viewerItem) === -1) {
                _this._viewerItems[item.componentName()].push(viewerItem);
            }
        };
        _this._viewerItemDispose = function (item, viewerItem) {
            if (!!viewerItem) {
                if (item instanceof data_dashboard_item_1.DataDashboardItem) {
                    viewerItem.itemClick.remove(_this._raiseItemClick);
                    viewerItem.itemSelectionChanged.remove(_this._raiseItemSelectionChanged);
                    viewerItem.clearMasterFilter.remove(_this._raiseClearMasterFilter);
                }
                if (!!viewerItem['itemElementCustomColor']) {
                    viewerItem['itemElementCustomColor'].remove(_this._raiseItemElementCustomColor);
                }
                viewerItem.itemWidgetCreated.remove(_this._raiseItemWidgetCreated);
                viewerItem.itemWidgetUpdating.remove(_this._raiseItemWidgetUpdating);
                viewerItem.itemWidgetUpdated.remove(_this._raiseItemWidgetUpdated);
                viewerItem.itemCaptionToolbarUpdated.remove(_this._raiseItemCaptionToolbarUpdated);
            }
            if (_this._viewerItems[item.componentName()]) {
                var index = _this._viewerItems[item.componentName()].indexOf(viewerItem);
                if (index > -1) {
                    _this._viewerItems[item.componentName()].splice(index, 1);
                }
            }
        };
        _this._beforeApplyViewerItemOptions = function (item, options, isCreation, customInteractivityOptions) {
            if (item instanceof data_dashboard_item_1.DataDashboardItem) {
                _this._optionManager.events.raise('itemVisualInteractivity', _events_helper_1.createItemInteractivityEventArgs(item, customInteractivityOptions));
            }
        };
        _this._raiseItemActionAvailabilityChanged = function (item) {
            _this._optionManager.events.raise('itemActionAvailabilityChanged', {
                itemName: item.componentName(),
                dashboardItem: item,
            });
        };
        _this._raiseItemClick = function (itemName, dataPoint) {
            _this._optionManager.events.raise('itemClick', _events_helper_1.createItemClickEventArgs(_this._getDataItem(itemName), dataPoint, _this.requestUnderlyingData));
        };
        _this._raiseItemSelectionChanged = function (itemName, tuples) {
            _this._optionManager.events.raise('itemSelectionChanged', _events_helper_1.createItemSelectionChangedEventArgs(_this._getDataItem(itemName), tuples));
        };
        _this._raiseItemWidgetCreated = function (name, viewControl) {
            var item = _this._getItem(name);
            _this._optionManager.events.raise('itemWidgetCreated', _events_helper_1.createWidgetEventArgs(item, viewControl));
        };
        _this._raiseItemWidgetUpdating = function (name, viewControl) {
            var item = _this._getItem(name);
            _this._optionManager.events.raise('itemWidgetUpdating', _events_helper_1.createWidgetEventArgs(item, viewControl));
        };
        _this._raiseItemWidgetUpdated = function (name, viewControl) {
            var item = _this._getItem(name);
            _this._optionManager.events.raise('itemWidgetUpdated', _events_helper_1.createWidgetEventArgs(item, viewControl));
        };
        _this._raiseItemWidgetOptionsPrepared = function (name, options) {
            var item = _this._getItem(name);
            _this._optionManager.events.raise('itemWidgetOptionsPrepared', _events_helper_1.createWidgetOptionsEventArgs(item, options));
        };
        _this._raiseItemCaptionToolbarUpdated = function (name, options) {
            var item = _this._getItem(name);
            _this._optionManager.events.raise('itemCaptionToolbarUpdated', { itemName: name, dashboardItem: item, options: options });
        };
        _this._raiseTitleToolbarUpdated = function (options) {
            _this._optionManager.events.raise('dashboardTitleToolbarUpdated', { dashboard: _this.dashboardControl.dashboard(), options: options });
        };
        _this._raiseItemElementCustomColor = function (itemName, eventArgs) {
            _this._optionManager.events.raise('itemElementCustomColor', _events_helper_1.createItemElementCustomColorEventArgs(_this._getDataItem(itemName), eventArgs));
        };
        _this._raiseItemVisualInteractivity = function (itemName, interactivityOptions) {
            _this._optionManager.events.raise('itemVisualInteractivity', _events_helper_1.createItemInteractivityEventArgs(_this._getDataItem(itemName), interactivityOptions));
        };
        _this._raiseClearMasterFilter = function (itemName) {
            var item = _this._getItem(itemName);
            _this._optionManager.events.raise('itemMasterFilterStateChanged', {
                itemName: item.componentName(),
                dashboardItem: item,
                values: null
            });
        };
        _this.requestUnderlyingData = function (itemName, args, onCompleted) {
            var dataDashboardItem = _this._getDataItem(itemName);
            var raiseOnCompleted = function (underlyingData) {
                var drillThroughData = new _drill_through_data_wrapper_1.DrillThroughDataWrapper(underlyingData);
                drillThroughData.initialize();
                onCompleted(drillThroughData);
            };
            var provider = new _underlying_data_provider_1.UnderlyingDataProvider(_this.dashboardControl._serviceClient());
            provider.requestUnderlyingData(dataDashboardItem, args)
                .done(raiseOnCompleted)
                .fail(function (request) {
                var errorMessage = notificator_1.NotificationController._getErrorTextFromResponse(request);
                if (!errorMessage) {
                    errorMessage = _default_1.getLocalizationById('DashboardWebStringId.Notification.AttemptToGetUnderlyingData');
                }
                raiseOnCompleted({ ErrorMessage: errorMessage });
            });
        };
        _this._optionManager.initialize(_this._defaultOptions, options, _this);
        _this.toDispose.apply(_this, _knockout_utils_1.subscribeWithPrev(_this._title, function (oldValue, newValue) {
            if (oldValue) {
                oldValue.onUpdated.remove(_this._raiseTitleToolbarUpdated);
            }
            if (newValue) {
                newValue.onUpdated.add(_this._raiseTitleToolbarUpdated);
            }
        }));
        _this.toDispose(ko.computed(function () {
            var newDashboard = dashboardControl.dashboard();
            _this._dashboardDisposables.forEach(function (d) { return d.dispose(); });
            _this._dashboardDisposables = [];
            if (newDashboard) {
                newDashboard
                    .items()
                    .filter(function (item) { return item instanceof model_1.TabContainerItem; })
                    .forEach(function (tabContainer) {
                    tabContainer._activePageChanged = function (prevPageName, pageName) {
                        _this._raiseSelectedTabPageChanged(tabContainer.componentName(), prevPageName, pageName);
                    };
                });
                newDashboard._dataDashboardItems().forEach(function (item) {
                    var itemName = item.componentName.peek();
                    _this._raiseItemActionAvailabilityChanged(item);
                    var disposables = _knockout_utils_1.subscribeWithPrev(item._actions, function (prevActions, actions) {
                        if (!_array_utils_1.arrayEquals(prevActions, actions)) {
                            _this._raiseItemActionAvailabilityChanged(item);
                        }
                    });
                    disposables.push(_knockout_utils_1.subscribeArrayChange(item._drillDownValues, {
                        added: function (v) {
                            _this._optionManager.events.raise('itemDrillDownStateChanged', {
                                itemName: itemName,
                                dashboardItem: item,
                                action: 'Down',
                                values: item._drillDownValues()
                            });
                        },
                        deleted: function (v) {
                            _this._optionManager.events.raise('itemDrillDownStateChanged', {
                                itemName: itemName,
                                dashboardItem: item,
                                action: 'Up',
                                values: item._drillDownValues()
                            });
                        }
                    }));
                    disposables.push(item._actualSelectionValues.subscribe(function (newValue) {
                        _this._optionManager.events.raise('itemMasterFilterStateChanged', {
                            itemName: itemName,
                            dashboardItem: item,
                            values: newValue
                        });
                    }));
                    Array.prototype.push.apply(_this._dashboardDisposables, disposables);
                });
            }
        }));
        return _this;
    }
    ViewerApiExtension.prototype._checkIsRangeFilterItem = function (itemName) {
        var item = this._getDataItem(itemName);
        if (!(item instanceof range_filter_item_1.RangeFilterItem) && !(item instanceof date_filter_item_1.DateFilterItem)) {
            throw new Error('Action is called for an unsupported dashboard item. This action can be performed only for Range Filter and Date Filter.');
        }
    };
    ViewerApiExtension.prototype._raiseSelectedTabPageChanged = function (tabContainerName, prevPageName, pageName) {
        this._optionManager.events.raise('selectedTabPageChanged', {
            tabContainerName: tabContainerName,
            selectedPage: pageName,
            previousPage: prevPageName
        });
    };
    ViewerApiExtension.prototype.start = function () {
        this.dashboardControl._dashboardContext.viewerItemCreated.add(this._viewerItemCreated);
        this.dashboardControl._dashboardContext.viewerItemDispose.add(this._viewerItemDispose);
        this.dashboardControl._dashboardContext.beforeApplyViewerItemOptions.add(this._beforeApplyViewerItemOptions);
    };
    ViewerApiExtension.prototype.stop = function () {
        this.dashboardControl._dashboardContext.viewerItemCreated.remove(this._viewerItemCreated);
        this.dashboardControl._dashboardContext.viewerItemDispose.remove(this._viewerItemDispose);
        this.dashboardControl._dashboardContext.beforeApplyViewerItemOptions.remove(this._beforeApplyViewerItemOptions);
    };
    ViewerApiExtension.prototype._getItemCore = function (itemId, findItem) {
        var dashboard = this.dashboardControl.dashboard();
        if (dashboard) {
            var item = findItem(dashboard);
            if (item) {
                return item;
            }
            else {
                throw Error("The item with the '" + itemId + "' name does not exist");
            }
        }
        else {
            throw new Error('Cannot perform operation because the dashboard is not loaded');
        }
    };
    ViewerApiExtension.prototype._getItem = function (itemId) {
        return this._getItemCore(itemId, function (dashboard) { return dashboard._allItems().filter(function (item) { return item.componentName() == itemId; })[0]; });
    };
    ViewerApiExtension.prototype._getDataItem = function (itemName) {
        return this._getItemCore(itemName, function (dashboard) { return dashboard._findDataItem(itemName); });
    };
    ViewerApiExtension.prototype.getCurrentRange = function (itemName) {
        this._checkIsRangeFilterItem(itemName);
        var item = this._getDataItem(itemName);
        var selection = item._actualSelectionValues() && item._actualSelectionValues()[0] || item._getEntireRange();
        return selection && selection.length > 0 ? {
            minimum: selection[0],
            maximum: selection[1]
        } : null;
    };
    ViewerApiExtension.prototype.getEntireRange = function (itemName) {
        this._checkIsRangeFilterItem(itemName);
        var entireRange = this._getDataItem(itemName)._getEntireRange();
        return entireRange.length > 0 ? {
            minimum: entireRange[0],
            maximum: entireRange[1]
        } : null;
    };
    ViewerApiExtension.prototype.setRange = function (itemName, range) {
        this._checkIsRangeFilterItem(itemName);
        this.setMasterFilter(itemName, [[range.minimum, range.maximum]]);
    };
    ViewerApiExtension.prototype.setPredefinedRange = function (itemName, dateTimePeriodName) {
        this._checkIsRangeFilterItem(itemName);
        var rangeFilter = this._getDataItem(itemName);
        var periods = rangeFilter.dateTimePeriods().filter(function (period) { return period.name() === dateTimePeriodName; });
        if (periods.length === 0) {
            throw new Error("The predefined range with the '" + dateTimePeriodName + "' name does not exist");
        }
        rangeFilter._processItemSetPredefinedPeriod(dateTimePeriodName);
    };
    ViewerApiExtension.prototype.getAvailablePredefinedRanges = function (itemName) {
        this._checkIsRangeFilterItem(itemName);
        return this._getDataItem(itemName).dateTimePeriods().map(function (period) { return period.name(); });
    };
    ViewerApiExtension.prototype.getCurrentPredefinedRange = function (itemName) {
        this._checkIsRangeFilterItem(itemName);
        var period = this._getDataItem(itemName).currentSelectedDateTimePeriodName();
        return period ? period : '';
    };
    ViewerApiExtension.prototype.getCurrentSelection = function (itemName) {
        _helper_classes_1.Guard.isNotNull(itemName, 'itemName');
        var itemData = this._getDataItem(itemName)._getItemData(), tuples = [], viewerItem = this._getViewerItem(itemName);
        var selectedTuples = viewerItem && viewerItem.getSelectedTuples() || null;
        if (selectedTuples) {
            tuples = selectedTuples.map(function (selectedTuple) { return itemData.createTuple(selectedTuple); });
        }
        return tuples;
    };
    ViewerApiExtension.prototype.canSetMasterFilter = function (itemName) {
        return this._getDataItem(itemName)._actions().indexOf(_common_1.viewerActions.setMasterFilter) !== -1;
    };
    ViewerApiExtension.prototype.canClearMasterFilter = function (itemName) {
        return this._getDataItem(itemName)._actions().indexOf(_common_1.viewerActions.clearMasterFilter) !== -1;
    };
    ViewerApiExtension.prototype.canPerformDrillDown = function (itemName) {
        return this._getDataItem(itemName)._actions().indexOf(_common_1.viewerActions.drillDown) !== -1;
    };
    ViewerApiExtension.prototype.canPerformDrillUp = function (itemName) {
        return this._getDataItem(itemName)._actions().indexOf(_common_1.viewerActions.drillUp) !== -1;
    };
    ViewerApiExtension.prototype.getItemData = function (itemName) {
        return this._getDataItem(itemName)._getItemData();
    };
    ViewerApiExtension.prototype.getCurrentFilterValues = function (itemName) {
        return this._getDataItem(itemName)._getCurrentFilterValues();
    };
    ViewerApiExtension.prototype.getAvailableFilterValues = function (itemName) {
        return this._getDataItem(itemName)._getAvailableFilterValues(itemName);
    };
    ViewerApiExtension.prototype.getCurrentDrillDownValues = function (itemName) {
        return this._getDataItem(itemName)._getCurrentDrillDownValues();
    };
    ViewerApiExtension.prototype.getAvailableDrillDownValues = function (itemName) {
        return this._getDataItem(itemName)._getAvailableDrillDownValues(itemName);
    };
    ViewerApiExtension.prototype.setMasterFilter = function (itemName, values) {
        this._getDataItem(itemName)._performSetMasterFilter(values);
    };
    ViewerApiExtension.prototype.clearMasterFilter = function (itemName) {
        this._getDataItem(itemName)._performClearMasterFilter();
    };
    ViewerApiExtension.prototype.performDrillDown = function (itemName, value) {
        this._getDataItem(itemName)._performDrillDown(value);
    };
    ViewerApiExtension.prototype.performDrillUp = function (itemName) {
        this._getDataItem(itemName)._performDrillUp();
    };
    ViewerApiExtension.prototype.getAvailableActions = function (itemName) {
        return this._getDataItem(itemName)._getAvailableActions();
    };
    ViewerApiExtension.prototype.updateItemCaptionToolbar = function (itemName) {
        var _this = this;
        var dashboardItemNames = itemName ?
            this.dashboardControl.dashboard().findItem(itemName) && [itemName] || []
            :
                this.dashboardControl
                    .dashboard()
                    .items()
                    .concat(this.dashboardControl.dashboard().groups())
                    .map(function (item) { return item.componentName(); });
        if (itemName && dashboardItemNames.length === 0) {
            throw new Error("The item with the '" + itemName + "' name does not exist");
        }
        dashboardItemNames.forEach(function (itemName) {
            _this._viewerItems[itemName] && _this._viewerItems[itemName].forEach(function (viewerItem) { return viewerItem.updateCaptionToolbar(); });
        });
    };
    ViewerApiExtension.prototype.updateDashboardTitleToolbar = function () {
        if (this._title()) {
            this._title().update();
        }
    };
    ViewerApiExtension.prototype.setSelectedTabPage = function (tabPageName) {
        var dashboard = this.dashboardControl.dashboard();
        if (dashboard) {
            var tabPage = utils_1.findItemForApi(this.dashboardControl.dashboard(), tabPageName, model_1.DashboardTabPage);
            var tabContainer = this._findParentTabContainer(tabPageName);
            if (tabContainer && tabPage)
                tabContainer._activeTabPage(tabPage);
        }
    };
    ViewerApiExtension.prototype.setSelectedTabPageIndex = function (tabContainerName, index) {
        var dashboard = this.dashboardControl.dashboard();
        if (dashboard) {
            var tabContainer = utils_1.findItemForApi(this.dashboardControl.dashboard(), tabContainerName, model_1.TabContainerItem);
            if (index < 0 || index > tabContainer.tabPages().length - 1) {
                throw Error("The '" + tabContainerName + "' tab container does not contain a tab page with the following index: " + index);
            }
            var tabContainerLayoutItem = this.dashboardControl.dashboard().layout().findLayoutItem(tabContainer);
            if (tabContainerLayoutItem) {
                this.setSelectedTabPage(tabContainerLayoutItem.childNodes()[index].dashboardItem());
            }
        }
    };
    ViewerApiExtension.prototype.getSelectedTabPageIndex = function (tabContainerName) {
        var dashboard = this.dashboardControl.dashboard();
        if (dashboard) {
            var tabContainer = utils_1.findItemForApi(this.dashboardControl.dashboard(), tabContainerName, model_1.TabContainerItem);
            var tabContainerLayoutItem = this.dashboardControl.dashboard().layout().findLayoutItem(tabContainer);
            var activeTabPageLayoutItem = this.dashboardControl.dashboard().layout().findLayoutItem(tabContainer._activeTabPage());
            if (tabContainerLayoutItem && tabContainerLayoutItem) {
                return tabContainerLayoutItem.childNodes().indexOf(activeTabPageLayoutItem);
            }
        }
        return -1;
    };
    ViewerApiExtension.prototype.getSelectedTabPage = function (tabContainerName) {
        var dashboard = this.dashboardControl.dashboard();
        if (dashboard) {
            var tabContainer = utils_1.findItemForApi(this.dashboardControl.dashboard(), tabContainerName, model_1.TabContainerItem);
            return tabContainer._activeTabPage() ? tabContainer._activeTabPage().componentName() : '';
        }
        return '';
    };
    ViewerApiExtension.prototype._findParentTabContainer = function (tabPageName) {
        var tabContainers = this.dashboardControl.dashboard().items().filter(function (item) { return item instanceof model_1.TabContainerItem; });
        var parentContainer;
        tabContainers.forEach(function (container) {
            var pages = container.tabPages().filter(function (page) { return page.componentName() === tabPageName; });
            if (pages.length > 0) {
                parentContainer = container;
            }
        });
        if (!parentContainer) {
            throw new Error("The tab container item with the page'" + tabPageName + "' name does not exist");
        }
        return parentContainer;
    };
    ViewerApiExtension.prototype._getViewerItem = function (itemName) {
        var viewerItems = this._viewerItems[itemName] ? this._viewerItems[itemName].filter(function (viewer) { return viewer.hasWidget; }) : [];
        return viewerItems.length > 0 ? viewerItems[0] : undefined;
    };
    return ViewerApiExtension;
}(disposable_object_1.DisposableObject));
exports.ViewerApiExtension = ViewerApiExtension;
control_options_1.defaultExtensions[name] = function (dashboardControl, options) { return new ViewerApiExtension(dashboardControl, options); };


/***/ }),
/* 737 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var devices_1 = __webpack_require__(119);
var dialog_1 = __webpack_require__(417);
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var control_options_1 = __webpack_require__(19);
var _mobile_layout_1 = __webpack_require__(604);
var name = 'mobile-layout';
var MobileLayoutExtension = (function () {
    function MobileLayoutExtension(dashboardControl, options) {
        var _this = this;
        this.dashboardControl = dashboardControl;
        this.name = name;
        this._disposables = [];
        this._options = {};
        this._mobileLayoutTemplateName = 'dx-dashboard-mobile-layout';
        this._canMobileLayoutBeEnabled = ko.computed(function () { return !_this.dashboardControl.isDesignMode(); });
        this._dashboardList = [];
        if (options) {
            this._options = options;
        }
        this.mobileLayoutEnabled = ko.computed(function () {
            if (_this._canMobileLayoutBeEnabled()) {
                return _this._expectedMobileLayoutMode();
            }
            else {
                return false;
            }
        });
    }
    MobileLayoutExtension.prototype._expectedMobileLayoutMode = function () {
        if (this._options.mobileLayoutEnabled === 'Always') {
            return true;
        }
        else if (this._options.mobileLayoutEnabled === 'Never') {
            return false;
        }
        else {
            return devices_1.default.current().phone;
        }
    };
    MobileLayoutExtension.prototype.start = function () {
        var _this = this;
        if (this._expectedMobileLayoutMode() && !this._canMobileLayoutBeEnabled()) {
            dialog_1.confirm(_default_1.getLocalizationById('DashboardWebStringId.MobileLayout.SwitchToViewer'), '').done(function (res) {
                if (res) {
                    _this.dashboardControl.switchToViewer();
                }
            });
        }
        var mobileLayoutModel = ko.computed(function () {
            if (_this.dashboardControl.dashboard()
                && _this.dashboardControl._layoutTemplate().name === _this._mobileLayoutTemplateName)
                return new _mobile_layout_1.DashboardMobileLayout(_this.dashboardControl.dashboard(), _this.dashboardControl._dashboardContext, function (name) { return _this.dashboardControl.findExtension(name); }, _this.dashboardControl.encodeHtml);
            return null;
        });
        this._disposables.push(mobileLayoutModel);
        this.dashboardControl._layoutBindersCollection.splice(0, 0, {
            condition: function () { return _this.mobileLayoutEnabled(); },
            name: this._mobileLayoutTemplateName,
            getData: function () { return mobileLayoutModel; }
        });
    };
    MobileLayoutExtension.prototype.stop = function () {
        this._disposables.forEach(function (d) { return d.dispose(); });
    };
    return MobileLayoutExtension;
}());
exports.MobileLayoutExtension = MobileLayoutExtension;
control_options_1.defaultExtensions[name] = function (dashboardControl, options) { return new MobileLayoutExtension(dashboardControl, options); };


/***/ }),
/* 738 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),
/* 739 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(740);
__webpack_require__(336);
__export(__webpack_require__(80));
__export(__webpack_require__(585));
__export(__webpack_require__(64));


/***/ }),
/* 740 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),
/* 741 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var index_internal_1 = __webpack_require__(37);
ko.components.register('dx-dashboard-button-group', {
    viewModel: {
        createViewModel: function (params, componentInfo) {
            var options = {
                keyExpr: 'value',
                width: '100%',
                items: ko.unwrap(params.values).map(function (val) { return { value: val.value, text: index_internal_1.getLocalizationById(val.displayValue) }; }),
                onItemClick: function (e) { params.value(e.itemData.value); },
                disabled: params.disabled,
                selectedItemKeys: [ko.unwrap(params.value.peek())]
            };
            return options;
        }
    },
    template: { element: 'dx-dashboard-button-group-template' }
});
ko.components.register('dx-dashboard-checked-button', {
    viewModel: {
        createViewModel: function (params, componentInfo) {
            var key = 'key';
            var options = {
                elementAttr: { class: params.icon ? 'dx-dashboard-button-with-icon' : undefined },
                keyExpr: 'key',
                width: '100%',
                items: ko.computed(function () {
                    var template = ko.unwrap(params.template);
                    var icon = ko.unwrap(params.icon);
                    if (!template && icon) {
                        template = '<svg><use xlink:href=#' + icon + '></use></svg>';
                    }
                    return [{
                            key: key,
                            disabled: ko.unwrap(params.disabled),
                            hint: ko.unwrap(params.hint),
                            text: ko.unwrap(params.text),
                            template: template
                        }];
                }),
                onItemClick: params.click,
                disabled: params.disabled,
                selectedItemKeys: ko.computed(function () { return ko.unwrap(params.isSelected) ? [key] : []; }),
            };
            if (params.isSelected === false) {
                options.onSelectionChanged = function (e) {
                    e.component.option('selectedItemKeys', []);
                };
            }
            return options;
        }
    },
    template: { element: 'dx-dashboard-button-group-template' }
});


/***/ }),
/* 742 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),
/* 743 */
/***/ (function(module, exports) {

module.exports = { default: DevExpress.ui.dxForm };

/***/ }),
/* 744 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _shared_properties_composer_1 = __webpack_require__(625);
var _section_descriptors_1 = __webpack_require__(15);
var _base_item_surface_1 = __webpack_require__(23);
var GroupItemSurface = (function (_super) {
    __extends(GroupItemSurface, _super);
    function GroupItemSurface(dashboardItem, dashboardModel, dataSourceBrowser) {
        return _super.call(this) || this;
    }
    GroupItemSurface.prototype.getPropertiesComposer = function () {
        return new _shared_properties_composer_1.SharedPropertiesComposer(this._dashboardItemCustomization);
    };
    return GroupItemSurface;
}(_base_item_surface_1.BaseItemSurface));
exports.GroupItemSurface = GroupItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('Group', GroupItemSurface);


/***/ }),
/* 745 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var _helpers_1 = __webpack_require__(630);
var _data_source_browser_1 = __webpack_require__(40);
function getDimensionsExpressions(dashboardItem, dataFieldProvider) {
    var deferred = $.Deferred();
    var fieldsNames = dashboardItem._dimensions.map(function (d) { return d.dataMember(); });
    _data_source_browser_1.getDataFields(fieldsNames, dashboardItem.dataSource(), dashboardItem.dataMember(), dataFieldProvider)
        .done(function (fields) {
        var dimensionsExpressions = {};
        dashboardItem._dimensions.map(function (dim) {
            var field = fields.filter(function (f) { return f.dataMember() === dim.dataMember(); })[0];
            dimensionsExpressions[dim.uniqueName()] = _helpers_1.getDimensionExpression(dim.dataMember(), dim.dateTimeGroupInterval(), dim.textGroupInterval(), field.fieldType());
        });
        deferred.resolve(dimensionsExpressions);
    });
    return deferred.promise();
}
exports.getDimensionsExpressions = getDimensionsExpressions;


/***/ }),
/* 746 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),
/* 747 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = __webpack_require__(69);
var ko = __webpack_require__(0);
var _draggable_1 = __webpack_require__(595);
var _dashboard_item_helper_1 = __webpack_require__(102);
ko.bindingHandlers['toolboxitemdraggable'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var model = ko.unwrap(valueAccessor());
        events_1.on(element, 'dragstart', function (ev) {
            var originalEvent = ev.originalEvent, item = ko.dataFor(originalEvent.target);
            originalEvent.dataTransfer.effectAllowed = 'move';
            _draggable_1.DragDataProvider.dragData = { 'type': 'NewLayoutItem', itemJson: _dashboard_item_helper_1.getItemJson(model.type) };
            originalEvent.dataTransfer.setData('text', JSON.stringify(_draggable_1.DragDataProvider.dragData));
            return true;
        });
        events_1.on(element, 'dragend', function (ev) {
            _draggable_1.DragDataProvider.dragData = null;
        });
    }
};


/***/ }),
/* 748 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ }),
/* 749 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var _default_1 = __webpack_require__(6);
var _cells_item_format_rule_1 = __webpack_require__(85);
var grid_columns_1 = __webpack_require__(145);
var _section_descriptors_1 = __webpack_require__(15);
var _display_name_provider_1 = __webpack_require__(24);
var _shared_format_rule_properties_composer_1 = __webpack_require__(228);
function createGridItemFormatRulePropertiesComposer() {
    return new _shared_format_rule_properties_composer_1.FormatRulePropertiesComposer({
        createDataTypeObservable: _shared_format_rule_properties_composer_1.createDataTypeObservable,
        getCommonFormatRuleProperties: function (formatRule, dashboardItem, dataSourceBrowser) {
            return _shared_format_rule_properties_composer_1.getCommonCellsFormatRuleProperties(formatRule, dashboardItem, grabDataItems(dashboardItem, dataSourceBrowser), grapApplyToItems(dashboardItem, dataSourceBrowser));
        },
        getConditionFormatRuleProperties: function () { return ({ properties: [] }); },
        getMiscFormatRuleProperties: getMiscFormatRuleProperties
    });
}
exports.createGridItemFormatRulePropertiesComposer = createGridItemFormatRulePropertiesComposer;
function getMiscFormatRuleProperties(formatRule, dashboardItem, dataSourceBrowser) {
    var visibilityRules = {};
    visibilityRules[_cells_item_format_rule_1.applyToRow.propertyName] = function (m) { return !formatRule.condition()._isApplyToRowColumnRestricted; };
    return {
        properties: [_cells_item_format_rule_1.applyToRow],
        visibilityFilterRules: visibilityRules
    };
}
function grabDataItems(dashboardItem, dataSourceBrowser) {
    return function () { return dashboardItem
        .columns()
        .filter(function (c) { return !(c instanceof grid_columns_1.GridDeltaColumn) && !(c instanceof grid_columns_1.GridSparklineColumn); })
        .map(function (c) { return ({
        uniqueName: c.actualDataItem.uniqueName(),
        displayName: _display_name_provider_1.getDataItemContainerDisplayName(dataSourceBrowser, dashboardItem, c)
    }); })
        .concat(dashboardItem
        .hiddenMeasures()
        .map(function (m) { return ({
        uniqueName: m.uniqueName(),
        displayName: _default_1.getLocalizationById(_section_descriptors_1.SectionDescriptors.HiddenMeasures.title) + ' - ' + _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, dashboardItem, m)
    }); })); };
}
function grapApplyToItems(dashboardItem, dataSourceBrowser) {
    return function () { return dashboardItem
        .columns()
        .filter(function (c) { return !(c instanceof grid_columns_1.GridDeltaColumn); })
        .map(function (c) {
        return {
            uniqueName: c.actualDataItem.uniqueName,
            displayName: _display_name_provider_1.getDataItemContainerDisplayName(dataSourceBrowser, dashboardItem, c)
        };
    }); };
}


/***/ }),
/* 750 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var model_1 = __webpack_require__(38);
var _cells_item_format_rule_1 = __webpack_require__(85);
var _pivot_item_format_rule_1 = __webpack_require__(282);
var _pivot_item_format_rule_level_1 = __webpack_require__(283);
var _form_adapter_1 = __webpack_require__(613);
var _form_adapter_editors_1 = __webpack_require__(22);
var _section_descriptors_1 = __webpack_require__(15);
var _display_name_provider_1 = __webpack_require__(24);
var _shared_format_rule_properties_composer_1 = __webpack_require__(228);
function createPivotItemFormatRulePropertiesComposer() {
    return new _shared_format_rule_properties_composer_1.FormatRulePropertiesComposer({
        createDataTypeObservable: _shared_format_rule_properties_composer_1.createDataTypeObservable,
        getCommonFormatRuleProperties: function (formatRule, dashboardItem, dataSourceBrowser) {
            var info = _shared_format_rule_properties_composer_1.getCommonCellsFormatRuleProperties(formatRule, dashboardItem, grabDataItems(dashboardItem, dataSourceBrowser), grapApplyToItems(dashboardItem, dataSourceBrowser));
            if (!info.disabledFilterRules)
                info.disabledFilterRules = {};
            info.disabledFilterRules[_cells_item_format_rule_1.dataItemApplyTo.propertyName] = function (m) {
                var pivot = dashboardItem;
                return !(pivot.values().filter(function (v) { return v.uniqueName() === m.dataItemName(); }).length
                    || pivot.hiddenMeasures().filter(function (v) { return v.uniqueName() === m.dataItemName(); }).length);
            };
            return info;
        },
        getConditionFormatRuleProperties: function () { return ({ properties: [] }); },
        getMiscFormatRuleProperties: getMiscFormatRuleProperties
    });
}
exports.createPivotItemFormatRulePropertiesComposer = createPivotItemFormatRulePropertiesComposer;
function getMiscFormatRuleProperties(formatRule, pivot, dataSourceBrowser) {
    var visibilityRules = {};
    var properties = [];
    var intersectionLevelModeValuesObservable = ko.observable(_form_adapter_1.transformValuesDictionary(_pivot_item_format_rule_1.intersectionLevelModeValues));
    ko.computed(function () {
        if ((formatRule.condition() instanceof model_1.FormatConditionRangeBase && formatRule.condition().valueType() !== 'Number')
            || formatRule.condition() instanceof model_1.FormatConditionTopBottom
            || formatRule.condition() instanceof model_1.FormatConditionAverage) {
            intersectionLevelModeValuesObservable(_form_adapter_1.transformValuesDictionary(_pivot_item_format_rule_1.restrictedIntersectionLevelModeValues));
        }
        else {
            intersectionLevelModeValuesObservable(_form_adapter_1.transformValuesDictionary(_pivot_item_format_rule_1.intersectionLevelModeValues));
        }
    });
    properties.push(__assign({}, _pivot_item_format_rule_1.intersectionLevelMode, { formAdapterItem: _form_adapter_editors_1.dynamicSelectBoxEditor(intersectionLevelModeValuesObservable) }));
    properties.push({
        container: _pivot_item_format_rule_1.pivotLevel,
        properties: [
            __assign({ valuesArray: [{ value: null, displayValue: '[Grand Total]' }].concat(pivot.columns().map(function (m) { return ({ value: m.uniqueName(), displayValue: _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, pivot, m) }); })) }, _pivot_item_format_rule_level_1.pivotLevelColumn),
            __assign({ valuesArray: [{ value: null, displayValue: '[Grand Total]' }].concat(pivot.rows().map(function (m) { return ({ value: m.uniqueName(), displayValue: _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, pivot, m) }); })) }, _pivot_item_format_rule_level_1.pivotLevelRow)
        ]
    });
    properties.push(_pivot_item_format_rule_1.applyToColumn);
    properties.push(_cells_item_format_rule_1.applyToRow);
    var isMeasure = !!pivot.values().filter(function (v) { return v.uniqueName() === formatRule.dataItemApplyToName(); }).length;
    visibilityRules[_cells_item_format_rule_1.applyToRow.propertyName] = function (m) { return !formatRule.condition()._isApplyToRowColumnRestricted && isMeasure; };
    visibilityRules[_pivot_item_format_rule_1.applyToColumn.propertyName] = function (m) { return !formatRule.condition()._isApplyToRowColumnRestricted && isMeasure; };
    visibilityRules[_pivot_item_format_rule_level_1.pivotLevelColumn.propertyName] =
        [_pivot_item_format_rule_1.intersectionLevelMode.propertyName, '=', 'SpecificLevel'];
    visibilityRules[_pivot_item_format_rule_level_1.pivotLevelRow.propertyName] =
        [_pivot_item_format_rule_1.intersectionLevelMode.propertyName, '=', 'SpecificLevel'];
    return {
        properties: properties,
        visibilityFilterRules: visibilityRules
    };
}
function grabDataItems(dashboardItem, dataSourceBrowser) {
    return function () { return grapApplyToItems(dashboardItem, dataSourceBrowser)()
        .concat(dashboardItem
        .hiddenMeasures()
        .map(function (m) { return ({
        uniqueName: m.uniqueName(),
        displayName: _default_1.getLocalizationById(_section_descriptors_1.SectionDescriptors.HiddenMeasures.title) + ' - ' + _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, dashboardItem, m)
    }); })); };
}
function grapApplyToItems(pivot, dataSourceBrowser) {
    return function () { return pivot.values().map(function (m) { return ({
        uniqueName: m.uniqueName(),
        displayName: _default_1.getLocalizationById(_section_descriptors_1.SectionDescriptors.Values.title) + ' - ' + _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, pivot, m)
    }); }).concat(pivot.columns().map(function (d) { return ({
        uniqueName: d.uniqueName(),
        displayName: _default_1.getLocalizationById(_section_descriptors_1.SectionDescriptors.Columns.title) + ' - ' + _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, pivot, d)
    }); })).concat(pivot.rows().map(function (d) { return ({
        uniqueName: d.uniqueName(),
        displayName: _default_1.getLocalizationById(_section_descriptors_1.SectionDescriptors.Rows.title) + ' - ' + _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, pivot, d)
    }); })); };
}


/***/ }),
/* 751 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports._areTheSameBindingProviders = (function (a, b) {
    var bindingsA = a._getBindingModel(), bindingsB = b._getBindingModel();
    if (!bindingsA || !bindingsB)
        return false;
    return (bindingsA
        .filter(function (binding, index) {
        return bindingsB.some(function (anotherBinding) { return anotherBinding.propertyName === binding.propertyName; });
    })[1]);
});


/***/ }),
/* 752 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var DataItemLinkComponent = (function () {
    function DataItemLinkComponent(surface, $element, propertiesController, surfaceItemsFactory) {
        this.surface = surface;
        this.$element = $element;
        this.propertiesController = propertiesController;
        this.surfaceItemsFactory = surfaceItemsFactory;
    }
    return DataItemLinkComponent;
}());
exports.DataItemLinkComponent = DataItemLinkComponent;
ko.components.register('dx-dashboard-data-item-link', {
    viewModel: {
        createViewModel: function (params, componentInfo) {
            if (params.propertiesController) {
                params.selected = ko.computed(function () { return (params.propertiesController.mainModel() && params.propertiesController.mainModel().data && ko.unwrap(params.propertiesController.mainModel().data.model)) === (params.selectionTarget ? ko.unwrap(params.selectionTarget) : ko.unwrap(params.item)); });
            }
            if (params.isEmpty === undefined) {
                params.isEmpty = ko.computed(function () {
                    return !(params.item && params.item.dataItem && params.item.dataItem() && params.item.dataItem().dataMember());
                });
            }
            params.placeholder = _default_1.getLocalizationById(params.placeholder);
            params.selectedPlaceholder = _default_1.getLocalizationById(params.selectedPlaceholder);
            return params;
        }
    },
    template: { element: 'dx-dashboard-data-item-link' }
});


/***/ }),
/* 753 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _bound_image_item_1 = __webpack_require__(202);
var _bound_image_item_properties_composer_1 = __webpack_require__(645);
var _single_data_item_surface_1 = __webpack_require__(45);
var _section_descriptors_1 = __webpack_require__(15);
var _base_item_surface_1 = __webpack_require__(23);
var BoundImageItemSurface = (function (_super) {
    __extends(BoundImageItemSurface, _super);
    function BoundImageItemSurface(dashboardItem, dashboardModel, dataSourceBrowser) {
        return _super.call(this, dashboardItem, dashboardModel, dataSourceBrowser) || this;
    }
    BoundImageItemSurface.prototype.fillSections = function () {
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: {
                title: 'DashboardWebStringId.Binding.Attribute',
                bindingProperty: {
                    propertyName: _bound_image_item_1.imageItem.propertyName,
                    dataItemType: 'Dimension',
                    emptyPlaceholder: 'DashboardWebStringId.Binding.SetAttribute',
                    selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureAttribute'
                }
            }
        }));
    };
    BoundImageItemSurface.prototype.getPropertiesComposer = function () {
        return new _bound_image_item_properties_composer_1.BoundImageItemPropertiesComposer(this._dashboardItemCustomization);
    };
    return BoundImageItemSurface;
}(_base_item_surface_1.DataDashboardItemSurface));
exports.BoundImageItemSurface = BoundImageItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('BoundImage', BoundImageItemSurface);


/***/ }),
/* 754 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _data_field_1 = __webpack_require__(14);
var _bubble_map_item_properties_composer_1 = __webpack_require__(646);
var _data_item_collection_surface_1 = __webpack_require__(33);
var _single_data_item_surface_1 = __webpack_require__(45);
var _section_descriptors_1 = __webpack_require__(15);
var _base_item_surface_1 = __webpack_require__(23);
var BubbleMapItemSurface = (function (_super) {
    __extends(BubbleMapItemSurface, _super);
    function BubbleMapItemSurface(dashboardItem, dashboardModel, dataSourceBrowser) {
        return _super.call(this, dashboardItem, dashboardModel, dataSourceBrowser) || this;
    }
    BubbleMapItemSurface.prototype.fillSections = function () {
        var _this = this;
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: _section_descriptors_1.SectionDescriptors.Latitude,
            fieldConstraint: function (field) { return _data_field_1.DataField.isNumeric(field); },
            warning: ko.computed(function () { return !_this.dashboardItem.latitude() && !!(_this.dashboardItem.longitude() || _this.dashboardItem.weight() || _this.dashboardItem.color() || _this.dashboardItem.tooltipDimensions().length || _this.dashboardItem.tooltipMeasures().length); })
        }));
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: _section_descriptors_1.SectionDescriptors.Longitude,
            fieldConstraint: function (field) { return _data_field_1.DataField.isNumeric(field); },
            warning: ko.computed(function () { return !_this.dashboardItem.longitude() && !!(_this.dashboardItem.latitude() || _this.dashboardItem.weight() || _this.dashboardItem.color() || _this.dashboardItem.tooltipDimensions().length || _this.dashboardItem.tooltipMeasures().length); })
        }));
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({ itemSurface: this, sectionInfo: _section_descriptors_1.SectionDescriptors.Weight }));
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: _section_descriptors_1.SectionDescriptors.Color,
            warning: ko.computed(function () { return !_this.dashboardItem.color() && !!(_this.dashboardItem.latitude() || _this.dashboardItem.longitude() || _this.dashboardItem.weight() || _this.dashboardItem.tooltipDimensions().length || _this.dashboardItem.tooltipMeasures().length); })
        }));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.TooltipDimensions));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.TooltipMeasures));
    };
    BubbleMapItemSurface.prototype.getPropertiesComposer = function () {
        return new _bubble_map_item_properties_composer_1.BubleMapItemPropertiesComposer(this._dashboardItemCustomization);
    };
    return BubbleMapItemSurface;
}(_base_item_surface_1.DataDashboardItemSurface));
exports.BubbleMapItemSurface = BubbleMapItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('BubbleMap', BubbleMapItemSurface);


/***/ }),
/* 755 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _data_field_1 = __webpack_require__(14);
var card_item_format_rule_1 = __webpack_require__(129);
var _undo_engine_helper_1 = __webpack_require__(27);
var card_1 = __webpack_require__(208);
var card_layout_template_1 = __webpack_require__(209);
var legacy_settings_1 = __webpack_require__(80);
var _format_rule_surface_1 = __webpack_require__(229);
var _accordion_tab_1 = __webpack_require__(7);
var _collection_editor_viewmodel_1 = __webpack_require__(79);
var _display_name_provider_1 = __webpack_require__(24);
var _card_element_properties_composer_1 = __webpack_require__(647);
var _card_item_properties_composer_1 = __webpack_require__(648);
var _data_item_properties_composer_1 = __webpack_require__(116);
var _data_item_collection_surface_1 = __webpack_require__(33);
var _data_item_container_collection_surface_1 = __webpack_require__(93);
var _single_data_item_surface_1 = __webpack_require__(45);
var _section_descriptors_1 = __webpack_require__(15);
var _base_item_surface_1 = __webpack_require__(23);
var _delta_numeric_format_surface_1 = __webpack_require__(162);
var _edit_card_template_surface_1 = __webpack_require__(669);
var CardItemSurface = (function (_super) {
    __extends(CardItemSurface, _super);
    function CardItemSurface(dashboardItem, dashboardModel, dataSourceBrowser) {
        var _this = _super.call(this, dashboardItem, dashboardModel, dataSourceBrowser) || this;
        _this._editRuleHandler = function (selection, args, container) {
            var surface = new _format_rule_surface_1.FormatRuleSurface(container, _this.dashboardItem, _this._dataSourceBrowser, _this.propertiesController);
            surface.startEditing(args);
        };
        return _this;
    }
    CardItemSurface.prototype.addConditionalFormattingOptions = function (tabs, dataItem) {
        if (dataItem && dataItem.uniqueName()) {
            tabs.push(new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ConditionalFormatting, 'DashboardWebStringId.ConditionalFormatting', _data_item_properties_composer_1.DataItemsPropertiesComposer.getFormatRulesWrapper(this.dashboardItem, function () {
                var rule = new card_item_format_rule_1.CardItemFormatRule();
                rule.dataItemName(dataItem.uniqueName());
                return rule;
            }, function (rule) {
                if (rule instanceof card_item_format_rule_1.CardItemFormatRule) {
                    return rule.dataItemName() === dataItem.uniqueName();
                }
                return false;
            }, this._editRuleHandler)));
        }
    };
    CardItemSurface.prototype.extendHiddenMeasuresTabs = function (tabs, model) {
        this.addConditionalFormattingOptions(tabs, model);
    };
    CardItemSurface.prototype.fillSections = function () {
        var _this = this;
        var applyTemplateToAllCards = function (template) {
            _this.applyLayoutTemplateToAllCards(template);
        };
        var sectionInfo = {
            title: 'DashboardWebStringId.Binding.Cards',
            bindingProperty: {
                propertyName: 'cards',
                groupName: 'Card',
                emptyPlaceholder: 'DashboardWebStringId.Binding.AddCard',
                selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureCard',
                creator: function (itemType) {
                    if (itemType === void 0) { itemType = 'Card'; }
                    var card = new card_1.Card(_this.dashboardItem, { '@ItemType': itemType });
                    var defaultTemplate;
                    if (legacy_settings_1.LegacySettings._useCardLegacyLayout) {
                        defaultTemplate = new card_layout_template_1.CardEmptyLayoutTemplate();
                    }
                    else {
                        defaultTemplate = new card_layout_template_1.CardStretchedLayoutTemplate();
                        defaultTemplate._resetToDefaults();
                    }
                    card.layoutTemplate(defaultTemplate);
                    return card;
                },
                dataItemType: 'Measure'
            },
            detailsPropertiesComposer: new _card_element_properties_composer_1.CardElementPropertiesComposer(this._dataItemContainerCustomization, function (model) {
                var surface = new _edit_card_template_surface_1.EditCardTemplateSurface(model, _this.propertiesController, _this.dashboardItem.seriesDimensions().map(function (dim) { return _display_name_provider_1.getDataItemDisplayName(_this._dataSourceBrowser, _this.dashboardItem, dim); }), applyTemplateToAllCards);
                surface.startEditing(new _collection_editor_viewmodel_1.CollectionEditorEditItemArguments());
            }, function (model) {
                var surface = new _delta_numeric_format_surface_1.DeltaNumericFormatSurface(model, _this.propertiesController);
                surface.startEditing(new _collection_editor_viewmodel_1.CollectionEditorEditItemArguments());
            }, applyTemplateToAllCards, function (selection, args, container) {
                var surface = new _format_rule_surface_1.FormatRuleSurface(container, _this.dashboardItem, _this._dataSourceBrowser, _this.propertiesController);
                surface.startEditing(args);
            })
        };
        this.dataSections.push(new _data_item_container_collection_surface_1.DataItemContainerCollectionSurface(this, this.dashboardItem, sectionInfo, ko.computed(function () { return !_this.dashboardItem.cards().length && (!!_this.dashboardItem.seriesDimensions().length || (!!_this.dashboardItem.sparklineArgument() && !!_this.dashboardItem.sparklineArgument().uniqueName())); })));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.SeriesDimension, this.addConditionalFormattingOptions.bind(this)));
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: _section_descriptors_1.SectionDescriptors.SparklineArgument,
            fieldConstraint: function (dataField) {
                return _data_field_1.DataField.isContinous(dataField);
            }
        }));
    };
    CardItemSurface.prototype.getPropertiesComposer = function () {
        return new _card_item_properties_composer_1.CardItemPropertiesComposer(this._dashboardItemCustomization, this._editRuleHandler);
    };
    CardItemSurface.prototype.applyLayoutTemplateToAllCards = function (template) {
        this.dashboardItem.cards().forEach(function (card) {
            if (ko.unwrap(card.layoutTemplate) !== ko.unwrap(template)) {
                card.layoutTemplate(template.clone());
            }
        });
    };
    __decorate([
        _undo_engine_helper_1.wrapWithUndoRedo
    ], CardItemSurface.prototype, "applyLayoutTemplateToAllCards", null);
    return CardItemSurface;
}(_base_item_surface_1.DataDashboardItemSurface));
exports.CardItemSurface = CardItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('Card', CardItemSurface);


/***/ }),
/* 756 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var _helper_classes_1 = __webpack_require__(36);
var chart_pane_1 = __webpack_require__(327);
var chart_series_creator_1 = __webpack_require__(109);
var _chart_item_properties_composer_1 = __webpack_require__(650);
var _chart_series_properties_composer_1 = __webpack_require__(378);
var _data_item_collection_surface_1 = __webpack_require__(33);
var _data_item_container_collection_surface_1 = __webpack_require__(93);
var _section_descriptors_1 = __webpack_require__(15);
var _base_item_surface_1 = __webpack_require__(23);
var ChartItemSurface = (function (_super) {
    __extends(ChartItemSurface, _super);
    function ChartItemSurface(dashboardItem, dashboardModel, dataSourceBrowser) {
        return _super.call(this, dashboardItem, dashboardModel, dataSourceBrowser) || this;
    }
    ChartItemSurface.prototype.fillSections = function () {
        var _this = this;
        var createPaneSection = function (pane, index) {
            var numberPostfix = _this.dashboardItem.panes().length === 1 ? '' : ' (' + pane.name() + ')', sectionsBeforePanes = 1;
            var sectionInfo = {
                title: _default_1.formatLocalizable('DashboardWebStringId.Binding.ValuesPattern', numberPostfix),
                bindingProperty: {
                    propertyName: 'series',
                    groupName: 'Series',
                    dataItemType: 'Measure',
                    emptyPlaceholder: 'DashboardWebStringId.Binding.AddValues',
                    selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureValues',
                    creator: function (itemType) {
                        if (itemType === void 0) { itemType = 'Bar'; }
                        return pane.createSeriesByViewType(itemType);
                    },
                    containersMap: chart_series_creator_1.ChartSeriesCreator.chartSeriesViewTypesMap
                },
                actions: undefined,
                detailsPropertiesComposer: new _chart_series_properties_composer_1.ChartSeriesPropertiesComposer(_this._dataItemContainerCustomization)
            };
            if (index > 0) {
                sectionInfo.actions = [{
                        title: 'DashboardWebStringId.Binding.RemovePane',
                        icon: 'dx-dashboard-remove-small',
                        action: function () {
                            _this.dashboardItem.panes.remove(pane);
                            return false;
                        }
                    }];
            }
            _this.dataSections.splice(index + sectionsBeforePanes, 0, new _data_item_container_collection_surface_1.DataItemContainerCollectionSurface(_this, pane, sectionInfo, ko.computed(function () { return (_this.dashboardItem.arguments().length > 0 || _this.dashboardItem.seriesDimensions().length > 0) && _this.dashboardItem.panes().every(function (p) { return p.series().length === 0; }); })));
        };
        this.dataSections.push({
            template: 'dx-dashboard-add-pane-section',
            addPane: function () {
                var pane = new chart_pane_1.ChartPane(_this.dashboardItem, { '@Name': _helper_classes_1.NameGenerator.generateName(_default_1.getLocalizationById('DashboardStringId.DefaultNameChartPane') + ' ', _this.dashboardItem.panes(), 'name', 1), '@ItemType': 'Pane' });
                _this.dashboardItem.panes.push(pane);
            },
            dispose: function () { }
        });
        this._disposables.push(ko.computed(function () {
            var newPanes = _this.dashboardItem.panes();
            var lastPaneSectionIndex = 1;
            for (; lastPaneSectionIndex < _this.dataSections().length; lastPaneSectionIndex++) {
                if (!(_this.dataSections()[lastPaneSectionIndex] instanceof _data_item_container_collection_surface_1.DataItemContainerCollectionSurface)) {
                    break;
                }
            }
            _this.dataSections.splice(1, lastPaneSectionIndex - 1);
            _this.dashboardItem.panes().forEach(function (pane, index) {
                createPaneSection(pane, index);
            });
        }));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.Arguments));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.SeriesDimension));
    };
    ChartItemSurface.prototype.getPropertiesComposer = function () {
        return new _chart_item_properties_composer_1.ChartItemPropertiesComposer(this._dashboardItemCustomization);
    };
    return ChartItemSurface;
}(_base_item_surface_1.DataDashboardItemSurface));
exports.ChartItemSurface = ChartItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('Chart', ChartItemSurface);


/***/ }),
/* 757 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _data_field_1 = __webpack_require__(14);
var chorolpeth_map_item_1 = __webpack_require__(333);
var _collection_editor_viewmodel_1 = __webpack_require__(79);
var _choropleth_map_element_properties_composer_1 = __webpack_require__(651);
var _choropleth_map_item_properties_composer_1 = __webpack_require__(652);
var _data_item_collection_surface_1 = __webpack_require__(33);
var _data_item_container_collection_surface_1 = __webpack_require__(93);
var _single_data_item_surface_1 = __webpack_require__(45);
var _section_descriptors_1 = __webpack_require__(15);
var _base_item_surface_1 = __webpack_require__(23);
var _delta_numeric_format_surface_1 = __webpack_require__(162);
var ChoroplethMapItemSurface = (function (_super) {
    __extends(ChoroplethMapItemSurface, _super);
    function ChoroplethMapItemSurface(dashboardItem, dashboardModel, dataSourceBrowser) {
        return _super.call(this, dashboardItem, dashboardModel, dataSourceBrowser) || this;
    }
    ChoroplethMapItemSurface.prototype.fillSections = function () {
        var _this = this;
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: _section_descriptors_1.SectionDescriptors.AttributeDimension,
            fieldConstraint: function (field) { return _data_field_1.DataField.isNumeric(field) || field.fieldType() === 'Bool' || field.fieldType() === 'Text'; },
            warning: ko.computed(function () { return !_this.dashboardItem.attributeDimension() && !!(_this.dashboardItem.maps().length || _this.dashboardItem.tooltipMeasures().length); })
        }));
        var sectionInfo = {
            title: 'DashboardWebStringId.Binding.Maps',
            bindingProperty: {
                propertyName: 'maps',
                emptyPlaceholder: 'DashboardWebStringId.Binding.AddMap',
                selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureMap',
                creator: function (itemType) {
                    if (itemType === void 0) { itemType = 'ValueMap'; }
                    return _this.dashboardItem._createMap({ '@ItemType': itemType });
                },
                containersMap: chorolpeth_map_item_1.ChoroplethMapItem.choroplethMapTypesMap,
                dataItemType: 'Measure'
            },
            detailsPropertiesComposer: new _choropleth_map_element_properties_composer_1.ChoroplethMapElementPropertiesComposer(this._dataItemContainerCustomization, function (model) {
                var surface = new _delta_numeric_format_surface_1.DeltaNumericFormatSurface(model, _this.propertiesController);
                surface.startEditing(new _collection_editor_viewmodel_1.CollectionEditorEditItemArguments());
            })
        };
        this.dataSections.push(new _data_item_container_collection_surface_1.DataItemContainerCollectionSurface(this, this.dashboardItem, sectionInfo, ko.computed(function () { return !_this.dashboardItem.maps().length && !!(_this.dashboardItem.attributeDimension() || _this.dashboardItem.tooltipMeasures().length); })));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.TooltipMeasures));
    };
    ChoroplethMapItemSurface.prototype.getPropertiesComposer = function () {
        return new _choropleth_map_item_properties_composer_1.ChoroplethMapItemPropertiesComposer(this._dashboardItemCustomization);
    };
    return ChoroplethMapItemSurface;
}(_base_item_surface_1.DataDashboardItemSurface));
exports.ChoroplethMapItemSurface = ChoroplethMapItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('ChoroplethMap', ChoroplethMapItemSurface);


/***/ }),
/* 758 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var string_1 = __webpack_require__(30);
var _default_1 = __webpack_require__(6);
var custom_item_1 = __webpack_require__(103);
var accordion_tab_options_1 = __webpack_require__(224);
var _object_properties_wrapper_1 = __webpack_require__(10);
var _accordion_tab_1 = __webpack_require__(7);
var _base_properties_composer_1 = __webpack_require__(12);
var _shared_composers_1 = __webpack_require__(13);
var _data_item_collection_surface_1 = __webpack_require__(33);
var _single_data_item_surface_1 = __webpack_require__(45);
var _section_descriptors_1 = __webpack_require__(15);
var _base_item_surface_1 = __webpack_require__(23);
var _custom_item_properties_composer_helper_1 = __webpack_require__(759);
var CustomItemPropertiesComposer = (function (_super) {
    __extends(CustomItemPropertiesComposer, _super);
    function CustomItemPropertiesComposer(customizeHandler) {
        return _super.call(this, customizeHandler) || this;
    }
    CustomItemPropertiesComposer.prototype._mapLegacyPropertiesToTabs = function (model) {
        var propertiesByTabs = model.legacyCustomProperties && model.legacyCustomProperties.reduce(function (acc, property) {
            var tabName = property.sectionName || _accordion_tab_1.KnownTabs.Common;
            acc[tabName] = acc[tabName] || [];
            acc[tabName].push(_custom_item_properties_composer_helper_1.CustomItemPropertiesComposerHelper.convertToDashboardSerializationInfo(property));
            return acc;
        }, {});
        var specificProperties = propertiesByTabs[_accordion_tab_1.KnownTabs.Common] ? [
            {
                container: { propertyName: 'customProperties' },
                properties: propertiesByTabs[_accordion_tab_1.KnownTabs.Common] || []
            }
        ] : [];
        return [
            new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', _shared_composers_1.SharedComposers.getCommonWrapper(model, specificProperties))
        ].concat(Object.keys(propertiesByTabs)
            .filter(function (tabName) { return tabName !== _accordion_tab_1.KnownTabs.Common; })
            .map(function (tabName) { return new _accordion_tab_1.AccordionTab(tabName, tabName, new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: model.customProperties,
            properties: propertiesByTabs[tabName]
        })); }));
    };
    CustomItemPropertiesComposer.prototype._composeTabsCore = function (model) {
        if (model._optionsPanelSections) {
            return [
                new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.AccordionTab.Common', _shared_composers_1.SharedComposers.getCommonWrapper(model))
            ].concat(model._optionsPanelSections.reduce(function (tabs, section) {
                accordion_tab_options_1._customizeTabs(tabs, section, model);
                return tabs;
            }, []));
        }
        else {
            return this._mapLegacyPropertiesToTabs(model);
        }
    };
    return CustomItemPropertiesComposer;
}(_base_properties_composer_1.DashboardItemPropertiesComposer));
exports.CustomItemPropertiesComposer = CustomItemPropertiesComposer;
var CustomItemSurface = (function (_super) {
    __extends(CustomItemSurface, _super);
    function CustomItemSurface(dashboardItem, dashboardModel, dataSourceBrowser) {
        return _super.call(this, dashboardItem, dashboardModel, dataSourceBrowser) || this;
    }
    Object.defineProperty(CustomItemSurface.prototype, "showDefaultSections", {
        get: function () {
            return this.dashboardItem.customBindings.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    CustomItemSurface.prototype.fillSections = function () {
        var _this = this;
        var format = function (localizationId, arg1) { return string_1.format(_default_1.getLocalizationById(localizationId), _default_1.getLocalizationById(arg1)); };
        this.dashboardItem.customBindings.forEach(function (binding) {
            var sectionInfo = {
                title: binding.displayName,
                bindingProperty: {
                    propertyName: custom_item_1.CustomItem._getBindingLinkName(binding.propertyName),
                    dataItemType: binding.dataItemType,
                    emptyPlaceholder: binding.emptyPlaceholder || format('DashboardWebStringId.Binding.DefaultEmptyPlaceholder', binding.displayName),
                    selectedPlaceholder: binding.selectedPlaceholder || format('DashboardWebStringId.Binding.DefaultSelectedPlaceholder', binding.displayName)
                }
            };
            if (binding.array) {
                _this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(_this, sectionInfo));
            }
            else {
                _this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
                    itemSurface: _this,
                    sectionInfo: sectionInfo,
                    fieldConstraint: function (dataField) {
                        return !binding.constraints || !binding.constraints.allowedTypes || binding.constraints.allowedTypes.indexOf(dataField.fieldType()) >= 0;
                    }
                }));
            }
        });
    };
    CustomItemSurface.prototype.getPropertiesComposer = function () {
        return new CustomItemPropertiesComposer(this._dashboardItemCustomization);
    };
    return CustomItemSurface;
}(_base_item_surface_1.DataDashboardItemSurface));
exports.CustomItemSurface = CustomItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('CustomItem', CustomItemSurface);


/***/ }),
/* 759 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var _default_1 = __webpack_require__(6);
var _custom_item_metadata_1 = __webpack_require__(510);
var _form_adapter_editors_1 = __webpack_require__(22);
var _file_picker_1 = __webpack_require__(367);
var imageEditor = function () {
    return {
        template: function (args) {
            var div = document.createElement('div');
            new _file_picker_1.dxDashboardFilePicker(div, {
                placeholderId: 'Image',
                accept: 'image/*',
                type: 'img',
                value: _form_adapter_editors_1.getFieldValue(args),
                onValueChanged: function (e) {
                    args.component.updateData(args.dataField, e.value);
                }
            });
            return div;
        }
    };
};
var radioGroupEditor = function (values) { return ({
    editorType: 'dxRadioGroup',
    editorOptions: {
        dataSource: values,
        valueExpr: 'value',
        displayExpr: 'displayValueId',
    }
}); };
var CustomItemPropertiesComposerHelper = (function () {
    function CustomItemPropertiesComposerHelper() {
    }
    CustomItemPropertiesComposerHelper._getEditorValues = function (serializableInfo) {
        if (serializableInfo.values) {
            var values_1 = ko.unwrap(serializableInfo.values);
            return Object.keys(values_1).map(function (k) { return ({ value: k, displayValueId: values_1[k] }); });
        }
        else if (serializableInfo.valuesArray)
            return serializableInfo.valuesArray.map(function (val) { return ({ value: val.value, displayValueId: val.displayValue }); });
        return undefined;
    };
    CustomItemPropertiesComposerHelper._mapEditor = function (serializableInfo) {
        if (!serializableInfo.editor) {
            return null;
        }
        switch (serializableInfo.editor) {
            case _custom_item_metadata_1.editorTemplates.date:
                return _form_adapter_editors_1.dateBoxEditor();
            case _custom_item_metadata_1.editorTemplates.numeric:
                return _form_adapter_editors_1.numberBoxEditor();
            case _custom_item_metadata_1.editorTemplates.checkBox:
                return _form_adapter_editors_1.checkBoxEditor({ text: _default_1.getLocalizationById(serializableInfo.displayName) });
            case _custom_item_metadata_1.editorTemplates.text:
                return _form_adapter_editors_1.textBoxEditor();
            case _custom_item_metadata_1.editorTemplates.combobox:
                return _form_adapter_editors_1.selectBoxEditor(CustomItemPropertiesComposerHelper._getEditorValues(serializableInfo));
            case _custom_item_metadata_1.editorTemplates.bool:
                return _form_adapter_editors_1.buttonGroupEditor([{ value: true, displayValueId: 'DashboardWebStringId.ButtonOn' }, { value: false, displayValueId: 'DashboardWebStringId.ButtonOff' }]);
            case _custom_item_metadata_1.editorTemplates.boolYesNo:
                return _form_adapter_editors_1.buttonGroupEditor([{ value: true, displayValueId: 'DashboardWebStringId.ButtonYes' }, { value: false, displayValueId: 'DashboardWebStringId.ButtonNo' }]);
            case _custom_item_metadata_1.editorTemplates.buttonGroup:
                return _form_adapter_editors_1.buttonGroupEditor(CustomItemPropertiesComposerHelper._getEditorValues(serializableInfo));
            case _custom_item_metadata_1.editorTemplates.boolVisibleHidden:
                return _form_adapter_editors_1.buttonGroupEditor([{ value: true, displayValueId: 'DashboardWebStringId.ButtonVisible' }, { value: false, displayValueId: 'DashboardWebStringId.ButtonHidden' }]);
            case _custom_item_metadata_1.editorTemplates.list:
                return _form_adapter_editors_1.listEditor(CustomItemPropertiesComposerHelper._getEditorValues(serializableInfo));
            case _custom_item_metadata_1.editorTemplates.radioGroup:
                return radioGroupEditor(CustomItemPropertiesComposerHelper._getEditorValues(serializableInfo));
            case _custom_item_metadata_1.editorTemplates.image:
                return imageEditor();
            default:
                var template_1 = serializableInfo.editor.header || serializableInfo.editor.custom;
                return function (context) { return ({
                    customEditorType: template_1,
                    template: function (args, itemElement) {
                        var element = itemElement;
                        var info = serializableInfo;
                        var editor = new dx_analytics_core_1.default.Analytics.Widgets.Editor(info, 0);
                        editor._model(args.component.option('formData'));
                        ko.applyBindingsToNode(element, { template: { name: template_1, data: editor } }, context.bindingContext);
                    }
                }); };
        }
    };
    CustomItemPropertiesComposerHelper.convertToDashboardSerializationInfo = function (property) {
        return {
            propertyName: property.propertyName,
            formAdapterItem: __assign({}, CustomItemPropertiesComposerHelper._mapEditor(property), { label: {
                    text: _default_1.getLocalizationById(property.displayName),
                    visible: !!property.displayName,
                }, validationRules: property.validationRules || [] }),
            editorOptions: property.editorOptions,
        };
    };
    return CustomItemPropertiesComposerHelper;
}());
exports.CustomItemPropertiesComposerHelper = CustomItemPropertiesComposerHelper;


/***/ }),
/* 760 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _data_field_1 = __webpack_require__(14);
var _date_filter_item_1 = __webpack_require__(298);
var _custom_range_properties_composer_1 = __webpack_require__(379);
var _date_filter_item_properties_composer_1 = __webpack_require__(653);
var _single_data_item_surface_1 = __webpack_require__(45);
var _section_descriptors_1 = __webpack_require__(15);
var _base_item_surface_1 = __webpack_require__(23);
var DateFilterItemSurface = (function (_super) {
    __extends(DateFilterItemSurface, _super);
    function DateFilterItemSurface(dashboardItem, dashboardModel, dataSourceBrowser) {
        return _super.call(this, dashboardItem, dashboardModel, dataSourceBrowser) || this;
    }
    DateFilterItemSurface.prototype.fillSections = function () {
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: {
                title: 'DashboardStringId.DescriptionItemDimension',
                bindingProperty: {
                    propertyName: _date_filter_item_1.dateFilterDimension.propertyName,
                    dataItemType: 'Dimension',
                    emptyPlaceholder: 'DashboardStringId.DescriptionItemDimension',
                    selectedPlaceholder: 'DashboardStringId.DescriptionItemDimension'
                }
            },
            fieldConstraint: function (dataField) { return _data_field_1.DataField.isDateTime(dataField); }
        }));
    };
    DateFilterItemSurface.prototype.getPropertiesComposer = function () {
        var _this = this;
        return new _date_filter_item_properties_composer_1.DateFilterItemPropertiesComposer(this._dashboardItemCustomization, function (model) {
            var composer = new _custom_range_properties_composer_1.CustomRangePropertiesComposer();
            var tabs = composer.composeTabs(model, {
                argument: _this.dashboardItem.dimension(),
                rangeFilterItem: _this.dashboardItem
            });
            _this.propertiesController.secondaryModel({
                displayText: model.name,
                data: {
                    model: model,
                    propertiesTabs: ko.observableArray(tabs)
                },
                containingCollection: _this.dashboardItem.dateTimePeriods
            });
        });
    };
    return DateFilterItemSurface;
}(_base_item_surface_1.DataDashboardItemSurface));
exports.DateFilterItemSurface = DateFilterItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('DateFilter', DateFilterItemSurface);


/***/ }),
/* 761 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _filter_item_properties_composer_1 = __webpack_require__(654);
var _data_item_collection_surface_1 = __webpack_require__(33);
var _section_descriptors_1 = __webpack_require__(15);
var _base_item_surface_1 = __webpack_require__(23);
var FilterItemSurface = (function (_super) {
    __extends(FilterItemSurface, _super);
    function FilterItemSurface(dashboardItem, dashboardModel, dataSourceBrowser) {
        return _super.call(this, dashboardItem, dashboardModel, dataSourceBrowser) || this;
    }
    FilterItemSurface.prototype.fillSections = function () {
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.FilterDimensions));
    };
    FilterItemSurface.prototype.getPropertiesComposer = function () {
        return new _filter_item_properties_composer_1.FilterItemPropertiesComposer(this._dashboardItemCustomization);
    };
    return FilterItemSurface;
}(_base_item_surface_1.DataDashboardItemSurface));
exports.FilterItemSurface = FilterItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('ComboBox', FilterItemSurface);
_section_descriptors_1.surfaceItemsFactory.register('ListBox', FilterItemSurface);
_section_descriptors_1.surfaceItemsFactory.register('TreeView', FilterItemSurface);


/***/ }),
/* 762 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var gauge_1 = __webpack_require__(212);
var _collection_editor_viewmodel_1 = __webpack_require__(79);
var _gauge_element_properties_composer_1 = __webpack_require__(655);
var _gauge_item_properties_composer_1 = __webpack_require__(656);
var _data_item_collection_surface_1 = __webpack_require__(33);
var _data_item_container_collection_surface_1 = __webpack_require__(93);
var _section_descriptors_1 = __webpack_require__(15);
var _base_item_surface_1 = __webpack_require__(23);
var _delta_numeric_format_surface_1 = __webpack_require__(162);
var GaugeItemSurface = (function (_super) {
    __extends(GaugeItemSurface, _super);
    function GaugeItemSurface(dashboardItem, dashboardModel, dataSourceBrowser) {
        return _super.call(this, dashboardItem, dashboardModel, dataSourceBrowser) || this;
    }
    GaugeItemSurface.prototype.fillSections = function () {
        var _this = this;
        var sectionInfo = {
            title: 'DashboardWebStringId.Binding.Gauges',
            bindingProperty: {
                propertyName: 'gauges',
                emptyPlaceholder: 'DashboardWebStringId.Binding.AddGauge',
                selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureGauge',
                creator: function (itemType) {
                    if (itemType === void 0) { itemType = 'GaugeElement'; }
                    return new gauge_1.Gauge(_this.dashboardItem, { '@ItemType': itemType });
                },
                dataItemType: 'Measure'
            },
            detailsPropertiesComposer: new _gauge_element_properties_composer_1.GaugeElementPropertiesComposer(this._dataItemContainerCustomization, function (model) {
                var surface = new _delta_numeric_format_surface_1.DeltaNumericFormatSurface(model, _this.propertiesController);
                surface.startEditing(new _collection_editor_viewmodel_1.CollectionEditorEditItemArguments());
            })
        };
        this.dataSections.push(new _data_item_container_collection_surface_1.DataItemContainerCollectionSurface(this, this.dashboardItem, sectionInfo, ko.computed(function () { return !_this.dashboardItem.gauges().length && !!_this.dashboardItem.seriesDimensions().length; })));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.SeriesDimension));
    };
    GaugeItemSurface.prototype.getPropertiesComposer = function () {
        return new _gauge_item_properties_composer_1.GaugeItemPropertiesComposer(this._dashboardItemCustomization);
    };
    return GaugeItemSurface;
}(_base_item_surface_1.DataDashboardItemSurface));
exports.GaugeItemSurface = GaugeItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('Gauge', GaugeItemSurface);


/***/ }),
/* 763 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _data_field_1 = __webpack_require__(14);
var _geopoint_map_item_properties_composer_1 = __webpack_require__(657);
var _data_item_collection_surface_1 = __webpack_require__(33);
var _single_data_item_surface_1 = __webpack_require__(45);
var _section_descriptors_1 = __webpack_require__(15);
var _base_item_surface_1 = __webpack_require__(23);
var GeoPointItemSurface = (function (_super) {
    __extends(GeoPointItemSurface, _super);
    function GeoPointItemSurface(dashboardItem, dashboardModel, dataSourceBrowser) {
        return _super.call(this, dashboardItem, dashboardModel, dataSourceBrowser) || this;
    }
    GeoPointItemSurface.prototype.fillSections = function () {
        var _this = this;
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: _section_descriptors_1.SectionDescriptors.Latitude,
            fieldConstraint: function (field) { return _data_field_1.DataField.isNumeric(field); },
            warning: ko.computed(function () { return !_this.dashboardItem.latitude() && !!(_this.dashboardItem.longitude() || _this.dashboardItem.value() || _this.dashboardItem.tooltipDimensions().length || _this.dashboardItem.tooltipMeasures().length); })
        }));
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: _section_descriptors_1.SectionDescriptors.Longitude,
            fieldConstraint: function (field) { return _data_field_1.DataField.isNumeric(field); },
            warning: ko.computed(function () { return !_this.dashboardItem.longitude() && !!(_this.dashboardItem.latitude() || _this.dashboardItem.value() || _this.dashboardItem.tooltipDimensions().length || _this.dashboardItem.tooltipMeasures().length); })
        }));
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: _section_descriptors_1.SectionDescriptors.Value,
            warning: ko.computed(function () { return !_this.dashboardItem.value() && !!(_this.dashboardItem.latitude() || _this.dashboardItem.longitude() || _this.dashboardItem.tooltipDimensions().length || _this.dashboardItem.tooltipMeasures().length); })
        }));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.TooltipDimensions));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.TooltipMeasures));
    };
    GeoPointItemSurface.prototype.getPropertiesComposer = function () {
        return new _geopoint_map_item_properties_composer_1.GeoPointMapItemPropertiesComposer(this._dashboardItemCustomization);
    };
    return GeoPointItemSurface;
}(_base_item_surface_1.DataDashboardItemSurface));
exports.GeoPointItemSurface = GeoPointItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('GeoPointMap', GeoPointItemSurface);


/***/ }),
/* 764 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var dimension_1 = __webpack_require__(43);
var measure_1 = __webpack_require__(59);
var _data_field_1 = __webpack_require__(14);
var grid_columns_1 = __webpack_require__(145);
var grid_item_1 = __webpack_require__(146);
var _grid_item_1 = __webpack_require__(304);
var _format_rule_surface_1 = __webpack_require__(229);
var _accordion_tab_1 = __webpack_require__(7);
var _collection_editor_viewmodel_1 = __webpack_require__(79);
var _data_item_properties_composer_1 = __webpack_require__(116);
var _grid_column_properties_composer_1 = __webpack_require__(658);
var _grid_item_properties_composer_1 = __webpack_require__(659);
var _data_item_container_collection_surface_1 = __webpack_require__(93);
var _single_data_item_surface_1 = __webpack_require__(45);
var _section_descriptors_1 = __webpack_require__(15);
var _base_item_surface_1 = __webpack_require__(23);
var _delta_numeric_format_surface_1 = __webpack_require__(162);
var GridItemSurface = (function (_super) {
    __extends(GridItemSurface, _super);
    function GridItemSurface(dashboardItem, dashboardModel, dataSourceBrowser) {
        return _super.call(this, dashboardItem, dashboardModel, dataSourceBrowser) || this;
    }
    GridItemSurface.prototype.addConditionalFormattingOptions = function (tabs, dataItem) {
        var _this = this;
        if (dataItem && dataItem.uniqueName()) {
            var editRuleHandler = function (selection, args, container) {
                var surface = new _format_rule_surface_1.FormatRuleSurface(container, _this.dashboardItem, _this._dataSourceBrowser, _this.propertiesController);
                surface.startEditing(args);
            };
            var dataItemApplyTo = dataItem;
            if (dataItemApplyTo instanceof measure_1.Measure && this.dashboardItem.hiddenMeasures().indexOf(dataItemApplyTo) !== -1) {
                var valueApplyTo = this.dashboardItem.columns().filter(function (column) { return !(column instanceof grid_columns_1.GridDeltaColumn); })[0];
                dataItemApplyTo = valueApplyTo && valueApplyTo.actualDataItem;
            }
            tabs.push(new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ConditionalFormatting, 'DashboardWebStringId.ConditionalFormatting', _data_item_properties_composer_1.DataItemsPropertiesComposer.getFormatRulesWrapper(this.dashboardItem, _data_item_properties_composer_1.DataItemsPropertiesComposer.getCellFormatRuleCreator(dataItem, dataItemApplyTo, 'GridItemFormatRule'), _data_item_properties_composer_1.DataItemsPropertiesComposer.getCellFormatRuleFilter(dataItem), editRuleHandler)));
        }
    };
    GridItemSurface.prototype.extendHiddenMeasuresTabs = function (tabs, model) {
        this.addConditionalFormattingOptions(tabs, model);
    };
    GridItemSurface.prototype.fillSections = function () {
        var _this = this;
        var editRuleHandler = function (selection, args, container) {
            var surface = new _format_rule_surface_1.FormatRuleSurface(container, _this.dashboardItem, _this._dataSourceBrowser, _this.propertiesController);
            surface.startEditing(args);
        };
        this.editRuleHandler = editRuleHandler;
        var editDeltaFormatHandler = function (model) {
            var surface = new _delta_numeric_format_surface_1.DeltaNumericFormatSurface(model, _this.propertiesController);
            surface.startEditing(new _collection_editor_viewmodel_1.CollectionEditorEditItemArguments());
        };
        var sectionInfo = {
            title: 'DashboardWebStringId.Binding.Columns',
            bindingProperty: {
                propertyName: _grid_item_1.gridColumns.propertyName,
                emptyPlaceholder: 'DashboardWebStringId.Binding.AddColumn',
                selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureColumn',
                groupName: 'Column',
                creator: function (itemType, dataField, existingDataItem) {
                    if (!itemType) {
                        var dimensionDisplayMode = null;
                        if (existingDataItem) {
                            if (existingDataItem instanceof dimension_1.Dimension) {
                                itemType = 'GridDimensionColumn';
                            }
                            else if (existingDataItem instanceof measure_1.Measure) {
                                itemType = 'GridMeasureColumn';
                            }
                        }
                        else if (_data_field_1.DataField.isMeasure(dataField)) {
                            itemType = 'GridMeasureColumn';
                        }
                        else {
                            itemType = 'GridDimensionColumn';
                            if (dataField.fieldType() === 'Custom') {
                                dimensionDisplayMode = 'Image';
                            }
                        }
                    }
                    var columnJson = { '@ItemType': itemType };
                    if (dimensionDisplayMode) {
                        columnJson['@DisplayMode'] = dimensionDisplayMode;
                    }
                    return _this.dashboardItem._createGridColumn(columnJson);
                },
                containersMap: grid_item_1.GridItem._gridColumnTypesMap,
                dataItemType: undefined
            },
            detailsPropertiesComposer: new _grid_column_properties_composer_1.GridColumnPropertiesComposer(this._dataItemContainerCustomization, editRuleHandler, editDeltaFormatHandler)
        };
        this.dataSections.push(new _data_item_container_collection_surface_1.DataItemContainerCollectionSurface(this, this.dashboardItem, sectionInfo, ko.computed(function () { return _this.dashboardItem.columns().length === 0 && !!_this.dashboardItem.sparklineArgument() && !!_this.dashboardItem.sparklineArgument().uniqueName(); })));
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: _section_descriptors_1.SectionDescriptors.SparklineArgument,
            warning: ko.computed(function () {
                return !(_this.dashboardItem.sparklineArgument() && _this.dashboardItem.sparklineArgument().uniqueName())
                    && _this.dashboardItem.columns().some(function (column) { return column.itemType() === 'GridSparklineColumn'; });
            }),
            fieldConstraint: function (dataField) {
                return _data_field_1.DataField.isContinous(dataField);
            }
        }));
    };
    GridItemSurface.prototype.getPropertiesComposer = function () {
        return new _grid_item_properties_composer_1.GridItemPropertiesComposer(this._dashboardItemCustomization, this.editRuleHandler);
    };
    return GridItemSurface;
}(_base_item_surface_1.DataDashboardItemSurface));
exports.GridItemSurface = GridItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('Grid', GridItemSurface);


/***/ }),
/* 765 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _image_item_properties_composer_1 = __webpack_require__(660);
var _section_descriptors_1 = __webpack_require__(15);
var _base_item_surface_1 = __webpack_require__(23);
var ImageItemSurface = (function (_super) {
    __extends(ImageItemSurface, _super);
    function ImageItemSurface(dashboardItem, dashboardModel, dataSourceBrowser) {
        return _super.call(this) || this;
    }
    ImageItemSurface.prototype.getPropertiesComposer = function () {
        return new _image_item_properties_composer_1.ImageItemPropertiesComposer(this._dashboardItemCustomization);
    };
    return ImageItemSurface;
}(_base_item_surface_1.BaseItemSurface));
exports.ImageItemSurface = ImageItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('Image', ImageItemSurface);


/***/ }),
/* 766 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _pie_item_properties_composer_1 = __webpack_require__(661);
var _data_item_collection_surface_1 = __webpack_require__(33);
var _section_descriptors_1 = __webpack_require__(15);
var _base_item_surface_1 = __webpack_require__(23);
var PieItemSurface = (function (_super) {
    __extends(PieItemSurface, _super);
    function PieItemSurface(dashboardItem, dashboardModel, dataSourceBrowser) {
        return _super.call(this, dashboardItem, dashboardModel, dataSourceBrowser) || this;
    }
    PieItemSurface.prototype.fillSections = function () {
        var _this = this;
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.Values, undefined, ko.computed(function () { return (_this.dashboardItem.arguments().length > 0 || _this.dashboardItem.seriesDimensions().length > 0) && _this.dashboardItem.values().length === 0; })));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.Arguments));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.SeriesDimension));
    };
    PieItemSurface.prototype.getPropertiesComposer = function () {
        return new _pie_item_properties_composer_1.PieItemPropertiesComposer(this._dashboardItemCustomization);
    };
    return PieItemSurface;
}(_base_item_surface_1.DataDashboardItemSurface));
exports.PieItemSurface = PieItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('Pie', PieItemSurface);


/***/ }),
/* 767 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _data_field_1 = __webpack_require__(14);
var _pie_map_item_properties_composer_1 = __webpack_require__(662);
var _data_item_collection_surface_1 = __webpack_require__(33);
var _single_data_item_surface_1 = __webpack_require__(45);
var _section_descriptors_1 = __webpack_require__(15);
var _base_item_surface_1 = __webpack_require__(23);
var PieMapItemSurface = (function (_super) {
    __extends(PieMapItemSurface, _super);
    function PieMapItemSurface(dashboardItem, dashboardModel, dataSourceBrowser) {
        return _super.call(this, dashboardItem, dashboardModel, dataSourceBrowser) || this;
    }
    PieMapItemSurface.prototype.fillSections = function () {
        var _this = this;
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: _section_descriptors_1.SectionDescriptors.Latitude,
            fieldConstraint: function (field) { return _data_field_1.DataField.isNumeric(field); },
            warning: ko.computed(function () { return !_this.dashboardItem.latitude() && !!(_this.dashboardItem.longitude() || _this.dashboardItem.values().length || _this.dashboardItem.argument() || _this.dashboardItem.tooltipDimensions().length || _this.dashboardItem.tooltipMeasures().length); })
        }));
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: _section_descriptors_1.SectionDescriptors.Longitude,
            fieldConstraint: function (field) { return _data_field_1.DataField.isNumeric(field); },
            warning: ko.computed(function () { return !_this.dashboardItem.longitude() && !!(_this.dashboardItem.latitude() || _this.dashboardItem.values().length || _this.dashboardItem.argument() || _this.dashboardItem.tooltipDimensions().length || _this.dashboardItem.tooltipMeasures().length); })
        }));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.Values));
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: _section_descriptors_1.SectionDescriptors.Argument,
            warning: ko.computed(function () { return !_this.dashboardItem.argument() && !!(_this.dashboardItem.latitude() || _this.dashboardItem.longitude() || _this.dashboardItem.values().length || _this.dashboardItem.tooltipDimensions().length || _this.dashboardItem.tooltipMeasures().length); })
        }));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.TooltipDimensions));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.TooltipMeasures));
    };
    PieMapItemSurface.prototype.getPropertiesComposer = function () {
        return new _pie_map_item_properties_composer_1.PieMapItemPropertiesComposer(this._dashboardItemCustomization);
    };
    return PieMapItemSurface;
}(_base_item_surface_1.DataDashboardItemSurface));
exports.PieMapItemSurface = PieMapItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('PieMap', PieMapItemSurface);


/***/ }),
/* 768 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var measure_1 = __webpack_require__(59);
var _format_rule_surface_1 = __webpack_require__(229);
var _accordion_tab_1 = __webpack_require__(7);
var _data_item_properties_composer_1 = __webpack_require__(116);
var _pivot_item_properties_composer_1 = __webpack_require__(663);
var _data_item_collection_surface_1 = __webpack_require__(33);
var _section_descriptors_1 = __webpack_require__(15);
var _base_item_surface_1 = __webpack_require__(23);
var PivotItemSurface = (function (_super) {
    __extends(PivotItemSurface, _super);
    function PivotItemSurface(dashboardItem, dashboardModel, dataSourceBrowser) {
        return _super.call(this, dashboardItem, dashboardModel, dataSourceBrowser) || this;
    }
    PivotItemSurface.prototype.addConditionalFormattingOptions = function (tabs, dataItem) {
        var _this = this;
        if (dataItem && dataItem.uniqueName()) {
            var editRuleHandler = function (selection, args, container) {
                var surface = new _format_rule_surface_1.FormatRuleSurface(container, _this.dashboardItem, _this._dataSourceBrowser, _this.propertiesController);
                surface.startEditing(args);
            };
            var dataItemApplyTo = dataItem;
            if (dataItemApplyTo instanceof measure_1.Measure && this.dashboardItem.hiddenMeasures().indexOf(dataItemApplyTo) !== -1) {
                dataItemApplyTo = this.dashboardItem.values()[0];
            }
            tabs.push(new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ConditionalFormatting, 'DashboardWebStringId.ConditionalFormatting', _data_item_properties_composer_1.DataItemsPropertiesComposer.getFormatRulesWrapper(this.dashboardItem, _data_item_properties_composer_1.DataItemsPropertiesComposer.getCellFormatRuleCreator(dataItem, dataItemApplyTo, 'PivotItemFormatRule'), _data_item_properties_composer_1.DataItemsPropertiesComposer.getCellFormatRuleFilter(dataItem), editRuleHandler)));
        }
    };
    PivotItemSurface.prototype.extendHiddenMeasuresTabs = function (tabs, model) {
        this.addConditionalFormattingOptions(tabs, model);
    };
    PivotItemSurface.prototype.fillSections = function () {
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.Values, this.addConditionalFormattingOptions.bind(this)));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.Columns, this.addConditionalFormattingOptions.bind(this)));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.Rows, this.addConditionalFormattingOptions.bind(this)));
    };
    PivotItemSurface.prototype.getPropertiesComposer = function () {
        var _this = this;
        var editRuleHandler = function (selection, args, container) {
            var surface = new _format_rule_surface_1.FormatRuleSurface(container, _this.dashboardItem, _this._dataSourceBrowser, _this.propertiesController);
            surface.startEditing(args);
        };
        return new _pivot_item_properties_composer_1.PivotItemPropertiesComposer(this._dashboardItemCustomization, editRuleHandler);
    };
    return PivotItemSurface;
}(_base_item_surface_1.DataDashboardItemSurface));
exports.PivotItemSurface = PivotItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('Pivot', PivotItemSurface);


/***/ }),
/* 769 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _data_field_1 = __webpack_require__(14);
var chart_series_creator_1 = __webpack_require__(109);
var range_filter_item_1 = __webpack_require__(111);
var _custom_range_properties_composer_1 = __webpack_require__(379);
var _range_filter_item_properties_composer_1 = __webpack_require__(664);
var _range_series_properties_composer_1 = __webpack_require__(770);
var _data_item_collection_surface_1 = __webpack_require__(33);
var _data_item_container_collection_surface_1 = __webpack_require__(93);
var _single_data_item_surface_1 = __webpack_require__(45);
var _section_descriptors_1 = __webpack_require__(15);
var _base_item_surface_1 = __webpack_require__(23);
var RangeFilterItemSurface = (function (_super) {
    __extends(RangeFilterItemSurface, _super);
    function RangeFilterItemSurface(dashboardItem, dashboardModel, dataSourceBrowser) {
        return _super.call(this, dashboardItem, dashboardModel, dataSourceBrowser) || this;
    }
    RangeFilterItemSurface.prototype.fillSections = function () {
        var _this = this;
        var creator = chart_series_creator_1.ChartSeriesCreator.getSeriesCreator(this.dashboardItem);
        var sectionInfo = {
            title: 'DashboardWebStringId.Binding.Values',
            bindingProperty: {
                propertyName: 'series',
                emptyPlaceholder: 'DashboardWebStringId.Binding.AddValue',
                selectedPlaceholder: 'DashboardWebStringId.Binding.ConfigureValue',
                creator: function (itemType) {
                    if (itemType === void 0) { itemType = 'Line'; }
                    return creator(itemType);
                },
                containersMap: range_filter_item_1.RangeFilterItem.rangeSeriesViewTypesMap,
                dataItemType: 'Measure'
            },
            detailsPropertiesComposer: new _range_series_properties_composer_1.RangeSeriesPropertiesComposer(this._dataItemContainerCustomization)
        };
        this.dataSections.push(new _data_item_container_collection_surface_1.DataItemContainerCollectionSurface(this, this.dashboardItem, sectionInfo, ko.computed(function () { return !_this.dashboardItem.series().length && (!!_this.dashboardItem.argument() || !!_this.dashboardItem.seriesDimensions().length); })));
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: _section_descriptors_1.SectionDescriptors.SingleArgument,
            fieldConstraint: function (dataField) { return _data_field_1.DataField.isContinous(dataField) && !_data_field_1.DataField.isOlapHierarchy(dataField); },
            warning: ko.computed(function () { return (!!_this.dashboardItem.series().length || !!_this.dashboardItem.seriesDimensions().length) && !_this.dashboardItem.argument(); })
        }));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.SeriesDimension));
    };
    RangeFilterItemSurface.prototype.getPropertiesComposer = function () {
        var _this = this;
        return new _range_filter_item_properties_composer_1.RangeFilterItemPropertiesComposer(this._dashboardItemCustomization, function (model) {
            var composer = new _custom_range_properties_composer_1.CustomRangePropertiesComposer();
            var tabs = composer.composeTabs(model, {
                argument: _this.dashboardItem.argument(),
                rangeFilterItem: _this.dashboardItem
            });
            _this.propertiesController.secondaryModel({
                displayText: model.name,
                data: {
                    model: model,
                    propertiesTabs: ko.observableArray(tabs)
                },
                containingCollection: _this.dashboardItem.dateTimePeriods
            });
        });
    };
    return RangeFilterItemSurface;
}(_base_item_surface_1.DataDashboardItemSurface));
exports.RangeFilterItemSurface = RangeFilterItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('RangeFilter', RangeFilterItemSurface);


/***/ }),
/* 770 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var range_filter_item_1 = __webpack_require__(111);
var _chart_series_properties_composer_1 = __webpack_require__(378);
var RangeSeriesPropertiesComposer = (function (_super) {
    __extends(RangeSeriesPropertiesComposer, _super);
    function RangeSeriesPropertiesComposer(customizeHandler) {
        return _super.call(this, customizeHandler, range_filter_item_1.RangeFilterItem.rangeSeriesViewTypesMap, false, false) || this;
    }
    RangeSeriesPropertiesComposer.prototype._showIgnoreEmptyPointsVisible = function (model) {
        return false;
    };
    return RangeSeriesPropertiesComposer;
}(_chart_series_properties_composer_1.ChartSeriesPropertiesComposer));
exports.RangeSeriesPropertiesComposer = RangeSeriesPropertiesComposer;


/***/ }),
/* 771 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _scatter_chart_item_properties_composer_1 = __webpack_require__(665);
var _data_item_collection_surface_1 = __webpack_require__(33);
var _single_data_item_surface_1 = __webpack_require__(45);
var _section_descriptors_1 = __webpack_require__(15);
var _base_item_surface_1 = __webpack_require__(23);
var ScatterChartItemSurface = (function (_super) {
    __extends(ScatterChartItemSurface, _super);
    function ScatterChartItemSurface(dashboardItem, dashboardModel, dataSourceBrowser) {
        return _super.call(this, dashboardItem, dashboardModel, dataSourceBrowser) || this;
    }
    ScatterChartItemSurface.prototype.fillSections = function () {
        var _this = this;
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: _section_descriptors_1.SectionDescriptors.AxisXMeasure,
            warning: ko.computed(function () { return !_this.dashboardItem.axisXMeasure() && (!!_this.dashboardItem.arguments().length || !!_this.dashboardItem.weight() || !!_this.dashboardItem.axisYMeasure()); })
        }));
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: _section_descriptors_1.SectionDescriptors.AxisYMeasure,
            warning: ko.computed(function () { return !_this.dashboardItem.axisYMeasure() && (!!_this.dashboardItem.arguments().length || !!_this.dashboardItem.weight() || !!_this.dashboardItem.axisXMeasure()); })
        }));
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: _section_descriptors_1.SectionDescriptors.Weight
        }));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.Arguments, undefined, ko.computed(function () { return !!_this.dashboardItem.weight() && !_this.dashboardItem.arguments().length; })));
    };
    ScatterChartItemSurface.prototype.getPropertiesComposer = function () {
        return new _scatter_chart_item_properties_composer_1.ScatterChartItemPropertiesComposer(this._dashboardItemCustomization);
    };
    return ScatterChartItemSurface;
}(_base_item_surface_1.DataDashboardItemSurface));
exports.ScatterChartItemSurface = ScatterChartItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('ScatterChart', ScatterChartItemSurface);


/***/ }),
/* 772 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _tab_container_item_properties_composer_1 = __webpack_require__(666);
var _tab_page_properties_composer_1 = __webpack_require__(773);
var _section_descriptors_1 = __webpack_require__(15);
var _base_item_surface_1 = __webpack_require__(23);
var TabContainerItemSurface = (function (_super) {
    __extends(TabContainerItemSurface, _super);
    function TabContainerItemSurface(dashboardItem, _dashboardModel, dataSourceBrowser) {
        var _this = _super.call(this) || this;
        _this.dashboardItem = dashboardItem;
        _this._dashboardModel = _dashboardModel;
        return _this;
    }
    TabContainerItemSurface.prototype.getPropertiesComposer = function () {
        var _this = this;
        var editTabPageHandler = function (tabPage, args) {
            var composer = new _tab_page_properties_composer_1.DashboardTabPagePropertiesComposer(_this._dashboardItemCustomization);
            var tabs = composer.composeTabs(tabPage);
            _this.propertiesController.secondaryModel({
                displayText: ko.pureComputed(function () { return _this._dashboardModel._getDisplayDashboardItem(tabPage).name(); }),
                data: {
                    model: tabPage,
                    propertiesTabs: ko.observableArray(tabs)
                },
                containingCollection: _this.dashboardItem.tabPages
            });
        };
        return new _tab_container_item_properties_composer_1.TabContainerItemPropertiesComposer(editTabPageHandler);
    };
    TabContainerItemSurface.prototype.dispose = function () {
    };
    return TabContainerItemSurface;
}(_base_item_surface_1.BaseItemSurface));
exports.TabContainerItemSurface = TabContainerItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('TabContainer', TabContainerItemSurface);


/***/ }),
/* 773 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var model_1 = __webpack_require__(38);
var _interactivity_options_1 = __webpack_require__(130);
var _dashboard_tab_page_1 = __webpack_require__(286);
var _base_metadata_1 = __webpack_require__(4);
var _object_properties_wrapper_1 = __webpack_require__(10);
var _accordion_tab_1 = __webpack_require__(7);
var _base_properties_composer_1 = __webpack_require__(12);
var DashboardTabPagePropertiesComposer = (function (_super) {
    __extends(DashboardTabPagePropertiesComposer, _super);
    function DashboardTabPagePropertiesComposer(customizeHandler) {
        return _super.call(this, customizeHandler) || this;
    }
    DashboardTabPagePropertiesComposer.prototype._composeTabsCore = function (tabPage, args) {
        var objectPropertiesWrapper = new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: tabPage,
            properties: [
                _base_metadata_1.name_ViewModel,
                _dashboard_tab_page_1.showItemAsTabPage,
                {
                    container: model_1._tabItemInteractivityOptions,
                    properties: [
                        _interactivity_options_1.isMasterFilterDefaultTrue,
                        _interactivity_options_1.ignoreMasterFiltersDefaultFalse
                    ]
                }
            ]
        });
        return [new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.Common, 'DashboardWebStringId.Options', objectPropertiesWrapper)];
    };
    return DashboardTabPagePropertiesComposer;
}(_base_properties_composer_1.DashboardItemPropertiesComposer));
exports.DashboardTabPagePropertiesComposer = DashboardTabPagePropertiesComposer;


/***/ }),
/* 774 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _treemap_item_properties_composer_1 = __webpack_require__(668);
var _data_item_collection_surface_1 = __webpack_require__(33);
var _section_descriptors_1 = __webpack_require__(15);
var _base_item_surface_1 = __webpack_require__(23);
var TreemapItemSurface = (function (_super) {
    __extends(TreemapItemSurface, _super);
    function TreemapItemSurface(dashboardItem, dashboardModel, dataSourceBrowser) {
        return _super.call(this, dashboardItem, dashboardModel, dataSourceBrowser) || this;
    }
    TreemapItemSurface.prototype.fillSections = function () {
        var _this = this;
        var addTileOptions = function (tabs, dataItem) {
            if (dataItem && dataItem.uniqueName()) {
                var argument = _this.dashboardItem.arguments().filter(function (d) { return d.uniqueName() === dataItem.uniqueName(); })[0];
                if (_this.dashboardItem.arguments().indexOf(argument) !== _this.dashboardItem.arguments().length - 1) {
                    tabs.push(_treemap_item_properties_composer_1.TreemapItemPropertiesComposer.getTileOptionsTab(_this.dashboardItem, dataItem));
                }
            }
        };
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.Values, undefined, ko.computed(function () { return !_this.dashboardItem.values().length && !!_this.dashboardItem.arguments().length; })));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.Arguments, addTileOptions));
    };
    TreemapItemSurface.prototype.getPropertiesComposer = function () {
        return new _treemap_item_properties_composer_1.TreemapItemPropertiesComposer(this._dashboardItemCustomization);
    };
    return TreemapItemSurface;
}(_base_item_surface_1.DataDashboardItemSurface));
exports.TreemapItemSurface = TreemapItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('Treemap', TreemapItemSurface);


/***/ }),
/* 775 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = __webpack_require__(69);
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var _undo_engine_helper_1 = __webpack_require__(27);
var DragProcessor = (function () {
    function DragProcessor(rootElement) {
        var _this = this;
        this.rootElement = rootElement;
        this.CSS_DRAG_IN_PROGRESS = 'dx-dashboard-collection-drag';
        this.CSS_HIGHLIGHT_PLACEHOLDER = 'dx-state-hovered';
        this.COLLECTION_SELECTOR = '.dx-dashboard-collection';
        this.TARGET_SELECTOR = '.dx-dashboard-drop-target';
        this.EVENT_NAMESPACE = '.dragInGroup';
        this.currentDrag = null;
        this.state = 'pending';
        this.setDataItemsPositions = function (sourceCollectionRoot) {
            var elementData = ko.dataFor(sourceCollectionRoot);
            $(sourceCollectionRoot).find('.dx-dashboard-data-item').each(function (index, item) {
                if (elementData.supportGroups) {
                    var groupHolder = ko.contextFor(item).$parents[1], groupSize = groupHolder.items === undefined
                        ? 1
                        : groupHolder.items.length, firstItemInGroup = groupHolder.items ? groupHolder.items[0] : ko.dataFor(item);
                    item.setAttribute('data-position', (groupHolder.position === undefined
                        ? elementData['groups'] ? elementData['groups']().length : 0
                        : groupHolder.position).toString());
                    item.setAttribute('data-array-position', elementData.items().indexOf(firstItemInGroup).toString());
                    item.setAttribute('data-group-size', groupSize.toString());
                }
                else {
                    item.setAttribute('data-position', '0');
                    item.setAttribute('data-array-position', '0');
                    item.setAttribute('data-group-size', '0');
                }
            });
            _this.currentDrag.itemPosition = Number(_this.currentDrag.itemElement.getAttribute('data-position'));
            var isOlap = _this.currentDrag.sourceCollection.isOlap();
            $(_this.rootElement).find(_this.COLLECTION_SELECTOR).each(function (_, collectionElement) {
                var isOtherCollection = ko.dataFor(collectionElement) !== ko.dataFor(sourceCollectionRoot);
                var arrayPosition = 0;
                $(collectionElement).find(_this.TARGET_SELECTOR).each(function (index, dragTargetElement) {
                    var elementData = ko.dataFor(dragTargetElement), elementContext = ko.contextFor(dragTargetElement), groupSize = (elementData.items && elementData.items.length) || 0;
                    dragTargetElement.setAttribute('data-position', index.toString());
                    dragTargetElement.setAttribute('data-array-position', arrayPosition.toString());
                    arrayPosition += groupSize;
                    var result = isOtherCollection
                        ? !isOlap
                        : _this.checkItemIsDraggableToPosition(_this.currentDrag.itemPosition, index);
                    $(dragTargetElement).toggleClass('dx-state-active', result);
                });
            });
        };
        this.processHtmlDragEvent = function () {
            _this.currentDrag.originalEvent.dataTransfer.effectAllowed = 'move';
            _this.currentDrag.originalEvent.dataTransfer.setData('text', _this.currentDrag.itemPosition.toString());
            var itemElement = _this.currentDrag.itemElement;
            var groupElement = $(itemElement).parents('.dx-dashboard-hierarchical-group')[0], uiFeedbackElement = groupElement || itemElement;
            var crt = uiFeedbackElement.cloneNode(true);
            crt.style.position = 'absolute';
            crt.style.top = '-100000px';
            crt.style.right = '-100000px';
            crt.className = crt.className + ' dx-dashboard-cloned-copy';
            crt.style.width = $(itemElement).width() + 'px';
            _this.currentDrag.clonedElement = crt;
            var container = $(uiFeedbackElement).parents('.dx-dashboard-property-grid')[0];
            if (container)
                container.appendChild(crt);
            var event = _this.currentDrag.originalEvent;
            if (event.dataTransfer['setDragImage']) {
                (event.dataTransfer).setDragImage(crt, event.offsetX === undefined ? event.layerX : event.offsetX, event.offsetY === undefined ? event.layerY : event.offsetY);
            }
        };
        this.finishDrag = function () {
            events_1.off(_this.rootElement, _this.EVENT_NAMESPACE);
            $(document).off(_this.EVENT_NAMESPACE);
            _this.rootElement.classList.remove(_this.CSS_DRAG_IN_PROGRESS);
            $(_this.rootElement).parents('.dx-overlay-content').removeClass(_this.CSS_DRAG_IN_PROGRESS).addClass('dx-state-hover');
            $(_this.rootElement).find(_this.TARGET_SELECTOR).removeClass(_this.CSS_HIGHLIGHT_PLACEHOLDER);
            _this.currentDrag.itemElement.classList.remove('dx-dashboard-drag-in-progress');
            var clonedElement = _this.currentDrag.clonedElement;
            if (clonedElement && clonedElement.parentNode) {
                clonedElement.parentNode.removeChild(clonedElement);
            }
            _this.currentDrag.clonedElement = null;
            _this.state = 'pending';
        };
    }
    DragProcessor.prototype.startDrag = function (ev) {
        var _this = this;
        this.currentDrag = {
            originalEvent: ev.originalEvent,
            itemPosition: -1,
            clonedElement: null,
            itemElement: ev.originalEvent.target,
            sourceCollection: ko.dataFor($(ev.target).parents(this.COLLECTION_SELECTOR)[0])
        };
        var sourceCollectionElement = $(this.currentDrag.originalEvent.target).parents(this.COLLECTION_SELECTOR).get(0);
        this.state = 'dragging';
        this.rootElement.classList.add(this.CSS_DRAG_IN_PROGRESS);
        $(this.rootElement).parents('.dx-overlay-content').addClass(this.CSS_DRAG_IN_PROGRESS);
        this.setDataItemsPositions(sourceCollectionElement);
        this.processHtmlDragEvent();
        this.currentDrag.itemElement.classList.add('dx-dashboard-drag-in-progress');
        events_1.on(this.rootElement, 'dragover' + this.EVENT_NAMESPACE, this.TARGET_SELECTOR, {}, function (ev) {
            var originalEvent = ev.originalEvent, targetItem = ko.dataFor(originalEvent.target), position = Number(ev.currentTarget.getAttribute('data-position'));
            if (originalEvent.target.parentNode['className'].indexOf('dx-state-active') !== -1) {
                ev.currentTarget.classList.add(_this.CSS_HIGHLIGHT_PLACEHOLDER);
                originalEvent.dataTransfer.dropEffect = 'move';
            }
            else {
                originalEvent.dataTransfer.dropEffect = 'none';
            }
            return false;
        });
        events_1.on(this.rootElement, 'dragleave' + this.EVENT_NAMESPACE, this.TARGET_SELECTOR, {}, function (ev) {
            ev.currentTarget.classList.remove(_this.CSS_HIGHLIGHT_PLACEHOLDER);
        });
        events_1.on(this.rootElement, 'drop' + this.EVENT_NAMESPACE, this.TARGET_SELECTOR, {}, function (ev) {
            var sourceCollection = _this.currentDrag.sourceCollection, targetCollection = ko.dataFor($(ev.target).parents(_this.COLLECTION_SELECTOR)[0]), originalPosition = Number(_this.currentDrag.itemElement.getAttribute('data-array-position')), newPosition = Number(ev.currentTarget.getAttribute('data-array-position')), groupSize = Number(_this.currentDrag.itemElement.getAttribute('data-group-size'));
            _this.interchange(sourceCollection.items, targetCollection !== sourceCollection ? targetCollection : null, originalPosition, newPosition, groupSize);
            _this.finishDrag();
            return false;
        });
        events_1.on(document, 'dragend' + this.EVENT_NAMESPACE, function () {
            _this.finishDrag();
        });
        return true;
    };
    DragProcessor.prototype.checkItemIsDraggableToPosition = function (itemIndex, placeholderIndex) {
        return (placeholderIndex < itemIndex) || (placeholderIndex > itemIndex + 1);
    };
    DragProcessor.prototype.interchange = function (items, newOwner, sourceIndex, placeholderIndex, groupSize) {
        if (!groupSize) {
            groupSize = 1;
        }
        if (null === newOwner) {
            if (placeholderIndex > sourceIndex) {
                placeholderIndex--;
                for (var i = 0; i < groupSize; i++) {
                    var item = items()[sourceIndex];
                    items.remove(item);
                    items.splice(placeholderIndex, 0, item);
                }
            }
            else {
                for (var i = 0; i < groupSize; i++) {
                    var item = items()[sourceIndex + i];
                    items.remove(item);
                    items.splice(placeholderIndex + i, 0, item);
                }
            }
        }
        else {
            for (var i = 0; i < groupSize; i++) {
                item = items()[sourceIndex];
                newOwner.relocateItem(item, placeholderIndex + i);
                items.remove(item);
            }
        }
    };
    __decorate([
        _undo_engine_helper_1.wrapWithUndoRedo
    ], DragProcessor.prototype, "interchange", null);
    return DragProcessor;
}());
exports.DragProcessor = DragProcessor;
ko.bindingHandlers['dx-dashboard-container-draggable'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var processor = new DragProcessor(element);
        events_1.on(element, 'dragstart', function (ev) {
            processor.startDrag(ev);
        });
    }
};


/***/ }),
/* 776 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _data_source_browser_1 = __webpack_require__(40);
var _default_1 = __webpack_require__(6);
var _utils_1 = __webpack_require__(3);
var disposable_object_1 = __webpack_require__(11);
var index_internal_1 = __webpack_require__(58);
var look_up_value_1 = __webpack_require__(108);
var _dynamic_list_lookup_settings_1 = __webpack_require__(317);
var _parameter_1 = __webpack_require__(318);
var _static_list_lookup_settings_1 = __webpack_require__(321);
var _parameters_helper_1 = __webpack_require__(55);
var _form_adapter_editors_1 = __webpack_require__(22);
var _object_properties_wrapper_1 = __webpack_require__(10);
var _field_picker_1 = __webpack_require__(370);
var _lookup_values_editors_1 = __webpack_require__(672);
var ParameterEditorViewModel = (function (_super) {
    __extends(ParameterEditorViewModel, _super);
    function ParameterEditorViewModel(parameter, _dataSourceBrowserGetter, isNameValid) {
        var _this = _super.call(this) || this;
        _this.parameter = parameter;
        _this._dataSourceBrowserGetter = _dataSourceBrowserGetter;
        _this.commonParameterSettings = _this._getCommonParameterSettingsWrapper(parameter, isNameValid);
        _this.lookUpParameterType = new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: parameter,
            properties: [__assign({}, _parameter_1.lookUpSourceType, { simpleFormAdapterItem: 'selectBoxEditor' })]
        });
        _this.staticListLookUpSettings = index_internal_1.safeComputed({ staticListLookUpSettings: parameter.staticListLookUpSettings, type: _this.parameter.type }, function (args) {
            if (args.staticListLookUpSettings) {
                return _this._getStaticListLookUpSettingsWrapper(args.staticListLookUpSettings, args.type);
            }
            return null;
        });
        _this.dynamicListLookUpSettings = index_internal_1.safeComputed({ dynamicListLookUpSettings: parameter.dynamicListLookUpSettings }, function (args) {
            if (args.dynamicListLookUpSettings) {
                return _this._getDynamicListLookUpSettingsWrapper(args.dynamicListLookUpSettings);
            }
            return null;
        });
        return _this;
    }
    Object.defineProperty(ParameterEditorViewModel.prototype, "dataSourceBrowser", {
        get: function () {
            return this._dataSourceBrowserGetter ? this._dataSourceBrowserGetter() : undefined;
        },
        enumerable: true,
        configurable: true
    });
    ParameterEditorViewModel.prototype._getStaticListLookUpSettingsWrapper = function (staticListLookUpSettings, parameterType) {
        var editorOptions = {
            dataFields: [_static_list_lookup_settings_1.lookUpValue.propertyName],
            noDataText: 'DashboardWebStringId.CollectionEditor.Parameters.NoItems',
            gridColumns: [__assign({ dataField: _static_list_lookup_settings_1.lookUpValue.propertyName }, getGridEditorSettings(parameterType))],
            createNewItemHandler: function () {
                var newLookUpValue = new look_up_value_1.LookUpValue({});
                newLookUpValue.valueType(parameterType);
                return newLookUpValue;
            },
        };
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: staticListLookUpSettings,
            properties: [__assign({}, _static_list_lookup_settings_1.lookUpvalues, { formAdapterItem: _form_adapter_editors_1.inlineEditCollectionEditor(editorOptions) })]
        });
    };
    ParameterEditorViewModel.prototype._getDynamicListLookUpSettingsWrapper = function (dynamicListLookUpSettings) {
        var _this = this;
        var _a;
        var isDataSourceAndDataMemberSet = function (model) {
            if (model) {
                var isDataSourceSet = !!model.dataSource();
                var dataMemberSupported = _this.dataSourceBrowser.dataMembersSupported(model);
                var isDataMemberSet = true;
                if (dataMemberSupported) {
                    isDataMemberSet = !!model.dataMember();
                }
                return isDataSourceSet && isDataMemberSet;
            }
            return false;
        };
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: dynamicListLookUpSettings,
            properties: [
                __assign({}, _dynamic_list_lookup_settings_1._dataSourceNameSerialization, { formAdapterItem: dataSourceChooserEditor(this.dataSourceBrowser) }),
                __assign({}, _dynamic_list_lookup_settings_1._dataMemberSerialization, { formAdapterItem: dataMemberChooserEditor({ dataSourceBrowser: this.dataSourceBrowser, dynamicListLookUpSettings: dynamicListLookUpSettings }) }),
                __assign({}, _dynamic_list_lookup_settings_1.valueMemberSerialization, { formAdapterItem: fieldChooserEditor({ dataSourceBrowser: this.dataSourceBrowser, dynamicListLookUpSettings: dynamicListLookUpSettings }) }),
                __assign({}, _dynamic_list_lookup_settings_1.displayMemberSerialization, { formAdapterItem: fieldChooserEditor({ dataSourceBrowser: this.dataSourceBrowser, dynamicListLookUpSettings: dynamicListLookUpSettings }) }),
                __assign({}, _dynamic_list_lookup_settings_1.sortByMember, { formAdapterItem: fieldChooserEditor({ dataSourceBrowser: this.dataSourceBrowser, dynamicListLookUpSettings: dynamicListLookUpSettings }) }),
                _dynamic_list_lookup_settings_1.sortOrder
            ],
            disabledFilterRules: (_a = {},
                _a[_dynamic_list_lookup_settings_1._dataMemberSerialization.propertyName] = function () { return !_this.dataSourceBrowser.dataMembersSupported(dynamicListLookUpSettings); },
                _a[_dynamic_list_lookup_settings_1.valueMemberSerialization.propertyName] = function () { return !isDataSourceAndDataMemberSet(dynamicListLookUpSettings); },
                _a[_dynamic_list_lookup_settings_1.displayMemberSerialization.propertyName] = function () { return !isDataSourceAndDataMemberSet(dynamicListLookUpSettings); },
                _a[_dynamic_list_lookup_settings_1.sortByMember.propertyName] = function () { return !isDataSourceAndDataMemberSet(dynamicListLookUpSettings); },
                _a)
        });
    };
    ParameterEditorViewModel.prototype._getCommonParameterSettingsWrapper = function (parameter, isNameValid) {
        var _this = this;
        var _a, _b, _c;
        var propertyInfos = [
            __assign({}, _parameter_1.parameterName, { validateBeforeSet: true, validationRules: [
                    {
                        type: 'custom',
                        validationCallback: function (options) { return isNameValid(options.value); },
                        message: _default_1.getLocalizationById('DashboardWebStringId.Parameters.ParameterNameShouldBeUnique')
                    }
                ].concat(_parameter_1.parameterName.validationRules) }),
            _parameter_1.description,
            _parameter_1.parameterVisible,
            _parameter_1.allowNull,
            _parameter_1.allowMultiselect,
            _parameter_1.parameterTypePropertyGrid,
            _parameter_1.defaultValue,
            __assign({}, _parameter_1.defaultValues, { validateBeforeSet: true, formAdapterItem: _lookup_values_editors_1.multipleLookupValueEditor({ parameter: parameter, dataSourceBrowser: this.dataSourceBrowser }) }),
            _parameter_1.selectAllValues,
            _parameter_1.lookUpSourceType
        ];
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: parameter,
            properties: propertyInfos,
            visibilityFilterRules: (_a = {},
                _a[_parameter_1.defaultValue.propertyName] = function (model) { return !model.allowMultiselect(); },
                _a[_parameter_1.defaultValues.propertyName] = function (model) { return !!model.allowMultiselect(); },
                _a[_parameter_1.selectAllValues.propertyName] = function (model) { return !!model.allowMultiselect(); },
                _a),
            disabledFilterRules: (_b = {},
                _b[_parameter_1.allowMultiselect.propertyName] = ['lookUpSourceType', '=', 'None'],
                _b[_parameter_1.defaultValues.propertyName] = function (model) { return !!model.selectAllValues(); },
                _b),
            dynamicEditorRules: (_c = {},
                _c[_parameter_1.defaultValue.propertyName] = function (model) {
                    if (model.lookUpSourceType() !== 'None') {
                        return { formAdapterItem: _lookup_values_editors_1.singleLookupValueEditor({ parameter: parameter, dataSourceBrowser: _this.dataSourceBrowser }) };
                    }
                    else {
                        return { simpleFormAdapterItem: _parameters_helper_1.ParameterHelper.getEditorType(model.type()) };
                    }
                },
                _c)
        });
    };
    return ParameterEditorViewModel;
}(disposable_object_1.DisposableObject));
exports.ParameterEditorViewModel = ParameterEditorViewModel;
var dataSourceChooserEditor = function (dataSourceBrowser) { return function (context) {
    var _a = index_internal_1.createObservableDataSource({
        dashboardDataSources: dataSourceBrowser._dataSources
    }, function (args) {
        return args.dashboardDataSources.map(function (ds) {
            return {
                name: ds.componentName(),
                displayName: ds.name()
            };
        });
    }), dataSource = _a.dataSource, dispose = _a.dispose;
    return {
        editorType: 'dxSelectBox',
        editorOptions: __assign({ dataSource: dataSource, displayExpr: 'displayName', valueExpr: 'name', displayCustomValue: true, placeholder: _default_1.getLocalizationById('DashboardStringId.ParametersSelectorText'), noDataText: _default_1.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'), onDisposing: function (e) {
                dispose();
            } }, { dropDownOptions: { container: context.widgetContainer } })
    };
}; };
var dataMemberChooserEditor = function (options) { return function (context) {
    var _a = index_internal_1.createObservableDataSource({
        dashboardDataSources: options.dataSourceBrowser._dataSources,
        selectedDashboardDataSource: options.dynamicListLookUpSettings.dataSource,
    }, function (args) {
        var dataSource = args.dashboardDataSources.filter(function (ds) { return ds.componentName() === args.selectedDashboardDataSource; })[0];
        if (dataSource && dataSource.supportDataMembers) {
            return options.dataSourceBrowser.getDataFieldsArray(args.selectedDashboardDataSource, '', '', _data_source_browser_1.isNonCollectionDataField).then(function (members) {
                return members.map(function (member) { return member.dataMember(); });
            });
        }
        return [];
    }), dataSource = _a.dataSource, dispose = _a.dispose;
    return {
        editorType: 'dxSelectBox',
        editorOptions: __assign({ dataSource: dataSource, displayCustomValue: true, placeholder: _default_1.getLocalizationById('DashboardStringId.ParametersSelectorText'), noDataText: _default_1.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'), onDisposing: function () {
                dispose();
            } }, { dropDownOptions: { container: context.widgetContainer } })
    };
}; };
var fieldChooserEditor = function (options) { return function (context) {
    return {
        template: function (args, itemElement) {
            var element = _utils_1.$unwrap(itemElement);
            element.classList.add('dx-dashboard-field-picker');
            var value = ko.observable(_form_adapter_editors_1.getFieldValue(args));
            value.subscribe(function (newValue) {
                args.component.updateData(args.dataField, newValue);
            });
            var model = new _field_picker_1.FieldListPicker(options.dataSourceBrowser, value, options.dynamicListLookUpSettings, args.editorOptions.disabled);
            ko.applyBindingsToNode(element, { template: { name: 'dx-dashboard-field-picker', data: model } }, context.bindingContext);
        }
    };
}; };
function getGridEditorSettings(typeString) {
    switch (typeString) {
        case 'System.Guid':
            return {
                dataType: 'string',
                editorOptions: {
                    mask: 'xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxx',
                    maskRules: {
                        'x': /[0-9a-fA-F]/,
                    },
                    useMaskedValue: true,
                },
            };
        case 'System.SByte':
        case 'System.Int64':
        case 'System.Int32':
        case 'System.Int16':
        case 'System.Byte':
        case 'System.UInt16':
        case 'System.UInt32':
        case 'System.UInt64':
            return {
                dataType: 'number',
                editorOptions: {
                    showSpinButtons: true,
                    format: '0#',
                },
            };
        case 'System.Single':
        case 'System.Double':
        case 'System.Decimal':
            return {
                dataType: 'number',
                editorOptions: {
                    showSpinButtons: true,
                },
            };
        case 'System.DateTime':
            return {
                dataType: 'datetime'
            };
        case 'System.Boolean':
            return {
                dataType: 'boolean'
            };
        default:
        case 'System.String':
            return {
                dataType: 'string'
            };
    }
}


/***/ }),
/* 777 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var _field_chooser_surface_1 = __webpack_require__(675);
var DataSourceChooserController = (function (_super) {
    __extends(DataSourceChooserController, _super);
    function DataSourceChooserController(params) {
        var _this = _super.call(this, { startPath: ko.observable(''), dataSourceBrowser: params.dataSourceBrowser, selectedField: ko.observable(), filter: undefined }) || this;
        _this.selectedField.subscribe(function (field) {
            params.dataSource(field && field['dataSourceName']);
            params.dataMember(field && field['dataMemberName']);
        });
        var updatingWrapper = function (func) {
            _this.lists()[0].ready(false);
            func();
            setTimeout(function () {
                _this.lists().forEach(function (list) { return list.ready(true); });
            }, 1);
        };
        var updateSelection = function () {
            if (params.dataSource() && params.dataMember()) {
                updatingWrapper(function () {
                    var newList = new _field_chooser_surface_1.FieldChooserList(_this, params.dataSource(), [params.dataSource()], _this.selectedField);
                    newList.index(1);
                    _this.lists.push(newList);
                    _this.lists().forEach(function (list, index) { return list.index(index - _this.lists().length + 1); });
                });
            }
            _this.selectedField({ dataMember: ko.observable(params.dataMember() || params.dataSource()), dataSourceName: params.dataSource(), dataMemberName: params.dataMember() });
        };
        if (ko.isSubscribable(params.active)) {
            params.active.subscribe(function (newVal) {
                if (newVal) {
                    updateSelection();
                }
                else {
                    _this.selectedField(undefined);
                    updatingWrapper(function () {
                        _this.lists([_this.lists()[0]]);
                        _this.lists()[0].index(0);
                    });
                }
            });
        }
        updateSelection();
        return _this;
    }
    return DataSourceChooserController;
}(_field_chooser_surface_1.SliderController));
exports.DataSourceChooserController = DataSourceChooserController;
ko.components.register('dx-datasource-chooser', {
    viewModel: {
        createViewModel: function (params) {
            return new DataSourceChooserController(params);
        }
    },
    template: { element: 'dx-datasource-chooser-slider' }
});


/***/ }),
/* 778 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var control_options_1 = __webpack_require__(19);
var _default_1 = __webpack_require__(6);
var color_1 = __webpack_require__(50);
var _dimension_1 = __webpack_require__(71);
var _coloring_options_1 = __webpack_require__(75);
var _dashboard_item_coloring_options_1 = __webpack_require__(189);
var _object_properties_wrapper_1 = __webpack_require__(10);
var _accordion_tab_1 = __webpack_require__(7);
var toolbox_items_1 = __webpack_require__(56);
var _display_name_provider_1 = __webpack_require__(24);
var _color_picker_model_1 = __webpack_require__(633);
var _color_scheme_model_1 = __webpack_require__(634);
var _color_tree_view_model_1 = __webpack_require__(635);
var _entry_editor_model_1 = __webpack_require__(636);
var name = 'dashboard-color-scheme-editor';
var DashboardColorSchemeEditorExtension = (function () {
    function DashboardColorSchemeEditorExtension(dashboardControl) {
        var _this = this;
        this.dashboardControl = dashboardControl;
        this.name = name;
        this._subscriptions = [];
        this.selected = ko.observable(false);
        this._colorSchemeModel = ko.observable();
        this._colorPalette = ko.observableArray();
        this._entryEditorModel = new _entry_editor_model_1.EntryEditorViewModel(this._colorPalette);
        this._colorPickerModel = ko.computed(function () { return new _color_picker_model_1.ColorPickerModel(_this._colorSchemeModel(), _this._colorPalette); });
        this._selectedEntry = ko.observable();
        this._createNewEntry = function () {
            _this._colorSchemeModel().initNewEntry();
            _this._entryEditorModel.editEntry(_this.dataSourceBrowserExtension._dataSourceBrowserViewModel().dataSourceBrowser, _this._colorSchemeModel().newEntry(), _this._colorSchemeModel().selectedSignatures()[0].colorByMeasures, _this._colorSchemeModel().getAvailableMeasureKeys(), function (editedEntry) { return _this._colorSchemeModel().updateEntry(undefined, editedEntry); }, false);
        };
        this._menuItem = new toolbox_items_1.DashboardMenuItem(this.name, 'DashboardWebStringId.DashboardMenuColorScheme', 250, 0);
        this._menuItem.template = 'dx-dashboard-form-color-scheme';
        this._menuItem.data = {
            colorSchemeModel: this._colorSchemeModel,
            selectedEntry: this._selectedEntry,
            entryEditorModel: this._entryEditorModel,
            colorPickerModel: this._colorPickerModel,
            createNewEntry: this._createNewEntry,
            colorPalette: this._colorPalette
        };
        this._menuItem.disabled = ko.computed(function () { return !dashboardControl.dashboard(); });
    }
    DashboardColorSchemeEditorExtension._isColoringSupported = function (item) {
        return !!item['coloringOptions'];
    };
    DashboardColorSchemeEditorExtension.prototype._updateExtensionModel = function () {
        var _this = this;
        if (!!this.dashboardControl.dashboard() && this.dashboardControl.isDesignMode()) {
            !!this.dashboardControl._serviceClient() && this.dashboardControl._serviceClient().getDashboardPalette().done(function (palette) {
                _this._colorPalette(dx_analytics_core_1.default.Analytics.Utils.deserializeArray(palette, function (colorModel) { return new color_1.Color(colorModel['#text']); })());
            });
            this._colorSchemeModel(new _color_scheme_model_1.ColorSchemeModel(this.dashboardControl.dashboard(), this.dashboardControl._serviceClient() && this.dashboardControl._serviceClient().getColoringScheme || null, this.dashboardControl._updateHub));
        }
        else {
            this._colorSchemeModel(null);
        }
    };
    DashboardColorSchemeEditorExtension.prototype.start = function () {
        var _this = this;
        this._propertiesPanelExtension = this.dashboardControl.findExtension('item-options-panel');
        this.dataSourceBrowserExtension = this.dashboardControl.findExtension('data-source-browser');
        var toolboxExtension = this.dashboardControl.findExtension('toolbox');
        if (toolboxExtension) {
            toolboxExtension.menuItems.push(this._menuItem);
        }
        this._subscriptions.push(this.dashboardControl.dashboard.subscribe(this._updateExtensionModel, this));
        this._subscriptions.push(this.dashboardControl.isDesignMode.subscribe(this._updateExtensionModel, this));
        this._subscriptions.push(this._selectedEntry.subscribe(function (entry) {
            if (entry == null) {
                _this._entryEditorModel.close();
            }
            else {
                _this._entryEditorModel.editEntry(_this.dataSourceBrowserExtension._dataSourceBrowserViewModel().dataSourceBrowser, entry, _this._colorSchemeModel().selectedSignatures()[0].colorByMeasures, _this._colorSchemeModel().getAvailableMeasureKeys(), function (editedEntry) { return _this._colorSchemeModel().updateEntry(entry, editedEntry); }, _this._colorSchemeModel().isEntryAutogenerated(entry));
            }
        }));
        ko.computed(function () {
            var model = _this._colorSchemeModel();
            if (model) {
                _this._subscriptions.push(model.selectedSignatures.subscribe(function (v) {
                    _this._entryEditorModel.close();
                    model.newEntry(null);
                }));
            }
        });
        var oldColoringComputed = null;
        if (!!this._propertiesPanelExtension) {
            this._subscriptions.push(this._propertiesPanelExtension._subscribeTabsChanged(function (tabs) {
                oldColoringComputed && oldColoringComputed.dispose();
                var item = _this.dashboardControl._dashboardSurface() && _this.dashboardControl._dashboardSurface().selectedDashboardItem() || null;
                if (item && DashboardColorSchemeEditorExtension._isColoringSupported(item)) {
                    var coloringTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ColoringOptions, 'DashboardWebStringId.ColoringOptions');
                    tabs.push(coloringTab);
                    oldColoringComputed = ko.computed(function () {
                        coloringTab.tabModel(_this._getColoringWrapper(item));
                    });
                    _this._subscriptions.push(oldColoringComputed);
                    tabs.push(new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ColorScheme, 'DashboardWebStringId.DashboardMenuColorScheme', _this._getColorSchemeWrapper(item)));
                }
            }));
        }
        this._updateExtensionModel();
    };
    DashboardColorSchemeEditorExtension.prototype.stop = function () {
        this._subscriptions.forEach(function (s) { return s.dispose(); });
        this._subscriptions = [];
        var toolboxExtension = this.dashboardControl.findExtension('toolbox');
        if (toolboxExtension) {
            toolboxExtension.menuItems.remove(this._menuItem);
        }
    };
    DashboardColorSchemeEditorExtension.prototype._getColorSchemeWrapper = function (model) {
        var _this = this;
        ko.computed(function () {
            if (!!_this._colorSchemeModel())
                _this._colorSchemeModel().selectedSignatures([model._getColoringSignature()]);
        });
        var artificialModel = {
            colorSchemeModel: this._colorSchemeModel(),
            coloringOptions: model.coloringOptions
        };
        var properties = [{
                propertyName: 'colorSchemeModel',
                formAdapterItem: _color_tree_view_model_1.colorSchemeTreeViewEditor({
                    dataSource: this._colorSchemeModel().selectedSignatureEntries,
                    editColor: function (entry, event) {
                        _this._colorPickerModel().init(entry, event.target);
                    },
                    colorPalette: this._colorPalette,
                    colorPickerModel: this._colorPickerModel,
                }),
            }, {
                container: _coloring_options_1.coloringOptions,
                properties: [_dashboard_item_coloring_options_1.useGlobalColors]
            }
        ];
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: artificialModel,
            properties: properties
        });
    };
    DashboardColorSchemeEditorExtension.prototype._getColoringWrapper = function (model) {
        var _this = this;
        var allColorsModel = {
            measuresColoringMode: model.coloringOptions.measuresColoringMode,
            getInfo: function () { return []; }
        };
        var properties = [];
        var addColoringOptions = function (item, arr, prefixId) {
            var prefix = _default_1.getLocalizationById(prefixId);
            arr.forEach(function (arg) {
                if (arg.dataItem()) {
                    allColorsModel[arg.uniqueName()] = arg.dataItem().coloringMode;
                    properties.push({
                        propertyName: arg.uniqueName(),
                        displayName: prefix + ' - ' + _display_name_provider_1.getDataItemDisplayName(_this.dashboardControl._dataSourceBrowser, item, arg.dataItem()),
                        simpleFormAdapterItem: 'buttonGroupEditor',
                        values: _dimension_1.coloringMode.values
                    });
                }
            });
        };
        var addItemColoringOptions = function (itemsInfo) {
            itemsInfo.forEach(function (itemInfo) { return addColoringOptions(model, itemInfo.items, itemInfo.prefixId); });
        };
        addItemColoringOptions(model._getColorizableDataItemsInfo());
        if (model._canColorByMeasures) {
            properties.push(_dashboard_item_coloring_options_1.measuresColoringMode);
        }
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: allColorsModel,
            properties: properties
        });
    };
    return DashboardColorSchemeEditorExtension;
}());
exports.DashboardColorSchemeEditorExtension = DashboardColorSchemeEditorExtension;
control_options_1.designerExtensions[name] = function (dashboardControl, options) { return new DashboardColorSchemeEditorExtension(dashboardControl); };


/***/ }),
/* 779 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var control_options_1 = __webpack_require__(19);
var toolbox_items_1 = __webpack_require__(56);
var name = 'dashboard-currency-editor';
var DashboardCurrencyEditorExtension = (function () {
    function DashboardCurrencyEditorExtension(dashboardControl) {
        var _this = this;
        this.dashboardControl = dashboardControl;
        this.name = name;
        this._menuItem = new toolbox_items_1.DashboardMenuItem(this.name, 'DashboardWebStringId.DashboardMenuCurrency', 230, 67);
        this._menuItem.template = 'dx-dashboard-form-currency-settings';
        this._menuItem.data = dashboardControl;
        this._menuItem.disabled = ko.computed(function () { return !_this.dashboardControl.dashboard(); });
    }
    DashboardCurrencyEditorExtension.prototype.start = function () {
        var toolboxExtension = this.dashboardControl.findExtension('toolbox');
        if (toolboxExtension) {
            toolboxExtension.menuItems.push(this._menuItem);
        }
    };
    DashboardCurrencyEditorExtension.prototype.stop = function () {
        var toolboxExtension = this.dashboardControl.findExtension('toolbox');
        if (toolboxExtension) {
            toolboxExtension.menuItems.remove(this._menuItem);
        }
    };
    return DashboardCurrencyEditorExtension;
}());
exports.DashboardCurrencyEditorExtension = DashboardCurrencyEditorExtension;
control_options_1.designerExtensions[name] = function (dashboardControl, options) { return new DashboardCurrencyEditorExtension(dashboardControl); };


/***/ }),
/* 780 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var control_options_1 = __webpack_require__(19);
var _obsolete_helper_1 = __webpack_require__(46);
var toolbox_items_1 = __webpack_require__(56);
var _data_source_browser_viewmodel_1 = __webpack_require__(640);
var name = 'data-source-browser';
var DataSourceBrowserExtension = (function () {
    function DataSourceBrowserExtension(dashboardControl) {
        var _this = this;
        this.dashboardControl = dashboardControl;
        this.name = name;
        this._perDashboardSubscription = [];
        this._dataSourceBrowserViewModel = ko.observable();
        this._menuItem = new toolbox_items_1.DashboardMenuItem(this.name, 'DashboardWebStringId.DashboardMenuDataSources', 210, 65);
        this._menuItem.template = 'dx-dashboard-form-datasource-browser';
        this._menuItem.data = this._dataSourceBrowserViewModel;
        this._menuItem.disabled = ko.computed(function () { return !_this.dashboardControl.dashboard(); });
        _obsolete_helper_1.defineObsoleteProperty({
            target: this,
            memberName: 'dataSourceBrowserViewModel',
            oldMemberDisplayName: 'dataSourceBrowserViewModel',
            action: function () { return _this._dataSourceBrowserViewModel; }
        });
    }
    DataSourceBrowserExtension.prototype._disposePerDashboardSubcriptions = function () {
        this._perDashboardSubscription.forEach(function (s) { return s.dispose(); });
        this._perDashboardSubscription = [];
    };
    DataSourceBrowserExtension.prototype._updateExtensionModel = function (dashboard) {
        var _this = this;
        this._disposePerDashboardSubcriptions();
        if (!!dashboard) {
            var dataSourceWizardExtension = ko.computed(function () { return (_this.dashboardControl.findExtension('data-source-wizard')); });
            var accessibleDataSourcesExtension = ko.computed(function () { return (_this.dashboardControl.findExtension('available-data-sources')); });
            var viewModel = new _data_source_browser_viewmodel_1.DataSourceBrowserViewModel(this.dashboardControl._dataSourceBrowser, dataSourceWizardExtension, accessibleDataSourcesExtension, this.dashboardControl._updateHub);
            this._perDashboardSubscription.push(dataSourceWizardExtension);
            this._perDashboardSubscription.push(accessibleDataSourcesExtension);
            this._perDashboardSubscription.push(viewModel);
            this._dataSourceBrowserViewModel(viewModel);
        }
        else {
            this._dataSourceBrowserViewModel(null);
        }
    };
    DataSourceBrowserExtension.prototype.start = function () {
        var toolboxExtension = this.dashboardControl.findExtension('toolbox');
        if (toolboxExtension) {
            toolboxExtension.menuItems.push(this._menuItem);
        }
        this._subscription = this.dashboardControl.dashboard.subscribe(this._updateExtensionModel, this);
        this._updateExtensionModel(this.dashboardControl.dashboard());
    };
    DataSourceBrowserExtension.prototype.stop = function () {
        this._disposePerDashboardSubcriptions();
        if (this._subscription) {
            this._subscription.dispose();
            this._subscription = undefined;
        }
        var toolboxExtension = this.dashboardControl.findExtension('toolbox');
        if (toolboxExtension) {
            toolboxExtension.menuItems.remove(this._menuItem);
        }
    };
    return DataSourceBrowserExtension;
}());
exports.DataSourceBrowserExtension = DataSourceBrowserExtension;
control_options_1.designerExtensions[name] = function (dashboardControl, options) { return new DataSourceBrowserExtension(dashboardControl); };


/***/ }),
/* 781 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var dx_querybuilder_1 = __webpack_require__(1);
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var control_options_1 = __webpack_require__(19);
var _options_manager_1 = __webpack_require__(78);
var _default_1 = __webpack_require__(6);
var model_1 = __webpack_require__(38);
var dashboard_1 = __webpack_require__(89);
var json_data_source_1 = __webpack_require__(322);
var _obsolete_helper_1 = __webpack_require__(46);
var _data_source_wizard_model_1 = __webpack_require__(230);
var _parameters_item_provider_1 = __webpack_require__(161);
var _edit_json_data_source_wizard_1 = __webpack_require__(782);
var _edit_query_wizard_1 = __webpack_require__(374);
var _multi_query_data_source_wizard_1 = __webpack_require__(642);
var name = 'data-source-wizard';
var DataSourceWizardExtension = (function () {
    function DataSourceWizardExtension(dashboardControl, options) {
        if (options === void 0) { options = {}; }
        var _this = this;
        this.dashboardControl = dashboardControl;
        this._subscriptions = [];
        this._loadingPanelVisible = ko.observable(false);
        this._wizardElement = ko.observable();
        this._defaultOptions = {
            enableCustomSql: false,
            allowCreateNewJsonConnection: false
        };
        this._optionsManager = new _options_manager_1.OptionsManager();
        this._customTemplate = {
            name: 'dx-dashboard-data-source-wizard',
            data: {
                loadingPanelVisible: this._loadingPanelVisible,
                wizardElement: this._wizardElement
            }
        };
        this.name = name;
        this._optionsManager.initialize(this._defaultOptions, options, this);
        this._requestWrapper = new _data_source_wizard_model_1.DashboardRequestWrapper(dashboardControl);
        this._dashboardParameters = ko.computed(function () { return dashboardControl.dashboard() && dashboardControl.dashboard().parameters() || []; });
        this._getConnectionStringsCallback = function () {
            return _this.dashboardControl.remoteService.getFromServer(dashboardControl._endpointCollection.dataSourceWizardUrls.GetConnectionStringsAction)
                .fail(function (request) {
                _this.dashboardControl.notificationController.showError(_default_1.getLocalizationById('DashboardWebStringId.Notification.AttemptToConnectionStrings'), request);
            });
        };
        this.isCustomSqlEnabled = this._optionsManager.options.enableCustomSql;
        _obsolete_helper_1.defineObsoleteMethod({
            target: this,
            memberName: 'createDataSource',
            oldMemberDisplayName: 'DataSourceWizardExtension.createDataSource',
            newMemberDisplayName: 'DataSourceWizardExtension.showDataSourceCreatingDialog',
            action: function (dataSources) {
                _this.showDataSourceCreatingDialog().done(function (dataSource) {
                    dataSources.push(dataSource);
                });
            }
        });
        _obsolete_helper_1.defineObsoleteMethod({
            target: this,
            memberName: 'editSqlQuery',
            oldMemberDisplayName: 'DataSourceWizardExtension.editSqlQuery',
            newMemberDisplayName: 'DataSourceWizardExtension.showSqlQueryEditingDialog',
            action: function (dashboardSqlDataSource, queryName) {
                _this.showSqlQueryEditingDialog(dashboardSqlDataSource, queryName);
            }
        });
    }
    DataSourceWizardExtension._convertDataSource = function (dashboardSqlDataSource, requestWrapper) {
        var serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer({ useRefs: false });
        return dashboardSqlDataSource ?
            new dx_querybuilder_1.default.Analytics.Data.SqlDataSource(serializer.serialize(dashboardSqlDataSource), serializer, requestWrapper) :
            new dx_querybuilder_1.default.Analytics.Data.SqlDataSource({}, serializer, requestWrapper);
    };
    DataSourceWizardExtension._renameDataMember = function (dashboard, dataSource, oldDataMember, newDataMember) {
        dashboard.items()
            .filter(function (item) { return item instanceof model_1.DataDashboardItem
            && item.dataSource() === dataSource.componentName()
            && item.dataMember() === oldDataMember; })
            .forEach(function (item) {
            item.dataMember(newDataMember);
        });
        dataSource.calculatedFields()
            .filter(function (calcField) { return calcField.dataMember() === oldDataMember; })
            .forEach(function (calcField) { return calcField.dataMember(newDataMember); });
        dashboard.parameters()
            .map(function (parameter) { return parameter.dynamicListLookUpSettings(); })
            .filter(function (lookUpSettings) { return !!lookUpSettings
            && lookUpSettings.dataSource() === dataSource.componentName()
            && lookUpSettings.dataMember() === oldDataMember; })
            .forEach(function (lookUpSettings) { return lookUpSettings.dataMember(newDataMember); });
        dashboard.colorScheme()
            .filter(function (entry) { return entry.dataMember() === oldDataMember; })
            .forEach(function (entry) { return entry.dataMember(newDataMember); });
        dashboard.items()
            .filter(function (item) { return item instanceof model_1.DataDashboardItem; })
            .map(function (item) { return item.colorScheme(); })
            .forEach(function (colorScheme) { return colorScheme
            .filter(function (entry) { return entry.dataMember() === oldDataMember; })
            .forEach(function (entry) { return entry.dataMember(newDataMember); }); });
    };
    DataSourceWizardExtension.prototype.start = function () {
        this.dashboardControl.customTemplates.push(this._customTemplate);
    };
    DataSourceWizardExtension.prototype.stop = function () {
        this.dashboardControl.customTemplates.remove(this._customTemplate);
        this._subscriptions.forEach(function (s) { return s.dispose(); });
        this._subscriptions = [];
    };
    DataSourceWizardExtension.prototype._createEditQueryWizard = function () {
        var wizard = _edit_query_wizard_1.createDashboardQueryWizard(this._requestWrapper, this._dashboardParameters, !this.isCustomSqlEnabled, false, { enableOlapDataSource: false, enableSqlDataSource: false, enableJsonDataSource: false, enableObjectDataSource: false }, { sql: ko.observableArray() });
        this._customizeDataSourceWizard('EditQueryWizard', wizard);
        return wizard;
    };
    DataSourceWizardExtension.prototype.createDataSourceWizard = function (connectionStrings) {
        var wizard = _edit_query_wizard_1.createDashboardQueryWizard(this._requestWrapper, this._dashboardParameters, !this.isCustomSqlEnabled, this._optionsManager.options.allowCreateNewJsonConnection || this._optionsManager.options['canCreateNewJsonDataSource'], this._optionsManager.options.wizardSettings, connectionStrings);
        this._customizeDataSourceWizard('DataSourceWizard', wizard);
        return wizard;
    };
    DataSourceWizardExtension.prototype._createEditJsonDataSourceWizard = function () {
        var wizard = _edit_json_data_source_wizard_1.createEditJsonDataSourceWizard(this._requestWrapper);
        this._customizeDataSourceWizard('EditJsonDataSourceWizard', wizard);
        return wizard;
    };
    DataSourceWizardExtension.prototype._customizeDataSourceWizard = function (customizationType, wizard) {
        this._optionsManager.events.raise('customizeDataSourceWizard', { type: customizationType, wizard: wizard });
    };
    DataSourceWizardExtension.prototype.createWizardIterator = function (factory, stateManager) {
        return new _edit_query_wizard_1.DashboardQueryWizardIterator(true, factory, stateManager);
    };
    DataSourceWizardExtension.prototype.showDataSourceCreatingDialog = function () {
        var _this = this;
        var deferred = $.Deferred();
        var loadingConnectionsStrings = true;
        this._loadingPanelVisible(true);
        var stopLoading = function () {
            loadingPanelSubscription.dispose();
            loadingConnectionsStrings = false;
        };
        var loadingPanelSubscription = this._loadingPanelVisible.subscribe(function (newValue) {
            if (!newValue && loadingConnectionsStrings) {
                stopLoading();
                deferred.reject();
            }
        });
        var dashboardConnectionStrings = {
            sql: ko.observableArray()
        };
        this._getConnectionStringsCallback()
            .done(function (connectionStrings) {
            stopLoading();
            if (deferred.state() !== 'rejected') {
                dashboardConnectionStrings = {
                    sql: ko.observableArray(connectionStrings.filter(function (c) { return c.connectionType === 'Sql'; })),
                    json: ko.observableArray(connectionStrings.filter(function (c) { return c.connectionType === 'Json'; })),
                    olap: connectionStrings.filter(function (c) { return c.connectionType === 'Olap'; }),
                };
            }
        })
            .always(function () {
            stopLoading();
            if (deferred.state() !== 'rejected') {
                var dataSourceWizard = _this.createDataSourceWizard(dashboardConnectionStrings);
                _this._initializeDataSourceWizard(dataSourceWizard, deferred);
                _this._renderAndStartWizard(dataSourceWizard);
                _this._loadingPanelVisible(false);
            }
        });
        return deferred.promise();
    };
    DataSourceWizardExtension.prototype._initializeDataSourceWizard = function (wizard, deferred) {
        var _this = this;
        var initialState = new _edit_query_wizard_1.DashboardDataSourceWizardState();
        wizard.initialize(initialState, function (factory, stateManager) { return _this.createWizardIterator(factory, stateManager); });
        wizard['_finishCallback'] = function (state) {
            var sqlModel = state.sqlDataSourceWizard;
            var olapModel = state.olapDataSourceWizard;
            var jsonModel = state.jsonDataSourceWizard;
            var objectModel = state.objectDataSourceWizard;
            if (sqlModel && state.dashboardDataSourceType === 'Sql') {
                var sqlDataSource_1 = dashboard_1.Dashboard._createDataSource({ '@ItemType': 'SqlDataSource' }, new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer());
                var dataSourceWrapper = dx_querybuilder_1.default.Analytics.Wizard._restoreSqlDataSourceFromState(sqlModel);
                sqlDataSource_1.connection.name(dataSourceWrapper.sqlDataSource.connection.name());
                sqlDataSource_1.connection.fromAppConfig(true);
                dataSourceWrapper.sqlDataSource.queries().forEach(function (query) {
                    sqlDataSource_1.queries.push(query);
                    sqlDataSource_1.name(sqlDataSource_1.queries()[0].name());
                });
                deferred.resolve(sqlDataSource_1);
                return $.Deferred().resolve().promise();
            }
            else if (olapModel && state.dashboardDataSourceType === 'Olap') {
                var olapDataSource = dashboard_1.Dashboard._createDataSource({ '@ItemType': 'OLAPDataSource' }, new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer());
                olapDataSource.connectionName(olapModel.connectionName);
                olapDataSource.name(_default_1.getLocalizationById('DashboardStringId.DefaultOlapDataSourceName'));
                deferred.resolve(olapDataSource);
                return $.Deferred().resolve().promise();
            }
            else if (jsonModel && state.dashboardDataSourceType === 'Json') {
                var jsonDeferred = $.Deferred();
                var reportsDataSourceDeferred = $.Deferred();
                var reportsDataSource = dx_querybuilder_1.default.Analytics.Wizard._restoreJsonDataSourceFromState(jsonModel);
                if (jsonModel.newConnectionName) {
                    var jsonSource = reportsDataSource.source;
                    var jsonSourceJSON = JSON.stringify(jsonSource.serialize(true));
                    var requestString = JSON.stringify({
                        connectionName: jsonModel.newConnectionName,
                        customJson: jsonSource.json(),
                        uriJsonSourceJSON: jsonSourceJSON
                    });
                    _this._requestWrapper
                        .sendRequest('saveJsonSource', encodeURIComponent(requestString))
                        .done(function () {
                        reportsDataSource.connectionName(jsonModel.newConnectionName);
                        reportsDataSource.source = null;
                        reportsDataSourceDeferred.resolve(reportsDataSource);
                    })
                        .fail(function () { return reportsDataSourceDeferred.reject(); });
                }
                else {
                    reportsDataSourceDeferred.resolve(reportsDataSource);
                }
                reportsDataSourceDeferred
                    .done(function (repDataSource) {
                    var serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer();
                    var reportsJsonDataSourceJson = serializer.serialize(repDataSource);
                    var dataSource = new json_data_source_1.JsonDataSource(reportsJsonDataSourceJson);
                    dataSource.name(_default_1.getLocalizationById('DashboardStringId.DefaultJsonDataSourceName'));
                    deferred.resolve(dataSource);
                    jsonDeferred.resolve();
                })
                    .fail(function () {
                    deferred.reject();
                    jsonDeferred.reject();
                });
                return jsonDeferred.promise();
            }
            else {
                deferred.reject();
                throw Error(_default_1.getLocalizationById('DashboardWebStringId.Notification.UnsupportedDataSourceType'));
            }
        };
    };
    DataSourceWizardExtension.prototype.showSqlQueryEditingDialog = function (dashboardSqlDataSource, queryName) {
        var _this = this;
        var dataSource = DataSourceWizardExtension._convertDataSource(dashboardSqlDataSource, this._requestWrapper);
        var singleDataSourceWizard = this._createEditQueryWizard();
        singleDataSourceWizard.initialize({
            sqlDataSourceWizard: {
                sqlDataSourceJSON: JSON.stringify(new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer().serialize(dataSource)),
                queryName: queryName
            }
        }, function (factory, stateManager) { return new _edit_query_wizard_1.DashboardQueryWizardIterator(false, factory, stateManager); });
        singleDataSourceWizard['_finishCallback'] = function (state) {
            var model = dx_querybuilder_1.default.Analytics.Wizard._restoreSqlDataSourceFromState(state.sqlDataSourceWizard);
            var queryIndex = model['_queryIndex'];
            var query = model.sqlQuery;
            if (queryIndex === dashboardSqlDataSource.queries().length) {
                dashboardSqlDataSource.queries.push(query);
            }
            else {
                var oldQuery = dashboardSqlDataSource.queries()[queryIndex];
                dashboardSqlDataSource.queries.splice(queryIndex, 1, query);
                if (oldQuery.name() !== query.name()) {
                    DataSourceWizardExtension._renameDataMember(_this.dashboardControl.dashboard(), dashboardSqlDataSource, oldQuery.name(), query.name());
                }
            }
            var def = $.Deferred();
            def.resolve();
            return def.promise();
        };
        this._renderAndStartWizard(singleDataSourceWizard);
    };
    DataSourceWizardExtension.prototype._showEditJsonDataSourceDialog = function (jsonDataSource) {
        var serializer = new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer();
        var dashboardJsonDataSourceJson = serializer.serialize(jsonDataSource);
        var editJsonDataSourceWizard = this._createEditJsonDataSourceWizard();
        editJsonDataSourceWizard.initialize({
            jsonDataSourceWizard: {
                jsonScheme: JSON.stringify(dashboardJsonDataSourceJson.Schema),
                rootElement: jsonDataSource.rootElement()
            }
        }, function (factory, stateManager) { return new _edit_json_data_source_wizard_1.EditJsonDataSourceWizardIterator(factory, stateManager); });
        editJsonDataSourceWizard['_finishCallback'] = function (state) {
            var jsonModel = state.jsonDataSourceWizard;
            if (jsonModel) {
                var modifiedReportsDataSource = dx_querybuilder_1.default.Analytics.Wizard._restoreJsonDataSourceFromState(jsonModel);
                jsonDataSource.schema(modifiedReportsDataSource.schema);
                jsonDataSource.rootElement(modifiedReportsDataSource.rootElement());
            }
            return $.Deferred().resolve().promise();
        };
        this._renderAndStartWizard(editJsonDataSourceWizard);
    };
    DataSourceWizardExtension.prototype._renderAndStartWizard = function (wizardModel) {
        var element = this._wizardElement();
        if (element) {
            ko.cleanNode(element);
            var viewModel = {
                wizardModel: wizardModel,
                dataBindingsProvider: new _parameters_item_provider_1.ParametersItemProvider(this._dashboardParameters())
            };
            dx_analytics_core_1.default.Analytics.Internal.appendStaticContextToRootViewModel(viewModel);
            ko.applyBindingsToNode(element, { template: 'dx-dashboard-data-source-wizard-binding' }, viewModel);
            wizardModel.isVisible.subscribe(function (visible) {
                if (!visible) {
                    wizardModel.dispose();
                    ko.cleanNode(element);
                }
            });
        }
        wizardModel.start();
    };
    return DataSourceWizardExtension;
}());
exports.DataSourceWizardExtension = DataSourceWizardExtension;
var MultiQueryDataSourceWizardExtension = (function (_super) {
    __extends(MultiQueryDataSourceWizardExtension, _super);
    function MultiQueryDataSourceWizardExtension(dashboardControl, options) {
        return _super.call(this, dashboardControl, options) || this;
    }
    MultiQueryDataSourceWizardExtension.prototype.createWizardIterator = function (factory, stateManager) {
        return new _multi_query_data_source_wizard_1.DashboardMultiQueryWizardIterator(factory, stateManager);
    };
    MultiQueryDataSourceWizardExtension.prototype.createDataSourceWizard = function (connectionStrings) {
        var wizard = _multi_query_data_source_wizard_1.createDashboardMultiQueryWizard(this._requestWrapper, this._dashboardParameters, !this.isCustomSqlEnabled, this._optionsManager.options.allowCreateNewJsonConnection || this._optionsManager.options['canCreateNewJsonDataSource'], this._optionsManager.options.wizardSettings, connectionStrings);
        this._customizeDataSourceWizard('MultiQueryDataSourceWizard', wizard);
        return wizard;
    };
    return MultiQueryDataSourceWizardExtension;
}(DataSourceWizardExtension));
exports.MultiQueryDataSourceWizardExtension = MultiQueryDataSourceWizardExtension;
control_options_1.designerExtensions[name] = function (dashboardControl, options) { return new DataSourceWizardExtension(dashboardControl, options); };
ko.virtualElements.allowedBindings['dx-dashboard-element-accessor-binding'] = true;
ko.bindingHandlers['dx-dashboard-element-accessor-binding'] = {
    init: function (element, valueAccessor, _, __, bindingContext) {
        var params = ko.unwrap(valueAccessor());
        params.element(element);
        return { controlsDescendantBindings: true };
    }
};


/***/ }),
/* 782 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_querybuilder_1 = __webpack_require__(1);
var _default_1 = __webpack_require__(6);
var _utils_1 = __webpack_require__(3);
var _choose_json_schema_page_1 = __webpack_require__(231);
var EditJsonDataSourceWizardIterator = (function (_super) {
    __extends(EditJsonDataSourceWizardIterator, _super);
    function EditJsonDataSourceWizardIterator(factory, stateManager) {
        return _super.call(this, factory, stateManager) || this;
    }
    EditJsonDataSourceWizardIterator.prototype.getNextPageId = function (pageId) {
        return dx_querybuilder_1.default.Analytics.Wizard.JsonDataSourceWizardPageId.ChooseJsonSchemaPage;
    };
    return EditJsonDataSourceWizardIterator;
}(dx_querybuilder_1.default.Analytics.Wizard.PageIterator));
exports.EditJsonDataSourceWizardIterator = EditJsonDataSourceWizardIterator;
var EditJsonDataSourceWizard = (function (_super) {
    __extends(EditJsonDataSourceWizard, _super);
    function EditJsonDataSourceWizard() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.title = _default_1.getLocalizationById('DashboardWebStringId.DataSources.DashboardDataSourceWizard');
        _this._container = function (element) {
            return _utils_1.$wrap(_utils_1.closest(element, '.dx-dashboard-widget-container'));
        };
        _this._extendCssClass = 'dxrd-sqldatasource-wizard';
        return _this;
    }
    return EditJsonDataSourceWizard;
}(dx_querybuilder_1.default.Analytics.Wizard.PopupWizard));
exports.EditJsonDataSourceWizard = EditJsonDataSourceWizard;
function createEditJsonDataSourceWizard(requestWrapper) {
    var factory = new dx_querybuilder_1.default.Analytics.Wizard.PageFactory();
    _choose_json_schema_page_1._registerChooseJsonSchemaPage(factory, requestWrapper);
    return new EditJsonDataSourceWizard(factory);
}
exports.createEditJsonDataSourceWizard = createEditJsonDataSourceWizard;


/***/ }),
/* 783 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var control_options_1 = __webpack_require__(19);
var notificator_1 = __webpack_require__(114);
var _default_1 = __webpack_require__(6);
var dashboard_1 = __webpack_require__(89);
var _helper_classes_1 = __webpack_require__(36);
var _knockout_utils_1 = __webpack_require__(17);
var _obsolete_helper_1 = __webpack_require__(46);
var name = 'available-data-sources';
var AvailableDataSourcesExtension = (function () {
    function AvailableDataSourcesExtension(dashboardControl) {
        var _this = this;
        this.dashboardControl = dashboardControl;
        this.name = name;
        this.templateName = 'dx-dashboard-datasource-available-datasources';
        this._errorState = ko.observable(null);
        this._uiState = ko.observable('empty');
        this.selectedDataSources = ko.observableArray();
        this.dataSources = ko.observableArray();
        var showCreateDataSourceWizardDelegate = ko.computed(function () {
            var dataSourceWizardExtension = (_this.dashboardControl.findExtension('data-source-wizard'));
            if (dataSourceWizardExtension) {
                return function () {
                    dataSourceWizardExtension.showDataSourceCreatingDialog().done(function (dataSource) {
                        _helper_classes_1.NameGenerator.validateName(dataSource, _this.dataSources(), 'name', 1, true);
                        _this.dataSources.push(dataSource);
                    });
                };
            }
            else {
                return null;
            }
        });
        var isInitialized = false;
        var uiStateComputed = ko.computed(function () {
            if (!isInitialized) {
                _this.loadAvailableDataSources();
                isInitialized = true;
            }
            return _this._uiState();
        }, this, {
            deferEvaluation: true
        });
        this.viewModel = new AvailableDataSourcesViewModel(this.dataSources, this.selectedDataSources, uiStateComputed, this._errorState, showCreateDataSourceWizardDelegate);
        _obsolete_helper_1.defineObsoleteMethod({
            target: this,
            memberName: 'loadAvaliableDataSources',
            oldMemberDisplayName: 'AvailableDataSourcesExtension.loadAvaliableDataSources',
            newMemberDisplayName: 'AvailableDataSourcesExtension.loadAvailableDataSources',
            action: function () { return _this.loadAvailableDataSources(); }
        });
    }
    AvailableDataSourcesExtension.prototype.start = function () {
        var _this = this;
        if (this.dataSources().length > 0) {
            this.selectedDataSources([this.dataSources()[0]]);
        }
        _knockout_utils_1.subscribeArrayChange(this.dataSources, {
            added: function (item) { return _this.selectedDataSources([item]); }
        });
    };
    AvailableDataSourcesExtension.prototype.stop = function () {
        this._errorState(null);
    };
    AvailableDataSourcesExtension.prototype.loadAvailableDataSources = function () {
        var _this = this;
        if (this.dashboardControl._endpointCollection.dataSourceUrls) {
            this._uiState('loading');
            this.dashboardControl.remoteService.getFromServer(this.dashboardControl._endpointCollection.dataSourceUrls.GetDataSourcesAction)
                .then(function (result) {
                var dataSources = dx_analytics_core_1.default.Analytics.Utils.deserializeArray(result, function (item) { return dashboard_1.Dashboard._createDataSource(item, new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer()); })();
                dataSources.forEach(function (dataSource) {
                    if (!dataSource.name()) {
                        dataSource.name(_helper_classes_1.NameGenerator.generateName(_default_1.getLocalizationById('DashboardStringId.DefaultDataSourceName') + ' ', dataSources, 'name', 1));
                    }
                });
                _this.dataSources(dataSources);
                _this._uiState('live');
            }, function (errorInfo) {
                var errorDetail = notificator_1.NotificationController._getDetailedErrorMessage(errorInfo);
                _this._errorState({
                    title: _default_1.getLocalizationById('DashboardWebStringId.DataSources.AvailableDataSourcesError'),
                    detail: errorDetail
                });
                _this._uiState('error');
            });
        }
    };
    return AvailableDataSourcesExtension;
}());
exports.AvailableDataSourcesExtension = AvailableDataSourcesExtension;
control_options_1.designerExtensions[name] = function (dashboardControl, options) { return new AvailableDataSourcesExtension(dashboardControl); };
var AvailableDataSourcesViewModel = (function () {
    function AvailableDataSourcesViewModel(dataSources, selectedDataSources, uiState, errorState, _showCreateDataSourceWizardDelegate) {
        var _this = this;
        this.dataSources = dataSources;
        this.selectedDataSources = selectedDataSources;
        this.uiState = uiState;
        this.errorState = errorState;
        this._showCreateDataSourceWizardDelegate = _showCreateDataSourceWizardDelegate;
        this.showCreateDataSourceWizard = function () {
            if (_this.canCreateDataSourceWizard) {
                _this._showCreateDataSourceWizardDelegate()(_this.dataSources);
            }
        };
    }
    Object.defineProperty(AvailableDataSourcesViewModel.prototype, "canCreateDataSourceWizard", {
        get: function () {
            return !!this._showCreateDataSourceWizardDelegate();
        },
        enumerable: true,
        configurable: true
    });
    return AvailableDataSourcesViewModel;
}());


/***/ }),
/* 784 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var control_options_1 = __webpack_require__(19);
var _options_manager_1 = __webpack_require__(78);
var data_dashboard_item_1 = __webpack_require__(9);
var _dashboard_item_menu_1 = __webpack_require__(117);
var name = 'item-binding-panel';
var BindingPanelExtension = (function () {
    function BindingPanelExtension(dashboardControl, options) {
        if (options === void 0) { options = {}; }
        this.dashboardControl = dashboardControl;
        this.name = name;
        this._subscriptions = [];
        this._optionManager = new _options_manager_1.OptionsManager();
        this._optionManager.initialize({}, options, this);
    }
    BindingPanelExtension.prototype._contextMenuSubscriber = function (dashboardItemMenu) {
        if (!!dashboardItemMenu) {
            if (this.dashboardControl._dashboardSurface().selectedDashboardItem() instanceof data_dashboard_item_1.DataDashboardItem) {
                this._updateDashboardItemMenu(dashboardItemMenu);
            }
        }
    };
    BindingPanelExtension.prototype._updateEmptyItemTemplate = function (surface) {
        var _this = this;
        if (surface) {
            surface.emptyItemTemplates.push({
                name: 'dx-dashboard-binding-properties-empty-item',
                data: {
                    isDesignMode: this.dashboardControl.isDesignMode,
                    click: function () {
                        var contextMenuExtension = _this.dashboardControl.findExtension('item-menu');
                        if (contextMenuExtension) {
                            contextMenuExtension.menuItemClick(_this.name);
                        }
                    }
                }
            });
        }
    };
    BindingPanelExtension.prototype._updateDashboardItemMenu = function (menu) {
        var _this = this;
        if (menu instanceof _dashboard_item_menu_1.ItemMenuViewModel) {
            if (!!menu.selectedItemSurface && !!menu.selectedItemSurface.dataSections && menu.selectedItemSurface.dataSections().length > 0) {
                menu.selectedItemSurface.customizeDataItemContainerTabs = function (args) {
                    _this._optionManager.events.raise('customizeDataItemContainerSections', args);
                };
                menu.contextMenuItems.push({
                    menuItemId: this.name,
                    icon: 'dx-dashboard-item-options',
                    popoverClass: 'dx-dashboard-binding-panel',
                    panelWidth: _dashboard_item_menu_1.DashboardItemMenuSizes.BindingPanelPanelWidth,
                    templateName: 'dx-dashboard-binding-properties',
                    detailVisible: ko.observable(false),
                    customData: menu.selectedItemSurface,
                    hint: 'DashboardWebStringId.Bindings',
                    index: 100
                });
            }
        }
    };
    BindingPanelExtension.prototype.start = function () {
        var _this = this;
        this._updateEmptyItemTemplate(this.dashboardControl._dashboardSurface());
        this.dashboardControl._dashboardSurface.subscribe(function (surface) { return _this._updateEmptyItemTemplate(surface); });
        var contextMenuExtension = this.dashboardControl.findExtension('item-menu');
        if (contextMenuExtension) {
            this._subscriptions.push(contextMenuExtension._itemContextMenu.subscribe(this._contextMenuSubscriber, this));
            this._contextMenuSubscriber(contextMenuExtension._itemContextMenu());
        }
    };
    BindingPanelExtension.prototype.stop = function () {
        this._subscriptions.forEach(function (s) { return s.dispose(); });
        this._subscriptions = [];
    };
    return BindingPanelExtension;
}());
exports.BindingPanelExtension = BindingPanelExtension;
ko.bindingHandlers['parentHeightCalculator'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
    },
    update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        viewModel.parentHeight = $(element).parents(valueAccessor().selector).height();
    }
};
control_options_1.designerExtensions[name] = function (dashboardControl, options) { return new BindingPanelExtension(dashboardControl, options); };


/***/ }),
/* 785 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var control_options_1 = __webpack_require__(19);
var _utils_1 = __webpack_require__(3);
var dashboard_1 = __webpack_require__(89);
var dashboard_item_1 = __webpack_require__(60);
var data_dashboard_item_1 = __webpack_require__(9);
var serializable_model_1 = __webpack_require__(5);
var _dashboard_item_menu_1 = __webpack_require__(117);
var name = 'item-conversion-panel';
var ConversionPanelExtension = (function () {
    function ConversionPanelExtension(dashboardControl) {
        this.dashboardControl = dashboardControl;
        this.name = name;
        this._subscriptions = [];
        this.properties = ko.observable();
    }
    ConversionPanelExtension.prototype._contextMenuSubscriber = function (itemContextMenu) {
        if (!!itemContextMenu) {
            var item = this.dashboardControl._dashboardSurface().selectedDashboardItem();
            if (item instanceof data_dashboard_item_1.DataDashboardItem) {
                this._updateContextMenu(itemContextMenu, item, this.dashboardControl.dashboard(), this.dashboardControl._serviceClient());
            }
        }
    };
    ConversionPanelExtension.prototype.start = function () {
        var contextMenuExtension = this.dashboardControl.findExtension('item-menu');
        if (contextMenuExtension) {
            this._subscriptions.push(contextMenuExtension._itemContextMenu.subscribe(this._contextMenuSubscriber, this));
            this._contextMenuSubscriber(contextMenuExtension._itemContextMenu());
        }
    };
    ConversionPanelExtension.prototype.stop = function () {
        this._subscriptions.forEach(function (s) { return s.dispose(); });
        this._subscriptions = [];
    };
    ConversionPanelExtension.prototype._updateContextMenu = function (itemContextMenu, item, dashboard, serviceClient) {
        var toolboxExtension = this.dashboardControl.findExtension('toolbox');
        var _convertItem = _utils_1.asyncDebounce(serviceClient.convertItem.bind(serviceClient), function (result) {
            var tmpDashboard = new dashboard_1.Dashboard(result);
            var newItem = tmpDashboard.items()[0];
            newItem.dataSource(item.dataSource());
            newItem.componentName(undefined);
            dashboard._changeItem(item, newItem);
        });
        this.properties({
            groups: toolboxExtension && toolboxExtension.toolboxGroups().filter(function (group) { return !group.items().every(function (item) { return !!serializable_model_1.itemTypesMap[item.type].customItemType; }); }) || [],
            supportConvert: function (type) {
                return type !== 'Group' && type !== 'Image' && type !== 'TabContainer' && !serializable_model_1.itemTypesMap[type].customItemType;
            },
            convertTo: function (newItemType) { return _convertItem(item, dashboard_item_1.DashboardItem._getCommonItemType(newItemType)); },
            duplicate: function () {
                dashboard._duplicateItem(item);
            }
        });
        itemContextMenu.contextMenuItems.push({
            menuItemId: this.name,
            icon: 'dx-dashboard-convert',
            title: 'DashboardWebStringId.ConvertTo',
            panelWidth: _dashboard_item_menu_1.DashboardItemMenuSizes.OptionsPanelWidth,
            templateName: 'dx-dashboard-convert-to',
            detailVisible: ko.observable(false),
            customData: this.properties,
            index: 400
        });
    };
    return ConversionPanelExtension;
}());
exports.ConversionPanelExtension = ConversionPanelExtension;
control_options_1.designerExtensions[name] = function (dashboardControl, options) { return new ConversionPanelExtension(dashboardControl); };


/***/ }),
/* 786 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var control_options_1 = __webpack_require__(19);
var _default_1 = __webpack_require__(6);
var dashboard_1 = __webpack_require__(89);
var toolbox_items_1 = __webpack_require__(56);
var name = 'create-dashboard';
var CreateDashboardExtension = (function () {
    function CreateDashboardExtension(dashboardControl) {
        var _this = this;
        this.dashboardControl = dashboardControl;
        this.name = name;
        this.showCreateNewDashboard = function () {
            var extension = _this.dashboardControl.findExtension('toolbox');
            if (extension) {
                extension.selectMenuItem(_this._newDashboardMenuItem);
            }
        };
        this._createNewDashboard = function (dataSources, dashboardName) {
            var toolboxExtension = _this.dashboardControl.findExtension('toolbox');
            if (toolboxExtension) {
                toolboxExtension.menuVisible(false);
            }
            var createDashboardCallback = function () {
                var dashboardPropotype = new dashboard_1.Dashboard({});
                dashboardPropotype.title.text(dashboardName);
                dataSources.forEach(function (dataSource) {
                    var newDataSource = dashboard_1.Dashboard._createDataSource(new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer({ useRefs: false }).serialize(dataSource), new dx_analytics_core_1.default.Analytics.Utils.ModelSerializer());
                    dashboardPropotype.dataSources.push(newDataSource);
                });
                _this.performCreateDashboard(dashboardName, dashboardPropotype.getJSON());
            };
            var saveExtension = _this.dashboardControl.findExtension('save-dashboard');
            if (saveExtension) {
                saveExtension.ensureDashboardSaved(createDashboardCallback);
            }
            else {
                createDashboardCallback();
            }
        };
        var accessibleDataSourcesExtension = ko.computed(function () { return _this.dashboardControl.findExtension('available-data-sources'); });
        var clickHandler = function () {
            _this._newDashboardMenuItem.template = 'dx-dashboard-form-new';
            _this._newDashboardMenuItem.data = new CreateNewDashboardViewModel(accessibleDataSourcesExtension, _this._createNewDashboard);
        };
        this._newDashboardMenuItem = new toolbox_items_1.DashboardMenuItem(this.name, 'DashboardWebStringId.DashboardMenuNew', 105, 78, function () { return clickHandler(); });
    }
    CreateDashboardExtension.prototype.start = function () {
        var extension = this.dashboardControl.findExtension('toolbox');
        if (extension) {
            extension.menuItems.push(this._newDashboardMenuItem);
        }
        this.dashboardControl._emptyControlTemplates.push({
            name: 'dx-dashboard-add-new-dashboard',
            data: {
                isDesignMode: this.dashboardControl.isDesignMode,
                showCreateNewDashboard: this.showCreateNewDashboard
            }
        });
    };
    CreateDashboardExtension.prototype.stop = function () {
        var extension = this.dashboardControl.findExtension('toolbox');
        if (extension) {
            extension.menuItems.remove(this._newDashboardMenuItem);
        }
        var template = this.dashboardControl._emptyControlTemplates().filter(function (temlp) { return temlp.name === 'dx-dashboard-add-new-dashboard'; })[0];
        if (template) {
            this.dashboardControl._emptyControlTemplates.remove(template);
        }
    };
    CreateDashboardExtension.prototype.performCreateDashboard = function (dashboardName, dashboardJson) {
        var _this = this;
        this.dashboardControl.notificationController.showState(_default_1.getLocalizationById('DashboardWebStringId.Notification.DashboardLoading'));
        return this.dashboardControl.remoteService.postToServer(this.dashboardControl._endpointCollection.dashboardUrls.GetDashboardsAction, { name: dashboardName, dashboard: dashboardJson })
            .then(function (result, status, query) {
            _this.dashboardControl.initializeDashboard(result['dashboardId'], result['dashboard'].Dashboard);
        }, function (request) {
            _this.dashboardControl.notificationController.showError(_default_1.getLocalizationById('DashboardWebStringId.Notification.NewDashboardCannotBeCreated'), request);
        });
    };
    return CreateDashboardExtension;
}());
exports.CreateDashboardExtension = CreateDashboardExtension;
control_options_1.designerExtensions[name] = function (dashboardControl, options) { return new CreateDashboardExtension(dashboardControl); };
var CreateNewDashboardViewModel = (function () {
    function CreateNewDashboardViewModel(accessibleDataSourcesExtension, _newDashboardCallback) {
        var _this = this;
        this.accessibleDataSourcesExtension = accessibleDataSourcesExtension;
        this._newDashboardCallback = _newDashboardCallback;
        this.dashboardName = ko.observable();
        this.selectionMode = 'single';
        this.createNewDashboard = function () {
            _this._newDashboardCallback(_this.accessibleDataSourcesExtension().selectedDataSources(), _this.dashboardName());
        };
        this.dashboardName(_default_1.getLocalizationById('DashboardWebStringId.NewDashboard'));
        this.createNewDashboardDisabled = ko.computed(function () {
            return !_this.dashboardName() || !_this.accessibleDataSourcesExtension() || _this.accessibleDataSourcesExtension().selectedDataSources().length === 0;
        });
    }
    return CreateNewDashboardViewModel;
}());


/***/ }),
/* 787 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var control_options_1 = __webpack_require__(19);
var _dashboard_item_menu_1 = __webpack_require__(117);
var _interactivity_properties_composer_1 = __webpack_require__(671);
var name = 'item-interactivity-panel';
var InteractivityPanelExtension = (function () {
    function InteractivityPanelExtension(dashboardControl) {
        this.dashboardControl = dashboardControl;
        this.name = name;
        this._subscriptions = [];
    }
    InteractivityPanelExtension.prototype._contextMenuSubscriber = function (itemContextMenu) {
        if (!!itemContextMenu) {
            var item = this.dashboardControl._dashboardSurface().selectedDashboardItem();
            this._updateContextMenu(itemContextMenu, item);
        }
    };
    InteractivityPanelExtension.prototype._updateContextMenu = function (menu, item) {
        if (item._isInteractivityAllowed()) {
            if (menu instanceof _dashboard_item_menu_1.ItemMenuViewModel) {
                menu.contextMenuItems.push({
                    menuItemId: this.name,
                    icon: 'dx-dashboard-interactivity',
                    title: 'DashboardWebStringId.Interactivity',
                    panelWidth: _dashboard_item_menu_1.DashboardItemMenuSizes.OptionsPanelWidth,
                    templateName: 'dx-dashboard-options',
                    detailVisible: ko.observable(false),
                    showMenu: function () {
                        var composer = new _interactivity_properties_composer_1.InteractivityPropertiesComposer(menu.propertiesController);
                        var tabs = composer.composeTabs(item);
                        menu.propertiesController.mainModel({
                            data: {
                                model: item,
                                propertiesTabs: ko.observableArray(tabs),
                            }
                        });
                    },
                    customData: {
                        propertiesController: menu.propertiesController,
                    },
                    index: 200
                });
            }
        }
    };
    InteractivityPanelExtension.prototype.start = function () {
        var contextMenuExtension = this.dashboardControl.findExtension('item-menu');
        if (contextMenuExtension) {
            this._subscriptions.push(contextMenuExtension._itemContextMenu.subscribe(this._contextMenuSubscriber, this));
            this._contextMenuSubscriber(contextMenuExtension._itemContextMenu());
        }
    };
    InteractivityPanelExtension.prototype.stop = function () {
        this._subscriptions.forEach(function (s) { return s.dispose(); });
        this._subscriptions = [];
    };
    return InteractivityPanelExtension;
}());
exports.InteractivityPanelExtension = InteractivityPanelExtension;
control_options_1.designerExtensions[name] = function (dashboardControl, options) { return new InteractivityPanelExtension(dashboardControl); };


/***/ }),
/* 788 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var control_options_1 = __webpack_require__(19);
var _interfaces_1 = __webpack_require__(76);
var disposable_object_1 = __webpack_require__(11);
var _dashboard_item_menu_1 = __webpack_require__(117);
var name = 'item-menu';
var DashboardItemMenuExtension = (function (_super) {
    __extends(DashboardItemMenuExtension, _super);
    function DashboardItemMenuExtension(dashboardControl) {
        var _this = _super.call(this) || this;
        _this.dashboardControl = dashboardControl;
        _this.name = name;
        _this._itemContextMenu = ko.observable();
        return _this;
    }
    DashboardItemMenuExtension.prototype.start = function () {
        var _this = this;
        this.dashboardControl._dashboardSurface.subscribe(function (surface) { return _this._undateExtension(surface); });
        this._undateExtension(this.dashboardControl._dashboardSurface());
    };
    DashboardItemMenuExtension.prototype.stop = function () {
    };
    DashboardItemMenuExtension.prototype.processKeyEvent = function (keyEventType, eventArgs) {
        if (keyEventType === 'keydown' && eventArgs.keyCode === _interfaces_1.KeyCodes.Esc) {
            var menu = this._itemContextMenu();
            if (menu && menu instanceof _dashboard_item_menu_1.ItemMenuViewModel) {
                if (menu.isSecondaryPanelVisible()) {
                    menu.hideBindingProperties();
                    return true;
                }
                else if (menu.propertiesController.mainModel()) {
                    menu.hideBindingProperties();
                    return true;
                }
                else if (menu.menuItemDetailVisible()) {
                    menu.hideBindingPanel();
                    return true;
                }
            }
        }
        return false;
    };
    DashboardItemMenuExtension.prototype.menuItemClick = function (menuItemId) {
        var menu = this._itemContextMenu();
        if (menu && menu instanceof _dashboard_item_menu_1.ItemMenuViewModel) {
            var contextMenuItem = menu.contextMenuItems().filter(function (item) { return item.menuItemId === menuItemId; })[0];
            if (contextMenuItem) {
                menu.menuItemClick(contextMenuItem);
            }
        }
    };
    DashboardItemMenuExtension.prototype._undateExtension = function (dashboardSurface) {
        var that = this;
        if (dashboardSurface != null) {
            dashboardSurface.contextMenu = function (layoutItem) {
                return {
                    data: {
                        dashboardSurface: dashboardSurface,
                        layoutItem: layoutItem,
                        itemMenuViewModelContainer: that._itemContextMenu
                    },
                    templateName: 'dx-dashboard-item-menu-holder'
                };
            };
        }
    };
    return DashboardItemMenuExtension;
}(disposable_object_1.DisposableObject));
exports.DashboardItemMenuExtension = DashboardItemMenuExtension;
control_options_1.designerExtensions[name] = function (dashboardControl, options) { return new DashboardItemMenuExtension(dashboardControl); };


/***/ }),
/* 789 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var array_store_1 = __webpack_require__(168);
var $ = __webpack_require__(2);
var control_options_1 = __webpack_require__(19);
var toolbox_items_1 = __webpack_require__(56);
var name = 'open-dashboard';
var OpenDashboardExtension = (function () {
    function OpenDashboardExtension(dashboardControl) {
        var _this = this;
        this.dashboardControl = dashboardControl;
        this.name = name;
        this._menuItem = new toolbox_items_1.DashboardMenuItem(this.name, 'DashboardWebStringId.DashboardMenuOpen', 108, 79);
        this._menuItem.template = 'dx-dashboard-form-open';
        this._menuItem.data = {
            dashboardsListStore: function (loadOptions) {
                var def = $.Deferred();
                _this.dashboardControl.requestDashboardList().done(function (items) {
                    new array_store_1.default(items).load({ filter: loadOptions.searchValue ? [loadOptions.searchExpr, loadOptions.searchOperation, loadOptions.searchValue] : null }).done(function (data) {
                        def.resolve(data);
                    });
                });
                return def;
            },
            openDashboard: function (e) {
                var toolboxExtension = _this.dashboardControl.findExtension('toolbox');
                if (toolboxExtension) {
                    toolboxExtension.menuVisible(false);
                }
                var openDashboardCallback = function () { return _this.loadDashboard(e.itemData.id); };
                var saveExtension = _this.dashboardControl.findExtension('save-dashboard');
                if (saveExtension) {
                    saveExtension.ensureDashboardSaved(openDashboardCallback);
                }
                else {
                    openDashboardCallback();
                }
            }
        };
    }
    OpenDashboardExtension.prototype.start = function () {
        var toolboxExtension = this.dashboardControl.findExtension('toolbox');
        if (toolboxExtension) {
            toolboxExtension.menuItems.push(this._menuItem);
        }
    };
    OpenDashboardExtension.prototype.stop = function () {
        var toolboxExtension = this.dashboardControl.findExtension('toolbox');
        if (toolboxExtension) {
            toolboxExtension.menuItems.remove(this._menuItem);
        }
    };
    OpenDashboardExtension.prototype.loadDashboard = function (dashboardId) {
        return this.dashboardControl.loadDashboard(dashboardId);
    };
    return OpenDashboardExtension;
}());
exports.OpenDashboardExtension = OpenDashboardExtension;
control_options_1.designerExtensions[name] = function (dashboardControl, options) { return new OpenDashboardExtension(dashboardControl); };


/***/ }),
/* 790 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var control_options_1 = __webpack_require__(19);
var _options_manager_1 = __webpack_require__(78);
var _dashboard_item_menu_1 = __webpack_require__(117);
var name = 'item-options-panel';
var OptionsPanelExtension = (function () {
    function OptionsPanelExtension(dashboardControl, options) {
        if (options === void 0) { options = {}; }
        this.dashboardControl = dashboardControl;
        this.name = name;
        this._subscriptions = [];
        this._perMenuSubscriptions = [];
        this._customizeTabsHandlers = [];
        this._optionManager = new _options_manager_1.OptionsManager();
        this._optionManager.initialize({}, options, this);
    }
    OptionsPanelExtension.prototype._contextMenuSubscriber = function (itemContextMenu) {
        if (!!itemContextMenu) {
            var item = this.dashboardControl._dashboardSurface().selectedDashboardItem();
            this._updateContextMenu(itemContextMenu, item, this.dashboardControl.dashboard(), this.dashboardControl._dataSourceBrowser);
        }
    };
    OptionsPanelExtension.prototype.start = function () {
        var contextMenuExtension = this.dashboardControl.findExtension('item-menu');
        if (contextMenuExtension) {
            this._subscriptions.push(contextMenuExtension._itemContextMenu.subscribe(this._contextMenuSubscriber, this));
            this._contextMenuSubscriber(contextMenuExtension._itemContextMenu());
        }
    };
    OptionsPanelExtension.prototype.stop = function () {
        this._perMenuSubscriptions.forEach(function (s) { return s.dispose(); });
        this._perMenuSubscriptions = [];
        this._subscriptions.forEach(function (s) { return s.dispose(); });
        this._subscriptions = [];
    };
    OptionsPanelExtension.prototype._updateContextMenu = function (menu, item, dashboard, dataSourceBrowser) {
        var _this = this;
        var composer;
        if (menu.selectedItemSurface) {
            composer = menu.selectedItemSurface.getPropertiesComposer();
            menu.selectedItemSurface.customizeDashboardItemTabs = function (args) {
                _this._optionManager.events.raise('customizeSections', args);
            };
        }
        menu.contextMenuItems.push({
            menuItemId: this.name,
            icon: 'dx-dashboard-properties',
            title: 'DashboardWebStringId.Options',
            panelWidth: _dashboard_item_menu_1.DashboardItemMenuSizes.OptionsPanelWidth,
            templateName: 'dx-dashboard-options',
            detailVisible: ko.observable(false),
            showMenu: function () {
                var args = { dataSourceBrowser: dataSourceBrowser, dashboard: dashboard, propertiesController: menu.propertiesController };
                var tabs = composer.composeTabs(item, args);
                _this._customizeTabsHandlers.forEach(function (handler) { return handler(tabs, item); });
                menu.propertiesController.mainModel({
                    data: {
                        model: item,
                        propertiesTabs: ko.observableArray(tabs),
                    }
                });
            },
            customData: {
                propertiesController: menu.propertiesController,
            },
            index: 300
        });
    };
    OptionsPanelExtension.prototype._subscribeTabsChanged = function (handler) {
        var _this = this;
        if (this._customizeTabsHandlers.indexOf(handler) === -1) {
            this._customizeTabsHandlers.push(handler);
        }
        return {
            dispose: function () {
                _this._customizeTabsHandlers.splice(_this._customizeTabsHandlers.indexOf(handler), 1);
            }
        };
    };
    return OptionsPanelExtension;
}());
exports.OptionsPanelExtension = OptionsPanelExtension;
control_options_1.designerExtensions[name] = function (dashboardControl, options) { return new OptionsPanelExtension(dashboardControl, options); };


/***/ }),
/* 791 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var control_options_1 = __webpack_require__(19);
var _interfaces_1 = __webpack_require__(76);
var _default_1 = __webpack_require__(6);
var _confirm_dialog_1 = __webpack_require__(225);
var toolbox_items_1 = __webpack_require__(56);
var name = 'save-dashboard';
var SaveDashboardExtension = (function () {
    function SaveDashboardExtension(dashboardControl) {
        var _this = this;
        this.dashboardControl = dashboardControl;
        this.name = 'save-dashboard';
        this._confirmDialogViewModel = new _confirm_dialog_1.ConfirmDialogViewModel();
        this.canSaveDashboard = ko.computed(function () { return !!_this.dashboardControl.dashboard(); });
        this._isDashboardDirty = ko.computed(function () { return _this._undoEngineExtension && _this._undoEngineExtension.isChanged(); });
        this._customTemplate = {
            name: 'dx-dashboard-confirm-dialog',
            data: this._confirmDialogViewModel
        };
        this.designerToViewerAction = {
            orderNo: 20,
            action: function (options) {
                var def = $.Deferred();
                _this.ensureDashboardSaved(function () {
                    if (_this._isDashboardDirty()) {
                        var container = _this.dashboardControl.dashboardContainer();
                        _this.dashboardControl.loadDashboard(container.id).done(function () {
                            def.resolve(options);
                        });
                    }
                    def.resolve(options);
                });
                return def.promise();
            }
        };
        this._menuItem = new toolbox_items_1.DashboardMenuItem('save', 'DashboardWebStringId.DashboardMenuSave', 110, _interfaces_1.KeyCodes.S, function () { _this._toolboxExtension.closeMenu(); _this.saveDashboard(); });
        this._menuItem.hasSeparator = true;
        this._menuItem.disabled = ko.computed(function () { return !_this.canSaveDashboard() || !_this._isDashboardDirty(); });
    }
    SaveDashboardExtension.prototype.start = function () {
        this.dashboardControl.customTemplates.push(this._customTemplate);
        this._toolboxExtension.menuItems.push(this._menuItem);
    };
    SaveDashboardExtension.prototype.stop = function () {
        this._toolboxExtension.menuItems.remove(this._menuItem);
        this.dashboardControl.customTemplates.remove(this._customTemplate);
    };
    Object.defineProperty(SaveDashboardExtension.prototype, "_toolboxExtension", {
        get: function () {
            var extension = this.dashboardControl.findExtension('toolbox');
            if (!extension) {
                throw Error('Open Dashboard Extension requeries Toolbox Extension');
            }
            return extension;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SaveDashboardExtension.prototype, "_undoEngineExtension", {
        get: function () {
            return this.dashboardControl.findExtension('undo-redo');
        },
        enumerable: true,
        configurable: true
    });
    SaveDashboardExtension.prototype.performSaveDashboard = function (dashboardId, dashboardJson) {
        var _this = this;
        this.dashboardControl.notificationController.showState(_default_1.getLocalizationById('DashboardWebStringId.Notification.DashboardSaving'));
        return this.dashboardControl.remoteService.postToServer(this.dashboardControl._endpointCollection.dashboardUrls.DashboardAction + '/' + dashboardId, dashboardJson)
            .done(function (result) {
            _this.dashboardControl.notificationController.showSuccess(_default_1.getLocalizationById('DashboardWebStringId.Notification.DashboardSaved'));
        }).fail(function (jqXHR) {
            _this.dashboardControl.notificationController.showError(_default_1.getLocalizationById('DashboardWebStringId.Notification.DashboardCanNotBeSaved'), jqXHR);
        });
    };
    SaveDashboardExtension.prototype.ensureDashboardSaved = function (action) {
        var _this = this;
        if (this._isDashboardDirty()) {
            this._confirmDialogViewModel
                .confirm(_default_1.getLocalizationById('DashboardWebStringId.Dialog.ConfirmSaving'), _default_1.getLocalizationById('DashboardWebStringId.SaveConfirmationDialogMessage') + '<br/>' + _default_1.getLocalizationById('DashboardWebStringId.SaveChangesDialogMessage'), _default_1.getLocalizationById('DashboardWebStringId.Dialog.Save'), _default_1.getLocalizationById('DashboardWebStringId.Dialog.DoNotSave'))
                .done(function (result) {
                if (result) {
                    _this.saveDashboard().done(function (_) { action(); });
                }
                else {
                    action();
                }
            });
        }
        else {
            action();
        }
    };
    SaveDashboardExtension.prototype.saveDashboard = function () {
        var _this = this;
        if (this.canSaveDashboard()) {
            var dashboardContainer = this.dashboardControl.dashboardContainer();
            return this.performSaveDashboard(dashboardContainer.id, dashboardContainer.dashboard.getJSON())
                .done(function () { return _this._undoEngineExtension && _this._undoEngineExtension.isChanged(false); });
        }
        else {
            throw Error(_default_1.getLocalizationById('DashboardWebStringId.Notification.DashboardSavingIsNotAvailable'));
        }
    };
    return SaveDashboardExtension;
}());
exports.SaveDashboardExtension = SaveDashboardExtension;
control_options_1.designerExtensions[name] = function (dashboardControl, options) { return new SaveDashboardExtension(dashboardControl); };


/***/ }),
/* 792 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var control_options_1 = __webpack_require__(19);
var _dashboard_title_model_1 = __webpack_require__(156);
var disposable_object_1 = __webpack_require__(11);
var _base_metadata_1 = __webpack_require__(4);
var _title_1 = __webpack_require__(205);
var _dashboard_title_view_constants_1 = __webpack_require__(91);
var _form_adapter_editors_1 = __webpack_require__(22);
var _object_properties_wrapper_1 = __webpack_require__(10);
var toolbox_items_1 = __webpack_require__(56);
var name = 'dashboard-title-editor';
var DashboardTitleEditorExtension = (function (_super) {
    __extends(DashboardTitleEditorExtension, _super);
    function DashboardTitleEditorExtension(dashboardControl) {
        var _this = _super.call(this) || this;
        _this.dashboardControl = dashboardControl;
        _this.name = name;
        _this._titlePreviewViewModel = ko.observable(null);
        _this._titleSettingsViewModel = ko.observable(null);
        _this._menuItem = new toolbox_items_1.DashboardMenuItem(_this.name, 'DashboardStringId.Title', 220, 84);
        _this._menuItem.template = 'dx-dashboard-form-title-settings';
        _this._menuItem.data = {
            titleSettings: _this._titleSettingsViewModel,
            preview: _this._titlePreviewViewModel,
            headerHeight: ko.observable(_dashboard_title_view_constants_1.titleHeight)
        };
        _this._menuItem.disabled = ko.computed(function () { return !dashboardControl.dashboard(); });
        return _this;
    }
    DashboardTitleEditorExtension.prototype.start = function () {
        var _this = this;
        this._updateTitleToolbar();
        this.toDispose(this.dashboardControl.dashboard.subscribe(function () { return _this._updateTitleToolbar(); }));
        var toolbarExtension = this.dashboardControl.findExtension('toolbox');
        if (toolbarExtension) {
            toolbarExtension.menuItems.push(this._menuItem);
        }
    };
    DashboardTitleEditorExtension.prototype.stop = function () {
        var toolbarExtension = this.dashboardControl.findExtension('toolbox');
        if (toolbarExtension) {
            toolbarExtension.menuItems.remove(this._menuItem);
        }
    };
    DashboardTitleEditorExtension.prototype._updateTitleToolbar = function () {
        var _this = this;
        if (this.dashboardControl.dashboard()) {
            var titleModel = new _dashboard_title_model_1.DashboardTitleModel(undefined, this.dashboardControl.dashboard());
            this._titlePreviewViewModel(titleModel.toolbarOptions());
            this._titleSettingsViewModel(this._createTitleSettings(this.dashboardControl.dashboard().title));
            this.toDispose(titleModel.toolbarOptions.subscribe(function (newOptions) {
                _this._titlePreviewViewModel(newOptions);
            }));
        }
        else {
            this._titlePreviewViewModel(null);
            this._titleSettingsViewModel(null);
        }
    };
    DashboardTitleEditorExtension.prototype._createTitleSettings = function (titleModel) {
        var visibilityRules = {};
        visibilityRules[_title_1.titleImage64.propertyName] = function () { return titleModel.imageType() === 'embedded'; };
        visibilityRules[_base_metadata_1.url.propertyName] = function () { return titleModel.imageType() === 'linked'; };
        return new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: titleModel,
            properties: [
                _title_1.titleText,
                _title_1.titleVisible,
                _title_1.titleAlignment,
                _title_1.includeMasterFilter,
                _title_1.titleImageType,
                __assign({}, _title_1.titleImage64, { formAdapterItem: _form_adapter_editors_1.filePickerEditor({ placeholderId: 'Image', accept: 'image/bmp, image/gif, image/x-ico, image/jpeg, image/png, image/tiff', type: 'img' }) }),
                _title_1.titleImageUrl
            ],
            visibilityFilterRules: visibilityRules,
        });
    };
    return DashboardTitleEditorExtension;
}(disposable_object_1.DisposableObject));
exports.DashboardTitleEditorExtension = DashboardTitleEditorExtension;
control_options_1.designerExtensions[name] = function (dashboardControl, options) { return new DashboardTitleEditorExtension(dashboardControl); };


/***/ }),
/* 793 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dx_analytics_core_1 = __webpack_require__(1);
var ko = __webpack_require__(0);
var control_options_1 = __webpack_require__(19);
var _interfaces_1 = __webpack_require__(76);
var _default_1 = __webpack_require__(6);
var disposable_object_1 = __webpack_require__(11);
var _obsolete_helper_1 = __webpack_require__(46);
var _undo_engine_helper_1 = __webpack_require__(27);
var toolbox_items_1 = __webpack_require__(56);
var name = 'undo-redo';
var UndoRedoExtension = (function (_super) {
    __extends(UndoRedoExtension, _super);
    function UndoRedoExtension(dashboardControl) {
        var _this = _super.call(this) || this;
        _this.dashboardControl = dashboardControl;
        _this.name = name;
        _this._undoEngine = ko.observable();
        _this.isChanged = ko.computed({
            read: function () { return !!(_this._undoEngine() && _this._undoEngine().isDirty()); },
            write: function (value) { return _this._undoEngine() && _this._undoEngine().isDirty(value); }
        });
        _obsolete_helper_1.defineObsoleteProperty({
            target: _this,
            memberName: 'undoEngine',
            oldMemberDisplayName: 'UndoRedoExtension.undoEngine',
            warmMessage: 'The undoEngine property is obsolete.',
            action: function () {
                return _this._undoEngine;
            }
        });
        return _this;
    }
    UndoRedoExtension.prototype.reset = function () {
        if (this._undoEngine()) {
            this._undoEngine().reset();
        }
    };
    UndoRedoExtension.prototype.processKeyEvent = function (keyEventType, eventArgs) {
        if (keyEventType === 'keyup' && eventArgs.ctrlKey) {
            if (eventArgs.keyCode === _interfaces_1.KeyCodes.Z && this._undoEngine().undoEnabled()) {
                this._undoEngine().undo();
                return true;
            }
            else if (eventArgs.keyCode === _interfaces_1.KeyCodes.Y && this._undoEngine().redoEnabled()) {
                this._undoEngine().redo();
                return true;
            }
        }
        else if (keyEventType === 'keydown' && eventArgs.ctrlKey && [_interfaces_1.KeyCodes.Z, _interfaces_1.KeyCodes.Y].indexOf(eventArgs.keyCode) !== -1) {
            eventArgs.preventDefault();
            return true;
        }
        return false;
    };
    UndoRedoExtension.prototype.start = function () {
        var _this = this;
        this.toDispose(this.dashboardControl.dashboard.subscribe(function (prevDashboard) {
            _this.reset();
        }, null, 'beforeChange'));
        this.toDispose(this.dashboardControl.dashboard.subscribe(function (newDashboard) {
            var undoEngine = new DashboardUndoEngine(newDashboard, null, 'getInfo');
            _undo_engine_helper_1.UndoEngineContainer.undoEngine = undoEngine;
            _this._undoEngine(undoEngine);
        }));
        if (this.dashboardControl.showConfirmationOnBrowserClosing) {
            window.onbeforeunload = function (e) {
                if (_this.dashboardControl.isDesignMode() && _this.isChanged()) {
                    return _default_1.getLocalizationById('DashboardWebStringId.LayoutHasBeenChangedDialogMessage') + ' ' + _default_1.getLocalizationById('DashboardWebStringId.SaveConfirmationDialogMessage');
                }
            };
        }
        var toolboxExtension = this.dashboardControl.findExtension('toolbox');
        if (!!toolboxExtension) {
            var undoItem = new toolbox_items_1.DashboardToolbarItem('undo', function () { return _this.undo(); }, 'dx-dashboard-undo', 'DashboardStringId.UndoText');
            undoItem.disabled = ko.pureComputed(function () { return !_this.undoEnabled(); });
            var redoItem = new toolbox_items_1.DashboardToolbarItem('redo', function () { return _this.redo(); }, 'dx-dashboard-redo', 'DashboardStringId.RedoText');
            redoItem.disabled = ko.pureComputed(function () { return !_this.redoEnabled(); });
            var toolbarGroup = new toolbox_items_1.DashboardToolbarGroup('undo-redo', 'Undo/Redo', 50, undoItem, redoItem);
            toolboxExtension.toolbarGroups.push(toolbarGroup);
        }
    };
    UndoRedoExtension.prototype.undo = function () {
        this._undoEngine() && this._undoEngine().undo();
    };
    UndoRedoExtension.prototype.redo = function () {
        this._undoEngine() && this._undoEngine().redo();
    };
    UndoRedoExtension.prototype.undoEnabled = function () {
        return !!(this._undoEngine() && this._undoEngine().undoEnabled());
    };
    UndoRedoExtension.prototype.redoEnabled = function () {
        return !!(this._undoEngine() && this._undoEngine().redoEnabled());
    };
    UndoRedoExtension.prototype.stop = function () {
        this.reset();
        if (this.dashboardControl.showConfirmationOnBrowserClosing) {
            window.onbeforeunload = null;
        }
    };
    return UndoRedoExtension;
}(disposable_object_1.DisposableObject));
exports.UndoRedoExtension = UndoRedoExtension;
var DashboardUndoEngine = (function (_super) {
    __extends(DashboardUndoEngine, _super);
    function DashboardUndoEngine(target, ignoredProperties, getInfoMethodName) {
        return _super.call(this, target, ignoredProperties, getInfoMethodName) || this;
    }
    DashboardUndoEngine.prototype.validatePropertyName = function (target, propertyName) {
        return propertyName;
    };
    return DashboardUndoEngine;
}(dx_analytics_core_1.default.Analytics.Utils.UndoEngine));
control_options_1.designerExtensions[name] = function (dashboardControl, options) { return new UndoRedoExtension(dashboardControl); };


/***/ }),
/* 794 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var control_options_1 = __webpack_require__(19);
var toolbox_items_1 = __webpack_require__(56);
var _parameter_list_editor_viewmodel_1 = __webpack_require__(673);
var name = 'dashboard-parameter-editor';
var DashboardParameterEditorExtension = (function () {
    function DashboardParameterEditorExtension(dashboardControl) {
        this.dashboardControl = dashboardControl;
        this.name = name;
        this.dashboard = ko.computed(function () { return dashboardControl.dashboard(); });
        this._viewModel = new _parameter_list_editor_viewmodel_1.ParameterListEditorViewModel(this.dashboard, function () { return dashboardControl._dataSourceBrowser; });
        this._menuItem = new toolbox_items_1.DashboardMenuItem(this.name, 'DashboardWebStringId.DashboardParameters', 240, 80);
        this._menuItem.template = 'dx-dashboard-form-parameters-settings';
        this._menuItem.data = this._viewModel;
        this._menuItem.disabled = ko.computed(function () { return !dashboardControl.dashboard(); });
    }
    DashboardParameterEditorExtension.prototype.start = function () {
        this._viewModel.initialize();
        var toolboxExtension = this.dashboardControl.findExtension('toolbox');
        if (toolboxExtension) {
            toolboxExtension.menuItems.push(this._menuItem);
        }
    };
    DashboardParameterEditorExtension.prototype.stop = function () {
        var toolboxExtension = this.dashboardControl.findExtension('toolbox');
        if (toolboxExtension) {
            toolboxExtension.menuItems.remove(this._menuItem);
        }
        this._viewModel.dispose();
    };
    return DashboardParameterEditorExtension;
}());
exports.DashboardParameterEditorExtension = DashboardParameterEditorExtension;
control_options_1.designerExtensions[name] = function (dashboardControl, options) { return new DashboardParameterEditorExtension(dashboardControl); };


/***/ }),
/* 795 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(2);
var ko = __webpack_require__(0);
var control_options_1 = __webpack_require__(19);
var model_1 = __webpack_require__(38);
var disposable_object_1 = __webpack_require__(11);
var _dashboard_item_helper_1 = __webpack_require__(102);
var _obsolete_helper_1 = __webpack_require__(46);
var serializable_model_1 = __webpack_require__(5);
var toolbox_items_1 = __webpack_require__(56);
var _toolbox_view_model_1 = __webpack_require__(674);
var name = 'toolbox';
var ToolboxExtension = (function (_super) {
    __extends(ToolboxExtension, _super);
    function ToolboxExtension(dashboardControl) {
        var _this = _super.call(this) || this;
        _this.dashboardControl = dashboardControl;
        _this.name = name;
        _this.menuItems = ko.observableArray();
        _this.addMenuItem = function (menuItem) {
            if (!!_this._findMenuItem(menuItem.id)) {
                throw Error("The '" + menuItem.id + "' menu item already exists.");
            }
            _this.menuItems.push(menuItem);
        };
        _this.removeMenuItem = function (menuItemId) {
            var menuItem = _this._findMenuItem(menuItemId);
            _this.menuItems.remove(menuItem);
        };
        _this.selectMenuItem = function (menuItem) {
            if (!!menuItem) {
                _this._viewModel.menuVisible(true);
                _this._viewModel.menuItemClick(menuItem);
            }
        };
        _this.toolboxGroups = ko.observableArray();
        _this.addToolboxItem = function (groupName, toolboxItem) {
            var group = _this._findToolboxGroup(groupName);
            if (!!group) {
                group.items.push(toolboxItem);
            }
            else {
                throw Error("The '" + groupName + "' group does not exist.");
            }
        };
        _this.removeToolboxItem = function (groupName, toolboxItemName) {
            var group = _this._findToolboxGroup(groupName);
            if (group) {
                _this._unregisterToolboxItem(group, toolboxItemName);
            }
            else {
                throw Error("The '" + groupName + "' group does not exist.");
            }
        };
        _this.toolbarGroups = ko.observableArray();
        _this.addToolbarItem = function (groupName, toolbarItem) {
            var group = _this.toolbarGroups().filter(function (group) { return group.name === groupName; })[0];
            if (!!group) {
                group.items.push(toolbarItem);
            }
            else {
                throw Error("The '" + groupName + "' group does not exist.");
            }
        };
        _this.removeToolbarItem = function (groupName, toolbarItemName) {
            var group = _this.toolbarGroups().filter(function (group) { return group.name === groupName; })[0];
            if (!!group) {
                var toolbarItem = group.items().filter(function (item) { return item.name === toolbarItemName; })[0];
                group.items.remove(toolbarItem);
            }
            else {
                throw Error("The '" + groupName + "' group does not exist.");
            }
        };
        _this.showPanelAsync = function (options) {
            var def = $.Deferred();
            _this._viewModel.showDesignerPanel();
            setTimeout(function () {
                options.surfaceLeft = _this._viewModel.leftPanelWidth;
                def.resolve(options);
            }, 500);
            return def.promise();
        };
        _this.hidePanelAsync = function (options) {
            var def = $.Deferred();
            _this._viewModel.hideDesignerPanel();
            setTimeout(function () {
                options.surfaceLeft = 0;
                def.resolve(options);
            }, 500);
            return def.promise();
        };
        _this._layoutItemPlaceholderService = function (layoutItem) {
            var currentDashboardItem = layoutItem._parent().viewModel.model;
            return {
                data: {
                    dashboardItems: ko.computed(function () {
                        var placeholderItems = [];
                        _this._viewModel.toolboxGroupsSorted().forEach(function (group) {
                            group
                                .items()
                                .filter(function (toolboxItem) { return model_1.DashboardLayoutNode._canAttach(currentDashboardItem, { '@ItemType': toolboxItem.type }); })
                                .forEach(function (toolboxItem) {
                                placeholderItems.push({
                                    type: toolboxItem.type,
                                    name: toolboxItem.name,
                                    iconName: toolboxItem.icon,
                                    title: toolboxItem.title
                                });
                            });
                        });
                        return placeholderItems;
                    }),
                    addDashboardItem: function (data) {
                        layoutItem.create(_dashboard_item_helper_1.getItemJson(data.type), 'left');
                    }
                },
                templateName: 'dx-toolbox-extension-layout-item-placeholder'
            };
        };
        _this.designerToViewerAction = {
            orderNo: 40,
            action: _this.hidePanelAsync
        };
        _this.viewerToDesignerAction = {
            orderNo: 40,
            action: _this.showPanelAsync
        };
        _this._createDefaultGroups();
        _this._viewModel = new _toolbox_view_model_1.ToolboxViewModel(dashboardControl.isDesignMode(), _this.dashboardControl, _this.menuItems, _this.toolboxGroups, _this.toolbarGroups);
        _this.template = {
            data: _this._viewModel,
            name: 'dx-dashboard-toolbox-extension'
        };
        if (dashboardControl.isDesignMode()) {
            dashboardControl.surfaceLeft(_this._viewModel.leftPanelWidth);
        }
        dashboardControl.subscribeExtensionsChanged({
            added: function (extension) {
                if (extension.name === 'dashboard-panel') {
                    _this._switchToViewerToolbar = new toolbox_items_1.DashboardToolbarGroup('viewer-button', '', 100);
                    var toViewerItem = new toolbox_items_1.DashboardToolbarItem('toviewer', function () { return dashboardControl.switchToViewer(); });
                    toViewerItem.template = 'dx-dashboard-working-mode-extension-viewer-button';
                    toViewerItem.disabled = ko.pureComputed(function () { return !!_this.dashboardControl.dashboard(); });
                    _this._switchToViewerToolbar.items.push(toViewerItem);
                    _this.toolbarGroups.push(_this._switchToViewerToolbar);
                }
            },
            deleted: function (extension) {
                if (extension.name === 'dashboard-panel') {
                    _this.toolbarGroups.remove(_this._switchToViewerToolbar);
                }
            }
        });
        _obsolete_helper_1.defineObsoleteProperty({
            target: _this,
            memberName: 'settingsForm',
            oldMemberDisplayName: 'DevExpress.Dashboard.Designer.ToolboxExtension.settingsForm',
            newMemberDisplayName: 'DevExpress.Dasbhoard.Designer.DashboardMenuItem.template',
            action: function () { return _this._viewModel.settingsForm; }
        });
        _obsolete_helper_1.defineObsoleteProperty({
            target: _this,
            memberName: 'settingsFormVisible',
            oldMemberDisplayName: 'DevExpress.Dashboard.Designer.ToolboxExtension.settingsFormVisible',
            newMemberDisplayName: 'DevExpress.Dasbhoard.Designer.DashboardMenuItem.template',
            action: function () { return _this._viewModel.settingsFormVisible; }
        });
        _obsolete_helper_1.defineObsoleteProperty({
            target: _this,
            memberName: 'toggleMenu',
            oldMemberDisplayName: 'DevExpress.Dashboard.Designer.ToolboxExtension.toggleMenu',
            newMemberDisplayName: 'DevExpress.Dasbhoard.Designer.ToolboxExtension.openMenu/closeMenu',
            action: function () { return _this._viewModel.toggleMenu; }
        });
        _obsolete_helper_1.defineObsoleteMethod({
            target: _this,
            memberName: 'menuItemClick',
            oldMemberDisplayName: 'DevExpress.Dashboard.Designer.ToolboxExtension.menuItemClick',
            newMemberDisplayName: 'DevExpress.Dasbhoard.Designer.ToolboxExtension.selectMenuItem',
            action: function (menuItem) { return _this._viewModel.menuItemClick(menuItem); }
        });
        return _this;
    }
    Object.defineProperty(ToolboxExtension.prototype, "menuVisible", {
        get: function () { return this._viewModel.menuVisible; },
        enumerable: true,
        configurable: true
    });
    ToolboxExtension.prototype.openMenu = function () {
        this._viewModel.showMenu();
    };
    ToolboxExtension.prototype.closeMenu = function () {
        this._viewModel.closeMenu();
    };
    ToolboxExtension.prototype.processKeyEvent = function (keyEventType, eventArgs) {
        return this._viewModel.processKeyEvent(keyEventType, eventArgs);
    };
    ToolboxExtension.prototype.start = function () {
        var _this = this;
        var standardItems = Object.keys(serializable_model_1.itemTypesMap).filter(function (key) { return !serializable_model_1.itemTypesMap[key].customItemType; });
        var itemTypeNames = standardItems.sort(function (t1, t2) { return serializable_model_1.itemTypesMap[t1].index - serializable_model_1.itemTypesMap[t2].index; });
        itemTypeNames.forEach(function (itemTypeName) { return _this._registerToolboxItem(itemTypeName, serializable_model_1.itemTypesMap[itemTypeName]); });
        this.dashboardControl.extensions.forEach(function (extension) { return _this._registerCustomItemToolbox(extension); });
        this.toDispose(this.dashboardControl.subscribeExtensionsChanged({
            added: function (extension) {
                _this._registerCustomItemToolbox(extension);
            },
            deleted: function (extension) {
                _this.toolboxGroups().forEach(function (group) { return _this._unregisterToolboxItem(group, extension.name); });
            }
        }));
        ko.computed(function () {
            var surface = _this.dashboardControl._dashboardSurface();
            if (surface) {
                surface.layoutItemPlaceholderService = _this._layoutItemPlaceholderService;
            }
        });
    };
    ToolboxExtension.prototype.stop = function () {
    };
    ToolboxExtension.prototype._registerCustomItemToolbox = function (extension) {
        var customItemExtension = extension;
        if (customItemExtension.metaData) {
            this._registerToolboxItem(customItemExtension.name, customItemExtension.metaData);
        }
    };
    ToolboxExtension.prototype._createDefaultGroups = function () {
        this.toolboxGroups.push(new toolbox_items_1.DashboardToolboxGroup('common', 'DashboardWebStringId.AccordionTab.Common', 100));
        this.toolboxGroups.push(new toolbox_items_1.DashboardToolboxGroup('maps', 'DashboardStringId.DescriptionMaps', 110));
        this.toolboxGroups.push(new toolbox_items_1.DashboardToolboxGroup('filter', 'DashboardWebStringId.DataSources.Filter', 120));
        this.toolboxGroups.push(new toolbox_items_1.DashboardToolboxGroup('layout', 'DashboardWebStringId.AccordionTab.Layout', 130));
    };
    ToolboxExtension.prototype._registerToolboxItem = function (itemTypeName, itemDescription) {
        var _this = this;
        var group = this._findToolboxGroup(itemDescription.groupName) || this._findToolboxGroup('custom');
        if (!group) {
            group = new toolbox_items_1.DashboardToolboxGroup('custom', 'DashboardStringId.CustomItems', 130);
            this.toolboxGroups.push(group);
        }
        var itemClickHandlerCreator = function (type) { return function () { return _this.dashboardControl._dashboardSurface() && _this.dashboardControl._dashboardSurface().addDashboardItem({ type: type }); }; };
        var item = new toolbox_items_1.DashboardToolboxItem(itemTypeName, itemClickHandlerCreator(itemTypeName), _dashboard_item_helper_1.getIconName(itemTypeName, itemDescription.icon), itemDescription.title, itemTypeName);
        item.disabled = ko.computed(function () { return !_this.dashboardControl.dashboard(); });
        group.items.push(item);
        return itemClickHandlerCreator;
    };
    ToolboxExtension.prototype._unregisterToolboxItem = function (group, toolboxItemName) {
        var toolboxItem = group.items().filter(function (item) { return item.name === toolboxItemName; })[0];
        if (!!toolboxItem) {
            group.items.remove(toolboxItem);
        }
    };
    ToolboxExtension.prototype._findToolboxGroup = function (groupName) {
        return this.toolboxGroups().filter(function (gr) { return gr.name === groupName; })[0];
    };
    ToolboxExtension.prototype._findMenuItem = function (menuItemId) {
        return this.menuItems().filter(function (mi) { return mi.id === menuItemId; })[0];
    };
    return ToolboxExtension;
}(disposable_object_1.DisposableObject));
exports.ToolboxExtension = ToolboxExtension;
control_options_1.designerExtensions[name] = function (dashboardControl, options) { return new ToolboxExtension(dashboardControl); };


/***/ }),
/* 796 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(797));


/***/ }),
/* 797 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var button_1 = __webpack_require__(169);
var ko = __webpack_require__(0);
var index_internal_1 = __webpack_require__(335);
var index_internal_2 = __webpack_require__(37);
var model_1 = __webpack_require__(38);
var disposable_object_1 = __webpack_require__(11);
var index_internal_3 = __webpack_require__(58);
var _text_box_item_1 = __webpack_require__(203);
var _object_properties_wrapper_1 = __webpack_require__(10);
var _textbox_item_surface_1 = __webpack_require__(670);
var _accordion_tab_1 = __webpack_require__(7);
var _display_name_provider_1 = __webpack_require__(24);
__webpack_require__(798);
var _text_box_item_editor_view_model_1 = __webpack_require__(800);
var name = 'text-box-item-editor';
var TextBoxItemEditorExtension = (function (_super) {
    __extends(TextBoxItemEditorExtension, _super);
    function TextBoxItemEditorExtension(dashboardControl) {
        var _this = _super.call(this) || this;
        _this.name = name;
        _this._dashboardControl = dashboardControl;
        _this._viewModel = new _text_box_item_editor_view_model_1.RichEditExtensionViewModel();
        _this._customTemplate = {
            name: 'dx-dashboard-text-box-item-editor-extension',
            data: _this._viewModel
        };
        return _this;
    }
    TextBoxItemEditorExtension.prototype.start = function () {
        var _this = this;
        this._dashboardControl.customTemplates.push(this._customTemplate);
        var contextMenuExtension = this._dashboardControl.findExtension('item-menu');
        var propertiesPanelExtension = this._dashboardControl.findExtension('item-options-panel');
        if (contextMenuExtension && propertiesPanelExtension) {
            this.toDispose(index_internal_3.subscribeAndPerform(contextMenuExtension._itemContextMenu, function (menu) {
                if (menu) {
                    var customData = menu.contextMenuItems()[0].customData;
                    if (customData instanceof _textbox_item_surface_1.TextBoxItemSurface) {
                        customData.extendTabsHandler = function (tabs, model, dashboardItem) {
                            var textBoxTextProperty = __assign({}, _text_box_item_1.textBoxText);
                            _this._extendTextBoxSerializationInfo(textBoxTextProperty, dashboardItem, _this._dashboardControl._dataSourceBrowser);
                            tabs.push(new _accordion_tab_1.ContentInHeaderAccordionTab('text-box-item-rich-edit', index_internal_2.getLocalizationById('DashboardWebStringId.AccordionTab.Content'), new _object_properties_wrapper_1.ObjectPropertiesWrapper({
                                model: dashboardItem,
                                properties: [
                                    textBoxTextProperty
                                ]
                            })));
                        };
                    }
                }
            }));
            this.toDispose(propertiesPanelExtension._subscribeTabsChanged(function (tabs, item) {
                var dataSourceBrowser = _this._dashboardControl._dataSourceBrowser;
                if (item && item instanceof model_1.TextBoxItem) {
                    var textBoxDashoardItem = item;
                    var tab = tabs.filter(function (tab) { return tab.name === _accordion_tab_1.KnownTabs.Common; })[0];
                    var tabModel = tab.tabModel();
                    if (tabModel) {
                        var textProperty = tabModel._serializationInfo.filter(function (info) { return info.propertyName === 'text'; })[0];
                        if (textProperty) {
                            _this._extendTextBoxSerializationInfo(textProperty, textBoxDashoardItem, dataSourceBrowser);
                        }
                    }
                }
            }));
        }
    };
    TextBoxItemEditorExtension.prototype._extendTextBoxSerializationInfo = function (textProperty, textBoxDashoardItem, dataSourceBrowser) {
        var _this = this;
        textProperty.displayName = index_internal_2.getLocalizationById('DashboardWebStringId.AccordionTab.Content');
        textProperty.formAdapterItem = {
            template: function (args) {
                var div = document.createElement('div');
                new button_1.default(div, {
                    text: index_internal_2.getLocalizationById('DashboardWebStringId.TextBoxItemEditor.EditTextButton'),
                    width: '100%',
                    onClick: function () {
                        var docVariables = textBoxDashoardItem.dataItems().map(function (dataItem) {
                            return {
                                id: dataItem.uniqueName(),
                                displayName: _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, textBoxDashoardItem, dataItem)
                            };
                        });
                        _this._viewModel.show({
                            getValue: function () { return ko.unwrap(args.component.option('formData')[args.dataField]); },
                            setValue: function (v) { return args.component.updateData(args.dataField, v); }
                        }, docVariables, _this._getDashboardItemWidth());
                    }
                });
                return div;
            }
        };
    };
    TextBoxItemEditorExtension.prototype._getDashboardItemWidth = function () {
        var dashboardSurface = this._dashboardControl._dashboardSurface();
        if (dashboardSurface && dashboardSurface._selectedLayoutItem()) {
            return dashboardSurface._selectedLayoutItem().width() - index_internal_1.SplitterSize;
        }
        return null;
    };
    TextBoxItemEditorExtension.prototype.stop = function () {
        this._dashboardControl.customTemplates.remove(this._customTemplate);
        this.dispose();
    };
    return TextBoxItemEditorExtension;
}(disposable_object_1.DisposableObject));
exports.TextBoxItemEditorExtension = TextBoxItemEditorExtension;


/***/ }),
/* 798 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var devexpress_richedit_1 = __webpack_require__(799);
var ko = __webpack_require__(0);
var index_internal_1 = __webpack_require__(37);
ko.bindingHandlers['dx-dashboard-rich-edit'] = {
    init: function (element, valueAccessor, _, __, bindingContext) {
        var options = ko.unwrap(valueAccessor());
        var richEditOptions = devexpress_richedit_1.createOptions();
        richEditOptions.width = '100%';
        richEditOptions.height = '100%';
        richEditOptions.view.viewType = devexpress_richedit_1.ViewType.Simple;
        richEditOptions.view.simpleViewSettings.paddings = { bottom: 7, left: 7, right: 7, top: 7 };
        if (options.dashboardItemWidth && options.dashboardItemWidth > 0) {
            richEditOptions.view.simpleViewSettings.fixedWidth = options.dashboardItemWidth;
        }
        richEditOptions.events.saving = function (s, e) {
            var document = atob(e.base64);
            options.onSaving(document);
            e.handled = true;
        };
        richEditOptions.events.documentLoaded = function (s, e) {
            var document = s.document;
            document.fields.updateAllFields();
            var charProps = document.getDefaultCharacterProperties();
            charProps.fontName = 'Segoe UI';
            document.setDefaultCharacterProperties(charProps);
            document.modified = false;
        };
        richEditOptions.events.calculateDocumentVariable = function (s, e) {
            var docVariable = options.docVariables.filter(function (v) { return v.id === e.variableName; })[0];
            if (docVariable) {
                e.value = docVariable.displayName;
            }
        };
        var dashboardCmdPrefix = 'insertDashboardVariable';
        var fileTab = richEditOptions.ribbon.getTab(devexpress_richedit_1.RibbonTabType.File);
        fileTab.removeItem(devexpress_richedit_1.FileTabItemId.CreateNewDocument);
        fileTab.removeItem(devexpress_richedit_1.FileTabItemId.PrintDocument);
        var insertTab = richEditOptions.ribbon.getTab(devexpress_richedit_1.RibbonTabType.Insert);
        var mailMergeTab = richEditOptions.ribbon.getTab(devexpress_richedit_1.RibbonTabType.MailMerge);
        [devexpress_richedit_1.InsertTabItemId.ShowBookmarkDialog, devexpress_richedit_1.InsertTabItemId.InsertHeader, devexpress_richedit_1.InsertTabItemId.InsertFooter,
            devexpress_richedit_1.InsertTabItemId.InsertPageCountField, devexpress_richedit_1.InsertTabItemId.InsertPageNumberField, devexpress_richedit_1.InsertTabItemId.InsertFloatingTextBox].forEach(function (id) { return insertTab.removeItem(id); });
        var dashboardFieldsMenuItems = options.docVariables.length ?
            options.docVariables.map(function (docVariable) { return new devexpress_richedit_1.RibbonSubMenuItem(dashboardCmdPrefix + docVariable.id, docVariable.displayName); })
            :
                [new devexpress_richedit_1.RibbonSubMenuItem('dummyCommand', index_internal_1.getLocalizationById('DashboardWebStringId.TextBoxItemEditor.NoFields'))];
        [devexpress_richedit_1.MailMergeTabItemId.ShowAllFieldCodes, devexpress_richedit_1.MailMergeTabItemId.ShowAllFieldResults, devexpress_richedit_1.MailMergeTabItemId.UpdateAllFields]
            .map(function (id) { return mailMergeTab.getItem(id); })
            .forEach(function (item, i) { return insertTab.insertItem(item, i); });
        insertTab.insertItem(new devexpress_richedit_1.RibbonMenuItem(dashboardCmdPrefix, index_internal_1.getLocalizationById('DashboardWebStringId.TextBoxItemEditor.InsertField'), dashboardFieldsMenuItems, {
            icon: 'dxre-icon-InsertDataField',
            showText: true
        }), 0);
        insertTab.getItem(devexpress_richedit_1.InsertTabItemId.ShowInsertTableDialog).beginGroup = true;
        richEditOptions.ribbon.removeTab(devexpress_richedit_1.RibbonTabType.PageLayout);
        richEditOptions.ribbon.removeTab(devexpress_richedit_1.RibbonTabType.References);
        richEditOptions.ribbon.removeTab(devexpress_richedit_1.RibbonTabType.View);
        richEditOptions.ribbon.removeTab(devexpress_richedit_1.RibbonTabType.MailMerge);
        richEditOptions.events.customCommandExecuted = function (richEdit, e) {
            var docVariable = options.docVariables.filter(function (v) { return (dashboardCmdPrefix + v.id) === e.commandName; })[0];
            if (docVariable) {
                var field = richEdit.document.fields.create(richEdit.selection.active, 'docvariable ' + docVariable.id);
                richEdit.document.insertText(field.resultInterval.start, docVariable.displayName);
                field.update();
            }
        };
        var richEdit = devexpress_richedit_1.create(element, richEditOptions);
        if (options.initialDocument) {
            richEdit.openDocument(btoa(unescape(encodeURIComponent(options.initialDocument))), '', devexpress_richedit_1.DocumentFormat.Rtf);
        }
        richEdit.documentSaveFormat = devexpress_richedit_1.DocumentFormat.Rtf;
        options.forceSave = function () { richEdit.saveDocument(devexpress_richedit_1.DocumentFormat.Rtf); };
        options.documentModified = function () { return richEdit.document.modified; };
        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
            richEdit.dispose();
        });
        return { controlsDescendantBindings: true };
    }
};


/***/ }),
/* 799 */
/***/ (function(module, exports) {

module.exports = DevExpress.RichEdit;

/***/ }),
/* 800 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ko = __webpack_require__(0);
var index_internal_1 = __webpack_require__(37);
var _confirm_dialog_1 = __webpack_require__(225);
var ValueAccessor = (function () {
    function ValueAccessor() {
    }
    return ValueAccessor;
}());
exports.ValueAccessor = ValueAccessor;
var RichEditExtensionViewModel = (function () {
    function RichEditExtensionViewModel() {
        var _this = this;
        this._isCloseConfirmed = false;
        this.richEditorOptions = ko.observable(null);
        this.close = function () {
            _this.popup.hide();
        };
        this.saveAndClose = function () {
            var richEditorOptions = _this.richEditorOptions();
            richEditorOptions && richEditorOptions.forceSave && richEditorOptions.forceSave();
            _this.close();
        };
        this.onHidden = function () {
            _this.richEditorOptions(null);
            _this._isCloseConfirmed = false;
        };
        this.onHiding = function (args) {
            var richEditorOptions = _this.richEditorOptions();
            var documentModified = richEditorOptions && richEditorOptions.documentModified && richEditorOptions.documentModified();
            if (documentModified && !_this._isCloseConfirmed) {
                args.cancel = true;
                _this.confirmDialogViewModel
                    .confirm(index_internal_1.getLocalizationById('DashboardWebStringId.Dialog.ConfirmSaving'), index_internal_1.getLocalizationById('DashboardWebStringId.SaveConfirmationDialogMessage') + '<br/>' + index_internal_1.getLocalizationById('DashboardWebStringId.SaveChangesDialogMessage'), index_internal_1.getLocalizationById('DashboardWebStringId.Dialog.Save'), index_internal_1.getLocalizationById('DashboardWebStringId.Dialog.DoNotSave'))
                    .done(function (result) {
                    _this._isCloseConfirmed = true;
                    if (result) {
                        _this.saveAndClose();
                    }
                    else {
                        _this.close();
                    }
                });
            }
        };
        this.onInitialized = function (args) {
            _this.popup = args.component;
        };
        this.confirmDialogViewModel = new _confirm_dialog_1.ConfirmDialogViewModel();
    }
    RichEditExtensionViewModel.prototype.show = function (options, docVariables, dashboardItemWidth) {
        var _this = this;
        if (!this.richEditorOptions()) {
            this.popup.show().then(function () {
                _this.richEditorOptions({
                    initialDocument: options.getValue(),
                    docVariables: docVariables,
                    onSaving: function (document) {
                        options.setValue(document);
                    },
                    dashboardItemWidth: dashboardItemWidth
                });
            });
        }
    };
    return RichEditExtensionViewModel;
}());
exports.RichEditExtensionViewModel = RichEditExtensionViewModel;


/***/ })
/******/ ]);