/**
* DevExpress Dashboard (dx-dashboard.d.ts)
* Version:  20.1.6
* Build date: Jul 17, 2020
* Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
declare module DevExpress.Dashboard.Internal.Data {
	export const DashboardDataIdField = "__DX_DASHBOARD_DATA_ID";
	export type ClearMasterFilterButtonState = 'Enabled' | 'Disabled' | 'Hidden';
	export let viewerActions: {
	    setMasterFilter: string;
	    setMultipleValuesMasterFilter: string;
	    clearMasterFilter: string;
	    drillDown: string;
	    drillUp: string;
	    setSelectedElementIndex: string;
	    expandValue: string;
	    dataRequest: string;
	    getDrillThroughData: string;
	};
	export type ContentType = 'Empty' | 'ViewModel' | 'ActionModel' | 'CompleteDataSource' | 'PartialDataSource' | 'FullContent';
	export let contentType: {
	    empty: ContentType;
	    viewModel: ContentType;
	    actionModel: ContentType;
	    completeDataSource: ContentType;
	    partialDataSource: ContentType;
	    fullContent: ContentType;
	};
	export let parseFlagsEnumType: (typeModel: string, defaultValue: number, dic: {
	    [key: string]: number;
	}) => number;
	export let serializeFlagsEnumType: (val: number, defaultValue: string, dic: {
	    [key: string]: number;
	}) => string;
	export let getFlagsEnumTypeValues: (val: number, dic: {
	    [key: string]: number;
	}, type: "key" | "value") => any[];

}
declare module DevExpress.Dashboard.Model {
	export type CardRowDataElementType = 'ActualValue' | 'AbsoluteVariation' | 'PercentVariation' | 'PercentOfTarget' | 'TargetValue' | 'DimensionValue' | 'CardName' | 'Title' | 'Subtitle';
	export type CardFormatRuleLayoutElement = 'ActualValue' | 'AbsoluteVariation' | 'PercentVariation' | 'PercentOfTarget' | 'TargetValue' | 'CardName' | 'Title' | 'Subtitle' | 'Indicator' | 'AllElements';
	export type CardWindowDefinitionMode = 'Cards' | 'SparklineArgument' | 'CardsAndSparklineArgument' | 'SparklineArgumentAndCards';
	export type ChartLegendInsidePosition = 'TopLeftVertical' | 'TopLeftHorizontal' | 'TopCenterHorizontal' | 'TopCenterVertical' | 'TopRightVertical' | 'TopRightHorizontal' | 'BottomLeftVertical' | 'BottomLeftHorizontal' | 'BottomCenterHorizontal' | 'BottomCenterVertical' | 'BottomRightVertical' | 'BottomRightHorizontal';
	export type ChartLegendOutsidePosition = 'TopLeftVertical' | 'TopLeftHorizontal' | 'TopCenterHorizontal' | 'TopRightVertical' | 'TopRightHorizontal' | 'BottomLeftVertical' | 'BottomLeftHorizontal' | 'BottomCenterHorizontal' | 'BottomRightVertical' | 'BottomRightHorizontal';
	export type ChartWindowDefinitionMode = 'Arguments' | 'Series' | 'ArgumentsAndSeries' | 'SeriesAndArguments';
	export type ColoringMode = 'Default' | 'None' | 'Hue';
	export type ComboBoxDashboardItemType = 'Standard' | 'Checked';
	export type ContentArrangementMode = 'Auto' | 'FixedRowCount' | 'FixedColumnCount';
	export type DateFilterType = 'Between' | 'After' | 'Before' | 'Exact';
	export type DateFilterArrangementMode = 'AutoHeight' | 'Horizontal' | 'Vertical';
	export type DatePickerLocation = 'Far' | 'Near' | 'Hidden';
	export type DashboardFormatCondition = 'Greater' | 'GreaterOrEqual' | 'Less' | 'LessOrEqual' | 'Equal' | 'NotEqual' | 'Between' | 'NotBetween' | 'BetweenOrEqual' | 'NotBetweenOrEqual' | 'ContainsText';
	export type DashboardFormatConditionAboveBelowType = 'Above' | 'AboveOrEqual' | 'Below' | 'BelowOrEqual';
	export type DashboardFormatConditionComparisonType = 'Greater' | 'GreaterOrEqual';
	export type DashboardFormatConditionTopBottomType = 'Top' | 'Bottom';
	export type DashboardFormatConditionValueType = 'Number' | 'Percent' | 'Automatic';
	export type DashboardLayoutGroupOrientation = 'Vertical' | 'Horizontal';
	export type DashboardTitleAlignment = 'Left' | 'Center';
	export type DashboardTreemapLayoutAlgorithm = 'SliceAndDice' | 'Squarified' | 'Striped';
	export type DashboardTreemapLayoutDirection = 'BottomLeftToTopRight' | 'BottomRightToTopLeft' | 'TopLeftToBottomRight' | 'TopRightToBottomLeft';
	export type DataFieldType = 'Text' | 'DateTime' | 'Bool' | 'Integer' | 'Float' | 'Double' | 'Decimal' | 'Enum' | 'Custom' | 'Unknown';
	export type DataItemNumericFormatType = 'Auto' | 'General' | 'Number' | 'Currency' | 'Scientific' | 'Percent' | 'Custom';
	export type DataItemNumericUnit = 'Auto' | 'Ones' | 'Thousands' | 'Millions' | 'Billions';
	export type DateFormat = 'Default' | 'Long' | 'Short';
	export type DateTimeFormat = 'Default' | 'Long' | 'Short' | 'TimeOnly';
	export type DateTimeGroupInterval = 'Year' | 'Quarter' | 'Month' | 'Day' | 'Hour' | 'Minute' | 'Second' | 'DayOfYear' | 'DayOfWeek' | 'WeekOfYear' | 'WeekOfMonth' | 'MonthYear' | 'QuarterYear' | 'WeekYear' | 'DayMonthYear' | 'DateHour' | 'DateHourMinute' | 'DateHourMinuteSecond' | 'None';
	export type DateTimeInterval = 'Year' | 'Quarter' | 'Month' | 'Day' | 'Hour' | 'Minute' | 'Second';
	export type DayOfWeekFormat = 'Default' | 'Full' | 'Abbreviated' | 'Numeric';
	export type DeltaIndicationMode = 'GreaterIsGood' | 'LessIsGood' | 'WarningIfGreater' | 'WarningIfLess' | 'NoIndication';
	export type DeltaIndicationThresholdType = 'Absolute' | 'Percent';
	export type DeltaValueType = 'ActualValue' | 'AbsoluteVariation' | 'PercentVariation' | 'PercentOfTarget' | 'TargetValue';
	export type DifferenceTarget = 'Previous' | 'Next' | 'First' | 'Last';
	export type DifferenceType = 'Absolute' | 'Percentage';
	export type DimensionSortMode = 'Value' | 'DisplayText' | 'Key' | 'ID';
	export type DimensionSortOrder = 'Ascending' | 'Descending' | 'None';
	export type DimensionTopNMode = 'Top' | 'Bottom';
	export type ExactDateFormat = 'Year' | 'Quarter' | 'Month' | 'Day' | 'Hour' | 'Minute' | 'Second';
	export type DateOccurringFilterDateType = /*'None' | 'SpecificDate' |*/ 'BeyondThisYear' | 'LaterThisYear' | 'LaterThisMonth' | 'LaterThisWeek' | 'NextWeek' | 'Tomorrow' | 'Today' | 'Yesterday' | 'EarlierThisWeek' | 'LastWeek' | 'EarlierThisMonth' | 'EarlierThisYear' | 'PriorThisYear' | 'Empty' | /*'User' |*/ 'Beyond' | 'ThisWeek' | 'ThisMonth' | 'MonthAfter1' | 'MonthAfter2' | 'MonthAgo1' | 'MonthAgo2' | 'MonthAgo3' | 'MonthAgo4' | 'MonthAgo5' | 'MonthAgo6' | 'Earlier';
	export type FontStyle = 'Regular' | 'Bold' | 'Italic' | 'Underline' | 'Strikeout';
	export type FormatConditionAppearanceType = 'None' | 'Custom' | 'PaleRed' | 'PaleYellow' | 'PaleGreen' | 'PaleBlue' | 'PalePurple' | 'PaleCyan' | 'PaleOrange' | 'PaleGray' | 'Red' | 'Yellow' | 'Green' | 'Blue' | 'Purple' | 'Cyan' | 'Orange' | 'Gray' | 'GradientRed' | 'GradientYellow' | 'GradientGreen' | 'GradientBlue' | 'GradientPurple' | 'GradientCyan' | 'GradientOrange' | 'GradientTransparent' | 'FontBold' | 'FontItalic' | 'FontUnderline' | 'FontGrayed' | 'FontRed' | 'FontYellow' | 'FontGreen' | 'FontBlue';
	export type FormatConditionIconType = 'None' | 'DirectionalGreenArrowUp' | 'DirectionalYellowUpInclineArrow' | 'DirectionalYellowSideArrow' | 'DirectionalYellowDownInclineArrow' | 'DirectionalRedDownArrow' | 'DirectionalGrayArrowUp' | 'DirectionalGrayUpInclineArrow' | 'DirectionalGraySideArrow' | 'DirectionalGrayDownInclineArrow' | 'DirectionalGrayDownArrow' | 'DirectionalYellowDash' | 'DirectionalRedTriangleDown' | 'DirectionalGreenTriangleUp' | 'RatingFullGrayStar' | 'RatingHalfGrayStar' | 'RatingEmptyGrayStar' | 'RatingFullGrayCircle' | 'Rating1QuarterGrayCircle' | 'Rating2QuartersGrayCircle' | 'Rating3QuartersGrayCircle' | 'RatingEmptyGrayCircle' | 'Rating4Bars' | 'Rating3Bars' | 'Rating2Bars' | 'Rating1Bar' | 'Rating0Bars' | 'Rating4FilledBoxes' | 'Rating3FilledBoxes' | 'Rating2FilledBoxes' | 'Rating1FilledBox' | 'Rating0FilledBoxes' | 'ShapeGreenTrafficLight' | 'ShapeYellowTrafficLight' | 'ShapeRedTrafficLight' | 'ShapeGreenCircle' | 'ShapeYellowCircle' | 'ShapeRedCircle' | 'ShapeLightRedCircle' | 'ShapeLightGrayCircle' | 'ShapeYellowTriangle' | 'ShapeRedDiamond' | 'IndicatorGreenCheck' | 'IndicatorYellowExclamation' | 'IndicatorRedCross' | 'IndicatorCircledGreenCheck' | 'IndicatorCircledYellowExclamation' | 'IndicatorCircledRedCross' | 'IndicatorGreenFlag' | 'IndicatorYellowFlag' | 'IndicatorRedFlag';
	export type FormatConditionIntersectionLevelMode = 'Auto' | 'FirstLevel' | 'LastLevel' | 'AllLevels' | 'SpecificLevel';
	export type GaugeViewType = 'CircularFull' | 'CircularHalf' | 'CircularQuarterRight' | 'CircularQuarterLeft' | 'CircularThreeFourth' | 'LinearHorizontal' | 'LinearVertical';
	export type GridColumnFixedWidthType = 'Weight' | 'FitToContent' | 'FixedWidth';
	export type GridColumnTotalType = 'Auto' | 'Count' | 'Min' | 'Max' | 'Avg' | 'Sum';
	export type GridColumnValueBarDisplayMode = 'Value' | 'Bar';
	export type GridColumnWidthMode = 'Manual' | 'AutoFitToContents' | 'AutoFitToGrid';
	export type GridDimensionColumnDisplayMode = 'Text' | 'Image';
	export type GridMeasureColumnDisplayMode = 'Value' | 'Bar';
	export type GridWindowDefinitionMode = 'Rows' | 'SparklineArgument' | 'RowsAndSparklineArgument' | 'SparklineArgumentAndRows';
	export type HourFormat = 'Default' | 'Short' | 'Long';
	export type ImageDataBindingMode = 'BinaryArray' | 'Uri';
	export type ImageHorizontalAlignment = 'Left' | 'Center' | 'Right';
	export type ImageSizeMode = 'Clip' | 'Stretch' | 'Zoom' | 'Squeeze';
	export type ImageVerticalAlignment = 'Top' | 'Center' | 'Bottom';
	export type ListBoxDashboardItemType = 'Checked' | 'Radio';
	export type LogarithmicBase = 'Base2' | 'Base5' | 'Base10';
	export type MapLegendOrientation = 'Vertical' | 'Horizontal';
	export type MapLegendPosition = 'TopLeft' | 'TopCenter' | 'TopRight' | 'BottomLeft' | 'BottomCenter' | 'BottomRight';
	export type MonthFormat = 'Default' | 'Full' | 'Abbreviated' | 'Numeric';
	export type OpenHighLowCloseSeriesType = 'CandleStick' | 'Stock';
	export type PieValueType = 'None' | 'Argument' | 'Percent' | 'ArgumentAndPercent' | 'Value' | 'ArgumentAndValue' | 'ValueAndPercent' | 'ArgumentValueAndPercent';
	export type PieWindowDefinitionMode = 'Arguments' | 'Series' | 'ArgumentsAndSeries' | 'SeriesAndArguments';
	export type PivotColumnTotalsPosition = 'Near' | 'Far';
	export type PivotLayoutType = 'Compact' | 'Tabular';
	export type PivotRowTotalsPosition = 'Top' | 'Bottom';
	export type PivotValuesPosition = 'Columns' | 'Rows';
	export type PivotWindowDefinitionMode = 'Columns' | 'Rows' | 'ColumnsAndRows' | 'RowsAndColumns' | 'GroupsInColumns' | 'GroupsInRows' | 'GroupsInColumnsAndRows' | 'GroupsInRowsAndColumns';
	export type PointLabelOrientation = 'Default' | 'RotateRight' | 'RotateLeft';
	export type PointLabelOverlappingMode = 'Hide' | 'None' | 'Reposition';
	export type PointLabelPosition = 'Outside' | 'Inside';
	export type QuarterFormat = 'Default' | 'Numeric' | 'Full';
	export type RangeFilterWindowDefinitionMode = 'Argument' | 'Series' | 'ArgumentAndSeries' | 'SeriesAndArgument';
	export type RangeSeriesType = 'SideBySideRangeBar' | 'RangeArea';
	export type RankOrder = 'Ascending' | 'Descending';
	export type RankType = 'Unique' | 'Competition' | 'Dense' | 'Modified' | 'Percentile';
	export type ScatterPointLabelContentType = 'Argument' | 'Weight' | 'Values' | 'ArgumentAndWeight' | 'ArgumentAndValues';
	export type ShapefileArea = 'Custom' | 'WorldCountries' | 'Europe' | 'Asia' | 'NorthAmerica' | 'SouthAmerica' | 'Africa' | 'USA' | 'Canada';
	export type SimpleSeriesType = 'Bar' | 'StackedBar' | 'FullStackedBar' | 'Point' | 'Line' | 'StackedLine' | 'FullStackedLine' | 'StepLine' | 'Spline' | 'Area' | 'StackedArea' | 'FullStackedArea' | 'StepArea' | 'SplineArea' | 'StackedSplineArea' | 'FullStackedSplineArea';
	export type SparklineViewType = 'Line' | 'Area' | 'Bar' | 'WinLoss';
	export type SummaryType = 'Count' | 'Sum' | 'Min' | 'Max' | 'Average' | 'StdDev' | 'StdDevp' | 'Var' | 'Varp' | 'CountDistinct' | 'Median' | 'Mode';
	export type TargetDimensions = 'Arguments' | 'Series' | 'Points';
	export type TextGroupInterval = 'None' | 'Alphabetical';
	export type TreemapValueType = 'None' | 'Argument' | 'Value' | 'ArgumentAndValue';
	export type WeightedLegendType = 'Linear' | 'Nested';
	export type YearFormat = 'Default' | 'Full' | 'Abbreviated';
	export enum PointLabelContentType {
	    None = 0,
	    Argument = 1,
	    SeriesName = 2,
	    Value = 4,
	    Percent = 8
	}
	export let parsePointLabelContentType: (typeModel: any) => PointLabelContentType;
	export let serializePointLabelContentType: (val: PointLabelContentType) => string;
	export let getPointLabelContentTypeValues: (val: PointLabelContentType) => PointLabelContentType[];
	export let PointLabelContentTypeDictionary: {
	    'Argument': PointLabelContentType;
	    'SeriesName': PointLabelContentType;
	    'Value': PointLabelContentType;
	    'Percent': PointLabelContentType;
	};
	export enum FilterDateType {
	    None = 0,
	    BeyondThisYear = 2,
	    LaterThisYear = 4,
	    LaterThisMonth = 8,
	    LaterThisWeek = 16,
	    NextWeek = 32,
	    Tomorrow = 64,
	    Today = 128,
	    Yesterday = 256,
	    EarlierThisWeek = 512,
	    LastWeek = 1024,
	    EarlierThisMonth = 2048,
	    EarlierThisYear = 4096,
	    PriorThisYear = 8192,
	    Empty = 16384,
	    Beyond = 131072,
	    ThisWeek = 262144,
	    ThisMonth = 524288,
	    MonthAfter1 = 1048576,
	    MonthAfter2 = 2097152,
	    MonthAgo1 = 4194304,
	    MonthAgo2 = 8388608,
	    MonthAgo3 = 16777216,
	    MonthAgo4 = 33554432,
	    MonthAgo5 = 67108864,
	    MonthAgo6 = 134217728,
	    Earlier = 268435456
	}

}
declare module DevExpress.Dashboard.Internal.Data {
    import FormatConditionAppearanceType = DevExpress.Dashboard.Model.FormatConditionAppearanceType;
    import FormatConditionIconType = DevExpress.Dashboard.Model.FormatConditionIconType;
	export interface StyleSettingsModel {
	    Color: number;
	    ForeColor: number;
	    FontFamily: string;
	    FontSize: number;
	    FontStyle: string;
	    RangeIndex: number;
	    RuleIndex: number;
	    AppearanceType: FormatConditionAppearanceType;
	    IconType: FormatConditionIconType;
	    Image: any;
	    IsBarStyle: boolean;
	}
	export interface FormatRuleModelBase {
	    FormatConditionMeasureId: string;
	    NormalizedValueMeasureId: string;
	    ZeroPositionMeasureId: string;
	    ApplyToRow: boolean;
	    ConditionModel: any;
	    CalcByDataId: string;
	}
	export interface CardItemFormatRuleModel extends FormatRuleModelBase {
	    ApplyToLayoutElement: string;
	    ApplyToCardId: string;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
	export const defaultLocalization: {
	    'DashboardStringId.ActionClearMasterFilter': string;
	    'DashboardStringId.ActionClearSelection': string;
	    'DashboardStringId.ActionOtherValues': string;
	    'DashboardStringId.ActionDrillUp': string;
	    'DashboardStringId.ActionExportTo': string;
	    'DashboardStringId.ActionExportToPdf': string;
	    'DashboardStringId.ActionExportToImage': string;
	    'DashboardStringId.ActionExportToExcel': string;
	    'DashboardStringId.RangeFilterCustomDateTimePeriod': string;
	    'DashboardStringId.ActionExportTemplate': string;
	    'DashboardStringId.ActionAllowMultiselection': string;
	    'DashboardStringId.DashboardNullValue': string;
	    'DashboardStringId.TopNOthersValue': string;
	    'DashboardStringId.DashboardErrorValue': string;
	    'DashboardStringId.DateTimeQuarterFormat': string;
	    'DashboardStringId.MessageLoading': string;
	    'DashboardStringId.ParametersFormCaption': string;
	    'DashboardStringId.ParametersSelectorText': string;
	    'DashboardStringId.ParametersFormAllowNullColumnCaption': string;
	    'DashboardStringId.ParametersFormValueColumnCaption': string;
	    'DashboardStringId.ParametersFormNameColumnCaption': string;
	    'DashboardStringId.ButtonOK': string;
	    'DashboardStringId.ButtonCancel': string;
	    'DashboardStringId.SelectDate': string;
	    'DashboardStringId.ButtonReset': string;
	    'DashboardStringId.ButtonSubmit': string;
	    'DashboardStringId.ButtonApply': string;
	    'DashboardStringId.ButtonExport': string;
	    'DashboardStringId.GridResetColumnWidths': string;
	    'DashboardStringId.GridSortAscending': string;
	    'DashboardStringId.GridSortDescending': string;
	    'DashboardStringId.GridClearSorting': string;
	    'DashboardStringId.PivotGridTotal': string;
	    'DashboardStringId.PivotGridGrandTotal': string;
	    'DashboardStringId.ChartTotalValue': string;
	    'DashboardStringId.PageLayout': string;
	    'DashboardStringId.PageLayoutAuto': string;
	    'DashboardStringId.PageLayoutPortrait': string;
	    'DashboardStringId.PageLayoutLandscape': string;
	    'DashboardStringId.PaperKind': string;
	    'DashboardStringId.PaperKindLetter': string;
	    'DashboardStringId.PaperKindLegal': string;
	    'DashboardStringId.PaperKindExecutive': string;
	    'DashboardStringId.PaperKindA5': string;
	    'DashboardStringId.PaperKindA4': string;
	    'DashboardStringId.PaperKindA3': string;
	    'DashboardStringId.ScaleMode': string;
	    'DashboardStringId.ScaleModeNone': string;
	    'DashboardStringId.ScaleModeUseScaleFactor': string;
	    'DashboardStringId.ScaleModeAutoFitToPagesWidth': string;
	    'DashboardStringId.AutoFitPageCount': string;
	    'DashboardStringId.ScaleFactor': string;
	    'DashboardStringId.PrintHeadersOnEveryPage': string;
	    'DashboardStringId.FitToPageWidth': string;
	    'DashboardStringId.SizeMode': string;
	    'DashboardStringId.SizeModeNone': string;
	    'DashboardStringId.SizeModeStretch': string;
	    'DashboardStringId.SizeModeZoom': string;
	    'DashboardStringId.AutoArrangeContent': string;
	    'DashboardStringId.ImageFormat': string;
	    'DashboardStringId.ExcelFormat': string;
	    'DashboardStringId.CsvValueSeparator': string;
	    'DashboardStringId.ExportFilters': string;
	    'DashboardStringId.ExportParameters': string;
	    'DashboardStringId.DashboardStatePosition': string;
	    'DashboardStringId.Resolution': string;
	    'DashboardStringId.ShowTitle': string;
	    'DashboardStringId.Title': string;
	    'DashboardStringId.FileName': string;
	    'DashboardStringId.FilterStatePresentationAfter': string;
	    'DashboardStringId.FilterStatePresentationAfterAndSplitPage': string;
	    'DashboardStringId.FilterStatePresentationSplitSheet': string;
	    'DashboardStringId.MessageCustomItemIsNotSupported': string;
	    'DashboardStringId.MessageGridHasNoData': string;
	    'DashboardStringId.MessagePivotHasNoData': string;
	    'DashboardStringId.SparklineTooltipStartValue': string;
	    'DashboardStringId.SparklineTooltipEndValue': string;
	    'DashboardStringId.SparklineTooltipMinValue': string;
	    'DashboardStringId.SparklineTooltipMaxValue': string;
	    'DashboardStringId.OpenCaption': string;
	    'DashboardStringId.HighCaption': string;
	    'DashboardStringId.LowCaption': string;
	    'DashboardStringId.CloseCaption': string;
	    'DashboardStringId.InitialExtent': string;
	    'DashboardStringId.FilterElementShowAllItem': string;
	    'DashboardStringId.NumericFormatUnitSymbolThousands': string;
	    'DashboardStringId.NumericFormatUnitSymbolMillions': string;
	    'DashboardStringId.NumericFormatUnitSymbolBillions': string;
	    'DashboardStringId.ActionSelectDateTimePeriod': string;
	    'DashboardStringId.RangeFilterSelectRange': string;
	    'DashboardStringId.FilterElementCheckedComboBoxNoDataCaption': string;
	    'DashboardStringId.FilterElementRadioComboBoxNoDataCaption': string;
	    'DashboardStringId.FilterElementNoDataToDisplay': string;
	    'DashboardStringId.RangeFilterSelectRangeFromCaption': string;
	    'DashboardStringId.RangeFilterSelectRangeToCaption': string;
	    'DashboardWebStringId.DashboardParameters': string;
	    'DashboardStringId.DataSourceDataMember': string;
	    'DashboardStringId.DescriptionMeasures': string;
	    'DashboardWebStringId.TextBoxFormatText': string;
	    'DashboardStringId.NumericFormatUnitCaption': string;
	    'DashboardWebStringId.SummaryType': string;
	    'DashboardStringId.CalculationTypeExpression': string;
	    'DevExpressWebStringId.CalculatedFieldDataType': string;
	    'DashboardStringId.ValueCaption': string;
	    'DashboardStringId.Value1Caption': string;
	    'DashboardStringId.Value2Caption': string;
	    'DashboardStringId.CommandFormatRuleTopBottom': string;
	    'DashboardStringId.CommandFormatRuleAboveBelowAverage': string;
	    'DashboardStringId.CommandFormatRuleBar': string;
	    'DashboardStringId.CommandFormatRuleColorRangeBar': string;
	    'DashboardStringId.CommandFormatRuleGradientRangeBar': string;
	    'DashboardStringId.FormatRuleStyleAppearance': string;
	    'DashboardStringId.FormatRuleStyleIcons': string;
	    'DashboardStringId.FormatRuleNegativeStyle': string;
	    'DashboardStringId.CommandFormatRuleExpression': string;
	    'DashboardWebStringId.TopNMode': string;
	    'DashboardStringId.CommandFormatRuleRangeSet': string;
	    'DashboardStringId.CommandFormatRuleValue': string;
	    'DashboardStringId.CommandFormatRuleDateOccurring': string;
	    'DashboardWebStringId.ConditionalFormatting.Appearance.BackColor': string;
	    'DashboardWebStringId.ConditionalFormatting.Appearance.ForeColor': string;
	    'DashboardStringId.DescriptionBoundImageAttribute': string;
	    'DashboardWebStringId.ShowCaptionText': string;
	    'DashboardWebStringId.DisplayItemAsPage': string;
	    'DashboardStringId.DefaultNameItemGroup': string;
	    'DashboardStringId.DefaultNameTabContainerItem': string;
	    'DashboardStringId.DefaultDataSourceName': string;
	    'DashboardWebStringId.CrossDataSourceFiltering': string;
	    'DashboardStringId.RangeFilterCalculationAlongSeries': string;
	    'DashboardStringId.RangeFilterCalculationAlongArgument': string;
	    'DashboardStringId.DescriptionItemSeries': string;
	    'DashboardStringId.DescriptionSeries': string;
	    'DashboardWebStringId.Chart.SeriesType': string;
	    'DashboardStringId.DescriptionDimensions': string;
	    'DashboardWebStringId.TreeView.AutoExpand': string;
	    'DashboardWebStringId.ConditionalFormatting.ConditionMinimum': string;
	    'DashboardWebStringId.ConditionalFormatting.ConditionMaximum': string;
	    'DashboardStringId.DescriptionItemDimension': string;
	    'DashboardStringId.DescriptionItemMeasure': string;
	    'DashboardWebStringId.Grid.MergeCells': string;
	    'DashboardWebStringId.Grid.ColumnWidthMode': string;
	    'DashboardWebStringId.Grid.BandedRows': string;
	    'DashboardWebStringId.Grid.VerticalLines': string;
	    'DashboardWebStringId.Grid.HorizontalLines': string;
	    'DashboardWebStringId.Grid.ColumnHeaders': string;
	    'DashboardWebStringId.Grid.WordWrap': string;
	    'DashboardStringId.ActualValueCaption': string;
	    'DashboardStringId.TargetValueCaption': string;
	    'DashboardStringId.UriPatternCaption': string;
	    'DashboardStringId.UriCaption': string;
	    'DashboardStringId.DisplayValueCaption': string;
	    'DashboardStringId.WeightCaption': string;
	    'DashboardStringId.DescriptionItemColor': string;
	    'DashboardStringId.Latitude': string;
	    'DashboardStringId.Longitude': string;
	    'DashboardWebStringId.GeoPointMapClusterization': string;
	    'DashboardWebStringId.MapLockNavigation': string;
	    'DashboardWebStringId.WeightedLegendGalleryGroup': string;
	    'DashboardStringId.DescriptionItemArgument': string;
	    'DashboardWebStringId.PieMapIsWeighted': string;
	    'DashboardWebStringId.InteractivityOptions.IgnoreMasterFilters': string;
	    'DashboardWebStringId.InteractivityOptions.DrillDown': string;
	    'DashboardWebStringId.Pie.ShowCaptions': string;
	    'DashboardStringId.DescriptionColumns': string;
	    'DashboardStringId.DescriptionRows': string;
	    'DashboardStringId.DescriptionValues': string;
	    'DashboardStringId.DescriptionArguments': string;
	    'DashboardStringId.TextGroupIntervalAlphabetical': string;
	    'DashboardStringId.ActionMaximizeDashboardItem': string;
	    'DashboardStringId.ActionRestoreDashboardItem': string;
	    'DevExpress.DashboardCommon.DynamicListLookUpSettings.DataSource': string;
	    'DevExpress.DashboardCommon.DynamicListLookUpSettings.DataMember': string;
	    'DevExpress.DashboardCommon.DynamicListLookUpSettings.ValueMember': string;
	    'DevExpress.DashboardCommon.DynamicListLookUpSettings.DisplayMember': string;
	    'DevExpress.DashboardCommon.DynamicListLookUpSettings.SortOrder': string;
	    'DevExpress.DashboardCommon.DashboardParameter.Visible': string;
	    'DevExpress.DashboardCommon.DashboardParameter.Description': string;
	    'DevExpress.DashboardCommon.DashboardParameter.AllowMultiselect': string;
	    'DevExpress.DashboardCommon.DashboardParameter.AllowNull': string;
	    'DevExpress.DashboardCommon.DashboardParameter.SelectAllValues': string;
	    'DevExpress.DashboardCommon.StaticListLookUpSettings.Values': string;
	    'DevExpress.DashboardCommon.DimensionSortOrder.Ascending': string;
	    'DevExpress.DashboardCommon.DimensionSortOrder.Descending': string;
	    'DevExpress.DashboardCommon.DimensionSortOrder.None': string;
	    'DashboardWebStringId.AccordionTab.ScatterChartPointLabelOptions': string;
	    'DashboardWebStringId.AccordionTab.ChoroplethMapShapeLabelsAttribute': string;
	    'DashboardStringId.CommandFormatRuleTopN': string;
	    'DashboardWebStringId.Type': string;
	    'DashboardWebStringId.Grid.ColumnWidth': string;
	    'DashboardWebStringId.AccordionTab.ShowTotals': string;
	    'DashboardWebStringId.AccordionTab.Layout': string;
	    'DashboardWebStringId.AccordionTab.PivotInitialState': string;
	    'DashboardWebStringId.AccordionTab.ImageOptions': string;
	    'DashboardWebStringId.AccordionTab.Labels': string;
	    'DashboardWebStringId.AccordionTab.MapLegend': string;
	    'DashboardWebStringId.AccordionTab.WeightedLegend': string;
	    'DashboardWebStringId.AccordionTab.Common': string;
	    'DashboardWebStringId.AccordionTab.ChartLegend': string;
	    'DashboardWebStringId.Grid.AutoFitToContentsColumnWidthMode': string;
	    'DashboardWebStringId.Grid.AutoFitToGridColumnWidthMode': string;
	    'DashboardWebStringId.Grid.ManualGridColumnWidthMode': string;
	    'DashboardStringId.DateTimeIntervalYear': string;
	    'DashboardStringId.DateTimeIntervalQuarter': string;
	    'DashboardStringId.DateTimeIntervalMonth': string;
	    'DashboardStringId.DateTimeIntervalWeek': string;
	    'DashboardStringId.DateTimeIntervalDay': string;
	    'DashboardStringId.DateTimeIntervalHour': string;
	    'DashboardStringId.DateTimeIntervalMinute': string;
	    'DashboardStringId.DateTimeIntervalSecond': string;
	    'DashboardStringId.DateTimeGroupIntervalYear': string;
	    'DashboardStringId.DateTimeGroupIntervalQuarter': string;
	    'DashboardStringId.DateTimeGroupIntervalMonth': string;
	    'DashboardStringId.DateTimeGroupIntervalDay': string;
	    'DashboardStringId.DateTimeGroupIntervalHour': string;
	    'DashboardStringId.DateTimeGroupIntervalMinute': string;
	    'DashboardStringId.DateTimeGroupIntervalSecond': string;
	    'DashboardStringId.DateTimeGroupIntervalDayOfYear': string;
	    'DashboardStringId.DateTimeGroupIntervalDayOfWeek': string;
	    'DashboardStringId.DateTimeGroupIntervalWeekOfYear': string;
	    'DashboardStringId.DateTimeGroupIntervalWeekOfMonth': string;
	    'DashboardStringId.DateTimeGroupIntervalMonthYear': string;
	    'DashboardStringId.DateTimeGroupIntervalQuarterYear': string;
	    'DashboardStringId.DateTimeGroupIntervalWeekYear': string;
	    'DashboardStringId.DateTimeGroupIntervalDayMonthYear': string;
	    'DashboardStringId.DateTimeGroupIntervalDateHour': string;
	    'DashboardStringId.DateTimeGroupIntervalDateHourMinute': string;
	    'DashboardStringId.DateTimeGroupIntervalDateHourMinuteSecond': string;
	    'DashboardStringId.DateTimeGroupIntervalExactDate': string;
	    'DashboardStringId.GroupIntervalNone': string;
	    'DashboardWebStringId.Treemap.StripedLayoutAlgorithm': string;
	    'DashboardWebStringId.Treemap.SquarifiedLayoutAlgorithm': string;
	    'DashboardWebStringId.Treemap.SliceAndDiceLayoutAlgorithm': string;
	    'DashboardWebStringId.Treemap.TileLabelsArgumentAndValue': string;
	    'DashboardWebStringId.Treemap.TileLabelsNone': string;
	    'DashboardWebStringId.Treemap.TileLabelsValue': string;
	    'DashboardWebStringId.Treemap.TileLabelsArgument': string;
	    'DashboardWebStringId.Treemap.TileTooltipsArgumentAndValue': string;
	    'DashboardWebStringId.Treemap.TileTooltipsArgument': string;
	    'DashboardWebStringId.Treemap.TileTooltipsValue': string;
	    'DashboardWebStringId.Treemap.TileTooltipsNone': string;
	    'DashboardWebStringId.Treemap.TopLeftToBottomRightLayoutDirection': string;
	    'DashboardWebStringId.Treemap.TopRightToBottomLeftLayoutDirection': string;
	    'DashboardWebStringId.Treemap.BottomLeftToTopRightLayoutDirection': string;
	    'DashboardWebStringId.Treemap.BottomRightToTopLeftLayoutDirection': string;
	    'DashboardWebStringId.Treemap.LayoutDirection': string;
	    'DashboardWebStringId.Treemap.GroupLabelsNone': string;
	    'DashboardWebStringId.Treemap.GroupLabelsArgument': string;
	    'DashboardWebStringId.Treemap.GroupLabelsValue': string;
	    'DashboardWebStringId.Treemap.GroupLabelsArgumentAndValue': string;
	    'DashboardWebStringId.Treemap.GroupTooltipsNone': string;
	    'DashboardWebStringId.Treemap.GroupTooltipsArgument': string;
	    'DashboardWebStringId.Treemap.GroupTooltipsValue': string;
	    'DashboardWebStringId.Treemap.GroupTooltipsArgumentAndValue': string;
	    'DashboardStringId.RankOrderAscending': string;
	    'DashboardStringId.RankOrderDescending': string;
	    'DashboardStringId.DateTimeFormatYearFormatDefaultCaption': string;
	    'DashboardStringId.DateTimeFormatYearFormatFullCaption': string;
	    'DashboardStringId.DateTimeFormatYearFormatAbbreviatedCaption': string;
	    'DashboardStringId.DateTimeFormatQuarterFormatDefaultCaption': string;
	    'DashboardStringId.DateTimeFormatQuarterFormatNumericCaption': string;
	    'DashboardStringId.DateTimeFormatQuarterFormatFullCaption': string;
	    'DashboardStringId.DateTimeFormatMonthFormatDefaultCaption': string;
	    'DashboardStringId.DateTimeFormatMonthFormatFullCaption': string;
	    'DashboardStringId.DateTimeFormatMonthFormatAbbreviatedCaption': string;
	    'DashboardStringId.DateTimeFormatMonthFormatNumericCaption': string;
	    'DashboardStringId.DateTimeFormatDayOfWeekFormatDefaultCaption': string;
	    'DashboardStringId.DateTimeFormatDayOfWeekFormatFullCaption': string;
	    'DashboardStringId.DateTimeFormatDayOfWeekFormatAbbreviatedCaption': string;
	    'DashboardStringId.DateTimeFormatDayOfWeekFormatNumericCaption': string;
	    'DashboardStringId.DateTimeFormatDateFormatDefaultCaption': string;
	    'DashboardStringId.DateTimeFormatDateFormatLongCaption': string;
	    'DashboardStringId.DateTimeFormatDateFormatShortCaption': string;
	    'DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption': string;
	    'DashboardStringId.DateTimeFormatDateTimeFormatLongCaption': string;
	    'DashboardStringId.DateTimeFormatDateTimeFormatShortCaption': string;
	    'DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption': string;
	    'DashboardStringId.ExactDateFormatYear': string;
	    'DashboardStringId.ExactDateFormatQuarter': string;
	    'DashboardStringId.ExactDateFormatMonth': string;
	    'DashboardStringId.ExactDateFormatDay': string;
	    'DashboardStringId.ExactDateFormatHour': string;
	    'DashboardStringId.ExactDateFormatMinute': string;
	    'DashboardStringId.ExactDateFormatSecond': string;
	    'DashboardWebStringId.FormatType': string;
	    'DashboardWebStringId.TopN.Top': string;
	    'DashboardWebStringId.TopN.Bottom': string;
	    'DashboardWebStringId.DimensionSortBy': string;
	    'DashboardStringId.NumericFormatUnitAutoCaption': string;
	    'DashboardStringId.NumericFormatFormatTypeAutoCaption': string;
	    'DashboardStringId.NumericFormatFormatTypeGeneralCaption': string;
	    'DashboardStringId.NumericFormatFormatTypeNumberCaption': string;
	    'DashboardStringId.NumericFormatFormatTypeCurrencyCaption': string;
	    'DashboardStringId.NumericFormatFormatTypeScientificCaption': string;
	    'DashboardStringId.NumericFormatFormatTypePercentCaption': string;
	    'DashboardStringId.NumericFormatUnitOnesCaption': string;
	    'DashboardStringId.NumericFormatUnitThousandsCaption': string;
	    'DashboardStringId.NumericFormatUnitMillionsCaption': string;
	    'DashboardStringId.NumericFormatUnitBillionsCaption': string;
	    'DashboardStringId.DeltaValueTypeActualValueCaption': string;
	    'DashboardStringId.DeltaValueTypeAbsoluteVariationCaption': string;
	    'DashboardStringId.DeltaValueTypePercentVariationCaption': string;
	    'DashboardStringId.DeltaValueTypePercentOfTargetCaption': string;
	    'DashboardStringId.DeltaValueTypeTargetValueCaption': string;
	    'DashboardStringId.DeltaIndicationModeGreaterIsGoodCaption': string;
	    'DashboardStringId.DeltaIndicationModeLessIsGoodCaption': string;
	    'DashboardStringId.DeltaIndicationModeWarningIfGreaterCaption': string;
	    'DashboardStringId.DeltaIndicationModeWarningIfLessCaption': string;
	    'DashboardStringId.DeltaIndicationModeNoIndicationCaption': string;
	    'DashboardStringId.DeltaThresholdTypeAbsolute': string;
	    'DashboardStringId.DeltaThresholdTypePercent': string;
	    'DashboardStringId.CommandDimensionGroupChildValues': string;
	    'DashboardStringId.SeriesTypeBar': string;
	    'DashboardStringId.SeriesTypeStackedBar': string;
	    'DashboardStringId.SeriesTypeFullStackedBar': string;
	    'DashboardStringId.SeriesTypePoint': string;
	    'DashboardStringId.SeriesTypeLine': string;
	    'DashboardStringId.SeriesTypeStackedLine': string;
	    'DashboardStringId.SeriesTypeFullStackedLine': string;
	    'DashboardStringId.SeriesTypeStepLine': string;
	    'DashboardStringId.SeriesTypeSpline': string;
	    'DashboardStringId.SeriesTypeArea': string;
	    'DashboardStringId.SeriesTypeStackedArea': string;
	    'DashboardStringId.SeriesTypeFullStackedArea': string;
	    'DashboardStringId.SeriesTypeStepArea': string;
	    'DashboardStringId.SeriesTypeSplineArea': string;
	    'DashboardStringId.SeriesTypeStackedSplineArea': string;
	    'DashboardStringId.SeriesTypeFullStackedSplineArea': string;
	    'DashboardWebStringId.Chart.ShowLegend': string;
	    'DashboardStringId.DefaultNameBoundImageItem': string;
	    'DashboardStringId.DefaultNameImageItem': string;
	    'DashboardStringId.DefaultNameTextBoxItem': string;
	    'DashboardStringId.DefaultNameCardItem': string;
	    'DashboardStringId.DefaultNameChartItem': string;
	    'DashboardStringId.DefaultNameComboBoxItem': string;
	    'DashboardStringId.DefaultNameListBoxItem': string;
	    'DashboardStringId.DefaultNameTreeViewItem': string;
	    'DashboardStringId.DefaultNameGaugeItem': string;
	    'DashboardStringId.DefaultNameGridItem': string;
	    'DashboardStringId.GridHyperlinkUriPatternErrorMessage': string;
	    'DashboardWebStringId.DefaultNameBubbleMapItem': string;
	    'DashboardWebStringId.DefaultNameChoroplethMapItem': string;
	    'DashboardWebStringId.DefaultNameGeoPointMapItem': string;
	    'DashboardWebStringId.DefaultNamePieMapItem': string;
	    'DashboardStringId.DefaultNamePieItem': string;
	    'DashboardStringId.DefaultNamePivotItem': string;
	    'DashboardStringId.DefaultNameRangeFilterItem': string;
	    'DashboardStringId.DefaultNameScatterChartItem': string;
	    'DashboardStringId.DefaultNameTreemapItem': string;
	    'DashboardStringId.DescriptionMaps': string;
	    'DashboardStringId.EntireRangePeriodCaption': string;
	    'DashboardStringId.CalculationTypePercentOfTotal': string;
	    'DashboardStringId.CalculationTypeDifference': string;
	    'DashboardStringId.CalculationTypePercentageDifference': string;
	    'DashboardStringId.CalculationTypeRunningTotal': string;
	    'DashboardStringId.CalculationTypeMovingCalculation': string;
	    'DashboardStringId.CalculationTypeRank': string;
	    'DashboardStringId.ColorPaletteIndex': string;
	    'DashboardStringId.DifferenceCalculationTargetPrevious': string;
	    'DashboardStringId.DifferenceCalculationTargetNext': string;
	    'DashboardStringId.DifferenceCalculationTargetFirst': string;
	    'DashboardStringId.DifferenceCalculationTargetLast': string;
	    'DashboardStringId.SummaryTypeCount': string;
	    'DashboardStringId.SummaryTypeSum': string;
	    'DashboardStringId.SummaryTypeMin': string;
	    'DashboardStringId.SummaryTypeMax': string;
	    'DashboardStringId.SummaryTypeAverage': string;
	    'DashboardStringId.SummaryTypeStdDev': string;
	    'DashboardStringId.SummaryTypeStdDevp': string;
	    'DashboardStringId.SummaryTypeVar': string;
	    'DashboardStringId.SummaryTypeVarp': string;
	    'DashboardStringId.SummaryTypeCountDistinct': string;
	    'DashboardStringId.SummaryTypeMedian': string;
	    'DashboardStringId.SummaryTypeMode': string;
	    'DashboardStringId.RankTypeUnique': string;
	    'DashboardStringId.RankTypeCompetition': string;
	    'DashboardStringId.RankTypeDense': string;
	    'DashboardStringId.RankTypeModified': string;
	    'DashboardStringId.RankTypePercentile': string;
	    'DashboardStringId.CardCalculationAlongCards': string;
	    'DashboardStringId.CardCalculationAlongSparklineArgument': string;
	    'DashboardStringId.CardCalculationAlongCardsAndSparklineArgument': string;
	    'DashboardStringId.CardCalculationAlongSparklineArgumentAndCards': string;
	    'DashboardStringId.ChartCalculationAlongArguments': string;
	    'DashboardStringId.ChartCalculationAlongSeries': string;
	    'DashboardStringId.ChartCalculationAlongArgumentsAndSeries': string;
	    'DashboardStringId.ChartCalculationAlongSeriesAndArguments': string;
	    'DashboardStringId.GridCalculationAlongRows': string;
	    'DashboardStringId.GridCalculationAlongSparklineArgument': string;
	    'DashboardStringId.GridCalculationAlongRowsAndSparklineArgument': string;
	    'DashboardStringId.GridCalculationAlongSparklineArgumentAndRows': string;
	    'DashboardStringId.PivotCalculationAlongColumns': string;
	    'DashboardStringId.PivotCalculationAlongRows': string;
	    'DashboardStringId.PivotCalculationAlongColumnsAndRows': string;
	    'DashboardStringId.PivotCalculationAlongRowsAndColumns': string;
	    'DashboardStringId.PivotCalculationAlongGroupsInColumns': string;
	    'DashboardStringId.PivotCalculationAlongGroupsInRows': string;
	    'DashboardStringId.PivotCalculationAlongGroupsInColumnsAndRows': string;
	    'DashboardStringId.PivotCalculationAlongGroupsInRowsAndColumns': string;
	    'DashboardStringId.PieCalculationAlongArguments': string;
	    'DashboardStringId.PieCalculationAlongSeries': string;
	    'DashboardStringId.PieCalculationAlongArgumentsAndSeries': string;
	    'DashboardStringId.PieCalculationAlongSeriesAndArguments': string;
	    'DashboardStringId.RangeFilterCalculationAlongArgumentAndSeries': string;
	    'DashboardStringId.RangeFilterCalculationAlongSeriesAndArgument': string;
	    'DashboardStringId.GaugeCalculationAlongGauges': string;
	    'DashboardStringId.ScatterCalculationAlongArguments': string;
	    'DashboardStringId.CalculationAlongSpecificDimensions': string;
	    'DashboardStringId.CalculatedFieldTypeString': string;
	    'DashboardStringId.CalculatedFieldTypeLong': string;
	    'DashboardStringId.CalculatedFieldTypeDecimal': string;
	    'DashboardStringId.CalculatedFieldTypeBoolean': string;
	    'DashboardStringId.CalculatedFieldTypeDateTime': string;
	    'DashboardStringId.CalculatedFieldTypeDouble': string;
	    'DashboardStringId.CalculatedFieldTypeAuto': string;
	    'DashboardStringId.CalculatedFieldTypeObject': string;
	    'DashboardStringId.DefaultEFDataSourceName': string;
	    'DashboardStringId.DefaultExcelDataSourceName': string;
	    'DashboardStringId.DefaultFileExtractDataSourceName': string;
	    'DashboardStringId.DefaultObjectDataSourceName': string;
	    'DashboardStringId.DefaultOlapDataSourceName': string;
	    'DashboardStringId.DefaultSqlDataSourceName': string;
	    'DashboardStringId.DefaultJsonDataSourceName': string;
	    'DashboardStringId.DefaultXpoDataSourceName': string;
	    'DashboardStringId.OlapRaggedHierarchyNoneItemCaption': string;
	    'DashboardStringId.FormatRuleApplyToColumn': string;
	    'DashboardStringId.SeriesTypeSideBySideRangeBar': string;
	    'DashboardStringId.SeriesTypeRangeArea': string;
	    'DashboardStringId.SeriesTypeHighLowClose': string;
	    'DashboardStringId.SeriesTypeCandleStick': string;
	    'DashboardStringId.SeriesTypeStock': string;
	    'DashboardWebStringId.StyleSettings': string;
	    'DashboardStringId.ParametersFormCalendarTodayButton': string;
	    'DashboardStringId.TreemapLabelArgumentTemplate': string;
	    'DashboardStringId.TreemapLabelValueTemplate': string;
	    'DashboardStringId.SearchNullValuePrompt': string;
	    'DashboardStringId.CustomItems': string;
	    'DashboardStringId.FormatRuleAllowNegativeAxis': string;
	    'DashboardStringId.FormatRuleDrawAxis': string;
	    'DashboardStringId.FormatRuleShowBarOnly': string;
	    'DashboardStringId.CommandFormatRuleBottomN': string;
	    'DashboardStringId.FormatConditionAppearanceNone': string;
	    'DashboardStringId.FormatConditionAppearanceCustom': string;
	    'DashboardStringId.FormatConditionAppearancePaleRed': string;
	    'DashboardStringId.FormatConditionAppearancePaleYellow': string;
	    'DashboardStringId.FormatConditionAppearancePaleGreen': string;
	    'DashboardStringId.FormatConditionAppearancePaleBlue': string;
	    'DashboardStringId.FormatConditionAppearancePalePurple': string;
	    'DashboardStringId.FormatConditionAppearancePaleCyan': string;
	    'DashboardStringId.FormatConditionAppearancePaleOrange': string;
	    'DashboardStringId.FormatConditionAppearancePaleGray': string;
	    'DashboardStringId.FormatConditionAppearanceRed': string;
	    'DashboardStringId.FormatConditionAppearanceYellow': string;
	    'DashboardStringId.FormatConditionAppearanceGreen': string;
	    'DashboardStringId.FormatConditionAppearanceBlue': string;
	    'DashboardStringId.FormatConditionAppearancePurple': string;
	    'DashboardStringId.FormatConditionAppearanceCyan': string;
	    'DashboardStringId.FormatConditionAppearanceOrange': string;
	    'DashboardStringId.FormatConditionAppearanceGray': string;
	    'DashboardStringId.FormatConditionAppearanceGradientRed': string;
	    'DashboardStringId.FormatConditionAppearanceGradientYellow': string;
	    'DashboardStringId.FormatConditionAppearanceGradientGreen': string;
	    'DashboardStringId.FormatConditionAppearanceGradientBlue': string;
	    'DashboardStringId.FormatConditionAppearanceGradientPurple': string;
	    'DashboardStringId.FormatConditionAppearanceGradientCyan': string;
	    'DashboardStringId.FormatConditionAppearanceGradientOrange': string;
	    'DashboardStringId.FormatConditionAppearanceGradientTransparent': string;
	    'DashboardStringId.FormatConditionAppearanceFontBold': string;
	    'DashboardStringId.FormatConditionAppearanceFontItalic': string;
	    'DashboardStringId.FormatConditionAppearanceFontUnderline': string;
	    'DashboardStringId.FormatConditionAppearanceFontGrayed': string;
	    'DashboardStringId.FormatConditionAppearanceFontRed': string;
	    'DashboardStringId.FormatConditionAppearanceFontYellow': string;
	    'DashboardStringId.FormatConditionAppearanceFontGreen': string;
	    'DashboardStringId.FormatConditionAppearanceFontBlue': string;
	    'DashboardStringId.IntersectionLevelModeFirst': string;
	    'DashboardStringId.IntersectionLevelModeLast': string;
	    'DashboardStringId.IntersectionLevelModeAuto': string;
	    'DashboardStringId.IntersectionLevelModeAll': string;
	    'DashboardStringId.IntersectionLevelModeSpecific': string;
	    'DashboardStringId.FormatRuleApplyToRow': string;
	    'DashboardStringId.FormatRuleApplyTo': string;
	    'DashboardWebStringId.FilterItem.AllowEmptyFilter': string;
	    'DashboardStringId.FormatConditionAppearanceFontStrikeout': string;
	    'DashboardStringId.FormatConditionAutomaticValueType': string;
	    'DashboardStringId.FormatConditionNumberValueType': string;
	    'DashboardStringId.FormatConditionPercentValueType': string;
	    'DashboardStringId.CommandFormatRuleRangeIcons': string;
	    'DashboardStringId.CommandFormatRuleGreaterThan': string;
	    'DashboardStringId.CommandFormatRuleGreaterThanOrEqualTo': string;
	    'DashboardStringId.CommandFormatRuleLessThan': string;
	    'DashboardStringId.CommandFormatRuleLessThanOrEqualTo': string;
	    'DashboardStringId.CommandFormatRuleEqualTo': string;
	    'DashboardStringId.CommandFormatRuleNotEqualTo': string;
	    'DashboardStringId.CommandFormatRuleBetween': string;
	    'DashboardStringId.CommandFormatRuleNotBetween': string;
	    'DashboardStringId.CommandFormatRuleBetweenOrEqual': string;
	    'DashboardStringId.CommandFormatRuleNotBetweenOrEqual': string;
	    'DashboardStringId.CommandFormatRuleContains': string;
	    'DashboardStringId.ColorAutoAssigned': string;
	    'DashboardStringId.CalculationTypeNone': string;
	    'DashboardStringId.UndoText': string;
	    'DashboardStringId.RedoText': string;
	    'DashboardStringId.DashboardCurrencyUseCurrentCurrency': string;
	    'DashboardStringId.CommandDimensionSortModeDisplayText': string;
	    'DashboardStringId.CommandDimensionSortModeValue': string;
	    'DashboardStringId.CommandDimensionSortModeID': string;
	    'DashboardStringId.CommandDimensionSortModeKey': string;
	    'DashboardWebStringId.Chart.AddPane': string;
	    'DashboardStringId.MapShapeNoneAttribute': string;
	    'DashboardStringId.DefaultPeriodName': string;
	    'DashboardStringId.CardLayoutTemplateStretchedCaption': string;
	    'DashboardStringId.CardLayoutTemplateCenteredCaption': string;
	    'DashboardStringId.CardLayoutTemplateCompactCaption': string;
	    'DashboardStringId.CardLayoutTemplateLightweightCaption': string;
	    'DashboardStringId.CardLayoutTemplateCustomCaption': string;
	    'DashboardStringId.CardLayoutTemplateNoneCaption': string;
	    'DashboardStringId.CardRowDataElementTypeTitleCaption': string;
	    'DashboardStringId.CardRowDataElementTypeSubtitleCaption': string;
	    'DashboardStringId.CardRowDataElementTypeActualValueCaption': string;
	    'DashboardStringId.CardRowDataElementTypeTargetValueCaption': string;
	    'DashboardStringId.CardRowDataElementTypeAbsoluteVariationCaption': string;
	    'DashboardStringId.CardRowDataElementTypePercentVariationCaption': string;
	    'DashboardStringId.CardRowDataElementTypePercentOfTargetCaption': string;
	    'DashboardStringId.CardRowDataElementTypeDimensionValueCaption': string;
	    'DashboardStringId.CardRowDataElementTypeCardNameCaption': string;
	    'DashboardStringId.CardRowDataElementTypeDeltaIndicatorCaption': string;
	    'DashboardStringId.CardRowDataElementTypeSparklineCaption': string;
	    'DashboardStringId.FormatRuleApplyToAllElements': string;
	    'DashboardWebStringId.Pie.LabelPosition': string;
	    'DashboardWebStringId.Pie.LabelPositionOutside': string;
	    'DashboardWebStringId.Pie.LabelPositionInside': string;
	    'DashboardStringId.IncludeExportDashboardState': string;
	    'DashboardStringId.PointLabelContentTypeArgument': string;
	    'DashboardStringId.PointLabelContentTypeSeriesName': string;
	    'DashboardStringId.PointLabelContentTypeValue': string;
	    'DashboardStringId.PointLabelContentTypePercent': string;
	    'DashboardWebStringId.DashboardMenu': string;
	    'DashboardWebStringId.DashboardMenuNew': string;
	    'DashboardWebStringId.DashboardMenuOpen': string;
	    'DashboardWebStringId.DashboardMenuSave': string;
	    'DashboardWebStringId.DashboardMenuCurrency': string;
	    'DashboardWebStringId.DashboardMenuDataSources': string;
	    'DashboardWebStringId.DashboardMenuColorScheme': string;
	    'DashboardWebStringId.DashboardMenuNewDashboardCreate': string;
	    'DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder': string;
	    'DashboardWebStringId.Binding.DefaultEmptyPlaceholder': string;
	    'DashboardWebStringId.Binding.DefaultSelectedPlaceholder': string;
	    'DashboardWebStringId.Binding.DataFiltering': string;
	    'DashboardWebStringId.Binding.Argument': string;
	    'DashboardWebStringId.Binding.Attribute': string;
	    'DashboardWebStringId.Binding.Sparkline': string;
	    'DashboardWebStringId.Binding.Columns': string;
	    'DashboardWebStringId.Binding.TooltipDimensions': string;
	    'DashboardWebStringId.Binding.TooltipMeasures': string;
	    'DashboardWebStringId.Binding.HiddenDimensions': string;
	    'DashboardWebStringId.Binding.HiddenMeasures': string;
	    'DashboardWebStringId.Binding.AddDimension': string;
	    'DashboardWebStringId.Binding.AddMeasure': string;
	    'DashboardWebStringId.Binding.AddColumn': string;
	    'DashboardWebStringId.Binding.AddRow': string;
	    'DashboardWebStringId.Binding.AddValue': string;
	    'DashboardWebStringId.Binding.AddSeries': string;
	    'DashboardWebStringId.Binding.SetLatitude': string;
	    'DashboardWebStringId.Binding.SetLongitude': string;
	    'DashboardWebStringId.Binding.SetArgument': string;
	    'DashboardWebStringId.Binding.AddArgument': string;
	    'DashboardWebStringId.Binding.SetWeight': string;
	    'DashboardWebStringId.Binding.SetColor': string;
	    'DashboardWebStringId.Binding.SetAttribute': string;
	    'DashboardWebStringId.Binding.SetValue': string;
	    'DashboardWebStringId.Binding.XAxis': string;
	    'DashboardWebStringId.Binding.YAxis': string;
	    'DashboardWebStringId.Binding.ConfigureDimension': string;
	    'DashboardWebStringId.Binding.ConfigureMeasure': string;
	    'DashboardWebStringId.Binding.ConfigureSeries': string;
	    'DashboardWebStringId.Binding.ConfigureArgument': string;
	    'DashboardWebStringId.Binding.ConfigureValue': string;
	    'DashboardWebStringId.Binding.ConfigureAttribute': string;
	    'DashboardWebStringId.Binding.ConfigureLatitude': string;
	    'DashboardWebStringId.Binding.ConfigureLongitude': string;
	    'DashboardWebStringId.Binding.ConfigureColumn': string;
	    'DashboardWebStringId.Binding.ConfigureRow': string;
	    'DashboardWebStringId.Binding.ConfigureWeight': string;
	    'DashboardWebStringId.Binding.ConfigureColor': string;
	    'DashboardWebStringId.Binding.ShowAll': string;
	    'DashboardWebStringId.ColorScheme.Color': string;
	    'DashboardWebStringId.ColorScheme.Colors': string;
	    'DashboardWebStringId.Parameters.ParameterList': string;
	    'DashboardWebStringId.Parameters.AddParameter': string;
	    'DashboardWebStringId.Parameters.AddParameter.Tooltip': string;
	    'DashboardWebStringId.Parameters.NoSelectedParameter': string;
	    'DashboardWebStringId.Parameters.Reorder': string;
	    'DashboardWebStringId.Parameters.Done': string;
	    'DashboardWebStringId.Currency.Currency': string;
	    'DashboardWebStringId.Currency.CurrencyCulture': string;
	    'DashboardWebStringId.Currency.DefaultCurrencyWarning': string;
	    'DashboardWebStringId.Preview': string;
	    'DashboardWebStringId.Add': string;
	    'DashboardWebStringId.DataSources.UsedDataSources': string;
	    'DashboardWebStringId.DataSources.DataItems': string;
	    'DashboardWebStringId.DataSources.AddQuery': string;
	    'DashboardWebStringId.DataSources.AddCalculatedField': string;
	    'DashboardWebStringId.DataSources.AddDataSource': string;
	    'DashboardWebStringId.DataSources.NoUsedDataSources': string;
	    'DashboardWebStringId.DataSources.NoAvailableDataSources': string;
	    'DashboardWebStringId.DataSources.ChooseDataSource': string;
	    'DashboardWebStringId.DataSources.CreateDataSource': string;
	    'DashboardWebStringId.DataSources.CreateNewDataSource': string;
	    'DashboardWebStringId.DataSources.CreateDataSource.Tooltip': string;
	    'DashboardWebStringId.DataSources.EditCalculatedField': string;
	    'DashboardWebStringId.DataSources.CalculatedField.Name': string;
	    'DashboardWebStringId.DataSources.CalculatedField.FieldType': string;
	    'DashboardWebStringId.DataSources.CalculatedField.UniqueNameError': string;
	    'DashboardWebStringId.DataSources.CalculatedField.Corrupted': string;
	    'DashboardWebStringId.DataSources.Edit': string;
	    'DashboardStringId.MessageCollectionTypesNotSupported': string;
	    'DashboardWebStringId.New.DashboardName': string;
	    'DashboardWebStringId.Bindings': string;
	    'DashboardWebStringId.Interactivity': string;
	    'DashboardWebStringId.Options': string;
	    'DashboardWebStringId.Remove': string;
	    'DashboardWebStringId.MasterFilterMode': string;
	    'DashboardWebStringId.Title.Text': string;
	    'DashboardWebStringId.Title.Visible': string;
	    'DashboardWebStringId.Title.IncludeMasterFilter': string;
	    'DashboardWebStringId.Title.Aligment': string;
	    'DashboardWebStringId.Title.Image': string;
	    'DashboardWebStringId.DataSources.Cancel': string;
	    'DashboardWebStringId.DataSources.IncludeToTheDashboard': string;
	    'DashboardWebStringId.DataSources.AvailableDataSourcesError': string;
	    'DashboardWebStringId.DataSources.DashboardDataSourceWizard': string;
	    'DashboardWebStringId.Viewer': string;
	    'DashboardWebStringId.Loading': string;
	    'DashboardWebStringId.ClickHereInvitation': string;
	    'DashboardWebStringId.BindDataInvitation': string;
	    'DashboardWebStringId.AddItemInvitation': string;
	    'DashboardWebStringId.Parameters.Values': string;
	    'DashboardWebStringId.Binding.Cards': string;
	    'DashboardWebStringId.Binding.AddCard': string;
	    'DashboardWebStringId.Binding.ConfigureCard': string;
	    'DashboardWebStringId.Binding.AddValues': string;
	    'DashboardWebStringId.Binding.ConfigureValues': string;
	    'DashboardWebStringId.Binding.Maps': string;
	    'DashboardWebStringId.Binding.AddMap': string;
	    'DashboardWebStringId.Binding.ConfigureMap': string;
	    'DashboardWebStringId.Binding.Gauges': string;
	    'DashboardWebStringId.Binding.AddGauge': string;
	    'DashboardWebStringId.Binding.ConfigureGauge': string;
	    'DashboardWebStringId.InteractivityOptions': string;
	    'DashboardWebStringId.Binding.Values': string;
	    'DashboardWebStringId.Binding.RemovePane': string;
	    'DashboardWebStringId.ClickToSetFilterCriteria': string;
	    'DashboardWebStringId.DataSources.OK': string;
	    'DashboardWebStringId.DataSources.Save': string;
	    'DashboardWebStringId.Cards.ArrangementMode': string;
	    'DashboardWebStringId.Cards.ArrangementMode.Auto': string;
	    'DashboardWebStringId.Cards.ArrangementMode.FixedRows': string;
	    'DashboardWebStringId.Cards.ArrangementMode.FixedColumns': string;
	    'DashboardWebStringId.Cards.LineCount': string;
	    'DashboardWebStringId.ConditionalFormatting': string;
	    'DashboardWebStringId.CollectionEditor.NoItems': string;
	    'DashboardWebStringId.CollectionEditor.Totals.NoItems': string;
	    'DashboardWebStringId.CollectionEditor.Parameters.NoItems': string;
	    'DashboardWebStringId.PivotGrid.AutoExpandColumnGroups': string;
	    'DashboardWebStringId.PivotGrid.AutoExpandRowGroups': string;
	    'DashboardWebStringId.PivotGrid.ColumnGrandTotals': string;
	    'DashboardWebStringId.PivotGrid.RowGrandTotals': string;
	    'DashboardWebStringId.PivotGrid.ColumnTotals': string;
	    'DashboardWebStringId.PivotGrid.RowTotals': string;
	    'DashboardWebStringId.PivotGrid.ValuesPosition': string;
	    'DashboardWebStringId.PivotGrid.ValuesPositionColumns': string;
	    'DashboardWebStringId.PivotGrid.ValuesPositionRows': string;
	    'DashboardWebStringId.PivotGrid.RowTotalsPosition': string;
	    'DashboardWebStringId.PivotGrid.RowTotalsPositionBottom': string;
	    'DashboardWebStringId.PivotGrid.RowTotalsPositionTop': string;
	    'DashboardWebStringId.PivotGrid.ColumnTotalsPosition': string;
	    'DashboardWebStringId.PivotGrid.ColumnTotalsPositionFar': string;
	    'DashboardWebStringId.PivotGrid.ColumnTotalsPositionNear': string;
	    'DashboardWebStringId.PivotGrid.LayoutType': string;
	    'DashboardWebStringId.PivotGrid.LayoutTypeCompact': string;
	    'DashboardWebStringId.PivotGrid.LayoutTypeTabular': string;
	    'DashboardWebStringId.Options.Caption': string;
	    'DashboardWebStringId.InteractivityOptions.IsMasterFilter': string;
	    'DashboardWebStringId.InteractivityOptions.MasterFilterMode.None': string;
	    'DashboardWebStringId.InteractivityOptions.MasterFilterMode.Single': string;
	    'DashboardWebStringId.InteractivityOptions.MasterFilterMode.Multiple': string;
	    'DashboardWebStringId.InteractivityOptions.TargetDimensions': string;
	    'DashboardWebStringId.InteractivityOptions.TargetDimensions.Arguments': string;
	    'DashboardWebStringId.InteractivityOptions.TargetDimensions.Series': string;
	    'DashboardWebStringId.InteractivityOptions.TargetDimensions.Points': string;
	    'DashboardWebStringId.ColoringOptions': string;
	    'DashboardWebStringId.DataSources.Filter': string;
	    'DashboardWebStringId.Chart.Rotated': string;
	    'DashboardWebStringId.Chart.Panes': string;
	    'DashboardWebStringId.Chart.Legend': string;
	    'DashboardWebStringId.Chart.AxisX': string;
	    'DashboardWebStringId.Chart.AxisY': string;
	    'DashboardWebStringId.Chart.AxisYSecondary': string;
	    'DashboardWebStringId.Chart.PointLabelOptions': string;
	    'DashboardWebStringId.Chart.AxisXMeasure': string;
	    'DashboardWebStringId.Chart.AxisYMeasure': string;
	    'DashboardWebStringId.Chart.Weight': string;
	    'DashboardWebStringId.Chart.Content': string;
	    'DashboardWebStringId.Chart.ArgumentAndWeight': string;
	    'DashboardWebStringId.Chart.ArgumentAndValues': string;
	    'DashboardWebStringId.Chart.Reverse': string;
	    'DashboardWebStringId.Chart.Visible': string;
	    'DashboardWebStringId.Chart.Title': string;
	    'DashboardWebStringId.Chart.TitleText': string;
	    'DashboardWebStringId.Chart.EnableZooming': string;
	    'DashboardWebStringId.Chart.LimitVisiblePoints': string;
	    'DashboardWebStringId.Chart.VisiblePointsCount': string;
	    'DashboardWebStringId.Chart.AlwaysShowZeroLevel': string;
	    'DashboardWebStringId.Chart.GridLines': string;
	    'DashboardWebStringId.Chart.LogarithmicScale': string;
	    'DashboardWebStringId.Chart.LogarithmicScaleBase': string;
	    'DashboardWebStringId.Chart.LogarithmicScaleBase2': string;
	    'DashboardWebStringId.Chart.LogarithmicScaleBase5': string;
	    'DashboardWebStringId.Chart.LogarithmicScaleBase10': string;
	    'DashboardWebStringId.Chart.Position': string;
	    'DashboardWebStringId.Chart.IsInsideOfDiagram': string;
	    'DashboardWebStringId.Chart.PrimaryAxisY': string;
	    'DashboardWebStringId.Chart.SecondaryAxisY': string;
	    'DashboardWebStringId.Chart.Name': string;
	    'DashboardWebStringId.Chart.PlotOnSecondaryAxis': string;
	    'DashboardWebStringId.Chart.IgnoreEmptyPoints': string;
	    'DashboardWebStringId.Chart.ShowPointMarkers': string;
	    'DashboardWebStringId.Chart.Value': string;
	    'DashboardWebStringId.Chart.ShowZeroValues': string;
	    'DashboardWebStringId.Chart.OverlappingMode': string;
	    'DashboardWebStringId.Chart.Orientation': string;
	    'DashboardWebStringId.Chart.ShowPointLablels': string;
	    'DashboardWebStringId.Chart.TooltipContent': string;
	    'DashboardWebStringId.Chart.LabelContent': string;
	    'DashboardWebStringId.Card.SparklineOptions': string;
	    'DashboardWebStringId.Card.SparklineVisible': string;
	    'DashboardWebStringId.Chart.Position.TopLeftVertical': string;
	    'DashboardWebStringId.Chart.Position.TopLeftHorizontal': string;
	    'DashboardWebStringId.Chart.Position.TopCenterHorizontal': string;
	    'DashboardWebStringId.Chart.Position.TopRightVertical': string;
	    'DashboardWebStringId.Chart.Position.TopRightHorizontal': string;
	    'DashboardWebStringId.Chart.Position.BottomLeftVertical': string;
	    'DashboardWebStringId.Chart.Position.BottomLeftHorizontal': string;
	    'DashboardWebStringId.Chart.Position.BottomCenterHorizontal': string;
	    'DashboardWebStringId.Chart.Position.BottomRightVertical': string;
	    'DashboardWebStringId.Chart.Position.BottomRightHorizontal': string;
	    'DashboardWebStringId.Chart.Position.TopCenterVertical': string;
	    'DashboardWebStringId.Chart.Position.BottomCenterVertical': string;
	    'DashboardWebStringId.FilterItem.Type': string;
	    'DashboardWebStringId.FilterItem.Type.Standard': string;
	    'DashboardWebStringId.FilterItem.Type.Checked': string;
	    'DashboardWebStringId.FilterItem.Type.Radio': string;
	    'DashboardWebStringId.FilterItem.ShowAllValue': string;
	    'DashboardWebStringId.FilterItem.EnableSearch': string;
	    'DashboardWebStringId.Gauge.Min': string;
	    'DashboardWebStringId.Gauge.Max': string;
	    'DashboardWebStringId.Gauge.ScaleOptions': string;
	    'DashboardWebStringId.Gauge.Type': string;
	    'DashboardWebStringId.Gauge.Type.FullQuarterGauge': string;
	    'DashboardWebStringId.Gauge.Type.HalfCircular': string;
	    'DashboardWebStringId.Gauge.Type.LeftQuarterCircular': string;
	    'DashboardWebStringId.Gauge.Type.RightQuarterCircular': string;
	    'DashboardWebStringId.Gauge.Type.ThreeFourthCircular': string;
	    'DashboardWebStringId.Gauge.Type.LinearHorizontal': string;
	    'DashboardWebStringId.Gauge.Type.LinearVertical': string;
	    'DashboardWebStringId.Gauge.Captions': string;
	    'DashboardWebStringId.Gauge.Scale.Custom': string;
	    'DashboardWebStringId.Gauge.Scale.Auto': string;
	    'DashboardWebStringId.Grid.ColumnType': string;
	    'DashboardWebStringId.Grid.DisplayMode': string;
	    'DashboardWebStringId.Grid.DisplayMode.Value': string;
	    'DashboardWebStringId.Grid.DisplayMode.Bar': string;
	    'DashboardWebStringId.Grid.DisplayMode.Text': string;
	    'DashboardWebStringId.Grid.DisplayMode.Image': string;
	    'DashboardWebStringId.Grid.FixedWidth': string;
	    'DashboardWebStringId.Grid.WidthType': string;
	    'DashboardWebStringId.Grid.WidthType.Weight': string;
	    'DashboardWebStringId.Grid.WidthType.FitToContent': string;
	    'DashboardWebStringId.Grid.DeltaOptions': string;
	    'DashboardWebStringId.Grid.ShowStartEndValues': string;
	    'DashboardWebStringId.Grid.TotalType': string;
	    'DashboardWebStringId.Grid.Dimension': string;
	    'DashboardWebStringId.Grid.Measure': string;
	    'DashboardWebStringId.Grid.Delta': string;
	    'DashboardWebStringId.Grid.Sparkline': string;
	    'DashboardWebStringId.Grid.Hyperlink': string;
	    'DashboardWebStringId.Grid.Options': string;
	    'DashboardWebStringId.Map.ShapeFileLoaded': string;
	    'DashboardWebStringId.Map.AttributeFileLoaded': string;
	    'DashboardWebStringId.Map.ValueMap': string;
	    'DashboardWebStringId.Map.DeltaMap': string;
	    'DashboardWebStringId.Map.TooltipCaption': string;
	    'DashboardWebStringId.Map.TooltipActualValueCaption': string;
	    'DashboardWebStringId.Map.TooltipDeltaCaption': string;
	    'DashboardWebStringId.Map.CustomMapOptions': string;
	    'DashboardWebStringId.Map.CustomMapOptionsSource': string;
	    'DashboardWebStringId.Map.CustomMapOptionsUrl': string;
	    'DashboardWebStringId.Map.CustomMapOptionsFile': string;
	    'DashboardWebStringId.Map.CustomMapUrl': string;
	    'DashboardWebStringId.Map.CustomMapFile': string;
	    'DashboardWebStringId.Map.CustomAttributeFile': string;
	    'DashboardWebStringId.Map.AttributeDimension': string;
	    'DashboardWebStringId.Map.IncludeSummaryValueToShapeTitle': string;
	    'DashboardWebStringId.Map.AttributeName': string;
	    'DashboardWebStringId.Map.TooltipAttribute': string;
	    'DashboardWebStringId.Map.TooltipDimensions': string;
	    'DashboardWebStringId.Map.Area.Custom': string;
	    'DashboardWebStringId.Map.Area.WorldCountries': string;
	    'DashboardWebStringId.Map.Area.Europe': string;
	    'DashboardWebStringId.Map.Area.Asia': string;
	    'DashboardWebStringId.Map.Area.NorthAmerica': string;
	    'DashboardWebStringId.Map.Area.SouthAmerica': string;
	    'DashboardWebStringId.Map.Area.Africa': string;
	    'DashboardWebStringId.Map.Area.USA': string;
	    'DashboardWebStringId.Map.Area.Canada': string;
	    'DashboardWebStringId.Map.Viewport': string;
	    'DashboardWebStringId.Map.ShapeTitleAttribute': string;
	    'DashboardWebStringId.Map.UseBindingAttribute': string;
	    'DashboardWebStringId.Map.WeightedLegendType': string;
	    'DashboardWebStringId.Map.WeightedLegendType.Linear': string;
	    'DashboardWebStringId.Map.WeightedLegendType.Nested': string;
	    'DashboardWebStringId.Map.Orientation.Vertical': string;
	    'DashboardWebStringId.Map.Orientation.Horizontal': string;
	    'DashboardWebStringId.Map.Position.TopLeft': string;
	    'DashboardWebStringId.Map.Position.TopCenter': string;
	    'DashboardWebStringId.Map.Position.TopRight': string;
	    'DashboardWebStringId.Map.Position.BottomLeft': string;
	    'DashboardWebStringId.Map.Position.BottomCenter': string;
	    'DashboardWebStringId.Map.Position.BottomRight': string;
	    'DashboardWebStringId.Map.Viewport.TopLatitude': string;
	    'DashboardWebStringId.Map.Viewport.LeftLongitude': string;
	    'DashboardWebStringId.Map.Viewport.RightLongitude': string;
	    'DashboardWebStringId.Map.Viewport.BottomLatitude': string;
	    'DashboardWebStringId.Map.Viewport.CenterPointLatitude': string;
	    'DashboardWebStringId.Map.Viewport.CenterPointLongitude': string;
	    'DashboardWebStringId.Map.Viewport.CreateViewerPaddings': string;
	    'DashboardWebStringId.Map.ShowLegend': string;
	    'DashboardWebStringId.Pie.Type': string;
	    'DashboardWebStringId.Pie': string;
	    'DashboardWebStringId.Pie.Donut': string;
	    'DashboardWebStringId.Pie.LabelContentType.None': string;
	    'DashboardWebStringId.Pie.LabelContentType.Argument': string;
	    'DashboardWebStringId.Pie.LabelContentType.Percent': string;
	    'DashboardWebStringId.Pie.LabelContentType.ArgumentAndPercent': string;
	    'DashboardWebStringId.Pie.LabelContentType.Value': string;
	    'DashboardWebStringId.Pie.LabelContentType.ArgumentAndValue': string;
	    'DashboardWebStringId.Pie.LabelContentType.ValueAndPercent': string;
	    'DashboardWebStringId.Pie.LabelContentType.ArgumentValueAndPercent': string;
	    'DashboardWebStringId.Image.BindingMode': string;
	    'DashboardWebStringId.Image.BindingMode.BinaryArray': string;
	    'DashboardWebStringId.Image.BindingMode.Uri': string;
	    'DashboardWebStringId.RangeFilter.UriPattern': string;
	    'DashboardWebStringId.Image.SizeMode.Clip': string;
	    'DashboardWebStringId.Image.SizeMode.Stretch': string;
	    'DashboardWebStringId.Image.SizeMode.Zoom': string;
	    'DashboardWebStringId.Image.SizeMode.Squeeze': string;
	    'DashboardWebStringId.Image.HorizontalAlignment': string;
	    'DashboardWebStringId.Image.VerticalAlignment': string;
	    'DashboardWebStringId.Image.Alignment.Left': string;
	    'DashboardWebStringId.Image.Alignment.Center': string;
	    'DashboardWebStringId.Image.Alignment.Right': string;
	    'DashboardWebStringId.Image.Alignment.Top': string;
	    'DashboardWebStringId.Image.Alignment.Bottom': string;
	    'DashboardWebStringId.SeriesItem.SeriesDimensions': string;
	    'DashboardWebStringId.TextBox.Text': string;
	    'DashboardWebStringId.Chart.Orientation.Default': string;
	    'DashboardWebStringId.Chart.Orientation.RotateRight': string;
	    'DashboardWebStringId.Chart.Orientation.RotateLeft': string;
	    'DashboardWebStringId.Chart.OverlappingMode.Hide': string;
	    'DashboardWebStringId.Chart.OverlappingMode.None': string;
	    'DashboardWebStringId.Chart.Position.Outside': string;
	    'DashboardWebStringId.Chart.Position.Inside': string;
	    'DashboardWebStringId.Chart.SeriesType.Weighted': string;
	    'DashboardWebStringId.Coloring.MeasuresColoringMode': string;
	    'DashboardWebStringId.Coloring.Global': string;
	    'DashboardWebStringId.Coloring.Local': string;
	    'DashboardWebStringId.Delta.ValueType': string;
	    'DashboardWebStringId.Delta.ResultIndication': string;
	    'DashboardWebStringId.Delta.ThresholdType': string;
	    'DashboardWebStringId.Delta.ThresholdValue': string;
	    'DashboardWebStringId.Sparkline.ViewType': string;
	    'DashboardWebStringId.Sparkline.HighlightMinMaxPoints': string;
	    'DashboardWebStringId.Sparkline.HighlightStartEndPoints': string;
	    'DashboardWebStringId.Title.Aligment.Left': string;
	    'DashboardWebStringId.Title.Aligment.Center': string;
	    'DashboardWebStringId.Parameters.LookUpSettingsType.NoLookUp': string;
	    'DashboardWebStringId.Parameters.LookUpSettingsType.StaticList': string;
	    'DashboardWebStringId.Parameters.LookUpSettingsType.DynamicList': string;
	    'DashboardWebStringId.Parameters.LookUpSettingsType': string;
	    'DashboardWebStringId.Parameters.DefaultValue': string;
	    'DashboardWebStringId.DataItem': string;
	    'DashboardWebStringId.DataItem.Precision': string;
	    'DashboardWebStringId.DataItem.IncludeGroupSeparator': string;
	    'DashboardWebStringId.DataItem.ShowValues': string;
	    'DashboardWebStringId.DataItem.ShowTotals': string;
	    'DashboardWebStringId.DataItem.ShowGrandTotals': string;
	    'DashboardWebStringId.Dialog.ConfirmSaving': string;
	    'DashboardWebStringId.Dimension.GroupInterval': string;
	    'DashboardWebStringId.Dimension.SortMode': string;
	    'DashboardWebStringId.Dialog.ArgumentMode': string;
	    'DashboardWebStringId.Calculations': string;
	    'DashboardWebStringId.Calculations.Expression': string;
	    'DashboardWebStringId.Calculations.DifferenceCalculation': string;
	    'DashboardWebStringId.Calculations.Moving': string;
	    'DashboardWebStringId.Calculations.RunningTotal': string;
	    'DashboardWebStringId.Calculations.PercentOfTotal': string;
	    'DashboardWebStringId.Calculations.Rank': string;
	    'DashboardWebStringId.Calculations.DefinitionMode': string;
	    'DashboardWebStringId.Calculations.WindowDefinition': string;
	    'DashboardWebStringId.Calculations.WindowDefinitionModeSpecific': string;
	    'DashboardWebStringId.Calculations.WindowDefinitionModePredefined': string;
	    'DashboardWebStringId.Calculations.DifferenceType': string;
	    'DashboardWebStringId.TreemapLayoutAlgorithm': string;
	    'DashboardWebStringId.TilesLabelContentType': string;
	    'DashboardWebStringId.TilesTooltipContentType': string;
	    'DashboardWebStringId.GroupsLabelContentType': string;
	    'DashboardWebStringId.GroupsTooltipContentType': string;
	    'DashboardWebStringId.ShowOthersValue': string;
	    'DashboardWebStringId.TopNEnabled': string;
	    'DashboardWebStringId.Parameters.StaticListLookUpSettings': string;
	    'DashboardWebStringId.Parameters.DynamicListLookUpSettings': string;
	    'DashboardWebStringId.ConvertTo': string;
	    'DashboardWebStringId.Duplicate': string;
	    'DashboardWebStringId.DataSourceWizard': string;
	    'DashboardWebStringId.RangeFilter.CustomPeriods': string;
	    'DashboardWebStringId.RangeFilter.StartMode': string;
	    'DashboardWebStringId.RangeFilter.EndMode': string;
	    'DashboardWebStringId.RangeFilter.StartIntervalAndOffset': string;
	    'DashboardWebStringId.RangeFilter.EndIntervalAndOffset': string;
	    'DashboardWebStringId.RangeFilter.StartDate': string;
	    'DashboardWebStringId.RangeFilter.EndDate': string;
	    'DashboardWebStringId.RangeFilter.None': string;
	    'DashboardWebStringId.RangeFilter.Fixed': string;
	    'DashboardWebStringId.RangeFilter.Flow': string;
	    'DashboardWebStringId.Tabs.Binding': string;
	    'DashboardWebStringId.Tabs.DataShaping': string;
	    'DashboardWebStringId.Tabs.Format': string;
	    'DashboardWebStringId.Calculations.Types.Moving': string;
	    'DashboardWebStringId.Parameters.SortByMember': string;
	    'DashboardWebStringId.Parameters.LookUpSettingsTypeCaption': string;
	    'DashboardWebStringId.Dashboard.Items': string;
	    'DashboardWebStringId.Dashboard.Groups': string;
	    'DashboardWebStringId.Dashboard.LayoutItems': string;
	    'DashboardWebStringId.Dashboard.ComponentName': string;
	    'DashboardWebStringId.ButtonConfirm': string;
	    'DashboardWebStringId.Colorization.GroupInterval': string;
	    'DashboardWebStringId.ButtonOn': string;
	    'DashboardWebStringId.ButtonOff': string;
	    'DashboardWebStringId.ButtonYes': string;
	    'DashboardWebStringId.ButtonNo': string;
	    'DashboardWebStringId.ButtonDiscrete': string;
	    'DashboardWebStringId.ButtonContinuous': string;
	    'DashboardWebStringId.ButtonVisible': string;
	    'DashboardWebStringId.ButtonHidden': string;
	    'DashboardWebStringId.Calculations.PreviousValuesCount': string;
	    'DashboardWebStringId.Calculations.NextValuesCount': string;
	    'DashboardWebStringId.Calculations.RankType': string;
	    'DashboardWebStringId.Calculations.RankOrder': string;
	    'DashboardWebStringId.TileOptions': string;
	    'DashboardWebStringId.MapLockNavigationLocked': string;
	    'DashboardWebStringId.MapLockNavigationUnlocked': string;
	    'DashboardWebStringId.ConditionalFormatting.BarOptions': string;
	    'DashboardWebStringId.ConditionalFormatting.CalculatedBy': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType': string;
	    'DashboardWebStringId.ConditionalFormatting.PredefinedColor': string;
	    'DashboardWebStringId.ConditionalFormatting.AppearanceType': string;
	    'DashboardWebStringId.ConditionalFormatting.FontStyle': string;
	    'DashboardWebStringId.ConditionalFormatting.FontFamily': string;
	    'DashboardWebStringId.ConditionalFormatting.FontRegular': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.None': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenArrowUp': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowUpInclineArrow': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowSideArrow': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDownInclineArrow': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedDownArrow': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayArrowUp': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayUpInclineArrow': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGraySideArrow': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownInclineArrow': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownArrow': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDash': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedTriangleDown': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenTriangleUp': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayStar': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.RatingHalfGrayStar': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayStar': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayCircle': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.Rating1QuarterGrayCircle': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.Rating2QuartersGrayCircle': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.Rating3QuartersGrayCircle': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayCircle': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.Rating4Bars': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.Rating3Bars': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.Rating2Bars': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.Rating1Bar': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.Rating0Bars': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.Rating4FilledBoxes': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.Rating3FilledBoxes': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.Rating2FilledBoxes': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.Rating1FilledBox': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.Rating0FilledBoxes': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenTrafficLight': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTrafficLight': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedTrafficLight': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenCircle': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowCircle': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedCircle': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightRedCircle': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightGrayCircle': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTriangle': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedDiamond': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenCheck': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowExclamation': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedCross': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledGreenCheck': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledYellowExclamation': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledRedCross': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenFlag': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowFlag': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedFlag': string;
	    'DashboardWebStringId.ConditionalFormatting.IntersectionColumnDimension': string;
	    'DashboardWebStringId.ConditionalFormatting.IntersectionRowDimension': string;
	    'DashboardWebStringId.ConditionalFormatting.IntersectionLevelMode': string;
	    'DashboardWebStringId.ConditionalFormatting.GradientRangeBar': string;
	    'DashboardWebStringId.ConditionalFormatting.RangeGradient': string;
	    'DashboardWebStringId.ConditionalFormatting.SegmentNumber': string;
	    'DashboardWebStringId.ConditionalFormatting.ValueComparison': string;
	    'DashboardWebStringId.ConditionalFormatting.Ranges': string;
	    'DashboardWebStringId.ConditionalFormatting.AverageType': string;
	    'DashboardWebStringId.ConditionalFormatting.Above': string;
	    'DashboardWebStringId.ConditionalFormatting.AboveOrEqual': string;
	    'DashboardWebStringId.ConditionalFormatting.Below': string;
	    'DashboardWebStringId.ConditionalFormatting.BelowOrEqual': string;
	    'DashboardWebStringId.ConditionalFormatting.StyleSettingsType': string;
	    'DashboardWebStringId.ConditionalFormatting.Positive': string;
	    'DashboardWebStringId.ConditionalFormatting.Negative': string;
	    'DashboardWebStringId.ConditionalFormatting.MinimumType': string;
	    'DashboardWebStringId.ConditionalFormatting.MaximumType': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.None': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.SpecificDate': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.BeyondThisYear': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.LaterThisYear': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.LaterThisMonth': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.LaterThisWeek': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.NextWeek': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.Tomorrow': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.Today': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.Yesterday': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisWeek': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.LastWeek': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisMonth': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisYear': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.PriorThisYear': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.Empty': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.User': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.Beyond': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.ThisWeek': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.ThisMonth': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.MonthAfter1': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.MonthAfter2': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo1': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo2': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo3': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo4': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo5': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo6': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.Earlier': string;
	    'DashboardWebStringId.ConditionalFormatting.CardRuleTypeDataItem': string;
	    'DashboardWebStringId.ConditionalFormatting.CardRuleTypeCard': string;
	    'DashboardWebStringId.Colorization.NoSelectedSchema': string;
	    'DashboardWebStringId.Colorization.ColorSchemes': string;
	    'DashboardWebStringId.LayoutHasBeenChangedDialogMessage': string;
	    'DashboardWebStringId.SaveConfirmationDialogMessage': string;
	    'DashboardWebStringId.SaveChangesDialogMessage': string;
	    'DashboardWebStringId.Dialog.ChangeDataMemberMessage': string;
	    'DashboardWebStringId.Dialog.RemovedDataItemsMessage': string;
	    'DashboardWebStringId.Dialog.ConfirmChanges': string;
	    'DashboardWebStringId.Dialog.Save': string;
	    'DashboardWebStringId.Dialog.DoNotSave': string;
	    'DashboardWebStringId.Dialog.ButtonYes': string;
	    'DashboardWebStringId.Dialog.ButtonDontChange': string;
	    'DashboardWebStringId.Colorization.ColorSchemeType': string;
	    'DashboardWebStringId.Colorization.MeasureNames': string;
	    'DashboardWebStringId.Colorization.AddColor': string;
	    'DashboardWebStringId.Colorization.ValidationSelectMeasure': string;
	    'DashboardWebStringId.ColoringModeAuto': string;
	    'DashboardWebStringId.ColoringModeOff': string;
	    'DashboardWebStringId.ColoringModeOn': string;
	    'DashboardWebStringId.ColorScheme.Empty': string;
	    'DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButton': string;
	    'DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip': string;
	    'DashboardWebStringId.ConditionalFormatting.Miscellaneous': string;
	    'DashboardWebStringId.Dashboards': string;
	    'DashboardWebStringId.EditInDesigner': string;
	    'DashboardWebStringId.NoDashboards': string;
	    'DashboardWebStringId.AddNewDashboard': string;
	    'DashboardWebStringId.NewDashboard': string;
	    'DashboardWebStringId.Binding.Searching': string;
	    'DashboardWebStringId.Binding.EmptySearchResult': string;
	    'DashboardWebStringId.Errors.AttemptToLoadData': string;
	    'DashboardWebStringId.ConditionType': string;
	    'DashboardWebStringId.ConditionalFormatting.UnsupportedDataType': string;
	    'DashboardWebStringId.FormatRule': string;
	    'DashboardWebStringId.Notification.DashboardSaving': string;
	    'DashboardWebStringId.Notification.DashboardSaved': string;
	    'DashboardWebStringId.Notification.DashboardCanNotBeSaved': string;
	    'DashboardWebStringId.Notification.DashboardSavingIsNotAvailable': string;
	    'DashboardWebStringId.Notification.AttemptToLoadDashboards': string;
	    'DashboardWebStringId.Notification.DashboardLoading': string;
	    'DashboardWebStringId.Notification.AttemptToLoadDashboard': string;
	    'DashboardWebStringId.Notification.AttemptToConnectionStrings': string;
	    'DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode': string;
	    'DashboardWebStringId.Notification.AttemptToLoadParameterValues': string;
	    'DashboardWebStringId.Notification.AttemptToGetUnderlyingData': string;
	    'DashboardWebStringId.Notification.AttemptToConvertItemToType': string;
	    'DashboardWebStringId.Notification.AttemptToLoadDimensionUniqueValues': string;
	    'DashboardWebStringId.Notification.AttemptToLoadFieldListForDataSource': string;
	    'DashboardWebStringId.Notification.AttemptToGetColorScheme': string;
	    'DashboardWebStringId.Notification.NewDashboardCannotBeCreated': string;
	    'DashboardWebStringId.Notification.ErrorHasOccuredOn': string;
	    'DashboardWebStringId.Notification.UnsupportedDataSourceType': string;
	    'DashboardWebStringId.LimitVisibleData.DisplayAllDataTooltip': string;
	    'DashboardWebStringId.LimitVisibleData.IncreasePerformanceTooltip': string;
	    'DashboardWebStringId.ConditionalFormatting.Condition': string;
	    'DashboardWebStringId.CardLayout.MinWidth': string;
	    'DashboardWebStringId.CardLayout.MaxWidth': string;
	    'DashboardWebStringId.CardLayout.Editor.CardLayout': string;
	    'DashboardWebStringId.CardLayout.Editor.FormatOptions': string;
	    'DashboardWebStringId.CardLayout.LayoutOptions': string;
	    'DashboardWebStringId.CardLayout.ResetTemplate': string;
	    'DashboardWebStringId.CardLayout.ApplyToAllCards': string;
	    'DashboardWebStringId.Binding.ValuesPattern': string;
	    'DashboardWebStringId.Parameters.ParameterNameShouldBeUnique': string;
	    'DashboardWebStringId.Title.ImageEmbedded': string;
	    'DashboardWebStringId.Title.ImageLinked': string;
	    'DashboardWebStringId.Title.ImageNone': string;
	    'DashboardWebStringId.RangeFilter.SetDefaultCustomPeriod': string;
	    'DashboardWebStringId.RangeFilter.ClearDefaultCustomPeriod': string;
	    'DashboardWebStringId.MobileLayout.Back': string;
	    'DashboardWebStringId.MobileLayout.SwitchToViewer': string;
	    'DashboardWebStringId.Search': string;
	    'DashboardStringId.DefaultNameTabPage': string;
	    'DashboardStringId.DefaultNameChartPane': string;
	    'DashboardStringId.NewCalculatedFieldNamePrefix': string;
	    'DashboardStringId.NewParameterNamePrefix': string;
	    'AnalyticsCoreStringId.Parameter_Type_String': string;
	    'AnalyticsCoreStringId.Parameter_Type_DateTime': string;
	    'AnalyticsCoreStringId.Parameter_Type_Int16': string;
	    'AnalyticsCoreStringId.Parameter_Type_Int32': string;
	    'AnalyticsCoreStringId.Parameter_Type_Int64': string;
	    'AnalyticsCoreStringId.Parameter_Type_Float': string;
	    'AnalyticsCoreStringId.Parameter_Type_Double': string;
	    'AnalyticsCoreStringId.Parameter_Type_Decimal': string;
	    'AnalyticsCoreStringId.Parameter_Type_Boolean': string;
	    'AnalyticsCoreStringId.Parameter_Type_Guid': string;
	    'AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption': string;
	    'DataAccessUIStringId.FiltersView': string;
	    'DashboardStringId.SeriesTypeGroupArea': string;
	    'DashboardStringId.SeriesTypeGroupBar': string;
	    'DashboardStringId.SeriesTypeGroupBubble': string;
	    'DashboardStringId.SeriesTypeGroupFinancial': string;
	    'DashboardStringId.SeriesTypeGroupPointLine': string;
	    'DashboardStringId.SeriesTypeGroupRange': string;
	    'DashboardStringId.FunctionCategoryWindow': string;
	    'DashboardStringId.FunctionCategoryAggregate': string;
	    'DashboardStringId.FunctionCategoryAdvanced': string;
	    'DashboardStringId.FunctionDescriptionWindowAvg': string;
	    'DashboardStringId.FunctionDescriptionRunningMin': string;
	    'DashboardStringId.FunctionDescriptionTotal': string;
	    'DashboardStringId.FunctionDescriptionRankCompetition': string;
	    'DashboardStringId.FunctionDescriptionLookup': string;
	    'DashboardStringId.FunctionDescriptionRunningCount': string;
	    'DashboardStringId.FunctionDescriptionWindowMax': string;
	    'DashboardStringId.FunctionDescriptionVarp': string;
	    'DashboardStringId.FunctionDescriptionRunningAvg': string;
	    'DashboardStringId.FunctionDescriptionFirst': string;
	    'DashboardStringId.FunctionDescriptionWindowMin': string;
	    'DashboardStringId.FunctionDescriptionWindowStdDev': string;
	    'DashboardStringId.FunctionDescriptionLast': string;
	    'DashboardStringId.FunctionDescriptionWindowCount': string;
	    'DashboardStringId.FunctionDescriptionCountDistinct': string;
	    'DashboardStringId.FunctionDescriptionIndex': string;
	    'DashboardStringId.FunctionDescriptionWindowStdDevp': string;
	    'DashboardStringId.FunctionDescriptionWindowMode': string;
	    'DashboardStringId.FunctionDescriptionRunningMax': string;
	    'DashboardStringId.FunctionDescriptionRankPercentile': string;
	    'DashboardStringId.FunctionDescriptionRankDense': string;
	    'DashboardStringId.FunctionDescriptionWindowSum': string;
	    'DashboardStringId.FunctionDescriptionWindowCountDistinct': string;
	    'DashboardStringId.FunctionDescriptionStdDevp': string;
	    'DashboardStringId.FunctionDescriptionSize': string;
	    'DashboardStringId.FunctionDescriptionMedian': string;
	    'DashboardStringId.FunctionDescriptionRankModified': string;
	    'DashboardStringId.FunctionDescriptionWindowMedian': string;
	    'DashboardStringId.FunctionDescriptionRunningSum': string;
	    'DashboardStringId.FunctionDescriptionWindowVarp': string;
	    'DashboardStringId.FunctionDescriptionWindowVar': string;
	    'DashboardStringId.FunctionDescriptionStdDev': string;
	    'DashboardStringId.FunctionDescriptionRankUnique': string;
	    'DashboardStringId.FunctionDescriptionVar': string;
	    'DashboardStringId.FunctionDescriptionAggr': string;
	    'DashboardStringId.FunctionDescriptionAggrJoinRule': string;
	    'DashboardStringId.FunctionDescriptionWindowDefinition': string;
	    'DashboardStringId.FunctionDescriptionWindowDefinitionPartitionBy': string;
	    'DashboardStringId.FunctionDescriptionWindowDefinitionOrderBy': string;
	    'DashboardStringId.FunctionDescriptionWindowDefinitionOrderAsc': string;
	    'DashboardStringId.FunctionDescriptionWindowDefinitionOrderDesc': string;
	    'DashboardStringId.AggregateExFunctionDescriptionCountNotNull': string;
	    'DashboardStringId.AggregateExFunctionDescriptionMode': string;
	    'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHour': string;
	    'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinute': string;
	    'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinuteSecond': string;
	    'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateMonthYear': string;
	    'DashboardStringId.FunctionDescriptionGetDateWeekYear': string;
	    'DashboardStringId.FunctionDescriptionGetDateWeekYear2': string;
	    'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateQuarterYear': string;
	    'DashboardStringId.FunctionOperatorExFunctionDescriptionGetQuarter': string;
	    'DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfMonth': string;
	    'DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfYear': string;
	    'DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime3': string;
	    'DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime4': string;
	    'DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime5': string;
	    'DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime6': string;
	    'DashboardStringId.FunctionOperatorExFunctionDescriptionToBoolean': string;
	    'DashboardStringId.FunctionOperatorExFunctionDescriptionToDateTime': string;
	    'DashboardStringId.SparklineIndicationModeLine': string;
	    'DashboardStringId.SparklineIndicationModeArea': string;
	    'DashboardStringId.SparklineIndicationModeBar': string;
	    'DashboardStringId.SparklineIndicationModeWinLoss': string;
	    'DashboardStringId.DefaultNameDateFilterItem': string;
	    'DashboardWebStringId.DateFilter.FilterType': string;
	    'DashboardWebStringId.DateFilter.FilterTypeExact': string;
	    'DashboardWebStringId.DateFilter.FilterTypeAfter': string;
	    'DashboardWebStringId.DateFilter.FilterTypeBefore': string;
	    'DashboardWebStringId.DateFilter.FilterTypeBetween': string;
	    'DashboardWebStringId.DateFilter.ArrangementMode': string;
	    'DashboardWebStringId.DateFilter.ArrangementModeAutoHeight': string;
	    'DashboardWebStringId.DateFilter.ArrangementModeHorizontal': string;
	    'DashboardWebStringId.DateFilter.ArrangementModeVertical': string;
	    'DashboardWebStringId.DateFilter.DatePickerLocation': string;
	    'DashboardWebStringId.DateFilter.DatePickerLocationFar': string;
	    'DashboardWebStringId.DateFilter.DatePickerLocationNear': string;
	    'DashboardWebStringId.DateFilter.DatePickerLocationHidden': string;
	    'DashboardStringId.DateFilterDisplayTextPattern': string;
	    'DashboardStringId.DateFilterDatePickerButtonDefaultText': string;
	    'DashboardStringId.FromDatePeriodCaption': string;
	    'DashboardStringId.ToDatePeriodCaption': string;
	    'DashboardStringId.FromToDatePeriodCaption': string;
	    'DashboardStringId.UniqueNameValidationMessage': string;
	    'DashboardStringId.GridTotalAutoTemplate': string;
	    'DashboardStringId.GridTotalValueTemplate': string;
	    'DashboardStringId.GridTotalTemplate': string;
	    'DashboardStringId.GridTotalTypeCount': string;
	    'DashboardStringId.GridTotalTypeMin': string;
	    'DashboardStringId.GridTotalTypeMax': string;
	    'DashboardStringId.GridTotalTypeAvg': string;
	    'DashboardStringId.GridTotalTypeSum': string;
	    'DashboardStringId.ActionShowDataInspector': string;
	    'DashboardStringId.InspectedData': string;
	    'DashboardStringId.InspectedTypeFormatString': string;
	    'DashboardStringId.AggregatedDataType': string;
	    'DashboardStringId.RawDataType': string;
	    'DashboardStringId.OLAPUnavailableRawData': string;
	    'DashboardStringId.SparklineValuesSeparator': string;
	    'DashboardStringId.SparklineArgumentValueSeparator': string;
	    'DashboardWebStringId.Grid.FilterClause.ApplyFilter': string;
	    'DashboardWebStringId.Grid.FilterClause.ResetOperation': string;
	    'DashboardWebStringId.Grid.FilterClause.Contains': string;
	    'DashboardWebStringId.Grid.FilterClause.DoesNotContain': string;
	    'DashboardWebStringId.Grid.FilterClause.StartsWith': string;
	    'DashboardWebStringId.Grid.FilterClause.EndsWith': string;
	    'DashboardWebStringId.Grid.FilterClause.Equals': string;
	    'DashboardWebStringId.Grid.FilterClause.DoesNotEqual': string;
	    'DashboardWebStringId.Grid.FilterClause.Less': string;
	    'DashboardWebStringId.Grid.FilterClause.Greater': string;
	    'DashboardWebStringId.Grid.FilterClause.LessOrEqual': string;
	    'DashboardWebStringId.Grid.FilterClause.GreaterOrEqual': string;
	    'DashboardWebStringId.Grid.FilterClause.Between': string;
	    'DashboardWebStringId.Grid.FilterClause.BetweenStart': string;
	    'DashboardWebStringId.Grid.FilterClause.BetweenEnd': string;
	    'DashboardWebStringId.AccordionTab.Content': string;
	    'DashboardWebStringId.TextBoxItemEditor.NoFields': string;
	    'DashboardWebStringId.TextBoxItemEditor.InsertField': string;
	    'DashboardWebStringId.TextBoxItemEditor.EditTextButton': string;
	    'DashboardWebStringId.TextBoxItemEditor.DialogCaption': string;
	    'DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose': string;
	    'DashboardWebStringId.TextBoxItemEditor.DialogClose': string;
	    'DashboardStringId.StartDate': string;
	    'DashboardStringId.EndDate': string;
	    'DashboardWebStringId.AccordionTab.MeasureFilter': string;
	    'DashboardStringId.FunctionDescriptionAggregateFilter': string;
	    'DashboardWebStringId.TabPages': string;
	    'DashboardWebStringId.More': string;
	    'DashboardStringId.MeasureFilterCaptionFormatString': string;
	};
	export type DashboardLocalizationId = keyof typeof defaultLocalization;
	export function getLocalizationById(key: DashboardLocalizationId): any;
	export function formatLocalizable(localizationId: DashboardLocalizationId, arg1: any): any;
	export function getDefaultLocalization(): {
	    'DashboardStringId.ActionClearMasterFilter': string;
	    'DashboardStringId.ActionClearSelection': string;
	    'DashboardStringId.ActionOtherValues': string;
	    'DashboardStringId.ActionDrillUp': string;
	    'DashboardStringId.ActionExportTo': string;
	    'DashboardStringId.ActionExportToPdf': string;
	    'DashboardStringId.ActionExportToImage': string;
	    'DashboardStringId.ActionExportToExcel': string;
	    'DashboardStringId.RangeFilterCustomDateTimePeriod': string;
	    'DashboardStringId.ActionExportTemplate': string;
	    'DashboardStringId.ActionAllowMultiselection': string;
	    'DashboardStringId.DashboardNullValue': string;
	    'DashboardStringId.TopNOthersValue': string;
	    'DashboardStringId.DashboardErrorValue': string;
	    'DashboardStringId.DateTimeQuarterFormat': string;
	    'DashboardStringId.MessageLoading': string;
	    'DashboardStringId.ParametersFormCaption': string;
	    'DashboardStringId.ParametersSelectorText': string;
	    'DashboardStringId.ParametersFormAllowNullColumnCaption': string;
	    'DashboardStringId.ParametersFormValueColumnCaption': string;
	    'DashboardStringId.ParametersFormNameColumnCaption': string;
	    'DashboardStringId.ButtonOK': string;
	    'DashboardStringId.ButtonCancel': string;
	    'DashboardStringId.SelectDate': string;
	    'DashboardStringId.ButtonReset': string;
	    'DashboardStringId.ButtonSubmit': string;
	    'DashboardStringId.ButtonApply': string;
	    'DashboardStringId.ButtonExport': string;
	    'DashboardStringId.GridResetColumnWidths': string;
	    'DashboardStringId.GridSortAscending': string;
	    'DashboardStringId.GridSortDescending': string;
	    'DashboardStringId.GridClearSorting': string;
	    'DashboardStringId.PivotGridTotal': string;
	    'DashboardStringId.PivotGridGrandTotal': string;
	    'DashboardStringId.ChartTotalValue': string;
	    'DashboardStringId.PageLayout': string;
	    'DashboardStringId.PageLayoutAuto': string;
	    'DashboardStringId.PageLayoutPortrait': string;
	    'DashboardStringId.PageLayoutLandscape': string;
	    'DashboardStringId.PaperKind': string;
	    'DashboardStringId.PaperKindLetter': string;
	    'DashboardStringId.PaperKindLegal': string;
	    'DashboardStringId.PaperKindExecutive': string;
	    'DashboardStringId.PaperKindA5': string;
	    'DashboardStringId.PaperKindA4': string;
	    'DashboardStringId.PaperKindA3': string;
	    'DashboardStringId.ScaleMode': string;
	    'DashboardStringId.ScaleModeNone': string;
	    'DashboardStringId.ScaleModeUseScaleFactor': string;
	    'DashboardStringId.ScaleModeAutoFitToPagesWidth': string;
	    'DashboardStringId.AutoFitPageCount': string;
	    'DashboardStringId.ScaleFactor': string;
	    'DashboardStringId.PrintHeadersOnEveryPage': string;
	    'DashboardStringId.FitToPageWidth': string;
	    'DashboardStringId.SizeMode': string;
	    'DashboardStringId.SizeModeNone': string;
	    'DashboardStringId.SizeModeStretch': string;
	    'DashboardStringId.SizeModeZoom': string;
	    'DashboardStringId.AutoArrangeContent': string;
	    'DashboardStringId.ImageFormat': string;
	    'DashboardStringId.ExcelFormat': string;
	    'DashboardStringId.CsvValueSeparator': string;
	    'DashboardStringId.ExportFilters': string;
	    'DashboardStringId.ExportParameters': string;
	    'DashboardStringId.DashboardStatePosition': string;
	    'DashboardStringId.Resolution': string;
	    'DashboardStringId.ShowTitle': string;
	    'DashboardStringId.Title': string;
	    'DashboardStringId.FileName': string;
	    'DashboardStringId.FilterStatePresentationAfter': string;
	    'DashboardStringId.FilterStatePresentationAfterAndSplitPage': string;
	    'DashboardStringId.FilterStatePresentationSplitSheet': string;
	    'DashboardStringId.MessageCustomItemIsNotSupported': string;
	    'DashboardStringId.MessageGridHasNoData': string;
	    'DashboardStringId.MessagePivotHasNoData': string;
	    'DashboardStringId.SparklineTooltipStartValue': string;
	    'DashboardStringId.SparklineTooltipEndValue': string;
	    'DashboardStringId.SparklineTooltipMinValue': string;
	    'DashboardStringId.SparklineTooltipMaxValue': string;
	    'DashboardStringId.OpenCaption': string;
	    'DashboardStringId.HighCaption': string;
	    'DashboardStringId.LowCaption': string;
	    'DashboardStringId.CloseCaption': string;
	    'DashboardStringId.InitialExtent': string;
	    'DashboardStringId.FilterElementShowAllItem': string;
	    'DashboardStringId.NumericFormatUnitSymbolThousands': string;
	    'DashboardStringId.NumericFormatUnitSymbolMillions': string;
	    'DashboardStringId.NumericFormatUnitSymbolBillions': string;
	    'DashboardStringId.ActionSelectDateTimePeriod': string;
	    'DashboardStringId.RangeFilterSelectRange': string;
	    'DashboardStringId.FilterElementCheckedComboBoxNoDataCaption': string;
	    'DashboardStringId.FilterElementRadioComboBoxNoDataCaption': string;
	    'DashboardStringId.FilterElementNoDataToDisplay': string;
	    'DashboardStringId.RangeFilterSelectRangeFromCaption': string;
	    'DashboardStringId.RangeFilterSelectRangeToCaption': string;
	    'DashboardWebStringId.DashboardParameters': string;
	    'DashboardStringId.DataSourceDataMember': string;
	    'DashboardStringId.DescriptionMeasures': string;
	    'DashboardWebStringId.TextBoxFormatText': string;
	    'DashboardStringId.NumericFormatUnitCaption': string;
	    'DashboardWebStringId.SummaryType': string;
	    'DashboardStringId.CalculationTypeExpression': string;
	    'DevExpressWebStringId.CalculatedFieldDataType': string;
	    'DashboardStringId.ValueCaption': string;
	    'DashboardStringId.Value1Caption': string;
	    'DashboardStringId.Value2Caption': string;
	    'DashboardStringId.CommandFormatRuleTopBottom': string;
	    'DashboardStringId.CommandFormatRuleAboveBelowAverage': string;
	    'DashboardStringId.CommandFormatRuleBar': string;
	    'DashboardStringId.CommandFormatRuleColorRangeBar': string;
	    'DashboardStringId.CommandFormatRuleGradientRangeBar': string;
	    'DashboardStringId.FormatRuleStyleAppearance': string;
	    'DashboardStringId.FormatRuleStyleIcons': string;
	    'DashboardStringId.FormatRuleNegativeStyle': string;
	    'DashboardStringId.CommandFormatRuleExpression': string;
	    'DashboardWebStringId.TopNMode': string;
	    'DashboardStringId.CommandFormatRuleRangeSet': string;
	    'DashboardStringId.CommandFormatRuleValue': string;
	    'DashboardStringId.CommandFormatRuleDateOccurring': string;
	    'DashboardWebStringId.ConditionalFormatting.Appearance.BackColor': string;
	    'DashboardWebStringId.ConditionalFormatting.Appearance.ForeColor': string;
	    'DashboardStringId.DescriptionBoundImageAttribute': string;
	    'DashboardWebStringId.ShowCaptionText': string;
	    'DashboardWebStringId.DisplayItemAsPage': string;
	    'DashboardStringId.DefaultNameItemGroup': string;
	    'DashboardStringId.DefaultNameTabContainerItem': string;
	    'DashboardStringId.DefaultDataSourceName': string;
	    'DashboardWebStringId.CrossDataSourceFiltering': string;
	    'DashboardStringId.RangeFilterCalculationAlongSeries': string;
	    'DashboardStringId.RangeFilterCalculationAlongArgument': string;
	    'DashboardStringId.DescriptionItemSeries': string;
	    'DashboardStringId.DescriptionSeries': string;
	    'DashboardWebStringId.Chart.SeriesType': string;
	    'DashboardStringId.DescriptionDimensions': string;
	    'DashboardWebStringId.TreeView.AutoExpand': string;
	    'DashboardWebStringId.ConditionalFormatting.ConditionMinimum': string;
	    'DashboardWebStringId.ConditionalFormatting.ConditionMaximum': string;
	    'DashboardStringId.DescriptionItemDimension': string;
	    'DashboardStringId.DescriptionItemMeasure': string;
	    'DashboardWebStringId.Grid.MergeCells': string;
	    'DashboardWebStringId.Grid.ColumnWidthMode': string;
	    'DashboardWebStringId.Grid.BandedRows': string;
	    'DashboardWebStringId.Grid.VerticalLines': string;
	    'DashboardWebStringId.Grid.HorizontalLines': string;
	    'DashboardWebStringId.Grid.ColumnHeaders': string;
	    'DashboardWebStringId.Grid.WordWrap': string;
	    'DashboardStringId.ActualValueCaption': string;
	    'DashboardStringId.TargetValueCaption': string;
	    'DashboardStringId.UriPatternCaption': string;
	    'DashboardStringId.UriCaption': string;
	    'DashboardStringId.DisplayValueCaption': string;
	    'DashboardStringId.WeightCaption': string;
	    'DashboardStringId.DescriptionItemColor': string;
	    'DashboardStringId.Latitude': string;
	    'DashboardStringId.Longitude': string;
	    'DashboardWebStringId.GeoPointMapClusterization': string;
	    'DashboardWebStringId.MapLockNavigation': string;
	    'DashboardWebStringId.WeightedLegendGalleryGroup': string;
	    'DashboardStringId.DescriptionItemArgument': string;
	    'DashboardWebStringId.PieMapIsWeighted': string;
	    'DashboardWebStringId.InteractivityOptions.IgnoreMasterFilters': string;
	    'DashboardWebStringId.InteractivityOptions.DrillDown': string;
	    'DashboardWebStringId.Pie.ShowCaptions': string;
	    'DashboardStringId.DescriptionColumns': string;
	    'DashboardStringId.DescriptionRows': string;
	    'DashboardStringId.DescriptionValues': string;
	    'DashboardStringId.DescriptionArguments': string;
	    'DashboardStringId.TextGroupIntervalAlphabetical': string;
	    'DashboardStringId.ActionMaximizeDashboardItem': string;
	    'DashboardStringId.ActionRestoreDashboardItem': string;
	    'DevExpress.DashboardCommon.DynamicListLookUpSettings.DataSource': string;
	    'DevExpress.DashboardCommon.DynamicListLookUpSettings.DataMember': string;
	    'DevExpress.DashboardCommon.DynamicListLookUpSettings.ValueMember': string;
	    'DevExpress.DashboardCommon.DynamicListLookUpSettings.DisplayMember': string;
	    'DevExpress.DashboardCommon.DynamicListLookUpSettings.SortOrder': string;
	    'DevExpress.DashboardCommon.DashboardParameter.Visible': string;
	    'DevExpress.DashboardCommon.DashboardParameter.Description': string;
	    'DevExpress.DashboardCommon.DashboardParameter.AllowMultiselect': string;
	    'DevExpress.DashboardCommon.DashboardParameter.AllowNull': string;
	    'DevExpress.DashboardCommon.DashboardParameter.SelectAllValues': string;
	    'DevExpress.DashboardCommon.StaticListLookUpSettings.Values': string;
	    'DevExpress.DashboardCommon.DimensionSortOrder.Ascending': string;
	    'DevExpress.DashboardCommon.DimensionSortOrder.Descending': string;
	    'DevExpress.DashboardCommon.DimensionSortOrder.None': string;
	    'DashboardWebStringId.AccordionTab.ScatterChartPointLabelOptions': string;
	    'DashboardWebStringId.AccordionTab.ChoroplethMapShapeLabelsAttribute': string;
	    'DashboardStringId.CommandFormatRuleTopN': string;
	    'DashboardWebStringId.Type': string;
	    'DashboardWebStringId.Grid.ColumnWidth': string;
	    'DashboardWebStringId.AccordionTab.ShowTotals': string;
	    'DashboardWebStringId.AccordionTab.Layout': string;
	    'DashboardWebStringId.AccordionTab.PivotInitialState': string;
	    'DashboardWebStringId.AccordionTab.ImageOptions': string;
	    'DashboardWebStringId.AccordionTab.Labels': string;
	    'DashboardWebStringId.AccordionTab.MapLegend': string;
	    'DashboardWebStringId.AccordionTab.WeightedLegend': string;
	    'DashboardWebStringId.AccordionTab.Common': string;
	    'DashboardWebStringId.AccordionTab.ChartLegend': string;
	    'DashboardWebStringId.Grid.AutoFitToContentsColumnWidthMode': string;
	    'DashboardWebStringId.Grid.AutoFitToGridColumnWidthMode': string;
	    'DashboardWebStringId.Grid.ManualGridColumnWidthMode': string;
	    'DashboardStringId.DateTimeIntervalYear': string;
	    'DashboardStringId.DateTimeIntervalQuarter': string;
	    'DashboardStringId.DateTimeIntervalMonth': string;
	    'DashboardStringId.DateTimeIntervalWeek': string;
	    'DashboardStringId.DateTimeIntervalDay': string;
	    'DashboardStringId.DateTimeIntervalHour': string;
	    'DashboardStringId.DateTimeIntervalMinute': string;
	    'DashboardStringId.DateTimeIntervalSecond': string;
	    'DashboardStringId.DateTimeGroupIntervalYear': string;
	    'DashboardStringId.DateTimeGroupIntervalQuarter': string;
	    'DashboardStringId.DateTimeGroupIntervalMonth': string;
	    'DashboardStringId.DateTimeGroupIntervalDay': string;
	    'DashboardStringId.DateTimeGroupIntervalHour': string;
	    'DashboardStringId.DateTimeGroupIntervalMinute': string;
	    'DashboardStringId.DateTimeGroupIntervalSecond': string;
	    'DashboardStringId.DateTimeGroupIntervalDayOfYear': string;
	    'DashboardStringId.DateTimeGroupIntervalDayOfWeek': string;
	    'DashboardStringId.DateTimeGroupIntervalWeekOfYear': string;
	    'DashboardStringId.DateTimeGroupIntervalWeekOfMonth': string;
	    'DashboardStringId.DateTimeGroupIntervalMonthYear': string;
	    'DashboardStringId.DateTimeGroupIntervalQuarterYear': string;
	    'DashboardStringId.DateTimeGroupIntervalWeekYear': string;
	    'DashboardStringId.DateTimeGroupIntervalDayMonthYear': string;
	    'DashboardStringId.DateTimeGroupIntervalDateHour': string;
	    'DashboardStringId.DateTimeGroupIntervalDateHourMinute': string;
	    'DashboardStringId.DateTimeGroupIntervalDateHourMinuteSecond': string;
	    'DashboardStringId.DateTimeGroupIntervalExactDate': string;
	    'DashboardStringId.GroupIntervalNone': string;
	    'DashboardWebStringId.Treemap.StripedLayoutAlgorithm': string;
	    'DashboardWebStringId.Treemap.SquarifiedLayoutAlgorithm': string;
	    'DashboardWebStringId.Treemap.SliceAndDiceLayoutAlgorithm': string;
	    'DashboardWebStringId.Treemap.TileLabelsArgumentAndValue': string;
	    'DashboardWebStringId.Treemap.TileLabelsNone': string;
	    'DashboardWebStringId.Treemap.TileLabelsValue': string;
	    'DashboardWebStringId.Treemap.TileLabelsArgument': string;
	    'DashboardWebStringId.Treemap.TileTooltipsArgumentAndValue': string;
	    'DashboardWebStringId.Treemap.TileTooltipsArgument': string;
	    'DashboardWebStringId.Treemap.TileTooltipsValue': string;
	    'DashboardWebStringId.Treemap.TileTooltipsNone': string;
	    'DashboardWebStringId.Treemap.TopLeftToBottomRightLayoutDirection': string;
	    'DashboardWebStringId.Treemap.TopRightToBottomLeftLayoutDirection': string;
	    'DashboardWebStringId.Treemap.BottomLeftToTopRightLayoutDirection': string;
	    'DashboardWebStringId.Treemap.BottomRightToTopLeftLayoutDirection': string;
	    'DashboardWebStringId.Treemap.LayoutDirection': string;
	    'DashboardWebStringId.Treemap.GroupLabelsNone': string;
	    'DashboardWebStringId.Treemap.GroupLabelsArgument': string;
	    'DashboardWebStringId.Treemap.GroupLabelsValue': string;
	    'DashboardWebStringId.Treemap.GroupLabelsArgumentAndValue': string;
	    'DashboardWebStringId.Treemap.GroupTooltipsNone': string;
	    'DashboardWebStringId.Treemap.GroupTooltipsArgument': string;
	    'DashboardWebStringId.Treemap.GroupTooltipsValue': string;
	    'DashboardWebStringId.Treemap.GroupTooltipsArgumentAndValue': string;
	    'DashboardStringId.RankOrderAscending': string;
	    'DashboardStringId.RankOrderDescending': string;
	    'DashboardStringId.DateTimeFormatYearFormatDefaultCaption': string;
	    'DashboardStringId.DateTimeFormatYearFormatFullCaption': string;
	    'DashboardStringId.DateTimeFormatYearFormatAbbreviatedCaption': string;
	    'DashboardStringId.DateTimeFormatQuarterFormatDefaultCaption': string;
	    'DashboardStringId.DateTimeFormatQuarterFormatNumericCaption': string;
	    'DashboardStringId.DateTimeFormatQuarterFormatFullCaption': string;
	    'DashboardStringId.DateTimeFormatMonthFormatDefaultCaption': string;
	    'DashboardStringId.DateTimeFormatMonthFormatFullCaption': string;
	    'DashboardStringId.DateTimeFormatMonthFormatAbbreviatedCaption': string;
	    'DashboardStringId.DateTimeFormatMonthFormatNumericCaption': string;
	    'DashboardStringId.DateTimeFormatDayOfWeekFormatDefaultCaption': string;
	    'DashboardStringId.DateTimeFormatDayOfWeekFormatFullCaption': string;
	    'DashboardStringId.DateTimeFormatDayOfWeekFormatAbbreviatedCaption': string;
	    'DashboardStringId.DateTimeFormatDayOfWeekFormatNumericCaption': string;
	    'DashboardStringId.DateTimeFormatDateFormatDefaultCaption': string;
	    'DashboardStringId.DateTimeFormatDateFormatLongCaption': string;
	    'DashboardStringId.DateTimeFormatDateFormatShortCaption': string;
	    'DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption': string;
	    'DashboardStringId.DateTimeFormatDateTimeFormatLongCaption': string;
	    'DashboardStringId.DateTimeFormatDateTimeFormatShortCaption': string;
	    'DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption': string;
	    'DashboardStringId.ExactDateFormatYear': string;
	    'DashboardStringId.ExactDateFormatQuarter': string;
	    'DashboardStringId.ExactDateFormatMonth': string;
	    'DashboardStringId.ExactDateFormatDay': string;
	    'DashboardStringId.ExactDateFormatHour': string;
	    'DashboardStringId.ExactDateFormatMinute': string;
	    'DashboardStringId.ExactDateFormatSecond': string;
	    'DashboardWebStringId.FormatType': string;
	    'DashboardWebStringId.TopN.Top': string;
	    'DashboardWebStringId.TopN.Bottom': string;
	    'DashboardWebStringId.DimensionSortBy': string;
	    'DashboardStringId.NumericFormatUnitAutoCaption': string;
	    'DashboardStringId.NumericFormatFormatTypeAutoCaption': string;
	    'DashboardStringId.NumericFormatFormatTypeGeneralCaption': string;
	    'DashboardStringId.NumericFormatFormatTypeNumberCaption': string;
	    'DashboardStringId.NumericFormatFormatTypeCurrencyCaption': string;
	    'DashboardStringId.NumericFormatFormatTypeScientificCaption': string;
	    'DashboardStringId.NumericFormatFormatTypePercentCaption': string;
	    'DashboardStringId.NumericFormatUnitOnesCaption': string;
	    'DashboardStringId.NumericFormatUnitThousandsCaption': string;
	    'DashboardStringId.NumericFormatUnitMillionsCaption': string;
	    'DashboardStringId.NumericFormatUnitBillionsCaption': string;
	    'DashboardStringId.DeltaValueTypeActualValueCaption': string;
	    'DashboardStringId.DeltaValueTypeAbsoluteVariationCaption': string;
	    'DashboardStringId.DeltaValueTypePercentVariationCaption': string;
	    'DashboardStringId.DeltaValueTypePercentOfTargetCaption': string;
	    'DashboardStringId.DeltaValueTypeTargetValueCaption': string;
	    'DashboardStringId.DeltaIndicationModeGreaterIsGoodCaption': string;
	    'DashboardStringId.DeltaIndicationModeLessIsGoodCaption': string;
	    'DashboardStringId.DeltaIndicationModeWarningIfGreaterCaption': string;
	    'DashboardStringId.DeltaIndicationModeWarningIfLessCaption': string;
	    'DashboardStringId.DeltaIndicationModeNoIndicationCaption': string;
	    'DashboardStringId.DeltaThresholdTypeAbsolute': string;
	    'DashboardStringId.DeltaThresholdTypePercent': string;
	    'DashboardStringId.CommandDimensionGroupChildValues': string;
	    'DashboardStringId.SeriesTypeBar': string;
	    'DashboardStringId.SeriesTypeStackedBar': string;
	    'DashboardStringId.SeriesTypeFullStackedBar': string;
	    'DashboardStringId.SeriesTypePoint': string;
	    'DashboardStringId.SeriesTypeLine': string;
	    'DashboardStringId.SeriesTypeStackedLine': string;
	    'DashboardStringId.SeriesTypeFullStackedLine': string;
	    'DashboardStringId.SeriesTypeStepLine': string;
	    'DashboardStringId.SeriesTypeSpline': string;
	    'DashboardStringId.SeriesTypeArea': string;
	    'DashboardStringId.SeriesTypeStackedArea': string;
	    'DashboardStringId.SeriesTypeFullStackedArea': string;
	    'DashboardStringId.SeriesTypeStepArea': string;
	    'DashboardStringId.SeriesTypeSplineArea': string;
	    'DashboardStringId.SeriesTypeStackedSplineArea': string;
	    'DashboardStringId.SeriesTypeFullStackedSplineArea': string;
	    'DashboardWebStringId.Chart.ShowLegend': string;
	    'DashboardStringId.DefaultNameBoundImageItem': string;
	    'DashboardStringId.DefaultNameImageItem': string;
	    'DashboardStringId.DefaultNameTextBoxItem': string;
	    'DashboardStringId.DefaultNameCardItem': string;
	    'DashboardStringId.DefaultNameChartItem': string;
	    'DashboardStringId.DefaultNameComboBoxItem': string;
	    'DashboardStringId.DefaultNameListBoxItem': string;
	    'DashboardStringId.DefaultNameTreeViewItem': string;
	    'DashboardStringId.DefaultNameGaugeItem': string;
	    'DashboardStringId.DefaultNameGridItem': string;
	    'DashboardStringId.GridHyperlinkUriPatternErrorMessage': string;
	    'DashboardWebStringId.DefaultNameBubbleMapItem': string;
	    'DashboardWebStringId.DefaultNameChoroplethMapItem': string;
	    'DashboardWebStringId.DefaultNameGeoPointMapItem': string;
	    'DashboardWebStringId.DefaultNamePieMapItem': string;
	    'DashboardStringId.DefaultNamePieItem': string;
	    'DashboardStringId.DefaultNamePivotItem': string;
	    'DashboardStringId.DefaultNameRangeFilterItem': string;
	    'DashboardStringId.DefaultNameScatterChartItem': string;
	    'DashboardStringId.DefaultNameTreemapItem': string;
	    'DashboardStringId.DescriptionMaps': string;
	    'DashboardStringId.EntireRangePeriodCaption': string;
	    'DashboardStringId.CalculationTypePercentOfTotal': string;
	    'DashboardStringId.CalculationTypeDifference': string;
	    'DashboardStringId.CalculationTypePercentageDifference': string;
	    'DashboardStringId.CalculationTypeRunningTotal': string;
	    'DashboardStringId.CalculationTypeMovingCalculation': string;
	    'DashboardStringId.CalculationTypeRank': string;
	    'DashboardStringId.ColorPaletteIndex': string;
	    'DashboardStringId.DifferenceCalculationTargetPrevious': string;
	    'DashboardStringId.DifferenceCalculationTargetNext': string;
	    'DashboardStringId.DifferenceCalculationTargetFirst': string;
	    'DashboardStringId.DifferenceCalculationTargetLast': string;
	    'DashboardStringId.SummaryTypeCount': string;
	    'DashboardStringId.SummaryTypeSum': string;
	    'DashboardStringId.SummaryTypeMin': string;
	    'DashboardStringId.SummaryTypeMax': string;
	    'DashboardStringId.SummaryTypeAverage': string;
	    'DashboardStringId.SummaryTypeStdDev': string;
	    'DashboardStringId.SummaryTypeStdDevp': string;
	    'DashboardStringId.SummaryTypeVar': string;
	    'DashboardStringId.SummaryTypeVarp': string;
	    'DashboardStringId.SummaryTypeCountDistinct': string;
	    'DashboardStringId.SummaryTypeMedian': string;
	    'DashboardStringId.SummaryTypeMode': string;
	    'DashboardStringId.RankTypeUnique': string;
	    'DashboardStringId.RankTypeCompetition': string;
	    'DashboardStringId.RankTypeDense': string;
	    'DashboardStringId.RankTypeModified': string;
	    'DashboardStringId.RankTypePercentile': string;
	    'DashboardStringId.CardCalculationAlongCards': string;
	    'DashboardStringId.CardCalculationAlongSparklineArgument': string;
	    'DashboardStringId.CardCalculationAlongCardsAndSparklineArgument': string;
	    'DashboardStringId.CardCalculationAlongSparklineArgumentAndCards': string;
	    'DashboardStringId.ChartCalculationAlongArguments': string;
	    'DashboardStringId.ChartCalculationAlongSeries': string;
	    'DashboardStringId.ChartCalculationAlongArgumentsAndSeries': string;
	    'DashboardStringId.ChartCalculationAlongSeriesAndArguments': string;
	    'DashboardStringId.GridCalculationAlongRows': string;
	    'DashboardStringId.GridCalculationAlongSparklineArgument': string;
	    'DashboardStringId.GridCalculationAlongRowsAndSparklineArgument': string;
	    'DashboardStringId.GridCalculationAlongSparklineArgumentAndRows': string;
	    'DashboardStringId.PivotCalculationAlongColumns': string;
	    'DashboardStringId.PivotCalculationAlongRows': string;
	    'DashboardStringId.PivotCalculationAlongColumnsAndRows': string;
	    'DashboardStringId.PivotCalculationAlongRowsAndColumns': string;
	    'DashboardStringId.PivotCalculationAlongGroupsInColumns': string;
	    'DashboardStringId.PivotCalculationAlongGroupsInRows': string;
	    'DashboardStringId.PivotCalculationAlongGroupsInColumnsAndRows': string;
	    'DashboardStringId.PivotCalculationAlongGroupsInRowsAndColumns': string;
	    'DashboardStringId.PieCalculationAlongArguments': string;
	    'DashboardStringId.PieCalculationAlongSeries': string;
	    'DashboardStringId.PieCalculationAlongArgumentsAndSeries': string;
	    'DashboardStringId.PieCalculationAlongSeriesAndArguments': string;
	    'DashboardStringId.RangeFilterCalculationAlongArgumentAndSeries': string;
	    'DashboardStringId.RangeFilterCalculationAlongSeriesAndArgument': string;
	    'DashboardStringId.GaugeCalculationAlongGauges': string;
	    'DashboardStringId.ScatterCalculationAlongArguments': string;
	    'DashboardStringId.CalculationAlongSpecificDimensions': string;
	    'DashboardStringId.CalculatedFieldTypeString': string;
	    'DashboardStringId.CalculatedFieldTypeLong': string;
	    'DashboardStringId.CalculatedFieldTypeDecimal': string;
	    'DashboardStringId.CalculatedFieldTypeBoolean': string;
	    'DashboardStringId.CalculatedFieldTypeDateTime': string;
	    'DashboardStringId.CalculatedFieldTypeDouble': string;
	    'DashboardStringId.CalculatedFieldTypeAuto': string;
	    'DashboardStringId.CalculatedFieldTypeObject': string;
	    'DashboardStringId.DefaultEFDataSourceName': string;
	    'DashboardStringId.DefaultExcelDataSourceName': string;
	    'DashboardStringId.DefaultFileExtractDataSourceName': string;
	    'DashboardStringId.DefaultObjectDataSourceName': string;
	    'DashboardStringId.DefaultOlapDataSourceName': string;
	    'DashboardStringId.DefaultSqlDataSourceName': string;
	    'DashboardStringId.DefaultJsonDataSourceName': string;
	    'DashboardStringId.DefaultXpoDataSourceName': string;
	    'DashboardStringId.OlapRaggedHierarchyNoneItemCaption': string;
	    'DashboardStringId.FormatRuleApplyToColumn': string;
	    'DashboardStringId.SeriesTypeSideBySideRangeBar': string;
	    'DashboardStringId.SeriesTypeRangeArea': string;
	    'DashboardStringId.SeriesTypeHighLowClose': string;
	    'DashboardStringId.SeriesTypeCandleStick': string;
	    'DashboardStringId.SeriesTypeStock': string;
	    'DashboardWebStringId.StyleSettings': string;
	    'DashboardStringId.ParametersFormCalendarTodayButton': string;
	    'DashboardStringId.TreemapLabelArgumentTemplate': string;
	    'DashboardStringId.TreemapLabelValueTemplate': string;
	    'DashboardStringId.SearchNullValuePrompt': string;
	    'DashboardStringId.CustomItems': string;
	    'DashboardStringId.FormatRuleAllowNegativeAxis': string;
	    'DashboardStringId.FormatRuleDrawAxis': string;
	    'DashboardStringId.FormatRuleShowBarOnly': string;
	    'DashboardStringId.CommandFormatRuleBottomN': string;
	    'DashboardStringId.FormatConditionAppearanceNone': string;
	    'DashboardStringId.FormatConditionAppearanceCustom': string;
	    'DashboardStringId.FormatConditionAppearancePaleRed': string;
	    'DashboardStringId.FormatConditionAppearancePaleYellow': string;
	    'DashboardStringId.FormatConditionAppearancePaleGreen': string;
	    'DashboardStringId.FormatConditionAppearancePaleBlue': string;
	    'DashboardStringId.FormatConditionAppearancePalePurple': string;
	    'DashboardStringId.FormatConditionAppearancePaleCyan': string;
	    'DashboardStringId.FormatConditionAppearancePaleOrange': string;
	    'DashboardStringId.FormatConditionAppearancePaleGray': string;
	    'DashboardStringId.FormatConditionAppearanceRed': string;
	    'DashboardStringId.FormatConditionAppearanceYellow': string;
	    'DashboardStringId.FormatConditionAppearanceGreen': string;
	    'DashboardStringId.FormatConditionAppearanceBlue': string;
	    'DashboardStringId.FormatConditionAppearancePurple': string;
	    'DashboardStringId.FormatConditionAppearanceCyan': string;
	    'DashboardStringId.FormatConditionAppearanceOrange': string;
	    'DashboardStringId.FormatConditionAppearanceGray': string;
	    'DashboardStringId.FormatConditionAppearanceGradientRed': string;
	    'DashboardStringId.FormatConditionAppearanceGradientYellow': string;
	    'DashboardStringId.FormatConditionAppearanceGradientGreen': string;
	    'DashboardStringId.FormatConditionAppearanceGradientBlue': string;
	    'DashboardStringId.FormatConditionAppearanceGradientPurple': string;
	    'DashboardStringId.FormatConditionAppearanceGradientCyan': string;
	    'DashboardStringId.FormatConditionAppearanceGradientOrange': string;
	    'DashboardStringId.FormatConditionAppearanceGradientTransparent': string;
	    'DashboardStringId.FormatConditionAppearanceFontBold': string;
	    'DashboardStringId.FormatConditionAppearanceFontItalic': string;
	    'DashboardStringId.FormatConditionAppearanceFontUnderline': string;
	    'DashboardStringId.FormatConditionAppearanceFontGrayed': string;
	    'DashboardStringId.FormatConditionAppearanceFontRed': string;
	    'DashboardStringId.FormatConditionAppearanceFontYellow': string;
	    'DashboardStringId.FormatConditionAppearanceFontGreen': string;
	    'DashboardStringId.FormatConditionAppearanceFontBlue': string;
	    'DashboardStringId.IntersectionLevelModeFirst': string;
	    'DashboardStringId.IntersectionLevelModeLast': string;
	    'DashboardStringId.IntersectionLevelModeAuto': string;
	    'DashboardStringId.IntersectionLevelModeAll': string;
	    'DashboardStringId.IntersectionLevelModeSpecific': string;
	    'DashboardStringId.FormatRuleApplyToRow': string;
	    'DashboardStringId.FormatRuleApplyTo': string;
	    'DashboardWebStringId.FilterItem.AllowEmptyFilter': string;
	    'DashboardStringId.FormatConditionAppearanceFontStrikeout': string;
	    'DashboardStringId.FormatConditionAutomaticValueType': string;
	    'DashboardStringId.FormatConditionNumberValueType': string;
	    'DashboardStringId.FormatConditionPercentValueType': string;
	    'DashboardStringId.CommandFormatRuleRangeIcons': string;
	    'DashboardStringId.CommandFormatRuleGreaterThan': string;
	    'DashboardStringId.CommandFormatRuleGreaterThanOrEqualTo': string;
	    'DashboardStringId.CommandFormatRuleLessThan': string;
	    'DashboardStringId.CommandFormatRuleLessThanOrEqualTo': string;
	    'DashboardStringId.CommandFormatRuleEqualTo': string;
	    'DashboardStringId.CommandFormatRuleNotEqualTo': string;
	    'DashboardStringId.CommandFormatRuleBetween': string;
	    'DashboardStringId.CommandFormatRuleNotBetween': string;
	    'DashboardStringId.CommandFormatRuleBetweenOrEqual': string;
	    'DashboardStringId.CommandFormatRuleNotBetweenOrEqual': string;
	    'DashboardStringId.CommandFormatRuleContains': string;
	    'DashboardStringId.ColorAutoAssigned': string;
	    'DashboardStringId.CalculationTypeNone': string;
	    'DashboardStringId.UndoText': string;
	    'DashboardStringId.RedoText': string;
	    'DashboardStringId.DashboardCurrencyUseCurrentCurrency': string;
	    'DashboardStringId.CommandDimensionSortModeDisplayText': string;
	    'DashboardStringId.CommandDimensionSortModeValue': string;
	    'DashboardStringId.CommandDimensionSortModeID': string;
	    'DashboardStringId.CommandDimensionSortModeKey': string;
	    'DashboardWebStringId.Chart.AddPane': string;
	    'DashboardStringId.MapShapeNoneAttribute': string;
	    'DashboardStringId.DefaultPeriodName': string;
	    'DashboardStringId.CardLayoutTemplateStretchedCaption': string;
	    'DashboardStringId.CardLayoutTemplateCenteredCaption': string;
	    'DashboardStringId.CardLayoutTemplateCompactCaption': string;
	    'DashboardStringId.CardLayoutTemplateLightweightCaption': string;
	    'DashboardStringId.CardLayoutTemplateCustomCaption': string;
	    'DashboardStringId.CardLayoutTemplateNoneCaption': string;
	    'DashboardStringId.CardRowDataElementTypeTitleCaption': string;
	    'DashboardStringId.CardRowDataElementTypeSubtitleCaption': string;
	    'DashboardStringId.CardRowDataElementTypeActualValueCaption': string;
	    'DashboardStringId.CardRowDataElementTypeTargetValueCaption': string;
	    'DashboardStringId.CardRowDataElementTypeAbsoluteVariationCaption': string;
	    'DashboardStringId.CardRowDataElementTypePercentVariationCaption': string;
	    'DashboardStringId.CardRowDataElementTypePercentOfTargetCaption': string;
	    'DashboardStringId.CardRowDataElementTypeDimensionValueCaption': string;
	    'DashboardStringId.CardRowDataElementTypeCardNameCaption': string;
	    'DashboardStringId.CardRowDataElementTypeDeltaIndicatorCaption': string;
	    'DashboardStringId.CardRowDataElementTypeSparklineCaption': string;
	    'DashboardStringId.FormatRuleApplyToAllElements': string;
	    'DashboardWebStringId.Pie.LabelPosition': string;
	    'DashboardWebStringId.Pie.LabelPositionOutside': string;
	    'DashboardWebStringId.Pie.LabelPositionInside': string;
	    'DashboardStringId.IncludeExportDashboardState': string;
	    'DashboardStringId.PointLabelContentTypeArgument': string;
	    'DashboardStringId.PointLabelContentTypeSeriesName': string;
	    'DashboardStringId.PointLabelContentTypeValue': string;
	    'DashboardStringId.PointLabelContentTypePercent': string;
	    'DashboardWebStringId.DashboardMenu': string;
	    'DashboardWebStringId.DashboardMenuNew': string;
	    'DashboardWebStringId.DashboardMenuOpen': string;
	    'DashboardWebStringId.DashboardMenuSave': string;
	    'DashboardWebStringId.DashboardMenuCurrency': string;
	    'DashboardWebStringId.DashboardMenuDataSources': string;
	    'DashboardWebStringId.DashboardMenuColorScheme': string;
	    'DashboardWebStringId.DashboardMenuNewDashboardCreate': string;
	    'DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder': string;
	    'DashboardWebStringId.Binding.DefaultEmptyPlaceholder': string;
	    'DashboardWebStringId.Binding.DefaultSelectedPlaceholder': string;
	    'DashboardWebStringId.Binding.DataFiltering': string;
	    'DashboardWebStringId.Binding.Argument': string;
	    'DashboardWebStringId.Binding.Attribute': string;
	    'DashboardWebStringId.Binding.Sparkline': string;
	    'DashboardWebStringId.Binding.Columns': string;
	    'DashboardWebStringId.Binding.TooltipDimensions': string;
	    'DashboardWebStringId.Binding.TooltipMeasures': string;
	    'DashboardWebStringId.Binding.HiddenDimensions': string;
	    'DashboardWebStringId.Binding.HiddenMeasures': string;
	    'DashboardWebStringId.Binding.AddDimension': string;
	    'DashboardWebStringId.Binding.AddMeasure': string;
	    'DashboardWebStringId.Binding.AddColumn': string;
	    'DashboardWebStringId.Binding.AddRow': string;
	    'DashboardWebStringId.Binding.AddValue': string;
	    'DashboardWebStringId.Binding.AddSeries': string;
	    'DashboardWebStringId.Binding.SetLatitude': string;
	    'DashboardWebStringId.Binding.SetLongitude': string;
	    'DashboardWebStringId.Binding.SetArgument': string;
	    'DashboardWebStringId.Binding.AddArgument': string;
	    'DashboardWebStringId.Binding.SetWeight': string;
	    'DashboardWebStringId.Binding.SetColor': string;
	    'DashboardWebStringId.Binding.SetAttribute': string;
	    'DashboardWebStringId.Binding.SetValue': string;
	    'DashboardWebStringId.Binding.XAxis': string;
	    'DashboardWebStringId.Binding.YAxis': string;
	    'DashboardWebStringId.Binding.ConfigureDimension': string;
	    'DashboardWebStringId.Binding.ConfigureMeasure': string;
	    'DashboardWebStringId.Binding.ConfigureSeries': string;
	    'DashboardWebStringId.Binding.ConfigureArgument': string;
	    'DashboardWebStringId.Binding.ConfigureValue': string;
	    'DashboardWebStringId.Binding.ConfigureAttribute': string;
	    'DashboardWebStringId.Binding.ConfigureLatitude': string;
	    'DashboardWebStringId.Binding.ConfigureLongitude': string;
	    'DashboardWebStringId.Binding.ConfigureColumn': string;
	    'DashboardWebStringId.Binding.ConfigureRow': string;
	    'DashboardWebStringId.Binding.ConfigureWeight': string;
	    'DashboardWebStringId.Binding.ConfigureColor': string;
	    'DashboardWebStringId.Binding.ShowAll': string;
	    'DashboardWebStringId.ColorScheme.Color': string;
	    'DashboardWebStringId.ColorScheme.Colors': string;
	    'DashboardWebStringId.Parameters.ParameterList': string;
	    'DashboardWebStringId.Parameters.AddParameter': string;
	    'DashboardWebStringId.Parameters.AddParameter.Tooltip': string;
	    'DashboardWebStringId.Parameters.NoSelectedParameter': string;
	    'DashboardWebStringId.Parameters.Reorder': string;
	    'DashboardWebStringId.Parameters.Done': string;
	    'DashboardWebStringId.Currency.Currency': string;
	    'DashboardWebStringId.Currency.CurrencyCulture': string;
	    'DashboardWebStringId.Currency.DefaultCurrencyWarning': string;
	    'DashboardWebStringId.Preview': string;
	    'DashboardWebStringId.Add': string;
	    'DashboardWebStringId.DataSources.UsedDataSources': string;
	    'DashboardWebStringId.DataSources.DataItems': string;
	    'DashboardWebStringId.DataSources.AddQuery': string;
	    'DashboardWebStringId.DataSources.AddCalculatedField': string;
	    'DashboardWebStringId.DataSources.AddDataSource': string;
	    'DashboardWebStringId.DataSources.NoUsedDataSources': string;
	    'DashboardWebStringId.DataSources.NoAvailableDataSources': string;
	    'DashboardWebStringId.DataSources.ChooseDataSource': string;
	    'DashboardWebStringId.DataSources.CreateDataSource': string;
	    'DashboardWebStringId.DataSources.CreateNewDataSource': string;
	    'DashboardWebStringId.DataSources.CreateDataSource.Tooltip': string;
	    'DashboardWebStringId.DataSources.EditCalculatedField': string;
	    'DashboardWebStringId.DataSources.CalculatedField.Name': string;
	    'DashboardWebStringId.DataSources.CalculatedField.FieldType': string;
	    'DashboardWebStringId.DataSources.CalculatedField.UniqueNameError': string;
	    'DashboardWebStringId.DataSources.CalculatedField.Corrupted': string;
	    'DashboardWebStringId.DataSources.Edit': string;
	    'DashboardStringId.MessageCollectionTypesNotSupported': string;
	    'DashboardWebStringId.New.DashboardName': string;
	    'DashboardWebStringId.Bindings': string;
	    'DashboardWebStringId.Interactivity': string;
	    'DashboardWebStringId.Options': string;
	    'DashboardWebStringId.Remove': string;
	    'DashboardWebStringId.MasterFilterMode': string;
	    'DashboardWebStringId.Title.Text': string;
	    'DashboardWebStringId.Title.Visible': string;
	    'DashboardWebStringId.Title.IncludeMasterFilter': string;
	    'DashboardWebStringId.Title.Aligment': string;
	    'DashboardWebStringId.Title.Image': string;
	    'DashboardWebStringId.DataSources.Cancel': string;
	    'DashboardWebStringId.DataSources.IncludeToTheDashboard': string;
	    'DashboardWebStringId.DataSources.AvailableDataSourcesError': string;
	    'DashboardWebStringId.DataSources.DashboardDataSourceWizard': string;
	    'DashboardWebStringId.Viewer': string;
	    'DashboardWebStringId.Loading': string;
	    'DashboardWebStringId.ClickHereInvitation': string;
	    'DashboardWebStringId.BindDataInvitation': string;
	    'DashboardWebStringId.AddItemInvitation': string;
	    'DashboardWebStringId.Parameters.Values': string;
	    'DashboardWebStringId.Binding.Cards': string;
	    'DashboardWebStringId.Binding.AddCard': string;
	    'DashboardWebStringId.Binding.ConfigureCard': string;
	    'DashboardWebStringId.Binding.AddValues': string;
	    'DashboardWebStringId.Binding.ConfigureValues': string;
	    'DashboardWebStringId.Binding.Maps': string;
	    'DashboardWebStringId.Binding.AddMap': string;
	    'DashboardWebStringId.Binding.ConfigureMap': string;
	    'DashboardWebStringId.Binding.Gauges': string;
	    'DashboardWebStringId.Binding.AddGauge': string;
	    'DashboardWebStringId.Binding.ConfigureGauge': string;
	    'DashboardWebStringId.InteractivityOptions': string;
	    'DashboardWebStringId.Binding.Values': string;
	    'DashboardWebStringId.Binding.RemovePane': string;
	    'DashboardWebStringId.ClickToSetFilterCriteria': string;
	    'DashboardWebStringId.DataSources.OK': string;
	    'DashboardWebStringId.DataSources.Save': string;
	    'DashboardWebStringId.Cards.ArrangementMode': string;
	    'DashboardWebStringId.Cards.ArrangementMode.Auto': string;
	    'DashboardWebStringId.Cards.ArrangementMode.FixedRows': string;
	    'DashboardWebStringId.Cards.ArrangementMode.FixedColumns': string;
	    'DashboardWebStringId.Cards.LineCount': string;
	    'DashboardWebStringId.ConditionalFormatting': string;
	    'DashboardWebStringId.CollectionEditor.NoItems': string;
	    'DashboardWebStringId.CollectionEditor.Totals.NoItems': string;
	    'DashboardWebStringId.CollectionEditor.Parameters.NoItems': string;
	    'DashboardWebStringId.PivotGrid.AutoExpandColumnGroups': string;
	    'DashboardWebStringId.PivotGrid.AutoExpandRowGroups': string;
	    'DashboardWebStringId.PivotGrid.ColumnGrandTotals': string;
	    'DashboardWebStringId.PivotGrid.RowGrandTotals': string;
	    'DashboardWebStringId.PivotGrid.ColumnTotals': string;
	    'DashboardWebStringId.PivotGrid.RowTotals': string;
	    'DashboardWebStringId.PivotGrid.ValuesPosition': string;
	    'DashboardWebStringId.PivotGrid.ValuesPositionColumns': string;
	    'DashboardWebStringId.PivotGrid.ValuesPositionRows': string;
	    'DashboardWebStringId.PivotGrid.RowTotalsPosition': string;
	    'DashboardWebStringId.PivotGrid.RowTotalsPositionBottom': string;
	    'DashboardWebStringId.PivotGrid.RowTotalsPositionTop': string;
	    'DashboardWebStringId.PivotGrid.ColumnTotalsPosition': string;
	    'DashboardWebStringId.PivotGrid.ColumnTotalsPositionFar': string;
	    'DashboardWebStringId.PivotGrid.ColumnTotalsPositionNear': string;
	    'DashboardWebStringId.PivotGrid.LayoutType': string;
	    'DashboardWebStringId.PivotGrid.LayoutTypeCompact': string;
	    'DashboardWebStringId.PivotGrid.LayoutTypeTabular': string;
	    'DashboardWebStringId.Options.Caption': string;
	    'DashboardWebStringId.InteractivityOptions.IsMasterFilter': string;
	    'DashboardWebStringId.InteractivityOptions.MasterFilterMode.None': string;
	    'DashboardWebStringId.InteractivityOptions.MasterFilterMode.Single': string;
	    'DashboardWebStringId.InteractivityOptions.MasterFilterMode.Multiple': string;
	    'DashboardWebStringId.InteractivityOptions.TargetDimensions': string;
	    'DashboardWebStringId.InteractivityOptions.TargetDimensions.Arguments': string;
	    'DashboardWebStringId.InteractivityOptions.TargetDimensions.Series': string;
	    'DashboardWebStringId.InteractivityOptions.TargetDimensions.Points': string;
	    'DashboardWebStringId.ColoringOptions': string;
	    'DashboardWebStringId.DataSources.Filter': string;
	    'DashboardWebStringId.Chart.Rotated': string;
	    'DashboardWebStringId.Chart.Panes': string;
	    'DashboardWebStringId.Chart.Legend': string;
	    'DashboardWebStringId.Chart.AxisX': string;
	    'DashboardWebStringId.Chart.AxisY': string;
	    'DashboardWebStringId.Chart.AxisYSecondary': string;
	    'DashboardWebStringId.Chart.PointLabelOptions': string;
	    'DashboardWebStringId.Chart.AxisXMeasure': string;
	    'DashboardWebStringId.Chart.AxisYMeasure': string;
	    'DashboardWebStringId.Chart.Weight': string;
	    'DashboardWebStringId.Chart.Content': string;
	    'DashboardWebStringId.Chart.ArgumentAndWeight': string;
	    'DashboardWebStringId.Chart.ArgumentAndValues': string;
	    'DashboardWebStringId.Chart.Reverse': string;
	    'DashboardWebStringId.Chart.Visible': string;
	    'DashboardWebStringId.Chart.Title': string;
	    'DashboardWebStringId.Chart.TitleText': string;
	    'DashboardWebStringId.Chart.EnableZooming': string;
	    'DashboardWebStringId.Chart.LimitVisiblePoints': string;
	    'DashboardWebStringId.Chart.VisiblePointsCount': string;
	    'DashboardWebStringId.Chart.AlwaysShowZeroLevel': string;
	    'DashboardWebStringId.Chart.GridLines': string;
	    'DashboardWebStringId.Chart.LogarithmicScale': string;
	    'DashboardWebStringId.Chart.LogarithmicScaleBase': string;
	    'DashboardWebStringId.Chart.LogarithmicScaleBase2': string;
	    'DashboardWebStringId.Chart.LogarithmicScaleBase5': string;
	    'DashboardWebStringId.Chart.LogarithmicScaleBase10': string;
	    'DashboardWebStringId.Chart.Position': string;
	    'DashboardWebStringId.Chart.IsInsideOfDiagram': string;
	    'DashboardWebStringId.Chart.PrimaryAxisY': string;
	    'DashboardWebStringId.Chart.SecondaryAxisY': string;
	    'DashboardWebStringId.Chart.Name': string;
	    'DashboardWebStringId.Chart.PlotOnSecondaryAxis': string;
	    'DashboardWebStringId.Chart.IgnoreEmptyPoints': string;
	    'DashboardWebStringId.Chart.ShowPointMarkers': string;
	    'DashboardWebStringId.Chart.Value': string;
	    'DashboardWebStringId.Chart.ShowZeroValues': string;
	    'DashboardWebStringId.Chart.OverlappingMode': string;
	    'DashboardWebStringId.Chart.Orientation': string;
	    'DashboardWebStringId.Chart.ShowPointLablels': string;
	    'DashboardWebStringId.Chart.TooltipContent': string;
	    'DashboardWebStringId.Chart.LabelContent': string;
	    'DashboardWebStringId.Card.SparklineOptions': string;
	    'DashboardWebStringId.Card.SparklineVisible': string;
	    'DashboardWebStringId.Chart.Position.TopLeftVertical': string;
	    'DashboardWebStringId.Chart.Position.TopLeftHorizontal': string;
	    'DashboardWebStringId.Chart.Position.TopCenterHorizontal': string;
	    'DashboardWebStringId.Chart.Position.TopRightVertical': string;
	    'DashboardWebStringId.Chart.Position.TopRightHorizontal': string;
	    'DashboardWebStringId.Chart.Position.BottomLeftVertical': string;
	    'DashboardWebStringId.Chart.Position.BottomLeftHorizontal': string;
	    'DashboardWebStringId.Chart.Position.BottomCenterHorizontal': string;
	    'DashboardWebStringId.Chart.Position.BottomRightVertical': string;
	    'DashboardWebStringId.Chart.Position.BottomRightHorizontal': string;
	    'DashboardWebStringId.Chart.Position.TopCenterVertical': string;
	    'DashboardWebStringId.Chart.Position.BottomCenterVertical': string;
	    'DashboardWebStringId.FilterItem.Type': string;
	    'DashboardWebStringId.FilterItem.Type.Standard': string;
	    'DashboardWebStringId.FilterItem.Type.Checked': string;
	    'DashboardWebStringId.FilterItem.Type.Radio': string;
	    'DashboardWebStringId.FilterItem.ShowAllValue': string;
	    'DashboardWebStringId.FilterItem.EnableSearch': string;
	    'DashboardWebStringId.Gauge.Min': string;
	    'DashboardWebStringId.Gauge.Max': string;
	    'DashboardWebStringId.Gauge.ScaleOptions': string;
	    'DashboardWebStringId.Gauge.Type': string;
	    'DashboardWebStringId.Gauge.Type.FullQuarterGauge': string;
	    'DashboardWebStringId.Gauge.Type.HalfCircular': string;
	    'DashboardWebStringId.Gauge.Type.LeftQuarterCircular': string;
	    'DashboardWebStringId.Gauge.Type.RightQuarterCircular': string;
	    'DashboardWebStringId.Gauge.Type.ThreeFourthCircular': string;
	    'DashboardWebStringId.Gauge.Type.LinearHorizontal': string;
	    'DashboardWebStringId.Gauge.Type.LinearVertical': string;
	    'DashboardWebStringId.Gauge.Captions': string;
	    'DashboardWebStringId.Gauge.Scale.Custom': string;
	    'DashboardWebStringId.Gauge.Scale.Auto': string;
	    'DashboardWebStringId.Grid.ColumnType': string;
	    'DashboardWebStringId.Grid.DisplayMode': string;
	    'DashboardWebStringId.Grid.DisplayMode.Value': string;
	    'DashboardWebStringId.Grid.DisplayMode.Bar': string;
	    'DashboardWebStringId.Grid.DisplayMode.Text': string;
	    'DashboardWebStringId.Grid.DisplayMode.Image': string;
	    'DashboardWebStringId.Grid.FixedWidth': string;
	    'DashboardWebStringId.Grid.WidthType': string;
	    'DashboardWebStringId.Grid.WidthType.Weight': string;
	    'DashboardWebStringId.Grid.WidthType.FitToContent': string;
	    'DashboardWebStringId.Grid.DeltaOptions': string;
	    'DashboardWebStringId.Grid.ShowStartEndValues': string;
	    'DashboardWebStringId.Grid.TotalType': string;
	    'DashboardWebStringId.Grid.Dimension': string;
	    'DashboardWebStringId.Grid.Measure': string;
	    'DashboardWebStringId.Grid.Delta': string;
	    'DashboardWebStringId.Grid.Sparkline': string;
	    'DashboardWebStringId.Grid.Hyperlink': string;
	    'DashboardWebStringId.Grid.Options': string;
	    'DashboardWebStringId.Map.ShapeFileLoaded': string;
	    'DashboardWebStringId.Map.AttributeFileLoaded': string;
	    'DashboardWebStringId.Map.ValueMap': string;
	    'DashboardWebStringId.Map.DeltaMap': string;
	    'DashboardWebStringId.Map.TooltipCaption': string;
	    'DashboardWebStringId.Map.TooltipActualValueCaption': string;
	    'DashboardWebStringId.Map.TooltipDeltaCaption': string;
	    'DashboardWebStringId.Map.CustomMapOptions': string;
	    'DashboardWebStringId.Map.CustomMapOptionsSource': string;
	    'DashboardWebStringId.Map.CustomMapOptionsUrl': string;
	    'DashboardWebStringId.Map.CustomMapOptionsFile': string;
	    'DashboardWebStringId.Map.CustomMapUrl': string;
	    'DashboardWebStringId.Map.CustomMapFile': string;
	    'DashboardWebStringId.Map.CustomAttributeFile': string;
	    'DashboardWebStringId.Map.AttributeDimension': string;
	    'DashboardWebStringId.Map.IncludeSummaryValueToShapeTitle': string;
	    'DashboardWebStringId.Map.AttributeName': string;
	    'DashboardWebStringId.Map.TooltipAttribute': string;
	    'DashboardWebStringId.Map.TooltipDimensions': string;
	    'DashboardWebStringId.Map.Area.Custom': string;
	    'DashboardWebStringId.Map.Area.WorldCountries': string;
	    'DashboardWebStringId.Map.Area.Europe': string;
	    'DashboardWebStringId.Map.Area.Asia': string;
	    'DashboardWebStringId.Map.Area.NorthAmerica': string;
	    'DashboardWebStringId.Map.Area.SouthAmerica': string;
	    'DashboardWebStringId.Map.Area.Africa': string;
	    'DashboardWebStringId.Map.Area.USA': string;
	    'DashboardWebStringId.Map.Area.Canada': string;
	    'DashboardWebStringId.Map.Viewport': string;
	    'DashboardWebStringId.Map.ShapeTitleAttribute': string;
	    'DashboardWebStringId.Map.UseBindingAttribute': string;
	    'DashboardWebStringId.Map.WeightedLegendType': string;
	    'DashboardWebStringId.Map.WeightedLegendType.Linear': string;
	    'DashboardWebStringId.Map.WeightedLegendType.Nested': string;
	    'DashboardWebStringId.Map.Orientation.Vertical': string;
	    'DashboardWebStringId.Map.Orientation.Horizontal': string;
	    'DashboardWebStringId.Map.Position.TopLeft': string;
	    'DashboardWebStringId.Map.Position.TopCenter': string;
	    'DashboardWebStringId.Map.Position.TopRight': string;
	    'DashboardWebStringId.Map.Position.BottomLeft': string;
	    'DashboardWebStringId.Map.Position.BottomCenter': string;
	    'DashboardWebStringId.Map.Position.BottomRight': string;
	    'DashboardWebStringId.Map.Viewport.TopLatitude': string;
	    'DashboardWebStringId.Map.Viewport.LeftLongitude': string;
	    'DashboardWebStringId.Map.Viewport.RightLongitude': string;
	    'DashboardWebStringId.Map.Viewport.BottomLatitude': string;
	    'DashboardWebStringId.Map.Viewport.CenterPointLatitude': string;
	    'DashboardWebStringId.Map.Viewport.CenterPointLongitude': string;
	    'DashboardWebStringId.Map.Viewport.CreateViewerPaddings': string;
	    'DashboardWebStringId.Map.ShowLegend': string;
	    'DashboardWebStringId.Pie.Type': string;
	    'DashboardWebStringId.Pie': string;
	    'DashboardWebStringId.Pie.Donut': string;
	    'DashboardWebStringId.Pie.LabelContentType.None': string;
	    'DashboardWebStringId.Pie.LabelContentType.Argument': string;
	    'DashboardWebStringId.Pie.LabelContentType.Percent': string;
	    'DashboardWebStringId.Pie.LabelContentType.ArgumentAndPercent': string;
	    'DashboardWebStringId.Pie.LabelContentType.Value': string;
	    'DashboardWebStringId.Pie.LabelContentType.ArgumentAndValue': string;
	    'DashboardWebStringId.Pie.LabelContentType.ValueAndPercent': string;
	    'DashboardWebStringId.Pie.LabelContentType.ArgumentValueAndPercent': string;
	    'DashboardWebStringId.Image.BindingMode': string;
	    'DashboardWebStringId.Image.BindingMode.BinaryArray': string;
	    'DashboardWebStringId.Image.BindingMode.Uri': string;
	    'DashboardWebStringId.RangeFilter.UriPattern': string;
	    'DashboardWebStringId.Image.SizeMode.Clip': string;
	    'DashboardWebStringId.Image.SizeMode.Stretch': string;
	    'DashboardWebStringId.Image.SizeMode.Zoom': string;
	    'DashboardWebStringId.Image.SizeMode.Squeeze': string;
	    'DashboardWebStringId.Image.HorizontalAlignment': string;
	    'DashboardWebStringId.Image.VerticalAlignment': string;
	    'DashboardWebStringId.Image.Alignment.Left': string;
	    'DashboardWebStringId.Image.Alignment.Center': string;
	    'DashboardWebStringId.Image.Alignment.Right': string;
	    'DashboardWebStringId.Image.Alignment.Top': string;
	    'DashboardWebStringId.Image.Alignment.Bottom': string;
	    'DashboardWebStringId.SeriesItem.SeriesDimensions': string;
	    'DashboardWebStringId.TextBox.Text': string;
	    'DashboardWebStringId.Chart.Orientation.Default': string;
	    'DashboardWebStringId.Chart.Orientation.RotateRight': string;
	    'DashboardWebStringId.Chart.Orientation.RotateLeft': string;
	    'DashboardWebStringId.Chart.OverlappingMode.Hide': string;
	    'DashboardWebStringId.Chart.OverlappingMode.None': string;
	    'DashboardWebStringId.Chart.Position.Outside': string;
	    'DashboardWebStringId.Chart.Position.Inside': string;
	    'DashboardWebStringId.Chart.SeriesType.Weighted': string;
	    'DashboardWebStringId.Coloring.MeasuresColoringMode': string;
	    'DashboardWebStringId.Coloring.Global': string;
	    'DashboardWebStringId.Coloring.Local': string;
	    'DashboardWebStringId.Delta.ValueType': string;
	    'DashboardWebStringId.Delta.ResultIndication': string;
	    'DashboardWebStringId.Delta.ThresholdType': string;
	    'DashboardWebStringId.Delta.ThresholdValue': string;
	    'DashboardWebStringId.Sparkline.ViewType': string;
	    'DashboardWebStringId.Sparkline.HighlightMinMaxPoints': string;
	    'DashboardWebStringId.Sparkline.HighlightStartEndPoints': string;
	    'DashboardWebStringId.Title.Aligment.Left': string;
	    'DashboardWebStringId.Title.Aligment.Center': string;
	    'DashboardWebStringId.Parameters.LookUpSettingsType.NoLookUp': string;
	    'DashboardWebStringId.Parameters.LookUpSettingsType.StaticList': string;
	    'DashboardWebStringId.Parameters.LookUpSettingsType.DynamicList': string;
	    'DashboardWebStringId.Parameters.LookUpSettingsType': string;
	    'DashboardWebStringId.Parameters.DefaultValue': string;
	    'DashboardWebStringId.DataItem': string;
	    'DashboardWebStringId.DataItem.Precision': string;
	    'DashboardWebStringId.DataItem.IncludeGroupSeparator': string;
	    'DashboardWebStringId.DataItem.ShowValues': string;
	    'DashboardWebStringId.DataItem.ShowTotals': string;
	    'DashboardWebStringId.DataItem.ShowGrandTotals': string;
	    'DashboardWebStringId.Dialog.ConfirmSaving': string;
	    'DashboardWebStringId.Dimension.GroupInterval': string;
	    'DashboardWebStringId.Dimension.SortMode': string;
	    'DashboardWebStringId.Dialog.ArgumentMode': string;
	    'DashboardWebStringId.Calculations': string;
	    'DashboardWebStringId.Calculations.Expression': string;
	    'DashboardWebStringId.Calculations.DifferenceCalculation': string;
	    'DashboardWebStringId.Calculations.Moving': string;
	    'DashboardWebStringId.Calculations.RunningTotal': string;
	    'DashboardWebStringId.Calculations.PercentOfTotal': string;
	    'DashboardWebStringId.Calculations.Rank': string;
	    'DashboardWebStringId.Calculations.DefinitionMode': string;
	    'DashboardWebStringId.Calculations.WindowDefinition': string;
	    'DashboardWebStringId.Calculations.WindowDefinitionModeSpecific': string;
	    'DashboardWebStringId.Calculations.WindowDefinitionModePredefined': string;
	    'DashboardWebStringId.Calculations.DifferenceType': string;
	    'DashboardWebStringId.TreemapLayoutAlgorithm': string;
	    'DashboardWebStringId.TilesLabelContentType': string;
	    'DashboardWebStringId.TilesTooltipContentType': string;
	    'DashboardWebStringId.GroupsLabelContentType': string;
	    'DashboardWebStringId.GroupsTooltipContentType': string;
	    'DashboardWebStringId.ShowOthersValue': string;
	    'DashboardWebStringId.TopNEnabled': string;
	    'DashboardWebStringId.Parameters.StaticListLookUpSettings': string;
	    'DashboardWebStringId.Parameters.DynamicListLookUpSettings': string;
	    'DashboardWebStringId.ConvertTo': string;
	    'DashboardWebStringId.Duplicate': string;
	    'DashboardWebStringId.DataSourceWizard': string;
	    'DashboardWebStringId.RangeFilter.CustomPeriods': string;
	    'DashboardWebStringId.RangeFilter.StartMode': string;
	    'DashboardWebStringId.RangeFilter.EndMode': string;
	    'DashboardWebStringId.RangeFilter.StartIntervalAndOffset': string;
	    'DashboardWebStringId.RangeFilter.EndIntervalAndOffset': string;
	    'DashboardWebStringId.RangeFilter.StartDate': string;
	    'DashboardWebStringId.RangeFilter.EndDate': string;
	    'DashboardWebStringId.RangeFilter.None': string;
	    'DashboardWebStringId.RangeFilter.Fixed': string;
	    'DashboardWebStringId.RangeFilter.Flow': string;
	    'DashboardWebStringId.Tabs.Binding': string;
	    'DashboardWebStringId.Tabs.DataShaping': string;
	    'DashboardWebStringId.Tabs.Format': string;
	    'DashboardWebStringId.Calculations.Types.Moving': string;
	    'DashboardWebStringId.Parameters.SortByMember': string;
	    'DashboardWebStringId.Parameters.LookUpSettingsTypeCaption': string;
	    'DashboardWebStringId.Dashboard.Items': string;
	    'DashboardWebStringId.Dashboard.Groups': string;
	    'DashboardWebStringId.Dashboard.LayoutItems': string;
	    'DashboardWebStringId.Dashboard.ComponentName': string;
	    'DashboardWebStringId.ButtonConfirm': string;
	    'DashboardWebStringId.Colorization.GroupInterval': string;
	    'DashboardWebStringId.ButtonOn': string;
	    'DashboardWebStringId.ButtonOff': string;
	    'DashboardWebStringId.ButtonYes': string;
	    'DashboardWebStringId.ButtonNo': string;
	    'DashboardWebStringId.ButtonDiscrete': string;
	    'DashboardWebStringId.ButtonContinuous': string;
	    'DashboardWebStringId.ButtonVisible': string;
	    'DashboardWebStringId.ButtonHidden': string;
	    'DashboardWebStringId.Calculations.PreviousValuesCount': string;
	    'DashboardWebStringId.Calculations.NextValuesCount': string;
	    'DashboardWebStringId.Calculations.RankType': string;
	    'DashboardWebStringId.Calculations.RankOrder': string;
	    'DashboardWebStringId.TileOptions': string;
	    'DashboardWebStringId.MapLockNavigationLocked': string;
	    'DashboardWebStringId.MapLockNavigationUnlocked': string;
	    'DashboardWebStringId.ConditionalFormatting.BarOptions': string;
	    'DashboardWebStringId.ConditionalFormatting.CalculatedBy': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType': string;
	    'DashboardWebStringId.ConditionalFormatting.PredefinedColor': string;
	    'DashboardWebStringId.ConditionalFormatting.AppearanceType': string;
	    'DashboardWebStringId.ConditionalFormatting.FontStyle': string;
	    'DashboardWebStringId.ConditionalFormatting.FontFamily': string;
	    'DashboardWebStringId.ConditionalFormatting.FontRegular': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.None': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenArrowUp': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowUpInclineArrow': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowSideArrow': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDownInclineArrow': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedDownArrow': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayArrowUp': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayUpInclineArrow': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGraySideArrow': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownInclineArrow': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownArrow': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDash': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedTriangleDown': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenTriangleUp': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayStar': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.RatingHalfGrayStar': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayStar': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayCircle': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.Rating1QuarterGrayCircle': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.Rating2QuartersGrayCircle': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.Rating3QuartersGrayCircle': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayCircle': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.Rating4Bars': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.Rating3Bars': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.Rating2Bars': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.Rating1Bar': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.Rating0Bars': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.Rating4FilledBoxes': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.Rating3FilledBoxes': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.Rating2FilledBoxes': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.Rating1FilledBox': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.Rating0FilledBoxes': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenTrafficLight': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTrafficLight': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedTrafficLight': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenCircle': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowCircle': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedCircle': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightRedCircle': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightGrayCircle': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTriangle': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedDiamond': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenCheck': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowExclamation': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedCross': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledGreenCheck': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledYellowExclamation': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledRedCross': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenFlag': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowFlag': string;
	    'DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedFlag': string;
	    'DashboardWebStringId.ConditionalFormatting.IntersectionColumnDimension': string;
	    'DashboardWebStringId.ConditionalFormatting.IntersectionRowDimension': string;
	    'DashboardWebStringId.ConditionalFormatting.IntersectionLevelMode': string;
	    'DashboardWebStringId.ConditionalFormatting.GradientRangeBar': string;
	    'DashboardWebStringId.ConditionalFormatting.RangeGradient': string;
	    'DashboardWebStringId.ConditionalFormatting.SegmentNumber': string;
	    'DashboardWebStringId.ConditionalFormatting.ValueComparison': string;
	    'DashboardWebStringId.ConditionalFormatting.Ranges': string;
	    'DashboardWebStringId.ConditionalFormatting.AverageType': string;
	    'DashboardWebStringId.ConditionalFormatting.Above': string;
	    'DashboardWebStringId.ConditionalFormatting.AboveOrEqual': string;
	    'DashboardWebStringId.ConditionalFormatting.Below': string;
	    'DashboardWebStringId.ConditionalFormatting.BelowOrEqual': string;
	    'DashboardWebStringId.ConditionalFormatting.StyleSettingsType': string;
	    'DashboardWebStringId.ConditionalFormatting.Positive': string;
	    'DashboardWebStringId.ConditionalFormatting.Negative': string;
	    'DashboardWebStringId.ConditionalFormatting.MinimumType': string;
	    'DashboardWebStringId.ConditionalFormatting.MaximumType': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.None': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.SpecificDate': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.BeyondThisYear': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.LaterThisYear': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.LaterThisMonth': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.LaterThisWeek': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.NextWeek': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.Tomorrow': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.Today': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.Yesterday': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisWeek': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.LastWeek': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisMonth': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisYear': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.PriorThisYear': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.Empty': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.User': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.Beyond': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.ThisWeek': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.ThisMonth': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.MonthAfter1': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.MonthAfter2': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo1': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo2': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo3': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo4': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo5': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo6': string;
	    'DashboardWebStringId.ConditionalFormatting.DateType.Earlier': string;
	    'DashboardWebStringId.ConditionalFormatting.CardRuleTypeDataItem': string;
	    'DashboardWebStringId.ConditionalFormatting.CardRuleTypeCard': string;
	    'DashboardWebStringId.Colorization.NoSelectedSchema': string;
	    'DashboardWebStringId.Colorization.ColorSchemes': string;
	    'DashboardWebStringId.LayoutHasBeenChangedDialogMessage': string;
	    'DashboardWebStringId.SaveConfirmationDialogMessage': string;
	    'DashboardWebStringId.SaveChangesDialogMessage': string;
	    'DashboardWebStringId.Dialog.ChangeDataMemberMessage': string;
	    'DashboardWebStringId.Dialog.RemovedDataItemsMessage': string;
	    'DashboardWebStringId.Dialog.ConfirmChanges': string;
	    'DashboardWebStringId.Dialog.Save': string;
	    'DashboardWebStringId.Dialog.DoNotSave': string;
	    'DashboardWebStringId.Dialog.ButtonYes': string;
	    'DashboardWebStringId.Dialog.ButtonDontChange': string;
	    'DashboardWebStringId.Colorization.ColorSchemeType': string;
	    'DashboardWebStringId.Colorization.MeasureNames': string;
	    'DashboardWebStringId.Colorization.AddColor': string;
	    'DashboardWebStringId.Colorization.ValidationSelectMeasure': string;
	    'DashboardWebStringId.ColoringModeAuto': string;
	    'DashboardWebStringId.ColoringModeOff': string;
	    'DashboardWebStringId.ColoringModeOn': string;
	    'DashboardWebStringId.ColorScheme.Empty': string;
	    'DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButton': string;
	    'DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip': string;
	    'DashboardWebStringId.ConditionalFormatting.Miscellaneous': string;
	    'DashboardWebStringId.Dashboards': string;
	    'DashboardWebStringId.EditInDesigner': string;
	    'DashboardWebStringId.NoDashboards': string;
	    'DashboardWebStringId.AddNewDashboard': string;
	    'DashboardWebStringId.NewDashboard': string;
	    'DashboardWebStringId.Binding.Searching': string;
	    'DashboardWebStringId.Binding.EmptySearchResult': string;
	    'DashboardWebStringId.Errors.AttemptToLoadData': string;
	    'DashboardWebStringId.ConditionType': string;
	    'DashboardWebStringId.ConditionalFormatting.UnsupportedDataType': string;
	    'DashboardWebStringId.FormatRule': string;
	    'DashboardWebStringId.Notification.DashboardSaving': string;
	    'DashboardWebStringId.Notification.DashboardSaved': string;
	    'DashboardWebStringId.Notification.DashboardCanNotBeSaved': string;
	    'DashboardWebStringId.Notification.DashboardSavingIsNotAvailable': string;
	    'DashboardWebStringId.Notification.AttemptToLoadDashboards': string;
	    'DashboardWebStringId.Notification.DashboardLoading': string;
	    'DashboardWebStringId.Notification.AttemptToLoadDashboard': string;
	    'DashboardWebStringId.Notification.AttemptToConnectionStrings': string;
	    'DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode': string;
	    'DashboardWebStringId.Notification.AttemptToLoadParameterValues': string;
	    'DashboardWebStringId.Notification.AttemptToGetUnderlyingData': string;
	    'DashboardWebStringId.Notification.AttemptToConvertItemToType': string;
	    'DashboardWebStringId.Notification.AttemptToLoadDimensionUniqueValues': string;
	    'DashboardWebStringId.Notification.AttemptToLoadFieldListForDataSource': string;
	    'DashboardWebStringId.Notification.AttemptToGetColorScheme': string;
	    'DashboardWebStringId.Notification.NewDashboardCannotBeCreated': string;
	    'DashboardWebStringId.Notification.ErrorHasOccuredOn': string;
	    'DashboardWebStringId.Notification.UnsupportedDataSourceType': string;
	    'DashboardWebStringId.LimitVisibleData.DisplayAllDataTooltip': string;
	    'DashboardWebStringId.LimitVisibleData.IncreasePerformanceTooltip': string;
	    'DashboardWebStringId.ConditionalFormatting.Condition': string;
	    'DashboardWebStringId.CardLayout.MinWidth': string;
	    'DashboardWebStringId.CardLayout.MaxWidth': string;
	    'DashboardWebStringId.CardLayout.Editor.CardLayout': string;
	    'DashboardWebStringId.CardLayout.Editor.FormatOptions': string;
	    'DashboardWebStringId.CardLayout.LayoutOptions': string;
	    'DashboardWebStringId.CardLayout.ResetTemplate': string;
	    'DashboardWebStringId.CardLayout.ApplyToAllCards': string;
	    'DashboardWebStringId.Binding.ValuesPattern': string;
	    'DashboardWebStringId.Parameters.ParameterNameShouldBeUnique': string;
	    'DashboardWebStringId.Title.ImageEmbedded': string;
	    'DashboardWebStringId.Title.ImageLinked': string;
	    'DashboardWebStringId.Title.ImageNone': string;
	    'DashboardWebStringId.RangeFilter.SetDefaultCustomPeriod': string;
	    'DashboardWebStringId.RangeFilter.ClearDefaultCustomPeriod': string;
	    'DashboardWebStringId.MobileLayout.Back': string;
	    'DashboardWebStringId.MobileLayout.SwitchToViewer': string;
	    'DashboardWebStringId.Search': string;
	    'DashboardStringId.DefaultNameTabPage': string;
	    'DashboardStringId.DefaultNameChartPane': string;
	    'DashboardStringId.NewCalculatedFieldNamePrefix': string;
	    'DashboardStringId.NewParameterNamePrefix': string;
	    'AnalyticsCoreStringId.Parameter_Type_String': string;
	    'AnalyticsCoreStringId.Parameter_Type_DateTime': string;
	    'AnalyticsCoreStringId.Parameter_Type_Int16': string;
	    'AnalyticsCoreStringId.Parameter_Type_Int32': string;
	    'AnalyticsCoreStringId.Parameter_Type_Int64': string;
	    'AnalyticsCoreStringId.Parameter_Type_Float': string;
	    'AnalyticsCoreStringId.Parameter_Type_Double': string;
	    'AnalyticsCoreStringId.Parameter_Type_Decimal': string;
	    'AnalyticsCoreStringId.Parameter_Type_Boolean': string;
	    'AnalyticsCoreStringId.Parameter_Type_Guid': string;
	    'AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption': string;
	    'DataAccessUIStringId.FiltersView': string;
	    'DashboardStringId.SeriesTypeGroupArea': string;
	    'DashboardStringId.SeriesTypeGroupBar': string;
	    'DashboardStringId.SeriesTypeGroupBubble': string;
	    'DashboardStringId.SeriesTypeGroupFinancial': string;
	    'DashboardStringId.SeriesTypeGroupPointLine': string;
	    'DashboardStringId.SeriesTypeGroupRange': string;
	    'DashboardStringId.FunctionCategoryWindow': string;
	    'DashboardStringId.FunctionCategoryAggregate': string;
	    'DashboardStringId.FunctionCategoryAdvanced': string;
	    'DashboardStringId.FunctionDescriptionWindowAvg': string;
	    'DashboardStringId.FunctionDescriptionRunningMin': string;
	    'DashboardStringId.FunctionDescriptionTotal': string;
	    'DashboardStringId.FunctionDescriptionRankCompetition': string;
	    'DashboardStringId.FunctionDescriptionLookup': string;
	    'DashboardStringId.FunctionDescriptionRunningCount': string;
	    'DashboardStringId.FunctionDescriptionWindowMax': string;
	    'DashboardStringId.FunctionDescriptionVarp': string;
	    'DashboardStringId.FunctionDescriptionRunningAvg': string;
	    'DashboardStringId.FunctionDescriptionFirst': string;
	    'DashboardStringId.FunctionDescriptionWindowMin': string;
	    'DashboardStringId.FunctionDescriptionWindowStdDev': string;
	    'DashboardStringId.FunctionDescriptionLast': string;
	    'DashboardStringId.FunctionDescriptionWindowCount': string;
	    'DashboardStringId.FunctionDescriptionCountDistinct': string;
	    'DashboardStringId.FunctionDescriptionIndex': string;
	    'DashboardStringId.FunctionDescriptionWindowStdDevp': string;
	    'DashboardStringId.FunctionDescriptionWindowMode': string;
	    'DashboardStringId.FunctionDescriptionRunningMax': string;
	    'DashboardStringId.FunctionDescriptionRankPercentile': string;
	    'DashboardStringId.FunctionDescriptionRankDense': string;
	    'DashboardStringId.FunctionDescriptionWindowSum': string;
	    'DashboardStringId.FunctionDescriptionWindowCountDistinct': string;
	    'DashboardStringId.FunctionDescriptionStdDevp': string;
	    'DashboardStringId.FunctionDescriptionSize': string;
	    'DashboardStringId.FunctionDescriptionMedian': string;
	    'DashboardStringId.FunctionDescriptionRankModified': string;
	    'DashboardStringId.FunctionDescriptionWindowMedian': string;
	    'DashboardStringId.FunctionDescriptionRunningSum': string;
	    'DashboardStringId.FunctionDescriptionWindowVarp': string;
	    'DashboardStringId.FunctionDescriptionWindowVar': string;
	    'DashboardStringId.FunctionDescriptionStdDev': string;
	    'DashboardStringId.FunctionDescriptionRankUnique': string;
	    'DashboardStringId.FunctionDescriptionVar': string;
	    'DashboardStringId.FunctionDescriptionAggr': string;
	    'DashboardStringId.FunctionDescriptionAggrJoinRule': string;
	    'DashboardStringId.FunctionDescriptionWindowDefinition': string;
	    'DashboardStringId.FunctionDescriptionWindowDefinitionPartitionBy': string;
	    'DashboardStringId.FunctionDescriptionWindowDefinitionOrderBy': string;
	    'DashboardStringId.FunctionDescriptionWindowDefinitionOrderAsc': string;
	    'DashboardStringId.FunctionDescriptionWindowDefinitionOrderDesc': string;
	    'DashboardStringId.AggregateExFunctionDescriptionCountNotNull': string;
	    'DashboardStringId.AggregateExFunctionDescriptionMode': string;
	    'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHour': string;
	    'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinute': string;
	    'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinuteSecond': string;
	    'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateMonthYear': string;
	    'DashboardStringId.FunctionDescriptionGetDateWeekYear': string;
	    'DashboardStringId.FunctionDescriptionGetDateWeekYear2': string;
	    'DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateQuarterYear': string;
	    'DashboardStringId.FunctionOperatorExFunctionDescriptionGetQuarter': string;
	    'DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfMonth': string;
	    'DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfYear': string;
	    'DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime3': string;
	    'DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime4': string;
	    'DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime5': string;
	    'DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime6': string;
	    'DashboardStringId.FunctionOperatorExFunctionDescriptionToBoolean': string;
	    'DashboardStringId.FunctionOperatorExFunctionDescriptionToDateTime': string;
	    'DashboardStringId.SparklineIndicationModeLine': string;
	    'DashboardStringId.SparklineIndicationModeArea': string;
	    'DashboardStringId.SparklineIndicationModeBar': string;
	    'DashboardStringId.SparklineIndicationModeWinLoss': string;
	    'DashboardStringId.DefaultNameDateFilterItem': string;
	    'DashboardWebStringId.DateFilter.FilterType': string;
	    'DashboardWebStringId.DateFilter.FilterTypeExact': string;
	    'DashboardWebStringId.DateFilter.FilterTypeAfter': string;
	    'DashboardWebStringId.DateFilter.FilterTypeBefore': string;
	    'DashboardWebStringId.DateFilter.FilterTypeBetween': string;
	    'DashboardWebStringId.DateFilter.ArrangementMode': string;
	    'DashboardWebStringId.DateFilter.ArrangementModeAutoHeight': string;
	    'DashboardWebStringId.DateFilter.ArrangementModeHorizontal': string;
	    'DashboardWebStringId.DateFilter.ArrangementModeVertical': string;
	    'DashboardWebStringId.DateFilter.DatePickerLocation': string;
	    'DashboardWebStringId.DateFilter.DatePickerLocationFar': string;
	    'DashboardWebStringId.DateFilter.DatePickerLocationNear': string;
	    'DashboardWebStringId.DateFilter.DatePickerLocationHidden': string;
	    'DashboardStringId.DateFilterDisplayTextPattern': string;
	    'DashboardStringId.DateFilterDatePickerButtonDefaultText': string;
	    'DashboardStringId.FromDatePeriodCaption': string;
	    'DashboardStringId.ToDatePeriodCaption': string;
	    'DashboardStringId.FromToDatePeriodCaption': string;
	    'DashboardStringId.UniqueNameValidationMessage': string;
	    'DashboardStringId.GridTotalAutoTemplate': string;
	    'DashboardStringId.GridTotalValueTemplate': string;
	    'DashboardStringId.GridTotalTemplate': string;
	    'DashboardStringId.GridTotalTypeCount': string;
	    'DashboardStringId.GridTotalTypeMin': string;
	    'DashboardStringId.GridTotalTypeMax': string;
	    'DashboardStringId.GridTotalTypeAvg': string;
	    'DashboardStringId.GridTotalTypeSum': string;
	    'DashboardStringId.ActionShowDataInspector': string;
	    'DashboardStringId.InspectedData': string;
	    'DashboardStringId.InspectedTypeFormatString': string;
	    'DashboardStringId.AggregatedDataType': string;
	    'DashboardStringId.RawDataType': string;
	    'DashboardStringId.OLAPUnavailableRawData': string;
	    'DashboardStringId.SparklineValuesSeparator': string;
	    'DashboardStringId.SparklineArgumentValueSeparator': string;
	    'DashboardWebStringId.Grid.FilterClause.ApplyFilter': string;
	    'DashboardWebStringId.Grid.FilterClause.ResetOperation': string;
	    'DashboardWebStringId.Grid.FilterClause.Contains': string;
	    'DashboardWebStringId.Grid.FilterClause.DoesNotContain': string;
	    'DashboardWebStringId.Grid.FilterClause.StartsWith': string;
	    'DashboardWebStringId.Grid.FilterClause.EndsWith': string;
	    'DashboardWebStringId.Grid.FilterClause.Equals': string;
	    'DashboardWebStringId.Grid.FilterClause.DoesNotEqual': string;
	    'DashboardWebStringId.Grid.FilterClause.Less': string;
	    'DashboardWebStringId.Grid.FilterClause.Greater': string;
	    'DashboardWebStringId.Grid.FilterClause.LessOrEqual': string;
	    'DashboardWebStringId.Grid.FilterClause.GreaterOrEqual': string;
	    'DashboardWebStringId.Grid.FilterClause.Between': string;
	    'DashboardWebStringId.Grid.FilterClause.BetweenStart': string;
	    'DashboardWebStringId.Grid.FilterClause.BetweenEnd': string;
	    'DashboardWebStringId.AccordionTab.Content': string;
	    'DashboardWebStringId.TextBoxItemEditor.NoFields': string;
	    'DashboardWebStringId.TextBoxItemEditor.InsertField': string;
	    'DashboardWebStringId.TextBoxItemEditor.EditTextButton': string;
	    'DashboardWebStringId.TextBoxItemEditor.DialogCaption': string;
	    'DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose': string;
	    'DashboardWebStringId.TextBoxItemEditor.DialogClose': string;
	    'DashboardStringId.StartDate': string;
	    'DashboardStringId.EndDate': string;
	    'DashboardWebStringId.AccordionTab.MeasureFilter': string;
	    'DashboardStringId.FunctionDescriptionAggregateFilter': string;
	    'DashboardWebStringId.TabPages': string;
	    'DashboardWebStringId.More': string;
	    'DashboardStringId.MeasureFilterCaptionFormatString': string;
	};

}
declare module DevExpress.Dashboard.Internal.Data {
	export function setLocalization(localization: {
	    [key: string]: string;
	}): void;

}
declare module DevExpress.Dashboard.Data {
	export let specialValues: {
	    nullValueGuid: string;
	    othersValueGuid: string;
	    olapNullValueGuid: string;
	    errorValueGuid: string;
	};

}
declare module DevExpress.Dashboard.Internal.Data {
import dxElement = DevExpress.core.dxElement;
	export let type: {
	    isDefined: (object: any) => boolean;
	    isFunction: (object: any) => boolean;
	    isString: (object: any) => boolean;
	    isNumeric: (object: any) => boolean;
	    isBoolean: (object: any) => boolean;
	};
	export let KpiValueMode: {
	    Measure: string;
	    Delta: string;
	}, pivotArea: {
	    column: string;
	    row: string;
	    data: string;
	}, gaugeViewType: {
	    CircularFull: string;
	    CircularHalf: string;
	    CircularQuarterRight: string;
	    CircularQuarterLeft: string;
	    CircularThreeFourth: string;
	    LinearHorizontal: string;
	    LinearVertical: string;
	}, tooltipContainerSelector: string;
	export function toColor(numericColorValue: any): any;
	export function getRGBColor(r: any, g: any, b: any, a: any): string;
	export function allowSelectValue(values: any): boolean;
	export function isVulnerable(value: string): boolean;
	export function encodeHtml(str: any): string;
	export function decodeHtml(value: any): string;
	export function moveContent(source: HTMLElement, dest: HTMLElement, clearSource: boolean): void;
	export function arrayContains(container: Array<Array<any>>, part: Array<any>): boolean;
	export function arrayEquals(array1: Array<any>, array2: Array<any>): boolean;
	export function checkValuesAreEqual(value1: any, value2: any, nullValuesEquals?: boolean, emptyArraysEquals?: boolean): boolean;
	export function checkTuplesAreEqual(tuple1: any, tuple2: any): boolean;
	export function checkArrayContainsTuple(array: any, tuple: any): any;
	export function getAxisPointValue(tuple: any, axisName: any): any;
	export function getTagValue(tag: any): any;
	export function getValueIndex(matrix: any, vector: any): number;
	export function treeWalker(rootNode: any, childrenFunc: any): {
	    walk: (func: any) => void;
	    walkLeaf: (func: any) => void;
	    _walkInternal: (node: any, parent: any, func: any, callPredicate: any) => void;
	};
	export function getParentClasses($obj: any): any[];
	export function wrapHash(valuesArray: any): {};
	export function areNotOrderedListsEqual(list1: any, list2: any): boolean;
	export function pxToNumber(px: any): number;
	export function debounce(func: any, wait: any): (...args: any[]) => void;
	export function asyncDebounce(func: any, action: any): (...args: any[]) => void;
	export function distinct<T>(array: Array<T>, compare: (value1: T, value2: T) => boolean): Array<T>;
	export function deepStrictEquals(x: any, y: any): boolean;
	export function strictEquals(x: any, y: any, equalsCore: (x: any, y: any) => boolean): boolean;
	export type dxRenderer = {
	    dxRenderer: true;
	};
	export const $unwrap: (element: Element | HTMLElement | JQuery<HTMLElement> | dxRenderer) => HTMLElement;
	export const $wrap: (element: Element | HTMLElement | JQuery<HTMLElement>) => JQuery<HTMLElement>;
	export const wrapPublicElement: (element: HTMLElement) => dxElement;
	export const extend: (target: any, source1: any, ...sources: any[]) => any;
	export const deepExtend: (target: any, ...sources: any[]) => any;
	export const isPlainObject: (object: any) => boolean;
	export const getWidth: (element: HTMLElement) => number;
	export const getHeight: (element: HTMLElement) => number;
	export const isVisible: (element: HTMLElement) => boolean;
	export const closest: (element: HTMLElement, css: any) => HTMLElement;
	export const createJQueryCallbacks: () => JQuery.Callbacks<Function>;
	export class LocalStorageHelper {
	    private static _getLocalStorage;
	    static getItem(key: string, defaultValue?: string): string;
	    static setItem(key: string, value: string): void;
	}
	export function findIndex(array: Array<any>, predicate: {
	    (value: any): boolean;
	}): number;
	export function findLastIndex(array: Array<any>, predicate: {
	    (value: any): boolean;
	}): number;
	export function createSvgIconElement(iconId: string): Element;

}
declare module DevExpress.Dashboard.Internal.Model {
    import DayOfWeekNumber = DevExpress.Dashboard.Internal.Data.DayOfWeekNumber;
	export function tryConvertToDateTime(value: any): any;
	export function patchDateTime(storageDTO: any): void;
	export function toStringArray(value: any): any;
	export function toUtcDate(value: any): Date;
	export function fromUtcDateToString(date: Date): string;
	export function serializeDate(date: Date): string;
	export function clone(date: Date): Date;
	export function addDays(date: Date, days: number): void;
	export type CalendarWeekRule = 'FirstDay' | 'FirstFullWeek' | 'FirstFourDayWeek';
	export function getIsStartOfFirstWeek(calendarWeekRule: CalendarWeekRule): {
	    (date: any): boolean;
	};
	export function divideIntoWeeks(start: Date, end: Date, firstDayOfWeek: DayOfWeekNumber, calendarWeekRule: CalendarWeekRule, add: {
	    (date: Date): void;
	}): void;
	export function getStartOfFirstWeek(year: number, firstDayOfWeek: DayOfWeekNumber, calendarWeekRule: CalendarWeekRule): Date;

}
declare module DevExpress.Dashboard {
	export class LegacySettings {
	    static useLegacyTreeView: boolean;
	    static _useCardLegacyLayout: boolean;
	}
	export class DashboardPrivateSettings {
	    static customNumericFormatMode: 'Disabled' | 'Hidden' | 'Enabled';
	}

}
declare module DevExpress.Dashboard.Internal.Data {
	export let ALL_ELEMENT: {
	    value: {
	        all: boolean;
	    };
	    key: number;
	    readonly text: any;
	    readonly html: any;
	    isAll: boolean;
	};
	export class localizer {
	    static getString(key: any): string;
	    static getPredefinedString(value: any): any;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
    import DataItemNumericFormatType = DevExpress.Dashboard.Model.DataItemNumericFormatType;
    import DataItemNumericUnit = DevExpress.Dashboard.Model.DataItemNumericUnit;
    import DateFormat = DevExpress.Dashboard.Model.DateFormat;
    import DateTimeFormat = DevExpress.Dashboard.Model.DateTimeFormat;
    import DateTimeGroupInterval = DevExpress.Dashboard.Model.DateTimeGroupInterval;
    import DayOfWeekFormat = DevExpress.Dashboard.Model.DayOfWeekFormat;
    import ExactDateFormat = DevExpress.Dashboard.Model.ExactDateFormat;
    import HourFormat = DevExpress.Dashboard.Model.HourFormat;
    import MonthFormat = DevExpress.Dashboard.Model.MonthFormat;
    import QuarterFormat = DevExpress.Dashboard.Model.QuarterFormat;
    import YearFormat = DevExpress.Dashboard.Model.YearFormat;
    import CalendarWeekRule = DevExpress.Dashboard.Internal.Model.CalendarWeekRule;
	export let defaultNumericFormat: NumericFormatInfo;
	export let defaultPercentFormat: NumericFormatInfo;
	export let defaultScientificFormat: NumericFormatInfo; type DateFormatInfoType = 'abbr' | 'full' | 'long' | 'num' | 'short' | 'timeOnly';
	export let _types: {
	    [name: string]: DateFormatInfoType;
	};
	export function format(value: any, formatViewModel: ValueFormatViewModel): any;
	export function formatByFormatInfo(value: any, formatInfo: NumericFormatInfo | DateTimeFormatInfo): any;
	export function formatFilterValue(filterValue: any): any;
	export function constructIntervalFilterText(rangeText: {
	    left: string;
	    right: string;
	}): any;
	export function formatNumeric(value: any, numericFormatViewModel: NumericFormatViewModel): string;
	export function formatDateTime(value: any, dateFormatViewModel: DateTimeFormatViewModel): string;
	export function formatObject(value: any): string;
	export function formatPercentValue(value: any): any;
	export function formatScientificAxisValue(value: any): any;
	export function formatAxisValue(value: any, axisMin: any, axisMax: any): any;
	export function getAxisFormat(axisMin: any, axisMax: any): NumericFormatInfo;
	export function calculateUnitPower(axisMin: any, axisMax: any): 0 | 1 | 3 | 2;
	export function calculatePrecision(axisMin: any, axisMax: any): number;
	export function convertToFormat(formatViewModel: ValueFormatViewModel): NumericFormatInfo | DateTimeFormatInfo;
	export function _convertToNumberFormat(numericFormatViewModel: NumericFormatViewModel): NumericFormatInfo;
	export function _convertToDateFormat(dateFormatViewModel: DateTimeFormatViewModel): DateTimeFormatInfo;
	export function _getSyntheticDateTimeGroupInterval(groupInterval: DateTimeGroupInterval, exactDateFormat: ExactDateFormat): DateTimeGroupInterval | 'DateYear';
	export function _convertNumericFormat(formatType: DataItemNumericFormatType): NumericFormatInfoType;
	export function _convertNumericUnit(numericUnit: DataItemNumericUnit): string | number;
	export interface ValueFormatViewModel {
	    NumericFormat?: NumericFormatViewModel;
	    DateTimeFormat?: DateTimeFormatViewModel;
	}
	export interface NumericFormatViewModel {
	    FormatType?: DataItemNumericFormatType;
	    Unit?: DataItemNumericUnit;
	    Currency?: string;
	    IncludeGroupSeparator?: boolean;
	    ForcePlusSign?: boolean;
	    SignificantDigits?: number;
	    Precision?: number;
	    CustomFormatString?: string;
	}
	export interface DateTimeFormatViewModel {
	    GroupInterval?: DateTimeGroupInterval;
	    ExactDateFormat?: ExactDateFormat;
	    DateFormat?: DateFormat;
	    DateHourFormat?: DateTimeFormat;
	    DateHourMinuteFormat?: DateTimeFormat;
	    DateTimeFormat: DateTimeFormat;
	    YearFormat: YearFormat;
	    QuarterFormat?: QuarterFormat;
	    MonthFormat?: MonthFormat;
	    HourFormat?: HourFormat;
	    DayOfWeekFormat?: DayOfWeekFormat;
	    FirstDayOfWeek?: DayOfWeekNumber;
	    CalendarWeekRule?: CalendarWeekRule;
	}
	export type DayOfWeekNumber = 0 | 1 | 2 | 3 | 4 | 5 | 6;
	export interface NumericFormatInfo {
	    format?: NumericFormatInfoType;
	    precision?: number;
	    currency?: string;
	    includeGroupSeparator?: boolean;
	    significantDigits?: number;
	    unitPower?: string | number;
	    plus?: boolean;
	    showTrailingZeros?: boolean;
	    type?: string;
	    unlimitedIntegerDigits?: boolean;
	    dateType?: DateFormatInfoType;
	}
	export type NumericFormatInfoType = 'fixedPoint' | 'currency' | 'exponential' | 'percent';
	export type DateTimeGroupIntervalCamelCase = 'year' | 'quarter' | 'month' | 'day' | 'hour' | 'minute' | 'second' | 'dayOfYear' | 'dayOfWeek' | 'weekOfYear' | 'weekOfMonth' | 'quarterYear' | 'monthYear' | 'weekYear' | 'dayMonthYear' | 'dateHour' | 'dateHourMinute' | 'dateHourMinuteSecond' | 'none';
	export type DateTimeFormatInfoType = DateTimeGroupIntervalCamelCase | 'dateYear';
	export interface DateTimeFormatInfo {
	    format: DateTimeFormatInfoType;
	    dateType: DateFormatInfoType;
	    firstDayOfWeek?: DayOfWeekNumber;
	    calendarWeekRule?: CalendarWeekRule;
	}
	export {};

}
declare module DevExpress.Dashboard.Internal.Data {
    import formatHelper = DevExpress.ui;
	export let invariantCurrencyIdentifier: string;
	export let invariantCurrencySymbol: string;
	export { formatHelper };

}
declare module DevExpress.Dashboard.Internal.Viewer {
	export function resetGlobalSizeCache(): void;
	/**
	 * This decorator can be used only with pure function without side effects and simple type parameters.
	 * Be VERY carefully when use this decorator
	 * /
	 * @param cacheKey
	 */
	export function cacheable(cacheKey: string): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {
	    value: (...args: any[]) => any;
	};

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dxScrollView =  DevExpress.ui.dxScrollView ;
	export class RenderHelper {
	    static html(element: HTMLElement, content: string, encodeHtml: boolean): void;
	    static rectangle(color: any, width: any, height: any): any;
	    static getActualBorder($element: JQuery): {
	        width: number;
	        height: number;
	    };
	    static getActualSize($element: any, collapse?: boolean): {
	        width: number;
	        height: number;
	    };
	    static getDefaultPalette(): string[];
	    static getScrollable(element: HTMLElement): dxScrollView;
	    static updateScrollable(element: HTMLElement): void;
	    static wrapScrollable(container: HTMLElement, parentOverflow: any, direction: any): HTMLElement;
	    static getThemeBaseElement: () => HTMLElement;
	    static getElementBox(element: HTMLElement): {
	        width: number;
	        height: number;
	    };
	    static processElement($element: JQuery, processElement: () => any): any;
	    static getElementBoxFloat(e: Element): {
	        width: number;
	        height: number;
	    };
	    static widgetIncidentOccurred(e: any): void;
	    static getBorderSizeByClasses(classNames: string[]): {
	        width: number;
	        height: number;
	    };
	}
	export function createFakeObjects(classNames: any, cssOptions: any): {
	    firstElement: any;
	    lastElement: any;
	    remove: () => void;
	};

}
declare module DevExpress.Dashboard.Internal.Viewer {
	export let types: {
	    group: string;
	    page: string;
	    tabPage: string;
	    tabContainer: string;
	    rangeFilter: string;
	    chart: string;
	    scatter: string;
	    pie: string;
	    card: string;
	    grid: string;
	    pivot: string;
	    gauge: string;
	    text: string;
	    image: string;
	    boundImage: string;
	    map: string;
	    choroplethMap: string;
	    geoPointMap: string;
	    bubbleMap: string;
	    pieMap: string;
	    comboBox: string;
	    listBox: string;
	    treeView: string;
	    treemap: string;
	    dateFilter: string;
	    custom: string;
	};

}
declare module DevExpress.Dashboard.Internal.Viewer {
	export let cssClassNames: {
	    widgetsViewerScrollableHolder: string;
	    widgetViewerIdPrefix: string;
	    widgetViewerContainer: string;
	    widgetViewerTable: string;
	    widgetViewerRow: string;
	    widgetViewerCell: string;
	    cardItem: string;
	    widgetItem: string;
	    cardTitle: string;
	    cardSubtitle: string;
	    cardIndicator: string;
	    cardVariableValue1: string;
	    cardVariableValue2: string;
	    cardMainValue: string;
	    cardSparkline: string;
	    cardHiddenContainer: string;
	    cardNowrapHiddenContainer: string;
	    layoutCardHiddenContainer: string;
	    selectedItem: string;
	    hoveredItem: string;
	};
	export let layoutCardCssClassNames: {
	    cardScrollableHolder: string;
	    card: string;
	    content: string;
	    contentTopRows: string;
	    contentBottomRows: string;
	    row: string;
	    rowOnlyCenterElements: string;
	    rowLeftRightElements: string;
	    rowElement: string;
	    indicatorElement: string;
	    sparklineElement: string;
	};

}
declare module DevExpress.Dashboard.Internal.Viewer {
	export var getBaseColorScheme: () => "dark" | "light";

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DrawProperty = DevExpress.Dashboard.Internal.Viewer.DrawProperty;
	export class appearanceSettingsProvider {
	    static toCssClassBody(appearanceType: any, theme?: string, drawProperty?: DrawProperty): string;
	    static toCss(appearanceType: any, drawProperty?: DrawProperty): string;
	    private static _createFontStyles;
	    private static _createBackColorStyle;
	    static backAndGradientColorGroupsToBackColor(appearanceType: any): any;
	    private static _backColorsWithFontGroupToBackColor;
	    private static isDark;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
	export class DrawProperty {
	    shouldDrawFontStyles: boolean;
	    shouldDrawBackColorStyle: boolean;
	}
	export class styleSettingsProvider {
	    protected static cssClassNames: {
	        iconConditionalFormatting: string;
	        barAxis: string;
	        customStyle: string;
	        customGradientStyle: string;
	        dashboardContainer: string;
	        absolutePosition: string;
	        relativePosition: string;
	        flexParent: string;
	        flexParentBaseline: string;
	        truncated: string;
	        wordWrap: string;
	        stretched: string;
	        fixed: string;
	        leftMargin: string;
	        rightMargin: string;
	        barContainer: string;
	        barValue: string;
	    };
	    static toIconCssClass(iconType: any): string;
	    static inctanceCounter: number;
	    static hiddenTextCounter: number;
	    cfModel: any;
	    cssCustomClasses: Array<{
	        primary: string;
	        secondary: string;
	    }>;
	    cssCustomClassesLinks: Array<any>;
	    id: number;
	    barCache: {
	        [key: string]: {
	            barContainer: JQuery;
	            container: JQuery;
	            barDiv: JQuery;
	            showBarOnly: boolean;
	            textDiv: JQuery;
	            axisDiv: JQuery;
	            tooltipDiv: JQuery;
	            drawAxis: boolean;
	        }[];
	    };
	    padding: string;
	    barPrefixes: Array<string>;
	    drawingLocked: boolean;
	    wordWrap: boolean;
	    constructor();
	    FontStyle: {
	        Bold: number;
	        Italic: number;
	        Underline: number;
	        Strikeout: number;
	    };
	    DataAttributes: {
	        Bar: string;
	        Axis: string;
	        NormalizedValue: string;
	        ZeroPosition: string;
	        AllowNegativeAxis: string;
	        DrawAxis: string;
	    };
	    initialize(cfModel: any, wordWrap?: boolean): void;
	    dispose(): void;
	    draw(): void;
	    updateBarWidth(barPrefix: any): void;
	    applyStyleSettings(container: HTMLElement, popupContainer: HTMLElement, styleSettingsInfo: any, ignoreImageSettings: any, barPrefix?: any, forceLeftAlignment?: boolean, isSecondaryStyle?: boolean): void;
	    private _getContainerHeights;
	    protected _createCssClassName(prefix: any, styleIndex: any, postFix: string): string;
	    protected _applyIconSettings($container: JQuery, iconType: any, forceLeftAlignment?: boolean, flexParentStyle?: string): void;
	    protected _wrapChildElementsToApplyIconSettings($container: JQuery, classes: any, forceLeftAlignment: boolean): void;
	    protected _textAlignmentIsLeft($container: any): boolean;
	    private _getBarInfo;
	    private _createBarContent;
	    private _createBarDiv;
	    private _createAxisDiv;
	    private _setBarBounds;
	    private _setAxisBounds;
	    private _getCustomBackColor;
	    private _getRangeBackColorStyleSettings;
	    private _getBackColor;
	    private _clearCssClasses;
	    protected _registerCssClasses(): void;
	    protected _registerCssClassByStyleModel(styleSettingsModel: any, styleIndex: number, isSecondaryStyle: any): void;
	    protected _addCssClassToDictionary(styleName: string, styleIndex: number, isSecondary: boolean): void;
	    protected _generateCssClassName(styleIndex: number, isSecondary: boolean): string;
	    addNewStyle(styleName: string, styleIndex: number, isSecond: boolean): void;
	    protected _isShouldGenerateSecondaryStyle(styleSettingsModel: any): boolean;
	    protected _isSecondaryStyle(styleSettingsModel: any): boolean;
	    protected _getStylePostFix(isSecondary: boolean): any;
	    protected _getDrawProperty(isSecondaryStyle: boolean): DrawProperty;
	    protected _shouldDrawBarStyle(styleSettingsModel: any): boolean;
	    protected _generateCssClassBody(styleSettingsModel: any, cssClassName: string, drawProperty?: DrawProperty): void;
	    protected _getCssTdSelector(cssClassname: string): string;
	    private _createCssClassFromCustomAppearanceType;
	    private _createFontStyles;
	    private _createBackColorStyle;
	    private _createCssClassFromPredefinedAppearanceType;
	}
	export class cardItemStyleSettingsProvider extends styleSettingsProvider {
	    constructor();
	    protected _getDrawProperty(isSecondaryStyle: boolean): DrawProperty;
	    protected _getStylePostFix(isSecondaryStyle: boolean): string;
	    protected _isShouldGenerateSecondaryStyle(styleSettingsModel: any): boolean;
	    protected _shouldDrawBarStyle(styleSettingsModel: any): boolean;
	    protected _textAlignmentIsLeft($container: any): boolean;
	    protected _getCssTdSelector(cssClassname: string): string;
	    protected _applyIconSettings($container: JQuery, iconType: any, forceLeftAlignment?: boolean, flexParentStyle?: string): void;
	    protected _wrapChildElementsToApplyIconSettings($container: JQuery, classes: any, forceLeftAlignment: boolean): void;
	    getIconType(styleSettingsInfo: any): any;
	    applyIndicatorStyle(container: HTMLElement, iconType: any): void;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
	export let MIN_PANE_HEIGHT: number, MIN_PANE_WIDTH: number, ELEMENTS_COUNT_ANIMATION_THRESHOLD: number;

}
declare module DevExpress.Dashboard.Internal.Viewer {
	export const indicatorType: {
	    none: string;
	    up: string;
	    down: string;
	    warning: string;
	};

}
declare module DevExpress.Dashboard.Internal.Viewer {
	export class DeltaIndicator {
	    _container: any;
	    _renderer: any;
	    _shape: any;
	    constructor(options?: any);
	    _init(): void;
	    draw(options: any): any;
	    _prepareDrawParams(options: any): any;
	    _render(params: any): void;
	    _drawShape(params: any): any;
	    static getIndicatorColorType(type?: any, hasPositiveMeaning?: any, useDefaultColor?: any): any;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
	export class SimpleIndicator {
	    private static _staticPartMarkup;
	    private static svgIndicators;
	    static getIndicator(type: any, hasPositiveMeaning?: any): any;
	    static readonly __getRenderedIndicators: {
	        none: string;
	        up: string;
	        up_negative: string;
	        down: string;
	        down_negative: string;
	        warning: string;
	    };
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
	export class BaseWidgetItem {
	    _options: any;
	    _type: any;
	    _isSelected: any;
	    tag: any;
	    _hoverEnabled: any;
	    _itemDiv: HTMLElement;
	    index: any;
	    constructor(options?: any);
	    _getDefaultOptions(): {
	        cursor: string;
	        isSelected: boolean;
	        hoverEnabled: boolean;
	        style: {
	            backgroundColor: string;
	            borderStyle: string;
	            borderColor: string;
	        };
	        selectionStyle: {
	            backgroundColor: string;
	            borderStyle: string;
	            borderColor: string;
	        };
	        hoverStyle: {
	            backgroundColor: string;
	            borderStyle: string;
	            borderColor: string;
	        };
	    };
	    dispose(): void;
	    _getStyle(isSelected: any): any;
	    select(): void;
	    _hover(isHover: any): void;
	    clearSelection(): void;
	    _disposeClickEvent(): void;
	    _disposeHoverEvent(): void;
	    setClickHandler(handler: any): void;
	    setHoverHandler(handler: any): void;
	    draw(width: any, height: any, index: any, commonItemsOptions?: any): HTMLElement;
	    initDraw(width?: any, height?: any, index?: any): HTMLElement;
	    _applyExtraStyles(): void;
	    toggleSelection(): void;
	    getWidget(): any;
	    finishRender(params?: any): void;
	    getItemContainer(): HTMLElement;
	    _formStyle(selector: any, cssProperties: any): string;
	    getCssStyle(width: any, height: any, _commonItemsOptions: any, prefix: any): string;
	    calcCommonItemSpecificOptions(width: any, height: any): any;
	    resize(width: any, height: any, index: any, commonItemsOptions?: any): any;
	    rerender(drawOptions: any): any;
	    detachItem(): any;
	    setHoverEnabledState(hoverEnabled: boolean): void;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dxSparklineOptions = DevExpress.ui;
    import BaseWidgetItem = DevExpress.Dashboard.Internal.Viewer.BaseWidgetItem;
	export let cardValue1Counter: number;
	export class CardItem extends BaseWidgetItem {
	    data: any;
	    title: any;
	    subTitle: any;
	    sparklineOptions: dxSparklineOptions;
	    variableValue1: any;
	    variableValue2: any;
	    mainValue: any;
	    indicator: any;
	    subtitleDotsIndex: any;
	    _subtitleDotsIndex: any;
	    static ensureOptions(options: any): any;
	    constructor(item: any, options: any);
	    draw(widthCard: any, heightCard: any, cardIndex: any, commonItemsOptions: any): HTMLElement;
	    resize(width: any, height: any, index: any, commonItemsOptions: any): HTMLElement;
	    getCssStyle(width: any, height: any, commonItemsOptions: any, prefix: any): string;
	    private static calcFonts;
	    static __calcFonts: typeof CardItem.calcFonts;
	    calcCommonItemSpecificOptions(width: any, height: any): {
	        paddings: any;
	        sparklineHeight: number;
	        fontSizes: {
	            title: number;
	            subTitle: number;
	            mainValue: number;
	            variableValue1: number;
	            variableValue2: number;
	        };
	        oneRowHeight: any;
	    };
	    dispose(): void;
	    _addTooltip(itemDiv: HTMLElement, containerId: any, tooltipPrefix: any, text: any, index: any): void;
	    _getDefaultOptions(): any;
	    _getText(classText: any): any;
	    _getClassFromIndicator(type: any, hasPositiveMeaning: any, useDefaultColor: any): any;
	    _getCardStyle(isSelected: any): any;
	    _getValueClassName(classText: any): any;
	    _setSubtitleDotsIndex(index: any): void;
	    _getEllipsisText(inputText: any, commonItemsOptions: any, containerWidth: any): any;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
	export let positioningDirection: {
	    Vertical: string;
	    Horizontal: string;
	};
	export class ArrangementInfo {
	    totalItemCount: any;
	    itemsOnRowCount: any;
	    itemWidth: any;
	    itemHeight: any;
	    direction: any;
	    itemMargin: any;
	    options: any;
	    itemsOnColumnCount: any;
	    constructor(totalItemCount: any, itemsOnRowCount: any, itemWidth: any, itemHeight: any, itemMargin: any, direction: any, options: any);
	    getHeight(useMargin: any): number;
	    getWidth(useMargin: any): number;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DOMComponent =  DevExpress.DOMComponent ;
	export let widgetItemFactory: {
	    createWidget: (widgetType: string, container: HTMLElement, options: Object) => DOMComponent;
	    getAdditionalOptions: (widgetType: any, container: any, options: any) => any;
	};

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DOMComponent =  DevExpress.DOMComponent ;
    import widgetItemCore = DevExpress.Dashboard.Internal.Viewer.widgetItemCore;
    import BaseWidgetItem = DevExpress.Dashboard.Internal.Viewer.BaseWidgetItem;
	export class WidgetItem extends BaseWidgetItem {
	    static ensureOptions(options: any): any;
	    _widgetType: any;
	    _itemData: any;
	    _widget: DOMComponent;
	    constructor(itemData?: widgetItemCore, options?: any);
	    dispose(): void;
	    _disposeWidget(): void;
	    _getDefaultOptions(): any;
	    detachItem(): void;
	    initDraw(width?: any, height?: any, index?: any): HTMLElement;
	    draw(width?: any, height?: any, index?: any): HTMLElement;
	    resize(width: any, height: any, index?: any): HTMLElement;
	    rerender(drawOptions: any): void;
	    getWidget(): DOMComponent;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DOMComponent =  DevExpress.DOMComponent ;
import dxElement = DevExpress.core.dxElement;
    import dxScrollView =  DevExpress.ui.dxScrollView ;
    import ArrangementInfo = DevExpress.Dashboard.Internal.Viewer.ArrangementInfo;
    import BaseWidgetItem = DevExpress.Dashboard.Internal.Viewer.BaseWidgetItem;
	export interface IWidgetsViewer {
	    option: any;
	    element(): dxElement;
	    redraw: () => void;
	    itemsList: any;
	    clearSelections: () => void;
	    getSizeParams: () => any;
	    clear: () => void;
	}
	export class dxWidgetsViewer extends DOMComponent implements IWidgetsViewer {
	    _viewerID: any;
	    _content: HTMLElement;
	    _scrollBarWidth: number;
	    _resizeHandler: () => void;
	    totalMarginsAndBorders: {
	        width: number;
	        height: number;
	    };
	    _drawTimer: number;
	    itemsList: BaseWidgetItem[];
	    _widgetType: any;
	    _styleTag: HTMLStyleElement;
	    _hasVerticalScroll: 0 | 1;
	    _hasHorizontalScroll: 0 | 1;
	    align: 'left' | 'center';
	    minItemWidth: number;
	    curItemWidth: number;
	    _itemProportions: any;
	    _needVerticalCentering: boolean;
	    minItemHeight: number;
	    curItemHeight: number;
	    _firstDraw: boolean;
	    innerContainer: HTMLElement;
	    _viewerParams: any;
	    countCallInternalProcessBatchItems: number;
	    private container;
	    _getDefaultOptions(): any;
	    _init(): void;
	    private initContainer;
	    clear(): void;
	    _dispose(): void;
	    _getScrollable(): dxScrollView;
	    _updateScrollable(): void;
	    _scrollTo(left: any, top: any): void;
	    _scrollOffset(): any;
	    _rootContent(): HTMLElement;
	    _parentHeight(): number;
	    _parentWidth(): number;
	    _parentWidthWithoutScroll(): number;
	    _parentHeightWithoutScroll(): number;
	    _getResizeHandler(): () => void;
	    _updateByOptions(): void;
	    getSizeParams(): {
	        virtualSize: {
	            width: number;
	            height: number;
	        };
	        scroll: {
	            top: any;
	            left: any;
	            size: number;
	            horizontal: boolean;
	            vertical: boolean;
	        };
	        itemMargin: {
	            width: any;
	            height: any;
	        };
	    };
	    getSelectedItems(): BaseWidgetItem[];
	    clearSelections(): void;
	    _createItems(): void;
	    _optionChanged(args: any): void;
	    _refresh(): void;
	    _invalidate(): void;
	    _calcTotalMarginsAndBorders(): {
	        width: number;
	        height: number;
	    };
	    _render(drawOptions?: any): void;
	    _verticalCentering(table: any): void;
	    redraw(): void;
	    _calcItemIndex(i: any, j: any, direction: any, rowCount: any, columnCount: any): any;
	    _calcVisibleRow(cardHeight: any): number;
	    _calcVisibleColumn(cardWidth: any): number;
	    _getPartArray(array: any, count: any, indexOfPart: any): any[];
	    _createTable(arrangementInfo: any, enableAnimation: any): HTMLElement;
	    _getItemProportions(): any;
	    _calcViewerParams(parentWidth: any, parentHeight: any, itemCount: any, method: any): any;
	    _createArrangementInfo(width: any, lineCount: any, itemMinWidth: any, proportions: any, direction: any): ArrangementInfo;
	    _calculateArrangementInfo(width: any, height: any, itemCount: any, method: any): any;
	    _drawItems(method?: any, itemCount?: any, enableAnimation?: any): HTMLElement;
	    getItemByIndex(index?: any): any;
	    _getScrollBarWidth(): number;
	    _processBatchItems(functionName?: any, startIndex?: any, enableAnimation?: any): void;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import cardItemStyleSettingsProvider = DevExpress.Dashboard.Internal.Viewer.cardItemStyleSettingsProvider;
    import IWidgetItemDataAccessor = DevExpress.Dashboard.Internal.Viewer.IWidgetItemDataAccessor;
    import cardArrangementInfo = DevExpress.Dashboard.Internal.Viewer.cardArrangementInfo;
    import cardIndicatorElement = DevExpress.Dashboard.Internal.Viewer.cardIndicatorElement;
    import cardLayout = DevExpress.Dashboard.Internal.Viewer.cardLayout;
    import cardRow = DevExpress.Dashboard.Internal.Viewer.cardRow;
    import cardRowElement = DevExpress.Dashboard.Internal.Viewer.cardRowElement;
    import cardRowElementBase = DevExpress.Dashboard.Internal.Viewer.cardRowElementBase;
    import cardSparklineElement = DevExpress.Dashboard.Internal.Viewer.cardSparklineElement;
	export class cardPainter {
	    private data;
	    private controlContainer;
	    _styleSettingsProvider: cardItemStyleSettingsProvider;
	    _cardStyle: any;
	    constructor(data: IWidgetItemDataAccessor, controlContainer: HTMLElement);
	    draw(cardArrangements: cardArrangementInfo, layout: cardLayout, _styleSettingsProvider: cardItemStyleSettingsProvider): JQuery;
	    createCardContent(cardArrangements: cardArrangementInfo, layout: cardLayout): JQuery;
	    createRows(rowModels: cardRow[], contentWidth: number): JQuery[];
	    createRow(elementModels: cardRowElementBase[], rowDiv: JQuery, contentWidth: number): void;
	    createElements(elements: cardRowElementBase[], contentWidth: number): JQuery[];
	    createIndicatorElement(indicatorElement: cardIndicatorElement): JQuery;
	    createSparklineElement(sparklineElement: cardSparklineElement, contentWidth: number): JQuery<HTMLElement>;
	    createDataElement(textElement: cardRowElement): JQuery<HTMLElement>;
	    setElementColor(element: cardRowElement, elementDiv: JQuery): void;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import cardItemStyleSettingsProvider = DevExpress.Dashboard.Internal.Viewer.cardItemStyleSettingsProvider;
    import widgetItemCore = DevExpress.Dashboard.Internal.Viewer.widgetItemCore;
    import cardArrangementInfo = DevExpress.Dashboard.Internal.Viewer.cardArrangementInfo;
	export let newCardMeasurements: {
	    margin: number;
	    padding: number;
	    borderWidth: number;
	};
	export class newCardItem {
	    private cardPainter;
	    private clickHandler;
	    private hoverHandler;
	    private properties;
	    private tag;
	    index: number;
	    itemDiv: JQuery;
	    constructor(properties: widgetItemCore, cardIndex: number, viewerOptions: {
	        clickHandler: any;
	        hoverHandler: any;
	        controlContainer: HTMLElement;
	    });
	    dispose(): void;
	    selected(): boolean;
	    setHoverEnabledState(hoverEnabled: boolean): void;
	    draw(container: JQuery, cardArrangements: cardArrangementInfo, styleSettingsProvider: cardItemStyleSettingsProvider): JQuery;
	    clearSelection(): void;
	    select(): void;
	    private hover;
	    private setClickHandler;
	    private setHoverHandler;
	    private afterDraw;
	    private applyExtraStyles;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
	export let margins: number, paddings: number, borders: number;
	export class cardArrangementInfo {
	    private etalonWidth;
	    private etalonHeight;
	    arrangementDirection: string;
	    columnCount: number;
	    rowCount: number;
	    cellHeight: number;
	    cellWidth: number;
	    viewerHeight: number;
	    viewerWidth: number;
	    itemsCount: number;
	    ignorePadding: boolean;
	    getMarginOffset(): number;
	    getScrollableHeight(): number;
	    getScrollableWidth(): number;
	    proportionFactor(): number;
	    getCardContentHeight(): number;
	    getCardContentWidth(): number;
	    getCardWidth(): number;
	    getCardHeight(): number;
	    hasVerticalScroll(): boolean;
	    hasHorizontalScroll(): boolean;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import cardLayout = DevExpress.Dashboard.Internal.Viewer.cardLayout;
	export interface ICardSizeProvider {
	    calcMinHeight(layout: cardLayout): any;
	}
	export class cardMeasurer implements ICardSizeProvider {
	    readonly DEFAULT_MIN_HEIGHT: number;
	    static readonly DIGITS_STRING: string;
	    static _getImageSpanHeight(width: string, height: string): number;
	    static _getTextSpanHeight(fontSize: string, fontFamily: string): number;
	    calcMinHeight(layout: cardLayout): number;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import cardArrangementInfo = DevExpress.Dashboard.Internal.Viewer.cardArrangementInfo;
    import cardLayout = DevExpress.Dashboard.Internal.Viewer.cardLayout;
    import ICardSizeProvider = DevExpress.Dashboard.Internal.Viewer.ICardSizeProvider;
	export abstract class ArrangementStrategy {
	    static createInstance(method: string, lineCount?: number): ArrangementStrategy;
	    cardMeasurer: ICardSizeProvider;
	    getArrangeMethod(): string;
	    getLineCount(): number;
	    constructor();
	    arrange(viewerHeight: number, viewerWidth: number, itemsCount: number, layouts: cardLayout[], ignorePadding?: boolean): cardArrangementInfo;
	    calcBestProportions(calcArrangementInfo: (nextColumnCount?: number) => cardArrangementInfo): cardArrangementInfo;
	    private getCardMinWidthWithMargin;
	    private getCardMinHeightWithMargin;
	    checkEmptyRows(columnCount: number, itemsCount: number): number;
	    abstract getColumnCount(itemsCount: any, actualViewerWidth: any, cardMinWidth: any): any;
	    abstract getRowCount(itemsCount: any, columnCount?: any): any;
	    getArrangementDirection(): string;
	}
	export class AutoArrangementStrategy extends ArrangementStrategy {
	    constructor();
	    getArrangeMethod(): string;
	    getLineCount(): number;
	    getColumnCount(itemsCount: any, actualViewerWidth: any, cardMinWidth: any): number;
	    checkEmptyRows(columnCount: number, itemsCount: number): number;
	    calcBestProportions(calcArrangementInfo: (nextColumnCount?: number) => cardArrangementInfo): cardArrangementInfo;
	    getRowCount(itemsCount: any, columnCount?: any): number;
	}
	export class ColumnArrangementStrategy extends ArrangementStrategy {
	    private columnCount;
	    constructor(columnCount: number);
	    getArrangeMethod(): string;
	    getLineCount(): number;
	    getColumnCount(itemsCount: any, actualViewerWidth: any, cardMinWidth: any): number;
	    getRowCount(itemsCount: any, columnCount?: any): number;
	}
	export class RowArrangementStrategy extends ArrangementStrategy {
	    private rowCount;
	    constructor(rowCount: number);
	    getArrangementMethod(): string;
	    getLineCount(): number;
	    getColumnCount(itemsCount: any, actualViewerWidth: any, cardMinWidth: any): number;
	    getRowCount(itemsCount: any, columnCount?: any): number;
	    getArrangementDirection(): string;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import cardArrangementInfo = DevExpress.Dashboard.Internal.Viewer.cardArrangementInfo;
	export class cardArrangementTableGenerator {
	    cells: JQuery[];
	    cardArrangements: cardArrangementInfo;
	    generateTable(container: JQuery, cardArrangements: cardArrangementInfo): void;
	    drawCellContent(startIndex: any, endIndex: any, drawHandler: (container: JQuery, cardArrangements: cardArrangementInfo, cardIndex: number) => JQuery): void;
	    private reset;
	    private generateCells;
	    private createRow;
	    private createCell;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import cardArrangementInfo = DevExpress.Dashboard.Internal.Viewer.cardArrangementInfo;
	export interface ICardScrollable {
	    option: (name: string, value: any) => void;
	    scrollOffset: () => {
	        top?: number;
	        left?: number;
	    };
	    scrollTo: (args: any) => void;
	}
	export class CardVirtualizationController {
	    private table;
	    private scrollView;
	    private scrollTimeout;
	    drawHandler: (startIndex: number, endIndex: number) => void;
	    cardArrangements: cardArrangementInfo;
	    constructor(table: JQuery, scrollView: ICardScrollable);
	    init(cardArrangements: cardArrangementInfo, drawHandler: (startIndex: number, endIndex: number) => void): void;
	    drawByScroll(offset: number): void;
	    onScroll(args: any): void;
	    getSizeParams(): {
	        virtualSize: {
	            width: number;
	            height: number;
	        };
	        scroll: {
	            top: number;
	            left: number;
	            size: number;
	            horizontal: boolean;
	            vertical: boolean;
	        };
	        itemMargin: {
	            width: number;
	            height: number;
	        };
	        layoutMeasurement: {
	            margin: number;
	            contentPadding: number;
	        };
	    };
	    updateScrollableContent(action: () => void): void;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DOMComponent =  DevExpress.DOMComponent ;
    import DOMComponentOptions = DevExpress.ui;
    import IWidgetsViewer = DevExpress.Dashboard.Internal.Viewer.IWidgetsViewer;
    import newCardItem = DevExpress.Dashboard.Internal.Viewer.newCardItem;
	export class cardsViewer extends DOMComponent implements IWidgetsViewer {
	    private content;
	    private _viewerID;
	    private arranger;
	    private tableStruct;
	    private virtualizer;
	    private tableGenerator;
	    private container;
	    itemsList: newCardItem[];
	    private readonly _styleSettingsProvider;
	    constructor(element: HTMLElement, options: DOMComponentOptions);
	    redraw(): void;
	    _optionChanged(args: any): void;
	    _refresh(): void;
	    getSelectedItems(): newCardItem[];
	    clearSelections(): void;
	    getSizeParams(): {
	        virtualSize: {
	            width: number;
	            height: number;
	        };
	        scroll: {
	            top: number;
	            left: number;
	            size: number;
	            horizontal: boolean;
	            vertical: boolean;
	        };
	        itemMargin: {
	            width: number;
	            height: number;
	        };
	        layoutMeasurement: {
	            margin: number;
	            contentPadding: number;
	        };
	    };
	    clear(): void;
	    private _init;
	    private initContainer;
	    private createItems;
	    protected _render(drawOptions?: any): void;
	    private invalidateContent;
	    private drawCards;
	    private drawCardsByIndices;
	    private createArranger;
	    private shouldRecreateArranger;
	}

}
declare module DevExpress.Dashboard {
	export interface CardWidget {
	    onCustomizeText: (args: {
	        getValue: () => any;
	        getDefaultText: () => string;
	    }) => string;
	    cardBackColor: string;
	    element: () => JQuery;
	}

}
declare module DevExpress.Dashboard {
	export type DashboardExportPaperKind = 'Letter' | 'Legal' | 'Executive' | 'A5' | 'A4' | 'A3';
	export type DashboardExportPageLayout = 'Portrait' | 'Landscape';
	export type DashboardMapSizeMode = 'None' | 'Zoom';
	export type DashboardRangeFilterExportSizeMode = 'None' | 'Stretch' | 'Zoom';
	export type DashboardChartExportSizeMode = 'None' | 'Stretch' | 'Zoom';
	export type DashboardExcelFormat = 'Csv' | 'Xls' | 'Xlsx';
	export type DashboardExportImageFormat = 'Png' | 'Jpeg' | 'Gif';
	export type DashboardTreemapExportSizeMode = 'None' | 'Zoom';
	export type DashboardExportDocumentScaleMode = 'None' | 'UseScaleFactor' | 'AutoFitToPagesWidth';
	export type DashboardStateExportPosition = 'Below' | 'SeparatePage';
	export type DashboardStateExcelExportPosition = 'Below' | 'SeparateSheet';
	export interface DashboardPdfExportOptions {
	    Title?: string;
	    AutoFitPageCount?: number;
	    CardAutoArrangeContent?: boolean;
	    ChartAutomaticPageLayout?: boolean;
	    ChartSizeMode?: DashboardChartExportSizeMode;
	    ExportFilters?: boolean;
	    ExportParameters?: boolean;
	    DashboardStatePosition?: DashboardStateExportPosition;
	    GaugeAutoArrangeContent?: boolean;
	    GridFitToPageWidth?: boolean;
	    GridPrintHeadersOnEveryPage?: boolean;
	    MapAutomaticPageLayout?: boolean;
	    MapSizeMode?: DashboardMapSizeMode;
	    PageLayout?: DashboardExportPageLayout;
	    PaperKind?: DashboardExportPaperKind | string;
	    PieAutoArrangeContent?: boolean;
	    PivotPrintHeadersOnEveryPage?: boolean;
	    RangeFilterAutomaticPageLayout?: boolean;
	    RangeFilterSizeMode?: DashboardRangeFilterExportSizeMode;
	    ScaleFactor?: number;
	    DocumentScaleMode?: DashboardExportDocumentScaleMode;
	    ShowTitle?: boolean;
	    TreemapAutomaticPageLayout?: boolean;
	    TreemapSizeMode?: DashboardTreemapExportSizeMode;
	    DashboardAutomaticPageLayout?: boolean;
	    IncludeHiddenParameters?: boolean;
	    FontInfo?: ExportFontInfo;
	}
	export interface DashboardImageExportOptions {
	    Title?: string;
	    Format?: DashboardExportImageFormat;
	    Resolution?: number;
	    ExportFilters?: boolean;
	    ExportParameters?: boolean;
	    ScaleFactor?: number;
	    ShowTitle?: boolean;
	    IncludeHiddenParameters?: boolean;
	    FontInfo?: ExportFontInfo;
	}
	export interface DashboardExcelExportOptions {
	    CsvValueSeparator?: string;
	    ExportFilters?: boolean;
	    ExportParameters?: boolean;
	    DashboardStatePosition?: DashboardStateExcelExportPosition;
	    Format?: DashboardExcelFormat;
	    IncludeHiddenParameters?: boolean;
	}
	export interface ExportFontInfo {
	    Name?: string;
	    GdiCharSet?: number;
	    UseCustomFontInfo?: boolean;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
	export interface TitleViewModel {
	    Text: string;
	    Visible: boolean;
	    ShowParametersButton: boolean;
	    IncludeMasterFilterValues: boolean;
	    LayoutModel: {
	        Alignment: string;
	        ImageViewModel: ImageViewModel;
	    };
	}
	export interface ImageViewModel {
	    SourceBase64String: string;
	    MimeType?: string;
	    Url: string;
	}

}
declare module DevExpress.Dashboard.Data {
	export type PrimitiveType = boolean | string | number | Date;

}
declare module DevExpress.Dashboard.Data {
    import PrimitiveType = DevExpress.Dashboard.Data.PrimitiveType;
	export type ItemDataAxisName = 'Default' | 'Series' | 'Argument' | 'Sparkline' | 'Column' | 'Row';
	export type AxisValuesDictionary = {
	    [axisName: string]: Array<PrimitiveType>;
	};
	export interface ItemData {
	    createTuple(values: Array<ItemDataAxisPoint> | Array<{
	        axisName: ItemDataAxisName;
	        value: Array<PrimitiveType>;
	    }>): ItemDataAxisPointTuple;
	    getAxis(axisName: ItemDataAxisName): ItemDataAxis;
	    getAxisNames(): Array<ItemDataAxisName>;
	    getDataMembers(): Array<string>;
	    getDeltas(): Array<ItemDataDelta>;
	    getDeltaValue(deltaId: string): ItemDataDeltaValue;
	    getDimensions(axisName: ItemDataAxisName): Array<ItemDataDimension>;
	    getMeasures(): Array<ItemDataMeasure>;
	    getMeasureValue(measureId: string): ItemDataMeasureValue;
	    getSlice(value: ItemDataAxisPointTuple | ItemDataAxisPoint): ItemData;
	}
	export interface ItemDataAxis {
	    getDimensions(): Array<ItemDataDimension>;
	    getPointByUniqueValues(values: Array<PrimitiveType>): ItemDataAxisPoint;
	    getPoints(): Array<ItemDataAxisPoint>;
	    getPointsByDimension(dimensionId: string): Array<ItemDataAxisPoint>;
	    getRootPoint(): ItemDataAxisPoint;
	}
	export interface ItemDataAxisPoint {
	    getAxisName(): string;
	    getChildren(): Array<ItemDataAxisPoint>;
	    getDimension(): ItemDataDimension;
	    getDimensions(): Array<ItemDataDimension>;
	    getDimensionValue(dimensionId?: string): ItemDataDimensionValue;
	    getDisplayText(): string;
	    getParent(): ItemDataAxisPoint;
	    getUniqueValue(): PrimitiveType;
	    getValue(): PrimitiveType;
	}
	export interface ItemDataAxisPointTuple {
	    getAxisPoint(axisName?: ItemDataAxisName): ItemDataAxisPoint;
	}
	export interface ItemDataDelta {
	    actualMeasureId: string;
	    id: string;
	    name: string;
	    targetMeasureId: string;
	}
	export interface ItemDataDeltaValue {
	    getAbsoluteVariation(): ItemDataMeasureValue;
	    getActualValue(): ItemDataMeasureValue;
	    getDisplaySubValue1(): ItemDataMeasureValue;
	    getDisplaySubValue2(): ItemDataMeasureValue;
	    getDisplayValue(): ItemDataMeasureValue;
	    getIndicatorType(): ItemDataMeasureValue;
	    getIsGood(): ItemDataMeasureValue;
	    getPercentOfTarget(): ItemDataMeasureValue;
	    getPercentVariation(): ItemDataMeasureValue;
	    getTargetValue(): ItemDataMeasureValue;
	}
	export interface ItemDataDimension {
	    dataMember: string;
	    dateTimeGroupInterval: string;
	    id: string;
	    name: string;
	    textGroupInterval: string;
	    format: (value: any) => string;
	}
	export interface ItemDataDimensionValue {
	    getDisplayText(): string;
	    getUniqueValue(): PrimitiveType;
	    getValue(): PrimitiveType;
	}
	export interface ItemDataMeasure {
	    dataMember: string;
	    id: string;
	    name: string;
	    summaryType: string;
	    format: (value: any) => string;
	}
	export interface ItemDataMeasureValue {
	    getDisplayText(): string;
	    getValue(): number;
	}
	export interface RequestUnderlyingDataParameters {
	    axisPoints?: Array<ItemDataAxisPoint>;
	    dataMembers?: Array<string>;
	    uniqueValuesByAxisName?: AxisValuesDictionary;
	    valuesByAxisName?: AxisValuesDictionary;
	}
	export interface ItemUnderlyingData {
	    getDataMembers(): Array<string>;
	    getDisplayNames(): Array<string>;
	    getRequestDataError(): string;
	    getRowCount(): number;
	    getRowValue(rowIndex: number, columnName: string): PrimitiveType;
	    isDataReceived(): boolean;
	}
	export interface RangeFilterSelection {
	    minimum: number | Date;
	    maximum: number | Date;
	}

}
declare module DevExpress.Dashboard.Model {

	export class Color {
	    static fromArgb(alpha: number, red: number, green: number, blue: number): Color;
	    static fromRgbaString(rgbaColor: string): Color;
	    static fromJSON(jsonValue: string): Color;
	    static fromAppearance(appearanceType: string): Color;
	    static fromDxColor(dxColor: any): Color;
	    static toNumber(alpha: number, red: number, green: number, blue: number): number;
	    static toJSON(color: Color): number;
	    static contrastColor(baseColor: Color): Color;
	    static _colorFromModel(value: string): ko.Observable<Color>;
	    static _colorToModel(value: Color): number;
	    toNumber(): number;
	    static toHex(colorValue: number): string;
	    readonly A: any;
	    readonly R: any;
	    readonly G: any;
	    readonly B: any;
	    readonly css: string;
	    private _dxColor;
	    constructor(colorValue: number);
	    blend(blendColor: any, opacity: any): Color;
	    toHex(): any;
	    private _toRgbaString;
	}

}
declare module DevExpress.Dashboard.Model {

	export interface IDisposable {
	    dispose(): void;
	}
	export type DisposableType = IDisposable | ko.Subscription | ko.ComputedFunctions;
	export class DisposableObject implements IDisposable {
	    protected _disposables: Array<DisposableType>;
	    protected disposed: boolean;
	    protected toDispose(...disposables: DisposableType[]): void;
	    dispose(): void;
	}

}
declare module DevExpress.Dashboard.Internal.Model {
	export class NameGenerator {
	    static validateName(object: any, nameCollection: Array<any>, propertyName: string, startIndex?: number, addWhiteSpace?: boolean): void;
	    static isValidName(name: string, nameCollection: Array<any>, propertyName: string): boolean;
	    static generateName(namePrefix: string, nameCollection: Array<any>, propertyName: string, startIndex?: number, addWhiteSpace?: boolean): string;
	}
	export function isComponentNameValid(name: string): boolean;
	export class Guard {
	    static isNotNull(object: any, name: string): void;
	}
	export class EnumManager {
	    static getNamesAndValues(enumType: any): {
	        name: any;
	        value: any;
	    }[];
	    static getNames(enumType: any): Array<any>;
	    static getValues(enumType: any): Array<any>;
	    private static _getObjectValues;
	}

}
declare module DevExpress.Dashboard.Internal.Model {

    import IDisposable = DevExpress.Dashboard.Model.IDisposable;
	export interface IDashboardComponent {
	    getUniqueNamePrefix: () => string;
	}
	export class DashboardUniqueNameGenerator implements IDisposable {
	    private _propertyName;
	    private _startIndex;
	    private _componentsCollections;
	    private _disposables;
	    constructor(_propertyName: string, _startIndex: number, ...collections: Array<ko.ObservableArray<IDashboardComponent>>);
	    private _ensureUniqueName;
	    dispose(): void;
	}

}
declare module DevExpress.Dashboard.Metadata {


    import dxForm =  DevExpress.ui.dxForm ;

    import DashboardLocalizationId = DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
	export type IDashboardSerializationInfoArray = Array<IDashboardSerializationInfo>;
	export let NotSupportedProperty: string;
	export type DevExtremeValidationRules = Array<DevExpress.ui.RequiredRule | DevExpress.ui.NumericRule | DevExpress.ui.RangeRule | DevExpress.ui.StringLengthRule | DevExpress.ui.CustomRule | DevExpress.ui.CompareRule | DevExpress.ui.PatternRule | DevExpress.ui.EmailRule | DevExpress.ui.AsyncRule>;
	export interface FormAdapterContext {
	    bindingContext: ko.BindingContext;
	    widgetContainer: HTMLElement;
	}
	export interface FormAdapterItemOptions {
	    editorOptions?: Object;
	    editorType?: 'dxAutocomplete' | 'dxCalendar' | 'dxCheckBox' | 'dxColorBox' | 'dxDateBox' | 'dxDropDownBox' | 'dxHtmlEditor' | 'dxLookup' | 'dxNumberBox' | 'dxRadioGroup' | 'dxRangeSlider' | 'dxSelectBox' | 'dxSlider' | 'dxSwitch' | 'dxTagBox' | 'dxTextArea' | 'dxTextBox';
	    customEditorType?: string;
	    template?: DevExpress.core.template | ((data: {
	        component?: dxForm;
	        dataField?: string;
	        editorOptions?: any;
	        editorType?: string;
	        name?: string;
	    }, itemElement: DevExpress.core.dxElement) => string | Element | JQuery);
	    label?: {
	        text?: string;
	        visible?: boolean;
	    };
	    validationRules?: DevExtremeValidationRules;
	}
	export type FormAdapterItem = FormAdapterItemOptions | ((context: FormAdapterContext) => FormAdapterItemOptions);
	export interface PropertyEditorInfo {
	    propertyName: string;
	    displayName?: DashboardLocalizationId;
	    values?: {
	        [key: string]: DashboardLocalizationId;
	    };
	    simpleFormAdapterItem?: SimpleFormAdapterItems;
	    formAdapterItem?: FormAdapterItem;
	    dxFormItem?: DevExpress.ui.dxFormSimpleItem;
	    validateBeforeSet?: boolean;
	    validationRules?: Array<any>;
	    valuesArray?: Array<{
	        value: any;
	        displayValue: DashboardLocalizationId | string;
	    }>;
	    editorOptions?: Object;
	}
	export interface PropertySerializationInfo {
	    propertyName: string;
	    modelName?: string;
	    defaultVal?: any;
	    type?: DevExpress.Analytics.Utils.ISerializableModelConstructor;
	    info?: DevExpress.Analytics.Utils.ISerializationInfoArray;
	    from?: (val: any, serializer?: DevExpress.Analytics.Utils.IModelSerializer) => any;
	    toJsonObject?: any;
	    array?: boolean;
	    alwaysSerialize?: boolean;
	    category?: PropertyCategory;
	}
	export interface IDashboardSerializationInfo extends PropertySerializationInfo, PropertyEditorInfo {
	}
	export interface ITypedDashboardSerializationInfo<T> extends IDashboardSerializationInfo {
	    propertyName: Extract<keyof T, string>;
	}
	export enum PropertyCategory {
	    ClientState = 0,
	    Data = 1,
	    Interactivity = 2,
	    ViewModel = 3,
	    Map = 4,
	    Initialize = 5,
	    Coloring = 6,
	    NoUpdate = 7,
	    NoUpdateByObservableValue = 8
	}
	export type SimpleFormAdapterItems = 'textBoxEditor' | 'numberBoxEditor' | 'dateBoxEditor' | 'checkBoxEditor' | 'selectBoxEditor' | 'guidEditor' | 'listEditor' | 'buttonGroupEditor' | 'onOffButtonGroupEditor' | 'yesNoButtonGroupEditor' | 'discreteContinuousButtonGroupEditor';
	export function parseBool(value: any): ko.Observable<any>;
	export function floatFromModel(value: string): ko.Observable<number>;
	export function fromStringToDate(val: string): ko.Observable<Date>;
	export function fromDateToString(date: Date): string;
	export function nullableFloatToModel(value: any): {};
	export let integerValidationRule: {
	    type: string;
	    validationCallback: (e: any) => boolean;
	};
	export let itemType: IDashboardSerializationInfo;
	export let componentName: IDashboardSerializationInfo;
	export let url: IDashboardSerializationInfo;
	export let name: IDashboardSerializationInfo;
	export let name_ViewModel: IDashboardSerializationInfo;
	export let nameTag: IDashboardSerializationInfo;
	export let dataMember: IDashboardSerializationInfo;
	export let filter: IDashboardSerializationInfo;
	export let contentArrangementMode: IDashboardSerializationInfo;
	export let contentLineCount: IDashboardSerializationInfo;
	export let BindingSectionTitles: {
	    Arguments: string;
	    SingleArgument: string;
	    SeriesDimension: string;
	};
	export let columnsPropertyName: string;
	export let rowsPropertyName: string;
	export let argumentsPropertyName: string;
	export let valuesPropertyName: string;
	export let argumentPropertyName: string;
	export let valuePropertyName: string;
	export let actualValuePropertyName: string;
	export let targetValuePropertyName: string;
	export let sparklineArgumentPropertyName: string;
	export let weightPropertyName: string;
	export let colorPropertyName: string;

}
declare module DevExpress.Dashboard.Internal.Model {
    import CustomPropertyValueType = DevExpress.Dashboard.Model.CustomPropertyValueType;
	export function validateCustomPropertyName(name: string): void;
	export function validateCustomPropertyValueType(propertyName: string, value: CustomPropertyValueType): void;

}
declare module DevExpress.Dashboard.Model {

    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
	export type CustomPropertyValueType = boolean | string | number;
	export class CustomProperties extends SerializableModel {
	    _model: Object;
	    getInfo: () => DevExpress.Analytics.Utils.ISerializationInfoArray;
	    constructor(json: any, serializer?: DevExpress.Analytics.Utils.IModelSerializer, info?: IDashboardSerializationInfoArray);
	    _isKnownProperty(propertyName: string): boolean;
	    getValue(propertyName: string): CustomPropertyValueType;
	    setValue(propertyName: string, propertyValue: CustomPropertyValueType): void;
	}

}
declare module DevExpress.Dashboard.Model {
    import CustomPropertyValueType = DevExpress.Dashboard.Model.CustomPropertyValueType;
	export interface CustomPropertyMetadata {
	    ownerType: any;
	    customItemType?: string;
	    propertyName: string;
	    defaultValue?: CustomPropertyValueType;
	    valueType?: 'string' | 'number' | 'boolean';
	}
	export function registerCustomProperty(meta: CustomPropertyMetadata): void;
	export function _clearCustomPropertiesMeta(): void;
	export let _customPropertiesMeta: Array<CustomPropertyMetadata>;
	export function _customMetadataContainsProperty(propertyName: any): boolean;

}
declare module DevExpress.Dashboard.Internal.Model {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import CustomProperties = DevExpress.Dashboard.Model.CustomProperties;
    import CustomPropertyMetadata = DevExpress.Dashboard.Model.CustomPropertyMetadata;
	export function _getCustomPropertiesSerializationInfoCore(customPropertiesMeta: Array<CustomPropertyMetadata>): IDashboardSerializationInfo;
	export function getCustomPropertiesSerializationInfo(owner: any): IDashboardSerializationInfo;
	export interface ICustomPropertiesProvider {
	    customProperties: CustomProperties;
	}

}
declare module DevExpress.Dashboard.Model {
    import PrimitiveType = DevExpress.Dashboard.Data.PrimitiveType;
	export class DashboardState {
	    Parameters: {
	        [id: string]: any;
	    };
	    Items: {
	        [id: string]: ItemState;
	    };
	}
	export class RangeFilterSelection {
	    Minimum: any;
	    Maximum: any;
	}
	export class RangeFilterState {
	    Selection?: RangeFilterSelection;
	    PeriodName?: string;
	}
	export class ItemState {
	    RangeFilterState?: RangeFilterState;
	    MasterFilterValues?: Array<Array<PrimitiveType>>;
	    DrillDownValues?: Array<PrimitiveType>;
	    SelectedLayerIndex?: number;
	    TabPageName?: string;
	}

}
declare module DevExpress.Dashboard.Internal.Model {
	export interface IFormattableValue {
	    Type: string;
	    Value?: any;
	    RangeLeft?: any;
	    RangeRight?: any;
	    Format: any;
	}
	export class DimensionFilterValues {
	    Name: string;
	    Truncated: boolean;
	    Values: Array<IFormattableValue>;
	    constructor(name?: string);
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let calcFieldDataMember: IDashboardSerializationInfo;
	export let calcFieldExpression: IDashboardSerializationInfo;
	export let calcFieldExpressionEditable: IDashboardSerializationInfo;
	export let calculatedFieldType: IDashboardSerializationInfo;
	export let calculatedFieldSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
	export class CalculatedField extends SerializableModel {
	    dataMember: ko.Observable<string>;
	    fieldType: ko.Observable<string>;
	    name: ko.Observable<string>;
	    expression: ko.Observable<string>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}

}
declare module DevExpress.Dashboard.Model {


    import IDashboardComponent = DevExpress.Dashboard.Internal.Model.IDashboardComponent;
    import TypedSerializableModel = DevExpress.Dashboard.Model.TypedSerializableModel;
    import CalculatedField = DevExpress.Dashboard.Model.CalculatedField;
	export interface IDataSourceConsumer {
	    dataSource: ko.Observable<string>;
	    dataMember: ko.Observable<string>;
	}
	export abstract class DataSource extends TypedSerializableModel implements IDashboardComponent {
	    hasCalculatedFields: boolean;
	    supportDataMembers: boolean;
	    name: ko.Observable<string>;
	    componentName: ko.Observable<string>;
	    calculatedFields: ko.ObservableArray<CalculatedField>;
	    hasFilter: boolean;
	    filter: ko.Observable<string>;
	    constructor(dataSourceJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    abstract getDisplayNamePrefix(): string;
	    abstract getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    getJson(): any;
	    getUniqueNamePrefix(): string;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
    import PrimitiveType = DevExpress.Dashboard.Data.PrimitiveType;
    import ItemDataAxisName = DevExpress.Dashboard.Data.ItemDataAxisName;
    import ItemDataAxisPoint = DevExpress.Dashboard.Data.ItemDataAxisPoint;
    import ItemDataDimension = DevExpress.Dashboard.Data.ItemDataDimension;
    import ItemDataDimensionValue = DevExpress.Dashboard.Data.ItemDataDimensionValue;
	export let dataStorageSpecialIds: {
	    DisplayText: string;
	    Value: string;
	};
	export class itemDataAxisPoint implements ItemDataAxisPoint {
	    _info: any;
	    _dataRowKey: any;
	    _children: any;
	    _parent: any;
	    constructor(levelInfo: any, dataRowKey: any);
	    _getSpecialValue(specialId: any): any;
	    getUniqueValue(): PrimitiveType;
	    getValue(): PrimitiveType;
	    _getLevel(): any;
	    _getServerText(): any;
	    getKey(): any;
	    getAxisName(): ItemDataAxisName;
	    getChildren(): Array<itemDataAxisPoint>;
	    getParent(): itemDataAxisPoint;
	    getAvaliableLeafPoints(): Array<itemDataAxisPoint>;
	    _setParent(parent: any): void;
	    _setChildren(children: any): void;
	    getParentByDimensionId(dimensionId: string): itemDataAxisPoint;
	    getDimensionValue(dimensionId: string): ItemDataDimensionValue;
	    getDisplayText(): string;
	    getDimension(): ItemDataDimension;
	    getDimensions(): Array<ItemDataDimension>;
	    getAxisPath(): Array<itemDataAxisPoint>;
	    getUniquePath(): Array<PrimitiveType>;
	    getValuePath(includeProc: any): Array<PrimitiveType>;
	    getDisplayPath(includeProc: any): Array<string>;
	    getValues(): void;
	    _selectIncludedPath(includeProc: any, pointProc: any): any;
	    _selectPath(predicate: any): any;
	    getPointsByDimensionId(dimensionId: string): Array<itemDataAxisPoint>;
	    getDisplayTextsByDimensionId(dimensionId: any): Array<string>;
	    _getPointsByDimensionId(dimensionId: any, pointProc: any): any[];
	    _findPoints(dimensionId: any, result: any, pointProc: any): void;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
	export let pivotAreaNames: {
	    columns: string;
	    rows: string;
	};
	export let itemDataAxisBuilder: {
	    build: (name: any, storage: any, dimensions: any, sortOrderSlices?: any, metaData?: any, iterators?: any) => any;
	    _getKeyIdsList: (keyIds: any) => any[][];
	    _isSortOrderSlice: (slice: any, sortOrderSlices: any) => boolean;
	};

}
declare module DevExpress.Dashboard.Internal.Data {
	export let itemDataAxisHelper: {
	    eachPoint: (point: any, _process: any) => boolean;
	    findFirstPoint: (root: any, predicate: any) => any;
	    findFirstPointByUniqueValues: (root: any, values: any) => any;
	    findFirstPointByValues: (root: any, values: any) => any;
	    findFirstPointByUniqueValueAndDimension: (root: any, value: any, dimensionId: any) => any;
	    _areEqual: (value1: any, value2: any) => boolean;
	    _equalPredicate: (points: any, values: any, equal: any) => boolean;
	    forSamePoints: (baseItem: any, item: any, process: any) => void;
	    findChildByUniqueValue: (point: any, value: any) => any;
	    getValuesByTuples: (tuples: any, dimensionIds: any) => any[];
	};

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import ItemDataAxisName = DevExpress.Dashboard.Data.ItemDataAxisName;
	export let itemDataAxisNames: {
	    defaultAxis: ItemDataAxisName;
	    chartSeriesAxis: ItemDataAxisName;
	    chartArgumentAxis: ItemDataAxisName;
	    sparklineAxis: ItemDataAxisName;
	    pivotColumnAxis: ItemDataAxisName;
	    pivotRowAxis: ItemDataAxisName;
	};

}
declare module DevExpress.Dashboard.Internal.Data {
	export class dataSlice {
	    _sliceKey: any;
	    _sliceDTO: any;
	    _decode: any;
	    _encode: any;
	    _keyIndexById: any;
	    _valueIdByKey: any;
	    constructor(sliceKey: any, sliceDTO: any, decode: any, encode: any);
	    getRowCount(): number;
	    getKey(): any;
	    getValue(rowKey: any, valueId: any): any;
	    getRowValues(rowKey: any): {};
	    getRowKeyValues(rowKey: any): {};
	    _getRowDTO(rowKey: any): any;
	    getKeyValue(rowKey: any, keyId: any): any;
	    getKeyIds(): any;
	    getValueIds(): string[];
	    forEach(action: any): void;
	    append(slice: any): {
	        forEach: (action: any) => void;
	    };
	    addRow(keyValues: any, values: any): any[];
	    _parseKey(key: any): any;
	    _stringifyKey(key: any): string;
	}
	export class sliceRepository {
	    _sliceListDTO: any;
	    _sliceList: any;
	    _rowKeyConvertMap: any;
	    _sliceJoinCache: any;
	    _decode: any;
	    _encode: any;
	    constructor(sliceListDTO: any, decode: any, encode: any);
	    _initialize(decode: any): void;
	    getAll(): any;
	    getKey(keyIds: any): any;
	    get(vsKey: any): any;
	    getOrCreate(keyIds: any): any;
	    findDataRowKey(sliceKey: any, dataRowKey: any): {
	        sliceKey: any;
	        rowKey: any[];
	    };
	    getCrossValue(dataRows: any, valueId: any): any;
	    getKeyValue(dataRow: any, keyId: any): any;
	    getValue(dataRow: any, valueId: any): any;
	    isEmpty(): boolean;
	    _joinSliceKey(key1: any, key2: any): any;
	    _getByKeyIds(keyIds: any): any;
	    _getConvertMap(sliceFromKey: any, sliceToKey: any): any;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
    import sliceRepository = DevExpress.Dashboard.Internal.Data.sliceRepository;
	export class dataStorage {
	    _sliceRep: any;
	    constructor(dto: any);
	    _createSliceRep(dto: any): sliceRepository;
	    _initialize(): void;
	    getSlices(): any;
	    getSlice(sliceKey: any): any;
	    getSliceKey(keyIds: any): any;
	    getSliceByIds(keyIds: any): any;
	    getOrCreateSlice(keyIds: any): any;
	    findDataRowKey(sliceKey: any, dataRowKey: any): any;
	    getCrossValue(dataRowKeys: any, valueId: any): any;
	    getKeyValue(dataRow: any, keyId: any): any;
	    getValue(dataRow: any, valueId: any): any;
	    isEmpty(): any;
	    insert(ds: any, sortOrderSlices?: any): {};
	}

}
declare module DevExpress.Dashboard.Internal.Data {
    import DateTimeFormatInfo = DevExpress.Dashboard.Internal.Data.DateTimeFormatInfo;
    import NumericFormatInfo = DevExpress.Dashboard.Internal.Data.NumericFormatInfo;
    import ItemDataDelta = DevExpress.Dashboard.Data.ItemDataDelta;
    import ItemDataDimension = DevExpress.Dashboard.Data.ItemDataDimension;
	export let deltaValueNames: {
	    actualValue: string;
	    targetValue: string;
	    absoluteVariation: string;
	    percentVariation: string;
	    percentOfTarget: string;
	    mainValue: string;
	    subValue1: string;
	    subValue2: string;
	    isGood: string;
	    indicatorType: string;
	};
	export let deltaValueTypes: {
	    actualValue: string;
	    absoluteVariation: string;
	    percentVariation: string;
	    percentOfTarget: string;
	    targetValue: string;
	};
	export class itemMetaData {
	    _metaDataDto: any;
	    _data: any;
	    constructor(metaDataDto: any);
	    initialize(): void;
	    _createMeasureInfo(descriptors: any): {
	        measures: any[];
	        formatByMeasureId: {};
	        expressionByMeasureId: {};
	        calculationByMeasureId: {};
	        windowDefinitionByMeasureId: {};
	    };
	    _createDeltaInfo(): {
	        deltas: any[];
	        valueIdsByDeltaId: {};
	        formatsByDeltaId: {};
	    };
	    _createAxesInfo(): {
	        axes: {
	            [name: string]: itemDataDimension[];
	        };
	        levelByDimensionId: {
	            [dimensionId: string]: number;
	        };
	        formatByDimensionId: {};
	        pivotAreaByAxisName: {};
	    };
	    getAxes(): any;
	    getAxisNames(): any[];
	    getPivotAreaByAxisName(name: any): any;
	    getColorMeasures(): any;
	    getConditionalFormattingMeasures(): any;
	    getDimensions(axisName: any): itemDataDimension[];
	    getMeasures(): any;
	    getDeltas(): any;
	    getMeasureById(id: any): any;
	    getDeltaById(id: any): ItemDataDelta;
	    getMeasureFormat(measureId: any): any;
	    getMeasureExpression(measureId: any): any;
	    getMeasureCalculation(measureId: any): any;
	    getMeasureWindowDefinition(measureId: any): any;
	    getDeltaValueIds(deltaId: any): any;
	    getDeltaFormats(deltaId: any): any;
	    getDeltaValueType(deltaId: any): void;
	    getDimensionLevel(dimensionId: any): any;
	    getDimensionFormat(dimensionId: any): any;
	    getDataMembers(): any;
	    getFinalDataType(dataItemId: any): any;
	}
	export interface DimensionDescriptorViewModel {
	    ID: string;
	    Name: string;
	    DataMember: string;
	    DateTimeGroupInterval: string;
	    TextGroupInterval: string;
	    Format: any;
	    FinalDataType: any;
	    Level: number;
	}
	export interface itemDataDimension extends ItemDataDimension {
	    finalDataType: any;
	    getFormat: {
	        (): NumericFormatInfo | DateTimeFormatInfo;
	    };
	}

}
declare module DevExpress.Dashboard.Internal.Data {
    import PrimitiveType = DevExpress.Dashboard.Data.PrimitiveType;
    import itemDataDimension = DevExpress.Dashboard.Internal.Data.itemDataDimension;
    import ItemDataAxis = DevExpress.Dashboard.Data.ItemDataAxis;
    import itemDataAxisPoint = DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
	export class itemDataAxis implements ItemDataAxis {
	    _dimensions: itemDataDimension[];
	    _axisPoint: any;
	    constructor(dimensions: itemDataDimension[], axisPoint: any);
	    getDimensions(): Array<itemDataDimension>;
	    getRootPoint(): itemDataAxisPoint;
	    getPoints(ignoreRootPoint?: boolean): Array<itemDataAxisPoint>;
	    getAvaliableLeafPoints(): Array<itemDataAxisPoint>;
	    getPointsByDimension(dimensionId: string): Array<itemDataAxisPoint>;
	    getPointByUniqueValues(values: Array<PrimitiveType>): itemDataAxisPoint;
	    getPointByUniqueValueAndDimension(value: any, dimensionId: string): itemDataAxisPoint;
	    getPointByValues(values: Array<PrimitiveType>): itemDataAxisPoint;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
    import ItemDataAxisName = DevExpress.Dashboard.Data.ItemDataAxisName;
    import ItemDataAxisPointTuple = DevExpress.Dashboard.Data.ItemDataAxisPointTuple;
    import itemDataAxisPoint = DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
	export class itemDataTuple implements ItemDataAxisPointTuple {
	    private _axisPoints;
	    constructor(axisPoints: Array<itemDataAxisPoint>);
	    getAxisPoint(axisName?: ItemDataAxisName): itemDataAxisPoint;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
    import PrimitiveType = DevExpress.Dashboard.Data.PrimitiveType;
    import itemDataDimension = DevExpress.Dashboard.Internal.Data.itemDataDimension;
    import ItemData = DevExpress.Dashboard.Data.ItemData;
    import ItemDataAxisName = DevExpress.Dashboard.Data.ItemDataAxisName;
    import ItemDataDelta = DevExpress.Dashboard.Data.ItemDataDelta;
    import ItemDataDeltaValue = DevExpress.Dashboard.Data.ItemDataDeltaValue;
    import ItemDataMeasure = DevExpress.Dashboard.Data.ItemDataMeasure;
    import ItemDataMeasureValue = DevExpress.Dashboard.Data.ItemDataMeasureValue;
    import itemDataAxis = DevExpress.Dashboard.Internal.Data.itemDataAxis;
    import itemDataAxisPoint = DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
    import itemDataTuple = DevExpress.Dashboard.Internal.Data.itemDataTuple;
	export class itemData implements ItemData {
	    _data: any;
	    _rootItems: any;
	    constructor(data: any, rootItems: any);
	    isEmpty(): boolean;
	    getCurrentFilterValues(dimensionIds: Array<string>, axisName: ItemDataAxisName, selectedValues: Array<itemDataAxisPoint> | Array<Array<PrimitiveType>>): Array<itemDataTuple>;
	    getCurrentDrillDownValues(dimensionIds: Array<string>, axisName: ItemDataAxisName): itemDataTuple;
	    getAvailableTuples(dimensionIds: Array<string>, axisName: ItemDataAxisName): Array<itemDataTuple>;
	    getAllSelectionValues(dimensionIds: Array<string>): any;
	    getMeasuresByIds(measureIds: Array<string>): Array<ItemDataMeasure>;
	    getAxisNames(): Array<ItemDataAxisName>;
	    getAxis(axisName: ItemDataAxisName): itemDataAxis;
	    getDimensions(axisName: ItemDataAxisName): Array<itemDataDimension>;
	    getColorMeasures(): Array<ItemDataMeasure>;
	    getMeasures(): Array<ItemDataMeasure>;
	    getDeltas(): Array<ItemDataDelta>;
	    getMeasureById(id: string): ItemDataMeasure;
	    getDeltaById(id: string): ItemDataDelta;
	    getSlice(value: itemDataTuple | itemDataAxisPoint): itemData;
	    getMeasureFormat(measureId: string): any;
	    getMeasureExpression(measureId: string): any;
	    getMeasureCalculation(measureId: string): any;
	    getMeasureWindowDefinition(measureId: string): any;
	    getDimensionFormat(dimensionId: string): any;
	    getColorMeasureValue(colorMeasureId: string): any;
	    getConditionalFormattingMeasureValue(cfMeasureId: string): any;
	    getMeasureValue(measureId: string): ItemDataMeasureValue;
	    getPointsByDimensionId(dimensionId: string): Array<itemDataAxisPoint>;
	    _getKeys(points?: any): any[];
	    _getValue(measureId: any): any;
	    _getMeasureValueByKeys(keys: any, mId: any, format: any): {
	        getValue: () => any;
	        getDisplayText: () => any;
	    };
	    _getDeltaValueByKeys(keys: any, deltaIds: any, formats: any): {
	        getActualValue: () => {
	            getValue: () => any;
	            getDisplayText: () => any;
	        };
	        getTargetValue: () => {
	            getValue: () => any;
	            getDisplayText: () => any;
	        };
	        getAbsoluteVariation: () => {
	            getValue: () => any;
	            getDisplayText: () => any;
	        };
	        getPercentVariation: () => {
	            getValue: () => any;
	            getDisplayText: () => any;
	        };
	        getPercentOfTarget: () => {
	            getValue: () => any;
	            getDisplayText: () => any;
	        };
	        getIsGood: () => {
	            getValue: () => any;
	            getDisplayText: () => any;
	        };
	        getIndicatorType: () => {
	            getValue: () => any;
	            getDisplayText: () => any;
	        };
	        getDisplayValue: () => {
	            getValue: () => any;
	            getDisplayText: () => any;
	        };
	        getDisplaySubValue1: () => {
	            getValue: () => any;
	            getDisplayText: () => any;
	        };
	        getDisplaySubValue2: () => {
	            getValue: () => any;
	            getDisplayText: () => any;
	        };
	    };
	    _createPointsHash(axisPoints: any): {};
	    getMeasureValueByAxisPoints(measureId: string, axisPoints: Array<itemDataAxisPoint>): ItemDataMeasureValue;
	    getDeltaValue(deltaId: string): ItemDataDeltaValue;
	    getDeltaValueByAxisPoints(deltaId: string, axisPoints: Array<itemDataAxisPoint>): ItemDataDeltaValue;
	    getDataMembers(): Array<string>;
	    createTuple(values: Array<itemDataAxisPoint> | Array<{
	        axisName: ItemDataAxisName;
	        value: Array<PrimitiveType>;
	    }>): itemDataTuple;
	    _getCellValue(keys: any, valueId: any): any;
	    _getCellDisplayText(keys: any, valueId: any, format: any): any;
	    _getSliceByAxisPoint(axisPoint: any): itemData;
	    _getSliceByTuple(tuple: any): itemData;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
    import itemMetaData = DevExpress.Dashboard.Internal.Data.itemMetaData;
	export class itemDataManager {
	    _dataStorage: any;
	    _metaData: any;
	    _itemData: any;
	    _items: any;
	    initialize(itemDataDTO: any): void;
	    updateExpandedData(expandedItemDataDTO: any, expandInfo: any): void;
	    getDataStorage(): any;
	    getItemData(): any;
	    getMetaData(): any;
	    _createMetaData(metaDataDTO: any): itemMetaData;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let measureCalculationSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {

    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
	export abstract class MeasureCalculation extends SerializableModel {
	    protected static _getWindowAggrFunction(summaryType: string): string;
	    abstract readonly name: string;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    _getAggrName(summaryType: string): string;
	    abstract _createInstance(): any;
	    abstract _getExpression(argument: string): string;
	}
	export let calculationsTypesMap: {
	    [index: string]: typeof MeasureCalculation;
	};

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let calculationSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    import MeasureCalculation = DevExpress.Dashboard.Model.MeasureCalculation;
	export let _currentCalculationInfo: (model: {
	    calculationType: ko.Observable<string>;
	}) => IDashboardSerializationInfo[];
	export class Calculation extends SerializableModel {
	    calculationType: ko.Observable<string>;
	    calculation: ko.Observable<MeasureCalculation>;
	    constructor(modelJson?: {}, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    isEmpty(): boolean;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let measureCalculationWindowDefinitionSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {

    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
	export abstract class MeasureCalculationWindowDefinition extends SerializableModel {
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    abstract equals(def: any): boolean;
	}
	export let windowDefinitionsTypesMap: {
	    [index: string]: typeof MeasureCalculationWindowDefinition;
	};

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let windowDefinitionSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
	export class WindowDefinition extends SerializableModel {
	    windowDefinitionType: ko.Observable<string>;
	    windowDefinition: ko.Observable<MeasureCalculationWindowDefinition>;
	    constructor(modelJson?: {}, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    equals(def: any): any;
	    isEmpty(): boolean;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import DashboardLocalizationId = DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    import DataItemNumericFormatType = DevExpress.Dashboard.Model.DataItemNumericFormatType;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let formatTypeValues: {
	    [key in DataItemNumericFormatType]: DashboardLocalizationId;
	};
	export let customFormatString: IDashboardSerializationInfo;
	export let formatType: IDashboardSerializationInfo;
	export let unit: IDashboardSerializationInfo;
	export let precision: IDashboardSerializationInfo;
	export let includeGroupSeparator: IDashboardSerializationInfo;
	export let dataItemCurrencyCultureName: IDashboardSerializationInfo;
	export let dataItemNumericFormatSerializationsInfo: IDashboardSerializationInfoArray;
	export let absoluteVariationNumericFormatSerializationsInfo: IDashboardSerializationInfoArray;
	export let percentVariationNumericFormatSerializationsInfo: IDashboardSerializationInfoArray;
	export let percentOfTargetNumericFormatSerializationsInfo: IDashboardSerializationInfoArray;
	export let yearFormat: IDashboardSerializationInfo;
	export let namelessYearFormat: IDashboardSerializationInfo;
	export let quarterFormat: IDashboardSerializationInfo;
	export let namelessQuarterFormat: IDashboardSerializationInfo;
	export let monthFormat: IDashboardSerializationInfo;
	export let namelessMonthFormat: IDashboardSerializationInfo;
	export let dayOfWeekFormat: IDashboardSerializationInfo;
	export let namelessDayOfWeekFormat: IDashboardSerializationInfo;
	export let dateFormat: IDashboardSerializationInfo;
	export let namelessDateFormat: IDashboardSerializationInfo;
	export let dateHourFormat: IDashboardSerializationInfo;
	export let namelessDateHourFormat: IDashboardSerializationInfo;
	export let dateHourMinuteFormat: IDashboardSerializationInfo;
	export let namelessDateHourMinuteFormat: IDashboardSerializationInfo;
	export let dateTimeWithSecondsFormat: IDashboardSerializationInfo;
	export let namelessDateTimeWithSecondsFormat: IDashboardSerializationInfo;
	export let hourFormat: IDashboardSerializationInfo;
	export let namelessHourFormat: IDashboardSerializationInfo;
	export let exactDateFormat: IDashboardSerializationInfo;
	export let namelessExactDateFormat: IDashboardSerializationInfo;
	export let dataItemDateTimeFormatSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import DataItemNumericFormatType = DevExpress.Dashboard.Model.DataItemNumericFormatType;
    import DataItemNumericUnit = DevExpress.Dashboard.Model.DataItemNumericUnit;
    import DateFormat = DevExpress.Dashboard.Model.DateFormat;
    import DateTimeFormat = DevExpress.Dashboard.Model.DateTimeFormat;
    import DayOfWeekFormat = DevExpress.Dashboard.Model.DayOfWeekFormat;
    import ExactDateFormat = DevExpress.Dashboard.Model.ExactDateFormat;
    import HourFormat = DevExpress.Dashboard.Model.HourFormat;
    import MonthFormat = DevExpress.Dashboard.Model.MonthFormat;
    import QuarterFormat = DevExpress.Dashboard.Model.QuarterFormat;
    import YearFormat = DevExpress.Dashboard.Model.YearFormat;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
	export class DataItemNumericFormat extends SerializableModel {
	    currencyCultureName: ko.Observable<string>;
	    formatType: ko.Observable<DataItemNumericFormatType>;
	    precision: ko.Observable<number>;
	    unit: ko.Observable<DataItemNumericUnit>;
	    includeGroupSeparator: ko.Observable<boolean>;
	    customFormatString: ko.Observable<string>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    _getViewModel(): {
	        NumericFormat: {
	            CurrencyCulture: string;
	            FormatType: DataItemNumericFormatType;
	            Precision: number;
	            Unit: DataItemNumericUnit;
	            IncludeGroupSeparator: boolean;
	        };
	    };
	}
	export class AbsoluteVariationNumericFormat extends DataItemNumericFormat {
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}
	export class PercentVariationNumericFormat extends DataItemNumericFormat {
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}
	export class PercentOfTargetNumericFormat extends DataItemNumericFormat {
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}
	export class DataItemDateTimeFormat extends SerializableModel {
	    yearFormat: ko.Observable<YearFormat>;
	    quarterFormat: ko.Observable<QuarterFormat>;
	    monthFormat: ko.Observable<MonthFormat>;
	    dayOfWeekFormat: ko.Observable<DayOfWeekFormat>;
	    dateFormat: ko.Observable<DateFormat>;
	    dateHourFormat: ko.Observable<DateTimeFormat>;
	    dateHourMinuteFormat: ko.Observable<DateTimeFormat>;
	    dateTimeFormat: ko.Observable<DateTimeFormat>;
	    hourFormat: ko.Observable<HourFormat>;
	    exactDateFormat: ko.Observable<ExactDateFormat>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    _getViewModel(groupInterval: any): {
	        DateTimeFormat: {
	            GroupInterval: any;
	            YearFormat: YearFormat;
	            QuarterFormat: QuarterFormat;
	            MonthFormat: MonthFormat;
	            DayOfWeekFormat: MonthFormat;
	            DateFormat: DateFormat;
	            DateHourFormat: DateTimeFormat;
	            DateHourMinuteFormat: DateTimeFormat;
	            DateTimeFormat: DateTimeFormat;
	            HourFormat: DateFormat;
	            ExactDateFormat: ExactDateFormat;
	        };
	    };
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let dataItem: IDashboardSerializationInfo;
	export let uniqueName: IDashboardSerializationInfo;
	export let dataItemDataMember: IDashboardSerializationInfo;
	export let numericFormat: IDashboardSerializationInfo;
	export let dateTimeFormat: IDashboardSerializationInfo;
	export let absoluteVariationNumericFormat: IDashboardSerializationInfo;
	export let percentVariationNumericFormat: IDashboardSerializationInfo;
	export let percentOfTargetNumericFormat: IDashboardSerializationInfo;
	export let showValues: IDashboardSerializationInfo;
	export let showTotals: IDashboardSerializationInfo;
	export let showGrandTotals: IDashboardSerializationInfo;
	export let dataItemLinkSerializationsInfo: IDashboardSerializationInfoArray;
	export let dataItemSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Metadata {
    import DashboardLocalizationId = DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let summaryTypeDict: {
	    [key in string]: DashboardLocalizationId;
	};
	export let summaryTypeTemplate: IDashboardSerializationInfo;
	export let summaryTypeNumericToAny: IDashboardSerializationInfo;
	export let summaryTypeAttribute: IDashboardSerializationInfo;
	export let summaryTypeNonNumericToNumeric: IDashboardSerializationInfo;
	export let summaryTypeNonNumericToString: IDashboardSerializationInfo;
	export let calculation: IDashboardSerializationInfo;
	export let windowDefinition: IDashboardSerializationInfo;
	export let expression: IDashboardSerializationInfo;
	export let calculations: IDashboardSerializationInfo;
	export let measureFilterString: IDashboardSerializationInfo;
	export let measureItemSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let colorSchemeDataSource: IDashboardSerializationInfo;
	export let colorSchemeDataMember: IDashboardSerializationInfo;
	export let colorSchemeColor: IDashboardSerializationInfo;
	export let paletteIndex: IDashboardSerializationInfo;
	export let colorSchemeSummaryType: IDashboardSerializationInfo;
	export let dimensionInfoDateTimeGroupInterval: IDashboardSerializationInfo;
	export let definitionInfo: IDashboardSerializationInfoArray;
	export let definitionsInMeasureDefinition: IDashboardSerializationInfo;
	export let measureKeySerializationInfo: IDashboardSerializationInfoArray;
	export let dimensionKeys: IDashboardSerializationInfo;
	export let measureKey: IDashboardSerializationInfo;
	export let colorSchemeEntrySerializationInfo: IDashboardSerializationInfoArray;
	export let colorShemetype: IDashboardSerializationInfo;
	export let dimensionValue: IDashboardSerializationInfo;
	export let valueInfo: IDashboardSerializationInfoArray;
	export let definition: IDashboardSerializationInfo;
	export let colorShemeValue: IDashboardSerializationInfo;
	export let dimensionKeySerializationInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
	export interface IDimensionDefinition {
	    dataMember: ko.Observable<string>;
	    dateTimeGroupInterval: ko.Observable<string>;
	}
	export interface IDimensionValue {
	    type: ko.Observable<string>;
	    value: ko.Observable<string>;
	}
	export class DimensionKey extends SerializableModel {
	    displayText: ko.Computed<string>;
	    definition: IDimensionDefinition;
	    value: IDimensionValue;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}

}
declare module DevExpress.Dashboard.Model {

    import IDimensionDefinition = DevExpress.Dashboard.Model.IDimensionDefinition;
	export class ColorSchemeDefinition {
	    dataSource: string;
	    dataMember: string;
	    dimensionDefinitions: IDimensionDefinition[];
	    colorByMeasures: boolean;
	    componentName: string;
	    private name;
	    key: ko.Computed<string>;
	    typeText: ko.Computed<string>;
	    dataSourceText: ko.Computed<string>;
	    dataItems: ko.Computed<string[]>;
	    constructor(dataSource: string, dataMember: string, dimensionDefinitions: IDimensionDefinition[], colorByMeasures?: boolean, componentName?: string, name?: string);
	    equals(definition: ColorSchemeDefinition): boolean;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let dataFieldDataMember: IDashboardSerializationInfo;
	export let dataFieldName: IDashboardSerializationInfo;
	export let nodeType: IDashboardSerializationInfo;
	export let groupIndex: IDashboardSerializationInfo;
	export let dataFieldChildNodes: IDashboardSerializationInfo;
	export let dataFieldDisplayName: IDashboardSerializationInfo;
	export let dataFieldFieldType: IDashboardSerializationInfo;
	export let dataFieldIsDataFieldNode: IDashboardSerializationInfo;
	export let dataFieldIsAggregate: IDashboardSerializationInfo;
	export let dataFieldIsDataMemberNode: IDashboardSerializationInfo;
	export let dataFieldIsConvertible: IDashboardSerializationInfo;
	export let dataFieldIsComparable: IDashboardSerializationInfo;
	export let dataFieldIsList: IDashboardSerializationInfo;
	export let dataFieldIsCorruptedCalField: IDashboardSerializationInfo;
	export let dataFieldSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Internal.Model {


    import DataFieldType = DevExpress.Dashboard.Model.DataFieldType;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
	export type DataNodeType = 'Unknown' | 'DataSource' | 'DataTable' | 'DataMember' | 'DataField' | 'CalculatedFields' | 'CalculatedDataField' | 'ExpressionFields' | 'OlapDataSource' | 'OlapMeasureFolder' | 'OlapMeasure' | 'OlapDimensionFolder' | 'OlapDimension' | 'OlapKpiFolder' | 'OlapKpi' | 'OlapFolder' | 'OlapHierarchy';
	export interface IDataField {
	    dataMember: ko.Observable<string>;
	    name: ko.Observable<string>;
	    displayName: ko.Observable<string>;
	    fieldType?: ko.Observable<DataFieldType>;
	    isConvertible?: ko.Observable<boolean>;
	    isDataFieldNode: ko.Observable<boolean>;
	    hasCalculatedFields?: boolean;
	    groupIndex?: ko.Observable<number>;
	    nodeType?: ko.Observable<DataNodeType>;
	    isAggregate?: ko.Observable<boolean>;
	    isList?: ko.Observable<boolean>;
	    isCorruptedCalcField?: ko.Observable<boolean>;
	}
	export let IsNumeric: (dataType: DataFieldType) => boolean;
	export let IsTextual: (dataType: DataFieldType) => boolean;
	export let IsDateTime: (dataType: DataFieldType) => boolean;
	export let IsOlapHierarchyField: (dataField: any) => boolean;
	export class DataField extends SerializableModel implements IDataField {
	    static isNumeric(dataField: IDataField): boolean;
	    static isDateTime(dataField: IDataField): boolean;
	    static olapMarker(): string;
	    static isOlap(dataMember: string): boolean;
	    static isMeasure(dataField: IDataField): boolean;
	    static isOrContainMeasures(dataMember: string): boolean;
	    static ifOlapThenOnlyMeasure(dataField: IDataField): boolean;
	    static ifOlapThenOnlyDimension(dataField: IDataField): boolean;
	    static isContinous(dataField: IDataField): boolean;
	    static isOlapHierarchy(dataField: IDataField): boolean;
	    defaultNumericFormat: any;
	    dataMember: ko.Observable<string>;
	    name: ko.Observable<string>;
	    childNodes: ko.ObservableArray<DataField>;
	    groupIndex: ko.Observable<number>;
	    groupDataItems: Array<any>;
	    displayName: ko.Observable<string>;
	    fieldType: ko.Observable<DataFieldType>;
	    nodeType: ko.Observable<DataNodeType>;
	    isDataFieldNode: ko.Observable<boolean>;
	    isDataMemberNode: ko.Observable<boolean>;
	    expanded: boolean;
	    isConvertible: ko.Observable<boolean>;
	    isComparable: ko.Observable<boolean>;
	    hasCalculatedFields: boolean;
	    isAggregate: ko.Observable<boolean>;
	    isList: ko.Observable<boolean>;
	    IsCorruptedCalcField: ko.Observable<boolean>;
	    constructor(dataFieldJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}

}
declare module DevExpress.Dashboard.Model {
	export type DataItemType = 'Measure' | 'Dimension';
	export interface IBindingProperty {
	    propertyName: string;
	    dataItemType: DataItemType;
	    emptyPlaceholder: string;
	    selectedPlaceholder?: string;
	}

}
declare module DevExpress.Dashboard.Internal.Model {

    import AcceptableShapingType = DevExpress.Dashboard.Model.AcceptableShapingType;
    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import IDataField = DevExpress.Dashboard.Internal.Model.IDataField;
    import DataFieldType = DevExpress.Dashboard.Model.DataFieldType;
    import IBindingProperty = DevExpress.Dashboard.Model.IBindingProperty;
	export interface IBindingModelProvider {
	    name?: ko.Observable<string>;
	    _getBindingModel(): Array<IBindingProperty>;
	    _displayNameSeparator?: string;
	    _getContainerType(): string;
	    grabFrom?: (container: any) => void;
	}
	export interface ICollectionBindingProperty extends IBindingProperty {
	    creator?: (type?: string, ...args: any[]) => any;
	    containersMap?: any;
	}
	export interface IDataItemProvider {
	    _getDataItem: (uniqueName: string) => DataItem;
	    _getFinalDataType(dataItemId: string): DataFieldType;
	    _createDataItem(dataInfo: IDataField, binding: IBindingProperty): DataItem;
	    _updateDataItem(dataItem: DataItem, binding: IBindingProperty, dataField: IDataField, acceptableShapingType: AcceptableShapingType): void;
	    _removeDataItem(dataItem: DataItem): void;
	    _attachDataItem(targetObject: any, linkPropertyName: string): any;
	}
	export let _areTheSameBindingProviders: (a: IBindingModelProvider, b: IBindingModelProvider) => false | IBindingProperty;

}
declare module DevExpress.Dashboard.Model {


    import IDataField = DevExpress.Dashboard.Internal.Model.IDataField;
    import IDashboardComponent = DevExpress.Dashboard.Internal.Model.IDashboardComponent;
    import IDataItemProvider = DevExpress.Dashboard.Internal.Model.IDataItemProvider;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import TypedSerializableModel = DevExpress.Dashboard.Model.TypedSerializableModel;
    import DataItemDateTimeFormat = DevExpress.Dashboard.Model.DataItemDateTimeFormat;
    import DataItemNumericFormat = DevExpress.Dashboard.Model.DataItemNumericFormat;
	export abstract class DataItem extends TypedSerializableModel implements IDashboardComponent {
	    static typesMap: {
	        Integer: string;
	        Float: string;
	        Double: string;
	        Decimal: string;
	        DateTime: string;
	        Text: string;
	        String: string;
	        Bool: string;
	        Boolean: string;
	    };
	    name: ko.Observable<string>;
	    uniqueName: ko.Observable<string>;
	    dataMember: ko.Observable<string>;
	    numericFormat: DataItemNumericFormat;
	    dateTimeFormat: DataItemDateTimeFormat;
	    showValues: ko.Observable<boolean>;
	    showTotals: ko.Observable<boolean>;
	    showGrandTotals: ko.Observable<boolean>;
	    constructor(dataItemJSON?: any, serializer?: DevExpress.Analytics.Utils.IModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    grabFrom(dataItem: DataItem): void;
	    isDefinitionEquals(dataItem: DataItem): boolean;
	    getUniqueNamePrefix(): string;
	}
	export enum AcceptableShapingType {
	    Number = 0,
	    String = 1,
	    RangeDate = 2,
	    Attribute = 3,
	    Hidden = 4
	}
	export class DataItemLink extends TypedSerializableModel {
	    static create(dataItemProvider: IDataItemProvider, dataItemLink: DataItemLink): DataItemLink;
	    uniqueName: ko.Observable<string>;
	    dataItem: ko.Subscribable<DataItem>;
	    private _dataItemProvider;
	    _specifics: {
	        acceptableShapingType: AcceptableShapingType;
	        customOptionsProperties: {
	            serializationInfo: IDashboardSerializationInfo;
	            filter?: (dataItem: DataItem) => boolean;
	            disabledRule?: (dataItem: DataItem) => boolean;
	        }[];
	        customDataShapingProperties: {
	            serializationInfo: IDashboardSerializationInfo;
	            filter?: (dataField: IDataField) => boolean;
	        }[];
	        isAttribute: boolean;
	        skipFormatting: boolean;
	        supportsTopNOther: boolean;
	        forceAddOlapExactDateFormat: boolean;
	    };
	    constructor(dataItemProvider: IDataItemProvider, dataItemLinkJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    protected _getDefaultItemType(): string;
	    _updateProvider(dataItemProvider: IDataItemProvider): void;
	}

}
declare module DevExpress.Dashboard.Internal.Model {
    import DataSource =  DevExpress.data.DataSource ;

    import DisposableType = DevExpress.Dashboard.Model.DisposableType;
    import IDisposable = DevExpress.Dashboard.Model.IDisposable;
	export type KnockoutEntry<T = any> = ko.Observable<T> | ko.Computed<T>;
	export function subscribeArrayChange<T>(array: ko.ObservableArray<T>, handlers: {
	    added?: (item: T, index?: number) => void;
	    deleted?: (item: T) => void;
	}): ko.Subscription;
	export function subscribeWithPrev<T>(target: ko.Subscribable<T>, callback: (oldValue: T, newValue: T) => void): IDisposable[];
	export function syncArrayHelper<T, U>(sourceArray: ko.ObservableArray<T>, destArray: ko.ObservableArray<U>, addHandler: (value: T) => U): ko.Subscription;
	export function subscribeToArrayItemProperties<T>(array: ko.ObservableArray<T>, handler: (item: T) => DisposableType | DisposableType[]): DisposableType;
	export function subscribeAndPerform<T>(subscribable: ko.Subscribable<T>, action: (value: T) => void): DisposableType;
	export function safeSubscribe<T>(observables: {
	    [K in keyof T]: ko.Subscribable<T[K]>;
	}, handler: (args: T) => DisposableType | void): DisposableType;
	export function safeComputed<T, V>(observables: {
	    [K in keyof T]: ko.Subscribable<T[K]>;
	}, handler: (args: T) => V): ko.PureComputed<V>;
	export function createObservableDataSource<T, V>(observables: {
	    [K in keyof T]: ko.Subscribable<T[K]>;
	}, load: (args: T) => Promise<any> | Array<any> | JQueryPromise<any>): {
	    dataSource: DataSource;
	    dispose: () => void;
	};

}
declare module DevExpress.Dashboard.Metadata {
    import DashboardLocalizationId = DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    import DateTimeGroupInterval = DevExpress.Dashboard.Model.DateTimeGroupInterval;
    import DimensionTopNMode = DevExpress.Dashboard.Model.DimensionTopNMode;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let dateTimeGroupIntervalsDict: {
	    [key in DateTimeGroupInterval]: DashboardLocalizationId;
	};
	export let dimensionGroupIndex: IDashboardSerializationInfo;
	export let dateTimeGroupInterval: IDashboardSerializationInfo;
	export let rangeDateTimeGroupInterval: IDashboardSerializationInfo;
	export let sortOrderBase: IDashboardSerializationInfo;
	export let sortOrderOlap: IDashboardSerializationInfo;
	export let sortOrderNonOlap: IDashboardSerializationInfo;
	export let sortMode: IDashboardSerializationInfo;
	export let textGroupInterval: IDashboardSerializationInfo;
	export let isDiscreteNumericScale: IDashboardSerializationInfo;
	export let groupChildValues: IDashboardSerializationInfo;
	export let coloringMode: IDashboardSerializationInfo;
	export let sortMeasure: IDashboardSerializationInfo;
	export let realSortMode: IDashboardSerializationInfo;
	export let topNOptionsEnabled: IDashboardSerializationInfo;
	export let topNOptionsModeValues: {
	    [key in DimensionTopNMode]: DashboardLocalizationId;
	};
	export let topNOptionsMode: IDashboardSerializationInfo;
	export let topNOptionsCount: IDashboardSerializationInfo;
	export let topNOptionsMeasure: IDashboardSerializationInfo;
	export let topNOptionsShowOthers: IDashboardSerializationInfo;
	export let topNOptionsSerializationsInfo: IDashboardSerializationInfoArray;
	export let dimensionItemSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import IDimensionDefinition = DevExpress.Dashboard.Model.IDimensionDefinition;
    import ColoringMode = DevExpress.Dashboard.Model.ColoringMode;
    import DateTimeGroupInterval = DevExpress.Dashboard.Model.DateTimeGroupInterval;
    import DimensionSortMode = DevExpress.Dashboard.Model.DimensionSortMode;
    import DimensionSortOrder = DevExpress.Dashboard.Model.DimensionSortOrder;
    import DimensionTopNMode = DevExpress.Dashboard.Model.DimensionTopNMode;
    import TextGroupInterval = DevExpress.Dashboard.Model.TextGroupInterval;
    import DataItem = DevExpress.Dashboard.Model.DataItem;
	export class Dimension extends DataItem implements IDimensionDefinition {
	    groupIndex: ko.Observable<number>;
	    sortOrder: ko.Observable<DimensionSortOrder>;
	    sortMeasure: ko.Observable<string>;
	    sortMode: ko.Observable<DimensionSortMode>;
	    realSortMode: ko.Computed<string>;
	    dateTimeGroupInterval: ko.Observable<DateTimeGroupInterval>;
	    textGroupInterval: ko.Observable<TextGroupInterval>;
	    isDiscreteNumericScale: ko.Observable<boolean>;
	    groupChildValues: ko.Observable<boolean>;
	    coloringMode: ko.Observable<ColoringMode>;
	    topNOptionsEnabled: ko.Observable<boolean>;
	    topNOptionsMode: ko.Observable<DimensionTopNMode>;
	    topNOptionsCount: ko.Observable<number>;
	    topNOptionsMeasureName: ko.Observable<string>;
	    topNOptionsShowOthers: ko.Observable<boolean>;
	    _actualDateTimeGroupInterval: ko.Computed<DateTimeGroupInterval>;
	    constructor(dataItemJSON?: any, serializer?: DevExpress.Analytics.Utils.IModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    grabFrom(dataItem: Dimension): void;
	    isDefinitionEquals(dataItem: DataItem): any;
	    protected _getDefaultItemType(): string;
	}

}
declare module DevExpress.Dashboard.Model {


    import SummaryType = DevExpress.Dashboard.Model.SummaryType;
    import Calculation = DevExpress.Dashboard.Model.Calculation;
    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import WindowDefinition = DevExpress.Dashboard.Model.WindowDefinition;
	export class Measure extends DataItem {
	    calculation: Calculation;
	    windowDefinition: WindowDefinition;
	    expression: ko.Observable<string>;
	    summaryType: ko.Observable<SummaryType>;
	    filterString: ko.Observable<string>;
	    constructor(dataItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    grabFrom(dataItem: Measure): void;
	    isDefinitionEquals(dataItem: DataItem): any;
	    _hasCalculation(): any;
	    protected _getDefaultItemType(): string;
	}

}
declare module DevExpress.Dashboard.Internal.Model {
	export function arrayEquals(array1: Array<any>, array2: Array<any>): boolean;
	export function arrayInsert(a: Array<any>, insertion: Array<any>, position: number): any[];
	export function areArraysEqual(arr1?: any[], arr2?: any[]): boolean;
	export function compareArrays<T>(array1: Array<T>, array2: Array<T>, predicate?: (a: T, b: T) => boolean): boolean;
	export function compareNotOrderedArrays<T>(array1: Array<T>, array2: Array<T>, predicate?: (a: T, b: T) => boolean): boolean;

}
declare module DevExpress.Dashboard.Internal.Model {
	export function collectionItemType(itemType: string): (target: Object, key: string) => void;

}
declare module DevExpress.Dashboard.Metadata {
	export let sliceTableDimensions: any;

}
declare module DevExpress.Dashboard.Model {


    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
	export class SpecificWindowDefinition extends MeasureCalculationWindowDefinition {
	    dimensions: ko.ObservableArray<DataItemLink>;
	    _dimensionsInfoPatcher: (propertyInfo: IDashboardSerializationInfo) => IDashboardSerializationInfo;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    equals(def: any): boolean;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let formatConditionBaseSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import DateTimeGroupInterval = DevExpress.Dashboard.Model.DateTimeGroupInterval;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
	export abstract class FormatConditionBase extends SerializableModel {
	    dataType: ko.Observable<string>;
	    dateTimeGroupInterval: ko.Observable<DateTimeGroupInterval>;
	    private _empty;
	    readonly _isApplyToRowColumnRestricted: boolean;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    isValid(): boolean;
	    isRange(): boolean;
	    isGradient(): boolean;
	    isEmpty: ko.Observable<boolean>;
	    getSpecificType: () => any;
	    setSpecificType: (type: any) => void;
	    init(): void;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let showBarOnly: IDashboardSerializationInfo;
	export let allowNegativeAxis: IDashboardSerializationInfo;
	export let drawAxis: IDashboardSerializationInfo;
	export let formatConditionBarOptionsSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
	export class FormatConditionBarOptions extends SerializableModel {
	    allowNegativeAxis: ko.Observable<boolean>;
	    drawAxis: ko.Observable<boolean>;
	    showBarOnly: ko.Observable<boolean>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let emptyStyleType: string;
	export let styleSettingsBaseSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let appearanceType: IDashboardSerializationInfo;
	export let fontStyle: IDashboardSerializationInfo;
	export let fontFamily: IDashboardSerializationInfo;
	export let backColor: IDashboardSerializationInfo;
	export let foreColor: IDashboardSerializationInfo;
	export let appearanceSettingsSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {

    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
	export abstract class StyleSettingsBase extends SerializableModel {
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    abstract equals(style: StyleSettingsBase): boolean;
	    abstract clone(): StyleSettingsBase;
	    init(): void;
	    setSpecificType(type: string): void;
	}

}
declare module DevExpress.Dashboard.Model {


    import Color = DevExpress.Dashboard.Model.Color;
    import FontStyle = DevExpress.Dashboard.Model.FontStyle;
    import FormatConditionAppearanceType = DevExpress.Dashboard.Model.FormatConditionAppearanceType;
    import StyleSettingsBase = DevExpress.Dashboard.Model.StyleSettingsBase;
	export class AppearanceSettings extends StyleSettingsBase {
	    appearanceType: ko.Observable<FormatConditionAppearanceType>;
	    fontFamily: ko.Observable<string>;
	    fontStyle: ko.Observable<FontStyle>;
	    backColor: ko.Observable<Color>;
	    foreColor: ko.Observable<Color>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    equals(style: StyleSettingsBase): boolean;
	    clone(): StyleSettingsBase;
	    setSpecificType(type: FormatConditionAppearanceType): void;
	    init(): void;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let predefinedColor: IDashboardSerializationInfo;
	export let barStypeColor: IDashboardSerializationInfo;
	export let barStyleSettingsSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import Color = DevExpress.Dashboard.Model.Color;
    import StyleSettingsBase = DevExpress.Dashboard.Model.StyleSettingsBase;
	export class BarStyleSettings extends StyleSettingsBase {
	    predefinedColor: ko.Observable<string>;
	    color: ko.Observable<Color>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    equals(style: StyleSettingsBase): boolean;
	    clone(): StyleSettingsBase;
	    setSpecificType(type: string): void;
	    init(): void;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let iconType: IDashboardSerializationInfo;
	export let iconSettingsSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import FormatConditionIconType = DevExpress.Dashboard.Model.FormatConditionIconType;
    import StyleSettingsBase = DevExpress.Dashboard.Model.StyleSettingsBase;
	export class IconSettings extends StyleSettingsBase {
	    iconType: ko.Observable<FormatConditionIconType>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    equals(style: StyleSettingsBase): boolean;
	    clone(): StyleSettingsBase;
	    setSpecificType(type: FormatConditionIconType): void;
	    init(): void;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export const negativeInfinity = "-Infinity";
	export let fieldTypes: {
	    Text: string;
	    DateTime: string;
	    Bool: string;
	    Integer: string;
	    Float: string;
	    Double: string;
	    Decimal: string;
	    Enum: string;
	    Custom: string;
	    Unknown: string;
	};
	export let complexValueType: IDashboardSerializationInfo;
	export let complexValueValue: IDashboardSerializationInfo;
	export let complexValueInfo: IDashboardSerializationInfoArray;
	export let styleSettingsTypes: Array<IDashboardSerializationInfo>;
	export let styleSettings: IDashboardSerializationInfo;
	export let barOptions: IDashboardSerializationInfo;

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let ranges: IDashboardSerializationInfo;
	export let rangeSetSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Internal.Model {
    import SimpleFormAdapterItems = DevExpress.Dashboard.Metadata.SimpleFormAdapterItems;
	export function validateGuid(guid: any): boolean;
	export class ParameterHelper {
	    static getInfoPerType(valueType: any): any[];
	    static getEditorType(typeString: string): SimpleFormAdapterItems;
	    static typeValues: any[];
	    private static _getTypeValue;
	    private static _tryConvertValue;
	    static getDefaultTypeValue(type: string): any;
	    static convertSingleValue(value: any, type: string, allowNull?: boolean): any;
	}

}
declare module DevExpress.Dashboard.Model {


    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
	export class ComplexValue extends SerializableModel {
	    value: ko.Observable<any>;
	    type: ko.Observable<string>;
	    isEmpty(): boolean;
	    readonly isInfinity: boolean;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    setValue(value: any, type: string): void;
	}

}
declare module DevExpress.Dashboard.Model {


    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import AppearanceSettings = DevExpress.Dashboard.Model.AppearanceSettings;
    import BarStyleSettings = DevExpress.Dashboard.Model.BarStyleSettings;
    import IconSettings = DevExpress.Dashboard.Model.IconSettings;
    import StyleSettingsBase = DevExpress.Dashboard.Model.StyleSettingsBase;
    import FormatConditionBase = DevExpress.Dashboard.Model.FormatConditionBase;
	export let _styleSettingsTypesMap: {
	    'AppearanceSettings': typeof AppearanceSettings;
	    'IconSettings': typeof IconSettings;
	    'StyleSettings': typeof BarStyleSettings;
	};
	export let currentStyleSettingInfo: (styleSettingsType: ko.Observable<string>) => IDashboardSerializationInfo[];
	export abstract class FormatConditionStyleBase extends FormatConditionBase {
	    styleSettings: ko.Observable<StyleSettingsBase>;
	    private _styleSettingsType;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    getDefaultStyleSettingsType(): string;
	    isValid(): boolean;
	    init(): void;
	    protected abstract _getStyleSettingsInfo(): IDashboardSerializationInfoArray;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let rangeValue: IDashboardSerializationInfo;
	export let rangeValueComparison: IDashboardSerializationInfo;
	export let rangeInfoSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import DashboardFormatConditionComparisonType = DevExpress.Dashboard.Model.DashboardFormatConditionComparisonType;
    import TypedSerializableModel = DevExpress.Dashboard.Model.TypedSerializableModel;
    import ComplexValue = DevExpress.Dashboard.Model.ComplexValue;
    import StyleSettingsBase = DevExpress.Dashboard.Model.StyleSettingsBase;
	export class RangeInfo extends TypedSerializableModel {
	    styleSettings: ko.Observable<StyleSettingsBase>;
	    value: ComplexValue;
	    valueComparison: ko.Observable<DashboardFormatConditionComparisonType>;
	    private _styleSettingsType;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    clone(): RangeInfo;
	    protected _getDefaultItemType(): string;
	}

}
declare module DevExpress.Dashboard.Model {


    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    import RangeInfo = DevExpress.Dashboard.Model.RangeInfo;
	export class RangeSet extends SerializableModel {
	    ranges: ko.ObservableArray<RangeInfo>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let rangeValueType: IDashboardSerializationInfo;
	export let rangeSet: IDashboardSerializationInfo;
	export let formatConditionRangeBaseSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import DashboardFormatConditionValueType = DevExpress.Dashboard.Model.DashboardFormatConditionValueType;
    import StyleSettingsBase = DevExpress.Dashboard.Model.StyleSettingsBase;
    import FormatConditionBase = DevExpress.Dashboard.Model.FormatConditionBase;
    import RangeInfo = DevExpress.Dashboard.Model.RangeInfo;
    import RangeSet = DevExpress.Dashboard.Model.RangeSet;
	export abstract class FormatConditionRangeBase extends FormatConditionBase {
	    valueType: ko.Observable<DashboardFormatConditionValueType>;
	    rangeSet: RangeSet;
	    readonly actualStyles: Array<StyleSettingsBase>;
	    readonly stopStyles: Array<StyleSettingsBase>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    isValid(): boolean;
	    isRange(): boolean;
	    getSpecificType: () => any;
	    setSpecificType: (specificType: any) => any;
	    abstract getActualPredefinedType(): any;
	    abstract setActualPredefinedType(specificType: any): any;
	    setValues(values: Array<any>): void;
	    createStyleSettings(styleListItem: any): any;
	    protected _getSortedRanges(): Array<RangeInfo>;
	    protected _getRangeIndexSettings(index: number): StyleSettingsBase;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let formatConditionRangeSetSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {
	export enum FormatConditionRangeSetPredefinedType {
	    None = 0,
	    Custom = 1,
	    Arrows2 = 2,
	    Arrows3 = 3,
	    Arrows4 = 4,
	    Arrows5 = 5,
	    ArrowsGray2 = 6,
	    ArrowsGray3 = 7,
	    ArrowsGray4 = 8,
	    ArrowsGray5 = 9,
	    PositiveNegative3 = 10,
	    Stars3 = 11,
	    Quarters5 = 12,
	    Bars4 = 13,
	    Bars5 = 14,
	    Boxes5 = 15,
	    TrafficLights3 = 16,
	    Circles2 = 17,
	    Circles3 = 18,
	    Circles4 = 19,
	    CirclesRedToBlack4 = 20,
	    Signs3 = 21,
	    Symbols2 = 22,
	    Symbols3 = 23,
	    SymbolsCircled2 = 24,
	    SymbolsCircled3 = 25,
	    Flags3 = 26,
	    ColorsPaleRedGreen = 27,
	    ColorsPaleRedGreenBlue = 28,
	    ColorsPaleRedYellowGreenBlue = 29,
	    ColorsPaleRedOrangeYellowGreenBlue = 30,
	    ColorsRedGreen = 31,
	    ColorsRedGreenBlue = 32,
	    ColorsRedYellowGreenBlue = 33,
	    ColorsRedOrangeYellowGreenBlue = 34
	}
	export enum FormatConditionRangeGradientPredefinedType {
	    None = 0,
	    Custom = 1,
	    GreenWhite = 2,
	    WhiteGreen = 3,
	    RedWhite = 4,
	    WhiteRed = 5,
	    YellowGreen = 6,
	    GreenYellow = 7,
	    YellowRed = 8,
	    RedYellow = 9,
	    BlueWhite = 10,
	    WhiteBlue = 11,
	    BlueRed = 12,
	    RedBlue = 13,
	    YellowBlue = 14,
	    BlueYellow = 15,
	    GreenBlue = 16,
	    BlueGreen = 17,
	    GreenWhiteBlue = 18,
	    BlueWhiteGreen = 19,
	    BlueWhiteRed = 20,
	    RedWhiteBlue = 21,
	    GreenWhiteRed = 22,
	    RedWhiteGreen = 23,
	    GreenYellowRed = 24,
	    RedYellowGreen = 25,
	    BlueYellowRed = 26,
	    RedYellowBlue = 27,
	    GreenYellowBlue = 28,
	    BlueYellowGreen = 29
	}
	export enum FormatConditionIconGroups {
	    Directional = 0,
	    Indicators = 1,
	    Flags = 2,
	    Shapes = 3,
	    RatingsMonochrome = 4,
	    RatingsColor = 5
	}
	export interface IStyleList {
	    list: Array<string>;
	    isIcon: boolean;
	}
	export class FormatConditionConverter {
	    static getStyleList(type: FormatConditionRangeSetPredefinedType): IStyleList;
	    static toColorTypes(colorRangeSetType: FormatConditionRangeSetPredefinedType): Array<string>;
	    static toIconTypes(iconRangeSetType: FormatConditionRangeSetPredefinedType): Array<string>;
	    static toAppearanceTypes(gradientType: FormatConditionRangeGradientPredefinedType): Array<string>;
	    static toGroupIconTypes(iconsGroup: FormatConditionIconGroups): Array<string>;
	}

}
declare module DevExpress.Dashboard.Model {

    import StyleSettingsBase = DevExpress.Dashboard.Model.StyleSettingsBase;
	export class RangeIndexSettings extends StyleSettingsBase {
	    index: ko.Observable<number>;
	    isBarStyle: ko.Observable<boolean>;
	    constructor(index: number);
	    equals(style: StyleSettingsBase): boolean;
	    clone(): StyleSettingsBase;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let segmentNumber: IDashboardSerializationInfo;
	export let formatConditionRangeGradientSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import Color = DevExpress.Dashboard.Model.Color;
    import StyleSettingsBase = DevExpress.Dashboard.Model.StyleSettingsBase;
    import FormatConditionRangeBase = DevExpress.Dashboard.Model.FormatConditionRangeBase;
    import FormatConditionRangeGradientPredefinedType = DevExpress.Dashboard.Model.FormatConditionRangeGradientPredefinedType;
    import RangeInfo = DevExpress.Dashboard.Model.RangeInfo;
	export class FormatConditionRangeGradient extends FormatConditionRangeBase {
	    protected static isGradientStop(predefined: string, color: Color): boolean;
	    segmentNumber: ko.Computed<number>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    isGradient(): boolean;
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    getActualPredefinedType(): FormatConditionRangeGradientPredefinedType;
	    setActualPredefinedType(type: FormatConditionRangeGradientPredefinedType): void;
	    getSpecificType: () => FormatConditionRangeGradientPredefinedType;
	    setSpecificType: (specificType: any) => void;
	    protected _generateByDefault(segmentNumber: number): void;
	    generateAsPercent(startStyle: StyleSettingsBase, endStyle: StyleSettingsBase, segmentNumber: number): void;
	    generateAsNumber(startStyle: StyleSettingsBase, endStyle: StyleSettingsBase, values: Array<any>): void;
	    protected _getRangeIndexSettings(index: number): StyleSettingsBase;
	    protected _getSortedRanges(): Array<RangeInfo>;
	    protected _generate(startStyle: StyleSettingsBase, endStyle: StyleSettingsBase, rangeCount: number): void;
	    protected _isGradientStop(style: StyleSettingsBase): boolean;
	    private _validateStyle;
	}

}
declare module DevExpress.Dashboard.Model {
    import Color = DevExpress.Dashboard.Model.Color;
    import StyleSettingsBase = DevExpress.Dashboard.Model.StyleSettingsBase;
    import FormatConditionRangeBase = DevExpress.Dashboard.Model.FormatConditionRangeBase;
    import FormatConditionRangeGradient = DevExpress.Dashboard.Model.FormatConditionRangeGradient;
    import FormatConditionRangeSet = DevExpress.Dashboard.Model.FormatConditionRangeSet;
    import FormatConditionRangeGradientPredefinedType = DevExpress.Dashboard.Model.FormatConditionRangeGradientPredefinedType;
    import FormatConditionRangeSetPredefinedType = DevExpress.Dashboard.Model.FormatConditionRangeSetPredefinedType;
	export class FormatConditionRangeGenerator {
	    static generateRangeSet(condition: FormatConditionRangeSet, type: FormatConditionRangeSetPredefinedType): void;
	    static generateGradientByType(condition: FormatConditionRangeGradient, type: FormatConditionRangeGradientPredefinedType, segmentNumber: number, isBar?: boolean): void;
	    static generateGradientByStyles(condition: FormatConditionRangeGradient, styles: Array<StyleSettingsBase>, segmentNumber: number): void;
	    static generateGradientColors(gradientType: FormatConditionRangeGradientPredefinedType, count: number): Array<Color>;
	    static getPredefinedType(actualStyles: Array<StyleSettingsBase>, func: (type: FormatConditionRangeSetPredefinedType) => FormatConditionRangeBase): FormatConditionRangeSetPredefinedType;
	    static getGradientPredefinedType(actualStyles: Array<StyleSettingsBase>, func: (type: FormatConditionRangeGradientPredefinedType) => FormatConditionRangeBase): FormatConditionRangeGradientPredefinedType;
	    static calculateRangePercentValues(segmentCount: number): Array<number>;
	    static compareValues(val1: any, val2: any, changeType: boolean): number;
	    private static _isStylesEqual;
	    private static _getPercentRangeStops;
	    private static _calculateRangePercent;
	    private static _generateRangeSet;
	    private static _calculateRangeDate;
	}

}
declare module DevExpress.Dashboard.Model {

    import FormatConditionRangeBase = DevExpress.Dashboard.Model.FormatConditionRangeBase;
    import FormatConditionRangeSetPredefinedType = DevExpress.Dashboard.Model.FormatConditionRangeSetPredefinedType;
	export class FormatConditionRangeSet extends FormatConditionRangeBase {
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    getActualPredefinedType(): FormatConditionRangeSetPredefinedType;
	    setActualPredefinedType(type: FormatConditionRangeSetPredefinedType): void;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let formatConditionStyleBaseSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let averageType: IDashboardSerializationInfo;
	export let formatConditionAverageSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import DashboardFormatConditionAboveBelowType = DevExpress.Dashboard.Model.DashboardFormatConditionAboveBelowType;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import FormatConditionStyleBase = DevExpress.Dashboard.Model.FormatConditionStyleBase;
	export class FormatConditionAverage extends FormatConditionStyleBase {
	    averageType: ko.Observable<DashboardFormatConditionAboveBelowType>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getStyleSettingsInfo(): IDashboardSerializationInfoArray;
	    getSpecificType: () => DashboardFormatConditionAboveBelowType;
	    setSpecificType: (type: DashboardFormatConditionAboveBelowType) => void;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let minimumType: IDashboardSerializationInfo;
	export let maximumType: IDashboardSerializationInfo;
	export let formatConditionMinimum: IDashboardSerializationInfo;
	export let formatConditionMaximum: IDashboardSerializationInfo;
	export let formatConditionMinMaxBaseSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import DashboardFormatConditionValueType = DevExpress.Dashboard.Model.DashboardFormatConditionValueType;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import FormatConditionStyleBase = DevExpress.Dashboard.Model.FormatConditionStyleBase;
	export abstract class FormatConditionMinMaxBase extends FormatConditionStyleBase {
	    minimumType: ko.Observable<DashboardFormatConditionValueType>;
	    maximumType: ko.Observable<DashboardFormatConditionValueType>;
	    minimum: ko.Observable<number>;
	    maximum: ko.Observable<number>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getStyleSettingsInfo(): IDashboardSerializationInfoArray;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let barNegativeStyleSettings: IDashboardSerializationInfo;
	export let barCurrentStyleSettingsType: IDashboardSerializationInfo;
	export let barCurrentStyleSettings: IDashboardSerializationInfo;
	export let formatConditionBarSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import BarStyleSettings = DevExpress.Dashboard.Model.BarStyleSettings;
    import StyleSettingsBase = DevExpress.Dashboard.Model.StyleSettingsBase;
    import FormatConditionBarOptions = DevExpress.Dashboard.Model.FormatConditionBarOptions;
    import FormatConditionMinMaxBase = DevExpress.Dashboard.Model.FormatConditionMinMaxBase;
	export class FormatConditionBar extends FormatConditionMinMaxBase {
	    barOptions: FormatConditionBarOptions;
	    negativeStyleSettings: BarStyleSettings;
	    currentStyleSettingsType: ko.Observable<string>;
	    currentStyleSettings: ko.Computed<StyleSettingsBase>;
	    readonly _isApplyToRowColumnRestricted: boolean;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getStyleSettingsInfo(): IDashboardSerializationInfoArray;
	    getSpecificType: () => any;
	    setSpecificType: (type: string) => void;
	    getDefaultStyleSettingsType(): string;
	    init(): void;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import DashboardLocalizationId = DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    import FilterDateType = DevExpress.Dashboard.Model.FilterDateType;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let dateTypeValues: Array<{
	    value: FilterDateType;
	    displayValueId: DashboardLocalizationId;
	}>;
	export let dateType: IDashboardSerializationInfo;
	export let FormatConditionDateOccurringSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import FilterDateType = DevExpress.Dashboard.Model.FilterDateType;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import FormatConditionStyleBase = DevExpress.Dashboard.Model.FormatConditionStyleBase;
	export class FormatConditionDateOccurring extends FormatConditionStyleBase {
	    dateType: ko.Observable<FilterDateType>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getStyleSettingsInfo(): IDashboardSerializationInfoArray;
	    getSpecificType: () => any;
	    setSpecificType: (type: string) => void;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let formatConditionExpression: IDashboardSerializationInfo;
	export let formatConditionFilter: IDashboardSerializationInfo;
	export let formatConditionExpressionSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import FormatConditionStyleBase = DevExpress.Dashboard.Model.FormatConditionStyleBase;
	export class FormatConditionExpression extends FormatConditionStyleBase {
	    expression: ko.Observable<string>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getStyleSettingsInfo(): IDashboardSerializationInfoArray;
	    getSpecificType: () => any;
	    setSpecificType: (type: string) => void;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let rank: IDashboardSerializationInfo;
	export let rankType: IDashboardSerializationInfo;
	export let topBottom: IDashboardSerializationInfo;
	export let formatConditionTopBottomSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import DashboardFormatConditionTopBottomType = DevExpress.Dashboard.Model.DashboardFormatConditionTopBottomType;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import FormatConditionStyleBase = DevExpress.Dashboard.Model.FormatConditionStyleBase;
	export class FormatConditionTopBottom extends FormatConditionStyleBase {
	    rank: ko.Observable<number>;
	    rankType: ko.Observable<string>;
	    topBottom: ko.Observable<DashboardFormatConditionTopBottomType>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getStyleSettingsInfo(): IDashboardSerializationInfoArray;
	    getSpecificType: () => DashboardFormatConditionTopBottomType;
	    setSpecificType: (type: DashboardFormatConditionTopBottomType) => void;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let conditionInCondition: IDashboardSerializationInfo;
	export let formatConditionValue1: IDashboardSerializationInfo;
	export let formatConditionValue2: IDashboardSerializationInfo;
	export let formatConditionValueSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import DashboardFormatCondition = DevExpress.Dashboard.Model.DashboardFormatCondition;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import ComplexValue = DevExpress.Dashboard.Model.ComplexValue;
    import FormatConditionStyleBase = DevExpress.Dashboard.Model.FormatConditionStyleBase;
	export class FormatConditionValue extends FormatConditionStyleBase {
	    condition: ko.Observable<DashboardFormatCondition>;
	    value1: ComplexValue;
	    value2: ComplexValue;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getStyleSettingsInfo(): IDashboardSerializationInfoArray;
	    getSpecificType: () => DashboardFormatCondition;
	    setSpecificType: (type: DashboardFormatCondition) => void;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let formatConditionColorRangeBarSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {

    import FormatConditionBarOptions = DevExpress.Dashboard.Model.FormatConditionBarOptions;
    import FormatConditionRangeSet = DevExpress.Dashboard.Model.FormatConditionRangeSet;
    import FormatConditionRangeSetPredefinedType = DevExpress.Dashboard.Model.FormatConditionRangeSetPredefinedType;
	export class FormatConditionColorRangeBar extends FormatConditionRangeSet {
	    barOptions: FormatConditionBarOptions;
	    readonly _isApplyToRowColumnRestricted: boolean;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    getActualPredefinedType(): FormatConditionRangeSetPredefinedType;
	    setActualPredefinedType(type: FormatConditionRangeSetPredefinedType): void;
	    createStyleSettings(styleListItem: any): any;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let formatConditionGradientRangeBarSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {

    import StyleSettingsBase = DevExpress.Dashboard.Model.StyleSettingsBase;
    import FormatConditionBarOptions = DevExpress.Dashboard.Model.FormatConditionBarOptions;
    import FormatConditionRangeGradient = DevExpress.Dashboard.Model.FormatConditionRangeGradient;
    import FormatConditionRangeGradientPredefinedType = DevExpress.Dashboard.Model.FormatConditionRangeGradientPredefinedType;
	export class FormatConditionGradientRangeBar extends FormatConditionRangeGradient {
	    barOptions: FormatConditionBarOptions;
	    readonly _isApplyToRowColumnRestricted: boolean;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    getActualPredefinedType(): FormatConditionRangeGradientPredefinedType;
	    setActualPredefinedType(type: FormatConditionRangeGradientPredefinedType): void;
	    protected _isGradientStop(style: StyleSettingsBase): boolean;
	    protected _generateByDefault(segmentNumber: number): void;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let formatRuleName: IDashboardSerializationInfo;
	export let classCaption: IDashboardSerializationInfo;
	export let enabled: IDashboardSerializationInfo;
	export let conditionTypes: Array<IDashboardSerializationInfo>;
	export let condition: IDashboardSerializationInfo;
	export let dashboardItemFormatRuleSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import TypedSerializableModel = DevExpress.Dashboard.Model.TypedSerializableModel;
    import FormatConditionBase = DevExpress.Dashboard.Model.FormatConditionBase;
	export abstract class DashboardItemFormatRule extends TypedSerializableModel {
	    name: ko.Observable<string>;
	    enabled: ko.Observable<boolean>;
	    condition: ko.Computed<FormatConditionBase>;
	    readonly _classCaption: string;
	    readonly _classId: string;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    _changeConditionType(propertyName: string): void;
	}

}
declare module DevExpress.Dashboard.Model {

    import DashboardItemFormatRule = DevExpress.Dashboard.Model.DashboardItemFormatRule;
	export abstract class CardItemFormatRuleBase extends DashboardItemFormatRule {
	    applyToCard: ko.Observable<boolean>;
	    layoutItemApplyTo: ko.Computed<string>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let layoutItemApplyTo: IDashboardSerializationInfo;
	export let cardItemFormatRuleSerializationsInfoBase: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let deltaValueType: IDashboardSerializationInfo;
	export let cardId: IDashboardSerializationInfo;
	export let cardItemDeltaFormatRuleSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {

    import DeltaValueType = DevExpress.Dashboard.Model.DeltaValueType;
    import CardItemFormatRuleBase = DevExpress.Dashboard.Model.CardItemFormatRuleBase;
	export class CardItemDeltaFormatRule extends CardItemFormatRuleBase {
	    deltaValueType: ko.Observable<DeltaValueType>;
	    cardId: ko.Observable<string>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    protected _getDefaultItemType(): string;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let cardItemformatRuleDataItem: IDashboardSerializationInfo;
	export let cardItemFormatRuleSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {

    import CardItemFormatRuleBase = DevExpress.Dashboard.Model.CardItemFormatRuleBase;
	export class CardItemFormatRule extends CardItemFormatRuleBase {
	    dataItemName: ko.Observable<string>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    protected _getDefaultItemType(): string;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let applyToRow: IDashboardSerializationInfo;
	export let formatRuleDataItem: IDashboardSerializationInfo;
	export let dataItemApplyTo: IDashboardSerializationInfo;
	export let cellsItemFormatRuleSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import DashboardItemFormatRule = DevExpress.Dashboard.Model.DashboardItemFormatRule;
	export abstract class CellsItemFormatRule extends DashboardItemFormatRule {
	    applyToRow: ko.Observable<boolean>;
	    dataItemName: ko.Observable<string>;
	    dataItemApplyToName: ko.Computed<string>;
	    private _dataItemApplyToName;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let gridItemFormatRuleSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {

    import CellsItemFormatRule = DevExpress.Dashboard.Model.CellsItemFormatRule;
	export class GridItemFormatRule extends CellsItemFormatRule {
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    protected _getDefaultItemType(): string;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let pivotLevelColumn: IDashboardSerializationInfo;
	export let pivotLevelRow: IDashboardSerializationInfo;
	export let pivotItemFormatRuleLevelSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
	export class PivotItemFormatRuleLevel extends SerializableModel {
	    column: ko.Observable<string>;
	    row: ko.Observable<string>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let applyToColumn: IDashboardSerializationInfo;
	export let intersectionLevelModeValues: {
	    Auto: "DashboardStringId.ActionClearMasterFilter" | "DashboardStringId.ActionClearSelection" | "DashboardStringId.ActionOtherValues" | "DashboardStringId.ActionDrillUp" | "DashboardStringId.ActionExportTo" | "DashboardStringId.ActionExportToPdf" | "DashboardStringId.ActionExportToImage" | "DashboardStringId.ActionExportToExcel" | "DashboardStringId.RangeFilterCustomDateTimePeriod" | "DashboardStringId.ActionExportTemplate" | "DashboardStringId.ActionAllowMultiselection" | "DashboardStringId.DashboardNullValue" | "DashboardStringId.TopNOthersValue" | "DashboardStringId.DashboardErrorValue" | "DashboardStringId.DateTimeQuarterFormat" | "DashboardStringId.MessageLoading" | "DashboardStringId.ParametersFormCaption" | "DashboardStringId.ParametersSelectorText" | "DashboardStringId.ParametersFormAllowNullColumnCaption" | "DashboardStringId.ParametersFormValueColumnCaption" | "DashboardStringId.ParametersFormNameColumnCaption" | "DashboardStringId.ButtonOK" | "DashboardStringId.ButtonCancel" | "DashboardStringId.SelectDate" | "DashboardStringId.ButtonReset" | "DashboardStringId.ButtonSubmit" | "DashboardStringId.ButtonApply" | "DashboardStringId.ButtonExport" | "DashboardStringId.GridResetColumnWidths" | "DashboardStringId.GridSortAscending" | "DashboardStringId.GridSortDescending" | "DashboardStringId.GridClearSorting" | "DashboardStringId.PivotGridTotal" | "DashboardStringId.PivotGridGrandTotal" | "DashboardStringId.ChartTotalValue" | "DashboardStringId.PageLayout" | "DashboardStringId.PageLayoutAuto" | "DashboardStringId.PageLayoutPortrait" | "DashboardStringId.PageLayoutLandscape" | "DashboardStringId.PaperKind" | "DashboardStringId.PaperKindLetter" | "DashboardStringId.PaperKindLegal" | "DashboardStringId.PaperKindExecutive" | "DashboardStringId.PaperKindA5" | "DashboardStringId.PaperKindA4" | "DashboardStringId.PaperKindA3" | "DashboardStringId.ScaleMode" | "DashboardStringId.ScaleModeNone" | "DashboardStringId.ScaleModeUseScaleFactor" | "DashboardStringId.ScaleModeAutoFitToPagesWidth" | "DashboardStringId.AutoFitPageCount" | "DashboardStringId.ScaleFactor" | "DashboardStringId.PrintHeadersOnEveryPage" | "DashboardStringId.FitToPageWidth" | "DashboardStringId.SizeMode" | "DashboardStringId.SizeModeNone" | "DashboardStringId.SizeModeStretch" | "DashboardStringId.SizeModeZoom" | "DashboardStringId.AutoArrangeContent" | "DashboardStringId.ImageFormat" | "DashboardStringId.ExcelFormat" | "DashboardStringId.CsvValueSeparator" | "DashboardStringId.ExportFilters" | "DashboardStringId.ExportParameters" | "DashboardStringId.DashboardStatePosition" | "DashboardStringId.Resolution" | "DashboardStringId.ShowTitle" | "DashboardStringId.Title" | "DashboardStringId.FileName" | "DashboardStringId.FilterStatePresentationAfter" | "DashboardStringId.FilterStatePresentationAfterAndSplitPage" | "DashboardStringId.FilterStatePresentationSplitSheet" | "DashboardStringId.MessageCustomItemIsNotSupported" | "DashboardStringId.MessageGridHasNoData" | "DashboardStringId.MessagePivotHasNoData" | "DashboardStringId.SparklineTooltipStartValue" | "DashboardStringId.SparklineTooltipEndValue" | "DashboardStringId.SparklineTooltipMinValue" | "DashboardStringId.SparklineTooltipMaxValue" | "DashboardStringId.OpenCaption" | "DashboardStringId.HighCaption" | "DashboardStringId.LowCaption" | "DashboardStringId.CloseCaption" | "DashboardStringId.InitialExtent" | "DashboardStringId.FilterElementShowAllItem" | "DashboardStringId.NumericFormatUnitSymbolThousands" | "DashboardStringId.NumericFormatUnitSymbolMillions" | "DashboardStringId.NumericFormatUnitSymbolBillions" | "DashboardStringId.ActionSelectDateTimePeriod" | "DashboardStringId.RangeFilterSelectRange" | "DashboardStringId.FilterElementCheckedComboBoxNoDataCaption" | "DashboardStringId.FilterElementRadioComboBoxNoDataCaption" | "DashboardStringId.FilterElementNoDataToDisplay" | "DashboardStringId.RangeFilterSelectRangeFromCaption" | "DashboardStringId.RangeFilterSelectRangeToCaption" | "DashboardWebStringId.DashboardParameters" | "DashboardStringId.DataSourceDataMember" | "DashboardStringId.DescriptionMeasures" | "DashboardWebStringId.TextBoxFormatText" | "DashboardStringId.NumericFormatUnitCaption" | "DashboardWebStringId.SummaryType" | "DashboardStringId.CalculationTypeExpression" | "DevExpressWebStringId.CalculatedFieldDataType" | "DashboardStringId.ValueCaption" | "DashboardStringId.Value1Caption" | "DashboardStringId.Value2Caption" | "DashboardStringId.CommandFormatRuleTopBottom" | "DashboardStringId.CommandFormatRuleAboveBelowAverage" | "DashboardStringId.CommandFormatRuleBar" | "DashboardStringId.CommandFormatRuleColorRangeBar" | "DashboardStringId.CommandFormatRuleGradientRangeBar" | "DashboardStringId.FormatRuleStyleAppearance" | "DashboardStringId.FormatRuleStyleIcons" | "DashboardStringId.FormatRuleNegativeStyle" | "DashboardStringId.CommandFormatRuleExpression" | "DashboardWebStringId.TopNMode" | "DashboardStringId.CommandFormatRuleRangeSet" | "DashboardStringId.CommandFormatRuleValue" | "DashboardStringId.CommandFormatRuleDateOccurring" | "DashboardWebStringId.ConditionalFormatting.Appearance.BackColor" | "DashboardWebStringId.ConditionalFormatting.Appearance.ForeColor" | "DashboardStringId.DescriptionBoundImageAttribute" | "DashboardWebStringId.ShowCaptionText" | "DashboardWebStringId.DisplayItemAsPage" | "DashboardStringId.DefaultNameItemGroup" | "DashboardStringId.DefaultNameTabContainerItem" | "DashboardStringId.DefaultDataSourceName" | "DashboardWebStringId.CrossDataSourceFiltering" | "DashboardStringId.RangeFilterCalculationAlongSeries" | "DashboardStringId.RangeFilterCalculationAlongArgument" | "DashboardStringId.DescriptionItemSeries" | "DashboardStringId.DescriptionSeries" | "DashboardWebStringId.Chart.SeriesType" | "DashboardStringId.DescriptionDimensions" | "DashboardWebStringId.TreeView.AutoExpand" | "DashboardWebStringId.ConditionalFormatting.ConditionMinimum" | "DashboardWebStringId.ConditionalFormatting.ConditionMaximum" | "DashboardStringId.DescriptionItemDimension" | "DashboardStringId.DescriptionItemMeasure" | "DashboardWebStringId.Grid.MergeCells" | "DashboardWebStringId.Grid.ColumnWidthMode" | "DashboardWebStringId.Grid.BandedRows" | "DashboardWebStringId.Grid.VerticalLines" | "DashboardWebStringId.Grid.HorizontalLines" | "DashboardWebStringId.Grid.ColumnHeaders" | "DashboardWebStringId.Grid.WordWrap" | "DashboardStringId.ActualValueCaption" | "DashboardStringId.TargetValueCaption" | "DashboardStringId.UriPatternCaption" | "DashboardStringId.UriCaption" | "DashboardStringId.DisplayValueCaption" | "DashboardStringId.WeightCaption" | "DashboardStringId.DescriptionItemColor" | "DashboardStringId.Latitude" | "DashboardStringId.Longitude" | "DashboardWebStringId.GeoPointMapClusterization" | "DashboardWebStringId.MapLockNavigation" | "DashboardWebStringId.WeightedLegendGalleryGroup" | "DashboardStringId.DescriptionItemArgument" | "DashboardWebStringId.PieMapIsWeighted" | "DashboardWebStringId.InteractivityOptions.IgnoreMasterFilters" | "DashboardWebStringId.InteractivityOptions.DrillDown" | "DashboardWebStringId.Pie.ShowCaptions" | "DashboardStringId.DescriptionColumns" | "DashboardStringId.DescriptionRows" | "DashboardStringId.DescriptionValues" | "DashboardStringId.DescriptionArguments" | "DashboardStringId.TextGroupIntervalAlphabetical" | "DashboardStringId.ActionMaximizeDashboardItem" | "DashboardStringId.ActionRestoreDashboardItem" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataSource" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.ValueMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DisplayMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.SortOrder" | "DevExpress.DashboardCommon.DashboardParameter.Visible" | "DevExpress.DashboardCommon.DashboardParameter.Description" | "DevExpress.DashboardCommon.DashboardParameter.AllowMultiselect" | "DevExpress.DashboardCommon.DashboardParameter.AllowNull" | "DevExpress.DashboardCommon.DashboardParameter.SelectAllValues" | "DevExpress.DashboardCommon.StaticListLookUpSettings.Values" | "DevExpress.DashboardCommon.DimensionSortOrder.Ascending" | "DevExpress.DashboardCommon.DimensionSortOrder.Descending" | "DevExpress.DashboardCommon.DimensionSortOrder.None" | "DashboardWebStringId.AccordionTab.ScatterChartPointLabelOptions" | "DashboardWebStringId.AccordionTab.ChoroplethMapShapeLabelsAttribute" | "DashboardStringId.CommandFormatRuleTopN" | "DashboardWebStringId.Type" | "DashboardWebStringId.Grid.ColumnWidth" | "DashboardWebStringId.AccordionTab.ShowTotals" | "DashboardWebStringId.AccordionTab.Layout" | "DashboardWebStringId.AccordionTab.PivotInitialState" | "DashboardWebStringId.AccordionTab.ImageOptions" | "DashboardWebStringId.AccordionTab.Labels" | "DashboardWebStringId.AccordionTab.MapLegend" | "DashboardWebStringId.AccordionTab.WeightedLegend" | "DashboardWebStringId.AccordionTab.Common" | "DashboardWebStringId.AccordionTab.ChartLegend" | "DashboardWebStringId.Grid.AutoFitToContentsColumnWidthMode" | "DashboardWebStringId.Grid.AutoFitToGridColumnWidthMode" | "DashboardWebStringId.Grid.ManualGridColumnWidthMode" | "DashboardStringId.DateTimeIntervalYear" | "DashboardStringId.DateTimeIntervalQuarter" | "DashboardStringId.DateTimeIntervalMonth" | "DashboardStringId.DateTimeIntervalWeek" | "DashboardStringId.DateTimeIntervalDay" | "DashboardStringId.DateTimeIntervalHour" | "DashboardStringId.DateTimeIntervalMinute" | "DashboardStringId.DateTimeIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalYear" | "DashboardStringId.DateTimeGroupIntervalQuarter" | "DashboardStringId.DateTimeGroupIntervalMonth" | "DashboardStringId.DateTimeGroupIntervalDay" | "DashboardStringId.DateTimeGroupIntervalHour" | "DashboardStringId.DateTimeGroupIntervalMinute" | "DashboardStringId.DateTimeGroupIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalDayOfYear" | "DashboardStringId.DateTimeGroupIntervalDayOfWeek" | "DashboardStringId.DateTimeGroupIntervalWeekOfYear" | "DashboardStringId.DateTimeGroupIntervalWeekOfMonth" | "DashboardStringId.DateTimeGroupIntervalMonthYear" | "DashboardStringId.DateTimeGroupIntervalQuarterYear" | "DashboardStringId.DateTimeGroupIntervalWeekYear" | "DashboardStringId.DateTimeGroupIntervalDayMonthYear" | "DashboardStringId.DateTimeGroupIntervalDateHour" | "DashboardStringId.DateTimeGroupIntervalDateHourMinute" | "DashboardStringId.DateTimeGroupIntervalDateHourMinuteSecond" | "DashboardStringId.DateTimeGroupIntervalExactDate" | "DashboardStringId.GroupIntervalNone" | "DashboardWebStringId.Treemap.StripedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SquarifiedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SliceAndDiceLayoutAlgorithm" | "DashboardWebStringId.Treemap.TileLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.TileLabelsNone" | "DashboardWebStringId.Treemap.TileLabelsValue" | "DashboardWebStringId.Treemap.TileLabelsArgument" | "DashboardWebStringId.Treemap.TileTooltipsArgumentAndValue" | "DashboardWebStringId.Treemap.TileTooltipsArgument" | "DashboardWebStringId.Treemap.TileTooltipsValue" | "DashboardWebStringId.Treemap.TileTooltipsNone" | "DashboardWebStringId.Treemap.TopLeftToBottomRightLayoutDirection" | "DashboardWebStringId.Treemap.TopRightToBottomLeftLayoutDirection" | "DashboardWebStringId.Treemap.BottomLeftToTopRightLayoutDirection" | "DashboardWebStringId.Treemap.BottomRightToTopLeftLayoutDirection" | "DashboardWebStringId.Treemap.LayoutDirection" | "DashboardWebStringId.Treemap.GroupLabelsNone" | "DashboardWebStringId.Treemap.GroupLabelsArgument" | "DashboardWebStringId.Treemap.GroupLabelsValue" | "DashboardWebStringId.Treemap.GroupLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.GroupTooltipsNone" | "DashboardWebStringId.Treemap.GroupTooltipsArgument" | "DashboardWebStringId.Treemap.GroupTooltipsValue" | "DashboardWebStringId.Treemap.GroupTooltipsArgumentAndValue" | "DashboardStringId.RankOrderAscending" | "DashboardStringId.RankOrderDescending" | "DashboardStringId.DateTimeFormatYearFormatDefaultCaption" | "DashboardStringId.DateTimeFormatYearFormatFullCaption" | "DashboardStringId.DateTimeFormatYearFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatQuarterFormatDefaultCaption" | "DashboardStringId.DateTimeFormatQuarterFormatNumericCaption" | "DashboardStringId.DateTimeFormatQuarterFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatDefaultCaption" | "DashboardStringId.DateTimeFormatMonthFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatMonthFormatNumericCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatFullCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatNumericCaption" | "DashboardStringId.DateTimeFormatDateFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateFormatLongCaption" | "DashboardStringId.DateTimeFormatDateFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatLongCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption" | "DashboardStringId.ExactDateFormatYear" | "DashboardStringId.ExactDateFormatQuarter" | "DashboardStringId.ExactDateFormatMonth" | "DashboardStringId.ExactDateFormatDay" | "DashboardStringId.ExactDateFormatHour" | "DashboardStringId.ExactDateFormatMinute" | "DashboardStringId.ExactDateFormatSecond" | "DashboardWebStringId.FormatType" | "DashboardWebStringId.TopN.Top" | "DashboardWebStringId.TopN.Bottom" | "DashboardWebStringId.DimensionSortBy" | "DashboardStringId.NumericFormatUnitAutoCaption" | "DashboardStringId.NumericFormatFormatTypeAutoCaption" | "DashboardStringId.NumericFormatFormatTypeGeneralCaption" | "DashboardStringId.NumericFormatFormatTypeNumberCaption" | "DashboardStringId.NumericFormatFormatTypeCurrencyCaption" | "DashboardStringId.NumericFormatFormatTypeScientificCaption" | "DashboardStringId.NumericFormatFormatTypePercentCaption" | "DashboardStringId.NumericFormatUnitOnesCaption" | "DashboardStringId.NumericFormatUnitThousandsCaption" | "DashboardStringId.NumericFormatUnitMillionsCaption" | "DashboardStringId.NumericFormatUnitBillionsCaption" | "DashboardStringId.DeltaValueTypeActualValueCaption" | "DashboardStringId.DeltaValueTypeAbsoluteVariationCaption" | "DashboardStringId.DeltaValueTypePercentVariationCaption" | "DashboardStringId.DeltaValueTypePercentOfTargetCaption" | "DashboardStringId.DeltaValueTypeTargetValueCaption" | "DashboardStringId.DeltaIndicationModeGreaterIsGoodCaption" | "DashboardStringId.DeltaIndicationModeLessIsGoodCaption" | "DashboardStringId.DeltaIndicationModeWarningIfGreaterCaption" | "DashboardStringId.DeltaIndicationModeWarningIfLessCaption" | "DashboardStringId.DeltaIndicationModeNoIndicationCaption" | "DashboardStringId.DeltaThresholdTypeAbsolute" | "DashboardStringId.DeltaThresholdTypePercent" | "DashboardStringId.CommandDimensionGroupChildValues" | "DashboardStringId.SeriesTypeBar" | "DashboardStringId.SeriesTypeStackedBar" | "DashboardStringId.SeriesTypeFullStackedBar" | "DashboardStringId.SeriesTypePoint" | "DashboardStringId.SeriesTypeLine" | "DashboardStringId.SeriesTypeStackedLine" | "DashboardStringId.SeriesTypeFullStackedLine" | "DashboardStringId.SeriesTypeStepLine" | "DashboardStringId.SeriesTypeSpline" | "DashboardStringId.SeriesTypeArea" | "DashboardStringId.SeriesTypeStackedArea" | "DashboardStringId.SeriesTypeFullStackedArea" | "DashboardStringId.SeriesTypeStepArea" | "DashboardStringId.SeriesTypeSplineArea" | "DashboardStringId.SeriesTypeStackedSplineArea" | "DashboardStringId.SeriesTypeFullStackedSplineArea" | "DashboardWebStringId.Chart.ShowLegend" | "DashboardStringId.DefaultNameBoundImageItem" | "DashboardStringId.DefaultNameImageItem" | "DashboardStringId.DefaultNameTextBoxItem" | "DashboardStringId.DefaultNameCardItem" | "DashboardStringId.DefaultNameChartItem" | "DashboardStringId.DefaultNameComboBoxItem" | "DashboardStringId.DefaultNameListBoxItem" | "DashboardStringId.DefaultNameTreeViewItem" | "DashboardStringId.DefaultNameGaugeItem" | "DashboardStringId.DefaultNameGridItem" | "DashboardStringId.GridHyperlinkUriPatternErrorMessage" | "DashboardWebStringId.DefaultNameBubbleMapItem" | "DashboardWebStringId.DefaultNameChoroplethMapItem" | "DashboardWebStringId.DefaultNameGeoPointMapItem" | "DashboardWebStringId.DefaultNamePieMapItem" | "DashboardStringId.DefaultNamePieItem" | "DashboardStringId.DefaultNamePivotItem" | "DashboardStringId.DefaultNameRangeFilterItem" | "DashboardStringId.DefaultNameScatterChartItem" | "DashboardStringId.DefaultNameTreemapItem" | "DashboardStringId.DescriptionMaps" | "DashboardStringId.EntireRangePeriodCaption" | "DashboardStringId.CalculationTypePercentOfTotal" | "DashboardStringId.CalculationTypeDifference" | "DashboardStringId.CalculationTypePercentageDifference" | "DashboardStringId.CalculationTypeRunningTotal" | "DashboardStringId.CalculationTypeMovingCalculation" | "DashboardStringId.CalculationTypeRank" | "DashboardStringId.ColorPaletteIndex" | "DashboardStringId.DifferenceCalculationTargetPrevious" | "DashboardStringId.DifferenceCalculationTargetNext" | "DashboardStringId.DifferenceCalculationTargetFirst" | "DashboardStringId.DifferenceCalculationTargetLast" | "DashboardStringId.SummaryTypeCount" | "DashboardStringId.SummaryTypeSum" | "DashboardStringId.SummaryTypeMin" | "DashboardStringId.SummaryTypeMax" | "DashboardStringId.SummaryTypeAverage" | "DashboardStringId.SummaryTypeStdDev" | "DashboardStringId.SummaryTypeStdDevp" | "DashboardStringId.SummaryTypeVar" | "DashboardStringId.SummaryTypeVarp" | "DashboardStringId.SummaryTypeCountDistinct" | "DashboardStringId.SummaryTypeMedian" | "DashboardStringId.SummaryTypeMode" | "DashboardStringId.RankTypeUnique" | "DashboardStringId.RankTypeCompetition" | "DashboardStringId.RankTypeDense" | "DashboardStringId.RankTypeModified" | "DashboardStringId.RankTypePercentile" | "DashboardStringId.CardCalculationAlongCards" | "DashboardStringId.CardCalculationAlongSparklineArgument" | "DashboardStringId.CardCalculationAlongCardsAndSparklineArgument" | "DashboardStringId.CardCalculationAlongSparklineArgumentAndCards" | "DashboardStringId.ChartCalculationAlongArguments" | "DashboardStringId.ChartCalculationAlongSeries" | "DashboardStringId.ChartCalculationAlongArgumentsAndSeries" | "DashboardStringId.ChartCalculationAlongSeriesAndArguments" | "DashboardStringId.GridCalculationAlongRows" | "DashboardStringId.GridCalculationAlongSparklineArgument" | "DashboardStringId.GridCalculationAlongRowsAndSparklineArgument" | "DashboardStringId.GridCalculationAlongSparklineArgumentAndRows" | "DashboardStringId.PivotCalculationAlongColumns" | "DashboardStringId.PivotCalculationAlongRows" | "DashboardStringId.PivotCalculationAlongColumnsAndRows" | "DashboardStringId.PivotCalculationAlongRowsAndColumns" | "DashboardStringId.PivotCalculationAlongGroupsInColumns" | "DashboardStringId.PivotCalculationAlongGroupsInRows" | "DashboardStringId.PivotCalculationAlongGroupsInColumnsAndRows" | "DashboardStringId.PivotCalculationAlongGroupsInRowsAndColumns" | "DashboardStringId.PieCalculationAlongArguments" | "DashboardStringId.PieCalculationAlongSeries" | "DashboardStringId.PieCalculationAlongArgumentsAndSeries" | "DashboardStringId.PieCalculationAlongSeriesAndArguments" | "DashboardStringId.RangeFilterCalculationAlongArgumentAndSeries" | "DashboardStringId.RangeFilterCalculationAlongSeriesAndArgument" | "DashboardStringId.GaugeCalculationAlongGauges" | "DashboardStringId.ScatterCalculationAlongArguments" | "DashboardStringId.CalculationAlongSpecificDimensions" | "DashboardStringId.CalculatedFieldTypeString" | "DashboardStringId.CalculatedFieldTypeLong" | "DashboardStringId.CalculatedFieldTypeDecimal" | "DashboardStringId.CalculatedFieldTypeBoolean" | "DashboardStringId.CalculatedFieldTypeDateTime" | "DashboardStringId.CalculatedFieldTypeDouble" | "DashboardStringId.CalculatedFieldTypeAuto" | "DashboardStringId.CalculatedFieldTypeObject" | "DashboardStringId.DefaultEFDataSourceName" | "DashboardStringId.DefaultExcelDataSourceName" | "DashboardStringId.DefaultFileExtractDataSourceName" | "DashboardStringId.DefaultObjectDataSourceName" | "DashboardStringId.DefaultOlapDataSourceName" | "DashboardStringId.DefaultSqlDataSourceName" | "DashboardStringId.DefaultJsonDataSourceName" | "DashboardStringId.DefaultXpoDataSourceName" | "DashboardStringId.OlapRaggedHierarchyNoneItemCaption" | "DashboardStringId.FormatRuleApplyToColumn" | "DashboardStringId.SeriesTypeSideBySideRangeBar" | "DashboardStringId.SeriesTypeRangeArea" | "DashboardStringId.SeriesTypeHighLowClose" | "DashboardStringId.SeriesTypeCandleStick" | "DashboardStringId.SeriesTypeStock" | "DashboardWebStringId.StyleSettings" | "DashboardStringId.ParametersFormCalendarTodayButton" | "DashboardStringId.TreemapLabelArgumentTemplate" | "DashboardStringId.TreemapLabelValueTemplate" | "DashboardStringId.SearchNullValuePrompt" | "DashboardStringId.CustomItems" | "DashboardStringId.FormatRuleAllowNegativeAxis" | "DashboardStringId.FormatRuleDrawAxis" | "DashboardStringId.FormatRuleShowBarOnly" | "DashboardStringId.CommandFormatRuleBottomN" | "DashboardStringId.FormatConditionAppearanceNone" | "DashboardStringId.FormatConditionAppearanceCustom" | "DashboardStringId.FormatConditionAppearancePaleRed" | "DashboardStringId.FormatConditionAppearancePaleYellow" | "DashboardStringId.FormatConditionAppearancePaleGreen" | "DashboardStringId.FormatConditionAppearancePaleBlue" | "DashboardStringId.FormatConditionAppearancePalePurple" | "DashboardStringId.FormatConditionAppearancePaleCyan" | "DashboardStringId.FormatConditionAppearancePaleOrange" | "DashboardStringId.FormatConditionAppearancePaleGray" | "DashboardStringId.FormatConditionAppearanceRed" | "DashboardStringId.FormatConditionAppearanceYellow" | "DashboardStringId.FormatConditionAppearanceGreen" | "DashboardStringId.FormatConditionAppearanceBlue" | "DashboardStringId.FormatConditionAppearancePurple" | "DashboardStringId.FormatConditionAppearanceCyan" | "DashboardStringId.FormatConditionAppearanceOrange" | "DashboardStringId.FormatConditionAppearanceGray" | "DashboardStringId.FormatConditionAppearanceGradientRed" | "DashboardStringId.FormatConditionAppearanceGradientYellow" | "DashboardStringId.FormatConditionAppearanceGradientGreen" | "DashboardStringId.FormatConditionAppearanceGradientBlue" | "DashboardStringId.FormatConditionAppearanceGradientPurple" | "DashboardStringId.FormatConditionAppearanceGradientCyan" | "DashboardStringId.FormatConditionAppearanceGradientOrange" | "DashboardStringId.FormatConditionAppearanceGradientTransparent" | "DashboardStringId.FormatConditionAppearanceFontBold" | "DashboardStringId.FormatConditionAppearanceFontItalic" | "DashboardStringId.FormatConditionAppearanceFontUnderline" | "DashboardStringId.FormatConditionAppearanceFontGrayed" | "DashboardStringId.FormatConditionAppearanceFontRed" | "DashboardStringId.FormatConditionAppearanceFontYellow" | "DashboardStringId.FormatConditionAppearanceFontGreen" | "DashboardStringId.FormatConditionAppearanceFontBlue" | "DashboardStringId.IntersectionLevelModeFirst" | "DashboardStringId.IntersectionLevelModeLast" | "DashboardStringId.IntersectionLevelModeAuto" | "DashboardStringId.IntersectionLevelModeAll" | "DashboardStringId.IntersectionLevelModeSpecific" | "DashboardStringId.FormatRuleApplyToRow" | "DashboardStringId.FormatRuleApplyTo" | "DashboardWebStringId.FilterItem.AllowEmptyFilter" | "DashboardStringId.FormatConditionAppearanceFontStrikeout" | "DashboardStringId.FormatConditionAutomaticValueType" | "DashboardStringId.FormatConditionNumberValueType" | "DashboardStringId.FormatConditionPercentValueType" | "DashboardStringId.CommandFormatRuleRangeIcons" | "DashboardStringId.CommandFormatRuleGreaterThan" | "DashboardStringId.CommandFormatRuleGreaterThanOrEqualTo" | "DashboardStringId.CommandFormatRuleLessThan" | "DashboardStringId.CommandFormatRuleLessThanOrEqualTo" | "DashboardStringId.CommandFormatRuleEqualTo" | "DashboardStringId.CommandFormatRuleNotEqualTo" | "DashboardStringId.CommandFormatRuleBetween" | "DashboardStringId.CommandFormatRuleNotBetween" | "DashboardStringId.CommandFormatRuleBetweenOrEqual" | "DashboardStringId.CommandFormatRuleNotBetweenOrEqual" | "DashboardStringId.CommandFormatRuleContains" | "DashboardStringId.ColorAutoAssigned" | "DashboardStringId.CalculationTypeNone" | "DashboardStringId.UndoText" | "DashboardStringId.RedoText" | "DashboardStringId.DashboardCurrencyUseCurrentCurrency" | "DashboardStringId.CommandDimensionSortModeDisplayText" | "DashboardStringId.CommandDimensionSortModeValue" | "DashboardStringId.CommandDimensionSortModeID" | "DashboardStringId.CommandDimensionSortModeKey" | "DashboardWebStringId.Chart.AddPane" | "DashboardStringId.MapShapeNoneAttribute" | "DashboardStringId.DefaultPeriodName" | "DashboardStringId.CardLayoutTemplateStretchedCaption" | "DashboardStringId.CardLayoutTemplateCenteredCaption" | "DashboardStringId.CardLayoutTemplateCompactCaption" | "DashboardStringId.CardLayoutTemplateLightweightCaption" | "DashboardStringId.CardLayoutTemplateCustomCaption" | "DashboardStringId.CardLayoutTemplateNoneCaption" | "DashboardStringId.CardRowDataElementTypeTitleCaption" | "DashboardStringId.CardRowDataElementTypeSubtitleCaption" | "DashboardStringId.CardRowDataElementTypeActualValueCaption" | "DashboardStringId.CardRowDataElementTypeTargetValueCaption" | "DashboardStringId.CardRowDataElementTypeAbsoluteVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentOfTargetCaption" | "DashboardStringId.CardRowDataElementTypeDimensionValueCaption" | "DashboardStringId.CardRowDataElementTypeCardNameCaption" | "DashboardStringId.CardRowDataElementTypeDeltaIndicatorCaption" | "DashboardStringId.CardRowDataElementTypeSparklineCaption" | "DashboardStringId.FormatRuleApplyToAllElements" | "DashboardWebStringId.Pie.LabelPosition" | "DashboardWebStringId.Pie.LabelPositionOutside" | "DashboardWebStringId.Pie.LabelPositionInside" | "DashboardStringId.IncludeExportDashboardState" | "DashboardStringId.PointLabelContentTypeArgument" | "DashboardStringId.PointLabelContentTypeSeriesName" | "DashboardStringId.PointLabelContentTypeValue" | "DashboardStringId.PointLabelContentTypePercent" | "DashboardWebStringId.DashboardMenu" | "DashboardWebStringId.DashboardMenuNew" | "DashboardWebStringId.DashboardMenuOpen" | "DashboardWebStringId.DashboardMenuSave" | "DashboardWebStringId.DashboardMenuCurrency" | "DashboardWebStringId.DashboardMenuDataSources" | "DashboardWebStringId.DashboardMenuColorScheme" | "DashboardWebStringId.DashboardMenuNewDashboardCreate" | "DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder" | "DashboardWebStringId.Binding.DefaultEmptyPlaceholder" | "DashboardWebStringId.Binding.DefaultSelectedPlaceholder" | "DashboardWebStringId.Binding.DataFiltering" | "DashboardWebStringId.Binding.Argument" | "DashboardWebStringId.Binding.Attribute" | "DashboardWebStringId.Binding.Sparkline" | "DashboardWebStringId.Binding.Columns" | "DashboardWebStringId.Binding.TooltipDimensions" | "DashboardWebStringId.Binding.TooltipMeasures" | "DashboardWebStringId.Binding.HiddenDimensions" | "DashboardWebStringId.Binding.HiddenMeasures" | "DashboardWebStringId.Binding.AddDimension" | "DashboardWebStringId.Binding.AddMeasure" | "DashboardWebStringId.Binding.AddColumn" | "DashboardWebStringId.Binding.AddRow" | "DashboardWebStringId.Binding.AddValue" | "DashboardWebStringId.Binding.AddSeries" | "DashboardWebStringId.Binding.SetLatitude" | "DashboardWebStringId.Binding.SetLongitude" | "DashboardWebStringId.Binding.SetArgument" | "DashboardWebStringId.Binding.AddArgument" | "DashboardWebStringId.Binding.SetWeight" | "DashboardWebStringId.Binding.SetColor" | "DashboardWebStringId.Binding.SetAttribute" | "DashboardWebStringId.Binding.SetValue" | "DashboardWebStringId.Binding.XAxis" | "DashboardWebStringId.Binding.YAxis" | "DashboardWebStringId.Binding.ConfigureDimension" | "DashboardWebStringId.Binding.ConfigureMeasure" | "DashboardWebStringId.Binding.ConfigureSeries" | "DashboardWebStringId.Binding.ConfigureArgument" | "DashboardWebStringId.Binding.ConfigureValue" | "DashboardWebStringId.Binding.ConfigureAttribute" | "DashboardWebStringId.Binding.ConfigureLatitude" | "DashboardWebStringId.Binding.ConfigureLongitude" | "DashboardWebStringId.Binding.ConfigureColumn" | "DashboardWebStringId.Binding.ConfigureRow" | "DashboardWebStringId.Binding.ConfigureWeight" | "DashboardWebStringId.Binding.ConfigureColor" | "DashboardWebStringId.Binding.ShowAll" | "DashboardWebStringId.ColorScheme.Color" | "DashboardWebStringId.ColorScheme.Colors" | "DashboardWebStringId.Parameters.ParameterList" | "DashboardWebStringId.Parameters.AddParameter" | "DashboardWebStringId.Parameters.AddParameter.Tooltip" | "DashboardWebStringId.Parameters.NoSelectedParameter" | "DashboardWebStringId.Parameters.Reorder" | "DashboardWebStringId.Parameters.Done" | "DashboardWebStringId.Currency.Currency" | "DashboardWebStringId.Currency.CurrencyCulture" | "DashboardWebStringId.Currency.DefaultCurrencyWarning" | "DashboardWebStringId.Preview" | "DashboardWebStringId.Add" | "DashboardWebStringId.DataSources.UsedDataSources" | "DashboardWebStringId.DataSources.DataItems" | "DashboardWebStringId.DataSources.AddQuery" | "DashboardWebStringId.DataSources.AddCalculatedField" | "DashboardWebStringId.DataSources.AddDataSource" | "DashboardWebStringId.DataSources.NoUsedDataSources" | "DashboardWebStringId.DataSources.NoAvailableDataSources" | "DashboardWebStringId.DataSources.ChooseDataSource" | "DashboardWebStringId.DataSources.CreateDataSource" | "DashboardWebStringId.DataSources.CreateNewDataSource" | "DashboardWebStringId.DataSources.CreateDataSource.Tooltip" | "DashboardWebStringId.DataSources.EditCalculatedField" | "DashboardWebStringId.DataSources.CalculatedField.Name" | "DashboardWebStringId.DataSources.CalculatedField.FieldType" | "DashboardWebStringId.DataSources.CalculatedField.UniqueNameError" | "DashboardWebStringId.DataSources.CalculatedField.Corrupted" | "DashboardWebStringId.DataSources.Edit" | "DashboardStringId.MessageCollectionTypesNotSupported" | "DashboardWebStringId.New.DashboardName" | "DashboardWebStringId.Bindings" | "DashboardWebStringId.Interactivity" | "DashboardWebStringId.Options" | "DashboardWebStringId.Remove" | "DashboardWebStringId.MasterFilterMode" | "DashboardWebStringId.Title.Text" | "DashboardWebStringId.Title.Visible" | "DashboardWebStringId.Title.IncludeMasterFilter" | "DashboardWebStringId.Title.Aligment" | "DashboardWebStringId.Title.Image" | "DashboardWebStringId.DataSources.Cancel" | "DashboardWebStringId.DataSources.IncludeToTheDashboard" | "DashboardWebStringId.DataSources.AvailableDataSourcesError" | "DashboardWebStringId.DataSources.DashboardDataSourceWizard" | "DashboardWebStringId.Viewer" | "DashboardWebStringId.Loading" | "DashboardWebStringId.ClickHereInvitation" | "DashboardWebStringId.BindDataInvitation" | "DashboardWebStringId.AddItemInvitation" | "DashboardWebStringId.Parameters.Values" | "DashboardWebStringId.Binding.Cards" | "DashboardWebStringId.Binding.AddCard" | "DashboardWebStringId.Binding.ConfigureCard" | "DashboardWebStringId.Binding.AddValues" | "DashboardWebStringId.Binding.ConfigureValues" | "DashboardWebStringId.Binding.Maps" | "DashboardWebStringId.Binding.AddMap" | "DashboardWebStringId.Binding.ConfigureMap" | "DashboardWebStringId.Binding.Gauges" | "DashboardWebStringId.Binding.AddGauge" | "DashboardWebStringId.Binding.ConfigureGauge" | "DashboardWebStringId.InteractivityOptions" | "DashboardWebStringId.Binding.Values" | "DashboardWebStringId.Binding.RemovePane" | "DashboardWebStringId.ClickToSetFilterCriteria" | "DashboardWebStringId.DataSources.OK" | "DashboardWebStringId.DataSources.Save" | "DashboardWebStringId.Cards.ArrangementMode" | "DashboardWebStringId.Cards.ArrangementMode.Auto" | "DashboardWebStringId.Cards.ArrangementMode.FixedRows" | "DashboardWebStringId.Cards.ArrangementMode.FixedColumns" | "DashboardWebStringId.Cards.LineCount" | "DashboardWebStringId.ConditionalFormatting" | "DashboardWebStringId.CollectionEditor.NoItems" | "DashboardWebStringId.CollectionEditor.Totals.NoItems" | "DashboardWebStringId.CollectionEditor.Parameters.NoItems" | "DashboardWebStringId.PivotGrid.AutoExpandColumnGroups" | "DashboardWebStringId.PivotGrid.AutoExpandRowGroups" | "DashboardWebStringId.PivotGrid.ColumnGrandTotals" | "DashboardWebStringId.PivotGrid.RowGrandTotals" | "DashboardWebStringId.PivotGrid.ColumnTotals" | "DashboardWebStringId.PivotGrid.RowTotals" | "DashboardWebStringId.PivotGrid.ValuesPosition" | "DashboardWebStringId.PivotGrid.ValuesPositionColumns" | "DashboardWebStringId.PivotGrid.ValuesPositionRows" | "DashboardWebStringId.PivotGrid.RowTotalsPosition" | "DashboardWebStringId.PivotGrid.RowTotalsPositionBottom" | "DashboardWebStringId.PivotGrid.RowTotalsPositionTop" | "DashboardWebStringId.PivotGrid.ColumnTotalsPosition" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionFar" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionNear" | "DashboardWebStringId.PivotGrid.LayoutType" | "DashboardWebStringId.PivotGrid.LayoutTypeCompact" | "DashboardWebStringId.PivotGrid.LayoutTypeTabular" | "DashboardWebStringId.Options.Caption" | "DashboardWebStringId.InteractivityOptions.IsMasterFilter" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.None" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Single" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Multiple" | "DashboardWebStringId.InteractivityOptions.TargetDimensions" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Arguments" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Series" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Points" | "DashboardWebStringId.ColoringOptions" | "DashboardWebStringId.DataSources.Filter" | "DashboardWebStringId.Chart.Rotated" | "DashboardWebStringId.Chart.Panes" | "DashboardWebStringId.Chart.Legend" | "DashboardWebStringId.Chart.AxisX" | "DashboardWebStringId.Chart.AxisY" | "DashboardWebStringId.Chart.AxisYSecondary" | "DashboardWebStringId.Chart.PointLabelOptions" | "DashboardWebStringId.Chart.AxisXMeasure" | "DashboardWebStringId.Chart.AxisYMeasure" | "DashboardWebStringId.Chart.Weight" | "DashboardWebStringId.Chart.Content" | "DashboardWebStringId.Chart.ArgumentAndWeight" | "DashboardWebStringId.Chart.ArgumentAndValues" | "DashboardWebStringId.Chart.Reverse" | "DashboardWebStringId.Chart.Visible" | "DashboardWebStringId.Chart.Title" | "DashboardWebStringId.Chart.TitleText" | "DashboardWebStringId.Chart.EnableZooming" | "DashboardWebStringId.Chart.LimitVisiblePoints" | "DashboardWebStringId.Chart.VisiblePointsCount" | "DashboardWebStringId.Chart.AlwaysShowZeroLevel" | "DashboardWebStringId.Chart.GridLines" | "DashboardWebStringId.Chart.LogarithmicScale" | "DashboardWebStringId.Chart.LogarithmicScaleBase" | "DashboardWebStringId.Chart.LogarithmicScaleBase2" | "DashboardWebStringId.Chart.LogarithmicScaleBase5" | "DashboardWebStringId.Chart.LogarithmicScaleBase10" | "DashboardWebStringId.Chart.Position" | "DashboardWebStringId.Chart.IsInsideOfDiagram" | "DashboardWebStringId.Chart.PrimaryAxisY" | "DashboardWebStringId.Chart.SecondaryAxisY" | "DashboardWebStringId.Chart.Name" | "DashboardWebStringId.Chart.PlotOnSecondaryAxis" | "DashboardWebStringId.Chart.IgnoreEmptyPoints" | "DashboardWebStringId.Chart.ShowPointMarkers" | "DashboardWebStringId.Chart.Value" | "DashboardWebStringId.Chart.ShowZeroValues" | "DashboardWebStringId.Chart.OverlappingMode" | "DashboardWebStringId.Chart.Orientation" | "DashboardWebStringId.Chart.ShowPointLablels" | "DashboardWebStringId.Chart.TooltipContent" | "DashboardWebStringId.Chart.LabelContent" | "DashboardWebStringId.Card.SparklineOptions" | "DashboardWebStringId.Card.SparklineVisible" | "DashboardWebStringId.Chart.Position.TopLeftVertical" | "DashboardWebStringId.Chart.Position.TopLeftHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterHorizontal" | "DashboardWebStringId.Chart.Position.TopRightVertical" | "DashboardWebStringId.Chart.Position.TopRightHorizontal" | "DashboardWebStringId.Chart.Position.BottomLeftVertical" | "DashboardWebStringId.Chart.Position.BottomLeftHorizontal" | "DashboardWebStringId.Chart.Position.BottomCenterHorizontal" | "DashboardWebStringId.Chart.Position.BottomRightVertical" | "DashboardWebStringId.Chart.Position.BottomRightHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterVertical" | "DashboardWebStringId.Chart.Position.BottomCenterVertical" | "DashboardWebStringId.FilterItem.Type" | "DashboardWebStringId.FilterItem.Type.Standard" | "DashboardWebStringId.FilterItem.Type.Checked" | "DashboardWebStringId.FilterItem.Type.Radio" | "DashboardWebStringId.FilterItem.ShowAllValue" | "DashboardWebStringId.FilterItem.EnableSearch" | "DashboardWebStringId.Gauge.Min" | "DashboardWebStringId.Gauge.Max" | "DashboardWebStringId.Gauge.ScaleOptions" | "DashboardWebStringId.Gauge.Type" | "DashboardWebStringId.Gauge.Type.FullQuarterGauge" | "DashboardWebStringId.Gauge.Type.HalfCircular" | "DashboardWebStringId.Gauge.Type.LeftQuarterCircular" | "DashboardWebStringId.Gauge.Type.RightQuarterCircular" | "DashboardWebStringId.Gauge.Type.ThreeFourthCircular" | "DashboardWebStringId.Gauge.Type.LinearHorizontal" | "DashboardWebStringId.Gauge.Type.LinearVertical" | "DashboardWebStringId.Gauge.Captions" | "DashboardWebStringId.Gauge.Scale.Custom" | "DashboardWebStringId.Gauge.Scale.Auto" | "DashboardWebStringId.Grid.ColumnType" | "DashboardWebStringId.Grid.DisplayMode" | "DashboardWebStringId.Grid.DisplayMode.Value" | "DashboardWebStringId.Grid.DisplayMode.Bar" | "DashboardWebStringId.Grid.DisplayMode.Text" | "DashboardWebStringId.Grid.DisplayMode.Image" | "DashboardWebStringId.Grid.FixedWidth" | "DashboardWebStringId.Grid.WidthType" | "DashboardWebStringId.Grid.WidthType.Weight" | "DashboardWebStringId.Grid.WidthType.FitToContent" | "DashboardWebStringId.Grid.DeltaOptions" | "DashboardWebStringId.Grid.ShowStartEndValues" | "DashboardWebStringId.Grid.TotalType" | "DashboardWebStringId.Grid.Dimension" | "DashboardWebStringId.Grid.Measure" | "DashboardWebStringId.Grid.Delta" | "DashboardWebStringId.Grid.Sparkline" | "DashboardWebStringId.Grid.Hyperlink" | "DashboardWebStringId.Grid.Options" | "DashboardWebStringId.Map.ShapeFileLoaded" | "DashboardWebStringId.Map.AttributeFileLoaded" | "DashboardWebStringId.Map.ValueMap" | "DashboardWebStringId.Map.DeltaMap" | "DashboardWebStringId.Map.TooltipCaption" | "DashboardWebStringId.Map.TooltipActualValueCaption" | "DashboardWebStringId.Map.TooltipDeltaCaption" | "DashboardWebStringId.Map.CustomMapOptions" | "DashboardWebStringId.Map.CustomMapOptionsSource" | "DashboardWebStringId.Map.CustomMapOptionsUrl" | "DashboardWebStringId.Map.CustomMapOptionsFile" | "DashboardWebStringId.Map.CustomMapUrl" | "DashboardWebStringId.Map.CustomMapFile" | "DashboardWebStringId.Map.CustomAttributeFile" | "DashboardWebStringId.Map.AttributeDimension" | "DashboardWebStringId.Map.IncludeSummaryValueToShapeTitle" | "DashboardWebStringId.Map.AttributeName" | "DashboardWebStringId.Map.TooltipAttribute" | "DashboardWebStringId.Map.TooltipDimensions" | "DashboardWebStringId.Map.Area.Custom" | "DashboardWebStringId.Map.Area.WorldCountries" | "DashboardWebStringId.Map.Area.Europe" | "DashboardWebStringId.Map.Area.Asia" | "DashboardWebStringId.Map.Area.NorthAmerica" | "DashboardWebStringId.Map.Area.SouthAmerica" | "DashboardWebStringId.Map.Area.Africa" | "DashboardWebStringId.Map.Area.USA" | "DashboardWebStringId.Map.Area.Canada" | "DashboardWebStringId.Map.Viewport" | "DashboardWebStringId.Map.ShapeTitleAttribute" | "DashboardWebStringId.Map.UseBindingAttribute" | "DashboardWebStringId.Map.WeightedLegendType" | "DashboardWebStringId.Map.WeightedLegendType.Linear" | "DashboardWebStringId.Map.WeightedLegendType.Nested" | "DashboardWebStringId.Map.Orientation.Vertical" | "DashboardWebStringId.Map.Orientation.Horizontal" | "DashboardWebStringId.Map.Position.TopLeft" | "DashboardWebStringId.Map.Position.TopCenter" | "DashboardWebStringId.Map.Position.TopRight" | "DashboardWebStringId.Map.Position.BottomLeft" | "DashboardWebStringId.Map.Position.BottomCenter" | "DashboardWebStringId.Map.Position.BottomRight" | "DashboardWebStringId.Map.Viewport.TopLatitude" | "DashboardWebStringId.Map.Viewport.LeftLongitude" | "DashboardWebStringId.Map.Viewport.RightLongitude" | "DashboardWebStringId.Map.Viewport.BottomLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLongitude" | "DashboardWebStringId.Map.Viewport.CreateViewerPaddings" | "DashboardWebStringId.Map.ShowLegend" | "DashboardWebStringId.Pie.Type" | "DashboardWebStringId.Pie" | "DashboardWebStringId.Pie.Donut" | "DashboardWebStringId.Pie.LabelContentType.None" | "DashboardWebStringId.Pie.LabelContentType.Argument" | "DashboardWebStringId.Pie.LabelContentType.Percent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndPercent" | "DashboardWebStringId.Pie.LabelContentType.Value" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndValue" | "DashboardWebStringId.Pie.LabelContentType.ValueAndPercent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentValueAndPercent" | "DashboardWebStringId.Image.BindingMode" | "DashboardWebStringId.Image.BindingMode.BinaryArray" | "DashboardWebStringId.Image.BindingMode.Uri" | "DashboardWebStringId.RangeFilter.UriPattern" | "DashboardWebStringId.Image.SizeMode.Clip" | "DashboardWebStringId.Image.SizeMode.Stretch" | "DashboardWebStringId.Image.SizeMode.Zoom" | "DashboardWebStringId.Image.SizeMode.Squeeze" | "DashboardWebStringId.Image.HorizontalAlignment" | "DashboardWebStringId.Image.VerticalAlignment" | "DashboardWebStringId.Image.Alignment.Left" | "DashboardWebStringId.Image.Alignment.Center" | "DashboardWebStringId.Image.Alignment.Right" | "DashboardWebStringId.Image.Alignment.Top" | "DashboardWebStringId.Image.Alignment.Bottom" | "DashboardWebStringId.SeriesItem.SeriesDimensions" | "DashboardWebStringId.TextBox.Text" | "DashboardWebStringId.Chart.Orientation.Default" | "DashboardWebStringId.Chart.Orientation.RotateRight" | "DashboardWebStringId.Chart.Orientation.RotateLeft" | "DashboardWebStringId.Chart.OverlappingMode.Hide" | "DashboardWebStringId.Chart.OverlappingMode.None" | "DashboardWebStringId.Chart.Position.Outside" | "DashboardWebStringId.Chart.Position.Inside" | "DashboardWebStringId.Chart.SeriesType.Weighted" | "DashboardWebStringId.Coloring.MeasuresColoringMode" | "DashboardWebStringId.Coloring.Global" | "DashboardWebStringId.Coloring.Local" | "DashboardWebStringId.Delta.ValueType" | "DashboardWebStringId.Delta.ResultIndication" | "DashboardWebStringId.Delta.ThresholdType" | "DashboardWebStringId.Delta.ThresholdValue" | "DashboardWebStringId.Sparkline.ViewType" | "DashboardWebStringId.Sparkline.HighlightMinMaxPoints" | "DashboardWebStringId.Sparkline.HighlightStartEndPoints" | "DashboardWebStringId.Title.Aligment.Left" | "DashboardWebStringId.Title.Aligment.Center" | "DashboardWebStringId.Parameters.LookUpSettingsType.NoLookUp" | "DashboardWebStringId.Parameters.LookUpSettingsType.StaticList" | "DashboardWebStringId.Parameters.LookUpSettingsType.DynamicList" | "DashboardWebStringId.Parameters.LookUpSettingsType" | "DashboardWebStringId.Parameters.DefaultValue" | "DashboardWebStringId.DataItem" | "DashboardWebStringId.DataItem.Precision" | "DashboardWebStringId.DataItem.IncludeGroupSeparator" | "DashboardWebStringId.DataItem.ShowValues" | "DashboardWebStringId.DataItem.ShowTotals" | "DashboardWebStringId.DataItem.ShowGrandTotals" | "DashboardWebStringId.Dialog.ConfirmSaving" | "DashboardWebStringId.Dimension.GroupInterval" | "DashboardWebStringId.Dimension.SortMode" | "DashboardWebStringId.Dialog.ArgumentMode" | "DashboardWebStringId.Calculations" | "DashboardWebStringId.Calculations.Expression" | "DashboardWebStringId.Calculations.DifferenceCalculation" | "DashboardWebStringId.Calculations.Moving" | "DashboardWebStringId.Calculations.RunningTotal" | "DashboardWebStringId.Calculations.PercentOfTotal" | "DashboardWebStringId.Calculations.Rank" | "DashboardWebStringId.Calculations.DefinitionMode" | "DashboardWebStringId.Calculations.WindowDefinition" | "DashboardWebStringId.Calculations.WindowDefinitionModeSpecific" | "DashboardWebStringId.Calculations.WindowDefinitionModePredefined" | "DashboardWebStringId.Calculations.DifferenceType" | "DashboardWebStringId.TreemapLayoutAlgorithm" | "DashboardWebStringId.TilesLabelContentType" | "DashboardWebStringId.TilesTooltipContentType" | "DashboardWebStringId.GroupsLabelContentType" | "DashboardWebStringId.GroupsTooltipContentType" | "DashboardWebStringId.ShowOthersValue" | "DashboardWebStringId.TopNEnabled" | "DashboardWebStringId.Parameters.StaticListLookUpSettings" | "DashboardWebStringId.Parameters.DynamicListLookUpSettings" | "DashboardWebStringId.ConvertTo" | "DashboardWebStringId.Duplicate" | "DashboardWebStringId.DataSourceWizard" | "DashboardWebStringId.RangeFilter.CustomPeriods" | "DashboardWebStringId.RangeFilter.StartMode" | "DashboardWebStringId.RangeFilter.EndMode" | "DashboardWebStringId.RangeFilter.StartIntervalAndOffset" | "DashboardWebStringId.RangeFilter.EndIntervalAndOffset" | "DashboardWebStringId.RangeFilter.StartDate" | "DashboardWebStringId.RangeFilter.EndDate" | "DashboardWebStringId.RangeFilter.None" | "DashboardWebStringId.RangeFilter.Fixed" | "DashboardWebStringId.RangeFilter.Flow" | "DashboardWebStringId.Tabs.Binding" | "DashboardWebStringId.Tabs.DataShaping" | "DashboardWebStringId.Tabs.Format" | "DashboardWebStringId.Calculations.Types.Moving" | "DashboardWebStringId.Parameters.SortByMember" | "DashboardWebStringId.Parameters.LookUpSettingsTypeCaption" | "DashboardWebStringId.Dashboard.Items" | "DashboardWebStringId.Dashboard.Groups" | "DashboardWebStringId.Dashboard.LayoutItems" | "DashboardWebStringId.Dashboard.ComponentName" | "DashboardWebStringId.ButtonConfirm" | "DashboardWebStringId.Colorization.GroupInterval" | "DashboardWebStringId.ButtonOn" | "DashboardWebStringId.ButtonOff" | "DashboardWebStringId.ButtonYes" | "DashboardWebStringId.ButtonNo" | "DashboardWebStringId.ButtonDiscrete" | "DashboardWebStringId.ButtonContinuous" | "DashboardWebStringId.ButtonVisible" | "DashboardWebStringId.ButtonHidden" | "DashboardWebStringId.Calculations.PreviousValuesCount" | "DashboardWebStringId.Calculations.NextValuesCount" | "DashboardWebStringId.Calculations.RankType" | "DashboardWebStringId.Calculations.RankOrder" | "DashboardWebStringId.TileOptions" | "DashboardWebStringId.MapLockNavigationLocked" | "DashboardWebStringId.MapLockNavigationUnlocked" | "DashboardWebStringId.ConditionalFormatting.BarOptions" | "DashboardWebStringId.ConditionalFormatting.CalculatedBy" | "DashboardWebStringId.ConditionalFormatting.IconType" | "DashboardWebStringId.ConditionalFormatting.PredefinedColor" | "DashboardWebStringId.ConditionalFormatting.AppearanceType" | "DashboardWebStringId.ConditionalFormatting.FontStyle" | "DashboardWebStringId.ConditionalFormatting.FontFamily" | "DashboardWebStringId.ConditionalFormatting.FontRegular" | "DashboardWebStringId.ConditionalFormatting.IconType.None" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowSideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGraySideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDash" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedTriangleDown" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenTriangleUp" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingHalfGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1QuarterGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1Bar" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1FilledBox" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTriangle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedDiamond" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedFlag" | "DashboardWebStringId.ConditionalFormatting.IntersectionColumnDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionRowDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionLevelMode" | "DashboardWebStringId.ConditionalFormatting.GradientRangeBar" | "DashboardWebStringId.ConditionalFormatting.RangeGradient" | "DashboardWebStringId.ConditionalFormatting.SegmentNumber" | "DashboardWebStringId.ConditionalFormatting.ValueComparison" | "DashboardWebStringId.ConditionalFormatting.Ranges" | "DashboardWebStringId.ConditionalFormatting.AverageType" | "DashboardWebStringId.ConditionalFormatting.Above" | "DashboardWebStringId.ConditionalFormatting.AboveOrEqual" | "DashboardWebStringId.ConditionalFormatting.Below" | "DashboardWebStringId.ConditionalFormatting.BelowOrEqual" | "DashboardWebStringId.ConditionalFormatting.StyleSettingsType" | "DashboardWebStringId.ConditionalFormatting.Positive" | "DashboardWebStringId.ConditionalFormatting.Negative" | "DashboardWebStringId.ConditionalFormatting.MinimumType" | "DashboardWebStringId.ConditionalFormatting.MaximumType" | "DashboardWebStringId.ConditionalFormatting.DateType" | "DashboardWebStringId.ConditionalFormatting.DateType.None" | "DashboardWebStringId.ConditionalFormatting.DateType.SpecificDate" | "DashboardWebStringId.ConditionalFormatting.DateType.BeyondThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.NextWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.Tomorrow" | "DashboardWebStringId.ConditionalFormatting.DateType.Today" | "DashboardWebStringId.ConditionalFormatting.DateType.Yesterday" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.LastWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.PriorThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.Empty" | "DashboardWebStringId.ConditionalFormatting.DateType.User" | "DashboardWebStringId.ConditionalFormatting.DateType.Beyond" | "DashboardWebStringId.ConditionalFormatting.DateType.ThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.ThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAfter1" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAfter2" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo1" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo2" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo3" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo4" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo5" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo6" | "DashboardWebStringId.ConditionalFormatting.DateType.Earlier" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeDataItem" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeCard" | "DashboardWebStringId.Colorization.NoSelectedSchema" | "DashboardWebStringId.Colorization.ColorSchemes" | "DashboardWebStringId.LayoutHasBeenChangedDialogMessage" | "DashboardWebStringId.SaveConfirmationDialogMessage" | "DashboardWebStringId.SaveChangesDialogMessage" | "DashboardWebStringId.Dialog.ChangeDataMemberMessage" | "DashboardWebStringId.Dialog.RemovedDataItemsMessage" | "DashboardWebStringId.Dialog.ConfirmChanges" | "DashboardWebStringId.Dialog.Save" | "DashboardWebStringId.Dialog.DoNotSave" | "DashboardWebStringId.Dialog.ButtonYes" | "DashboardWebStringId.Dialog.ButtonDontChange" | "DashboardWebStringId.Colorization.ColorSchemeType" | "DashboardWebStringId.Colorization.MeasureNames" | "DashboardWebStringId.Colorization.AddColor" | "DashboardWebStringId.Colorization.ValidationSelectMeasure" | "DashboardWebStringId.ColoringModeAuto" | "DashboardWebStringId.ColoringModeOff" | "DashboardWebStringId.ColoringModeOn" | "DashboardWebStringId.ColorScheme.Empty" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButton" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip" | "DashboardWebStringId.ConditionalFormatting.Miscellaneous" | "DashboardWebStringId.Dashboards" | "DashboardWebStringId.EditInDesigner" | "DashboardWebStringId.NoDashboards" | "DashboardWebStringId.AddNewDashboard" | "DashboardWebStringId.NewDashboard" | "DashboardWebStringId.Binding.Searching" | "DashboardWebStringId.Binding.EmptySearchResult" | "DashboardWebStringId.Errors.AttemptToLoadData" | "DashboardWebStringId.ConditionType" | "DashboardWebStringId.ConditionalFormatting.UnsupportedDataType" | "DashboardWebStringId.FormatRule" | "DashboardWebStringId.Notification.DashboardSaving" | "DashboardWebStringId.Notification.DashboardSaved" | "DashboardWebStringId.Notification.DashboardCanNotBeSaved" | "DashboardWebStringId.Notification.DashboardSavingIsNotAvailable" | "DashboardWebStringId.Notification.AttemptToLoadDashboards" | "DashboardWebStringId.Notification.DashboardLoading" | "DashboardWebStringId.Notification.AttemptToLoadDashboard" | "DashboardWebStringId.Notification.AttemptToConnectionStrings" | "DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode" | "DashboardWebStringId.Notification.AttemptToLoadParameterValues" | "DashboardWebStringId.Notification.AttemptToGetUnderlyingData" | "DashboardWebStringId.Notification.AttemptToConvertItemToType" | "DashboardWebStringId.Notification.AttemptToLoadDimensionUniqueValues" | "DashboardWebStringId.Notification.AttemptToLoadFieldListForDataSource" | "DashboardWebStringId.Notification.AttemptToGetColorScheme" | "DashboardWebStringId.Notification.NewDashboardCannotBeCreated" | "DashboardWebStringId.Notification.ErrorHasOccuredOn" | "DashboardWebStringId.Notification.UnsupportedDataSourceType" | "DashboardWebStringId.LimitVisibleData.DisplayAllDataTooltip" | "DashboardWebStringId.LimitVisibleData.IncreasePerformanceTooltip" | "DashboardWebStringId.ConditionalFormatting.Condition" | "DashboardWebStringId.CardLayout.MinWidth" | "DashboardWebStringId.CardLayout.MaxWidth" | "DashboardWebStringId.CardLayout.Editor.CardLayout" | "DashboardWebStringId.CardLayout.Editor.FormatOptions" | "DashboardWebStringId.CardLayout.LayoutOptions" | "DashboardWebStringId.CardLayout.ResetTemplate" | "DashboardWebStringId.CardLayout.ApplyToAllCards" | "DashboardWebStringId.Binding.ValuesPattern" | "DashboardWebStringId.Parameters.ParameterNameShouldBeUnique" | "DashboardWebStringId.Title.ImageEmbedded" | "DashboardWebStringId.Title.ImageLinked" | "DashboardWebStringId.Title.ImageNone" | "DashboardWebStringId.RangeFilter.SetDefaultCustomPeriod" | "DashboardWebStringId.RangeFilter.ClearDefaultCustomPeriod" | "DashboardWebStringId.MobileLayout.Back" | "DashboardWebStringId.MobileLayout.SwitchToViewer" | "DashboardWebStringId.Search" | "DashboardStringId.DefaultNameTabPage" | "DashboardStringId.DefaultNameChartPane" | "DashboardStringId.NewCalculatedFieldNamePrefix" | "DashboardStringId.NewParameterNamePrefix" | "AnalyticsCoreStringId.Parameter_Type_String" | "AnalyticsCoreStringId.Parameter_Type_DateTime" | "AnalyticsCoreStringId.Parameter_Type_Int16" | "AnalyticsCoreStringId.Parameter_Type_Int32" | "AnalyticsCoreStringId.Parameter_Type_Int64" | "AnalyticsCoreStringId.Parameter_Type_Float" | "AnalyticsCoreStringId.Parameter_Type_Double" | "AnalyticsCoreStringId.Parameter_Type_Decimal" | "AnalyticsCoreStringId.Parameter_Type_Boolean" | "AnalyticsCoreStringId.Parameter_Type_Guid" | "AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption" | "DataAccessUIStringId.FiltersView" | "DashboardStringId.SeriesTypeGroupArea" | "DashboardStringId.SeriesTypeGroupBar" | "DashboardStringId.SeriesTypeGroupBubble" | "DashboardStringId.SeriesTypeGroupFinancial" | "DashboardStringId.SeriesTypeGroupPointLine" | "DashboardStringId.SeriesTypeGroupRange" | "DashboardStringId.FunctionCategoryWindow" | "DashboardStringId.FunctionCategoryAggregate" | "DashboardStringId.FunctionCategoryAdvanced" | "DashboardStringId.FunctionDescriptionWindowAvg" | "DashboardStringId.FunctionDescriptionRunningMin" | "DashboardStringId.FunctionDescriptionTotal" | "DashboardStringId.FunctionDescriptionRankCompetition" | "DashboardStringId.FunctionDescriptionLookup" | "DashboardStringId.FunctionDescriptionRunningCount" | "DashboardStringId.FunctionDescriptionWindowMax" | "DashboardStringId.FunctionDescriptionVarp" | "DashboardStringId.FunctionDescriptionRunningAvg" | "DashboardStringId.FunctionDescriptionFirst" | "DashboardStringId.FunctionDescriptionWindowMin" | "DashboardStringId.FunctionDescriptionWindowStdDev" | "DashboardStringId.FunctionDescriptionLast" | "DashboardStringId.FunctionDescriptionWindowCount" | "DashboardStringId.FunctionDescriptionCountDistinct" | "DashboardStringId.FunctionDescriptionIndex" | "DashboardStringId.FunctionDescriptionWindowStdDevp" | "DashboardStringId.FunctionDescriptionWindowMode" | "DashboardStringId.FunctionDescriptionRunningMax" | "DashboardStringId.FunctionDescriptionRankPercentile" | "DashboardStringId.FunctionDescriptionRankDense" | "DashboardStringId.FunctionDescriptionWindowSum" | "DashboardStringId.FunctionDescriptionWindowCountDistinct" | "DashboardStringId.FunctionDescriptionStdDevp" | "DashboardStringId.FunctionDescriptionSize" | "DashboardStringId.FunctionDescriptionMedian" | "DashboardStringId.FunctionDescriptionRankModified" | "DashboardStringId.FunctionDescriptionWindowMedian" | "DashboardStringId.FunctionDescriptionRunningSum" | "DashboardStringId.FunctionDescriptionWindowVarp" | "DashboardStringId.FunctionDescriptionWindowVar" | "DashboardStringId.FunctionDescriptionStdDev" | "DashboardStringId.FunctionDescriptionRankUnique" | "DashboardStringId.FunctionDescriptionVar" | "DashboardStringId.FunctionDescriptionAggr" | "DashboardStringId.FunctionDescriptionAggrJoinRule" | "DashboardStringId.FunctionDescriptionWindowDefinition" | "DashboardStringId.FunctionDescriptionWindowDefinitionPartitionBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderAsc" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderDesc" | "DashboardStringId.AggregateExFunctionDescriptionCountNotNull" | "DashboardStringId.AggregateExFunctionDescriptionMode" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHour" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinute" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinuteSecond" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateMonthYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear2" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateQuarterYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetQuarter" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfMonth" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime3" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime4" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime5" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime6" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToBoolean" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToDateTime" | "DashboardStringId.SparklineIndicationModeLine" | "DashboardStringId.SparklineIndicationModeArea" | "DashboardStringId.SparklineIndicationModeBar" | "DashboardStringId.SparklineIndicationModeWinLoss" | "DashboardStringId.DefaultNameDateFilterItem" | "DashboardWebStringId.DateFilter.FilterType" | "DashboardWebStringId.DateFilter.FilterTypeExact" | "DashboardWebStringId.DateFilter.FilterTypeAfter" | "DashboardWebStringId.DateFilter.FilterTypeBefore" | "DashboardWebStringId.DateFilter.FilterTypeBetween" | "DashboardWebStringId.DateFilter.ArrangementMode" | "DashboardWebStringId.DateFilter.ArrangementModeAutoHeight" | "DashboardWebStringId.DateFilter.ArrangementModeHorizontal" | "DashboardWebStringId.DateFilter.ArrangementModeVertical" | "DashboardWebStringId.DateFilter.DatePickerLocation" | "DashboardWebStringId.DateFilter.DatePickerLocationFar" | "DashboardWebStringId.DateFilter.DatePickerLocationNear" | "DashboardWebStringId.DateFilter.DatePickerLocationHidden" | "DashboardStringId.DateFilterDisplayTextPattern" | "DashboardStringId.DateFilterDatePickerButtonDefaultText" | "DashboardStringId.FromDatePeriodCaption" | "DashboardStringId.ToDatePeriodCaption" | "DashboardStringId.FromToDatePeriodCaption" | "DashboardStringId.UniqueNameValidationMessage" | "DashboardStringId.GridTotalAutoTemplate" | "DashboardStringId.GridTotalValueTemplate" | "DashboardStringId.GridTotalTemplate" | "DashboardStringId.GridTotalTypeCount" | "DashboardStringId.GridTotalTypeMin" | "DashboardStringId.GridTotalTypeMax" | "DashboardStringId.GridTotalTypeAvg" | "DashboardStringId.GridTotalTypeSum" | "DashboardStringId.ActionShowDataInspector" | "DashboardStringId.InspectedData" | "DashboardStringId.InspectedTypeFormatString" | "DashboardStringId.AggregatedDataType" | "DashboardStringId.RawDataType" | "DashboardStringId.OLAPUnavailableRawData" | "DashboardStringId.SparklineValuesSeparator" | "DashboardStringId.SparklineArgumentValueSeparator" | "DashboardWebStringId.Grid.FilterClause.ApplyFilter" | "DashboardWebStringId.Grid.FilterClause.ResetOperation" | "DashboardWebStringId.Grid.FilterClause.Contains" | "DashboardWebStringId.Grid.FilterClause.DoesNotContain" | "DashboardWebStringId.Grid.FilterClause.StartsWith" | "DashboardWebStringId.Grid.FilterClause.EndsWith" | "DashboardWebStringId.Grid.FilterClause.Equals" | "DashboardWebStringId.Grid.FilterClause.DoesNotEqual" | "DashboardWebStringId.Grid.FilterClause.Less" | "DashboardWebStringId.Grid.FilterClause.Greater" | "DashboardWebStringId.Grid.FilterClause.LessOrEqual" | "DashboardWebStringId.Grid.FilterClause.GreaterOrEqual" | "DashboardWebStringId.Grid.FilterClause.Between" | "DashboardWebStringId.Grid.FilterClause.BetweenStart" | "DashboardWebStringId.Grid.FilterClause.BetweenEnd" | "DashboardWebStringId.AccordionTab.Content" | "DashboardWebStringId.TextBoxItemEditor.NoFields" | "DashboardWebStringId.TextBoxItemEditor.InsertField" | "DashboardWebStringId.TextBoxItemEditor.EditTextButton" | "DashboardWebStringId.TextBoxItemEditor.DialogCaption" | "DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose" | "DashboardWebStringId.TextBoxItemEditor.DialogClose" | "DashboardStringId.StartDate" | "DashboardStringId.EndDate" | "DashboardWebStringId.AccordionTab.MeasureFilter" | "DashboardStringId.FunctionDescriptionAggregateFilter" | "DashboardWebStringId.TabPages" | "DashboardWebStringId.More" | "DashboardStringId.MeasureFilterCaptionFormatString";
	    FirstLevel: "DashboardStringId.ActionClearMasterFilter" | "DashboardStringId.ActionClearSelection" | "DashboardStringId.ActionOtherValues" | "DashboardStringId.ActionDrillUp" | "DashboardStringId.ActionExportTo" | "DashboardStringId.ActionExportToPdf" | "DashboardStringId.ActionExportToImage" | "DashboardStringId.ActionExportToExcel" | "DashboardStringId.RangeFilterCustomDateTimePeriod" | "DashboardStringId.ActionExportTemplate" | "DashboardStringId.ActionAllowMultiselection" | "DashboardStringId.DashboardNullValue" | "DashboardStringId.TopNOthersValue" | "DashboardStringId.DashboardErrorValue" | "DashboardStringId.DateTimeQuarterFormat" | "DashboardStringId.MessageLoading" | "DashboardStringId.ParametersFormCaption" | "DashboardStringId.ParametersSelectorText" | "DashboardStringId.ParametersFormAllowNullColumnCaption" | "DashboardStringId.ParametersFormValueColumnCaption" | "DashboardStringId.ParametersFormNameColumnCaption" | "DashboardStringId.ButtonOK" | "DashboardStringId.ButtonCancel" | "DashboardStringId.SelectDate" | "DashboardStringId.ButtonReset" | "DashboardStringId.ButtonSubmit" | "DashboardStringId.ButtonApply" | "DashboardStringId.ButtonExport" | "DashboardStringId.GridResetColumnWidths" | "DashboardStringId.GridSortAscending" | "DashboardStringId.GridSortDescending" | "DashboardStringId.GridClearSorting" | "DashboardStringId.PivotGridTotal" | "DashboardStringId.PivotGridGrandTotal" | "DashboardStringId.ChartTotalValue" | "DashboardStringId.PageLayout" | "DashboardStringId.PageLayoutAuto" | "DashboardStringId.PageLayoutPortrait" | "DashboardStringId.PageLayoutLandscape" | "DashboardStringId.PaperKind" | "DashboardStringId.PaperKindLetter" | "DashboardStringId.PaperKindLegal" | "DashboardStringId.PaperKindExecutive" | "DashboardStringId.PaperKindA5" | "DashboardStringId.PaperKindA4" | "DashboardStringId.PaperKindA3" | "DashboardStringId.ScaleMode" | "DashboardStringId.ScaleModeNone" | "DashboardStringId.ScaleModeUseScaleFactor" | "DashboardStringId.ScaleModeAutoFitToPagesWidth" | "DashboardStringId.AutoFitPageCount" | "DashboardStringId.ScaleFactor" | "DashboardStringId.PrintHeadersOnEveryPage" | "DashboardStringId.FitToPageWidth" | "DashboardStringId.SizeMode" | "DashboardStringId.SizeModeNone" | "DashboardStringId.SizeModeStretch" | "DashboardStringId.SizeModeZoom" | "DashboardStringId.AutoArrangeContent" | "DashboardStringId.ImageFormat" | "DashboardStringId.ExcelFormat" | "DashboardStringId.CsvValueSeparator" | "DashboardStringId.ExportFilters" | "DashboardStringId.ExportParameters" | "DashboardStringId.DashboardStatePosition" | "DashboardStringId.Resolution" | "DashboardStringId.ShowTitle" | "DashboardStringId.Title" | "DashboardStringId.FileName" | "DashboardStringId.FilterStatePresentationAfter" | "DashboardStringId.FilterStatePresentationAfterAndSplitPage" | "DashboardStringId.FilterStatePresentationSplitSheet" | "DashboardStringId.MessageCustomItemIsNotSupported" | "DashboardStringId.MessageGridHasNoData" | "DashboardStringId.MessagePivotHasNoData" | "DashboardStringId.SparklineTooltipStartValue" | "DashboardStringId.SparklineTooltipEndValue" | "DashboardStringId.SparklineTooltipMinValue" | "DashboardStringId.SparklineTooltipMaxValue" | "DashboardStringId.OpenCaption" | "DashboardStringId.HighCaption" | "DashboardStringId.LowCaption" | "DashboardStringId.CloseCaption" | "DashboardStringId.InitialExtent" | "DashboardStringId.FilterElementShowAllItem" | "DashboardStringId.NumericFormatUnitSymbolThousands" | "DashboardStringId.NumericFormatUnitSymbolMillions" | "DashboardStringId.NumericFormatUnitSymbolBillions" | "DashboardStringId.ActionSelectDateTimePeriod" | "DashboardStringId.RangeFilterSelectRange" | "DashboardStringId.FilterElementCheckedComboBoxNoDataCaption" | "DashboardStringId.FilterElementRadioComboBoxNoDataCaption" | "DashboardStringId.FilterElementNoDataToDisplay" | "DashboardStringId.RangeFilterSelectRangeFromCaption" | "DashboardStringId.RangeFilterSelectRangeToCaption" | "DashboardWebStringId.DashboardParameters" | "DashboardStringId.DataSourceDataMember" | "DashboardStringId.DescriptionMeasures" | "DashboardWebStringId.TextBoxFormatText" | "DashboardStringId.NumericFormatUnitCaption" | "DashboardWebStringId.SummaryType" | "DashboardStringId.CalculationTypeExpression" | "DevExpressWebStringId.CalculatedFieldDataType" | "DashboardStringId.ValueCaption" | "DashboardStringId.Value1Caption" | "DashboardStringId.Value2Caption" | "DashboardStringId.CommandFormatRuleTopBottom" | "DashboardStringId.CommandFormatRuleAboveBelowAverage" | "DashboardStringId.CommandFormatRuleBar" | "DashboardStringId.CommandFormatRuleColorRangeBar" | "DashboardStringId.CommandFormatRuleGradientRangeBar" | "DashboardStringId.FormatRuleStyleAppearance" | "DashboardStringId.FormatRuleStyleIcons" | "DashboardStringId.FormatRuleNegativeStyle" | "DashboardStringId.CommandFormatRuleExpression" | "DashboardWebStringId.TopNMode" | "DashboardStringId.CommandFormatRuleRangeSet" | "DashboardStringId.CommandFormatRuleValue" | "DashboardStringId.CommandFormatRuleDateOccurring" | "DashboardWebStringId.ConditionalFormatting.Appearance.BackColor" | "DashboardWebStringId.ConditionalFormatting.Appearance.ForeColor" | "DashboardStringId.DescriptionBoundImageAttribute" | "DashboardWebStringId.ShowCaptionText" | "DashboardWebStringId.DisplayItemAsPage" | "DashboardStringId.DefaultNameItemGroup" | "DashboardStringId.DefaultNameTabContainerItem" | "DashboardStringId.DefaultDataSourceName" | "DashboardWebStringId.CrossDataSourceFiltering" | "DashboardStringId.RangeFilterCalculationAlongSeries" | "DashboardStringId.RangeFilterCalculationAlongArgument" | "DashboardStringId.DescriptionItemSeries" | "DashboardStringId.DescriptionSeries" | "DashboardWebStringId.Chart.SeriesType" | "DashboardStringId.DescriptionDimensions" | "DashboardWebStringId.TreeView.AutoExpand" | "DashboardWebStringId.ConditionalFormatting.ConditionMinimum" | "DashboardWebStringId.ConditionalFormatting.ConditionMaximum" | "DashboardStringId.DescriptionItemDimension" | "DashboardStringId.DescriptionItemMeasure" | "DashboardWebStringId.Grid.MergeCells" | "DashboardWebStringId.Grid.ColumnWidthMode" | "DashboardWebStringId.Grid.BandedRows" | "DashboardWebStringId.Grid.VerticalLines" | "DashboardWebStringId.Grid.HorizontalLines" | "DashboardWebStringId.Grid.ColumnHeaders" | "DashboardWebStringId.Grid.WordWrap" | "DashboardStringId.ActualValueCaption" | "DashboardStringId.TargetValueCaption" | "DashboardStringId.UriPatternCaption" | "DashboardStringId.UriCaption" | "DashboardStringId.DisplayValueCaption" | "DashboardStringId.WeightCaption" | "DashboardStringId.DescriptionItemColor" | "DashboardStringId.Latitude" | "DashboardStringId.Longitude" | "DashboardWebStringId.GeoPointMapClusterization" | "DashboardWebStringId.MapLockNavigation" | "DashboardWebStringId.WeightedLegendGalleryGroup" | "DashboardStringId.DescriptionItemArgument" | "DashboardWebStringId.PieMapIsWeighted" | "DashboardWebStringId.InteractivityOptions.IgnoreMasterFilters" | "DashboardWebStringId.InteractivityOptions.DrillDown" | "DashboardWebStringId.Pie.ShowCaptions" | "DashboardStringId.DescriptionColumns" | "DashboardStringId.DescriptionRows" | "DashboardStringId.DescriptionValues" | "DashboardStringId.DescriptionArguments" | "DashboardStringId.TextGroupIntervalAlphabetical" | "DashboardStringId.ActionMaximizeDashboardItem" | "DashboardStringId.ActionRestoreDashboardItem" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataSource" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.ValueMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DisplayMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.SortOrder" | "DevExpress.DashboardCommon.DashboardParameter.Visible" | "DevExpress.DashboardCommon.DashboardParameter.Description" | "DevExpress.DashboardCommon.DashboardParameter.AllowMultiselect" | "DevExpress.DashboardCommon.DashboardParameter.AllowNull" | "DevExpress.DashboardCommon.DashboardParameter.SelectAllValues" | "DevExpress.DashboardCommon.StaticListLookUpSettings.Values" | "DevExpress.DashboardCommon.DimensionSortOrder.Ascending" | "DevExpress.DashboardCommon.DimensionSortOrder.Descending" | "DevExpress.DashboardCommon.DimensionSortOrder.None" | "DashboardWebStringId.AccordionTab.ScatterChartPointLabelOptions" | "DashboardWebStringId.AccordionTab.ChoroplethMapShapeLabelsAttribute" | "DashboardStringId.CommandFormatRuleTopN" | "DashboardWebStringId.Type" | "DashboardWebStringId.Grid.ColumnWidth" | "DashboardWebStringId.AccordionTab.ShowTotals" | "DashboardWebStringId.AccordionTab.Layout" | "DashboardWebStringId.AccordionTab.PivotInitialState" | "DashboardWebStringId.AccordionTab.ImageOptions" | "DashboardWebStringId.AccordionTab.Labels" | "DashboardWebStringId.AccordionTab.MapLegend" | "DashboardWebStringId.AccordionTab.WeightedLegend" | "DashboardWebStringId.AccordionTab.Common" | "DashboardWebStringId.AccordionTab.ChartLegend" | "DashboardWebStringId.Grid.AutoFitToContentsColumnWidthMode" | "DashboardWebStringId.Grid.AutoFitToGridColumnWidthMode" | "DashboardWebStringId.Grid.ManualGridColumnWidthMode" | "DashboardStringId.DateTimeIntervalYear" | "DashboardStringId.DateTimeIntervalQuarter" | "DashboardStringId.DateTimeIntervalMonth" | "DashboardStringId.DateTimeIntervalWeek" | "DashboardStringId.DateTimeIntervalDay" | "DashboardStringId.DateTimeIntervalHour" | "DashboardStringId.DateTimeIntervalMinute" | "DashboardStringId.DateTimeIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalYear" | "DashboardStringId.DateTimeGroupIntervalQuarter" | "DashboardStringId.DateTimeGroupIntervalMonth" | "DashboardStringId.DateTimeGroupIntervalDay" | "DashboardStringId.DateTimeGroupIntervalHour" | "DashboardStringId.DateTimeGroupIntervalMinute" | "DashboardStringId.DateTimeGroupIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalDayOfYear" | "DashboardStringId.DateTimeGroupIntervalDayOfWeek" | "DashboardStringId.DateTimeGroupIntervalWeekOfYear" | "DashboardStringId.DateTimeGroupIntervalWeekOfMonth" | "DashboardStringId.DateTimeGroupIntervalMonthYear" | "DashboardStringId.DateTimeGroupIntervalQuarterYear" | "DashboardStringId.DateTimeGroupIntervalWeekYear" | "DashboardStringId.DateTimeGroupIntervalDayMonthYear" | "DashboardStringId.DateTimeGroupIntervalDateHour" | "DashboardStringId.DateTimeGroupIntervalDateHourMinute" | "DashboardStringId.DateTimeGroupIntervalDateHourMinuteSecond" | "DashboardStringId.DateTimeGroupIntervalExactDate" | "DashboardStringId.GroupIntervalNone" | "DashboardWebStringId.Treemap.StripedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SquarifiedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SliceAndDiceLayoutAlgorithm" | "DashboardWebStringId.Treemap.TileLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.TileLabelsNone" | "DashboardWebStringId.Treemap.TileLabelsValue" | "DashboardWebStringId.Treemap.TileLabelsArgument" | "DashboardWebStringId.Treemap.TileTooltipsArgumentAndValue" | "DashboardWebStringId.Treemap.TileTooltipsArgument" | "DashboardWebStringId.Treemap.TileTooltipsValue" | "DashboardWebStringId.Treemap.TileTooltipsNone" | "DashboardWebStringId.Treemap.TopLeftToBottomRightLayoutDirection" | "DashboardWebStringId.Treemap.TopRightToBottomLeftLayoutDirection" | "DashboardWebStringId.Treemap.BottomLeftToTopRightLayoutDirection" | "DashboardWebStringId.Treemap.BottomRightToTopLeftLayoutDirection" | "DashboardWebStringId.Treemap.LayoutDirection" | "DashboardWebStringId.Treemap.GroupLabelsNone" | "DashboardWebStringId.Treemap.GroupLabelsArgument" | "DashboardWebStringId.Treemap.GroupLabelsValue" | "DashboardWebStringId.Treemap.GroupLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.GroupTooltipsNone" | "DashboardWebStringId.Treemap.GroupTooltipsArgument" | "DashboardWebStringId.Treemap.GroupTooltipsValue" | "DashboardWebStringId.Treemap.GroupTooltipsArgumentAndValue" | "DashboardStringId.RankOrderAscending" | "DashboardStringId.RankOrderDescending" | "DashboardStringId.DateTimeFormatYearFormatDefaultCaption" | "DashboardStringId.DateTimeFormatYearFormatFullCaption" | "DashboardStringId.DateTimeFormatYearFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatQuarterFormatDefaultCaption" | "DashboardStringId.DateTimeFormatQuarterFormatNumericCaption" | "DashboardStringId.DateTimeFormatQuarterFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatDefaultCaption" | "DashboardStringId.DateTimeFormatMonthFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatMonthFormatNumericCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatFullCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatNumericCaption" | "DashboardStringId.DateTimeFormatDateFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateFormatLongCaption" | "DashboardStringId.DateTimeFormatDateFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatLongCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption" | "DashboardStringId.ExactDateFormatYear" | "DashboardStringId.ExactDateFormatQuarter" | "DashboardStringId.ExactDateFormatMonth" | "DashboardStringId.ExactDateFormatDay" | "DashboardStringId.ExactDateFormatHour" | "DashboardStringId.ExactDateFormatMinute" | "DashboardStringId.ExactDateFormatSecond" | "DashboardWebStringId.FormatType" | "DashboardWebStringId.TopN.Top" | "DashboardWebStringId.TopN.Bottom" | "DashboardWebStringId.DimensionSortBy" | "DashboardStringId.NumericFormatUnitAutoCaption" | "DashboardStringId.NumericFormatFormatTypeAutoCaption" | "DashboardStringId.NumericFormatFormatTypeGeneralCaption" | "DashboardStringId.NumericFormatFormatTypeNumberCaption" | "DashboardStringId.NumericFormatFormatTypeCurrencyCaption" | "DashboardStringId.NumericFormatFormatTypeScientificCaption" | "DashboardStringId.NumericFormatFormatTypePercentCaption" | "DashboardStringId.NumericFormatUnitOnesCaption" | "DashboardStringId.NumericFormatUnitThousandsCaption" | "DashboardStringId.NumericFormatUnitMillionsCaption" | "DashboardStringId.NumericFormatUnitBillionsCaption" | "DashboardStringId.DeltaValueTypeActualValueCaption" | "DashboardStringId.DeltaValueTypeAbsoluteVariationCaption" | "DashboardStringId.DeltaValueTypePercentVariationCaption" | "DashboardStringId.DeltaValueTypePercentOfTargetCaption" | "DashboardStringId.DeltaValueTypeTargetValueCaption" | "DashboardStringId.DeltaIndicationModeGreaterIsGoodCaption" | "DashboardStringId.DeltaIndicationModeLessIsGoodCaption" | "DashboardStringId.DeltaIndicationModeWarningIfGreaterCaption" | "DashboardStringId.DeltaIndicationModeWarningIfLessCaption" | "DashboardStringId.DeltaIndicationModeNoIndicationCaption" | "DashboardStringId.DeltaThresholdTypeAbsolute" | "DashboardStringId.DeltaThresholdTypePercent" | "DashboardStringId.CommandDimensionGroupChildValues" | "DashboardStringId.SeriesTypeBar" | "DashboardStringId.SeriesTypeStackedBar" | "DashboardStringId.SeriesTypeFullStackedBar" | "DashboardStringId.SeriesTypePoint" | "DashboardStringId.SeriesTypeLine" | "DashboardStringId.SeriesTypeStackedLine" | "DashboardStringId.SeriesTypeFullStackedLine" | "DashboardStringId.SeriesTypeStepLine" | "DashboardStringId.SeriesTypeSpline" | "DashboardStringId.SeriesTypeArea" | "DashboardStringId.SeriesTypeStackedArea" | "DashboardStringId.SeriesTypeFullStackedArea" | "DashboardStringId.SeriesTypeStepArea" | "DashboardStringId.SeriesTypeSplineArea" | "DashboardStringId.SeriesTypeStackedSplineArea" | "DashboardStringId.SeriesTypeFullStackedSplineArea" | "DashboardWebStringId.Chart.ShowLegend" | "DashboardStringId.DefaultNameBoundImageItem" | "DashboardStringId.DefaultNameImageItem" | "DashboardStringId.DefaultNameTextBoxItem" | "DashboardStringId.DefaultNameCardItem" | "DashboardStringId.DefaultNameChartItem" | "DashboardStringId.DefaultNameComboBoxItem" | "DashboardStringId.DefaultNameListBoxItem" | "DashboardStringId.DefaultNameTreeViewItem" | "DashboardStringId.DefaultNameGaugeItem" | "DashboardStringId.DefaultNameGridItem" | "DashboardStringId.GridHyperlinkUriPatternErrorMessage" | "DashboardWebStringId.DefaultNameBubbleMapItem" | "DashboardWebStringId.DefaultNameChoroplethMapItem" | "DashboardWebStringId.DefaultNameGeoPointMapItem" | "DashboardWebStringId.DefaultNamePieMapItem" | "DashboardStringId.DefaultNamePieItem" | "DashboardStringId.DefaultNamePivotItem" | "DashboardStringId.DefaultNameRangeFilterItem" | "DashboardStringId.DefaultNameScatterChartItem" | "DashboardStringId.DefaultNameTreemapItem" | "DashboardStringId.DescriptionMaps" | "DashboardStringId.EntireRangePeriodCaption" | "DashboardStringId.CalculationTypePercentOfTotal" | "DashboardStringId.CalculationTypeDifference" | "DashboardStringId.CalculationTypePercentageDifference" | "DashboardStringId.CalculationTypeRunningTotal" | "DashboardStringId.CalculationTypeMovingCalculation" | "DashboardStringId.CalculationTypeRank" | "DashboardStringId.ColorPaletteIndex" | "DashboardStringId.DifferenceCalculationTargetPrevious" | "DashboardStringId.DifferenceCalculationTargetNext" | "DashboardStringId.DifferenceCalculationTargetFirst" | "DashboardStringId.DifferenceCalculationTargetLast" | "DashboardStringId.SummaryTypeCount" | "DashboardStringId.SummaryTypeSum" | "DashboardStringId.SummaryTypeMin" | "DashboardStringId.SummaryTypeMax" | "DashboardStringId.SummaryTypeAverage" | "DashboardStringId.SummaryTypeStdDev" | "DashboardStringId.SummaryTypeStdDevp" | "DashboardStringId.SummaryTypeVar" | "DashboardStringId.SummaryTypeVarp" | "DashboardStringId.SummaryTypeCountDistinct" | "DashboardStringId.SummaryTypeMedian" | "DashboardStringId.SummaryTypeMode" | "DashboardStringId.RankTypeUnique" | "DashboardStringId.RankTypeCompetition" | "DashboardStringId.RankTypeDense" | "DashboardStringId.RankTypeModified" | "DashboardStringId.RankTypePercentile" | "DashboardStringId.CardCalculationAlongCards" | "DashboardStringId.CardCalculationAlongSparklineArgument" | "DashboardStringId.CardCalculationAlongCardsAndSparklineArgument" | "DashboardStringId.CardCalculationAlongSparklineArgumentAndCards" | "DashboardStringId.ChartCalculationAlongArguments" | "DashboardStringId.ChartCalculationAlongSeries" | "DashboardStringId.ChartCalculationAlongArgumentsAndSeries" | "DashboardStringId.ChartCalculationAlongSeriesAndArguments" | "DashboardStringId.GridCalculationAlongRows" | "DashboardStringId.GridCalculationAlongSparklineArgument" | "DashboardStringId.GridCalculationAlongRowsAndSparklineArgument" | "DashboardStringId.GridCalculationAlongSparklineArgumentAndRows" | "DashboardStringId.PivotCalculationAlongColumns" | "DashboardStringId.PivotCalculationAlongRows" | "DashboardStringId.PivotCalculationAlongColumnsAndRows" | "DashboardStringId.PivotCalculationAlongRowsAndColumns" | "DashboardStringId.PivotCalculationAlongGroupsInColumns" | "DashboardStringId.PivotCalculationAlongGroupsInRows" | "DashboardStringId.PivotCalculationAlongGroupsInColumnsAndRows" | "DashboardStringId.PivotCalculationAlongGroupsInRowsAndColumns" | "DashboardStringId.PieCalculationAlongArguments" | "DashboardStringId.PieCalculationAlongSeries" | "DashboardStringId.PieCalculationAlongArgumentsAndSeries" | "DashboardStringId.PieCalculationAlongSeriesAndArguments" | "DashboardStringId.RangeFilterCalculationAlongArgumentAndSeries" | "DashboardStringId.RangeFilterCalculationAlongSeriesAndArgument" | "DashboardStringId.GaugeCalculationAlongGauges" | "DashboardStringId.ScatterCalculationAlongArguments" | "DashboardStringId.CalculationAlongSpecificDimensions" | "DashboardStringId.CalculatedFieldTypeString" | "DashboardStringId.CalculatedFieldTypeLong" | "DashboardStringId.CalculatedFieldTypeDecimal" | "DashboardStringId.CalculatedFieldTypeBoolean" | "DashboardStringId.CalculatedFieldTypeDateTime" | "DashboardStringId.CalculatedFieldTypeDouble" | "DashboardStringId.CalculatedFieldTypeAuto" | "DashboardStringId.CalculatedFieldTypeObject" | "DashboardStringId.DefaultEFDataSourceName" | "DashboardStringId.DefaultExcelDataSourceName" | "DashboardStringId.DefaultFileExtractDataSourceName" | "DashboardStringId.DefaultObjectDataSourceName" | "DashboardStringId.DefaultOlapDataSourceName" | "DashboardStringId.DefaultSqlDataSourceName" | "DashboardStringId.DefaultJsonDataSourceName" | "DashboardStringId.DefaultXpoDataSourceName" | "DashboardStringId.OlapRaggedHierarchyNoneItemCaption" | "DashboardStringId.FormatRuleApplyToColumn" | "DashboardStringId.SeriesTypeSideBySideRangeBar" | "DashboardStringId.SeriesTypeRangeArea" | "DashboardStringId.SeriesTypeHighLowClose" | "DashboardStringId.SeriesTypeCandleStick" | "DashboardStringId.SeriesTypeStock" | "DashboardWebStringId.StyleSettings" | "DashboardStringId.ParametersFormCalendarTodayButton" | "DashboardStringId.TreemapLabelArgumentTemplate" | "DashboardStringId.TreemapLabelValueTemplate" | "DashboardStringId.SearchNullValuePrompt" | "DashboardStringId.CustomItems" | "DashboardStringId.FormatRuleAllowNegativeAxis" | "DashboardStringId.FormatRuleDrawAxis" | "DashboardStringId.FormatRuleShowBarOnly" | "DashboardStringId.CommandFormatRuleBottomN" | "DashboardStringId.FormatConditionAppearanceNone" | "DashboardStringId.FormatConditionAppearanceCustom" | "DashboardStringId.FormatConditionAppearancePaleRed" | "DashboardStringId.FormatConditionAppearancePaleYellow" | "DashboardStringId.FormatConditionAppearancePaleGreen" | "DashboardStringId.FormatConditionAppearancePaleBlue" | "DashboardStringId.FormatConditionAppearancePalePurple" | "DashboardStringId.FormatConditionAppearancePaleCyan" | "DashboardStringId.FormatConditionAppearancePaleOrange" | "DashboardStringId.FormatConditionAppearancePaleGray" | "DashboardStringId.FormatConditionAppearanceRed" | "DashboardStringId.FormatConditionAppearanceYellow" | "DashboardStringId.FormatConditionAppearanceGreen" | "DashboardStringId.FormatConditionAppearanceBlue" | "DashboardStringId.FormatConditionAppearancePurple" | "DashboardStringId.FormatConditionAppearanceCyan" | "DashboardStringId.FormatConditionAppearanceOrange" | "DashboardStringId.FormatConditionAppearanceGray" | "DashboardStringId.FormatConditionAppearanceGradientRed" | "DashboardStringId.FormatConditionAppearanceGradientYellow" | "DashboardStringId.FormatConditionAppearanceGradientGreen" | "DashboardStringId.FormatConditionAppearanceGradientBlue" | "DashboardStringId.FormatConditionAppearanceGradientPurple" | "DashboardStringId.FormatConditionAppearanceGradientCyan" | "DashboardStringId.FormatConditionAppearanceGradientOrange" | "DashboardStringId.FormatConditionAppearanceGradientTransparent" | "DashboardStringId.FormatConditionAppearanceFontBold" | "DashboardStringId.FormatConditionAppearanceFontItalic" | "DashboardStringId.FormatConditionAppearanceFontUnderline" | "DashboardStringId.FormatConditionAppearanceFontGrayed" | "DashboardStringId.FormatConditionAppearanceFontRed" | "DashboardStringId.FormatConditionAppearanceFontYellow" | "DashboardStringId.FormatConditionAppearanceFontGreen" | "DashboardStringId.FormatConditionAppearanceFontBlue" | "DashboardStringId.IntersectionLevelModeFirst" | "DashboardStringId.IntersectionLevelModeLast" | "DashboardStringId.IntersectionLevelModeAuto" | "DashboardStringId.IntersectionLevelModeAll" | "DashboardStringId.IntersectionLevelModeSpecific" | "DashboardStringId.FormatRuleApplyToRow" | "DashboardStringId.FormatRuleApplyTo" | "DashboardWebStringId.FilterItem.AllowEmptyFilter" | "DashboardStringId.FormatConditionAppearanceFontStrikeout" | "DashboardStringId.FormatConditionAutomaticValueType" | "DashboardStringId.FormatConditionNumberValueType" | "DashboardStringId.FormatConditionPercentValueType" | "DashboardStringId.CommandFormatRuleRangeIcons" | "DashboardStringId.CommandFormatRuleGreaterThan" | "DashboardStringId.CommandFormatRuleGreaterThanOrEqualTo" | "DashboardStringId.CommandFormatRuleLessThan" | "DashboardStringId.CommandFormatRuleLessThanOrEqualTo" | "DashboardStringId.CommandFormatRuleEqualTo" | "DashboardStringId.CommandFormatRuleNotEqualTo" | "DashboardStringId.CommandFormatRuleBetween" | "DashboardStringId.CommandFormatRuleNotBetween" | "DashboardStringId.CommandFormatRuleBetweenOrEqual" | "DashboardStringId.CommandFormatRuleNotBetweenOrEqual" | "DashboardStringId.CommandFormatRuleContains" | "DashboardStringId.ColorAutoAssigned" | "DashboardStringId.CalculationTypeNone" | "DashboardStringId.UndoText" | "DashboardStringId.RedoText" | "DashboardStringId.DashboardCurrencyUseCurrentCurrency" | "DashboardStringId.CommandDimensionSortModeDisplayText" | "DashboardStringId.CommandDimensionSortModeValue" | "DashboardStringId.CommandDimensionSortModeID" | "DashboardStringId.CommandDimensionSortModeKey" | "DashboardWebStringId.Chart.AddPane" | "DashboardStringId.MapShapeNoneAttribute" | "DashboardStringId.DefaultPeriodName" | "DashboardStringId.CardLayoutTemplateStretchedCaption" | "DashboardStringId.CardLayoutTemplateCenteredCaption" | "DashboardStringId.CardLayoutTemplateCompactCaption" | "DashboardStringId.CardLayoutTemplateLightweightCaption" | "DashboardStringId.CardLayoutTemplateCustomCaption" | "DashboardStringId.CardLayoutTemplateNoneCaption" | "DashboardStringId.CardRowDataElementTypeTitleCaption" | "DashboardStringId.CardRowDataElementTypeSubtitleCaption" | "DashboardStringId.CardRowDataElementTypeActualValueCaption" | "DashboardStringId.CardRowDataElementTypeTargetValueCaption" | "DashboardStringId.CardRowDataElementTypeAbsoluteVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentOfTargetCaption" | "DashboardStringId.CardRowDataElementTypeDimensionValueCaption" | "DashboardStringId.CardRowDataElementTypeCardNameCaption" | "DashboardStringId.CardRowDataElementTypeDeltaIndicatorCaption" | "DashboardStringId.CardRowDataElementTypeSparklineCaption" | "DashboardStringId.FormatRuleApplyToAllElements" | "DashboardWebStringId.Pie.LabelPosition" | "DashboardWebStringId.Pie.LabelPositionOutside" | "DashboardWebStringId.Pie.LabelPositionInside" | "DashboardStringId.IncludeExportDashboardState" | "DashboardStringId.PointLabelContentTypeArgument" | "DashboardStringId.PointLabelContentTypeSeriesName" | "DashboardStringId.PointLabelContentTypeValue" | "DashboardStringId.PointLabelContentTypePercent" | "DashboardWebStringId.DashboardMenu" | "DashboardWebStringId.DashboardMenuNew" | "DashboardWebStringId.DashboardMenuOpen" | "DashboardWebStringId.DashboardMenuSave" | "DashboardWebStringId.DashboardMenuCurrency" | "DashboardWebStringId.DashboardMenuDataSources" | "DashboardWebStringId.DashboardMenuColorScheme" | "DashboardWebStringId.DashboardMenuNewDashboardCreate" | "DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder" | "DashboardWebStringId.Binding.DefaultEmptyPlaceholder" | "DashboardWebStringId.Binding.DefaultSelectedPlaceholder" | "DashboardWebStringId.Binding.DataFiltering" | "DashboardWebStringId.Binding.Argument" | "DashboardWebStringId.Binding.Attribute" | "DashboardWebStringId.Binding.Sparkline" | "DashboardWebStringId.Binding.Columns" | "DashboardWebStringId.Binding.TooltipDimensions" | "DashboardWebStringId.Binding.TooltipMeasures" | "DashboardWebStringId.Binding.HiddenDimensions" | "DashboardWebStringId.Binding.HiddenMeasures" | "DashboardWebStringId.Binding.AddDimension" | "DashboardWebStringId.Binding.AddMeasure" | "DashboardWebStringId.Binding.AddColumn" | "DashboardWebStringId.Binding.AddRow" | "DashboardWebStringId.Binding.AddValue" | "DashboardWebStringId.Binding.AddSeries" | "DashboardWebStringId.Binding.SetLatitude" | "DashboardWebStringId.Binding.SetLongitude" | "DashboardWebStringId.Binding.SetArgument" | "DashboardWebStringId.Binding.AddArgument" | "DashboardWebStringId.Binding.SetWeight" | "DashboardWebStringId.Binding.SetColor" | "DashboardWebStringId.Binding.SetAttribute" | "DashboardWebStringId.Binding.SetValue" | "DashboardWebStringId.Binding.XAxis" | "DashboardWebStringId.Binding.YAxis" | "DashboardWebStringId.Binding.ConfigureDimension" | "DashboardWebStringId.Binding.ConfigureMeasure" | "DashboardWebStringId.Binding.ConfigureSeries" | "DashboardWebStringId.Binding.ConfigureArgument" | "DashboardWebStringId.Binding.ConfigureValue" | "DashboardWebStringId.Binding.ConfigureAttribute" | "DashboardWebStringId.Binding.ConfigureLatitude" | "DashboardWebStringId.Binding.ConfigureLongitude" | "DashboardWebStringId.Binding.ConfigureColumn" | "DashboardWebStringId.Binding.ConfigureRow" | "DashboardWebStringId.Binding.ConfigureWeight" | "DashboardWebStringId.Binding.ConfigureColor" | "DashboardWebStringId.Binding.ShowAll" | "DashboardWebStringId.ColorScheme.Color" | "DashboardWebStringId.ColorScheme.Colors" | "DashboardWebStringId.Parameters.ParameterList" | "DashboardWebStringId.Parameters.AddParameter" | "DashboardWebStringId.Parameters.AddParameter.Tooltip" | "DashboardWebStringId.Parameters.NoSelectedParameter" | "DashboardWebStringId.Parameters.Reorder" | "DashboardWebStringId.Parameters.Done" | "DashboardWebStringId.Currency.Currency" | "DashboardWebStringId.Currency.CurrencyCulture" | "DashboardWebStringId.Currency.DefaultCurrencyWarning" | "DashboardWebStringId.Preview" | "DashboardWebStringId.Add" | "DashboardWebStringId.DataSources.UsedDataSources" | "DashboardWebStringId.DataSources.DataItems" | "DashboardWebStringId.DataSources.AddQuery" | "DashboardWebStringId.DataSources.AddCalculatedField" | "DashboardWebStringId.DataSources.AddDataSource" | "DashboardWebStringId.DataSources.NoUsedDataSources" | "DashboardWebStringId.DataSources.NoAvailableDataSources" | "DashboardWebStringId.DataSources.ChooseDataSource" | "DashboardWebStringId.DataSources.CreateDataSource" | "DashboardWebStringId.DataSources.CreateNewDataSource" | "DashboardWebStringId.DataSources.CreateDataSource.Tooltip" | "DashboardWebStringId.DataSources.EditCalculatedField" | "DashboardWebStringId.DataSources.CalculatedField.Name" | "DashboardWebStringId.DataSources.CalculatedField.FieldType" | "DashboardWebStringId.DataSources.CalculatedField.UniqueNameError" | "DashboardWebStringId.DataSources.CalculatedField.Corrupted" | "DashboardWebStringId.DataSources.Edit" | "DashboardStringId.MessageCollectionTypesNotSupported" | "DashboardWebStringId.New.DashboardName" | "DashboardWebStringId.Bindings" | "DashboardWebStringId.Interactivity" | "DashboardWebStringId.Options" | "DashboardWebStringId.Remove" | "DashboardWebStringId.MasterFilterMode" | "DashboardWebStringId.Title.Text" | "DashboardWebStringId.Title.Visible" | "DashboardWebStringId.Title.IncludeMasterFilter" | "DashboardWebStringId.Title.Aligment" | "DashboardWebStringId.Title.Image" | "DashboardWebStringId.DataSources.Cancel" | "DashboardWebStringId.DataSources.IncludeToTheDashboard" | "DashboardWebStringId.DataSources.AvailableDataSourcesError" | "DashboardWebStringId.DataSources.DashboardDataSourceWizard" | "DashboardWebStringId.Viewer" | "DashboardWebStringId.Loading" | "DashboardWebStringId.ClickHereInvitation" | "DashboardWebStringId.BindDataInvitation" | "DashboardWebStringId.AddItemInvitation" | "DashboardWebStringId.Parameters.Values" | "DashboardWebStringId.Binding.Cards" | "DashboardWebStringId.Binding.AddCard" | "DashboardWebStringId.Binding.ConfigureCard" | "DashboardWebStringId.Binding.AddValues" | "DashboardWebStringId.Binding.ConfigureValues" | "DashboardWebStringId.Binding.Maps" | "DashboardWebStringId.Binding.AddMap" | "DashboardWebStringId.Binding.ConfigureMap" | "DashboardWebStringId.Binding.Gauges" | "DashboardWebStringId.Binding.AddGauge" | "DashboardWebStringId.Binding.ConfigureGauge" | "DashboardWebStringId.InteractivityOptions" | "DashboardWebStringId.Binding.Values" | "DashboardWebStringId.Binding.RemovePane" | "DashboardWebStringId.ClickToSetFilterCriteria" | "DashboardWebStringId.DataSources.OK" | "DashboardWebStringId.DataSources.Save" | "DashboardWebStringId.Cards.ArrangementMode" | "DashboardWebStringId.Cards.ArrangementMode.Auto" | "DashboardWebStringId.Cards.ArrangementMode.FixedRows" | "DashboardWebStringId.Cards.ArrangementMode.FixedColumns" | "DashboardWebStringId.Cards.LineCount" | "DashboardWebStringId.ConditionalFormatting" | "DashboardWebStringId.CollectionEditor.NoItems" | "DashboardWebStringId.CollectionEditor.Totals.NoItems" | "DashboardWebStringId.CollectionEditor.Parameters.NoItems" | "DashboardWebStringId.PivotGrid.AutoExpandColumnGroups" | "DashboardWebStringId.PivotGrid.AutoExpandRowGroups" | "DashboardWebStringId.PivotGrid.ColumnGrandTotals" | "DashboardWebStringId.PivotGrid.RowGrandTotals" | "DashboardWebStringId.PivotGrid.ColumnTotals" | "DashboardWebStringId.PivotGrid.RowTotals" | "DashboardWebStringId.PivotGrid.ValuesPosition" | "DashboardWebStringId.PivotGrid.ValuesPositionColumns" | "DashboardWebStringId.PivotGrid.ValuesPositionRows" | "DashboardWebStringId.PivotGrid.RowTotalsPosition" | "DashboardWebStringId.PivotGrid.RowTotalsPositionBottom" | "DashboardWebStringId.PivotGrid.RowTotalsPositionTop" | "DashboardWebStringId.PivotGrid.ColumnTotalsPosition" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionFar" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionNear" | "DashboardWebStringId.PivotGrid.LayoutType" | "DashboardWebStringId.PivotGrid.LayoutTypeCompact" | "DashboardWebStringId.PivotGrid.LayoutTypeTabular" | "DashboardWebStringId.Options.Caption" | "DashboardWebStringId.InteractivityOptions.IsMasterFilter" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.None" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Single" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Multiple" | "DashboardWebStringId.InteractivityOptions.TargetDimensions" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Arguments" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Series" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Points" | "DashboardWebStringId.ColoringOptions" | "DashboardWebStringId.DataSources.Filter" | "DashboardWebStringId.Chart.Rotated" | "DashboardWebStringId.Chart.Panes" | "DashboardWebStringId.Chart.Legend" | "DashboardWebStringId.Chart.AxisX" | "DashboardWebStringId.Chart.AxisY" | "DashboardWebStringId.Chart.AxisYSecondary" | "DashboardWebStringId.Chart.PointLabelOptions" | "DashboardWebStringId.Chart.AxisXMeasure" | "DashboardWebStringId.Chart.AxisYMeasure" | "DashboardWebStringId.Chart.Weight" | "DashboardWebStringId.Chart.Content" | "DashboardWebStringId.Chart.ArgumentAndWeight" | "DashboardWebStringId.Chart.ArgumentAndValues" | "DashboardWebStringId.Chart.Reverse" | "DashboardWebStringId.Chart.Visible" | "DashboardWebStringId.Chart.Title" | "DashboardWebStringId.Chart.TitleText" | "DashboardWebStringId.Chart.EnableZooming" | "DashboardWebStringId.Chart.LimitVisiblePoints" | "DashboardWebStringId.Chart.VisiblePointsCount" | "DashboardWebStringId.Chart.AlwaysShowZeroLevel" | "DashboardWebStringId.Chart.GridLines" | "DashboardWebStringId.Chart.LogarithmicScale" | "DashboardWebStringId.Chart.LogarithmicScaleBase" | "DashboardWebStringId.Chart.LogarithmicScaleBase2" | "DashboardWebStringId.Chart.LogarithmicScaleBase5" | "DashboardWebStringId.Chart.LogarithmicScaleBase10" | "DashboardWebStringId.Chart.Position" | "DashboardWebStringId.Chart.IsInsideOfDiagram" | "DashboardWebStringId.Chart.PrimaryAxisY" | "DashboardWebStringId.Chart.SecondaryAxisY" | "DashboardWebStringId.Chart.Name" | "DashboardWebStringId.Chart.PlotOnSecondaryAxis" | "DashboardWebStringId.Chart.IgnoreEmptyPoints" | "DashboardWebStringId.Chart.ShowPointMarkers" | "DashboardWebStringId.Chart.Value" | "DashboardWebStringId.Chart.ShowZeroValues" | "DashboardWebStringId.Chart.OverlappingMode" | "DashboardWebStringId.Chart.Orientation" | "DashboardWebStringId.Chart.ShowPointLablels" | "DashboardWebStringId.Chart.TooltipContent" | "DashboardWebStringId.Chart.LabelContent" | "DashboardWebStringId.Card.SparklineOptions" | "DashboardWebStringId.Card.SparklineVisible" | "DashboardWebStringId.Chart.Position.TopLeftVertical" | "DashboardWebStringId.Chart.Position.TopLeftHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterHorizontal" | "DashboardWebStringId.Chart.Position.TopRightVertical" | "DashboardWebStringId.Chart.Position.TopRightHorizontal" | "DashboardWebStringId.Chart.Position.BottomLeftVertical" | "DashboardWebStringId.Chart.Position.BottomLeftHorizontal" | "DashboardWebStringId.Chart.Position.BottomCenterHorizontal" | "DashboardWebStringId.Chart.Position.BottomRightVertical" | "DashboardWebStringId.Chart.Position.BottomRightHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterVertical" | "DashboardWebStringId.Chart.Position.BottomCenterVertical" | "DashboardWebStringId.FilterItem.Type" | "DashboardWebStringId.FilterItem.Type.Standard" | "DashboardWebStringId.FilterItem.Type.Checked" | "DashboardWebStringId.FilterItem.Type.Radio" | "DashboardWebStringId.FilterItem.ShowAllValue" | "DashboardWebStringId.FilterItem.EnableSearch" | "DashboardWebStringId.Gauge.Min" | "DashboardWebStringId.Gauge.Max" | "DashboardWebStringId.Gauge.ScaleOptions" | "DashboardWebStringId.Gauge.Type" | "DashboardWebStringId.Gauge.Type.FullQuarterGauge" | "DashboardWebStringId.Gauge.Type.HalfCircular" | "DashboardWebStringId.Gauge.Type.LeftQuarterCircular" | "DashboardWebStringId.Gauge.Type.RightQuarterCircular" | "DashboardWebStringId.Gauge.Type.ThreeFourthCircular" | "DashboardWebStringId.Gauge.Type.LinearHorizontal" | "DashboardWebStringId.Gauge.Type.LinearVertical" | "DashboardWebStringId.Gauge.Captions" | "DashboardWebStringId.Gauge.Scale.Custom" | "DashboardWebStringId.Gauge.Scale.Auto" | "DashboardWebStringId.Grid.ColumnType" | "DashboardWebStringId.Grid.DisplayMode" | "DashboardWebStringId.Grid.DisplayMode.Value" | "DashboardWebStringId.Grid.DisplayMode.Bar" | "DashboardWebStringId.Grid.DisplayMode.Text" | "DashboardWebStringId.Grid.DisplayMode.Image" | "DashboardWebStringId.Grid.FixedWidth" | "DashboardWebStringId.Grid.WidthType" | "DashboardWebStringId.Grid.WidthType.Weight" | "DashboardWebStringId.Grid.WidthType.FitToContent" | "DashboardWebStringId.Grid.DeltaOptions" | "DashboardWebStringId.Grid.ShowStartEndValues" | "DashboardWebStringId.Grid.TotalType" | "DashboardWebStringId.Grid.Dimension" | "DashboardWebStringId.Grid.Measure" | "DashboardWebStringId.Grid.Delta" | "DashboardWebStringId.Grid.Sparkline" | "DashboardWebStringId.Grid.Hyperlink" | "DashboardWebStringId.Grid.Options" | "DashboardWebStringId.Map.ShapeFileLoaded" | "DashboardWebStringId.Map.AttributeFileLoaded" | "DashboardWebStringId.Map.ValueMap" | "DashboardWebStringId.Map.DeltaMap" | "DashboardWebStringId.Map.TooltipCaption" | "DashboardWebStringId.Map.TooltipActualValueCaption" | "DashboardWebStringId.Map.TooltipDeltaCaption" | "DashboardWebStringId.Map.CustomMapOptions" | "DashboardWebStringId.Map.CustomMapOptionsSource" | "DashboardWebStringId.Map.CustomMapOptionsUrl" | "DashboardWebStringId.Map.CustomMapOptionsFile" | "DashboardWebStringId.Map.CustomMapUrl" | "DashboardWebStringId.Map.CustomMapFile" | "DashboardWebStringId.Map.CustomAttributeFile" | "DashboardWebStringId.Map.AttributeDimension" | "DashboardWebStringId.Map.IncludeSummaryValueToShapeTitle" | "DashboardWebStringId.Map.AttributeName" | "DashboardWebStringId.Map.TooltipAttribute" | "DashboardWebStringId.Map.TooltipDimensions" | "DashboardWebStringId.Map.Area.Custom" | "DashboardWebStringId.Map.Area.WorldCountries" | "DashboardWebStringId.Map.Area.Europe" | "DashboardWebStringId.Map.Area.Asia" | "DashboardWebStringId.Map.Area.NorthAmerica" | "DashboardWebStringId.Map.Area.SouthAmerica" | "DashboardWebStringId.Map.Area.Africa" | "DashboardWebStringId.Map.Area.USA" | "DashboardWebStringId.Map.Area.Canada" | "DashboardWebStringId.Map.Viewport" | "DashboardWebStringId.Map.ShapeTitleAttribute" | "DashboardWebStringId.Map.UseBindingAttribute" | "DashboardWebStringId.Map.WeightedLegendType" | "DashboardWebStringId.Map.WeightedLegendType.Linear" | "DashboardWebStringId.Map.WeightedLegendType.Nested" | "DashboardWebStringId.Map.Orientation.Vertical" | "DashboardWebStringId.Map.Orientation.Horizontal" | "DashboardWebStringId.Map.Position.TopLeft" | "DashboardWebStringId.Map.Position.TopCenter" | "DashboardWebStringId.Map.Position.TopRight" | "DashboardWebStringId.Map.Position.BottomLeft" | "DashboardWebStringId.Map.Position.BottomCenter" | "DashboardWebStringId.Map.Position.BottomRight" | "DashboardWebStringId.Map.Viewport.TopLatitude" | "DashboardWebStringId.Map.Viewport.LeftLongitude" | "DashboardWebStringId.Map.Viewport.RightLongitude" | "DashboardWebStringId.Map.Viewport.BottomLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLongitude" | "DashboardWebStringId.Map.Viewport.CreateViewerPaddings" | "DashboardWebStringId.Map.ShowLegend" | "DashboardWebStringId.Pie.Type" | "DashboardWebStringId.Pie" | "DashboardWebStringId.Pie.Donut" | "DashboardWebStringId.Pie.LabelContentType.None" | "DashboardWebStringId.Pie.LabelContentType.Argument" | "DashboardWebStringId.Pie.LabelContentType.Percent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndPercent" | "DashboardWebStringId.Pie.LabelContentType.Value" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndValue" | "DashboardWebStringId.Pie.LabelContentType.ValueAndPercent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentValueAndPercent" | "DashboardWebStringId.Image.BindingMode" | "DashboardWebStringId.Image.BindingMode.BinaryArray" | "DashboardWebStringId.Image.BindingMode.Uri" | "DashboardWebStringId.RangeFilter.UriPattern" | "DashboardWebStringId.Image.SizeMode.Clip" | "DashboardWebStringId.Image.SizeMode.Stretch" | "DashboardWebStringId.Image.SizeMode.Zoom" | "DashboardWebStringId.Image.SizeMode.Squeeze" | "DashboardWebStringId.Image.HorizontalAlignment" | "DashboardWebStringId.Image.VerticalAlignment" | "DashboardWebStringId.Image.Alignment.Left" | "DashboardWebStringId.Image.Alignment.Center" | "DashboardWebStringId.Image.Alignment.Right" | "DashboardWebStringId.Image.Alignment.Top" | "DashboardWebStringId.Image.Alignment.Bottom" | "DashboardWebStringId.SeriesItem.SeriesDimensions" | "DashboardWebStringId.TextBox.Text" | "DashboardWebStringId.Chart.Orientation.Default" | "DashboardWebStringId.Chart.Orientation.RotateRight" | "DashboardWebStringId.Chart.Orientation.RotateLeft" | "DashboardWebStringId.Chart.OverlappingMode.Hide" | "DashboardWebStringId.Chart.OverlappingMode.None" | "DashboardWebStringId.Chart.Position.Outside" | "DashboardWebStringId.Chart.Position.Inside" | "DashboardWebStringId.Chart.SeriesType.Weighted" | "DashboardWebStringId.Coloring.MeasuresColoringMode" | "DashboardWebStringId.Coloring.Global" | "DashboardWebStringId.Coloring.Local" | "DashboardWebStringId.Delta.ValueType" | "DashboardWebStringId.Delta.ResultIndication" | "DashboardWebStringId.Delta.ThresholdType" | "DashboardWebStringId.Delta.ThresholdValue" | "DashboardWebStringId.Sparkline.ViewType" | "DashboardWebStringId.Sparkline.HighlightMinMaxPoints" | "DashboardWebStringId.Sparkline.HighlightStartEndPoints" | "DashboardWebStringId.Title.Aligment.Left" | "DashboardWebStringId.Title.Aligment.Center" | "DashboardWebStringId.Parameters.LookUpSettingsType.NoLookUp" | "DashboardWebStringId.Parameters.LookUpSettingsType.StaticList" | "DashboardWebStringId.Parameters.LookUpSettingsType.DynamicList" | "DashboardWebStringId.Parameters.LookUpSettingsType" | "DashboardWebStringId.Parameters.DefaultValue" | "DashboardWebStringId.DataItem" | "DashboardWebStringId.DataItem.Precision" | "DashboardWebStringId.DataItem.IncludeGroupSeparator" | "DashboardWebStringId.DataItem.ShowValues" | "DashboardWebStringId.DataItem.ShowTotals" | "DashboardWebStringId.DataItem.ShowGrandTotals" | "DashboardWebStringId.Dialog.ConfirmSaving" | "DashboardWebStringId.Dimension.GroupInterval" | "DashboardWebStringId.Dimension.SortMode" | "DashboardWebStringId.Dialog.ArgumentMode" | "DashboardWebStringId.Calculations" | "DashboardWebStringId.Calculations.Expression" | "DashboardWebStringId.Calculations.DifferenceCalculation" | "DashboardWebStringId.Calculations.Moving" | "DashboardWebStringId.Calculations.RunningTotal" | "DashboardWebStringId.Calculations.PercentOfTotal" | "DashboardWebStringId.Calculations.Rank" | "DashboardWebStringId.Calculations.DefinitionMode" | "DashboardWebStringId.Calculations.WindowDefinition" | "DashboardWebStringId.Calculations.WindowDefinitionModeSpecific" | "DashboardWebStringId.Calculations.WindowDefinitionModePredefined" | "DashboardWebStringId.Calculations.DifferenceType" | "DashboardWebStringId.TreemapLayoutAlgorithm" | "DashboardWebStringId.TilesLabelContentType" | "DashboardWebStringId.TilesTooltipContentType" | "DashboardWebStringId.GroupsLabelContentType" | "DashboardWebStringId.GroupsTooltipContentType" | "DashboardWebStringId.ShowOthersValue" | "DashboardWebStringId.TopNEnabled" | "DashboardWebStringId.Parameters.StaticListLookUpSettings" | "DashboardWebStringId.Parameters.DynamicListLookUpSettings" | "DashboardWebStringId.ConvertTo" | "DashboardWebStringId.Duplicate" | "DashboardWebStringId.DataSourceWizard" | "DashboardWebStringId.RangeFilter.CustomPeriods" | "DashboardWebStringId.RangeFilter.StartMode" | "DashboardWebStringId.RangeFilter.EndMode" | "DashboardWebStringId.RangeFilter.StartIntervalAndOffset" | "DashboardWebStringId.RangeFilter.EndIntervalAndOffset" | "DashboardWebStringId.RangeFilter.StartDate" | "DashboardWebStringId.RangeFilter.EndDate" | "DashboardWebStringId.RangeFilter.None" | "DashboardWebStringId.RangeFilter.Fixed" | "DashboardWebStringId.RangeFilter.Flow" | "DashboardWebStringId.Tabs.Binding" | "DashboardWebStringId.Tabs.DataShaping" | "DashboardWebStringId.Tabs.Format" | "DashboardWebStringId.Calculations.Types.Moving" | "DashboardWebStringId.Parameters.SortByMember" | "DashboardWebStringId.Parameters.LookUpSettingsTypeCaption" | "DashboardWebStringId.Dashboard.Items" | "DashboardWebStringId.Dashboard.Groups" | "DashboardWebStringId.Dashboard.LayoutItems" | "DashboardWebStringId.Dashboard.ComponentName" | "DashboardWebStringId.ButtonConfirm" | "DashboardWebStringId.Colorization.GroupInterval" | "DashboardWebStringId.ButtonOn" | "DashboardWebStringId.ButtonOff" | "DashboardWebStringId.ButtonYes" | "DashboardWebStringId.ButtonNo" | "DashboardWebStringId.ButtonDiscrete" | "DashboardWebStringId.ButtonContinuous" | "DashboardWebStringId.ButtonVisible" | "DashboardWebStringId.ButtonHidden" | "DashboardWebStringId.Calculations.PreviousValuesCount" | "DashboardWebStringId.Calculations.NextValuesCount" | "DashboardWebStringId.Calculations.RankType" | "DashboardWebStringId.Calculations.RankOrder" | "DashboardWebStringId.TileOptions" | "DashboardWebStringId.MapLockNavigationLocked" | "DashboardWebStringId.MapLockNavigationUnlocked" | "DashboardWebStringId.ConditionalFormatting.BarOptions" | "DashboardWebStringId.ConditionalFormatting.CalculatedBy" | "DashboardWebStringId.ConditionalFormatting.IconType" | "DashboardWebStringId.ConditionalFormatting.PredefinedColor" | "DashboardWebStringId.ConditionalFormatting.AppearanceType" | "DashboardWebStringId.ConditionalFormatting.FontStyle" | "DashboardWebStringId.ConditionalFormatting.FontFamily" | "DashboardWebStringId.ConditionalFormatting.FontRegular" | "DashboardWebStringId.ConditionalFormatting.IconType.None" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowSideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGraySideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDash" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedTriangleDown" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenTriangleUp" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingHalfGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1QuarterGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1Bar" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1FilledBox" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTriangle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedDiamond" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedFlag" | "DashboardWebStringId.ConditionalFormatting.IntersectionColumnDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionRowDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionLevelMode" | "DashboardWebStringId.ConditionalFormatting.GradientRangeBar" | "DashboardWebStringId.ConditionalFormatting.RangeGradient" | "DashboardWebStringId.ConditionalFormatting.SegmentNumber" | "DashboardWebStringId.ConditionalFormatting.ValueComparison" | "DashboardWebStringId.ConditionalFormatting.Ranges" | "DashboardWebStringId.ConditionalFormatting.AverageType" | "DashboardWebStringId.ConditionalFormatting.Above" | "DashboardWebStringId.ConditionalFormatting.AboveOrEqual" | "DashboardWebStringId.ConditionalFormatting.Below" | "DashboardWebStringId.ConditionalFormatting.BelowOrEqual" | "DashboardWebStringId.ConditionalFormatting.StyleSettingsType" | "DashboardWebStringId.ConditionalFormatting.Positive" | "DashboardWebStringId.ConditionalFormatting.Negative" | "DashboardWebStringId.ConditionalFormatting.MinimumType" | "DashboardWebStringId.ConditionalFormatting.MaximumType" | "DashboardWebStringId.ConditionalFormatting.DateType" | "DashboardWebStringId.ConditionalFormatting.DateType.None" | "DashboardWebStringId.ConditionalFormatting.DateType.SpecificDate" | "DashboardWebStringId.ConditionalFormatting.DateType.BeyondThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.NextWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.Tomorrow" | "DashboardWebStringId.ConditionalFormatting.DateType.Today" | "DashboardWebStringId.ConditionalFormatting.DateType.Yesterday" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.LastWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.PriorThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.Empty" | "DashboardWebStringId.ConditionalFormatting.DateType.User" | "DashboardWebStringId.ConditionalFormatting.DateType.Beyond" | "DashboardWebStringId.ConditionalFormatting.DateType.ThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.ThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAfter1" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAfter2" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo1" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo2" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo3" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo4" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo5" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo6" | "DashboardWebStringId.ConditionalFormatting.DateType.Earlier" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeDataItem" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeCard" | "DashboardWebStringId.Colorization.NoSelectedSchema" | "DashboardWebStringId.Colorization.ColorSchemes" | "DashboardWebStringId.LayoutHasBeenChangedDialogMessage" | "DashboardWebStringId.SaveConfirmationDialogMessage" | "DashboardWebStringId.SaveChangesDialogMessage" | "DashboardWebStringId.Dialog.ChangeDataMemberMessage" | "DashboardWebStringId.Dialog.RemovedDataItemsMessage" | "DashboardWebStringId.Dialog.ConfirmChanges" | "DashboardWebStringId.Dialog.Save" | "DashboardWebStringId.Dialog.DoNotSave" | "DashboardWebStringId.Dialog.ButtonYes" | "DashboardWebStringId.Dialog.ButtonDontChange" | "DashboardWebStringId.Colorization.ColorSchemeType" | "DashboardWebStringId.Colorization.MeasureNames" | "DashboardWebStringId.Colorization.AddColor" | "DashboardWebStringId.Colorization.ValidationSelectMeasure" | "DashboardWebStringId.ColoringModeAuto" | "DashboardWebStringId.ColoringModeOff" | "DashboardWebStringId.ColoringModeOn" | "DashboardWebStringId.ColorScheme.Empty" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButton" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip" | "DashboardWebStringId.ConditionalFormatting.Miscellaneous" | "DashboardWebStringId.Dashboards" | "DashboardWebStringId.EditInDesigner" | "DashboardWebStringId.NoDashboards" | "DashboardWebStringId.AddNewDashboard" | "DashboardWebStringId.NewDashboard" | "DashboardWebStringId.Binding.Searching" | "DashboardWebStringId.Binding.EmptySearchResult" | "DashboardWebStringId.Errors.AttemptToLoadData" | "DashboardWebStringId.ConditionType" | "DashboardWebStringId.ConditionalFormatting.UnsupportedDataType" | "DashboardWebStringId.FormatRule" | "DashboardWebStringId.Notification.DashboardSaving" | "DashboardWebStringId.Notification.DashboardSaved" | "DashboardWebStringId.Notification.DashboardCanNotBeSaved" | "DashboardWebStringId.Notification.DashboardSavingIsNotAvailable" | "DashboardWebStringId.Notification.AttemptToLoadDashboards" | "DashboardWebStringId.Notification.DashboardLoading" | "DashboardWebStringId.Notification.AttemptToLoadDashboard" | "DashboardWebStringId.Notification.AttemptToConnectionStrings" | "DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode" | "DashboardWebStringId.Notification.AttemptToLoadParameterValues" | "DashboardWebStringId.Notification.AttemptToGetUnderlyingData" | "DashboardWebStringId.Notification.AttemptToConvertItemToType" | "DashboardWebStringId.Notification.AttemptToLoadDimensionUniqueValues" | "DashboardWebStringId.Notification.AttemptToLoadFieldListForDataSource" | "DashboardWebStringId.Notification.AttemptToGetColorScheme" | "DashboardWebStringId.Notification.NewDashboardCannotBeCreated" | "DashboardWebStringId.Notification.ErrorHasOccuredOn" | "DashboardWebStringId.Notification.UnsupportedDataSourceType" | "DashboardWebStringId.LimitVisibleData.DisplayAllDataTooltip" | "DashboardWebStringId.LimitVisibleData.IncreasePerformanceTooltip" | "DashboardWebStringId.ConditionalFormatting.Condition" | "DashboardWebStringId.CardLayout.MinWidth" | "DashboardWebStringId.CardLayout.MaxWidth" | "DashboardWebStringId.CardLayout.Editor.CardLayout" | "DashboardWebStringId.CardLayout.Editor.FormatOptions" | "DashboardWebStringId.CardLayout.LayoutOptions" | "DashboardWebStringId.CardLayout.ResetTemplate" | "DashboardWebStringId.CardLayout.ApplyToAllCards" | "DashboardWebStringId.Binding.ValuesPattern" | "DashboardWebStringId.Parameters.ParameterNameShouldBeUnique" | "DashboardWebStringId.Title.ImageEmbedded" | "DashboardWebStringId.Title.ImageLinked" | "DashboardWebStringId.Title.ImageNone" | "DashboardWebStringId.RangeFilter.SetDefaultCustomPeriod" | "DashboardWebStringId.RangeFilter.ClearDefaultCustomPeriod" | "DashboardWebStringId.MobileLayout.Back" | "DashboardWebStringId.MobileLayout.SwitchToViewer" | "DashboardWebStringId.Search" | "DashboardStringId.DefaultNameTabPage" | "DashboardStringId.DefaultNameChartPane" | "DashboardStringId.NewCalculatedFieldNamePrefix" | "DashboardStringId.NewParameterNamePrefix" | "AnalyticsCoreStringId.Parameter_Type_String" | "AnalyticsCoreStringId.Parameter_Type_DateTime" | "AnalyticsCoreStringId.Parameter_Type_Int16" | "AnalyticsCoreStringId.Parameter_Type_Int32" | "AnalyticsCoreStringId.Parameter_Type_Int64" | "AnalyticsCoreStringId.Parameter_Type_Float" | "AnalyticsCoreStringId.Parameter_Type_Double" | "AnalyticsCoreStringId.Parameter_Type_Decimal" | "AnalyticsCoreStringId.Parameter_Type_Boolean" | "AnalyticsCoreStringId.Parameter_Type_Guid" | "AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption" | "DataAccessUIStringId.FiltersView" | "DashboardStringId.SeriesTypeGroupArea" | "DashboardStringId.SeriesTypeGroupBar" | "DashboardStringId.SeriesTypeGroupBubble" | "DashboardStringId.SeriesTypeGroupFinancial" | "DashboardStringId.SeriesTypeGroupPointLine" | "DashboardStringId.SeriesTypeGroupRange" | "DashboardStringId.FunctionCategoryWindow" | "DashboardStringId.FunctionCategoryAggregate" | "DashboardStringId.FunctionCategoryAdvanced" | "DashboardStringId.FunctionDescriptionWindowAvg" | "DashboardStringId.FunctionDescriptionRunningMin" | "DashboardStringId.FunctionDescriptionTotal" | "DashboardStringId.FunctionDescriptionRankCompetition" | "DashboardStringId.FunctionDescriptionLookup" | "DashboardStringId.FunctionDescriptionRunningCount" | "DashboardStringId.FunctionDescriptionWindowMax" | "DashboardStringId.FunctionDescriptionVarp" | "DashboardStringId.FunctionDescriptionRunningAvg" | "DashboardStringId.FunctionDescriptionFirst" | "DashboardStringId.FunctionDescriptionWindowMin" | "DashboardStringId.FunctionDescriptionWindowStdDev" | "DashboardStringId.FunctionDescriptionLast" | "DashboardStringId.FunctionDescriptionWindowCount" | "DashboardStringId.FunctionDescriptionCountDistinct" | "DashboardStringId.FunctionDescriptionIndex" | "DashboardStringId.FunctionDescriptionWindowStdDevp" | "DashboardStringId.FunctionDescriptionWindowMode" | "DashboardStringId.FunctionDescriptionRunningMax" | "DashboardStringId.FunctionDescriptionRankPercentile" | "DashboardStringId.FunctionDescriptionRankDense" | "DashboardStringId.FunctionDescriptionWindowSum" | "DashboardStringId.FunctionDescriptionWindowCountDistinct" | "DashboardStringId.FunctionDescriptionStdDevp" | "DashboardStringId.FunctionDescriptionSize" | "DashboardStringId.FunctionDescriptionMedian" | "DashboardStringId.FunctionDescriptionRankModified" | "DashboardStringId.FunctionDescriptionWindowMedian" | "DashboardStringId.FunctionDescriptionRunningSum" | "DashboardStringId.FunctionDescriptionWindowVarp" | "DashboardStringId.FunctionDescriptionWindowVar" | "DashboardStringId.FunctionDescriptionStdDev" | "DashboardStringId.FunctionDescriptionRankUnique" | "DashboardStringId.FunctionDescriptionVar" | "DashboardStringId.FunctionDescriptionAggr" | "DashboardStringId.FunctionDescriptionAggrJoinRule" | "DashboardStringId.FunctionDescriptionWindowDefinition" | "DashboardStringId.FunctionDescriptionWindowDefinitionPartitionBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderAsc" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderDesc" | "DashboardStringId.AggregateExFunctionDescriptionCountNotNull" | "DashboardStringId.AggregateExFunctionDescriptionMode" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHour" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinute" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinuteSecond" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateMonthYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear2" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateQuarterYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetQuarter" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfMonth" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime3" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime4" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime5" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime6" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToBoolean" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToDateTime" | "DashboardStringId.SparklineIndicationModeLine" | "DashboardStringId.SparklineIndicationModeArea" | "DashboardStringId.SparklineIndicationModeBar" | "DashboardStringId.SparklineIndicationModeWinLoss" | "DashboardStringId.DefaultNameDateFilterItem" | "DashboardWebStringId.DateFilter.FilterType" | "DashboardWebStringId.DateFilter.FilterTypeExact" | "DashboardWebStringId.DateFilter.FilterTypeAfter" | "DashboardWebStringId.DateFilter.FilterTypeBefore" | "DashboardWebStringId.DateFilter.FilterTypeBetween" | "DashboardWebStringId.DateFilter.ArrangementMode" | "DashboardWebStringId.DateFilter.ArrangementModeAutoHeight" | "DashboardWebStringId.DateFilter.ArrangementModeHorizontal" | "DashboardWebStringId.DateFilter.ArrangementModeVertical" | "DashboardWebStringId.DateFilter.DatePickerLocation" | "DashboardWebStringId.DateFilter.DatePickerLocationFar" | "DashboardWebStringId.DateFilter.DatePickerLocationNear" | "DashboardWebStringId.DateFilter.DatePickerLocationHidden" | "DashboardStringId.DateFilterDisplayTextPattern" | "DashboardStringId.DateFilterDatePickerButtonDefaultText" | "DashboardStringId.FromDatePeriodCaption" | "DashboardStringId.ToDatePeriodCaption" | "DashboardStringId.FromToDatePeriodCaption" | "DashboardStringId.UniqueNameValidationMessage" | "DashboardStringId.GridTotalAutoTemplate" | "DashboardStringId.GridTotalValueTemplate" | "DashboardStringId.GridTotalTemplate" | "DashboardStringId.GridTotalTypeCount" | "DashboardStringId.GridTotalTypeMin" | "DashboardStringId.GridTotalTypeMax" | "DashboardStringId.GridTotalTypeAvg" | "DashboardStringId.GridTotalTypeSum" | "DashboardStringId.ActionShowDataInspector" | "DashboardStringId.InspectedData" | "DashboardStringId.InspectedTypeFormatString" | "DashboardStringId.AggregatedDataType" | "DashboardStringId.RawDataType" | "DashboardStringId.OLAPUnavailableRawData" | "DashboardStringId.SparklineValuesSeparator" | "DashboardStringId.SparklineArgumentValueSeparator" | "DashboardWebStringId.Grid.FilterClause.ApplyFilter" | "DashboardWebStringId.Grid.FilterClause.ResetOperation" | "DashboardWebStringId.Grid.FilterClause.Contains" | "DashboardWebStringId.Grid.FilterClause.DoesNotContain" | "DashboardWebStringId.Grid.FilterClause.StartsWith" | "DashboardWebStringId.Grid.FilterClause.EndsWith" | "DashboardWebStringId.Grid.FilterClause.Equals" | "DashboardWebStringId.Grid.FilterClause.DoesNotEqual" | "DashboardWebStringId.Grid.FilterClause.Less" | "DashboardWebStringId.Grid.FilterClause.Greater" | "DashboardWebStringId.Grid.FilterClause.LessOrEqual" | "DashboardWebStringId.Grid.FilterClause.GreaterOrEqual" | "DashboardWebStringId.Grid.FilterClause.Between" | "DashboardWebStringId.Grid.FilterClause.BetweenStart" | "DashboardWebStringId.Grid.FilterClause.BetweenEnd" | "DashboardWebStringId.AccordionTab.Content" | "DashboardWebStringId.TextBoxItemEditor.NoFields" | "DashboardWebStringId.TextBoxItemEditor.InsertField" | "DashboardWebStringId.TextBoxItemEditor.EditTextButton" | "DashboardWebStringId.TextBoxItemEditor.DialogCaption" | "DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose" | "DashboardWebStringId.TextBoxItemEditor.DialogClose" | "DashboardStringId.StartDate" | "DashboardStringId.EndDate" | "DashboardWebStringId.AccordionTab.MeasureFilter" | "DashboardStringId.FunctionDescriptionAggregateFilter" | "DashboardWebStringId.TabPages" | "DashboardWebStringId.More" | "DashboardStringId.MeasureFilterCaptionFormatString";
	    LastLevel: "DashboardStringId.ActionClearMasterFilter" | "DashboardStringId.ActionClearSelection" | "DashboardStringId.ActionOtherValues" | "DashboardStringId.ActionDrillUp" | "DashboardStringId.ActionExportTo" | "DashboardStringId.ActionExportToPdf" | "DashboardStringId.ActionExportToImage" | "DashboardStringId.ActionExportToExcel" | "DashboardStringId.RangeFilterCustomDateTimePeriod" | "DashboardStringId.ActionExportTemplate" | "DashboardStringId.ActionAllowMultiselection" | "DashboardStringId.DashboardNullValue" | "DashboardStringId.TopNOthersValue" | "DashboardStringId.DashboardErrorValue" | "DashboardStringId.DateTimeQuarterFormat" | "DashboardStringId.MessageLoading" | "DashboardStringId.ParametersFormCaption" | "DashboardStringId.ParametersSelectorText" | "DashboardStringId.ParametersFormAllowNullColumnCaption" | "DashboardStringId.ParametersFormValueColumnCaption" | "DashboardStringId.ParametersFormNameColumnCaption" | "DashboardStringId.ButtonOK" | "DashboardStringId.ButtonCancel" | "DashboardStringId.SelectDate" | "DashboardStringId.ButtonReset" | "DashboardStringId.ButtonSubmit" | "DashboardStringId.ButtonApply" | "DashboardStringId.ButtonExport" | "DashboardStringId.GridResetColumnWidths" | "DashboardStringId.GridSortAscending" | "DashboardStringId.GridSortDescending" | "DashboardStringId.GridClearSorting" | "DashboardStringId.PivotGridTotal" | "DashboardStringId.PivotGridGrandTotal" | "DashboardStringId.ChartTotalValue" | "DashboardStringId.PageLayout" | "DashboardStringId.PageLayoutAuto" | "DashboardStringId.PageLayoutPortrait" | "DashboardStringId.PageLayoutLandscape" | "DashboardStringId.PaperKind" | "DashboardStringId.PaperKindLetter" | "DashboardStringId.PaperKindLegal" | "DashboardStringId.PaperKindExecutive" | "DashboardStringId.PaperKindA5" | "DashboardStringId.PaperKindA4" | "DashboardStringId.PaperKindA3" | "DashboardStringId.ScaleMode" | "DashboardStringId.ScaleModeNone" | "DashboardStringId.ScaleModeUseScaleFactor" | "DashboardStringId.ScaleModeAutoFitToPagesWidth" | "DashboardStringId.AutoFitPageCount" | "DashboardStringId.ScaleFactor" | "DashboardStringId.PrintHeadersOnEveryPage" | "DashboardStringId.FitToPageWidth" | "DashboardStringId.SizeMode" | "DashboardStringId.SizeModeNone" | "DashboardStringId.SizeModeStretch" | "DashboardStringId.SizeModeZoom" | "DashboardStringId.AutoArrangeContent" | "DashboardStringId.ImageFormat" | "DashboardStringId.ExcelFormat" | "DashboardStringId.CsvValueSeparator" | "DashboardStringId.ExportFilters" | "DashboardStringId.ExportParameters" | "DashboardStringId.DashboardStatePosition" | "DashboardStringId.Resolution" | "DashboardStringId.ShowTitle" | "DashboardStringId.Title" | "DashboardStringId.FileName" | "DashboardStringId.FilterStatePresentationAfter" | "DashboardStringId.FilterStatePresentationAfterAndSplitPage" | "DashboardStringId.FilterStatePresentationSplitSheet" | "DashboardStringId.MessageCustomItemIsNotSupported" | "DashboardStringId.MessageGridHasNoData" | "DashboardStringId.MessagePivotHasNoData" | "DashboardStringId.SparklineTooltipStartValue" | "DashboardStringId.SparklineTooltipEndValue" | "DashboardStringId.SparklineTooltipMinValue" | "DashboardStringId.SparklineTooltipMaxValue" | "DashboardStringId.OpenCaption" | "DashboardStringId.HighCaption" | "DashboardStringId.LowCaption" | "DashboardStringId.CloseCaption" | "DashboardStringId.InitialExtent" | "DashboardStringId.FilterElementShowAllItem" | "DashboardStringId.NumericFormatUnitSymbolThousands" | "DashboardStringId.NumericFormatUnitSymbolMillions" | "DashboardStringId.NumericFormatUnitSymbolBillions" | "DashboardStringId.ActionSelectDateTimePeriod" | "DashboardStringId.RangeFilterSelectRange" | "DashboardStringId.FilterElementCheckedComboBoxNoDataCaption" | "DashboardStringId.FilterElementRadioComboBoxNoDataCaption" | "DashboardStringId.FilterElementNoDataToDisplay" | "DashboardStringId.RangeFilterSelectRangeFromCaption" | "DashboardStringId.RangeFilterSelectRangeToCaption" | "DashboardWebStringId.DashboardParameters" | "DashboardStringId.DataSourceDataMember" | "DashboardStringId.DescriptionMeasures" | "DashboardWebStringId.TextBoxFormatText" | "DashboardStringId.NumericFormatUnitCaption" | "DashboardWebStringId.SummaryType" | "DashboardStringId.CalculationTypeExpression" | "DevExpressWebStringId.CalculatedFieldDataType" | "DashboardStringId.ValueCaption" | "DashboardStringId.Value1Caption" | "DashboardStringId.Value2Caption" | "DashboardStringId.CommandFormatRuleTopBottom" | "DashboardStringId.CommandFormatRuleAboveBelowAverage" | "DashboardStringId.CommandFormatRuleBar" | "DashboardStringId.CommandFormatRuleColorRangeBar" | "DashboardStringId.CommandFormatRuleGradientRangeBar" | "DashboardStringId.FormatRuleStyleAppearance" | "DashboardStringId.FormatRuleStyleIcons" | "DashboardStringId.FormatRuleNegativeStyle" | "DashboardStringId.CommandFormatRuleExpression" | "DashboardWebStringId.TopNMode" | "DashboardStringId.CommandFormatRuleRangeSet" | "DashboardStringId.CommandFormatRuleValue" | "DashboardStringId.CommandFormatRuleDateOccurring" | "DashboardWebStringId.ConditionalFormatting.Appearance.BackColor" | "DashboardWebStringId.ConditionalFormatting.Appearance.ForeColor" | "DashboardStringId.DescriptionBoundImageAttribute" | "DashboardWebStringId.ShowCaptionText" | "DashboardWebStringId.DisplayItemAsPage" | "DashboardStringId.DefaultNameItemGroup" | "DashboardStringId.DefaultNameTabContainerItem" | "DashboardStringId.DefaultDataSourceName" | "DashboardWebStringId.CrossDataSourceFiltering" | "DashboardStringId.RangeFilterCalculationAlongSeries" | "DashboardStringId.RangeFilterCalculationAlongArgument" | "DashboardStringId.DescriptionItemSeries" | "DashboardStringId.DescriptionSeries" | "DashboardWebStringId.Chart.SeriesType" | "DashboardStringId.DescriptionDimensions" | "DashboardWebStringId.TreeView.AutoExpand" | "DashboardWebStringId.ConditionalFormatting.ConditionMinimum" | "DashboardWebStringId.ConditionalFormatting.ConditionMaximum" | "DashboardStringId.DescriptionItemDimension" | "DashboardStringId.DescriptionItemMeasure" | "DashboardWebStringId.Grid.MergeCells" | "DashboardWebStringId.Grid.ColumnWidthMode" | "DashboardWebStringId.Grid.BandedRows" | "DashboardWebStringId.Grid.VerticalLines" | "DashboardWebStringId.Grid.HorizontalLines" | "DashboardWebStringId.Grid.ColumnHeaders" | "DashboardWebStringId.Grid.WordWrap" | "DashboardStringId.ActualValueCaption" | "DashboardStringId.TargetValueCaption" | "DashboardStringId.UriPatternCaption" | "DashboardStringId.UriCaption" | "DashboardStringId.DisplayValueCaption" | "DashboardStringId.WeightCaption" | "DashboardStringId.DescriptionItemColor" | "DashboardStringId.Latitude" | "DashboardStringId.Longitude" | "DashboardWebStringId.GeoPointMapClusterization" | "DashboardWebStringId.MapLockNavigation" | "DashboardWebStringId.WeightedLegendGalleryGroup" | "DashboardStringId.DescriptionItemArgument" | "DashboardWebStringId.PieMapIsWeighted" | "DashboardWebStringId.InteractivityOptions.IgnoreMasterFilters" | "DashboardWebStringId.InteractivityOptions.DrillDown" | "DashboardWebStringId.Pie.ShowCaptions" | "DashboardStringId.DescriptionColumns" | "DashboardStringId.DescriptionRows" | "DashboardStringId.DescriptionValues" | "DashboardStringId.DescriptionArguments" | "DashboardStringId.TextGroupIntervalAlphabetical" | "DashboardStringId.ActionMaximizeDashboardItem" | "DashboardStringId.ActionRestoreDashboardItem" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataSource" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.ValueMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DisplayMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.SortOrder" | "DevExpress.DashboardCommon.DashboardParameter.Visible" | "DevExpress.DashboardCommon.DashboardParameter.Description" | "DevExpress.DashboardCommon.DashboardParameter.AllowMultiselect" | "DevExpress.DashboardCommon.DashboardParameter.AllowNull" | "DevExpress.DashboardCommon.DashboardParameter.SelectAllValues" | "DevExpress.DashboardCommon.StaticListLookUpSettings.Values" | "DevExpress.DashboardCommon.DimensionSortOrder.Ascending" | "DevExpress.DashboardCommon.DimensionSortOrder.Descending" | "DevExpress.DashboardCommon.DimensionSortOrder.None" | "DashboardWebStringId.AccordionTab.ScatterChartPointLabelOptions" | "DashboardWebStringId.AccordionTab.ChoroplethMapShapeLabelsAttribute" | "DashboardStringId.CommandFormatRuleTopN" | "DashboardWebStringId.Type" | "DashboardWebStringId.Grid.ColumnWidth" | "DashboardWebStringId.AccordionTab.ShowTotals" | "DashboardWebStringId.AccordionTab.Layout" | "DashboardWebStringId.AccordionTab.PivotInitialState" | "DashboardWebStringId.AccordionTab.ImageOptions" | "DashboardWebStringId.AccordionTab.Labels" | "DashboardWebStringId.AccordionTab.MapLegend" | "DashboardWebStringId.AccordionTab.WeightedLegend" | "DashboardWebStringId.AccordionTab.Common" | "DashboardWebStringId.AccordionTab.ChartLegend" | "DashboardWebStringId.Grid.AutoFitToContentsColumnWidthMode" | "DashboardWebStringId.Grid.AutoFitToGridColumnWidthMode" | "DashboardWebStringId.Grid.ManualGridColumnWidthMode" | "DashboardStringId.DateTimeIntervalYear" | "DashboardStringId.DateTimeIntervalQuarter" | "DashboardStringId.DateTimeIntervalMonth" | "DashboardStringId.DateTimeIntervalWeek" | "DashboardStringId.DateTimeIntervalDay" | "DashboardStringId.DateTimeIntervalHour" | "DashboardStringId.DateTimeIntervalMinute" | "DashboardStringId.DateTimeIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalYear" | "DashboardStringId.DateTimeGroupIntervalQuarter" | "DashboardStringId.DateTimeGroupIntervalMonth" | "DashboardStringId.DateTimeGroupIntervalDay" | "DashboardStringId.DateTimeGroupIntervalHour" | "DashboardStringId.DateTimeGroupIntervalMinute" | "DashboardStringId.DateTimeGroupIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalDayOfYear" | "DashboardStringId.DateTimeGroupIntervalDayOfWeek" | "DashboardStringId.DateTimeGroupIntervalWeekOfYear" | "DashboardStringId.DateTimeGroupIntervalWeekOfMonth" | "DashboardStringId.DateTimeGroupIntervalMonthYear" | "DashboardStringId.DateTimeGroupIntervalQuarterYear" | "DashboardStringId.DateTimeGroupIntervalWeekYear" | "DashboardStringId.DateTimeGroupIntervalDayMonthYear" | "DashboardStringId.DateTimeGroupIntervalDateHour" | "DashboardStringId.DateTimeGroupIntervalDateHourMinute" | "DashboardStringId.DateTimeGroupIntervalDateHourMinuteSecond" | "DashboardStringId.DateTimeGroupIntervalExactDate" | "DashboardStringId.GroupIntervalNone" | "DashboardWebStringId.Treemap.StripedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SquarifiedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SliceAndDiceLayoutAlgorithm" | "DashboardWebStringId.Treemap.TileLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.TileLabelsNone" | "DashboardWebStringId.Treemap.TileLabelsValue" | "DashboardWebStringId.Treemap.TileLabelsArgument" | "DashboardWebStringId.Treemap.TileTooltipsArgumentAndValue" | "DashboardWebStringId.Treemap.TileTooltipsArgument" | "DashboardWebStringId.Treemap.TileTooltipsValue" | "DashboardWebStringId.Treemap.TileTooltipsNone" | "DashboardWebStringId.Treemap.TopLeftToBottomRightLayoutDirection" | "DashboardWebStringId.Treemap.TopRightToBottomLeftLayoutDirection" | "DashboardWebStringId.Treemap.BottomLeftToTopRightLayoutDirection" | "DashboardWebStringId.Treemap.BottomRightToTopLeftLayoutDirection" | "DashboardWebStringId.Treemap.LayoutDirection" | "DashboardWebStringId.Treemap.GroupLabelsNone" | "DashboardWebStringId.Treemap.GroupLabelsArgument" | "DashboardWebStringId.Treemap.GroupLabelsValue" | "DashboardWebStringId.Treemap.GroupLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.GroupTooltipsNone" | "DashboardWebStringId.Treemap.GroupTooltipsArgument" | "DashboardWebStringId.Treemap.GroupTooltipsValue" | "DashboardWebStringId.Treemap.GroupTooltipsArgumentAndValue" | "DashboardStringId.RankOrderAscending" | "DashboardStringId.RankOrderDescending" | "DashboardStringId.DateTimeFormatYearFormatDefaultCaption" | "DashboardStringId.DateTimeFormatYearFormatFullCaption" | "DashboardStringId.DateTimeFormatYearFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatQuarterFormatDefaultCaption" | "DashboardStringId.DateTimeFormatQuarterFormatNumericCaption" | "DashboardStringId.DateTimeFormatQuarterFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatDefaultCaption" | "DashboardStringId.DateTimeFormatMonthFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatMonthFormatNumericCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatFullCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatNumericCaption" | "DashboardStringId.DateTimeFormatDateFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateFormatLongCaption" | "DashboardStringId.DateTimeFormatDateFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatLongCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption" | "DashboardStringId.ExactDateFormatYear" | "DashboardStringId.ExactDateFormatQuarter" | "DashboardStringId.ExactDateFormatMonth" | "DashboardStringId.ExactDateFormatDay" | "DashboardStringId.ExactDateFormatHour" | "DashboardStringId.ExactDateFormatMinute" | "DashboardStringId.ExactDateFormatSecond" | "DashboardWebStringId.FormatType" | "DashboardWebStringId.TopN.Top" | "DashboardWebStringId.TopN.Bottom" | "DashboardWebStringId.DimensionSortBy" | "DashboardStringId.NumericFormatUnitAutoCaption" | "DashboardStringId.NumericFormatFormatTypeAutoCaption" | "DashboardStringId.NumericFormatFormatTypeGeneralCaption" | "DashboardStringId.NumericFormatFormatTypeNumberCaption" | "DashboardStringId.NumericFormatFormatTypeCurrencyCaption" | "DashboardStringId.NumericFormatFormatTypeScientificCaption" | "DashboardStringId.NumericFormatFormatTypePercentCaption" | "DashboardStringId.NumericFormatUnitOnesCaption" | "DashboardStringId.NumericFormatUnitThousandsCaption" | "DashboardStringId.NumericFormatUnitMillionsCaption" | "DashboardStringId.NumericFormatUnitBillionsCaption" | "DashboardStringId.DeltaValueTypeActualValueCaption" | "DashboardStringId.DeltaValueTypeAbsoluteVariationCaption" | "DashboardStringId.DeltaValueTypePercentVariationCaption" | "DashboardStringId.DeltaValueTypePercentOfTargetCaption" | "DashboardStringId.DeltaValueTypeTargetValueCaption" | "DashboardStringId.DeltaIndicationModeGreaterIsGoodCaption" | "DashboardStringId.DeltaIndicationModeLessIsGoodCaption" | "DashboardStringId.DeltaIndicationModeWarningIfGreaterCaption" | "DashboardStringId.DeltaIndicationModeWarningIfLessCaption" | "DashboardStringId.DeltaIndicationModeNoIndicationCaption" | "DashboardStringId.DeltaThresholdTypeAbsolute" | "DashboardStringId.DeltaThresholdTypePercent" | "DashboardStringId.CommandDimensionGroupChildValues" | "DashboardStringId.SeriesTypeBar" | "DashboardStringId.SeriesTypeStackedBar" | "DashboardStringId.SeriesTypeFullStackedBar" | "DashboardStringId.SeriesTypePoint" | "DashboardStringId.SeriesTypeLine" | "DashboardStringId.SeriesTypeStackedLine" | "DashboardStringId.SeriesTypeFullStackedLine" | "DashboardStringId.SeriesTypeStepLine" | "DashboardStringId.SeriesTypeSpline" | "DashboardStringId.SeriesTypeArea" | "DashboardStringId.SeriesTypeStackedArea" | "DashboardStringId.SeriesTypeFullStackedArea" | "DashboardStringId.SeriesTypeStepArea" | "DashboardStringId.SeriesTypeSplineArea" | "DashboardStringId.SeriesTypeStackedSplineArea" | "DashboardStringId.SeriesTypeFullStackedSplineArea" | "DashboardWebStringId.Chart.ShowLegend" | "DashboardStringId.DefaultNameBoundImageItem" | "DashboardStringId.DefaultNameImageItem" | "DashboardStringId.DefaultNameTextBoxItem" | "DashboardStringId.DefaultNameCardItem" | "DashboardStringId.DefaultNameChartItem" | "DashboardStringId.DefaultNameComboBoxItem" | "DashboardStringId.DefaultNameListBoxItem" | "DashboardStringId.DefaultNameTreeViewItem" | "DashboardStringId.DefaultNameGaugeItem" | "DashboardStringId.DefaultNameGridItem" | "DashboardStringId.GridHyperlinkUriPatternErrorMessage" | "DashboardWebStringId.DefaultNameBubbleMapItem" | "DashboardWebStringId.DefaultNameChoroplethMapItem" | "DashboardWebStringId.DefaultNameGeoPointMapItem" | "DashboardWebStringId.DefaultNamePieMapItem" | "DashboardStringId.DefaultNamePieItem" | "DashboardStringId.DefaultNamePivotItem" | "DashboardStringId.DefaultNameRangeFilterItem" | "DashboardStringId.DefaultNameScatterChartItem" | "DashboardStringId.DefaultNameTreemapItem" | "DashboardStringId.DescriptionMaps" | "DashboardStringId.EntireRangePeriodCaption" | "DashboardStringId.CalculationTypePercentOfTotal" | "DashboardStringId.CalculationTypeDifference" | "DashboardStringId.CalculationTypePercentageDifference" | "DashboardStringId.CalculationTypeRunningTotal" | "DashboardStringId.CalculationTypeMovingCalculation" | "DashboardStringId.CalculationTypeRank" | "DashboardStringId.ColorPaletteIndex" | "DashboardStringId.DifferenceCalculationTargetPrevious" | "DashboardStringId.DifferenceCalculationTargetNext" | "DashboardStringId.DifferenceCalculationTargetFirst" | "DashboardStringId.DifferenceCalculationTargetLast" | "DashboardStringId.SummaryTypeCount" | "DashboardStringId.SummaryTypeSum" | "DashboardStringId.SummaryTypeMin" | "DashboardStringId.SummaryTypeMax" | "DashboardStringId.SummaryTypeAverage" | "DashboardStringId.SummaryTypeStdDev" | "DashboardStringId.SummaryTypeStdDevp" | "DashboardStringId.SummaryTypeVar" | "DashboardStringId.SummaryTypeVarp" | "DashboardStringId.SummaryTypeCountDistinct" | "DashboardStringId.SummaryTypeMedian" | "DashboardStringId.SummaryTypeMode" | "DashboardStringId.RankTypeUnique" | "DashboardStringId.RankTypeCompetition" | "DashboardStringId.RankTypeDense" | "DashboardStringId.RankTypeModified" | "DashboardStringId.RankTypePercentile" | "DashboardStringId.CardCalculationAlongCards" | "DashboardStringId.CardCalculationAlongSparklineArgument" | "DashboardStringId.CardCalculationAlongCardsAndSparklineArgument" | "DashboardStringId.CardCalculationAlongSparklineArgumentAndCards" | "DashboardStringId.ChartCalculationAlongArguments" | "DashboardStringId.ChartCalculationAlongSeries" | "DashboardStringId.ChartCalculationAlongArgumentsAndSeries" | "DashboardStringId.ChartCalculationAlongSeriesAndArguments" | "DashboardStringId.GridCalculationAlongRows" | "DashboardStringId.GridCalculationAlongSparklineArgument" | "DashboardStringId.GridCalculationAlongRowsAndSparklineArgument" | "DashboardStringId.GridCalculationAlongSparklineArgumentAndRows" | "DashboardStringId.PivotCalculationAlongColumns" | "DashboardStringId.PivotCalculationAlongRows" | "DashboardStringId.PivotCalculationAlongColumnsAndRows" | "DashboardStringId.PivotCalculationAlongRowsAndColumns" | "DashboardStringId.PivotCalculationAlongGroupsInColumns" | "DashboardStringId.PivotCalculationAlongGroupsInRows" | "DashboardStringId.PivotCalculationAlongGroupsInColumnsAndRows" | "DashboardStringId.PivotCalculationAlongGroupsInRowsAndColumns" | "DashboardStringId.PieCalculationAlongArguments" | "DashboardStringId.PieCalculationAlongSeries" | "DashboardStringId.PieCalculationAlongArgumentsAndSeries" | "DashboardStringId.PieCalculationAlongSeriesAndArguments" | "DashboardStringId.RangeFilterCalculationAlongArgumentAndSeries" | "DashboardStringId.RangeFilterCalculationAlongSeriesAndArgument" | "DashboardStringId.GaugeCalculationAlongGauges" | "DashboardStringId.ScatterCalculationAlongArguments" | "DashboardStringId.CalculationAlongSpecificDimensions" | "DashboardStringId.CalculatedFieldTypeString" | "DashboardStringId.CalculatedFieldTypeLong" | "DashboardStringId.CalculatedFieldTypeDecimal" | "DashboardStringId.CalculatedFieldTypeBoolean" | "DashboardStringId.CalculatedFieldTypeDateTime" | "DashboardStringId.CalculatedFieldTypeDouble" | "DashboardStringId.CalculatedFieldTypeAuto" | "DashboardStringId.CalculatedFieldTypeObject" | "DashboardStringId.DefaultEFDataSourceName" | "DashboardStringId.DefaultExcelDataSourceName" | "DashboardStringId.DefaultFileExtractDataSourceName" | "DashboardStringId.DefaultObjectDataSourceName" | "DashboardStringId.DefaultOlapDataSourceName" | "DashboardStringId.DefaultSqlDataSourceName" | "DashboardStringId.DefaultJsonDataSourceName" | "DashboardStringId.DefaultXpoDataSourceName" | "DashboardStringId.OlapRaggedHierarchyNoneItemCaption" | "DashboardStringId.FormatRuleApplyToColumn" | "DashboardStringId.SeriesTypeSideBySideRangeBar" | "DashboardStringId.SeriesTypeRangeArea" | "DashboardStringId.SeriesTypeHighLowClose" | "DashboardStringId.SeriesTypeCandleStick" | "DashboardStringId.SeriesTypeStock" | "DashboardWebStringId.StyleSettings" | "DashboardStringId.ParametersFormCalendarTodayButton" | "DashboardStringId.TreemapLabelArgumentTemplate" | "DashboardStringId.TreemapLabelValueTemplate" | "DashboardStringId.SearchNullValuePrompt" | "DashboardStringId.CustomItems" | "DashboardStringId.FormatRuleAllowNegativeAxis" | "DashboardStringId.FormatRuleDrawAxis" | "DashboardStringId.FormatRuleShowBarOnly" | "DashboardStringId.CommandFormatRuleBottomN" | "DashboardStringId.FormatConditionAppearanceNone" | "DashboardStringId.FormatConditionAppearanceCustom" | "DashboardStringId.FormatConditionAppearancePaleRed" | "DashboardStringId.FormatConditionAppearancePaleYellow" | "DashboardStringId.FormatConditionAppearancePaleGreen" | "DashboardStringId.FormatConditionAppearancePaleBlue" | "DashboardStringId.FormatConditionAppearancePalePurple" | "DashboardStringId.FormatConditionAppearancePaleCyan" | "DashboardStringId.FormatConditionAppearancePaleOrange" | "DashboardStringId.FormatConditionAppearancePaleGray" | "DashboardStringId.FormatConditionAppearanceRed" | "DashboardStringId.FormatConditionAppearanceYellow" | "DashboardStringId.FormatConditionAppearanceGreen" | "DashboardStringId.FormatConditionAppearanceBlue" | "DashboardStringId.FormatConditionAppearancePurple" | "DashboardStringId.FormatConditionAppearanceCyan" | "DashboardStringId.FormatConditionAppearanceOrange" | "DashboardStringId.FormatConditionAppearanceGray" | "DashboardStringId.FormatConditionAppearanceGradientRed" | "DashboardStringId.FormatConditionAppearanceGradientYellow" | "DashboardStringId.FormatConditionAppearanceGradientGreen" | "DashboardStringId.FormatConditionAppearanceGradientBlue" | "DashboardStringId.FormatConditionAppearanceGradientPurple" | "DashboardStringId.FormatConditionAppearanceGradientCyan" | "DashboardStringId.FormatConditionAppearanceGradientOrange" | "DashboardStringId.FormatConditionAppearanceGradientTransparent" | "DashboardStringId.FormatConditionAppearanceFontBold" | "DashboardStringId.FormatConditionAppearanceFontItalic" | "DashboardStringId.FormatConditionAppearanceFontUnderline" | "DashboardStringId.FormatConditionAppearanceFontGrayed" | "DashboardStringId.FormatConditionAppearanceFontRed" | "DashboardStringId.FormatConditionAppearanceFontYellow" | "DashboardStringId.FormatConditionAppearanceFontGreen" | "DashboardStringId.FormatConditionAppearanceFontBlue" | "DashboardStringId.IntersectionLevelModeFirst" | "DashboardStringId.IntersectionLevelModeLast" | "DashboardStringId.IntersectionLevelModeAuto" | "DashboardStringId.IntersectionLevelModeAll" | "DashboardStringId.IntersectionLevelModeSpecific" | "DashboardStringId.FormatRuleApplyToRow" | "DashboardStringId.FormatRuleApplyTo" | "DashboardWebStringId.FilterItem.AllowEmptyFilter" | "DashboardStringId.FormatConditionAppearanceFontStrikeout" | "DashboardStringId.FormatConditionAutomaticValueType" | "DashboardStringId.FormatConditionNumberValueType" | "DashboardStringId.FormatConditionPercentValueType" | "DashboardStringId.CommandFormatRuleRangeIcons" | "DashboardStringId.CommandFormatRuleGreaterThan" | "DashboardStringId.CommandFormatRuleGreaterThanOrEqualTo" | "DashboardStringId.CommandFormatRuleLessThan" | "DashboardStringId.CommandFormatRuleLessThanOrEqualTo" | "DashboardStringId.CommandFormatRuleEqualTo" | "DashboardStringId.CommandFormatRuleNotEqualTo" | "DashboardStringId.CommandFormatRuleBetween" | "DashboardStringId.CommandFormatRuleNotBetween" | "DashboardStringId.CommandFormatRuleBetweenOrEqual" | "DashboardStringId.CommandFormatRuleNotBetweenOrEqual" | "DashboardStringId.CommandFormatRuleContains" | "DashboardStringId.ColorAutoAssigned" | "DashboardStringId.CalculationTypeNone" | "DashboardStringId.UndoText" | "DashboardStringId.RedoText" | "DashboardStringId.DashboardCurrencyUseCurrentCurrency" | "DashboardStringId.CommandDimensionSortModeDisplayText" | "DashboardStringId.CommandDimensionSortModeValue" | "DashboardStringId.CommandDimensionSortModeID" | "DashboardStringId.CommandDimensionSortModeKey" | "DashboardWebStringId.Chart.AddPane" | "DashboardStringId.MapShapeNoneAttribute" | "DashboardStringId.DefaultPeriodName" | "DashboardStringId.CardLayoutTemplateStretchedCaption" | "DashboardStringId.CardLayoutTemplateCenteredCaption" | "DashboardStringId.CardLayoutTemplateCompactCaption" | "DashboardStringId.CardLayoutTemplateLightweightCaption" | "DashboardStringId.CardLayoutTemplateCustomCaption" | "DashboardStringId.CardLayoutTemplateNoneCaption" | "DashboardStringId.CardRowDataElementTypeTitleCaption" | "DashboardStringId.CardRowDataElementTypeSubtitleCaption" | "DashboardStringId.CardRowDataElementTypeActualValueCaption" | "DashboardStringId.CardRowDataElementTypeTargetValueCaption" | "DashboardStringId.CardRowDataElementTypeAbsoluteVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentOfTargetCaption" | "DashboardStringId.CardRowDataElementTypeDimensionValueCaption" | "DashboardStringId.CardRowDataElementTypeCardNameCaption" | "DashboardStringId.CardRowDataElementTypeDeltaIndicatorCaption" | "DashboardStringId.CardRowDataElementTypeSparklineCaption" | "DashboardStringId.FormatRuleApplyToAllElements" | "DashboardWebStringId.Pie.LabelPosition" | "DashboardWebStringId.Pie.LabelPositionOutside" | "DashboardWebStringId.Pie.LabelPositionInside" | "DashboardStringId.IncludeExportDashboardState" | "DashboardStringId.PointLabelContentTypeArgument" | "DashboardStringId.PointLabelContentTypeSeriesName" | "DashboardStringId.PointLabelContentTypeValue" | "DashboardStringId.PointLabelContentTypePercent" | "DashboardWebStringId.DashboardMenu" | "DashboardWebStringId.DashboardMenuNew" | "DashboardWebStringId.DashboardMenuOpen" | "DashboardWebStringId.DashboardMenuSave" | "DashboardWebStringId.DashboardMenuCurrency" | "DashboardWebStringId.DashboardMenuDataSources" | "DashboardWebStringId.DashboardMenuColorScheme" | "DashboardWebStringId.DashboardMenuNewDashboardCreate" | "DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder" | "DashboardWebStringId.Binding.DefaultEmptyPlaceholder" | "DashboardWebStringId.Binding.DefaultSelectedPlaceholder" | "DashboardWebStringId.Binding.DataFiltering" | "DashboardWebStringId.Binding.Argument" | "DashboardWebStringId.Binding.Attribute" | "DashboardWebStringId.Binding.Sparkline" | "DashboardWebStringId.Binding.Columns" | "DashboardWebStringId.Binding.TooltipDimensions" | "DashboardWebStringId.Binding.TooltipMeasures" | "DashboardWebStringId.Binding.HiddenDimensions" | "DashboardWebStringId.Binding.HiddenMeasures" | "DashboardWebStringId.Binding.AddDimension" | "DashboardWebStringId.Binding.AddMeasure" | "DashboardWebStringId.Binding.AddColumn" | "DashboardWebStringId.Binding.AddRow" | "DashboardWebStringId.Binding.AddValue" | "DashboardWebStringId.Binding.AddSeries" | "DashboardWebStringId.Binding.SetLatitude" | "DashboardWebStringId.Binding.SetLongitude" | "DashboardWebStringId.Binding.SetArgument" | "DashboardWebStringId.Binding.AddArgument" | "DashboardWebStringId.Binding.SetWeight" | "DashboardWebStringId.Binding.SetColor" | "DashboardWebStringId.Binding.SetAttribute" | "DashboardWebStringId.Binding.SetValue" | "DashboardWebStringId.Binding.XAxis" | "DashboardWebStringId.Binding.YAxis" | "DashboardWebStringId.Binding.ConfigureDimension" | "DashboardWebStringId.Binding.ConfigureMeasure" | "DashboardWebStringId.Binding.ConfigureSeries" | "DashboardWebStringId.Binding.ConfigureArgument" | "DashboardWebStringId.Binding.ConfigureValue" | "DashboardWebStringId.Binding.ConfigureAttribute" | "DashboardWebStringId.Binding.ConfigureLatitude" | "DashboardWebStringId.Binding.ConfigureLongitude" | "DashboardWebStringId.Binding.ConfigureColumn" | "DashboardWebStringId.Binding.ConfigureRow" | "DashboardWebStringId.Binding.ConfigureWeight" | "DashboardWebStringId.Binding.ConfigureColor" | "DashboardWebStringId.Binding.ShowAll" | "DashboardWebStringId.ColorScheme.Color" | "DashboardWebStringId.ColorScheme.Colors" | "DashboardWebStringId.Parameters.ParameterList" | "DashboardWebStringId.Parameters.AddParameter" | "DashboardWebStringId.Parameters.AddParameter.Tooltip" | "DashboardWebStringId.Parameters.NoSelectedParameter" | "DashboardWebStringId.Parameters.Reorder" | "DashboardWebStringId.Parameters.Done" | "DashboardWebStringId.Currency.Currency" | "DashboardWebStringId.Currency.CurrencyCulture" | "DashboardWebStringId.Currency.DefaultCurrencyWarning" | "DashboardWebStringId.Preview" | "DashboardWebStringId.Add" | "DashboardWebStringId.DataSources.UsedDataSources" | "DashboardWebStringId.DataSources.DataItems" | "DashboardWebStringId.DataSources.AddQuery" | "DashboardWebStringId.DataSources.AddCalculatedField" | "DashboardWebStringId.DataSources.AddDataSource" | "DashboardWebStringId.DataSources.NoUsedDataSources" | "DashboardWebStringId.DataSources.NoAvailableDataSources" | "DashboardWebStringId.DataSources.ChooseDataSource" | "DashboardWebStringId.DataSources.CreateDataSource" | "DashboardWebStringId.DataSources.CreateNewDataSource" | "DashboardWebStringId.DataSources.CreateDataSource.Tooltip" | "DashboardWebStringId.DataSources.EditCalculatedField" | "DashboardWebStringId.DataSources.CalculatedField.Name" | "DashboardWebStringId.DataSources.CalculatedField.FieldType" | "DashboardWebStringId.DataSources.CalculatedField.UniqueNameError" | "DashboardWebStringId.DataSources.CalculatedField.Corrupted" | "DashboardWebStringId.DataSources.Edit" | "DashboardStringId.MessageCollectionTypesNotSupported" | "DashboardWebStringId.New.DashboardName" | "DashboardWebStringId.Bindings" | "DashboardWebStringId.Interactivity" | "DashboardWebStringId.Options" | "DashboardWebStringId.Remove" | "DashboardWebStringId.MasterFilterMode" | "DashboardWebStringId.Title.Text" | "DashboardWebStringId.Title.Visible" | "DashboardWebStringId.Title.IncludeMasterFilter" | "DashboardWebStringId.Title.Aligment" | "DashboardWebStringId.Title.Image" | "DashboardWebStringId.DataSources.Cancel" | "DashboardWebStringId.DataSources.IncludeToTheDashboard" | "DashboardWebStringId.DataSources.AvailableDataSourcesError" | "DashboardWebStringId.DataSources.DashboardDataSourceWizard" | "DashboardWebStringId.Viewer" | "DashboardWebStringId.Loading" | "DashboardWebStringId.ClickHereInvitation" | "DashboardWebStringId.BindDataInvitation" | "DashboardWebStringId.AddItemInvitation" | "DashboardWebStringId.Parameters.Values" | "DashboardWebStringId.Binding.Cards" | "DashboardWebStringId.Binding.AddCard" | "DashboardWebStringId.Binding.ConfigureCard" | "DashboardWebStringId.Binding.AddValues" | "DashboardWebStringId.Binding.ConfigureValues" | "DashboardWebStringId.Binding.Maps" | "DashboardWebStringId.Binding.AddMap" | "DashboardWebStringId.Binding.ConfigureMap" | "DashboardWebStringId.Binding.Gauges" | "DashboardWebStringId.Binding.AddGauge" | "DashboardWebStringId.Binding.ConfigureGauge" | "DashboardWebStringId.InteractivityOptions" | "DashboardWebStringId.Binding.Values" | "DashboardWebStringId.Binding.RemovePane" | "DashboardWebStringId.ClickToSetFilterCriteria" | "DashboardWebStringId.DataSources.OK" | "DashboardWebStringId.DataSources.Save" | "DashboardWebStringId.Cards.ArrangementMode" | "DashboardWebStringId.Cards.ArrangementMode.Auto" | "DashboardWebStringId.Cards.ArrangementMode.FixedRows" | "DashboardWebStringId.Cards.ArrangementMode.FixedColumns" | "DashboardWebStringId.Cards.LineCount" | "DashboardWebStringId.ConditionalFormatting" | "DashboardWebStringId.CollectionEditor.NoItems" | "DashboardWebStringId.CollectionEditor.Totals.NoItems" | "DashboardWebStringId.CollectionEditor.Parameters.NoItems" | "DashboardWebStringId.PivotGrid.AutoExpandColumnGroups" | "DashboardWebStringId.PivotGrid.AutoExpandRowGroups" | "DashboardWebStringId.PivotGrid.ColumnGrandTotals" | "DashboardWebStringId.PivotGrid.RowGrandTotals" | "DashboardWebStringId.PivotGrid.ColumnTotals" | "DashboardWebStringId.PivotGrid.RowTotals" | "DashboardWebStringId.PivotGrid.ValuesPosition" | "DashboardWebStringId.PivotGrid.ValuesPositionColumns" | "DashboardWebStringId.PivotGrid.ValuesPositionRows" | "DashboardWebStringId.PivotGrid.RowTotalsPosition" | "DashboardWebStringId.PivotGrid.RowTotalsPositionBottom" | "DashboardWebStringId.PivotGrid.RowTotalsPositionTop" | "DashboardWebStringId.PivotGrid.ColumnTotalsPosition" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionFar" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionNear" | "DashboardWebStringId.PivotGrid.LayoutType" | "DashboardWebStringId.PivotGrid.LayoutTypeCompact" | "DashboardWebStringId.PivotGrid.LayoutTypeTabular" | "DashboardWebStringId.Options.Caption" | "DashboardWebStringId.InteractivityOptions.IsMasterFilter" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.None" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Single" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Multiple" | "DashboardWebStringId.InteractivityOptions.TargetDimensions" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Arguments" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Series" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Points" | "DashboardWebStringId.ColoringOptions" | "DashboardWebStringId.DataSources.Filter" | "DashboardWebStringId.Chart.Rotated" | "DashboardWebStringId.Chart.Panes" | "DashboardWebStringId.Chart.Legend" | "DashboardWebStringId.Chart.AxisX" | "DashboardWebStringId.Chart.AxisY" | "DashboardWebStringId.Chart.AxisYSecondary" | "DashboardWebStringId.Chart.PointLabelOptions" | "DashboardWebStringId.Chart.AxisXMeasure" | "DashboardWebStringId.Chart.AxisYMeasure" | "DashboardWebStringId.Chart.Weight" | "DashboardWebStringId.Chart.Content" | "DashboardWebStringId.Chart.ArgumentAndWeight" | "DashboardWebStringId.Chart.ArgumentAndValues" | "DashboardWebStringId.Chart.Reverse" | "DashboardWebStringId.Chart.Visible" | "DashboardWebStringId.Chart.Title" | "DashboardWebStringId.Chart.TitleText" | "DashboardWebStringId.Chart.EnableZooming" | "DashboardWebStringId.Chart.LimitVisiblePoints" | "DashboardWebStringId.Chart.VisiblePointsCount" | "DashboardWebStringId.Chart.AlwaysShowZeroLevel" | "DashboardWebStringId.Chart.GridLines" | "DashboardWebStringId.Chart.LogarithmicScale" | "DashboardWebStringId.Chart.LogarithmicScaleBase" | "DashboardWebStringId.Chart.LogarithmicScaleBase2" | "DashboardWebStringId.Chart.LogarithmicScaleBase5" | "DashboardWebStringId.Chart.LogarithmicScaleBase10" | "DashboardWebStringId.Chart.Position" | "DashboardWebStringId.Chart.IsInsideOfDiagram" | "DashboardWebStringId.Chart.PrimaryAxisY" | "DashboardWebStringId.Chart.SecondaryAxisY" | "DashboardWebStringId.Chart.Name" | "DashboardWebStringId.Chart.PlotOnSecondaryAxis" | "DashboardWebStringId.Chart.IgnoreEmptyPoints" | "DashboardWebStringId.Chart.ShowPointMarkers" | "DashboardWebStringId.Chart.Value" | "DashboardWebStringId.Chart.ShowZeroValues" | "DashboardWebStringId.Chart.OverlappingMode" | "DashboardWebStringId.Chart.Orientation" | "DashboardWebStringId.Chart.ShowPointLablels" | "DashboardWebStringId.Chart.TooltipContent" | "DashboardWebStringId.Chart.LabelContent" | "DashboardWebStringId.Card.SparklineOptions" | "DashboardWebStringId.Card.SparklineVisible" | "DashboardWebStringId.Chart.Position.TopLeftVertical" | "DashboardWebStringId.Chart.Position.TopLeftHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterHorizontal" | "DashboardWebStringId.Chart.Position.TopRightVertical" | "DashboardWebStringId.Chart.Position.TopRightHorizontal" | "DashboardWebStringId.Chart.Position.BottomLeftVertical" | "DashboardWebStringId.Chart.Position.BottomLeftHorizontal" | "DashboardWebStringId.Chart.Position.BottomCenterHorizontal" | "DashboardWebStringId.Chart.Position.BottomRightVertical" | "DashboardWebStringId.Chart.Position.BottomRightHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterVertical" | "DashboardWebStringId.Chart.Position.BottomCenterVertical" | "DashboardWebStringId.FilterItem.Type" | "DashboardWebStringId.FilterItem.Type.Standard" | "DashboardWebStringId.FilterItem.Type.Checked" | "DashboardWebStringId.FilterItem.Type.Radio" | "DashboardWebStringId.FilterItem.ShowAllValue" | "DashboardWebStringId.FilterItem.EnableSearch" | "DashboardWebStringId.Gauge.Min" | "DashboardWebStringId.Gauge.Max" | "DashboardWebStringId.Gauge.ScaleOptions" | "DashboardWebStringId.Gauge.Type" | "DashboardWebStringId.Gauge.Type.FullQuarterGauge" | "DashboardWebStringId.Gauge.Type.HalfCircular" | "DashboardWebStringId.Gauge.Type.LeftQuarterCircular" | "DashboardWebStringId.Gauge.Type.RightQuarterCircular" | "DashboardWebStringId.Gauge.Type.ThreeFourthCircular" | "DashboardWebStringId.Gauge.Type.LinearHorizontal" | "DashboardWebStringId.Gauge.Type.LinearVertical" | "DashboardWebStringId.Gauge.Captions" | "DashboardWebStringId.Gauge.Scale.Custom" | "DashboardWebStringId.Gauge.Scale.Auto" | "DashboardWebStringId.Grid.ColumnType" | "DashboardWebStringId.Grid.DisplayMode" | "DashboardWebStringId.Grid.DisplayMode.Value" | "DashboardWebStringId.Grid.DisplayMode.Bar" | "DashboardWebStringId.Grid.DisplayMode.Text" | "DashboardWebStringId.Grid.DisplayMode.Image" | "DashboardWebStringId.Grid.FixedWidth" | "DashboardWebStringId.Grid.WidthType" | "DashboardWebStringId.Grid.WidthType.Weight" | "DashboardWebStringId.Grid.WidthType.FitToContent" | "DashboardWebStringId.Grid.DeltaOptions" | "DashboardWebStringId.Grid.ShowStartEndValues" | "DashboardWebStringId.Grid.TotalType" | "DashboardWebStringId.Grid.Dimension" | "DashboardWebStringId.Grid.Measure" | "DashboardWebStringId.Grid.Delta" | "DashboardWebStringId.Grid.Sparkline" | "DashboardWebStringId.Grid.Hyperlink" | "DashboardWebStringId.Grid.Options" | "DashboardWebStringId.Map.ShapeFileLoaded" | "DashboardWebStringId.Map.AttributeFileLoaded" | "DashboardWebStringId.Map.ValueMap" | "DashboardWebStringId.Map.DeltaMap" | "DashboardWebStringId.Map.TooltipCaption" | "DashboardWebStringId.Map.TooltipActualValueCaption" | "DashboardWebStringId.Map.TooltipDeltaCaption" | "DashboardWebStringId.Map.CustomMapOptions" | "DashboardWebStringId.Map.CustomMapOptionsSource" | "DashboardWebStringId.Map.CustomMapOptionsUrl" | "DashboardWebStringId.Map.CustomMapOptionsFile" | "DashboardWebStringId.Map.CustomMapUrl" | "DashboardWebStringId.Map.CustomMapFile" | "DashboardWebStringId.Map.CustomAttributeFile" | "DashboardWebStringId.Map.AttributeDimension" | "DashboardWebStringId.Map.IncludeSummaryValueToShapeTitle" | "DashboardWebStringId.Map.AttributeName" | "DashboardWebStringId.Map.TooltipAttribute" | "DashboardWebStringId.Map.TooltipDimensions" | "DashboardWebStringId.Map.Area.Custom" | "DashboardWebStringId.Map.Area.WorldCountries" | "DashboardWebStringId.Map.Area.Europe" | "DashboardWebStringId.Map.Area.Asia" | "DashboardWebStringId.Map.Area.NorthAmerica" | "DashboardWebStringId.Map.Area.SouthAmerica" | "DashboardWebStringId.Map.Area.Africa" | "DashboardWebStringId.Map.Area.USA" | "DashboardWebStringId.Map.Area.Canada" | "DashboardWebStringId.Map.Viewport" | "DashboardWebStringId.Map.ShapeTitleAttribute" | "DashboardWebStringId.Map.UseBindingAttribute" | "DashboardWebStringId.Map.WeightedLegendType" | "DashboardWebStringId.Map.WeightedLegendType.Linear" | "DashboardWebStringId.Map.WeightedLegendType.Nested" | "DashboardWebStringId.Map.Orientation.Vertical" | "DashboardWebStringId.Map.Orientation.Horizontal" | "DashboardWebStringId.Map.Position.TopLeft" | "DashboardWebStringId.Map.Position.TopCenter" | "DashboardWebStringId.Map.Position.TopRight" | "DashboardWebStringId.Map.Position.BottomLeft" | "DashboardWebStringId.Map.Position.BottomCenter" | "DashboardWebStringId.Map.Position.BottomRight" | "DashboardWebStringId.Map.Viewport.TopLatitude" | "DashboardWebStringId.Map.Viewport.LeftLongitude" | "DashboardWebStringId.Map.Viewport.RightLongitude" | "DashboardWebStringId.Map.Viewport.BottomLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLongitude" | "DashboardWebStringId.Map.Viewport.CreateViewerPaddings" | "DashboardWebStringId.Map.ShowLegend" | "DashboardWebStringId.Pie.Type" | "DashboardWebStringId.Pie" | "DashboardWebStringId.Pie.Donut" | "DashboardWebStringId.Pie.LabelContentType.None" | "DashboardWebStringId.Pie.LabelContentType.Argument" | "DashboardWebStringId.Pie.LabelContentType.Percent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndPercent" | "DashboardWebStringId.Pie.LabelContentType.Value" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndValue" | "DashboardWebStringId.Pie.LabelContentType.ValueAndPercent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentValueAndPercent" | "DashboardWebStringId.Image.BindingMode" | "DashboardWebStringId.Image.BindingMode.BinaryArray" | "DashboardWebStringId.Image.BindingMode.Uri" | "DashboardWebStringId.RangeFilter.UriPattern" | "DashboardWebStringId.Image.SizeMode.Clip" | "DashboardWebStringId.Image.SizeMode.Stretch" | "DashboardWebStringId.Image.SizeMode.Zoom" | "DashboardWebStringId.Image.SizeMode.Squeeze" | "DashboardWebStringId.Image.HorizontalAlignment" | "DashboardWebStringId.Image.VerticalAlignment" | "DashboardWebStringId.Image.Alignment.Left" | "DashboardWebStringId.Image.Alignment.Center" | "DashboardWebStringId.Image.Alignment.Right" | "DashboardWebStringId.Image.Alignment.Top" | "DashboardWebStringId.Image.Alignment.Bottom" | "DashboardWebStringId.SeriesItem.SeriesDimensions" | "DashboardWebStringId.TextBox.Text" | "DashboardWebStringId.Chart.Orientation.Default" | "DashboardWebStringId.Chart.Orientation.RotateRight" | "DashboardWebStringId.Chart.Orientation.RotateLeft" | "DashboardWebStringId.Chart.OverlappingMode.Hide" | "DashboardWebStringId.Chart.OverlappingMode.None" | "DashboardWebStringId.Chart.Position.Outside" | "DashboardWebStringId.Chart.Position.Inside" | "DashboardWebStringId.Chart.SeriesType.Weighted" | "DashboardWebStringId.Coloring.MeasuresColoringMode" | "DashboardWebStringId.Coloring.Global" | "DashboardWebStringId.Coloring.Local" | "DashboardWebStringId.Delta.ValueType" | "DashboardWebStringId.Delta.ResultIndication" | "DashboardWebStringId.Delta.ThresholdType" | "DashboardWebStringId.Delta.ThresholdValue" | "DashboardWebStringId.Sparkline.ViewType" | "DashboardWebStringId.Sparkline.HighlightMinMaxPoints" | "DashboardWebStringId.Sparkline.HighlightStartEndPoints" | "DashboardWebStringId.Title.Aligment.Left" | "DashboardWebStringId.Title.Aligment.Center" | "DashboardWebStringId.Parameters.LookUpSettingsType.NoLookUp" | "DashboardWebStringId.Parameters.LookUpSettingsType.StaticList" | "DashboardWebStringId.Parameters.LookUpSettingsType.DynamicList" | "DashboardWebStringId.Parameters.LookUpSettingsType" | "DashboardWebStringId.Parameters.DefaultValue" | "DashboardWebStringId.DataItem" | "DashboardWebStringId.DataItem.Precision" | "DashboardWebStringId.DataItem.IncludeGroupSeparator" | "DashboardWebStringId.DataItem.ShowValues" | "DashboardWebStringId.DataItem.ShowTotals" | "DashboardWebStringId.DataItem.ShowGrandTotals" | "DashboardWebStringId.Dialog.ConfirmSaving" | "DashboardWebStringId.Dimension.GroupInterval" | "DashboardWebStringId.Dimension.SortMode" | "DashboardWebStringId.Dialog.ArgumentMode" | "DashboardWebStringId.Calculations" | "DashboardWebStringId.Calculations.Expression" | "DashboardWebStringId.Calculations.DifferenceCalculation" | "DashboardWebStringId.Calculations.Moving" | "DashboardWebStringId.Calculations.RunningTotal" | "DashboardWebStringId.Calculations.PercentOfTotal" | "DashboardWebStringId.Calculations.Rank" | "DashboardWebStringId.Calculations.DefinitionMode" | "DashboardWebStringId.Calculations.WindowDefinition" | "DashboardWebStringId.Calculations.WindowDefinitionModeSpecific" | "DashboardWebStringId.Calculations.WindowDefinitionModePredefined" | "DashboardWebStringId.Calculations.DifferenceType" | "DashboardWebStringId.TreemapLayoutAlgorithm" | "DashboardWebStringId.TilesLabelContentType" | "DashboardWebStringId.TilesTooltipContentType" | "DashboardWebStringId.GroupsLabelContentType" | "DashboardWebStringId.GroupsTooltipContentType" | "DashboardWebStringId.ShowOthersValue" | "DashboardWebStringId.TopNEnabled" | "DashboardWebStringId.Parameters.StaticListLookUpSettings" | "DashboardWebStringId.Parameters.DynamicListLookUpSettings" | "DashboardWebStringId.ConvertTo" | "DashboardWebStringId.Duplicate" | "DashboardWebStringId.DataSourceWizard" | "DashboardWebStringId.RangeFilter.CustomPeriods" | "DashboardWebStringId.RangeFilter.StartMode" | "DashboardWebStringId.RangeFilter.EndMode" | "DashboardWebStringId.RangeFilter.StartIntervalAndOffset" | "DashboardWebStringId.RangeFilter.EndIntervalAndOffset" | "DashboardWebStringId.RangeFilter.StartDate" | "DashboardWebStringId.RangeFilter.EndDate" | "DashboardWebStringId.RangeFilter.None" | "DashboardWebStringId.RangeFilter.Fixed" | "DashboardWebStringId.RangeFilter.Flow" | "DashboardWebStringId.Tabs.Binding" | "DashboardWebStringId.Tabs.DataShaping" | "DashboardWebStringId.Tabs.Format" | "DashboardWebStringId.Calculations.Types.Moving" | "DashboardWebStringId.Parameters.SortByMember" | "DashboardWebStringId.Parameters.LookUpSettingsTypeCaption" | "DashboardWebStringId.Dashboard.Items" | "DashboardWebStringId.Dashboard.Groups" | "DashboardWebStringId.Dashboard.LayoutItems" | "DashboardWebStringId.Dashboard.ComponentName" | "DashboardWebStringId.ButtonConfirm" | "DashboardWebStringId.Colorization.GroupInterval" | "DashboardWebStringId.ButtonOn" | "DashboardWebStringId.ButtonOff" | "DashboardWebStringId.ButtonYes" | "DashboardWebStringId.ButtonNo" | "DashboardWebStringId.ButtonDiscrete" | "DashboardWebStringId.ButtonContinuous" | "DashboardWebStringId.ButtonVisible" | "DashboardWebStringId.ButtonHidden" | "DashboardWebStringId.Calculations.PreviousValuesCount" | "DashboardWebStringId.Calculations.NextValuesCount" | "DashboardWebStringId.Calculations.RankType" | "DashboardWebStringId.Calculations.RankOrder" | "DashboardWebStringId.TileOptions" | "DashboardWebStringId.MapLockNavigationLocked" | "DashboardWebStringId.MapLockNavigationUnlocked" | "DashboardWebStringId.ConditionalFormatting.BarOptions" | "DashboardWebStringId.ConditionalFormatting.CalculatedBy" | "DashboardWebStringId.ConditionalFormatting.IconType" | "DashboardWebStringId.ConditionalFormatting.PredefinedColor" | "DashboardWebStringId.ConditionalFormatting.AppearanceType" | "DashboardWebStringId.ConditionalFormatting.FontStyle" | "DashboardWebStringId.ConditionalFormatting.FontFamily" | "DashboardWebStringId.ConditionalFormatting.FontRegular" | "DashboardWebStringId.ConditionalFormatting.IconType.None" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowSideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGraySideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDash" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedTriangleDown" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenTriangleUp" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingHalfGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1QuarterGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1Bar" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1FilledBox" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTriangle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedDiamond" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedFlag" | "DashboardWebStringId.ConditionalFormatting.IntersectionColumnDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionRowDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionLevelMode" | "DashboardWebStringId.ConditionalFormatting.GradientRangeBar" | "DashboardWebStringId.ConditionalFormatting.RangeGradient" | "DashboardWebStringId.ConditionalFormatting.SegmentNumber" | "DashboardWebStringId.ConditionalFormatting.ValueComparison" | "DashboardWebStringId.ConditionalFormatting.Ranges" | "DashboardWebStringId.ConditionalFormatting.AverageType" | "DashboardWebStringId.ConditionalFormatting.Above" | "DashboardWebStringId.ConditionalFormatting.AboveOrEqual" | "DashboardWebStringId.ConditionalFormatting.Below" | "DashboardWebStringId.ConditionalFormatting.BelowOrEqual" | "DashboardWebStringId.ConditionalFormatting.StyleSettingsType" | "DashboardWebStringId.ConditionalFormatting.Positive" | "DashboardWebStringId.ConditionalFormatting.Negative" | "DashboardWebStringId.ConditionalFormatting.MinimumType" | "DashboardWebStringId.ConditionalFormatting.MaximumType" | "DashboardWebStringId.ConditionalFormatting.DateType" | "DashboardWebStringId.ConditionalFormatting.DateType.None" | "DashboardWebStringId.ConditionalFormatting.DateType.SpecificDate" | "DashboardWebStringId.ConditionalFormatting.DateType.BeyondThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.NextWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.Tomorrow" | "DashboardWebStringId.ConditionalFormatting.DateType.Today" | "DashboardWebStringId.ConditionalFormatting.DateType.Yesterday" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.LastWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.PriorThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.Empty" | "DashboardWebStringId.ConditionalFormatting.DateType.User" | "DashboardWebStringId.ConditionalFormatting.DateType.Beyond" | "DashboardWebStringId.ConditionalFormatting.DateType.ThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.ThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAfter1" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAfter2" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo1" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo2" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo3" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo4" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo5" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo6" | "DashboardWebStringId.ConditionalFormatting.DateType.Earlier" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeDataItem" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeCard" | "DashboardWebStringId.Colorization.NoSelectedSchema" | "DashboardWebStringId.Colorization.ColorSchemes" | "DashboardWebStringId.LayoutHasBeenChangedDialogMessage" | "DashboardWebStringId.SaveConfirmationDialogMessage" | "DashboardWebStringId.SaveChangesDialogMessage" | "DashboardWebStringId.Dialog.ChangeDataMemberMessage" | "DashboardWebStringId.Dialog.RemovedDataItemsMessage" | "DashboardWebStringId.Dialog.ConfirmChanges" | "DashboardWebStringId.Dialog.Save" | "DashboardWebStringId.Dialog.DoNotSave" | "DashboardWebStringId.Dialog.ButtonYes" | "DashboardWebStringId.Dialog.ButtonDontChange" | "DashboardWebStringId.Colorization.ColorSchemeType" | "DashboardWebStringId.Colorization.MeasureNames" | "DashboardWebStringId.Colorization.AddColor" | "DashboardWebStringId.Colorization.ValidationSelectMeasure" | "DashboardWebStringId.ColoringModeAuto" | "DashboardWebStringId.ColoringModeOff" | "DashboardWebStringId.ColoringModeOn" | "DashboardWebStringId.ColorScheme.Empty" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButton" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip" | "DashboardWebStringId.ConditionalFormatting.Miscellaneous" | "DashboardWebStringId.Dashboards" | "DashboardWebStringId.EditInDesigner" | "DashboardWebStringId.NoDashboards" | "DashboardWebStringId.AddNewDashboard" | "DashboardWebStringId.NewDashboard" | "DashboardWebStringId.Binding.Searching" | "DashboardWebStringId.Binding.EmptySearchResult" | "DashboardWebStringId.Errors.AttemptToLoadData" | "DashboardWebStringId.ConditionType" | "DashboardWebStringId.ConditionalFormatting.UnsupportedDataType" | "DashboardWebStringId.FormatRule" | "DashboardWebStringId.Notification.DashboardSaving" | "DashboardWebStringId.Notification.DashboardSaved" | "DashboardWebStringId.Notification.DashboardCanNotBeSaved" | "DashboardWebStringId.Notification.DashboardSavingIsNotAvailable" | "DashboardWebStringId.Notification.AttemptToLoadDashboards" | "DashboardWebStringId.Notification.DashboardLoading" | "DashboardWebStringId.Notification.AttemptToLoadDashboard" | "DashboardWebStringId.Notification.AttemptToConnectionStrings" | "DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode" | "DashboardWebStringId.Notification.AttemptToLoadParameterValues" | "DashboardWebStringId.Notification.AttemptToGetUnderlyingData" | "DashboardWebStringId.Notification.AttemptToConvertItemToType" | "DashboardWebStringId.Notification.AttemptToLoadDimensionUniqueValues" | "DashboardWebStringId.Notification.AttemptToLoadFieldListForDataSource" | "DashboardWebStringId.Notification.AttemptToGetColorScheme" | "DashboardWebStringId.Notification.NewDashboardCannotBeCreated" | "DashboardWebStringId.Notification.ErrorHasOccuredOn" | "DashboardWebStringId.Notification.UnsupportedDataSourceType" | "DashboardWebStringId.LimitVisibleData.DisplayAllDataTooltip" | "DashboardWebStringId.LimitVisibleData.IncreasePerformanceTooltip" | "DashboardWebStringId.ConditionalFormatting.Condition" | "DashboardWebStringId.CardLayout.MinWidth" | "DashboardWebStringId.CardLayout.MaxWidth" | "DashboardWebStringId.CardLayout.Editor.CardLayout" | "DashboardWebStringId.CardLayout.Editor.FormatOptions" | "DashboardWebStringId.CardLayout.LayoutOptions" | "DashboardWebStringId.CardLayout.ResetTemplate" | "DashboardWebStringId.CardLayout.ApplyToAllCards" | "DashboardWebStringId.Binding.ValuesPattern" | "DashboardWebStringId.Parameters.ParameterNameShouldBeUnique" | "DashboardWebStringId.Title.ImageEmbedded" | "DashboardWebStringId.Title.ImageLinked" | "DashboardWebStringId.Title.ImageNone" | "DashboardWebStringId.RangeFilter.SetDefaultCustomPeriod" | "DashboardWebStringId.RangeFilter.ClearDefaultCustomPeriod" | "DashboardWebStringId.MobileLayout.Back" | "DashboardWebStringId.MobileLayout.SwitchToViewer" | "DashboardWebStringId.Search" | "DashboardStringId.DefaultNameTabPage" | "DashboardStringId.DefaultNameChartPane" | "DashboardStringId.NewCalculatedFieldNamePrefix" | "DashboardStringId.NewParameterNamePrefix" | "AnalyticsCoreStringId.Parameter_Type_String" | "AnalyticsCoreStringId.Parameter_Type_DateTime" | "AnalyticsCoreStringId.Parameter_Type_Int16" | "AnalyticsCoreStringId.Parameter_Type_Int32" | "AnalyticsCoreStringId.Parameter_Type_Int64" | "AnalyticsCoreStringId.Parameter_Type_Float" | "AnalyticsCoreStringId.Parameter_Type_Double" | "AnalyticsCoreStringId.Parameter_Type_Decimal" | "AnalyticsCoreStringId.Parameter_Type_Boolean" | "AnalyticsCoreStringId.Parameter_Type_Guid" | "AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption" | "DataAccessUIStringId.FiltersView" | "DashboardStringId.SeriesTypeGroupArea" | "DashboardStringId.SeriesTypeGroupBar" | "DashboardStringId.SeriesTypeGroupBubble" | "DashboardStringId.SeriesTypeGroupFinancial" | "DashboardStringId.SeriesTypeGroupPointLine" | "DashboardStringId.SeriesTypeGroupRange" | "DashboardStringId.FunctionCategoryWindow" | "DashboardStringId.FunctionCategoryAggregate" | "DashboardStringId.FunctionCategoryAdvanced" | "DashboardStringId.FunctionDescriptionWindowAvg" | "DashboardStringId.FunctionDescriptionRunningMin" | "DashboardStringId.FunctionDescriptionTotal" | "DashboardStringId.FunctionDescriptionRankCompetition" | "DashboardStringId.FunctionDescriptionLookup" | "DashboardStringId.FunctionDescriptionRunningCount" | "DashboardStringId.FunctionDescriptionWindowMax" | "DashboardStringId.FunctionDescriptionVarp" | "DashboardStringId.FunctionDescriptionRunningAvg" | "DashboardStringId.FunctionDescriptionFirst" | "DashboardStringId.FunctionDescriptionWindowMin" | "DashboardStringId.FunctionDescriptionWindowStdDev" | "DashboardStringId.FunctionDescriptionLast" | "DashboardStringId.FunctionDescriptionWindowCount" | "DashboardStringId.FunctionDescriptionCountDistinct" | "DashboardStringId.FunctionDescriptionIndex" | "DashboardStringId.FunctionDescriptionWindowStdDevp" | "DashboardStringId.FunctionDescriptionWindowMode" | "DashboardStringId.FunctionDescriptionRunningMax" | "DashboardStringId.FunctionDescriptionRankPercentile" | "DashboardStringId.FunctionDescriptionRankDense" | "DashboardStringId.FunctionDescriptionWindowSum" | "DashboardStringId.FunctionDescriptionWindowCountDistinct" | "DashboardStringId.FunctionDescriptionStdDevp" | "DashboardStringId.FunctionDescriptionSize" | "DashboardStringId.FunctionDescriptionMedian" | "DashboardStringId.FunctionDescriptionRankModified" | "DashboardStringId.FunctionDescriptionWindowMedian" | "DashboardStringId.FunctionDescriptionRunningSum" | "DashboardStringId.FunctionDescriptionWindowVarp" | "DashboardStringId.FunctionDescriptionWindowVar" | "DashboardStringId.FunctionDescriptionStdDev" | "DashboardStringId.FunctionDescriptionRankUnique" | "DashboardStringId.FunctionDescriptionVar" | "DashboardStringId.FunctionDescriptionAggr" | "DashboardStringId.FunctionDescriptionAggrJoinRule" | "DashboardStringId.FunctionDescriptionWindowDefinition" | "DashboardStringId.FunctionDescriptionWindowDefinitionPartitionBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderAsc" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderDesc" | "DashboardStringId.AggregateExFunctionDescriptionCountNotNull" | "DashboardStringId.AggregateExFunctionDescriptionMode" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHour" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinute" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinuteSecond" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateMonthYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear2" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateQuarterYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetQuarter" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfMonth" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime3" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime4" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime5" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime6" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToBoolean" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToDateTime" | "DashboardStringId.SparklineIndicationModeLine" | "DashboardStringId.SparklineIndicationModeArea" | "DashboardStringId.SparklineIndicationModeBar" | "DashboardStringId.SparklineIndicationModeWinLoss" | "DashboardStringId.DefaultNameDateFilterItem" | "DashboardWebStringId.DateFilter.FilterType" | "DashboardWebStringId.DateFilter.FilterTypeExact" | "DashboardWebStringId.DateFilter.FilterTypeAfter" | "DashboardWebStringId.DateFilter.FilterTypeBefore" | "DashboardWebStringId.DateFilter.FilterTypeBetween" | "DashboardWebStringId.DateFilter.ArrangementMode" | "DashboardWebStringId.DateFilter.ArrangementModeAutoHeight" | "DashboardWebStringId.DateFilter.ArrangementModeHorizontal" | "DashboardWebStringId.DateFilter.ArrangementModeVertical" | "DashboardWebStringId.DateFilter.DatePickerLocation" | "DashboardWebStringId.DateFilter.DatePickerLocationFar" | "DashboardWebStringId.DateFilter.DatePickerLocationNear" | "DashboardWebStringId.DateFilter.DatePickerLocationHidden" | "DashboardStringId.DateFilterDisplayTextPattern" | "DashboardStringId.DateFilterDatePickerButtonDefaultText" | "DashboardStringId.FromDatePeriodCaption" | "DashboardStringId.ToDatePeriodCaption" | "DashboardStringId.FromToDatePeriodCaption" | "DashboardStringId.UniqueNameValidationMessage" | "DashboardStringId.GridTotalAutoTemplate" | "DashboardStringId.GridTotalValueTemplate" | "DashboardStringId.GridTotalTemplate" | "DashboardStringId.GridTotalTypeCount" | "DashboardStringId.GridTotalTypeMin" | "DashboardStringId.GridTotalTypeMax" | "DashboardStringId.GridTotalTypeAvg" | "DashboardStringId.GridTotalTypeSum" | "DashboardStringId.ActionShowDataInspector" | "DashboardStringId.InspectedData" | "DashboardStringId.InspectedTypeFormatString" | "DashboardStringId.AggregatedDataType" | "DashboardStringId.RawDataType" | "DashboardStringId.OLAPUnavailableRawData" | "DashboardStringId.SparklineValuesSeparator" | "DashboardStringId.SparklineArgumentValueSeparator" | "DashboardWebStringId.Grid.FilterClause.ApplyFilter" | "DashboardWebStringId.Grid.FilterClause.ResetOperation" | "DashboardWebStringId.Grid.FilterClause.Contains" | "DashboardWebStringId.Grid.FilterClause.DoesNotContain" | "DashboardWebStringId.Grid.FilterClause.StartsWith" | "DashboardWebStringId.Grid.FilterClause.EndsWith" | "DashboardWebStringId.Grid.FilterClause.Equals" | "DashboardWebStringId.Grid.FilterClause.DoesNotEqual" | "DashboardWebStringId.Grid.FilterClause.Less" | "DashboardWebStringId.Grid.FilterClause.Greater" | "DashboardWebStringId.Grid.FilterClause.LessOrEqual" | "DashboardWebStringId.Grid.FilterClause.GreaterOrEqual" | "DashboardWebStringId.Grid.FilterClause.Between" | "DashboardWebStringId.Grid.FilterClause.BetweenStart" | "DashboardWebStringId.Grid.FilterClause.BetweenEnd" | "DashboardWebStringId.AccordionTab.Content" | "DashboardWebStringId.TextBoxItemEditor.NoFields" | "DashboardWebStringId.TextBoxItemEditor.InsertField" | "DashboardWebStringId.TextBoxItemEditor.EditTextButton" | "DashboardWebStringId.TextBoxItemEditor.DialogCaption" | "DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose" | "DashboardWebStringId.TextBoxItemEditor.DialogClose" | "DashboardStringId.StartDate" | "DashboardStringId.EndDate" | "DashboardWebStringId.AccordionTab.MeasureFilter" | "DashboardStringId.FunctionDescriptionAggregateFilter" | "DashboardWebStringId.TabPages" | "DashboardWebStringId.More" | "DashboardStringId.MeasureFilterCaptionFormatString";
	    AllLevels: "DashboardStringId.ActionClearMasterFilter" | "DashboardStringId.ActionClearSelection" | "DashboardStringId.ActionOtherValues" | "DashboardStringId.ActionDrillUp" | "DashboardStringId.ActionExportTo" | "DashboardStringId.ActionExportToPdf" | "DashboardStringId.ActionExportToImage" | "DashboardStringId.ActionExportToExcel" | "DashboardStringId.RangeFilterCustomDateTimePeriod" | "DashboardStringId.ActionExportTemplate" | "DashboardStringId.ActionAllowMultiselection" | "DashboardStringId.DashboardNullValue" | "DashboardStringId.TopNOthersValue" | "DashboardStringId.DashboardErrorValue" | "DashboardStringId.DateTimeQuarterFormat" | "DashboardStringId.MessageLoading" | "DashboardStringId.ParametersFormCaption" | "DashboardStringId.ParametersSelectorText" | "DashboardStringId.ParametersFormAllowNullColumnCaption" | "DashboardStringId.ParametersFormValueColumnCaption" | "DashboardStringId.ParametersFormNameColumnCaption" | "DashboardStringId.ButtonOK" | "DashboardStringId.ButtonCancel" | "DashboardStringId.SelectDate" | "DashboardStringId.ButtonReset" | "DashboardStringId.ButtonSubmit" | "DashboardStringId.ButtonApply" | "DashboardStringId.ButtonExport" | "DashboardStringId.GridResetColumnWidths" | "DashboardStringId.GridSortAscending" | "DashboardStringId.GridSortDescending" | "DashboardStringId.GridClearSorting" | "DashboardStringId.PivotGridTotal" | "DashboardStringId.PivotGridGrandTotal" | "DashboardStringId.ChartTotalValue" | "DashboardStringId.PageLayout" | "DashboardStringId.PageLayoutAuto" | "DashboardStringId.PageLayoutPortrait" | "DashboardStringId.PageLayoutLandscape" | "DashboardStringId.PaperKind" | "DashboardStringId.PaperKindLetter" | "DashboardStringId.PaperKindLegal" | "DashboardStringId.PaperKindExecutive" | "DashboardStringId.PaperKindA5" | "DashboardStringId.PaperKindA4" | "DashboardStringId.PaperKindA3" | "DashboardStringId.ScaleMode" | "DashboardStringId.ScaleModeNone" | "DashboardStringId.ScaleModeUseScaleFactor" | "DashboardStringId.ScaleModeAutoFitToPagesWidth" | "DashboardStringId.AutoFitPageCount" | "DashboardStringId.ScaleFactor" | "DashboardStringId.PrintHeadersOnEveryPage" | "DashboardStringId.FitToPageWidth" | "DashboardStringId.SizeMode" | "DashboardStringId.SizeModeNone" | "DashboardStringId.SizeModeStretch" | "DashboardStringId.SizeModeZoom" | "DashboardStringId.AutoArrangeContent" | "DashboardStringId.ImageFormat" | "DashboardStringId.ExcelFormat" | "DashboardStringId.CsvValueSeparator" | "DashboardStringId.ExportFilters" | "DashboardStringId.ExportParameters" | "DashboardStringId.DashboardStatePosition" | "DashboardStringId.Resolution" | "DashboardStringId.ShowTitle" | "DashboardStringId.Title" | "DashboardStringId.FileName" | "DashboardStringId.FilterStatePresentationAfter" | "DashboardStringId.FilterStatePresentationAfterAndSplitPage" | "DashboardStringId.FilterStatePresentationSplitSheet" | "DashboardStringId.MessageCustomItemIsNotSupported" | "DashboardStringId.MessageGridHasNoData" | "DashboardStringId.MessagePivotHasNoData" | "DashboardStringId.SparklineTooltipStartValue" | "DashboardStringId.SparklineTooltipEndValue" | "DashboardStringId.SparklineTooltipMinValue" | "DashboardStringId.SparklineTooltipMaxValue" | "DashboardStringId.OpenCaption" | "DashboardStringId.HighCaption" | "DashboardStringId.LowCaption" | "DashboardStringId.CloseCaption" | "DashboardStringId.InitialExtent" | "DashboardStringId.FilterElementShowAllItem" | "DashboardStringId.NumericFormatUnitSymbolThousands" | "DashboardStringId.NumericFormatUnitSymbolMillions" | "DashboardStringId.NumericFormatUnitSymbolBillions" | "DashboardStringId.ActionSelectDateTimePeriod" | "DashboardStringId.RangeFilterSelectRange" | "DashboardStringId.FilterElementCheckedComboBoxNoDataCaption" | "DashboardStringId.FilterElementRadioComboBoxNoDataCaption" | "DashboardStringId.FilterElementNoDataToDisplay" | "DashboardStringId.RangeFilterSelectRangeFromCaption" | "DashboardStringId.RangeFilterSelectRangeToCaption" | "DashboardWebStringId.DashboardParameters" | "DashboardStringId.DataSourceDataMember" | "DashboardStringId.DescriptionMeasures" | "DashboardWebStringId.TextBoxFormatText" | "DashboardStringId.NumericFormatUnitCaption" | "DashboardWebStringId.SummaryType" | "DashboardStringId.CalculationTypeExpression" | "DevExpressWebStringId.CalculatedFieldDataType" | "DashboardStringId.ValueCaption" | "DashboardStringId.Value1Caption" | "DashboardStringId.Value2Caption" | "DashboardStringId.CommandFormatRuleTopBottom" | "DashboardStringId.CommandFormatRuleAboveBelowAverage" | "DashboardStringId.CommandFormatRuleBar" | "DashboardStringId.CommandFormatRuleColorRangeBar" | "DashboardStringId.CommandFormatRuleGradientRangeBar" | "DashboardStringId.FormatRuleStyleAppearance" | "DashboardStringId.FormatRuleStyleIcons" | "DashboardStringId.FormatRuleNegativeStyle" | "DashboardStringId.CommandFormatRuleExpression" | "DashboardWebStringId.TopNMode" | "DashboardStringId.CommandFormatRuleRangeSet" | "DashboardStringId.CommandFormatRuleValue" | "DashboardStringId.CommandFormatRuleDateOccurring" | "DashboardWebStringId.ConditionalFormatting.Appearance.BackColor" | "DashboardWebStringId.ConditionalFormatting.Appearance.ForeColor" | "DashboardStringId.DescriptionBoundImageAttribute" | "DashboardWebStringId.ShowCaptionText" | "DashboardWebStringId.DisplayItemAsPage" | "DashboardStringId.DefaultNameItemGroup" | "DashboardStringId.DefaultNameTabContainerItem" | "DashboardStringId.DefaultDataSourceName" | "DashboardWebStringId.CrossDataSourceFiltering" | "DashboardStringId.RangeFilterCalculationAlongSeries" | "DashboardStringId.RangeFilterCalculationAlongArgument" | "DashboardStringId.DescriptionItemSeries" | "DashboardStringId.DescriptionSeries" | "DashboardWebStringId.Chart.SeriesType" | "DashboardStringId.DescriptionDimensions" | "DashboardWebStringId.TreeView.AutoExpand" | "DashboardWebStringId.ConditionalFormatting.ConditionMinimum" | "DashboardWebStringId.ConditionalFormatting.ConditionMaximum" | "DashboardStringId.DescriptionItemDimension" | "DashboardStringId.DescriptionItemMeasure" | "DashboardWebStringId.Grid.MergeCells" | "DashboardWebStringId.Grid.ColumnWidthMode" | "DashboardWebStringId.Grid.BandedRows" | "DashboardWebStringId.Grid.VerticalLines" | "DashboardWebStringId.Grid.HorizontalLines" | "DashboardWebStringId.Grid.ColumnHeaders" | "DashboardWebStringId.Grid.WordWrap" | "DashboardStringId.ActualValueCaption" | "DashboardStringId.TargetValueCaption" | "DashboardStringId.UriPatternCaption" | "DashboardStringId.UriCaption" | "DashboardStringId.DisplayValueCaption" | "DashboardStringId.WeightCaption" | "DashboardStringId.DescriptionItemColor" | "DashboardStringId.Latitude" | "DashboardStringId.Longitude" | "DashboardWebStringId.GeoPointMapClusterization" | "DashboardWebStringId.MapLockNavigation" | "DashboardWebStringId.WeightedLegendGalleryGroup" | "DashboardStringId.DescriptionItemArgument" | "DashboardWebStringId.PieMapIsWeighted" | "DashboardWebStringId.InteractivityOptions.IgnoreMasterFilters" | "DashboardWebStringId.InteractivityOptions.DrillDown" | "DashboardWebStringId.Pie.ShowCaptions" | "DashboardStringId.DescriptionColumns" | "DashboardStringId.DescriptionRows" | "DashboardStringId.DescriptionValues" | "DashboardStringId.DescriptionArguments" | "DashboardStringId.TextGroupIntervalAlphabetical" | "DashboardStringId.ActionMaximizeDashboardItem" | "DashboardStringId.ActionRestoreDashboardItem" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataSource" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.ValueMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DisplayMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.SortOrder" | "DevExpress.DashboardCommon.DashboardParameter.Visible" | "DevExpress.DashboardCommon.DashboardParameter.Description" | "DevExpress.DashboardCommon.DashboardParameter.AllowMultiselect" | "DevExpress.DashboardCommon.DashboardParameter.AllowNull" | "DevExpress.DashboardCommon.DashboardParameter.SelectAllValues" | "DevExpress.DashboardCommon.StaticListLookUpSettings.Values" | "DevExpress.DashboardCommon.DimensionSortOrder.Ascending" | "DevExpress.DashboardCommon.DimensionSortOrder.Descending" | "DevExpress.DashboardCommon.DimensionSortOrder.None" | "DashboardWebStringId.AccordionTab.ScatterChartPointLabelOptions" | "DashboardWebStringId.AccordionTab.ChoroplethMapShapeLabelsAttribute" | "DashboardStringId.CommandFormatRuleTopN" | "DashboardWebStringId.Type" | "DashboardWebStringId.Grid.ColumnWidth" | "DashboardWebStringId.AccordionTab.ShowTotals" | "DashboardWebStringId.AccordionTab.Layout" | "DashboardWebStringId.AccordionTab.PivotInitialState" | "DashboardWebStringId.AccordionTab.ImageOptions" | "DashboardWebStringId.AccordionTab.Labels" | "DashboardWebStringId.AccordionTab.MapLegend" | "DashboardWebStringId.AccordionTab.WeightedLegend" | "DashboardWebStringId.AccordionTab.Common" | "DashboardWebStringId.AccordionTab.ChartLegend" | "DashboardWebStringId.Grid.AutoFitToContentsColumnWidthMode" | "DashboardWebStringId.Grid.AutoFitToGridColumnWidthMode" | "DashboardWebStringId.Grid.ManualGridColumnWidthMode" | "DashboardStringId.DateTimeIntervalYear" | "DashboardStringId.DateTimeIntervalQuarter" | "DashboardStringId.DateTimeIntervalMonth" | "DashboardStringId.DateTimeIntervalWeek" | "DashboardStringId.DateTimeIntervalDay" | "DashboardStringId.DateTimeIntervalHour" | "DashboardStringId.DateTimeIntervalMinute" | "DashboardStringId.DateTimeIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalYear" | "DashboardStringId.DateTimeGroupIntervalQuarter" | "DashboardStringId.DateTimeGroupIntervalMonth" | "DashboardStringId.DateTimeGroupIntervalDay" | "DashboardStringId.DateTimeGroupIntervalHour" | "DashboardStringId.DateTimeGroupIntervalMinute" | "DashboardStringId.DateTimeGroupIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalDayOfYear" | "DashboardStringId.DateTimeGroupIntervalDayOfWeek" | "DashboardStringId.DateTimeGroupIntervalWeekOfYear" | "DashboardStringId.DateTimeGroupIntervalWeekOfMonth" | "DashboardStringId.DateTimeGroupIntervalMonthYear" | "DashboardStringId.DateTimeGroupIntervalQuarterYear" | "DashboardStringId.DateTimeGroupIntervalWeekYear" | "DashboardStringId.DateTimeGroupIntervalDayMonthYear" | "DashboardStringId.DateTimeGroupIntervalDateHour" | "DashboardStringId.DateTimeGroupIntervalDateHourMinute" | "DashboardStringId.DateTimeGroupIntervalDateHourMinuteSecond" | "DashboardStringId.DateTimeGroupIntervalExactDate" | "DashboardStringId.GroupIntervalNone" | "DashboardWebStringId.Treemap.StripedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SquarifiedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SliceAndDiceLayoutAlgorithm" | "DashboardWebStringId.Treemap.TileLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.TileLabelsNone" | "DashboardWebStringId.Treemap.TileLabelsValue" | "DashboardWebStringId.Treemap.TileLabelsArgument" | "DashboardWebStringId.Treemap.TileTooltipsArgumentAndValue" | "DashboardWebStringId.Treemap.TileTooltipsArgument" | "DashboardWebStringId.Treemap.TileTooltipsValue" | "DashboardWebStringId.Treemap.TileTooltipsNone" | "DashboardWebStringId.Treemap.TopLeftToBottomRightLayoutDirection" | "DashboardWebStringId.Treemap.TopRightToBottomLeftLayoutDirection" | "DashboardWebStringId.Treemap.BottomLeftToTopRightLayoutDirection" | "DashboardWebStringId.Treemap.BottomRightToTopLeftLayoutDirection" | "DashboardWebStringId.Treemap.LayoutDirection" | "DashboardWebStringId.Treemap.GroupLabelsNone" | "DashboardWebStringId.Treemap.GroupLabelsArgument" | "DashboardWebStringId.Treemap.GroupLabelsValue" | "DashboardWebStringId.Treemap.GroupLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.GroupTooltipsNone" | "DashboardWebStringId.Treemap.GroupTooltipsArgument" | "DashboardWebStringId.Treemap.GroupTooltipsValue" | "DashboardWebStringId.Treemap.GroupTooltipsArgumentAndValue" | "DashboardStringId.RankOrderAscending" | "DashboardStringId.RankOrderDescending" | "DashboardStringId.DateTimeFormatYearFormatDefaultCaption" | "DashboardStringId.DateTimeFormatYearFormatFullCaption" | "DashboardStringId.DateTimeFormatYearFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatQuarterFormatDefaultCaption" | "DashboardStringId.DateTimeFormatQuarterFormatNumericCaption" | "DashboardStringId.DateTimeFormatQuarterFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatDefaultCaption" | "DashboardStringId.DateTimeFormatMonthFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatMonthFormatNumericCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatFullCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatNumericCaption" | "DashboardStringId.DateTimeFormatDateFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateFormatLongCaption" | "DashboardStringId.DateTimeFormatDateFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatLongCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption" | "DashboardStringId.ExactDateFormatYear" | "DashboardStringId.ExactDateFormatQuarter" | "DashboardStringId.ExactDateFormatMonth" | "DashboardStringId.ExactDateFormatDay" | "DashboardStringId.ExactDateFormatHour" | "DashboardStringId.ExactDateFormatMinute" | "DashboardStringId.ExactDateFormatSecond" | "DashboardWebStringId.FormatType" | "DashboardWebStringId.TopN.Top" | "DashboardWebStringId.TopN.Bottom" | "DashboardWebStringId.DimensionSortBy" | "DashboardStringId.NumericFormatUnitAutoCaption" | "DashboardStringId.NumericFormatFormatTypeAutoCaption" | "DashboardStringId.NumericFormatFormatTypeGeneralCaption" | "DashboardStringId.NumericFormatFormatTypeNumberCaption" | "DashboardStringId.NumericFormatFormatTypeCurrencyCaption" | "DashboardStringId.NumericFormatFormatTypeScientificCaption" | "DashboardStringId.NumericFormatFormatTypePercentCaption" | "DashboardStringId.NumericFormatUnitOnesCaption" | "DashboardStringId.NumericFormatUnitThousandsCaption" | "DashboardStringId.NumericFormatUnitMillionsCaption" | "DashboardStringId.NumericFormatUnitBillionsCaption" | "DashboardStringId.DeltaValueTypeActualValueCaption" | "DashboardStringId.DeltaValueTypeAbsoluteVariationCaption" | "DashboardStringId.DeltaValueTypePercentVariationCaption" | "DashboardStringId.DeltaValueTypePercentOfTargetCaption" | "DashboardStringId.DeltaValueTypeTargetValueCaption" | "DashboardStringId.DeltaIndicationModeGreaterIsGoodCaption" | "DashboardStringId.DeltaIndicationModeLessIsGoodCaption" | "DashboardStringId.DeltaIndicationModeWarningIfGreaterCaption" | "DashboardStringId.DeltaIndicationModeWarningIfLessCaption" | "DashboardStringId.DeltaIndicationModeNoIndicationCaption" | "DashboardStringId.DeltaThresholdTypeAbsolute" | "DashboardStringId.DeltaThresholdTypePercent" | "DashboardStringId.CommandDimensionGroupChildValues" | "DashboardStringId.SeriesTypeBar" | "DashboardStringId.SeriesTypeStackedBar" | "DashboardStringId.SeriesTypeFullStackedBar" | "DashboardStringId.SeriesTypePoint" | "DashboardStringId.SeriesTypeLine" | "DashboardStringId.SeriesTypeStackedLine" | "DashboardStringId.SeriesTypeFullStackedLine" | "DashboardStringId.SeriesTypeStepLine" | "DashboardStringId.SeriesTypeSpline" | "DashboardStringId.SeriesTypeArea" | "DashboardStringId.SeriesTypeStackedArea" | "DashboardStringId.SeriesTypeFullStackedArea" | "DashboardStringId.SeriesTypeStepArea" | "DashboardStringId.SeriesTypeSplineArea" | "DashboardStringId.SeriesTypeStackedSplineArea" | "DashboardStringId.SeriesTypeFullStackedSplineArea" | "DashboardWebStringId.Chart.ShowLegend" | "DashboardStringId.DefaultNameBoundImageItem" | "DashboardStringId.DefaultNameImageItem" | "DashboardStringId.DefaultNameTextBoxItem" | "DashboardStringId.DefaultNameCardItem" | "DashboardStringId.DefaultNameChartItem" | "DashboardStringId.DefaultNameComboBoxItem" | "DashboardStringId.DefaultNameListBoxItem" | "DashboardStringId.DefaultNameTreeViewItem" | "DashboardStringId.DefaultNameGaugeItem" | "DashboardStringId.DefaultNameGridItem" | "DashboardStringId.GridHyperlinkUriPatternErrorMessage" | "DashboardWebStringId.DefaultNameBubbleMapItem" | "DashboardWebStringId.DefaultNameChoroplethMapItem" | "DashboardWebStringId.DefaultNameGeoPointMapItem" | "DashboardWebStringId.DefaultNamePieMapItem" | "DashboardStringId.DefaultNamePieItem" | "DashboardStringId.DefaultNamePivotItem" | "DashboardStringId.DefaultNameRangeFilterItem" | "DashboardStringId.DefaultNameScatterChartItem" | "DashboardStringId.DefaultNameTreemapItem" | "DashboardStringId.DescriptionMaps" | "DashboardStringId.EntireRangePeriodCaption" | "DashboardStringId.CalculationTypePercentOfTotal" | "DashboardStringId.CalculationTypeDifference" | "DashboardStringId.CalculationTypePercentageDifference" | "DashboardStringId.CalculationTypeRunningTotal" | "DashboardStringId.CalculationTypeMovingCalculation" | "DashboardStringId.CalculationTypeRank" | "DashboardStringId.ColorPaletteIndex" | "DashboardStringId.DifferenceCalculationTargetPrevious" | "DashboardStringId.DifferenceCalculationTargetNext" | "DashboardStringId.DifferenceCalculationTargetFirst" | "DashboardStringId.DifferenceCalculationTargetLast" | "DashboardStringId.SummaryTypeCount" | "DashboardStringId.SummaryTypeSum" | "DashboardStringId.SummaryTypeMin" | "DashboardStringId.SummaryTypeMax" | "DashboardStringId.SummaryTypeAverage" | "DashboardStringId.SummaryTypeStdDev" | "DashboardStringId.SummaryTypeStdDevp" | "DashboardStringId.SummaryTypeVar" | "DashboardStringId.SummaryTypeVarp" | "DashboardStringId.SummaryTypeCountDistinct" | "DashboardStringId.SummaryTypeMedian" | "DashboardStringId.SummaryTypeMode" | "DashboardStringId.RankTypeUnique" | "DashboardStringId.RankTypeCompetition" | "DashboardStringId.RankTypeDense" | "DashboardStringId.RankTypeModified" | "DashboardStringId.RankTypePercentile" | "DashboardStringId.CardCalculationAlongCards" | "DashboardStringId.CardCalculationAlongSparklineArgument" | "DashboardStringId.CardCalculationAlongCardsAndSparklineArgument" | "DashboardStringId.CardCalculationAlongSparklineArgumentAndCards" | "DashboardStringId.ChartCalculationAlongArguments" | "DashboardStringId.ChartCalculationAlongSeries" | "DashboardStringId.ChartCalculationAlongArgumentsAndSeries" | "DashboardStringId.ChartCalculationAlongSeriesAndArguments" | "DashboardStringId.GridCalculationAlongRows" | "DashboardStringId.GridCalculationAlongSparklineArgument" | "DashboardStringId.GridCalculationAlongRowsAndSparklineArgument" | "DashboardStringId.GridCalculationAlongSparklineArgumentAndRows" | "DashboardStringId.PivotCalculationAlongColumns" | "DashboardStringId.PivotCalculationAlongRows" | "DashboardStringId.PivotCalculationAlongColumnsAndRows" | "DashboardStringId.PivotCalculationAlongRowsAndColumns" | "DashboardStringId.PivotCalculationAlongGroupsInColumns" | "DashboardStringId.PivotCalculationAlongGroupsInRows" | "DashboardStringId.PivotCalculationAlongGroupsInColumnsAndRows" | "DashboardStringId.PivotCalculationAlongGroupsInRowsAndColumns" | "DashboardStringId.PieCalculationAlongArguments" | "DashboardStringId.PieCalculationAlongSeries" | "DashboardStringId.PieCalculationAlongArgumentsAndSeries" | "DashboardStringId.PieCalculationAlongSeriesAndArguments" | "DashboardStringId.RangeFilterCalculationAlongArgumentAndSeries" | "DashboardStringId.RangeFilterCalculationAlongSeriesAndArgument" | "DashboardStringId.GaugeCalculationAlongGauges" | "DashboardStringId.ScatterCalculationAlongArguments" | "DashboardStringId.CalculationAlongSpecificDimensions" | "DashboardStringId.CalculatedFieldTypeString" | "DashboardStringId.CalculatedFieldTypeLong" | "DashboardStringId.CalculatedFieldTypeDecimal" | "DashboardStringId.CalculatedFieldTypeBoolean" | "DashboardStringId.CalculatedFieldTypeDateTime" | "DashboardStringId.CalculatedFieldTypeDouble" | "DashboardStringId.CalculatedFieldTypeAuto" | "DashboardStringId.CalculatedFieldTypeObject" | "DashboardStringId.DefaultEFDataSourceName" | "DashboardStringId.DefaultExcelDataSourceName" | "DashboardStringId.DefaultFileExtractDataSourceName" | "DashboardStringId.DefaultObjectDataSourceName" | "DashboardStringId.DefaultOlapDataSourceName" | "DashboardStringId.DefaultSqlDataSourceName" | "DashboardStringId.DefaultJsonDataSourceName" | "DashboardStringId.DefaultXpoDataSourceName" | "DashboardStringId.OlapRaggedHierarchyNoneItemCaption" | "DashboardStringId.FormatRuleApplyToColumn" | "DashboardStringId.SeriesTypeSideBySideRangeBar" | "DashboardStringId.SeriesTypeRangeArea" | "DashboardStringId.SeriesTypeHighLowClose" | "DashboardStringId.SeriesTypeCandleStick" | "DashboardStringId.SeriesTypeStock" | "DashboardWebStringId.StyleSettings" | "DashboardStringId.ParametersFormCalendarTodayButton" | "DashboardStringId.TreemapLabelArgumentTemplate" | "DashboardStringId.TreemapLabelValueTemplate" | "DashboardStringId.SearchNullValuePrompt" | "DashboardStringId.CustomItems" | "DashboardStringId.FormatRuleAllowNegativeAxis" | "DashboardStringId.FormatRuleDrawAxis" | "DashboardStringId.FormatRuleShowBarOnly" | "DashboardStringId.CommandFormatRuleBottomN" | "DashboardStringId.FormatConditionAppearanceNone" | "DashboardStringId.FormatConditionAppearanceCustom" | "DashboardStringId.FormatConditionAppearancePaleRed" | "DashboardStringId.FormatConditionAppearancePaleYellow" | "DashboardStringId.FormatConditionAppearancePaleGreen" | "DashboardStringId.FormatConditionAppearancePaleBlue" | "DashboardStringId.FormatConditionAppearancePalePurple" | "DashboardStringId.FormatConditionAppearancePaleCyan" | "DashboardStringId.FormatConditionAppearancePaleOrange" | "DashboardStringId.FormatConditionAppearancePaleGray" | "DashboardStringId.FormatConditionAppearanceRed" | "DashboardStringId.FormatConditionAppearanceYellow" | "DashboardStringId.FormatConditionAppearanceGreen" | "DashboardStringId.FormatConditionAppearanceBlue" | "DashboardStringId.FormatConditionAppearancePurple" | "DashboardStringId.FormatConditionAppearanceCyan" | "DashboardStringId.FormatConditionAppearanceOrange" | "DashboardStringId.FormatConditionAppearanceGray" | "DashboardStringId.FormatConditionAppearanceGradientRed" | "DashboardStringId.FormatConditionAppearanceGradientYellow" | "DashboardStringId.FormatConditionAppearanceGradientGreen" | "DashboardStringId.FormatConditionAppearanceGradientBlue" | "DashboardStringId.FormatConditionAppearanceGradientPurple" | "DashboardStringId.FormatConditionAppearanceGradientCyan" | "DashboardStringId.FormatConditionAppearanceGradientOrange" | "DashboardStringId.FormatConditionAppearanceGradientTransparent" | "DashboardStringId.FormatConditionAppearanceFontBold" | "DashboardStringId.FormatConditionAppearanceFontItalic" | "DashboardStringId.FormatConditionAppearanceFontUnderline" | "DashboardStringId.FormatConditionAppearanceFontGrayed" | "DashboardStringId.FormatConditionAppearanceFontRed" | "DashboardStringId.FormatConditionAppearanceFontYellow" | "DashboardStringId.FormatConditionAppearanceFontGreen" | "DashboardStringId.FormatConditionAppearanceFontBlue" | "DashboardStringId.IntersectionLevelModeFirst" | "DashboardStringId.IntersectionLevelModeLast" | "DashboardStringId.IntersectionLevelModeAuto" | "DashboardStringId.IntersectionLevelModeAll" | "DashboardStringId.IntersectionLevelModeSpecific" | "DashboardStringId.FormatRuleApplyToRow" | "DashboardStringId.FormatRuleApplyTo" | "DashboardWebStringId.FilterItem.AllowEmptyFilter" | "DashboardStringId.FormatConditionAppearanceFontStrikeout" | "DashboardStringId.FormatConditionAutomaticValueType" | "DashboardStringId.FormatConditionNumberValueType" | "DashboardStringId.FormatConditionPercentValueType" | "DashboardStringId.CommandFormatRuleRangeIcons" | "DashboardStringId.CommandFormatRuleGreaterThan" | "DashboardStringId.CommandFormatRuleGreaterThanOrEqualTo" | "DashboardStringId.CommandFormatRuleLessThan" | "DashboardStringId.CommandFormatRuleLessThanOrEqualTo" | "DashboardStringId.CommandFormatRuleEqualTo" | "DashboardStringId.CommandFormatRuleNotEqualTo" | "DashboardStringId.CommandFormatRuleBetween" | "DashboardStringId.CommandFormatRuleNotBetween" | "DashboardStringId.CommandFormatRuleBetweenOrEqual" | "DashboardStringId.CommandFormatRuleNotBetweenOrEqual" | "DashboardStringId.CommandFormatRuleContains" | "DashboardStringId.ColorAutoAssigned" | "DashboardStringId.CalculationTypeNone" | "DashboardStringId.UndoText" | "DashboardStringId.RedoText" | "DashboardStringId.DashboardCurrencyUseCurrentCurrency" | "DashboardStringId.CommandDimensionSortModeDisplayText" | "DashboardStringId.CommandDimensionSortModeValue" | "DashboardStringId.CommandDimensionSortModeID" | "DashboardStringId.CommandDimensionSortModeKey" | "DashboardWebStringId.Chart.AddPane" | "DashboardStringId.MapShapeNoneAttribute" | "DashboardStringId.DefaultPeriodName" | "DashboardStringId.CardLayoutTemplateStretchedCaption" | "DashboardStringId.CardLayoutTemplateCenteredCaption" | "DashboardStringId.CardLayoutTemplateCompactCaption" | "DashboardStringId.CardLayoutTemplateLightweightCaption" | "DashboardStringId.CardLayoutTemplateCustomCaption" | "DashboardStringId.CardLayoutTemplateNoneCaption" | "DashboardStringId.CardRowDataElementTypeTitleCaption" | "DashboardStringId.CardRowDataElementTypeSubtitleCaption" | "DashboardStringId.CardRowDataElementTypeActualValueCaption" | "DashboardStringId.CardRowDataElementTypeTargetValueCaption" | "DashboardStringId.CardRowDataElementTypeAbsoluteVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentOfTargetCaption" | "DashboardStringId.CardRowDataElementTypeDimensionValueCaption" | "DashboardStringId.CardRowDataElementTypeCardNameCaption" | "DashboardStringId.CardRowDataElementTypeDeltaIndicatorCaption" | "DashboardStringId.CardRowDataElementTypeSparklineCaption" | "DashboardStringId.FormatRuleApplyToAllElements" | "DashboardWebStringId.Pie.LabelPosition" | "DashboardWebStringId.Pie.LabelPositionOutside" | "DashboardWebStringId.Pie.LabelPositionInside" | "DashboardStringId.IncludeExportDashboardState" | "DashboardStringId.PointLabelContentTypeArgument" | "DashboardStringId.PointLabelContentTypeSeriesName" | "DashboardStringId.PointLabelContentTypeValue" | "DashboardStringId.PointLabelContentTypePercent" | "DashboardWebStringId.DashboardMenu" | "DashboardWebStringId.DashboardMenuNew" | "DashboardWebStringId.DashboardMenuOpen" | "DashboardWebStringId.DashboardMenuSave" | "DashboardWebStringId.DashboardMenuCurrency" | "DashboardWebStringId.DashboardMenuDataSources" | "DashboardWebStringId.DashboardMenuColorScheme" | "DashboardWebStringId.DashboardMenuNewDashboardCreate" | "DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder" | "DashboardWebStringId.Binding.DefaultEmptyPlaceholder" | "DashboardWebStringId.Binding.DefaultSelectedPlaceholder" | "DashboardWebStringId.Binding.DataFiltering" | "DashboardWebStringId.Binding.Argument" | "DashboardWebStringId.Binding.Attribute" | "DashboardWebStringId.Binding.Sparkline" | "DashboardWebStringId.Binding.Columns" | "DashboardWebStringId.Binding.TooltipDimensions" | "DashboardWebStringId.Binding.TooltipMeasures" | "DashboardWebStringId.Binding.HiddenDimensions" | "DashboardWebStringId.Binding.HiddenMeasures" | "DashboardWebStringId.Binding.AddDimension" | "DashboardWebStringId.Binding.AddMeasure" | "DashboardWebStringId.Binding.AddColumn" | "DashboardWebStringId.Binding.AddRow" | "DashboardWebStringId.Binding.AddValue" | "DashboardWebStringId.Binding.AddSeries" | "DashboardWebStringId.Binding.SetLatitude" | "DashboardWebStringId.Binding.SetLongitude" | "DashboardWebStringId.Binding.SetArgument" | "DashboardWebStringId.Binding.AddArgument" | "DashboardWebStringId.Binding.SetWeight" | "DashboardWebStringId.Binding.SetColor" | "DashboardWebStringId.Binding.SetAttribute" | "DashboardWebStringId.Binding.SetValue" | "DashboardWebStringId.Binding.XAxis" | "DashboardWebStringId.Binding.YAxis" | "DashboardWebStringId.Binding.ConfigureDimension" | "DashboardWebStringId.Binding.ConfigureMeasure" | "DashboardWebStringId.Binding.ConfigureSeries" | "DashboardWebStringId.Binding.ConfigureArgument" | "DashboardWebStringId.Binding.ConfigureValue" | "DashboardWebStringId.Binding.ConfigureAttribute" | "DashboardWebStringId.Binding.ConfigureLatitude" | "DashboardWebStringId.Binding.ConfigureLongitude" | "DashboardWebStringId.Binding.ConfigureColumn" | "DashboardWebStringId.Binding.ConfigureRow" | "DashboardWebStringId.Binding.ConfigureWeight" | "DashboardWebStringId.Binding.ConfigureColor" | "DashboardWebStringId.Binding.ShowAll" | "DashboardWebStringId.ColorScheme.Color" | "DashboardWebStringId.ColorScheme.Colors" | "DashboardWebStringId.Parameters.ParameterList" | "DashboardWebStringId.Parameters.AddParameter" | "DashboardWebStringId.Parameters.AddParameter.Tooltip" | "DashboardWebStringId.Parameters.NoSelectedParameter" | "DashboardWebStringId.Parameters.Reorder" | "DashboardWebStringId.Parameters.Done" | "DashboardWebStringId.Currency.Currency" | "DashboardWebStringId.Currency.CurrencyCulture" | "DashboardWebStringId.Currency.DefaultCurrencyWarning" | "DashboardWebStringId.Preview" | "DashboardWebStringId.Add" | "DashboardWebStringId.DataSources.UsedDataSources" | "DashboardWebStringId.DataSources.DataItems" | "DashboardWebStringId.DataSources.AddQuery" | "DashboardWebStringId.DataSources.AddCalculatedField" | "DashboardWebStringId.DataSources.AddDataSource" | "DashboardWebStringId.DataSources.NoUsedDataSources" | "DashboardWebStringId.DataSources.NoAvailableDataSources" | "DashboardWebStringId.DataSources.ChooseDataSource" | "DashboardWebStringId.DataSources.CreateDataSource" | "DashboardWebStringId.DataSources.CreateNewDataSource" | "DashboardWebStringId.DataSources.CreateDataSource.Tooltip" | "DashboardWebStringId.DataSources.EditCalculatedField" | "DashboardWebStringId.DataSources.CalculatedField.Name" | "DashboardWebStringId.DataSources.CalculatedField.FieldType" | "DashboardWebStringId.DataSources.CalculatedField.UniqueNameError" | "DashboardWebStringId.DataSources.CalculatedField.Corrupted" | "DashboardWebStringId.DataSources.Edit" | "DashboardStringId.MessageCollectionTypesNotSupported" | "DashboardWebStringId.New.DashboardName" | "DashboardWebStringId.Bindings" | "DashboardWebStringId.Interactivity" | "DashboardWebStringId.Options" | "DashboardWebStringId.Remove" | "DashboardWebStringId.MasterFilterMode" | "DashboardWebStringId.Title.Text" | "DashboardWebStringId.Title.Visible" | "DashboardWebStringId.Title.IncludeMasterFilter" | "DashboardWebStringId.Title.Aligment" | "DashboardWebStringId.Title.Image" | "DashboardWebStringId.DataSources.Cancel" | "DashboardWebStringId.DataSources.IncludeToTheDashboard" | "DashboardWebStringId.DataSources.AvailableDataSourcesError" | "DashboardWebStringId.DataSources.DashboardDataSourceWizard" | "DashboardWebStringId.Viewer" | "DashboardWebStringId.Loading" | "DashboardWebStringId.ClickHereInvitation" | "DashboardWebStringId.BindDataInvitation" | "DashboardWebStringId.AddItemInvitation" | "DashboardWebStringId.Parameters.Values" | "DashboardWebStringId.Binding.Cards" | "DashboardWebStringId.Binding.AddCard" | "DashboardWebStringId.Binding.ConfigureCard" | "DashboardWebStringId.Binding.AddValues" | "DashboardWebStringId.Binding.ConfigureValues" | "DashboardWebStringId.Binding.Maps" | "DashboardWebStringId.Binding.AddMap" | "DashboardWebStringId.Binding.ConfigureMap" | "DashboardWebStringId.Binding.Gauges" | "DashboardWebStringId.Binding.AddGauge" | "DashboardWebStringId.Binding.ConfigureGauge" | "DashboardWebStringId.InteractivityOptions" | "DashboardWebStringId.Binding.Values" | "DashboardWebStringId.Binding.RemovePane" | "DashboardWebStringId.ClickToSetFilterCriteria" | "DashboardWebStringId.DataSources.OK" | "DashboardWebStringId.DataSources.Save" | "DashboardWebStringId.Cards.ArrangementMode" | "DashboardWebStringId.Cards.ArrangementMode.Auto" | "DashboardWebStringId.Cards.ArrangementMode.FixedRows" | "DashboardWebStringId.Cards.ArrangementMode.FixedColumns" | "DashboardWebStringId.Cards.LineCount" | "DashboardWebStringId.ConditionalFormatting" | "DashboardWebStringId.CollectionEditor.NoItems" | "DashboardWebStringId.CollectionEditor.Totals.NoItems" | "DashboardWebStringId.CollectionEditor.Parameters.NoItems" | "DashboardWebStringId.PivotGrid.AutoExpandColumnGroups" | "DashboardWebStringId.PivotGrid.AutoExpandRowGroups" | "DashboardWebStringId.PivotGrid.ColumnGrandTotals" | "DashboardWebStringId.PivotGrid.RowGrandTotals" | "DashboardWebStringId.PivotGrid.ColumnTotals" | "DashboardWebStringId.PivotGrid.RowTotals" | "DashboardWebStringId.PivotGrid.ValuesPosition" | "DashboardWebStringId.PivotGrid.ValuesPositionColumns" | "DashboardWebStringId.PivotGrid.ValuesPositionRows" | "DashboardWebStringId.PivotGrid.RowTotalsPosition" | "DashboardWebStringId.PivotGrid.RowTotalsPositionBottom" | "DashboardWebStringId.PivotGrid.RowTotalsPositionTop" | "DashboardWebStringId.PivotGrid.ColumnTotalsPosition" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionFar" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionNear" | "DashboardWebStringId.PivotGrid.LayoutType" | "DashboardWebStringId.PivotGrid.LayoutTypeCompact" | "DashboardWebStringId.PivotGrid.LayoutTypeTabular" | "DashboardWebStringId.Options.Caption" | "DashboardWebStringId.InteractivityOptions.IsMasterFilter" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.None" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Single" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Multiple" | "DashboardWebStringId.InteractivityOptions.TargetDimensions" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Arguments" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Series" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Points" | "DashboardWebStringId.ColoringOptions" | "DashboardWebStringId.DataSources.Filter" | "DashboardWebStringId.Chart.Rotated" | "DashboardWebStringId.Chart.Panes" | "DashboardWebStringId.Chart.Legend" | "DashboardWebStringId.Chart.AxisX" | "DashboardWebStringId.Chart.AxisY" | "DashboardWebStringId.Chart.AxisYSecondary" | "DashboardWebStringId.Chart.PointLabelOptions" | "DashboardWebStringId.Chart.AxisXMeasure" | "DashboardWebStringId.Chart.AxisYMeasure" | "DashboardWebStringId.Chart.Weight" | "DashboardWebStringId.Chart.Content" | "DashboardWebStringId.Chart.ArgumentAndWeight" | "DashboardWebStringId.Chart.ArgumentAndValues" | "DashboardWebStringId.Chart.Reverse" | "DashboardWebStringId.Chart.Visible" | "DashboardWebStringId.Chart.Title" | "DashboardWebStringId.Chart.TitleText" | "DashboardWebStringId.Chart.EnableZooming" | "DashboardWebStringId.Chart.LimitVisiblePoints" | "DashboardWebStringId.Chart.VisiblePointsCount" | "DashboardWebStringId.Chart.AlwaysShowZeroLevel" | "DashboardWebStringId.Chart.GridLines" | "DashboardWebStringId.Chart.LogarithmicScale" | "DashboardWebStringId.Chart.LogarithmicScaleBase" | "DashboardWebStringId.Chart.LogarithmicScaleBase2" | "DashboardWebStringId.Chart.LogarithmicScaleBase5" | "DashboardWebStringId.Chart.LogarithmicScaleBase10" | "DashboardWebStringId.Chart.Position" | "DashboardWebStringId.Chart.IsInsideOfDiagram" | "DashboardWebStringId.Chart.PrimaryAxisY" | "DashboardWebStringId.Chart.SecondaryAxisY" | "DashboardWebStringId.Chart.Name" | "DashboardWebStringId.Chart.PlotOnSecondaryAxis" | "DashboardWebStringId.Chart.IgnoreEmptyPoints" | "DashboardWebStringId.Chart.ShowPointMarkers" | "DashboardWebStringId.Chart.Value" | "DashboardWebStringId.Chart.ShowZeroValues" | "DashboardWebStringId.Chart.OverlappingMode" | "DashboardWebStringId.Chart.Orientation" | "DashboardWebStringId.Chart.ShowPointLablels" | "DashboardWebStringId.Chart.TooltipContent" | "DashboardWebStringId.Chart.LabelContent" | "DashboardWebStringId.Card.SparklineOptions" | "DashboardWebStringId.Card.SparklineVisible" | "DashboardWebStringId.Chart.Position.TopLeftVertical" | "DashboardWebStringId.Chart.Position.TopLeftHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterHorizontal" | "DashboardWebStringId.Chart.Position.TopRightVertical" | "DashboardWebStringId.Chart.Position.TopRightHorizontal" | "DashboardWebStringId.Chart.Position.BottomLeftVertical" | "DashboardWebStringId.Chart.Position.BottomLeftHorizontal" | "DashboardWebStringId.Chart.Position.BottomCenterHorizontal" | "DashboardWebStringId.Chart.Position.BottomRightVertical" | "DashboardWebStringId.Chart.Position.BottomRightHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterVertical" | "DashboardWebStringId.Chart.Position.BottomCenterVertical" | "DashboardWebStringId.FilterItem.Type" | "DashboardWebStringId.FilterItem.Type.Standard" | "DashboardWebStringId.FilterItem.Type.Checked" | "DashboardWebStringId.FilterItem.Type.Radio" | "DashboardWebStringId.FilterItem.ShowAllValue" | "DashboardWebStringId.FilterItem.EnableSearch" | "DashboardWebStringId.Gauge.Min" | "DashboardWebStringId.Gauge.Max" | "DashboardWebStringId.Gauge.ScaleOptions" | "DashboardWebStringId.Gauge.Type" | "DashboardWebStringId.Gauge.Type.FullQuarterGauge" | "DashboardWebStringId.Gauge.Type.HalfCircular" | "DashboardWebStringId.Gauge.Type.LeftQuarterCircular" | "DashboardWebStringId.Gauge.Type.RightQuarterCircular" | "DashboardWebStringId.Gauge.Type.ThreeFourthCircular" | "DashboardWebStringId.Gauge.Type.LinearHorizontal" | "DashboardWebStringId.Gauge.Type.LinearVertical" | "DashboardWebStringId.Gauge.Captions" | "DashboardWebStringId.Gauge.Scale.Custom" | "DashboardWebStringId.Gauge.Scale.Auto" | "DashboardWebStringId.Grid.ColumnType" | "DashboardWebStringId.Grid.DisplayMode" | "DashboardWebStringId.Grid.DisplayMode.Value" | "DashboardWebStringId.Grid.DisplayMode.Bar" | "DashboardWebStringId.Grid.DisplayMode.Text" | "DashboardWebStringId.Grid.DisplayMode.Image" | "DashboardWebStringId.Grid.FixedWidth" | "DashboardWebStringId.Grid.WidthType" | "DashboardWebStringId.Grid.WidthType.Weight" | "DashboardWebStringId.Grid.WidthType.FitToContent" | "DashboardWebStringId.Grid.DeltaOptions" | "DashboardWebStringId.Grid.ShowStartEndValues" | "DashboardWebStringId.Grid.TotalType" | "DashboardWebStringId.Grid.Dimension" | "DashboardWebStringId.Grid.Measure" | "DashboardWebStringId.Grid.Delta" | "DashboardWebStringId.Grid.Sparkline" | "DashboardWebStringId.Grid.Hyperlink" | "DashboardWebStringId.Grid.Options" | "DashboardWebStringId.Map.ShapeFileLoaded" | "DashboardWebStringId.Map.AttributeFileLoaded" | "DashboardWebStringId.Map.ValueMap" | "DashboardWebStringId.Map.DeltaMap" | "DashboardWebStringId.Map.TooltipCaption" | "DashboardWebStringId.Map.TooltipActualValueCaption" | "DashboardWebStringId.Map.TooltipDeltaCaption" | "DashboardWebStringId.Map.CustomMapOptions" | "DashboardWebStringId.Map.CustomMapOptionsSource" | "DashboardWebStringId.Map.CustomMapOptionsUrl" | "DashboardWebStringId.Map.CustomMapOptionsFile" | "DashboardWebStringId.Map.CustomMapUrl" | "DashboardWebStringId.Map.CustomMapFile" | "DashboardWebStringId.Map.CustomAttributeFile" | "DashboardWebStringId.Map.AttributeDimension" | "DashboardWebStringId.Map.IncludeSummaryValueToShapeTitle" | "DashboardWebStringId.Map.AttributeName" | "DashboardWebStringId.Map.TooltipAttribute" | "DashboardWebStringId.Map.TooltipDimensions" | "DashboardWebStringId.Map.Area.Custom" | "DashboardWebStringId.Map.Area.WorldCountries" | "DashboardWebStringId.Map.Area.Europe" | "DashboardWebStringId.Map.Area.Asia" | "DashboardWebStringId.Map.Area.NorthAmerica" | "DashboardWebStringId.Map.Area.SouthAmerica" | "DashboardWebStringId.Map.Area.Africa" | "DashboardWebStringId.Map.Area.USA" | "DashboardWebStringId.Map.Area.Canada" | "DashboardWebStringId.Map.Viewport" | "DashboardWebStringId.Map.ShapeTitleAttribute" | "DashboardWebStringId.Map.UseBindingAttribute" | "DashboardWebStringId.Map.WeightedLegendType" | "DashboardWebStringId.Map.WeightedLegendType.Linear" | "DashboardWebStringId.Map.WeightedLegendType.Nested" | "DashboardWebStringId.Map.Orientation.Vertical" | "DashboardWebStringId.Map.Orientation.Horizontal" | "DashboardWebStringId.Map.Position.TopLeft" | "DashboardWebStringId.Map.Position.TopCenter" | "DashboardWebStringId.Map.Position.TopRight" | "DashboardWebStringId.Map.Position.BottomLeft" | "DashboardWebStringId.Map.Position.BottomCenter" | "DashboardWebStringId.Map.Position.BottomRight" | "DashboardWebStringId.Map.Viewport.TopLatitude" | "DashboardWebStringId.Map.Viewport.LeftLongitude" | "DashboardWebStringId.Map.Viewport.RightLongitude" | "DashboardWebStringId.Map.Viewport.BottomLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLongitude" | "DashboardWebStringId.Map.Viewport.CreateViewerPaddings" | "DashboardWebStringId.Map.ShowLegend" | "DashboardWebStringId.Pie.Type" | "DashboardWebStringId.Pie" | "DashboardWebStringId.Pie.Donut" | "DashboardWebStringId.Pie.LabelContentType.None" | "DashboardWebStringId.Pie.LabelContentType.Argument" | "DashboardWebStringId.Pie.LabelContentType.Percent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndPercent" | "DashboardWebStringId.Pie.LabelContentType.Value" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndValue" | "DashboardWebStringId.Pie.LabelContentType.ValueAndPercent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentValueAndPercent" | "DashboardWebStringId.Image.BindingMode" | "DashboardWebStringId.Image.BindingMode.BinaryArray" | "DashboardWebStringId.Image.BindingMode.Uri" | "DashboardWebStringId.RangeFilter.UriPattern" | "DashboardWebStringId.Image.SizeMode.Clip" | "DashboardWebStringId.Image.SizeMode.Stretch" | "DashboardWebStringId.Image.SizeMode.Zoom" | "DashboardWebStringId.Image.SizeMode.Squeeze" | "DashboardWebStringId.Image.HorizontalAlignment" | "DashboardWebStringId.Image.VerticalAlignment" | "DashboardWebStringId.Image.Alignment.Left" | "DashboardWebStringId.Image.Alignment.Center" | "DashboardWebStringId.Image.Alignment.Right" | "DashboardWebStringId.Image.Alignment.Top" | "DashboardWebStringId.Image.Alignment.Bottom" | "DashboardWebStringId.SeriesItem.SeriesDimensions" | "DashboardWebStringId.TextBox.Text" | "DashboardWebStringId.Chart.Orientation.Default" | "DashboardWebStringId.Chart.Orientation.RotateRight" | "DashboardWebStringId.Chart.Orientation.RotateLeft" | "DashboardWebStringId.Chart.OverlappingMode.Hide" | "DashboardWebStringId.Chart.OverlappingMode.None" | "DashboardWebStringId.Chart.Position.Outside" | "DashboardWebStringId.Chart.Position.Inside" | "DashboardWebStringId.Chart.SeriesType.Weighted" | "DashboardWebStringId.Coloring.MeasuresColoringMode" | "DashboardWebStringId.Coloring.Global" | "DashboardWebStringId.Coloring.Local" | "DashboardWebStringId.Delta.ValueType" | "DashboardWebStringId.Delta.ResultIndication" | "DashboardWebStringId.Delta.ThresholdType" | "DashboardWebStringId.Delta.ThresholdValue" | "DashboardWebStringId.Sparkline.ViewType" | "DashboardWebStringId.Sparkline.HighlightMinMaxPoints" | "DashboardWebStringId.Sparkline.HighlightStartEndPoints" | "DashboardWebStringId.Title.Aligment.Left" | "DashboardWebStringId.Title.Aligment.Center" | "DashboardWebStringId.Parameters.LookUpSettingsType.NoLookUp" | "DashboardWebStringId.Parameters.LookUpSettingsType.StaticList" | "DashboardWebStringId.Parameters.LookUpSettingsType.DynamicList" | "DashboardWebStringId.Parameters.LookUpSettingsType" | "DashboardWebStringId.Parameters.DefaultValue" | "DashboardWebStringId.DataItem" | "DashboardWebStringId.DataItem.Precision" | "DashboardWebStringId.DataItem.IncludeGroupSeparator" | "DashboardWebStringId.DataItem.ShowValues" | "DashboardWebStringId.DataItem.ShowTotals" | "DashboardWebStringId.DataItem.ShowGrandTotals" | "DashboardWebStringId.Dialog.ConfirmSaving" | "DashboardWebStringId.Dimension.GroupInterval" | "DashboardWebStringId.Dimension.SortMode" | "DashboardWebStringId.Dialog.ArgumentMode" | "DashboardWebStringId.Calculations" | "DashboardWebStringId.Calculations.Expression" | "DashboardWebStringId.Calculations.DifferenceCalculation" | "DashboardWebStringId.Calculations.Moving" | "DashboardWebStringId.Calculations.RunningTotal" | "DashboardWebStringId.Calculations.PercentOfTotal" | "DashboardWebStringId.Calculations.Rank" | "DashboardWebStringId.Calculations.DefinitionMode" | "DashboardWebStringId.Calculations.WindowDefinition" | "DashboardWebStringId.Calculations.WindowDefinitionModeSpecific" | "DashboardWebStringId.Calculations.WindowDefinitionModePredefined" | "DashboardWebStringId.Calculations.DifferenceType" | "DashboardWebStringId.TreemapLayoutAlgorithm" | "DashboardWebStringId.TilesLabelContentType" | "DashboardWebStringId.TilesTooltipContentType" | "DashboardWebStringId.GroupsLabelContentType" | "DashboardWebStringId.GroupsTooltipContentType" | "DashboardWebStringId.ShowOthersValue" | "DashboardWebStringId.TopNEnabled" | "DashboardWebStringId.Parameters.StaticListLookUpSettings" | "DashboardWebStringId.Parameters.DynamicListLookUpSettings" | "DashboardWebStringId.ConvertTo" | "DashboardWebStringId.Duplicate" | "DashboardWebStringId.DataSourceWizard" | "DashboardWebStringId.RangeFilter.CustomPeriods" | "DashboardWebStringId.RangeFilter.StartMode" | "DashboardWebStringId.RangeFilter.EndMode" | "DashboardWebStringId.RangeFilter.StartIntervalAndOffset" | "DashboardWebStringId.RangeFilter.EndIntervalAndOffset" | "DashboardWebStringId.RangeFilter.StartDate" | "DashboardWebStringId.RangeFilter.EndDate" | "DashboardWebStringId.RangeFilter.None" | "DashboardWebStringId.RangeFilter.Fixed" | "DashboardWebStringId.RangeFilter.Flow" | "DashboardWebStringId.Tabs.Binding" | "DashboardWebStringId.Tabs.DataShaping" | "DashboardWebStringId.Tabs.Format" | "DashboardWebStringId.Calculations.Types.Moving" | "DashboardWebStringId.Parameters.SortByMember" | "DashboardWebStringId.Parameters.LookUpSettingsTypeCaption" | "DashboardWebStringId.Dashboard.Items" | "DashboardWebStringId.Dashboard.Groups" | "DashboardWebStringId.Dashboard.LayoutItems" | "DashboardWebStringId.Dashboard.ComponentName" | "DashboardWebStringId.ButtonConfirm" | "DashboardWebStringId.Colorization.GroupInterval" | "DashboardWebStringId.ButtonOn" | "DashboardWebStringId.ButtonOff" | "DashboardWebStringId.ButtonYes" | "DashboardWebStringId.ButtonNo" | "DashboardWebStringId.ButtonDiscrete" | "DashboardWebStringId.ButtonContinuous" | "DashboardWebStringId.ButtonVisible" | "DashboardWebStringId.ButtonHidden" | "DashboardWebStringId.Calculations.PreviousValuesCount" | "DashboardWebStringId.Calculations.NextValuesCount" | "DashboardWebStringId.Calculations.RankType" | "DashboardWebStringId.Calculations.RankOrder" | "DashboardWebStringId.TileOptions" | "DashboardWebStringId.MapLockNavigationLocked" | "DashboardWebStringId.MapLockNavigationUnlocked" | "DashboardWebStringId.ConditionalFormatting.BarOptions" | "DashboardWebStringId.ConditionalFormatting.CalculatedBy" | "DashboardWebStringId.ConditionalFormatting.IconType" | "DashboardWebStringId.ConditionalFormatting.PredefinedColor" | "DashboardWebStringId.ConditionalFormatting.AppearanceType" | "DashboardWebStringId.ConditionalFormatting.FontStyle" | "DashboardWebStringId.ConditionalFormatting.FontFamily" | "DashboardWebStringId.ConditionalFormatting.FontRegular" | "DashboardWebStringId.ConditionalFormatting.IconType.None" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowSideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGraySideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDash" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedTriangleDown" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenTriangleUp" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingHalfGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1QuarterGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1Bar" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1FilledBox" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTriangle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedDiamond" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedFlag" | "DashboardWebStringId.ConditionalFormatting.IntersectionColumnDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionRowDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionLevelMode" | "DashboardWebStringId.ConditionalFormatting.GradientRangeBar" | "DashboardWebStringId.ConditionalFormatting.RangeGradient" | "DashboardWebStringId.ConditionalFormatting.SegmentNumber" | "DashboardWebStringId.ConditionalFormatting.ValueComparison" | "DashboardWebStringId.ConditionalFormatting.Ranges" | "DashboardWebStringId.ConditionalFormatting.AverageType" | "DashboardWebStringId.ConditionalFormatting.Above" | "DashboardWebStringId.ConditionalFormatting.AboveOrEqual" | "DashboardWebStringId.ConditionalFormatting.Below" | "DashboardWebStringId.ConditionalFormatting.BelowOrEqual" | "DashboardWebStringId.ConditionalFormatting.StyleSettingsType" | "DashboardWebStringId.ConditionalFormatting.Positive" | "DashboardWebStringId.ConditionalFormatting.Negative" | "DashboardWebStringId.ConditionalFormatting.MinimumType" | "DashboardWebStringId.ConditionalFormatting.MaximumType" | "DashboardWebStringId.ConditionalFormatting.DateType" | "DashboardWebStringId.ConditionalFormatting.DateType.None" | "DashboardWebStringId.ConditionalFormatting.DateType.SpecificDate" | "DashboardWebStringId.ConditionalFormatting.DateType.BeyondThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.NextWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.Tomorrow" | "DashboardWebStringId.ConditionalFormatting.DateType.Today" | "DashboardWebStringId.ConditionalFormatting.DateType.Yesterday" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.LastWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.PriorThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.Empty" | "DashboardWebStringId.ConditionalFormatting.DateType.User" | "DashboardWebStringId.ConditionalFormatting.DateType.Beyond" | "DashboardWebStringId.ConditionalFormatting.DateType.ThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.ThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAfter1" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAfter2" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo1" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo2" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo3" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo4" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo5" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo6" | "DashboardWebStringId.ConditionalFormatting.DateType.Earlier" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeDataItem" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeCard" | "DashboardWebStringId.Colorization.NoSelectedSchema" | "DashboardWebStringId.Colorization.ColorSchemes" | "DashboardWebStringId.LayoutHasBeenChangedDialogMessage" | "DashboardWebStringId.SaveConfirmationDialogMessage" | "DashboardWebStringId.SaveChangesDialogMessage" | "DashboardWebStringId.Dialog.ChangeDataMemberMessage" | "DashboardWebStringId.Dialog.RemovedDataItemsMessage" | "DashboardWebStringId.Dialog.ConfirmChanges" | "DashboardWebStringId.Dialog.Save" | "DashboardWebStringId.Dialog.DoNotSave" | "DashboardWebStringId.Dialog.ButtonYes" | "DashboardWebStringId.Dialog.ButtonDontChange" | "DashboardWebStringId.Colorization.ColorSchemeType" | "DashboardWebStringId.Colorization.MeasureNames" | "DashboardWebStringId.Colorization.AddColor" | "DashboardWebStringId.Colorization.ValidationSelectMeasure" | "DashboardWebStringId.ColoringModeAuto" | "DashboardWebStringId.ColoringModeOff" | "DashboardWebStringId.ColoringModeOn" | "DashboardWebStringId.ColorScheme.Empty" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButton" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip" | "DashboardWebStringId.ConditionalFormatting.Miscellaneous" | "DashboardWebStringId.Dashboards" | "DashboardWebStringId.EditInDesigner" | "DashboardWebStringId.NoDashboards" | "DashboardWebStringId.AddNewDashboard" | "DashboardWebStringId.NewDashboard" | "DashboardWebStringId.Binding.Searching" | "DashboardWebStringId.Binding.EmptySearchResult" | "DashboardWebStringId.Errors.AttemptToLoadData" | "DashboardWebStringId.ConditionType" | "DashboardWebStringId.ConditionalFormatting.UnsupportedDataType" | "DashboardWebStringId.FormatRule" | "DashboardWebStringId.Notification.DashboardSaving" | "DashboardWebStringId.Notification.DashboardSaved" | "DashboardWebStringId.Notification.DashboardCanNotBeSaved" | "DashboardWebStringId.Notification.DashboardSavingIsNotAvailable" | "DashboardWebStringId.Notification.AttemptToLoadDashboards" | "DashboardWebStringId.Notification.DashboardLoading" | "DashboardWebStringId.Notification.AttemptToLoadDashboard" | "DashboardWebStringId.Notification.AttemptToConnectionStrings" | "DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode" | "DashboardWebStringId.Notification.AttemptToLoadParameterValues" | "DashboardWebStringId.Notification.AttemptToGetUnderlyingData" | "DashboardWebStringId.Notification.AttemptToConvertItemToType" | "DashboardWebStringId.Notification.AttemptToLoadDimensionUniqueValues" | "DashboardWebStringId.Notification.AttemptToLoadFieldListForDataSource" | "DashboardWebStringId.Notification.AttemptToGetColorScheme" | "DashboardWebStringId.Notification.NewDashboardCannotBeCreated" | "DashboardWebStringId.Notification.ErrorHasOccuredOn" | "DashboardWebStringId.Notification.UnsupportedDataSourceType" | "DashboardWebStringId.LimitVisibleData.DisplayAllDataTooltip" | "DashboardWebStringId.LimitVisibleData.IncreasePerformanceTooltip" | "DashboardWebStringId.ConditionalFormatting.Condition" | "DashboardWebStringId.CardLayout.MinWidth" | "DashboardWebStringId.CardLayout.MaxWidth" | "DashboardWebStringId.CardLayout.Editor.CardLayout" | "DashboardWebStringId.CardLayout.Editor.FormatOptions" | "DashboardWebStringId.CardLayout.LayoutOptions" | "DashboardWebStringId.CardLayout.ResetTemplate" | "DashboardWebStringId.CardLayout.ApplyToAllCards" | "DashboardWebStringId.Binding.ValuesPattern" | "DashboardWebStringId.Parameters.ParameterNameShouldBeUnique" | "DashboardWebStringId.Title.ImageEmbedded" | "DashboardWebStringId.Title.ImageLinked" | "DashboardWebStringId.Title.ImageNone" | "DashboardWebStringId.RangeFilter.SetDefaultCustomPeriod" | "DashboardWebStringId.RangeFilter.ClearDefaultCustomPeriod" | "DashboardWebStringId.MobileLayout.Back" | "DashboardWebStringId.MobileLayout.SwitchToViewer" | "DashboardWebStringId.Search" | "DashboardStringId.DefaultNameTabPage" | "DashboardStringId.DefaultNameChartPane" | "DashboardStringId.NewCalculatedFieldNamePrefix" | "DashboardStringId.NewParameterNamePrefix" | "AnalyticsCoreStringId.Parameter_Type_String" | "AnalyticsCoreStringId.Parameter_Type_DateTime" | "AnalyticsCoreStringId.Parameter_Type_Int16" | "AnalyticsCoreStringId.Parameter_Type_Int32" | "AnalyticsCoreStringId.Parameter_Type_Int64" | "AnalyticsCoreStringId.Parameter_Type_Float" | "AnalyticsCoreStringId.Parameter_Type_Double" | "AnalyticsCoreStringId.Parameter_Type_Decimal" | "AnalyticsCoreStringId.Parameter_Type_Boolean" | "AnalyticsCoreStringId.Parameter_Type_Guid" | "AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption" | "DataAccessUIStringId.FiltersView" | "DashboardStringId.SeriesTypeGroupArea" | "DashboardStringId.SeriesTypeGroupBar" | "DashboardStringId.SeriesTypeGroupBubble" | "DashboardStringId.SeriesTypeGroupFinancial" | "DashboardStringId.SeriesTypeGroupPointLine" | "DashboardStringId.SeriesTypeGroupRange" | "DashboardStringId.FunctionCategoryWindow" | "DashboardStringId.FunctionCategoryAggregate" | "DashboardStringId.FunctionCategoryAdvanced" | "DashboardStringId.FunctionDescriptionWindowAvg" | "DashboardStringId.FunctionDescriptionRunningMin" | "DashboardStringId.FunctionDescriptionTotal" | "DashboardStringId.FunctionDescriptionRankCompetition" | "DashboardStringId.FunctionDescriptionLookup" | "DashboardStringId.FunctionDescriptionRunningCount" | "DashboardStringId.FunctionDescriptionWindowMax" | "DashboardStringId.FunctionDescriptionVarp" | "DashboardStringId.FunctionDescriptionRunningAvg" | "DashboardStringId.FunctionDescriptionFirst" | "DashboardStringId.FunctionDescriptionWindowMin" | "DashboardStringId.FunctionDescriptionWindowStdDev" | "DashboardStringId.FunctionDescriptionLast" | "DashboardStringId.FunctionDescriptionWindowCount" | "DashboardStringId.FunctionDescriptionCountDistinct" | "DashboardStringId.FunctionDescriptionIndex" | "DashboardStringId.FunctionDescriptionWindowStdDevp" | "DashboardStringId.FunctionDescriptionWindowMode" | "DashboardStringId.FunctionDescriptionRunningMax" | "DashboardStringId.FunctionDescriptionRankPercentile" | "DashboardStringId.FunctionDescriptionRankDense" | "DashboardStringId.FunctionDescriptionWindowSum" | "DashboardStringId.FunctionDescriptionWindowCountDistinct" | "DashboardStringId.FunctionDescriptionStdDevp" | "DashboardStringId.FunctionDescriptionSize" | "DashboardStringId.FunctionDescriptionMedian" | "DashboardStringId.FunctionDescriptionRankModified" | "DashboardStringId.FunctionDescriptionWindowMedian" | "DashboardStringId.FunctionDescriptionRunningSum" | "DashboardStringId.FunctionDescriptionWindowVarp" | "DashboardStringId.FunctionDescriptionWindowVar" | "DashboardStringId.FunctionDescriptionStdDev" | "DashboardStringId.FunctionDescriptionRankUnique" | "DashboardStringId.FunctionDescriptionVar" | "DashboardStringId.FunctionDescriptionAggr" | "DashboardStringId.FunctionDescriptionAggrJoinRule" | "DashboardStringId.FunctionDescriptionWindowDefinition" | "DashboardStringId.FunctionDescriptionWindowDefinitionPartitionBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderAsc" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderDesc" | "DashboardStringId.AggregateExFunctionDescriptionCountNotNull" | "DashboardStringId.AggregateExFunctionDescriptionMode" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHour" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinute" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinuteSecond" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateMonthYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear2" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateQuarterYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetQuarter" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfMonth" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime3" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime4" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime5" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime6" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToBoolean" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToDateTime" | "DashboardStringId.SparklineIndicationModeLine" | "DashboardStringId.SparklineIndicationModeArea" | "DashboardStringId.SparklineIndicationModeBar" | "DashboardStringId.SparklineIndicationModeWinLoss" | "DashboardStringId.DefaultNameDateFilterItem" | "DashboardWebStringId.DateFilter.FilterType" | "DashboardWebStringId.DateFilter.FilterTypeExact" | "DashboardWebStringId.DateFilter.FilterTypeAfter" | "DashboardWebStringId.DateFilter.FilterTypeBefore" | "DashboardWebStringId.DateFilter.FilterTypeBetween" | "DashboardWebStringId.DateFilter.ArrangementMode" | "DashboardWebStringId.DateFilter.ArrangementModeAutoHeight" | "DashboardWebStringId.DateFilter.ArrangementModeHorizontal" | "DashboardWebStringId.DateFilter.ArrangementModeVertical" | "DashboardWebStringId.DateFilter.DatePickerLocation" | "DashboardWebStringId.DateFilter.DatePickerLocationFar" | "DashboardWebStringId.DateFilter.DatePickerLocationNear" | "DashboardWebStringId.DateFilter.DatePickerLocationHidden" | "DashboardStringId.DateFilterDisplayTextPattern" | "DashboardStringId.DateFilterDatePickerButtonDefaultText" | "DashboardStringId.FromDatePeriodCaption" | "DashboardStringId.ToDatePeriodCaption" | "DashboardStringId.FromToDatePeriodCaption" | "DashboardStringId.UniqueNameValidationMessage" | "DashboardStringId.GridTotalAutoTemplate" | "DashboardStringId.GridTotalValueTemplate" | "DashboardStringId.GridTotalTemplate" | "DashboardStringId.GridTotalTypeCount" | "DashboardStringId.GridTotalTypeMin" | "DashboardStringId.GridTotalTypeMax" | "DashboardStringId.GridTotalTypeAvg" | "DashboardStringId.GridTotalTypeSum" | "DashboardStringId.ActionShowDataInspector" | "DashboardStringId.InspectedData" | "DashboardStringId.InspectedTypeFormatString" | "DashboardStringId.AggregatedDataType" | "DashboardStringId.RawDataType" | "DashboardStringId.OLAPUnavailableRawData" | "DashboardStringId.SparklineValuesSeparator" | "DashboardStringId.SparklineArgumentValueSeparator" | "DashboardWebStringId.Grid.FilterClause.ApplyFilter" | "DashboardWebStringId.Grid.FilterClause.ResetOperation" | "DashboardWebStringId.Grid.FilterClause.Contains" | "DashboardWebStringId.Grid.FilterClause.DoesNotContain" | "DashboardWebStringId.Grid.FilterClause.StartsWith" | "DashboardWebStringId.Grid.FilterClause.EndsWith" | "DashboardWebStringId.Grid.FilterClause.Equals" | "DashboardWebStringId.Grid.FilterClause.DoesNotEqual" | "DashboardWebStringId.Grid.FilterClause.Less" | "DashboardWebStringId.Grid.FilterClause.Greater" | "DashboardWebStringId.Grid.FilterClause.LessOrEqual" | "DashboardWebStringId.Grid.FilterClause.GreaterOrEqual" | "DashboardWebStringId.Grid.FilterClause.Between" | "DashboardWebStringId.Grid.FilterClause.BetweenStart" | "DashboardWebStringId.Grid.FilterClause.BetweenEnd" | "DashboardWebStringId.AccordionTab.Content" | "DashboardWebStringId.TextBoxItemEditor.NoFields" | "DashboardWebStringId.TextBoxItemEditor.InsertField" | "DashboardWebStringId.TextBoxItemEditor.EditTextButton" | "DashboardWebStringId.TextBoxItemEditor.DialogCaption" | "DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose" | "DashboardWebStringId.TextBoxItemEditor.DialogClose" | "DashboardStringId.StartDate" | "DashboardStringId.EndDate" | "DashboardWebStringId.AccordionTab.MeasureFilter" | "DashboardStringId.FunctionDescriptionAggregateFilter" | "DashboardWebStringId.TabPages" | "DashboardWebStringId.More" | "DashboardStringId.MeasureFilterCaptionFormatString";
	    SpecificLevel: "DashboardStringId.ActionClearMasterFilter" | "DashboardStringId.ActionClearSelection" | "DashboardStringId.ActionOtherValues" | "DashboardStringId.ActionDrillUp" | "DashboardStringId.ActionExportTo" | "DashboardStringId.ActionExportToPdf" | "DashboardStringId.ActionExportToImage" | "DashboardStringId.ActionExportToExcel" | "DashboardStringId.RangeFilterCustomDateTimePeriod" | "DashboardStringId.ActionExportTemplate" | "DashboardStringId.ActionAllowMultiselection" | "DashboardStringId.DashboardNullValue" | "DashboardStringId.TopNOthersValue" | "DashboardStringId.DashboardErrorValue" | "DashboardStringId.DateTimeQuarterFormat" | "DashboardStringId.MessageLoading" | "DashboardStringId.ParametersFormCaption" | "DashboardStringId.ParametersSelectorText" | "DashboardStringId.ParametersFormAllowNullColumnCaption" | "DashboardStringId.ParametersFormValueColumnCaption" | "DashboardStringId.ParametersFormNameColumnCaption" | "DashboardStringId.ButtonOK" | "DashboardStringId.ButtonCancel" | "DashboardStringId.SelectDate" | "DashboardStringId.ButtonReset" | "DashboardStringId.ButtonSubmit" | "DashboardStringId.ButtonApply" | "DashboardStringId.ButtonExport" | "DashboardStringId.GridResetColumnWidths" | "DashboardStringId.GridSortAscending" | "DashboardStringId.GridSortDescending" | "DashboardStringId.GridClearSorting" | "DashboardStringId.PivotGridTotal" | "DashboardStringId.PivotGridGrandTotal" | "DashboardStringId.ChartTotalValue" | "DashboardStringId.PageLayout" | "DashboardStringId.PageLayoutAuto" | "DashboardStringId.PageLayoutPortrait" | "DashboardStringId.PageLayoutLandscape" | "DashboardStringId.PaperKind" | "DashboardStringId.PaperKindLetter" | "DashboardStringId.PaperKindLegal" | "DashboardStringId.PaperKindExecutive" | "DashboardStringId.PaperKindA5" | "DashboardStringId.PaperKindA4" | "DashboardStringId.PaperKindA3" | "DashboardStringId.ScaleMode" | "DashboardStringId.ScaleModeNone" | "DashboardStringId.ScaleModeUseScaleFactor" | "DashboardStringId.ScaleModeAutoFitToPagesWidth" | "DashboardStringId.AutoFitPageCount" | "DashboardStringId.ScaleFactor" | "DashboardStringId.PrintHeadersOnEveryPage" | "DashboardStringId.FitToPageWidth" | "DashboardStringId.SizeMode" | "DashboardStringId.SizeModeNone" | "DashboardStringId.SizeModeStretch" | "DashboardStringId.SizeModeZoom" | "DashboardStringId.AutoArrangeContent" | "DashboardStringId.ImageFormat" | "DashboardStringId.ExcelFormat" | "DashboardStringId.CsvValueSeparator" | "DashboardStringId.ExportFilters" | "DashboardStringId.ExportParameters" | "DashboardStringId.DashboardStatePosition" | "DashboardStringId.Resolution" | "DashboardStringId.ShowTitle" | "DashboardStringId.Title" | "DashboardStringId.FileName" | "DashboardStringId.FilterStatePresentationAfter" | "DashboardStringId.FilterStatePresentationAfterAndSplitPage" | "DashboardStringId.FilterStatePresentationSplitSheet" | "DashboardStringId.MessageCustomItemIsNotSupported" | "DashboardStringId.MessageGridHasNoData" | "DashboardStringId.MessagePivotHasNoData" | "DashboardStringId.SparklineTooltipStartValue" | "DashboardStringId.SparklineTooltipEndValue" | "DashboardStringId.SparklineTooltipMinValue" | "DashboardStringId.SparklineTooltipMaxValue" | "DashboardStringId.OpenCaption" | "DashboardStringId.HighCaption" | "DashboardStringId.LowCaption" | "DashboardStringId.CloseCaption" | "DashboardStringId.InitialExtent" | "DashboardStringId.FilterElementShowAllItem" | "DashboardStringId.NumericFormatUnitSymbolThousands" | "DashboardStringId.NumericFormatUnitSymbolMillions" | "DashboardStringId.NumericFormatUnitSymbolBillions" | "DashboardStringId.ActionSelectDateTimePeriod" | "DashboardStringId.RangeFilterSelectRange" | "DashboardStringId.FilterElementCheckedComboBoxNoDataCaption" | "DashboardStringId.FilterElementRadioComboBoxNoDataCaption" | "DashboardStringId.FilterElementNoDataToDisplay" | "DashboardStringId.RangeFilterSelectRangeFromCaption" | "DashboardStringId.RangeFilterSelectRangeToCaption" | "DashboardWebStringId.DashboardParameters" | "DashboardStringId.DataSourceDataMember" | "DashboardStringId.DescriptionMeasures" | "DashboardWebStringId.TextBoxFormatText" | "DashboardStringId.NumericFormatUnitCaption" | "DashboardWebStringId.SummaryType" | "DashboardStringId.CalculationTypeExpression" | "DevExpressWebStringId.CalculatedFieldDataType" | "DashboardStringId.ValueCaption" | "DashboardStringId.Value1Caption" | "DashboardStringId.Value2Caption" | "DashboardStringId.CommandFormatRuleTopBottom" | "DashboardStringId.CommandFormatRuleAboveBelowAverage" | "DashboardStringId.CommandFormatRuleBar" | "DashboardStringId.CommandFormatRuleColorRangeBar" | "DashboardStringId.CommandFormatRuleGradientRangeBar" | "DashboardStringId.FormatRuleStyleAppearance" | "DashboardStringId.FormatRuleStyleIcons" | "DashboardStringId.FormatRuleNegativeStyle" | "DashboardStringId.CommandFormatRuleExpression" | "DashboardWebStringId.TopNMode" | "DashboardStringId.CommandFormatRuleRangeSet" | "DashboardStringId.CommandFormatRuleValue" | "DashboardStringId.CommandFormatRuleDateOccurring" | "DashboardWebStringId.ConditionalFormatting.Appearance.BackColor" | "DashboardWebStringId.ConditionalFormatting.Appearance.ForeColor" | "DashboardStringId.DescriptionBoundImageAttribute" | "DashboardWebStringId.ShowCaptionText" | "DashboardWebStringId.DisplayItemAsPage" | "DashboardStringId.DefaultNameItemGroup" | "DashboardStringId.DefaultNameTabContainerItem" | "DashboardStringId.DefaultDataSourceName" | "DashboardWebStringId.CrossDataSourceFiltering" | "DashboardStringId.RangeFilterCalculationAlongSeries" | "DashboardStringId.RangeFilterCalculationAlongArgument" | "DashboardStringId.DescriptionItemSeries" | "DashboardStringId.DescriptionSeries" | "DashboardWebStringId.Chart.SeriesType" | "DashboardStringId.DescriptionDimensions" | "DashboardWebStringId.TreeView.AutoExpand" | "DashboardWebStringId.ConditionalFormatting.ConditionMinimum" | "DashboardWebStringId.ConditionalFormatting.ConditionMaximum" | "DashboardStringId.DescriptionItemDimension" | "DashboardStringId.DescriptionItemMeasure" | "DashboardWebStringId.Grid.MergeCells" | "DashboardWebStringId.Grid.ColumnWidthMode" | "DashboardWebStringId.Grid.BandedRows" | "DashboardWebStringId.Grid.VerticalLines" | "DashboardWebStringId.Grid.HorizontalLines" | "DashboardWebStringId.Grid.ColumnHeaders" | "DashboardWebStringId.Grid.WordWrap" | "DashboardStringId.ActualValueCaption" | "DashboardStringId.TargetValueCaption" | "DashboardStringId.UriPatternCaption" | "DashboardStringId.UriCaption" | "DashboardStringId.DisplayValueCaption" | "DashboardStringId.WeightCaption" | "DashboardStringId.DescriptionItemColor" | "DashboardStringId.Latitude" | "DashboardStringId.Longitude" | "DashboardWebStringId.GeoPointMapClusterization" | "DashboardWebStringId.MapLockNavigation" | "DashboardWebStringId.WeightedLegendGalleryGroup" | "DashboardStringId.DescriptionItemArgument" | "DashboardWebStringId.PieMapIsWeighted" | "DashboardWebStringId.InteractivityOptions.IgnoreMasterFilters" | "DashboardWebStringId.InteractivityOptions.DrillDown" | "DashboardWebStringId.Pie.ShowCaptions" | "DashboardStringId.DescriptionColumns" | "DashboardStringId.DescriptionRows" | "DashboardStringId.DescriptionValues" | "DashboardStringId.DescriptionArguments" | "DashboardStringId.TextGroupIntervalAlphabetical" | "DashboardStringId.ActionMaximizeDashboardItem" | "DashboardStringId.ActionRestoreDashboardItem" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataSource" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.ValueMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DisplayMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.SortOrder" | "DevExpress.DashboardCommon.DashboardParameter.Visible" | "DevExpress.DashboardCommon.DashboardParameter.Description" | "DevExpress.DashboardCommon.DashboardParameter.AllowMultiselect" | "DevExpress.DashboardCommon.DashboardParameter.AllowNull" | "DevExpress.DashboardCommon.DashboardParameter.SelectAllValues" | "DevExpress.DashboardCommon.StaticListLookUpSettings.Values" | "DevExpress.DashboardCommon.DimensionSortOrder.Ascending" | "DevExpress.DashboardCommon.DimensionSortOrder.Descending" | "DevExpress.DashboardCommon.DimensionSortOrder.None" | "DashboardWebStringId.AccordionTab.ScatterChartPointLabelOptions" | "DashboardWebStringId.AccordionTab.ChoroplethMapShapeLabelsAttribute" | "DashboardStringId.CommandFormatRuleTopN" | "DashboardWebStringId.Type" | "DashboardWebStringId.Grid.ColumnWidth" | "DashboardWebStringId.AccordionTab.ShowTotals" | "DashboardWebStringId.AccordionTab.Layout" | "DashboardWebStringId.AccordionTab.PivotInitialState" | "DashboardWebStringId.AccordionTab.ImageOptions" | "DashboardWebStringId.AccordionTab.Labels" | "DashboardWebStringId.AccordionTab.MapLegend" | "DashboardWebStringId.AccordionTab.WeightedLegend" | "DashboardWebStringId.AccordionTab.Common" | "DashboardWebStringId.AccordionTab.ChartLegend" | "DashboardWebStringId.Grid.AutoFitToContentsColumnWidthMode" | "DashboardWebStringId.Grid.AutoFitToGridColumnWidthMode" | "DashboardWebStringId.Grid.ManualGridColumnWidthMode" | "DashboardStringId.DateTimeIntervalYear" | "DashboardStringId.DateTimeIntervalQuarter" | "DashboardStringId.DateTimeIntervalMonth" | "DashboardStringId.DateTimeIntervalWeek" | "DashboardStringId.DateTimeIntervalDay" | "DashboardStringId.DateTimeIntervalHour" | "DashboardStringId.DateTimeIntervalMinute" | "DashboardStringId.DateTimeIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalYear" | "DashboardStringId.DateTimeGroupIntervalQuarter" | "DashboardStringId.DateTimeGroupIntervalMonth" | "DashboardStringId.DateTimeGroupIntervalDay" | "DashboardStringId.DateTimeGroupIntervalHour" | "DashboardStringId.DateTimeGroupIntervalMinute" | "DashboardStringId.DateTimeGroupIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalDayOfYear" | "DashboardStringId.DateTimeGroupIntervalDayOfWeek" | "DashboardStringId.DateTimeGroupIntervalWeekOfYear" | "DashboardStringId.DateTimeGroupIntervalWeekOfMonth" | "DashboardStringId.DateTimeGroupIntervalMonthYear" | "DashboardStringId.DateTimeGroupIntervalQuarterYear" | "DashboardStringId.DateTimeGroupIntervalWeekYear" | "DashboardStringId.DateTimeGroupIntervalDayMonthYear" | "DashboardStringId.DateTimeGroupIntervalDateHour" | "DashboardStringId.DateTimeGroupIntervalDateHourMinute" | "DashboardStringId.DateTimeGroupIntervalDateHourMinuteSecond" | "DashboardStringId.DateTimeGroupIntervalExactDate" | "DashboardStringId.GroupIntervalNone" | "DashboardWebStringId.Treemap.StripedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SquarifiedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SliceAndDiceLayoutAlgorithm" | "DashboardWebStringId.Treemap.TileLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.TileLabelsNone" | "DashboardWebStringId.Treemap.TileLabelsValue" | "DashboardWebStringId.Treemap.TileLabelsArgument" | "DashboardWebStringId.Treemap.TileTooltipsArgumentAndValue" | "DashboardWebStringId.Treemap.TileTooltipsArgument" | "DashboardWebStringId.Treemap.TileTooltipsValue" | "DashboardWebStringId.Treemap.TileTooltipsNone" | "DashboardWebStringId.Treemap.TopLeftToBottomRightLayoutDirection" | "DashboardWebStringId.Treemap.TopRightToBottomLeftLayoutDirection" | "DashboardWebStringId.Treemap.BottomLeftToTopRightLayoutDirection" | "DashboardWebStringId.Treemap.BottomRightToTopLeftLayoutDirection" | "DashboardWebStringId.Treemap.LayoutDirection" | "DashboardWebStringId.Treemap.GroupLabelsNone" | "DashboardWebStringId.Treemap.GroupLabelsArgument" | "DashboardWebStringId.Treemap.GroupLabelsValue" | "DashboardWebStringId.Treemap.GroupLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.GroupTooltipsNone" | "DashboardWebStringId.Treemap.GroupTooltipsArgument" | "DashboardWebStringId.Treemap.GroupTooltipsValue" | "DashboardWebStringId.Treemap.GroupTooltipsArgumentAndValue" | "DashboardStringId.RankOrderAscending" | "DashboardStringId.RankOrderDescending" | "DashboardStringId.DateTimeFormatYearFormatDefaultCaption" | "DashboardStringId.DateTimeFormatYearFormatFullCaption" | "DashboardStringId.DateTimeFormatYearFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatQuarterFormatDefaultCaption" | "DashboardStringId.DateTimeFormatQuarterFormatNumericCaption" | "DashboardStringId.DateTimeFormatQuarterFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatDefaultCaption" | "DashboardStringId.DateTimeFormatMonthFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatMonthFormatNumericCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatFullCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatNumericCaption" | "DashboardStringId.DateTimeFormatDateFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateFormatLongCaption" | "DashboardStringId.DateTimeFormatDateFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatLongCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption" | "DashboardStringId.ExactDateFormatYear" | "DashboardStringId.ExactDateFormatQuarter" | "DashboardStringId.ExactDateFormatMonth" | "DashboardStringId.ExactDateFormatDay" | "DashboardStringId.ExactDateFormatHour" | "DashboardStringId.ExactDateFormatMinute" | "DashboardStringId.ExactDateFormatSecond" | "DashboardWebStringId.FormatType" | "DashboardWebStringId.TopN.Top" | "DashboardWebStringId.TopN.Bottom" | "DashboardWebStringId.DimensionSortBy" | "DashboardStringId.NumericFormatUnitAutoCaption" | "DashboardStringId.NumericFormatFormatTypeAutoCaption" | "DashboardStringId.NumericFormatFormatTypeGeneralCaption" | "DashboardStringId.NumericFormatFormatTypeNumberCaption" | "DashboardStringId.NumericFormatFormatTypeCurrencyCaption" | "DashboardStringId.NumericFormatFormatTypeScientificCaption" | "DashboardStringId.NumericFormatFormatTypePercentCaption" | "DashboardStringId.NumericFormatUnitOnesCaption" | "DashboardStringId.NumericFormatUnitThousandsCaption" | "DashboardStringId.NumericFormatUnitMillionsCaption" | "DashboardStringId.NumericFormatUnitBillionsCaption" | "DashboardStringId.DeltaValueTypeActualValueCaption" | "DashboardStringId.DeltaValueTypeAbsoluteVariationCaption" | "DashboardStringId.DeltaValueTypePercentVariationCaption" | "DashboardStringId.DeltaValueTypePercentOfTargetCaption" | "DashboardStringId.DeltaValueTypeTargetValueCaption" | "DashboardStringId.DeltaIndicationModeGreaterIsGoodCaption" | "DashboardStringId.DeltaIndicationModeLessIsGoodCaption" | "DashboardStringId.DeltaIndicationModeWarningIfGreaterCaption" | "DashboardStringId.DeltaIndicationModeWarningIfLessCaption" | "DashboardStringId.DeltaIndicationModeNoIndicationCaption" | "DashboardStringId.DeltaThresholdTypeAbsolute" | "DashboardStringId.DeltaThresholdTypePercent" | "DashboardStringId.CommandDimensionGroupChildValues" | "DashboardStringId.SeriesTypeBar" | "DashboardStringId.SeriesTypeStackedBar" | "DashboardStringId.SeriesTypeFullStackedBar" | "DashboardStringId.SeriesTypePoint" | "DashboardStringId.SeriesTypeLine" | "DashboardStringId.SeriesTypeStackedLine" | "DashboardStringId.SeriesTypeFullStackedLine" | "DashboardStringId.SeriesTypeStepLine" | "DashboardStringId.SeriesTypeSpline" | "DashboardStringId.SeriesTypeArea" | "DashboardStringId.SeriesTypeStackedArea" | "DashboardStringId.SeriesTypeFullStackedArea" | "DashboardStringId.SeriesTypeStepArea" | "DashboardStringId.SeriesTypeSplineArea" | "DashboardStringId.SeriesTypeStackedSplineArea" | "DashboardStringId.SeriesTypeFullStackedSplineArea" | "DashboardWebStringId.Chart.ShowLegend" | "DashboardStringId.DefaultNameBoundImageItem" | "DashboardStringId.DefaultNameImageItem" | "DashboardStringId.DefaultNameTextBoxItem" | "DashboardStringId.DefaultNameCardItem" | "DashboardStringId.DefaultNameChartItem" | "DashboardStringId.DefaultNameComboBoxItem" | "DashboardStringId.DefaultNameListBoxItem" | "DashboardStringId.DefaultNameTreeViewItem" | "DashboardStringId.DefaultNameGaugeItem" | "DashboardStringId.DefaultNameGridItem" | "DashboardStringId.GridHyperlinkUriPatternErrorMessage" | "DashboardWebStringId.DefaultNameBubbleMapItem" | "DashboardWebStringId.DefaultNameChoroplethMapItem" | "DashboardWebStringId.DefaultNameGeoPointMapItem" | "DashboardWebStringId.DefaultNamePieMapItem" | "DashboardStringId.DefaultNamePieItem" | "DashboardStringId.DefaultNamePivotItem" | "DashboardStringId.DefaultNameRangeFilterItem" | "DashboardStringId.DefaultNameScatterChartItem" | "DashboardStringId.DefaultNameTreemapItem" | "DashboardStringId.DescriptionMaps" | "DashboardStringId.EntireRangePeriodCaption" | "DashboardStringId.CalculationTypePercentOfTotal" | "DashboardStringId.CalculationTypeDifference" | "DashboardStringId.CalculationTypePercentageDifference" | "DashboardStringId.CalculationTypeRunningTotal" | "DashboardStringId.CalculationTypeMovingCalculation" | "DashboardStringId.CalculationTypeRank" | "DashboardStringId.ColorPaletteIndex" | "DashboardStringId.DifferenceCalculationTargetPrevious" | "DashboardStringId.DifferenceCalculationTargetNext" | "DashboardStringId.DifferenceCalculationTargetFirst" | "DashboardStringId.DifferenceCalculationTargetLast" | "DashboardStringId.SummaryTypeCount" | "DashboardStringId.SummaryTypeSum" | "DashboardStringId.SummaryTypeMin" | "DashboardStringId.SummaryTypeMax" | "DashboardStringId.SummaryTypeAverage" | "DashboardStringId.SummaryTypeStdDev" | "DashboardStringId.SummaryTypeStdDevp" | "DashboardStringId.SummaryTypeVar" | "DashboardStringId.SummaryTypeVarp" | "DashboardStringId.SummaryTypeCountDistinct" | "DashboardStringId.SummaryTypeMedian" | "DashboardStringId.SummaryTypeMode" | "DashboardStringId.RankTypeUnique" | "DashboardStringId.RankTypeCompetition" | "DashboardStringId.RankTypeDense" | "DashboardStringId.RankTypeModified" | "DashboardStringId.RankTypePercentile" | "DashboardStringId.CardCalculationAlongCards" | "DashboardStringId.CardCalculationAlongSparklineArgument" | "DashboardStringId.CardCalculationAlongCardsAndSparklineArgument" | "DashboardStringId.CardCalculationAlongSparklineArgumentAndCards" | "DashboardStringId.ChartCalculationAlongArguments" | "DashboardStringId.ChartCalculationAlongSeries" | "DashboardStringId.ChartCalculationAlongArgumentsAndSeries" | "DashboardStringId.ChartCalculationAlongSeriesAndArguments" | "DashboardStringId.GridCalculationAlongRows" | "DashboardStringId.GridCalculationAlongSparklineArgument" | "DashboardStringId.GridCalculationAlongRowsAndSparklineArgument" | "DashboardStringId.GridCalculationAlongSparklineArgumentAndRows" | "DashboardStringId.PivotCalculationAlongColumns" | "DashboardStringId.PivotCalculationAlongRows" | "DashboardStringId.PivotCalculationAlongColumnsAndRows" | "DashboardStringId.PivotCalculationAlongRowsAndColumns" | "DashboardStringId.PivotCalculationAlongGroupsInColumns" | "DashboardStringId.PivotCalculationAlongGroupsInRows" | "DashboardStringId.PivotCalculationAlongGroupsInColumnsAndRows" | "DashboardStringId.PivotCalculationAlongGroupsInRowsAndColumns" | "DashboardStringId.PieCalculationAlongArguments" | "DashboardStringId.PieCalculationAlongSeries" | "DashboardStringId.PieCalculationAlongArgumentsAndSeries" | "DashboardStringId.PieCalculationAlongSeriesAndArguments" | "DashboardStringId.RangeFilterCalculationAlongArgumentAndSeries" | "DashboardStringId.RangeFilterCalculationAlongSeriesAndArgument" | "DashboardStringId.GaugeCalculationAlongGauges" | "DashboardStringId.ScatterCalculationAlongArguments" | "DashboardStringId.CalculationAlongSpecificDimensions" | "DashboardStringId.CalculatedFieldTypeString" | "DashboardStringId.CalculatedFieldTypeLong" | "DashboardStringId.CalculatedFieldTypeDecimal" | "DashboardStringId.CalculatedFieldTypeBoolean" | "DashboardStringId.CalculatedFieldTypeDateTime" | "DashboardStringId.CalculatedFieldTypeDouble" | "DashboardStringId.CalculatedFieldTypeAuto" | "DashboardStringId.CalculatedFieldTypeObject" | "DashboardStringId.DefaultEFDataSourceName" | "DashboardStringId.DefaultExcelDataSourceName" | "DashboardStringId.DefaultFileExtractDataSourceName" | "DashboardStringId.DefaultObjectDataSourceName" | "DashboardStringId.DefaultOlapDataSourceName" | "DashboardStringId.DefaultSqlDataSourceName" | "DashboardStringId.DefaultJsonDataSourceName" | "DashboardStringId.DefaultXpoDataSourceName" | "DashboardStringId.OlapRaggedHierarchyNoneItemCaption" | "DashboardStringId.FormatRuleApplyToColumn" | "DashboardStringId.SeriesTypeSideBySideRangeBar" | "DashboardStringId.SeriesTypeRangeArea" | "DashboardStringId.SeriesTypeHighLowClose" | "DashboardStringId.SeriesTypeCandleStick" | "DashboardStringId.SeriesTypeStock" | "DashboardWebStringId.StyleSettings" | "DashboardStringId.ParametersFormCalendarTodayButton" | "DashboardStringId.TreemapLabelArgumentTemplate" | "DashboardStringId.TreemapLabelValueTemplate" | "DashboardStringId.SearchNullValuePrompt" | "DashboardStringId.CustomItems" | "DashboardStringId.FormatRuleAllowNegativeAxis" | "DashboardStringId.FormatRuleDrawAxis" | "DashboardStringId.FormatRuleShowBarOnly" | "DashboardStringId.CommandFormatRuleBottomN" | "DashboardStringId.FormatConditionAppearanceNone" | "DashboardStringId.FormatConditionAppearanceCustom" | "DashboardStringId.FormatConditionAppearancePaleRed" | "DashboardStringId.FormatConditionAppearancePaleYellow" | "DashboardStringId.FormatConditionAppearancePaleGreen" | "DashboardStringId.FormatConditionAppearancePaleBlue" | "DashboardStringId.FormatConditionAppearancePalePurple" | "DashboardStringId.FormatConditionAppearancePaleCyan" | "DashboardStringId.FormatConditionAppearancePaleOrange" | "DashboardStringId.FormatConditionAppearancePaleGray" | "DashboardStringId.FormatConditionAppearanceRed" | "DashboardStringId.FormatConditionAppearanceYellow" | "DashboardStringId.FormatConditionAppearanceGreen" | "DashboardStringId.FormatConditionAppearanceBlue" | "DashboardStringId.FormatConditionAppearancePurple" | "DashboardStringId.FormatConditionAppearanceCyan" | "DashboardStringId.FormatConditionAppearanceOrange" | "DashboardStringId.FormatConditionAppearanceGray" | "DashboardStringId.FormatConditionAppearanceGradientRed" | "DashboardStringId.FormatConditionAppearanceGradientYellow" | "DashboardStringId.FormatConditionAppearanceGradientGreen" | "DashboardStringId.FormatConditionAppearanceGradientBlue" | "DashboardStringId.FormatConditionAppearanceGradientPurple" | "DashboardStringId.FormatConditionAppearanceGradientCyan" | "DashboardStringId.FormatConditionAppearanceGradientOrange" | "DashboardStringId.FormatConditionAppearanceGradientTransparent" | "DashboardStringId.FormatConditionAppearanceFontBold" | "DashboardStringId.FormatConditionAppearanceFontItalic" | "DashboardStringId.FormatConditionAppearanceFontUnderline" | "DashboardStringId.FormatConditionAppearanceFontGrayed" | "DashboardStringId.FormatConditionAppearanceFontRed" | "DashboardStringId.FormatConditionAppearanceFontYellow" | "DashboardStringId.FormatConditionAppearanceFontGreen" | "DashboardStringId.FormatConditionAppearanceFontBlue" | "DashboardStringId.IntersectionLevelModeFirst" | "DashboardStringId.IntersectionLevelModeLast" | "DashboardStringId.IntersectionLevelModeAuto" | "DashboardStringId.IntersectionLevelModeAll" | "DashboardStringId.IntersectionLevelModeSpecific" | "DashboardStringId.FormatRuleApplyToRow" | "DashboardStringId.FormatRuleApplyTo" | "DashboardWebStringId.FilterItem.AllowEmptyFilter" | "DashboardStringId.FormatConditionAppearanceFontStrikeout" | "DashboardStringId.FormatConditionAutomaticValueType" | "DashboardStringId.FormatConditionNumberValueType" | "DashboardStringId.FormatConditionPercentValueType" | "DashboardStringId.CommandFormatRuleRangeIcons" | "DashboardStringId.CommandFormatRuleGreaterThan" | "DashboardStringId.CommandFormatRuleGreaterThanOrEqualTo" | "DashboardStringId.CommandFormatRuleLessThan" | "DashboardStringId.CommandFormatRuleLessThanOrEqualTo" | "DashboardStringId.CommandFormatRuleEqualTo" | "DashboardStringId.CommandFormatRuleNotEqualTo" | "DashboardStringId.CommandFormatRuleBetween" | "DashboardStringId.CommandFormatRuleNotBetween" | "DashboardStringId.CommandFormatRuleBetweenOrEqual" | "DashboardStringId.CommandFormatRuleNotBetweenOrEqual" | "DashboardStringId.CommandFormatRuleContains" | "DashboardStringId.ColorAutoAssigned" | "DashboardStringId.CalculationTypeNone" | "DashboardStringId.UndoText" | "DashboardStringId.RedoText" | "DashboardStringId.DashboardCurrencyUseCurrentCurrency" | "DashboardStringId.CommandDimensionSortModeDisplayText" | "DashboardStringId.CommandDimensionSortModeValue" | "DashboardStringId.CommandDimensionSortModeID" | "DashboardStringId.CommandDimensionSortModeKey" | "DashboardWebStringId.Chart.AddPane" | "DashboardStringId.MapShapeNoneAttribute" | "DashboardStringId.DefaultPeriodName" | "DashboardStringId.CardLayoutTemplateStretchedCaption" | "DashboardStringId.CardLayoutTemplateCenteredCaption" | "DashboardStringId.CardLayoutTemplateCompactCaption" | "DashboardStringId.CardLayoutTemplateLightweightCaption" | "DashboardStringId.CardLayoutTemplateCustomCaption" | "DashboardStringId.CardLayoutTemplateNoneCaption" | "DashboardStringId.CardRowDataElementTypeTitleCaption" | "DashboardStringId.CardRowDataElementTypeSubtitleCaption" | "DashboardStringId.CardRowDataElementTypeActualValueCaption" | "DashboardStringId.CardRowDataElementTypeTargetValueCaption" | "DashboardStringId.CardRowDataElementTypeAbsoluteVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentOfTargetCaption" | "DashboardStringId.CardRowDataElementTypeDimensionValueCaption" | "DashboardStringId.CardRowDataElementTypeCardNameCaption" | "DashboardStringId.CardRowDataElementTypeDeltaIndicatorCaption" | "DashboardStringId.CardRowDataElementTypeSparklineCaption" | "DashboardStringId.FormatRuleApplyToAllElements" | "DashboardWebStringId.Pie.LabelPosition" | "DashboardWebStringId.Pie.LabelPositionOutside" | "DashboardWebStringId.Pie.LabelPositionInside" | "DashboardStringId.IncludeExportDashboardState" | "DashboardStringId.PointLabelContentTypeArgument" | "DashboardStringId.PointLabelContentTypeSeriesName" | "DashboardStringId.PointLabelContentTypeValue" | "DashboardStringId.PointLabelContentTypePercent" | "DashboardWebStringId.DashboardMenu" | "DashboardWebStringId.DashboardMenuNew" | "DashboardWebStringId.DashboardMenuOpen" | "DashboardWebStringId.DashboardMenuSave" | "DashboardWebStringId.DashboardMenuCurrency" | "DashboardWebStringId.DashboardMenuDataSources" | "DashboardWebStringId.DashboardMenuColorScheme" | "DashboardWebStringId.DashboardMenuNewDashboardCreate" | "DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder" | "DashboardWebStringId.Binding.DefaultEmptyPlaceholder" | "DashboardWebStringId.Binding.DefaultSelectedPlaceholder" | "DashboardWebStringId.Binding.DataFiltering" | "DashboardWebStringId.Binding.Argument" | "DashboardWebStringId.Binding.Attribute" | "DashboardWebStringId.Binding.Sparkline" | "DashboardWebStringId.Binding.Columns" | "DashboardWebStringId.Binding.TooltipDimensions" | "DashboardWebStringId.Binding.TooltipMeasures" | "DashboardWebStringId.Binding.HiddenDimensions" | "DashboardWebStringId.Binding.HiddenMeasures" | "DashboardWebStringId.Binding.AddDimension" | "DashboardWebStringId.Binding.AddMeasure" | "DashboardWebStringId.Binding.AddColumn" | "DashboardWebStringId.Binding.AddRow" | "DashboardWebStringId.Binding.AddValue" | "DashboardWebStringId.Binding.AddSeries" | "DashboardWebStringId.Binding.SetLatitude" | "DashboardWebStringId.Binding.SetLongitude" | "DashboardWebStringId.Binding.SetArgument" | "DashboardWebStringId.Binding.AddArgument" | "DashboardWebStringId.Binding.SetWeight" | "DashboardWebStringId.Binding.SetColor" | "DashboardWebStringId.Binding.SetAttribute" | "DashboardWebStringId.Binding.SetValue" | "DashboardWebStringId.Binding.XAxis" | "DashboardWebStringId.Binding.YAxis" | "DashboardWebStringId.Binding.ConfigureDimension" | "DashboardWebStringId.Binding.ConfigureMeasure" | "DashboardWebStringId.Binding.ConfigureSeries" | "DashboardWebStringId.Binding.ConfigureArgument" | "DashboardWebStringId.Binding.ConfigureValue" | "DashboardWebStringId.Binding.ConfigureAttribute" | "DashboardWebStringId.Binding.ConfigureLatitude" | "DashboardWebStringId.Binding.ConfigureLongitude" | "DashboardWebStringId.Binding.ConfigureColumn" | "DashboardWebStringId.Binding.ConfigureRow" | "DashboardWebStringId.Binding.ConfigureWeight" | "DashboardWebStringId.Binding.ConfigureColor" | "DashboardWebStringId.Binding.ShowAll" | "DashboardWebStringId.ColorScheme.Color" | "DashboardWebStringId.ColorScheme.Colors" | "DashboardWebStringId.Parameters.ParameterList" | "DashboardWebStringId.Parameters.AddParameter" | "DashboardWebStringId.Parameters.AddParameter.Tooltip" | "DashboardWebStringId.Parameters.NoSelectedParameter" | "DashboardWebStringId.Parameters.Reorder" | "DashboardWebStringId.Parameters.Done" | "DashboardWebStringId.Currency.Currency" | "DashboardWebStringId.Currency.CurrencyCulture" | "DashboardWebStringId.Currency.DefaultCurrencyWarning" | "DashboardWebStringId.Preview" | "DashboardWebStringId.Add" | "DashboardWebStringId.DataSources.UsedDataSources" | "DashboardWebStringId.DataSources.DataItems" | "DashboardWebStringId.DataSources.AddQuery" | "DashboardWebStringId.DataSources.AddCalculatedField" | "DashboardWebStringId.DataSources.AddDataSource" | "DashboardWebStringId.DataSources.NoUsedDataSources" | "DashboardWebStringId.DataSources.NoAvailableDataSources" | "DashboardWebStringId.DataSources.ChooseDataSource" | "DashboardWebStringId.DataSources.CreateDataSource" | "DashboardWebStringId.DataSources.CreateNewDataSource" | "DashboardWebStringId.DataSources.CreateDataSource.Tooltip" | "DashboardWebStringId.DataSources.EditCalculatedField" | "DashboardWebStringId.DataSources.CalculatedField.Name" | "DashboardWebStringId.DataSources.CalculatedField.FieldType" | "DashboardWebStringId.DataSources.CalculatedField.UniqueNameError" | "DashboardWebStringId.DataSources.CalculatedField.Corrupted" | "DashboardWebStringId.DataSources.Edit" | "DashboardStringId.MessageCollectionTypesNotSupported" | "DashboardWebStringId.New.DashboardName" | "DashboardWebStringId.Bindings" | "DashboardWebStringId.Interactivity" | "DashboardWebStringId.Options" | "DashboardWebStringId.Remove" | "DashboardWebStringId.MasterFilterMode" | "DashboardWebStringId.Title.Text" | "DashboardWebStringId.Title.Visible" | "DashboardWebStringId.Title.IncludeMasterFilter" | "DashboardWebStringId.Title.Aligment" | "DashboardWebStringId.Title.Image" | "DashboardWebStringId.DataSources.Cancel" | "DashboardWebStringId.DataSources.IncludeToTheDashboard" | "DashboardWebStringId.DataSources.AvailableDataSourcesError" | "DashboardWebStringId.DataSources.DashboardDataSourceWizard" | "DashboardWebStringId.Viewer" | "DashboardWebStringId.Loading" | "DashboardWebStringId.ClickHereInvitation" | "DashboardWebStringId.BindDataInvitation" | "DashboardWebStringId.AddItemInvitation" | "DashboardWebStringId.Parameters.Values" | "DashboardWebStringId.Binding.Cards" | "DashboardWebStringId.Binding.AddCard" | "DashboardWebStringId.Binding.ConfigureCard" | "DashboardWebStringId.Binding.AddValues" | "DashboardWebStringId.Binding.ConfigureValues" | "DashboardWebStringId.Binding.Maps" | "DashboardWebStringId.Binding.AddMap" | "DashboardWebStringId.Binding.ConfigureMap" | "DashboardWebStringId.Binding.Gauges" | "DashboardWebStringId.Binding.AddGauge" | "DashboardWebStringId.Binding.ConfigureGauge" | "DashboardWebStringId.InteractivityOptions" | "DashboardWebStringId.Binding.Values" | "DashboardWebStringId.Binding.RemovePane" | "DashboardWebStringId.ClickToSetFilterCriteria" | "DashboardWebStringId.DataSources.OK" | "DashboardWebStringId.DataSources.Save" | "DashboardWebStringId.Cards.ArrangementMode" | "DashboardWebStringId.Cards.ArrangementMode.Auto" | "DashboardWebStringId.Cards.ArrangementMode.FixedRows" | "DashboardWebStringId.Cards.ArrangementMode.FixedColumns" | "DashboardWebStringId.Cards.LineCount" | "DashboardWebStringId.ConditionalFormatting" | "DashboardWebStringId.CollectionEditor.NoItems" | "DashboardWebStringId.CollectionEditor.Totals.NoItems" | "DashboardWebStringId.CollectionEditor.Parameters.NoItems" | "DashboardWebStringId.PivotGrid.AutoExpandColumnGroups" | "DashboardWebStringId.PivotGrid.AutoExpandRowGroups" | "DashboardWebStringId.PivotGrid.ColumnGrandTotals" | "DashboardWebStringId.PivotGrid.RowGrandTotals" | "DashboardWebStringId.PivotGrid.ColumnTotals" | "DashboardWebStringId.PivotGrid.RowTotals" | "DashboardWebStringId.PivotGrid.ValuesPosition" | "DashboardWebStringId.PivotGrid.ValuesPositionColumns" | "DashboardWebStringId.PivotGrid.ValuesPositionRows" | "DashboardWebStringId.PivotGrid.RowTotalsPosition" | "DashboardWebStringId.PivotGrid.RowTotalsPositionBottom" | "DashboardWebStringId.PivotGrid.RowTotalsPositionTop" | "DashboardWebStringId.PivotGrid.ColumnTotalsPosition" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionFar" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionNear" | "DashboardWebStringId.PivotGrid.LayoutType" | "DashboardWebStringId.PivotGrid.LayoutTypeCompact" | "DashboardWebStringId.PivotGrid.LayoutTypeTabular" | "DashboardWebStringId.Options.Caption" | "DashboardWebStringId.InteractivityOptions.IsMasterFilter" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.None" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Single" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Multiple" | "DashboardWebStringId.InteractivityOptions.TargetDimensions" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Arguments" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Series" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Points" | "DashboardWebStringId.ColoringOptions" | "DashboardWebStringId.DataSources.Filter" | "DashboardWebStringId.Chart.Rotated" | "DashboardWebStringId.Chart.Panes" | "DashboardWebStringId.Chart.Legend" | "DashboardWebStringId.Chart.AxisX" | "DashboardWebStringId.Chart.AxisY" | "DashboardWebStringId.Chart.AxisYSecondary" | "DashboardWebStringId.Chart.PointLabelOptions" | "DashboardWebStringId.Chart.AxisXMeasure" | "DashboardWebStringId.Chart.AxisYMeasure" | "DashboardWebStringId.Chart.Weight" | "DashboardWebStringId.Chart.Content" | "DashboardWebStringId.Chart.ArgumentAndWeight" | "DashboardWebStringId.Chart.ArgumentAndValues" | "DashboardWebStringId.Chart.Reverse" | "DashboardWebStringId.Chart.Visible" | "DashboardWebStringId.Chart.Title" | "DashboardWebStringId.Chart.TitleText" | "DashboardWebStringId.Chart.EnableZooming" | "DashboardWebStringId.Chart.LimitVisiblePoints" | "DashboardWebStringId.Chart.VisiblePointsCount" | "DashboardWebStringId.Chart.AlwaysShowZeroLevel" | "DashboardWebStringId.Chart.GridLines" | "DashboardWebStringId.Chart.LogarithmicScale" | "DashboardWebStringId.Chart.LogarithmicScaleBase" | "DashboardWebStringId.Chart.LogarithmicScaleBase2" | "DashboardWebStringId.Chart.LogarithmicScaleBase5" | "DashboardWebStringId.Chart.LogarithmicScaleBase10" | "DashboardWebStringId.Chart.Position" | "DashboardWebStringId.Chart.IsInsideOfDiagram" | "DashboardWebStringId.Chart.PrimaryAxisY" | "DashboardWebStringId.Chart.SecondaryAxisY" | "DashboardWebStringId.Chart.Name" | "DashboardWebStringId.Chart.PlotOnSecondaryAxis" | "DashboardWebStringId.Chart.IgnoreEmptyPoints" | "DashboardWebStringId.Chart.ShowPointMarkers" | "DashboardWebStringId.Chart.Value" | "DashboardWebStringId.Chart.ShowZeroValues" | "DashboardWebStringId.Chart.OverlappingMode" | "DashboardWebStringId.Chart.Orientation" | "DashboardWebStringId.Chart.ShowPointLablels" | "DashboardWebStringId.Chart.TooltipContent" | "DashboardWebStringId.Chart.LabelContent" | "DashboardWebStringId.Card.SparklineOptions" | "DashboardWebStringId.Card.SparklineVisible" | "DashboardWebStringId.Chart.Position.TopLeftVertical" | "DashboardWebStringId.Chart.Position.TopLeftHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterHorizontal" | "DashboardWebStringId.Chart.Position.TopRightVertical" | "DashboardWebStringId.Chart.Position.TopRightHorizontal" | "DashboardWebStringId.Chart.Position.BottomLeftVertical" | "DashboardWebStringId.Chart.Position.BottomLeftHorizontal" | "DashboardWebStringId.Chart.Position.BottomCenterHorizontal" | "DashboardWebStringId.Chart.Position.BottomRightVertical" | "DashboardWebStringId.Chart.Position.BottomRightHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterVertical" | "DashboardWebStringId.Chart.Position.BottomCenterVertical" | "DashboardWebStringId.FilterItem.Type" | "DashboardWebStringId.FilterItem.Type.Standard" | "DashboardWebStringId.FilterItem.Type.Checked" | "DashboardWebStringId.FilterItem.Type.Radio" | "DashboardWebStringId.FilterItem.ShowAllValue" | "DashboardWebStringId.FilterItem.EnableSearch" | "DashboardWebStringId.Gauge.Min" | "DashboardWebStringId.Gauge.Max" | "DashboardWebStringId.Gauge.ScaleOptions" | "DashboardWebStringId.Gauge.Type" | "DashboardWebStringId.Gauge.Type.FullQuarterGauge" | "DashboardWebStringId.Gauge.Type.HalfCircular" | "DashboardWebStringId.Gauge.Type.LeftQuarterCircular" | "DashboardWebStringId.Gauge.Type.RightQuarterCircular" | "DashboardWebStringId.Gauge.Type.ThreeFourthCircular" | "DashboardWebStringId.Gauge.Type.LinearHorizontal" | "DashboardWebStringId.Gauge.Type.LinearVertical" | "DashboardWebStringId.Gauge.Captions" | "DashboardWebStringId.Gauge.Scale.Custom" | "DashboardWebStringId.Gauge.Scale.Auto" | "DashboardWebStringId.Grid.ColumnType" | "DashboardWebStringId.Grid.DisplayMode" | "DashboardWebStringId.Grid.DisplayMode.Value" | "DashboardWebStringId.Grid.DisplayMode.Bar" | "DashboardWebStringId.Grid.DisplayMode.Text" | "DashboardWebStringId.Grid.DisplayMode.Image" | "DashboardWebStringId.Grid.FixedWidth" | "DashboardWebStringId.Grid.WidthType" | "DashboardWebStringId.Grid.WidthType.Weight" | "DashboardWebStringId.Grid.WidthType.FitToContent" | "DashboardWebStringId.Grid.DeltaOptions" | "DashboardWebStringId.Grid.ShowStartEndValues" | "DashboardWebStringId.Grid.TotalType" | "DashboardWebStringId.Grid.Dimension" | "DashboardWebStringId.Grid.Measure" | "DashboardWebStringId.Grid.Delta" | "DashboardWebStringId.Grid.Sparkline" | "DashboardWebStringId.Grid.Hyperlink" | "DashboardWebStringId.Grid.Options" | "DashboardWebStringId.Map.ShapeFileLoaded" | "DashboardWebStringId.Map.AttributeFileLoaded" | "DashboardWebStringId.Map.ValueMap" | "DashboardWebStringId.Map.DeltaMap" | "DashboardWebStringId.Map.TooltipCaption" | "DashboardWebStringId.Map.TooltipActualValueCaption" | "DashboardWebStringId.Map.TooltipDeltaCaption" | "DashboardWebStringId.Map.CustomMapOptions" | "DashboardWebStringId.Map.CustomMapOptionsSource" | "DashboardWebStringId.Map.CustomMapOptionsUrl" | "DashboardWebStringId.Map.CustomMapOptionsFile" | "DashboardWebStringId.Map.CustomMapUrl" | "DashboardWebStringId.Map.CustomMapFile" | "DashboardWebStringId.Map.CustomAttributeFile" | "DashboardWebStringId.Map.AttributeDimension" | "DashboardWebStringId.Map.IncludeSummaryValueToShapeTitle" | "DashboardWebStringId.Map.AttributeName" | "DashboardWebStringId.Map.TooltipAttribute" | "DashboardWebStringId.Map.TooltipDimensions" | "DashboardWebStringId.Map.Area.Custom" | "DashboardWebStringId.Map.Area.WorldCountries" | "DashboardWebStringId.Map.Area.Europe" | "DashboardWebStringId.Map.Area.Asia" | "DashboardWebStringId.Map.Area.NorthAmerica" | "DashboardWebStringId.Map.Area.SouthAmerica" | "DashboardWebStringId.Map.Area.Africa" | "DashboardWebStringId.Map.Area.USA" | "DashboardWebStringId.Map.Area.Canada" | "DashboardWebStringId.Map.Viewport" | "DashboardWebStringId.Map.ShapeTitleAttribute" | "DashboardWebStringId.Map.UseBindingAttribute" | "DashboardWebStringId.Map.WeightedLegendType" | "DashboardWebStringId.Map.WeightedLegendType.Linear" | "DashboardWebStringId.Map.WeightedLegendType.Nested" | "DashboardWebStringId.Map.Orientation.Vertical" | "DashboardWebStringId.Map.Orientation.Horizontal" | "DashboardWebStringId.Map.Position.TopLeft" | "DashboardWebStringId.Map.Position.TopCenter" | "DashboardWebStringId.Map.Position.TopRight" | "DashboardWebStringId.Map.Position.BottomLeft" | "DashboardWebStringId.Map.Position.BottomCenter" | "DashboardWebStringId.Map.Position.BottomRight" | "DashboardWebStringId.Map.Viewport.TopLatitude" | "DashboardWebStringId.Map.Viewport.LeftLongitude" | "DashboardWebStringId.Map.Viewport.RightLongitude" | "DashboardWebStringId.Map.Viewport.BottomLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLongitude" | "DashboardWebStringId.Map.Viewport.CreateViewerPaddings" | "DashboardWebStringId.Map.ShowLegend" | "DashboardWebStringId.Pie.Type" | "DashboardWebStringId.Pie" | "DashboardWebStringId.Pie.Donut" | "DashboardWebStringId.Pie.LabelContentType.None" | "DashboardWebStringId.Pie.LabelContentType.Argument" | "DashboardWebStringId.Pie.LabelContentType.Percent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndPercent" | "DashboardWebStringId.Pie.LabelContentType.Value" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndValue" | "DashboardWebStringId.Pie.LabelContentType.ValueAndPercent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentValueAndPercent" | "DashboardWebStringId.Image.BindingMode" | "DashboardWebStringId.Image.BindingMode.BinaryArray" | "DashboardWebStringId.Image.BindingMode.Uri" | "DashboardWebStringId.RangeFilter.UriPattern" | "DashboardWebStringId.Image.SizeMode.Clip" | "DashboardWebStringId.Image.SizeMode.Stretch" | "DashboardWebStringId.Image.SizeMode.Zoom" | "DashboardWebStringId.Image.SizeMode.Squeeze" | "DashboardWebStringId.Image.HorizontalAlignment" | "DashboardWebStringId.Image.VerticalAlignment" | "DashboardWebStringId.Image.Alignment.Left" | "DashboardWebStringId.Image.Alignment.Center" | "DashboardWebStringId.Image.Alignment.Right" | "DashboardWebStringId.Image.Alignment.Top" | "DashboardWebStringId.Image.Alignment.Bottom" | "DashboardWebStringId.SeriesItem.SeriesDimensions" | "DashboardWebStringId.TextBox.Text" | "DashboardWebStringId.Chart.Orientation.Default" | "DashboardWebStringId.Chart.Orientation.RotateRight" | "DashboardWebStringId.Chart.Orientation.RotateLeft" | "DashboardWebStringId.Chart.OverlappingMode.Hide" | "DashboardWebStringId.Chart.OverlappingMode.None" | "DashboardWebStringId.Chart.Position.Outside" | "DashboardWebStringId.Chart.Position.Inside" | "DashboardWebStringId.Chart.SeriesType.Weighted" | "DashboardWebStringId.Coloring.MeasuresColoringMode" | "DashboardWebStringId.Coloring.Global" | "DashboardWebStringId.Coloring.Local" | "DashboardWebStringId.Delta.ValueType" | "DashboardWebStringId.Delta.ResultIndication" | "DashboardWebStringId.Delta.ThresholdType" | "DashboardWebStringId.Delta.ThresholdValue" | "DashboardWebStringId.Sparkline.ViewType" | "DashboardWebStringId.Sparkline.HighlightMinMaxPoints" | "DashboardWebStringId.Sparkline.HighlightStartEndPoints" | "DashboardWebStringId.Title.Aligment.Left" | "DashboardWebStringId.Title.Aligment.Center" | "DashboardWebStringId.Parameters.LookUpSettingsType.NoLookUp" | "DashboardWebStringId.Parameters.LookUpSettingsType.StaticList" | "DashboardWebStringId.Parameters.LookUpSettingsType.DynamicList" | "DashboardWebStringId.Parameters.LookUpSettingsType" | "DashboardWebStringId.Parameters.DefaultValue" | "DashboardWebStringId.DataItem" | "DashboardWebStringId.DataItem.Precision" | "DashboardWebStringId.DataItem.IncludeGroupSeparator" | "DashboardWebStringId.DataItem.ShowValues" | "DashboardWebStringId.DataItem.ShowTotals" | "DashboardWebStringId.DataItem.ShowGrandTotals" | "DashboardWebStringId.Dialog.ConfirmSaving" | "DashboardWebStringId.Dimension.GroupInterval" | "DashboardWebStringId.Dimension.SortMode" | "DashboardWebStringId.Dialog.ArgumentMode" | "DashboardWebStringId.Calculations" | "DashboardWebStringId.Calculations.Expression" | "DashboardWebStringId.Calculations.DifferenceCalculation" | "DashboardWebStringId.Calculations.Moving" | "DashboardWebStringId.Calculations.RunningTotal" | "DashboardWebStringId.Calculations.PercentOfTotal" | "DashboardWebStringId.Calculations.Rank" | "DashboardWebStringId.Calculations.DefinitionMode" | "DashboardWebStringId.Calculations.WindowDefinition" | "DashboardWebStringId.Calculations.WindowDefinitionModeSpecific" | "DashboardWebStringId.Calculations.WindowDefinitionModePredefined" | "DashboardWebStringId.Calculations.DifferenceType" | "DashboardWebStringId.TreemapLayoutAlgorithm" | "DashboardWebStringId.TilesLabelContentType" | "DashboardWebStringId.TilesTooltipContentType" | "DashboardWebStringId.GroupsLabelContentType" | "DashboardWebStringId.GroupsTooltipContentType" | "DashboardWebStringId.ShowOthersValue" | "DashboardWebStringId.TopNEnabled" | "DashboardWebStringId.Parameters.StaticListLookUpSettings" | "DashboardWebStringId.Parameters.DynamicListLookUpSettings" | "DashboardWebStringId.ConvertTo" | "DashboardWebStringId.Duplicate" | "DashboardWebStringId.DataSourceWizard" | "DashboardWebStringId.RangeFilter.CustomPeriods" | "DashboardWebStringId.RangeFilter.StartMode" | "DashboardWebStringId.RangeFilter.EndMode" | "DashboardWebStringId.RangeFilter.StartIntervalAndOffset" | "DashboardWebStringId.RangeFilter.EndIntervalAndOffset" | "DashboardWebStringId.RangeFilter.StartDate" | "DashboardWebStringId.RangeFilter.EndDate" | "DashboardWebStringId.RangeFilter.None" | "DashboardWebStringId.RangeFilter.Fixed" | "DashboardWebStringId.RangeFilter.Flow" | "DashboardWebStringId.Tabs.Binding" | "DashboardWebStringId.Tabs.DataShaping" | "DashboardWebStringId.Tabs.Format" | "DashboardWebStringId.Calculations.Types.Moving" | "DashboardWebStringId.Parameters.SortByMember" | "DashboardWebStringId.Parameters.LookUpSettingsTypeCaption" | "DashboardWebStringId.Dashboard.Items" | "DashboardWebStringId.Dashboard.Groups" | "DashboardWebStringId.Dashboard.LayoutItems" | "DashboardWebStringId.Dashboard.ComponentName" | "DashboardWebStringId.ButtonConfirm" | "DashboardWebStringId.Colorization.GroupInterval" | "DashboardWebStringId.ButtonOn" | "DashboardWebStringId.ButtonOff" | "DashboardWebStringId.ButtonYes" | "DashboardWebStringId.ButtonNo" | "DashboardWebStringId.ButtonDiscrete" | "DashboardWebStringId.ButtonContinuous" | "DashboardWebStringId.ButtonVisible" | "DashboardWebStringId.ButtonHidden" | "DashboardWebStringId.Calculations.PreviousValuesCount" | "DashboardWebStringId.Calculations.NextValuesCount" | "DashboardWebStringId.Calculations.RankType" | "DashboardWebStringId.Calculations.RankOrder" | "DashboardWebStringId.TileOptions" | "DashboardWebStringId.MapLockNavigationLocked" | "DashboardWebStringId.MapLockNavigationUnlocked" | "DashboardWebStringId.ConditionalFormatting.BarOptions" | "DashboardWebStringId.ConditionalFormatting.CalculatedBy" | "DashboardWebStringId.ConditionalFormatting.IconType" | "DashboardWebStringId.ConditionalFormatting.PredefinedColor" | "DashboardWebStringId.ConditionalFormatting.AppearanceType" | "DashboardWebStringId.ConditionalFormatting.FontStyle" | "DashboardWebStringId.ConditionalFormatting.FontFamily" | "DashboardWebStringId.ConditionalFormatting.FontRegular" | "DashboardWebStringId.ConditionalFormatting.IconType.None" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowSideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGraySideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDash" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedTriangleDown" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenTriangleUp" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingHalfGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1QuarterGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1Bar" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1FilledBox" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTriangle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedDiamond" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedFlag" | "DashboardWebStringId.ConditionalFormatting.IntersectionColumnDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionRowDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionLevelMode" | "DashboardWebStringId.ConditionalFormatting.GradientRangeBar" | "DashboardWebStringId.ConditionalFormatting.RangeGradient" | "DashboardWebStringId.ConditionalFormatting.SegmentNumber" | "DashboardWebStringId.ConditionalFormatting.ValueComparison" | "DashboardWebStringId.ConditionalFormatting.Ranges" | "DashboardWebStringId.ConditionalFormatting.AverageType" | "DashboardWebStringId.ConditionalFormatting.Above" | "DashboardWebStringId.ConditionalFormatting.AboveOrEqual" | "DashboardWebStringId.ConditionalFormatting.Below" | "DashboardWebStringId.ConditionalFormatting.BelowOrEqual" | "DashboardWebStringId.ConditionalFormatting.StyleSettingsType" | "DashboardWebStringId.ConditionalFormatting.Positive" | "DashboardWebStringId.ConditionalFormatting.Negative" | "DashboardWebStringId.ConditionalFormatting.MinimumType" | "DashboardWebStringId.ConditionalFormatting.MaximumType" | "DashboardWebStringId.ConditionalFormatting.DateType" | "DashboardWebStringId.ConditionalFormatting.DateType.None" | "DashboardWebStringId.ConditionalFormatting.DateType.SpecificDate" | "DashboardWebStringId.ConditionalFormatting.DateType.BeyondThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.NextWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.Tomorrow" | "DashboardWebStringId.ConditionalFormatting.DateType.Today" | "DashboardWebStringId.ConditionalFormatting.DateType.Yesterday" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.LastWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.PriorThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.Empty" | "DashboardWebStringId.ConditionalFormatting.DateType.User" | "DashboardWebStringId.ConditionalFormatting.DateType.Beyond" | "DashboardWebStringId.ConditionalFormatting.DateType.ThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.ThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAfter1" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAfter2" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo1" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo2" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo3" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo4" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo5" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo6" | "DashboardWebStringId.ConditionalFormatting.DateType.Earlier" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeDataItem" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeCard" | "DashboardWebStringId.Colorization.NoSelectedSchema" | "DashboardWebStringId.Colorization.ColorSchemes" | "DashboardWebStringId.LayoutHasBeenChangedDialogMessage" | "DashboardWebStringId.SaveConfirmationDialogMessage" | "DashboardWebStringId.SaveChangesDialogMessage" | "DashboardWebStringId.Dialog.ChangeDataMemberMessage" | "DashboardWebStringId.Dialog.RemovedDataItemsMessage" | "DashboardWebStringId.Dialog.ConfirmChanges" | "DashboardWebStringId.Dialog.Save" | "DashboardWebStringId.Dialog.DoNotSave" | "DashboardWebStringId.Dialog.ButtonYes" | "DashboardWebStringId.Dialog.ButtonDontChange" | "DashboardWebStringId.Colorization.ColorSchemeType" | "DashboardWebStringId.Colorization.MeasureNames" | "DashboardWebStringId.Colorization.AddColor" | "DashboardWebStringId.Colorization.ValidationSelectMeasure" | "DashboardWebStringId.ColoringModeAuto" | "DashboardWebStringId.ColoringModeOff" | "DashboardWebStringId.ColoringModeOn" | "DashboardWebStringId.ColorScheme.Empty" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButton" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip" | "DashboardWebStringId.ConditionalFormatting.Miscellaneous" | "DashboardWebStringId.Dashboards" | "DashboardWebStringId.EditInDesigner" | "DashboardWebStringId.NoDashboards" | "DashboardWebStringId.AddNewDashboard" | "DashboardWebStringId.NewDashboard" | "DashboardWebStringId.Binding.Searching" | "DashboardWebStringId.Binding.EmptySearchResult" | "DashboardWebStringId.Errors.AttemptToLoadData" | "DashboardWebStringId.ConditionType" | "DashboardWebStringId.ConditionalFormatting.UnsupportedDataType" | "DashboardWebStringId.FormatRule" | "DashboardWebStringId.Notification.DashboardSaving" | "DashboardWebStringId.Notification.DashboardSaved" | "DashboardWebStringId.Notification.DashboardCanNotBeSaved" | "DashboardWebStringId.Notification.DashboardSavingIsNotAvailable" | "DashboardWebStringId.Notification.AttemptToLoadDashboards" | "DashboardWebStringId.Notification.DashboardLoading" | "DashboardWebStringId.Notification.AttemptToLoadDashboard" | "DashboardWebStringId.Notification.AttemptToConnectionStrings" | "DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode" | "DashboardWebStringId.Notification.AttemptToLoadParameterValues" | "DashboardWebStringId.Notification.AttemptToGetUnderlyingData" | "DashboardWebStringId.Notification.AttemptToConvertItemToType" | "DashboardWebStringId.Notification.AttemptToLoadDimensionUniqueValues" | "DashboardWebStringId.Notification.AttemptToLoadFieldListForDataSource" | "DashboardWebStringId.Notification.AttemptToGetColorScheme" | "DashboardWebStringId.Notification.NewDashboardCannotBeCreated" | "DashboardWebStringId.Notification.ErrorHasOccuredOn" | "DashboardWebStringId.Notification.UnsupportedDataSourceType" | "DashboardWebStringId.LimitVisibleData.DisplayAllDataTooltip" | "DashboardWebStringId.LimitVisibleData.IncreasePerformanceTooltip" | "DashboardWebStringId.ConditionalFormatting.Condition" | "DashboardWebStringId.CardLayout.MinWidth" | "DashboardWebStringId.CardLayout.MaxWidth" | "DashboardWebStringId.CardLayout.Editor.CardLayout" | "DashboardWebStringId.CardLayout.Editor.FormatOptions" | "DashboardWebStringId.CardLayout.LayoutOptions" | "DashboardWebStringId.CardLayout.ResetTemplate" | "DashboardWebStringId.CardLayout.ApplyToAllCards" | "DashboardWebStringId.Binding.ValuesPattern" | "DashboardWebStringId.Parameters.ParameterNameShouldBeUnique" | "DashboardWebStringId.Title.ImageEmbedded" | "DashboardWebStringId.Title.ImageLinked" | "DashboardWebStringId.Title.ImageNone" | "DashboardWebStringId.RangeFilter.SetDefaultCustomPeriod" | "DashboardWebStringId.RangeFilter.ClearDefaultCustomPeriod" | "DashboardWebStringId.MobileLayout.Back" | "DashboardWebStringId.MobileLayout.SwitchToViewer" | "DashboardWebStringId.Search" | "DashboardStringId.DefaultNameTabPage" | "DashboardStringId.DefaultNameChartPane" | "DashboardStringId.NewCalculatedFieldNamePrefix" | "DashboardStringId.NewParameterNamePrefix" | "AnalyticsCoreStringId.Parameter_Type_String" | "AnalyticsCoreStringId.Parameter_Type_DateTime" | "AnalyticsCoreStringId.Parameter_Type_Int16" | "AnalyticsCoreStringId.Parameter_Type_Int32" | "AnalyticsCoreStringId.Parameter_Type_Int64" | "AnalyticsCoreStringId.Parameter_Type_Float" | "AnalyticsCoreStringId.Parameter_Type_Double" | "AnalyticsCoreStringId.Parameter_Type_Decimal" | "AnalyticsCoreStringId.Parameter_Type_Boolean" | "AnalyticsCoreStringId.Parameter_Type_Guid" | "AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption" | "DataAccessUIStringId.FiltersView" | "DashboardStringId.SeriesTypeGroupArea" | "DashboardStringId.SeriesTypeGroupBar" | "DashboardStringId.SeriesTypeGroupBubble" | "DashboardStringId.SeriesTypeGroupFinancial" | "DashboardStringId.SeriesTypeGroupPointLine" | "DashboardStringId.SeriesTypeGroupRange" | "DashboardStringId.FunctionCategoryWindow" | "DashboardStringId.FunctionCategoryAggregate" | "DashboardStringId.FunctionCategoryAdvanced" | "DashboardStringId.FunctionDescriptionWindowAvg" | "DashboardStringId.FunctionDescriptionRunningMin" | "DashboardStringId.FunctionDescriptionTotal" | "DashboardStringId.FunctionDescriptionRankCompetition" | "DashboardStringId.FunctionDescriptionLookup" | "DashboardStringId.FunctionDescriptionRunningCount" | "DashboardStringId.FunctionDescriptionWindowMax" | "DashboardStringId.FunctionDescriptionVarp" | "DashboardStringId.FunctionDescriptionRunningAvg" | "DashboardStringId.FunctionDescriptionFirst" | "DashboardStringId.FunctionDescriptionWindowMin" | "DashboardStringId.FunctionDescriptionWindowStdDev" | "DashboardStringId.FunctionDescriptionLast" | "DashboardStringId.FunctionDescriptionWindowCount" | "DashboardStringId.FunctionDescriptionCountDistinct" | "DashboardStringId.FunctionDescriptionIndex" | "DashboardStringId.FunctionDescriptionWindowStdDevp" | "DashboardStringId.FunctionDescriptionWindowMode" | "DashboardStringId.FunctionDescriptionRunningMax" | "DashboardStringId.FunctionDescriptionRankPercentile" | "DashboardStringId.FunctionDescriptionRankDense" | "DashboardStringId.FunctionDescriptionWindowSum" | "DashboardStringId.FunctionDescriptionWindowCountDistinct" | "DashboardStringId.FunctionDescriptionStdDevp" | "DashboardStringId.FunctionDescriptionSize" | "DashboardStringId.FunctionDescriptionMedian" | "DashboardStringId.FunctionDescriptionRankModified" | "DashboardStringId.FunctionDescriptionWindowMedian" | "DashboardStringId.FunctionDescriptionRunningSum" | "DashboardStringId.FunctionDescriptionWindowVarp" | "DashboardStringId.FunctionDescriptionWindowVar" | "DashboardStringId.FunctionDescriptionStdDev" | "DashboardStringId.FunctionDescriptionRankUnique" | "DashboardStringId.FunctionDescriptionVar" | "DashboardStringId.FunctionDescriptionAggr" | "DashboardStringId.FunctionDescriptionAggrJoinRule" | "DashboardStringId.FunctionDescriptionWindowDefinition" | "DashboardStringId.FunctionDescriptionWindowDefinitionPartitionBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderAsc" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderDesc" | "DashboardStringId.AggregateExFunctionDescriptionCountNotNull" | "DashboardStringId.AggregateExFunctionDescriptionMode" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHour" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinute" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinuteSecond" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateMonthYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear2" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateQuarterYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetQuarter" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfMonth" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime3" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime4" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime5" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime6" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToBoolean" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToDateTime" | "DashboardStringId.SparklineIndicationModeLine" | "DashboardStringId.SparklineIndicationModeArea" | "DashboardStringId.SparklineIndicationModeBar" | "DashboardStringId.SparklineIndicationModeWinLoss" | "DashboardStringId.DefaultNameDateFilterItem" | "DashboardWebStringId.DateFilter.FilterType" | "DashboardWebStringId.DateFilter.FilterTypeExact" | "DashboardWebStringId.DateFilter.FilterTypeAfter" | "DashboardWebStringId.DateFilter.FilterTypeBefore" | "DashboardWebStringId.DateFilter.FilterTypeBetween" | "DashboardWebStringId.DateFilter.ArrangementMode" | "DashboardWebStringId.DateFilter.ArrangementModeAutoHeight" | "DashboardWebStringId.DateFilter.ArrangementModeHorizontal" | "DashboardWebStringId.DateFilter.ArrangementModeVertical" | "DashboardWebStringId.DateFilter.DatePickerLocation" | "DashboardWebStringId.DateFilter.DatePickerLocationFar" | "DashboardWebStringId.DateFilter.DatePickerLocationNear" | "DashboardWebStringId.DateFilter.DatePickerLocationHidden" | "DashboardStringId.DateFilterDisplayTextPattern" | "DashboardStringId.DateFilterDatePickerButtonDefaultText" | "DashboardStringId.FromDatePeriodCaption" | "DashboardStringId.ToDatePeriodCaption" | "DashboardStringId.FromToDatePeriodCaption" | "DashboardStringId.UniqueNameValidationMessage" | "DashboardStringId.GridTotalAutoTemplate" | "DashboardStringId.GridTotalValueTemplate" | "DashboardStringId.GridTotalTemplate" | "DashboardStringId.GridTotalTypeCount" | "DashboardStringId.GridTotalTypeMin" | "DashboardStringId.GridTotalTypeMax" | "DashboardStringId.GridTotalTypeAvg" | "DashboardStringId.GridTotalTypeSum" | "DashboardStringId.ActionShowDataInspector" | "DashboardStringId.InspectedData" | "DashboardStringId.InspectedTypeFormatString" | "DashboardStringId.AggregatedDataType" | "DashboardStringId.RawDataType" | "DashboardStringId.OLAPUnavailableRawData" | "DashboardStringId.SparklineValuesSeparator" | "DashboardStringId.SparklineArgumentValueSeparator" | "DashboardWebStringId.Grid.FilterClause.ApplyFilter" | "DashboardWebStringId.Grid.FilterClause.ResetOperation" | "DashboardWebStringId.Grid.FilterClause.Contains" | "DashboardWebStringId.Grid.FilterClause.DoesNotContain" | "DashboardWebStringId.Grid.FilterClause.StartsWith" | "DashboardWebStringId.Grid.FilterClause.EndsWith" | "DashboardWebStringId.Grid.FilterClause.Equals" | "DashboardWebStringId.Grid.FilterClause.DoesNotEqual" | "DashboardWebStringId.Grid.FilterClause.Less" | "DashboardWebStringId.Grid.FilterClause.Greater" | "DashboardWebStringId.Grid.FilterClause.LessOrEqual" | "DashboardWebStringId.Grid.FilterClause.GreaterOrEqual" | "DashboardWebStringId.Grid.FilterClause.Between" | "DashboardWebStringId.Grid.FilterClause.BetweenStart" | "DashboardWebStringId.Grid.FilterClause.BetweenEnd" | "DashboardWebStringId.AccordionTab.Content" | "DashboardWebStringId.TextBoxItemEditor.NoFields" | "DashboardWebStringId.TextBoxItemEditor.InsertField" | "DashboardWebStringId.TextBoxItemEditor.EditTextButton" | "DashboardWebStringId.TextBoxItemEditor.DialogCaption" | "DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose" | "DashboardWebStringId.TextBoxItemEditor.DialogClose" | "DashboardStringId.StartDate" | "DashboardStringId.EndDate" | "DashboardWebStringId.AccordionTab.MeasureFilter" | "DashboardStringId.FunctionDescriptionAggregateFilter" | "DashboardWebStringId.TabPages" | "DashboardWebStringId.More" | "DashboardStringId.MeasureFilterCaptionFormatString";
	};
	export let restrictedIntersectionLevelModeValues: {
	    Auto: "DashboardStringId.ActionClearMasterFilter" | "DashboardStringId.ActionClearSelection" | "DashboardStringId.ActionOtherValues" | "DashboardStringId.ActionDrillUp" | "DashboardStringId.ActionExportTo" | "DashboardStringId.ActionExportToPdf" | "DashboardStringId.ActionExportToImage" | "DashboardStringId.ActionExportToExcel" | "DashboardStringId.RangeFilterCustomDateTimePeriod" | "DashboardStringId.ActionExportTemplate" | "DashboardStringId.ActionAllowMultiselection" | "DashboardStringId.DashboardNullValue" | "DashboardStringId.TopNOthersValue" | "DashboardStringId.DashboardErrorValue" | "DashboardStringId.DateTimeQuarterFormat" | "DashboardStringId.MessageLoading" | "DashboardStringId.ParametersFormCaption" | "DashboardStringId.ParametersSelectorText" | "DashboardStringId.ParametersFormAllowNullColumnCaption" | "DashboardStringId.ParametersFormValueColumnCaption" | "DashboardStringId.ParametersFormNameColumnCaption" | "DashboardStringId.ButtonOK" | "DashboardStringId.ButtonCancel" | "DashboardStringId.SelectDate" | "DashboardStringId.ButtonReset" | "DashboardStringId.ButtonSubmit" | "DashboardStringId.ButtonApply" | "DashboardStringId.ButtonExport" | "DashboardStringId.GridResetColumnWidths" | "DashboardStringId.GridSortAscending" | "DashboardStringId.GridSortDescending" | "DashboardStringId.GridClearSorting" | "DashboardStringId.PivotGridTotal" | "DashboardStringId.PivotGridGrandTotal" | "DashboardStringId.ChartTotalValue" | "DashboardStringId.PageLayout" | "DashboardStringId.PageLayoutAuto" | "DashboardStringId.PageLayoutPortrait" | "DashboardStringId.PageLayoutLandscape" | "DashboardStringId.PaperKind" | "DashboardStringId.PaperKindLetter" | "DashboardStringId.PaperKindLegal" | "DashboardStringId.PaperKindExecutive" | "DashboardStringId.PaperKindA5" | "DashboardStringId.PaperKindA4" | "DashboardStringId.PaperKindA3" | "DashboardStringId.ScaleMode" | "DashboardStringId.ScaleModeNone" | "DashboardStringId.ScaleModeUseScaleFactor" | "DashboardStringId.ScaleModeAutoFitToPagesWidth" | "DashboardStringId.AutoFitPageCount" | "DashboardStringId.ScaleFactor" | "DashboardStringId.PrintHeadersOnEveryPage" | "DashboardStringId.FitToPageWidth" | "DashboardStringId.SizeMode" | "DashboardStringId.SizeModeNone" | "DashboardStringId.SizeModeStretch" | "DashboardStringId.SizeModeZoom" | "DashboardStringId.AutoArrangeContent" | "DashboardStringId.ImageFormat" | "DashboardStringId.ExcelFormat" | "DashboardStringId.CsvValueSeparator" | "DashboardStringId.ExportFilters" | "DashboardStringId.ExportParameters" | "DashboardStringId.DashboardStatePosition" | "DashboardStringId.Resolution" | "DashboardStringId.ShowTitle" | "DashboardStringId.Title" | "DashboardStringId.FileName" | "DashboardStringId.FilterStatePresentationAfter" | "DashboardStringId.FilterStatePresentationAfterAndSplitPage" | "DashboardStringId.FilterStatePresentationSplitSheet" | "DashboardStringId.MessageCustomItemIsNotSupported" | "DashboardStringId.MessageGridHasNoData" | "DashboardStringId.MessagePivotHasNoData" | "DashboardStringId.SparklineTooltipStartValue" | "DashboardStringId.SparklineTooltipEndValue" | "DashboardStringId.SparklineTooltipMinValue" | "DashboardStringId.SparklineTooltipMaxValue" | "DashboardStringId.OpenCaption" | "DashboardStringId.HighCaption" | "DashboardStringId.LowCaption" | "DashboardStringId.CloseCaption" | "DashboardStringId.InitialExtent" | "DashboardStringId.FilterElementShowAllItem" | "DashboardStringId.NumericFormatUnitSymbolThousands" | "DashboardStringId.NumericFormatUnitSymbolMillions" | "DashboardStringId.NumericFormatUnitSymbolBillions" | "DashboardStringId.ActionSelectDateTimePeriod" | "DashboardStringId.RangeFilterSelectRange" | "DashboardStringId.FilterElementCheckedComboBoxNoDataCaption" | "DashboardStringId.FilterElementRadioComboBoxNoDataCaption" | "DashboardStringId.FilterElementNoDataToDisplay" | "DashboardStringId.RangeFilterSelectRangeFromCaption" | "DashboardStringId.RangeFilterSelectRangeToCaption" | "DashboardWebStringId.DashboardParameters" | "DashboardStringId.DataSourceDataMember" | "DashboardStringId.DescriptionMeasures" | "DashboardWebStringId.TextBoxFormatText" | "DashboardStringId.NumericFormatUnitCaption" | "DashboardWebStringId.SummaryType" | "DashboardStringId.CalculationTypeExpression" | "DevExpressWebStringId.CalculatedFieldDataType" | "DashboardStringId.ValueCaption" | "DashboardStringId.Value1Caption" | "DashboardStringId.Value2Caption" | "DashboardStringId.CommandFormatRuleTopBottom" | "DashboardStringId.CommandFormatRuleAboveBelowAverage" | "DashboardStringId.CommandFormatRuleBar" | "DashboardStringId.CommandFormatRuleColorRangeBar" | "DashboardStringId.CommandFormatRuleGradientRangeBar" | "DashboardStringId.FormatRuleStyleAppearance" | "DashboardStringId.FormatRuleStyleIcons" | "DashboardStringId.FormatRuleNegativeStyle" | "DashboardStringId.CommandFormatRuleExpression" | "DashboardWebStringId.TopNMode" | "DashboardStringId.CommandFormatRuleRangeSet" | "DashboardStringId.CommandFormatRuleValue" | "DashboardStringId.CommandFormatRuleDateOccurring" | "DashboardWebStringId.ConditionalFormatting.Appearance.BackColor" | "DashboardWebStringId.ConditionalFormatting.Appearance.ForeColor" | "DashboardStringId.DescriptionBoundImageAttribute" | "DashboardWebStringId.ShowCaptionText" | "DashboardWebStringId.DisplayItemAsPage" | "DashboardStringId.DefaultNameItemGroup" | "DashboardStringId.DefaultNameTabContainerItem" | "DashboardStringId.DefaultDataSourceName" | "DashboardWebStringId.CrossDataSourceFiltering" | "DashboardStringId.RangeFilterCalculationAlongSeries" | "DashboardStringId.RangeFilterCalculationAlongArgument" | "DashboardStringId.DescriptionItemSeries" | "DashboardStringId.DescriptionSeries" | "DashboardWebStringId.Chart.SeriesType" | "DashboardStringId.DescriptionDimensions" | "DashboardWebStringId.TreeView.AutoExpand" | "DashboardWebStringId.ConditionalFormatting.ConditionMinimum" | "DashboardWebStringId.ConditionalFormatting.ConditionMaximum" | "DashboardStringId.DescriptionItemDimension" | "DashboardStringId.DescriptionItemMeasure" | "DashboardWebStringId.Grid.MergeCells" | "DashboardWebStringId.Grid.ColumnWidthMode" | "DashboardWebStringId.Grid.BandedRows" | "DashboardWebStringId.Grid.VerticalLines" | "DashboardWebStringId.Grid.HorizontalLines" | "DashboardWebStringId.Grid.ColumnHeaders" | "DashboardWebStringId.Grid.WordWrap" | "DashboardStringId.ActualValueCaption" | "DashboardStringId.TargetValueCaption" | "DashboardStringId.UriPatternCaption" | "DashboardStringId.UriCaption" | "DashboardStringId.DisplayValueCaption" | "DashboardStringId.WeightCaption" | "DashboardStringId.DescriptionItemColor" | "DashboardStringId.Latitude" | "DashboardStringId.Longitude" | "DashboardWebStringId.GeoPointMapClusterization" | "DashboardWebStringId.MapLockNavigation" | "DashboardWebStringId.WeightedLegendGalleryGroup" | "DashboardStringId.DescriptionItemArgument" | "DashboardWebStringId.PieMapIsWeighted" | "DashboardWebStringId.InteractivityOptions.IgnoreMasterFilters" | "DashboardWebStringId.InteractivityOptions.DrillDown" | "DashboardWebStringId.Pie.ShowCaptions" | "DashboardStringId.DescriptionColumns" | "DashboardStringId.DescriptionRows" | "DashboardStringId.DescriptionValues" | "DashboardStringId.DescriptionArguments" | "DashboardStringId.TextGroupIntervalAlphabetical" | "DashboardStringId.ActionMaximizeDashboardItem" | "DashboardStringId.ActionRestoreDashboardItem" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataSource" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.ValueMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DisplayMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.SortOrder" | "DevExpress.DashboardCommon.DashboardParameter.Visible" | "DevExpress.DashboardCommon.DashboardParameter.Description" | "DevExpress.DashboardCommon.DashboardParameter.AllowMultiselect" | "DevExpress.DashboardCommon.DashboardParameter.AllowNull" | "DevExpress.DashboardCommon.DashboardParameter.SelectAllValues" | "DevExpress.DashboardCommon.StaticListLookUpSettings.Values" | "DevExpress.DashboardCommon.DimensionSortOrder.Ascending" | "DevExpress.DashboardCommon.DimensionSortOrder.Descending" | "DevExpress.DashboardCommon.DimensionSortOrder.None" | "DashboardWebStringId.AccordionTab.ScatterChartPointLabelOptions" | "DashboardWebStringId.AccordionTab.ChoroplethMapShapeLabelsAttribute" | "DashboardStringId.CommandFormatRuleTopN" | "DashboardWebStringId.Type" | "DashboardWebStringId.Grid.ColumnWidth" | "DashboardWebStringId.AccordionTab.ShowTotals" | "DashboardWebStringId.AccordionTab.Layout" | "DashboardWebStringId.AccordionTab.PivotInitialState" | "DashboardWebStringId.AccordionTab.ImageOptions" | "DashboardWebStringId.AccordionTab.Labels" | "DashboardWebStringId.AccordionTab.MapLegend" | "DashboardWebStringId.AccordionTab.WeightedLegend" | "DashboardWebStringId.AccordionTab.Common" | "DashboardWebStringId.AccordionTab.ChartLegend" | "DashboardWebStringId.Grid.AutoFitToContentsColumnWidthMode" | "DashboardWebStringId.Grid.AutoFitToGridColumnWidthMode" | "DashboardWebStringId.Grid.ManualGridColumnWidthMode" | "DashboardStringId.DateTimeIntervalYear" | "DashboardStringId.DateTimeIntervalQuarter" | "DashboardStringId.DateTimeIntervalMonth" | "DashboardStringId.DateTimeIntervalWeek" | "DashboardStringId.DateTimeIntervalDay" | "DashboardStringId.DateTimeIntervalHour" | "DashboardStringId.DateTimeIntervalMinute" | "DashboardStringId.DateTimeIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalYear" | "DashboardStringId.DateTimeGroupIntervalQuarter" | "DashboardStringId.DateTimeGroupIntervalMonth" | "DashboardStringId.DateTimeGroupIntervalDay" | "DashboardStringId.DateTimeGroupIntervalHour" | "DashboardStringId.DateTimeGroupIntervalMinute" | "DashboardStringId.DateTimeGroupIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalDayOfYear" | "DashboardStringId.DateTimeGroupIntervalDayOfWeek" | "DashboardStringId.DateTimeGroupIntervalWeekOfYear" | "DashboardStringId.DateTimeGroupIntervalWeekOfMonth" | "DashboardStringId.DateTimeGroupIntervalMonthYear" | "DashboardStringId.DateTimeGroupIntervalQuarterYear" | "DashboardStringId.DateTimeGroupIntervalWeekYear" | "DashboardStringId.DateTimeGroupIntervalDayMonthYear" | "DashboardStringId.DateTimeGroupIntervalDateHour" | "DashboardStringId.DateTimeGroupIntervalDateHourMinute" | "DashboardStringId.DateTimeGroupIntervalDateHourMinuteSecond" | "DashboardStringId.DateTimeGroupIntervalExactDate" | "DashboardStringId.GroupIntervalNone" | "DashboardWebStringId.Treemap.StripedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SquarifiedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SliceAndDiceLayoutAlgorithm" | "DashboardWebStringId.Treemap.TileLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.TileLabelsNone" | "DashboardWebStringId.Treemap.TileLabelsValue" | "DashboardWebStringId.Treemap.TileLabelsArgument" | "DashboardWebStringId.Treemap.TileTooltipsArgumentAndValue" | "DashboardWebStringId.Treemap.TileTooltipsArgument" | "DashboardWebStringId.Treemap.TileTooltipsValue" | "DashboardWebStringId.Treemap.TileTooltipsNone" | "DashboardWebStringId.Treemap.TopLeftToBottomRightLayoutDirection" | "DashboardWebStringId.Treemap.TopRightToBottomLeftLayoutDirection" | "DashboardWebStringId.Treemap.BottomLeftToTopRightLayoutDirection" | "DashboardWebStringId.Treemap.BottomRightToTopLeftLayoutDirection" | "DashboardWebStringId.Treemap.LayoutDirection" | "DashboardWebStringId.Treemap.GroupLabelsNone" | "DashboardWebStringId.Treemap.GroupLabelsArgument" | "DashboardWebStringId.Treemap.GroupLabelsValue" | "DashboardWebStringId.Treemap.GroupLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.GroupTooltipsNone" | "DashboardWebStringId.Treemap.GroupTooltipsArgument" | "DashboardWebStringId.Treemap.GroupTooltipsValue" | "DashboardWebStringId.Treemap.GroupTooltipsArgumentAndValue" | "DashboardStringId.RankOrderAscending" | "DashboardStringId.RankOrderDescending" | "DashboardStringId.DateTimeFormatYearFormatDefaultCaption" | "DashboardStringId.DateTimeFormatYearFormatFullCaption" | "DashboardStringId.DateTimeFormatYearFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatQuarterFormatDefaultCaption" | "DashboardStringId.DateTimeFormatQuarterFormatNumericCaption" | "DashboardStringId.DateTimeFormatQuarterFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatDefaultCaption" | "DashboardStringId.DateTimeFormatMonthFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatMonthFormatNumericCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatFullCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatNumericCaption" | "DashboardStringId.DateTimeFormatDateFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateFormatLongCaption" | "DashboardStringId.DateTimeFormatDateFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatLongCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption" | "DashboardStringId.ExactDateFormatYear" | "DashboardStringId.ExactDateFormatQuarter" | "DashboardStringId.ExactDateFormatMonth" | "DashboardStringId.ExactDateFormatDay" | "DashboardStringId.ExactDateFormatHour" | "DashboardStringId.ExactDateFormatMinute" | "DashboardStringId.ExactDateFormatSecond" | "DashboardWebStringId.FormatType" | "DashboardWebStringId.TopN.Top" | "DashboardWebStringId.TopN.Bottom" | "DashboardWebStringId.DimensionSortBy" | "DashboardStringId.NumericFormatUnitAutoCaption" | "DashboardStringId.NumericFormatFormatTypeAutoCaption" | "DashboardStringId.NumericFormatFormatTypeGeneralCaption" | "DashboardStringId.NumericFormatFormatTypeNumberCaption" | "DashboardStringId.NumericFormatFormatTypeCurrencyCaption" | "DashboardStringId.NumericFormatFormatTypeScientificCaption" | "DashboardStringId.NumericFormatFormatTypePercentCaption" | "DashboardStringId.NumericFormatUnitOnesCaption" | "DashboardStringId.NumericFormatUnitThousandsCaption" | "DashboardStringId.NumericFormatUnitMillionsCaption" | "DashboardStringId.NumericFormatUnitBillionsCaption" | "DashboardStringId.DeltaValueTypeActualValueCaption" | "DashboardStringId.DeltaValueTypeAbsoluteVariationCaption" | "DashboardStringId.DeltaValueTypePercentVariationCaption" | "DashboardStringId.DeltaValueTypePercentOfTargetCaption" | "DashboardStringId.DeltaValueTypeTargetValueCaption" | "DashboardStringId.DeltaIndicationModeGreaterIsGoodCaption" | "DashboardStringId.DeltaIndicationModeLessIsGoodCaption" | "DashboardStringId.DeltaIndicationModeWarningIfGreaterCaption" | "DashboardStringId.DeltaIndicationModeWarningIfLessCaption" | "DashboardStringId.DeltaIndicationModeNoIndicationCaption" | "DashboardStringId.DeltaThresholdTypeAbsolute" | "DashboardStringId.DeltaThresholdTypePercent" | "DashboardStringId.CommandDimensionGroupChildValues" | "DashboardStringId.SeriesTypeBar" | "DashboardStringId.SeriesTypeStackedBar" | "DashboardStringId.SeriesTypeFullStackedBar" | "DashboardStringId.SeriesTypePoint" | "DashboardStringId.SeriesTypeLine" | "DashboardStringId.SeriesTypeStackedLine" | "DashboardStringId.SeriesTypeFullStackedLine" | "DashboardStringId.SeriesTypeStepLine" | "DashboardStringId.SeriesTypeSpline" | "DashboardStringId.SeriesTypeArea" | "DashboardStringId.SeriesTypeStackedArea" | "DashboardStringId.SeriesTypeFullStackedArea" | "DashboardStringId.SeriesTypeStepArea" | "DashboardStringId.SeriesTypeSplineArea" | "DashboardStringId.SeriesTypeStackedSplineArea" | "DashboardStringId.SeriesTypeFullStackedSplineArea" | "DashboardWebStringId.Chart.ShowLegend" | "DashboardStringId.DefaultNameBoundImageItem" | "DashboardStringId.DefaultNameImageItem" | "DashboardStringId.DefaultNameTextBoxItem" | "DashboardStringId.DefaultNameCardItem" | "DashboardStringId.DefaultNameChartItem" | "DashboardStringId.DefaultNameComboBoxItem" | "DashboardStringId.DefaultNameListBoxItem" | "DashboardStringId.DefaultNameTreeViewItem" | "DashboardStringId.DefaultNameGaugeItem" | "DashboardStringId.DefaultNameGridItem" | "DashboardStringId.GridHyperlinkUriPatternErrorMessage" | "DashboardWebStringId.DefaultNameBubbleMapItem" | "DashboardWebStringId.DefaultNameChoroplethMapItem" | "DashboardWebStringId.DefaultNameGeoPointMapItem" | "DashboardWebStringId.DefaultNamePieMapItem" | "DashboardStringId.DefaultNamePieItem" | "DashboardStringId.DefaultNamePivotItem" | "DashboardStringId.DefaultNameRangeFilterItem" | "DashboardStringId.DefaultNameScatterChartItem" | "DashboardStringId.DefaultNameTreemapItem" | "DashboardStringId.DescriptionMaps" | "DashboardStringId.EntireRangePeriodCaption" | "DashboardStringId.CalculationTypePercentOfTotal" | "DashboardStringId.CalculationTypeDifference" | "DashboardStringId.CalculationTypePercentageDifference" | "DashboardStringId.CalculationTypeRunningTotal" | "DashboardStringId.CalculationTypeMovingCalculation" | "DashboardStringId.CalculationTypeRank" | "DashboardStringId.ColorPaletteIndex" | "DashboardStringId.DifferenceCalculationTargetPrevious" | "DashboardStringId.DifferenceCalculationTargetNext" | "DashboardStringId.DifferenceCalculationTargetFirst" | "DashboardStringId.DifferenceCalculationTargetLast" | "DashboardStringId.SummaryTypeCount" | "DashboardStringId.SummaryTypeSum" | "DashboardStringId.SummaryTypeMin" | "DashboardStringId.SummaryTypeMax" | "DashboardStringId.SummaryTypeAverage" | "DashboardStringId.SummaryTypeStdDev" | "DashboardStringId.SummaryTypeStdDevp" | "DashboardStringId.SummaryTypeVar" | "DashboardStringId.SummaryTypeVarp" | "DashboardStringId.SummaryTypeCountDistinct" | "DashboardStringId.SummaryTypeMedian" | "DashboardStringId.SummaryTypeMode" | "DashboardStringId.RankTypeUnique" | "DashboardStringId.RankTypeCompetition" | "DashboardStringId.RankTypeDense" | "DashboardStringId.RankTypeModified" | "DashboardStringId.RankTypePercentile" | "DashboardStringId.CardCalculationAlongCards" | "DashboardStringId.CardCalculationAlongSparklineArgument" | "DashboardStringId.CardCalculationAlongCardsAndSparklineArgument" | "DashboardStringId.CardCalculationAlongSparklineArgumentAndCards" | "DashboardStringId.ChartCalculationAlongArguments" | "DashboardStringId.ChartCalculationAlongSeries" | "DashboardStringId.ChartCalculationAlongArgumentsAndSeries" | "DashboardStringId.ChartCalculationAlongSeriesAndArguments" | "DashboardStringId.GridCalculationAlongRows" | "DashboardStringId.GridCalculationAlongSparklineArgument" | "DashboardStringId.GridCalculationAlongRowsAndSparklineArgument" | "DashboardStringId.GridCalculationAlongSparklineArgumentAndRows" | "DashboardStringId.PivotCalculationAlongColumns" | "DashboardStringId.PivotCalculationAlongRows" | "DashboardStringId.PivotCalculationAlongColumnsAndRows" | "DashboardStringId.PivotCalculationAlongRowsAndColumns" | "DashboardStringId.PivotCalculationAlongGroupsInColumns" | "DashboardStringId.PivotCalculationAlongGroupsInRows" | "DashboardStringId.PivotCalculationAlongGroupsInColumnsAndRows" | "DashboardStringId.PivotCalculationAlongGroupsInRowsAndColumns" | "DashboardStringId.PieCalculationAlongArguments" | "DashboardStringId.PieCalculationAlongSeries" | "DashboardStringId.PieCalculationAlongArgumentsAndSeries" | "DashboardStringId.PieCalculationAlongSeriesAndArguments" | "DashboardStringId.RangeFilterCalculationAlongArgumentAndSeries" | "DashboardStringId.RangeFilterCalculationAlongSeriesAndArgument" | "DashboardStringId.GaugeCalculationAlongGauges" | "DashboardStringId.ScatterCalculationAlongArguments" | "DashboardStringId.CalculationAlongSpecificDimensions" | "DashboardStringId.CalculatedFieldTypeString" | "DashboardStringId.CalculatedFieldTypeLong" | "DashboardStringId.CalculatedFieldTypeDecimal" | "DashboardStringId.CalculatedFieldTypeBoolean" | "DashboardStringId.CalculatedFieldTypeDateTime" | "DashboardStringId.CalculatedFieldTypeDouble" | "DashboardStringId.CalculatedFieldTypeAuto" | "DashboardStringId.CalculatedFieldTypeObject" | "DashboardStringId.DefaultEFDataSourceName" | "DashboardStringId.DefaultExcelDataSourceName" | "DashboardStringId.DefaultFileExtractDataSourceName" | "DashboardStringId.DefaultObjectDataSourceName" | "DashboardStringId.DefaultOlapDataSourceName" | "DashboardStringId.DefaultSqlDataSourceName" | "DashboardStringId.DefaultJsonDataSourceName" | "DashboardStringId.DefaultXpoDataSourceName" | "DashboardStringId.OlapRaggedHierarchyNoneItemCaption" | "DashboardStringId.FormatRuleApplyToColumn" | "DashboardStringId.SeriesTypeSideBySideRangeBar" | "DashboardStringId.SeriesTypeRangeArea" | "DashboardStringId.SeriesTypeHighLowClose" | "DashboardStringId.SeriesTypeCandleStick" | "DashboardStringId.SeriesTypeStock" | "DashboardWebStringId.StyleSettings" | "DashboardStringId.ParametersFormCalendarTodayButton" | "DashboardStringId.TreemapLabelArgumentTemplate" | "DashboardStringId.TreemapLabelValueTemplate" | "DashboardStringId.SearchNullValuePrompt" | "DashboardStringId.CustomItems" | "DashboardStringId.FormatRuleAllowNegativeAxis" | "DashboardStringId.FormatRuleDrawAxis" | "DashboardStringId.FormatRuleShowBarOnly" | "DashboardStringId.CommandFormatRuleBottomN" | "DashboardStringId.FormatConditionAppearanceNone" | "DashboardStringId.FormatConditionAppearanceCustom" | "DashboardStringId.FormatConditionAppearancePaleRed" | "DashboardStringId.FormatConditionAppearancePaleYellow" | "DashboardStringId.FormatConditionAppearancePaleGreen" | "DashboardStringId.FormatConditionAppearancePaleBlue" | "DashboardStringId.FormatConditionAppearancePalePurple" | "DashboardStringId.FormatConditionAppearancePaleCyan" | "DashboardStringId.FormatConditionAppearancePaleOrange" | "DashboardStringId.FormatConditionAppearancePaleGray" | "DashboardStringId.FormatConditionAppearanceRed" | "DashboardStringId.FormatConditionAppearanceYellow" | "DashboardStringId.FormatConditionAppearanceGreen" | "DashboardStringId.FormatConditionAppearanceBlue" | "DashboardStringId.FormatConditionAppearancePurple" | "DashboardStringId.FormatConditionAppearanceCyan" | "DashboardStringId.FormatConditionAppearanceOrange" | "DashboardStringId.FormatConditionAppearanceGray" | "DashboardStringId.FormatConditionAppearanceGradientRed" | "DashboardStringId.FormatConditionAppearanceGradientYellow" | "DashboardStringId.FormatConditionAppearanceGradientGreen" | "DashboardStringId.FormatConditionAppearanceGradientBlue" | "DashboardStringId.FormatConditionAppearanceGradientPurple" | "DashboardStringId.FormatConditionAppearanceGradientCyan" | "DashboardStringId.FormatConditionAppearanceGradientOrange" | "DashboardStringId.FormatConditionAppearanceGradientTransparent" | "DashboardStringId.FormatConditionAppearanceFontBold" | "DashboardStringId.FormatConditionAppearanceFontItalic" | "DashboardStringId.FormatConditionAppearanceFontUnderline" | "DashboardStringId.FormatConditionAppearanceFontGrayed" | "DashboardStringId.FormatConditionAppearanceFontRed" | "DashboardStringId.FormatConditionAppearanceFontYellow" | "DashboardStringId.FormatConditionAppearanceFontGreen" | "DashboardStringId.FormatConditionAppearanceFontBlue" | "DashboardStringId.IntersectionLevelModeFirst" | "DashboardStringId.IntersectionLevelModeLast" | "DashboardStringId.IntersectionLevelModeAuto" | "DashboardStringId.IntersectionLevelModeAll" | "DashboardStringId.IntersectionLevelModeSpecific" | "DashboardStringId.FormatRuleApplyToRow" | "DashboardStringId.FormatRuleApplyTo" | "DashboardWebStringId.FilterItem.AllowEmptyFilter" | "DashboardStringId.FormatConditionAppearanceFontStrikeout" | "DashboardStringId.FormatConditionAutomaticValueType" | "DashboardStringId.FormatConditionNumberValueType" | "DashboardStringId.FormatConditionPercentValueType" | "DashboardStringId.CommandFormatRuleRangeIcons" | "DashboardStringId.CommandFormatRuleGreaterThan" | "DashboardStringId.CommandFormatRuleGreaterThanOrEqualTo" | "DashboardStringId.CommandFormatRuleLessThan" | "DashboardStringId.CommandFormatRuleLessThanOrEqualTo" | "DashboardStringId.CommandFormatRuleEqualTo" | "DashboardStringId.CommandFormatRuleNotEqualTo" | "DashboardStringId.CommandFormatRuleBetween" | "DashboardStringId.CommandFormatRuleNotBetween" | "DashboardStringId.CommandFormatRuleBetweenOrEqual" | "DashboardStringId.CommandFormatRuleNotBetweenOrEqual" | "DashboardStringId.CommandFormatRuleContains" | "DashboardStringId.ColorAutoAssigned" | "DashboardStringId.CalculationTypeNone" | "DashboardStringId.UndoText" | "DashboardStringId.RedoText" | "DashboardStringId.DashboardCurrencyUseCurrentCurrency" | "DashboardStringId.CommandDimensionSortModeDisplayText" | "DashboardStringId.CommandDimensionSortModeValue" | "DashboardStringId.CommandDimensionSortModeID" | "DashboardStringId.CommandDimensionSortModeKey" | "DashboardWebStringId.Chart.AddPane" | "DashboardStringId.MapShapeNoneAttribute" | "DashboardStringId.DefaultPeriodName" | "DashboardStringId.CardLayoutTemplateStretchedCaption" | "DashboardStringId.CardLayoutTemplateCenteredCaption" | "DashboardStringId.CardLayoutTemplateCompactCaption" | "DashboardStringId.CardLayoutTemplateLightweightCaption" | "DashboardStringId.CardLayoutTemplateCustomCaption" | "DashboardStringId.CardLayoutTemplateNoneCaption" | "DashboardStringId.CardRowDataElementTypeTitleCaption" | "DashboardStringId.CardRowDataElementTypeSubtitleCaption" | "DashboardStringId.CardRowDataElementTypeActualValueCaption" | "DashboardStringId.CardRowDataElementTypeTargetValueCaption" | "DashboardStringId.CardRowDataElementTypeAbsoluteVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentOfTargetCaption" | "DashboardStringId.CardRowDataElementTypeDimensionValueCaption" | "DashboardStringId.CardRowDataElementTypeCardNameCaption" | "DashboardStringId.CardRowDataElementTypeDeltaIndicatorCaption" | "DashboardStringId.CardRowDataElementTypeSparklineCaption" | "DashboardStringId.FormatRuleApplyToAllElements" | "DashboardWebStringId.Pie.LabelPosition" | "DashboardWebStringId.Pie.LabelPositionOutside" | "DashboardWebStringId.Pie.LabelPositionInside" | "DashboardStringId.IncludeExportDashboardState" | "DashboardStringId.PointLabelContentTypeArgument" | "DashboardStringId.PointLabelContentTypeSeriesName" | "DashboardStringId.PointLabelContentTypeValue" | "DashboardStringId.PointLabelContentTypePercent" | "DashboardWebStringId.DashboardMenu" | "DashboardWebStringId.DashboardMenuNew" | "DashboardWebStringId.DashboardMenuOpen" | "DashboardWebStringId.DashboardMenuSave" | "DashboardWebStringId.DashboardMenuCurrency" | "DashboardWebStringId.DashboardMenuDataSources" | "DashboardWebStringId.DashboardMenuColorScheme" | "DashboardWebStringId.DashboardMenuNewDashboardCreate" | "DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder" | "DashboardWebStringId.Binding.DefaultEmptyPlaceholder" | "DashboardWebStringId.Binding.DefaultSelectedPlaceholder" | "DashboardWebStringId.Binding.DataFiltering" | "DashboardWebStringId.Binding.Argument" | "DashboardWebStringId.Binding.Attribute" | "DashboardWebStringId.Binding.Sparkline" | "DashboardWebStringId.Binding.Columns" | "DashboardWebStringId.Binding.TooltipDimensions" | "DashboardWebStringId.Binding.TooltipMeasures" | "DashboardWebStringId.Binding.HiddenDimensions" | "DashboardWebStringId.Binding.HiddenMeasures" | "DashboardWebStringId.Binding.AddDimension" | "DashboardWebStringId.Binding.AddMeasure" | "DashboardWebStringId.Binding.AddColumn" | "DashboardWebStringId.Binding.AddRow" | "DashboardWebStringId.Binding.AddValue" | "DashboardWebStringId.Binding.AddSeries" | "DashboardWebStringId.Binding.SetLatitude" | "DashboardWebStringId.Binding.SetLongitude" | "DashboardWebStringId.Binding.SetArgument" | "DashboardWebStringId.Binding.AddArgument" | "DashboardWebStringId.Binding.SetWeight" | "DashboardWebStringId.Binding.SetColor" | "DashboardWebStringId.Binding.SetAttribute" | "DashboardWebStringId.Binding.SetValue" | "DashboardWebStringId.Binding.XAxis" | "DashboardWebStringId.Binding.YAxis" | "DashboardWebStringId.Binding.ConfigureDimension" | "DashboardWebStringId.Binding.ConfigureMeasure" | "DashboardWebStringId.Binding.ConfigureSeries" | "DashboardWebStringId.Binding.ConfigureArgument" | "DashboardWebStringId.Binding.ConfigureValue" | "DashboardWebStringId.Binding.ConfigureAttribute" | "DashboardWebStringId.Binding.ConfigureLatitude" | "DashboardWebStringId.Binding.ConfigureLongitude" | "DashboardWebStringId.Binding.ConfigureColumn" | "DashboardWebStringId.Binding.ConfigureRow" | "DashboardWebStringId.Binding.ConfigureWeight" | "DashboardWebStringId.Binding.ConfigureColor" | "DashboardWebStringId.Binding.ShowAll" | "DashboardWebStringId.ColorScheme.Color" | "DashboardWebStringId.ColorScheme.Colors" | "DashboardWebStringId.Parameters.ParameterList" | "DashboardWebStringId.Parameters.AddParameter" | "DashboardWebStringId.Parameters.AddParameter.Tooltip" | "DashboardWebStringId.Parameters.NoSelectedParameter" | "DashboardWebStringId.Parameters.Reorder" | "DashboardWebStringId.Parameters.Done" | "DashboardWebStringId.Currency.Currency" | "DashboardWebStringId.Currency.CurrencyCulture" | "DashboardWebStringId.Currency.DefaultCurrencyWarning" | "DashboardWebStringId.Preview" | "DashboardWebStringId.Add" | "DashboardWebStringId.DataSources.UsedDataSources" | "DashboardWebStringId.DataSources.DataItems" | "DashboardWebStringId.DataSources.AddQuery" | "DashboardWebStringId.DataSources.AddCalculatedField" | "DashboardWebStringId.DataSources.AddDataSource" | "DashboardWebStringId.DataSources.NoUsedDataSources" | "DashboardWebStringId.DataSources.NoAvailableDataSources" | "DashboardWebStringId.DataSources.ChooseDataSource" | "DashboardWebStringId.DataSources.CreateDataSource" | "DashboardWebStringId.DataSources.CreateNewDataSource" | "DashboardWebStringId.DataSources.CreateDataSource.Tooltip" | "DashboardWebStringId.DataSources.EditCalculatedField" | "DashboardWebStringId.DataSources.CalculatedField.Name" | "DashboardWebStringId.DataSources.CalculatedField.FieldType" | "DashboardWebStringId.DataSources.CalculatedField.UniqueNameError" | "DashboardWebStringId.DataSources.CalculatedField.Corrupted" | "DashboardWebStringId.DataSources.Edit" | "DashboardStringId.MessageCollectionTypesNotSupported" | "DashboardWebStringId.New.DashboardName" | "DashboardWebStringId.Bindings" | "DashboardWebStringId.Interactivity" | "DashboardWebStringId.Options" | "DashboardWebStringId.Remove" | "DashboardWebStringId.MasterFilterMode" | "DashboardWebStringId.Title.Text" | "DashboardWebStringId.Title.Visible" | "DashboardWebStringId.Title.IncludeMasterFilter" | "DashboardWebStringId.Title.Aligment" | "DashboardWebStringId.Title.Image" | "DashboardWebStringId.DataSources.Cancel" | "DashboardWebStringId.DataSources.IncludeToTheDashboard" | "DashboardWebStringId.DataSources.AvailableDataSourcesError" | "DashboardWebStringId.DataSources.DashboardDataSourceWizard" | "DashboardWebStringId.Viewer" | "DashboardWebStringId.Loading" | "DashboardWebStringId.ClickHereInvitation" | "DashboardWebStringId.BindDataInvitation" | "DashboardWebStringId.AddItemInvitation" | "DashboardWebStringId.Parameters.Values" | "DashboardWebStringId.Binding.Cards" | "DashboardWebStringId.Binding.AddCard" | "DashboardWebStringId.Binding.ConfigureCard" | "DashboardWebStringId.Binding.AddValues" | "DashboardWebStringId.Binding.ConfigureValues" | "DashboardWebStringId.Binding.Maps" | "DashboardWebStringId.Binding.AddMap" | "DashboardWebStringId.Binding.ConfigureMap" | "DashboardWebStringId.Binding.Gauges" | "DashboardWebStringId.Binding.AddGauge" | "DashboardWebStringId.Binding.ConfigureGauge" | "DashboardWebStringId.InteractivityOptions" | "DashboardWebStringId.Binding.Values" | "DashboardWebStringId.Binding.RemovePane" | "DashboardWebStringId.ClickToSetFilterCriteria" | "DashboardWebStringId.DataSources.OK" | "DashboardWebStringId.DataSources.Save" | "DashboardWebStringId.Cards.ArrangementMode" | "DashboardWebStringId.Cards.ArrangementMode.Auto" | "DashboardWebStringId.Cards.ArrangementMode.FixedRows" | "DashboardWebStringId.Cards.ArrangementMode.FixedColumns" | "DashboardWebStringId.Cards.LineCount" | "DashboardWebStringId.ConditionalFormatting" | "DashboardWebStringId.CollectionEditor.NoItems" | "DashboardWebStringId.CollectionEditor.Totals.NoItems" | "DashboardWebStringId.CollectionEditor.Parameters.NoItems" | "DashboardWebStringId.PivotGrid.AutoExpandColumnGroups" | "DashboardWebStringId.PivotGrid.AutoExpandRowGroups" | "DashboardWebStringId.PivotGrid.ColumnGrandTotals" | "DashboardWebStringId.PivotGrid.RowGrandTotals" | "DashboardWebStringId.PivotGrid.ColumnTotals" | "DashboardWebStringId.PivotGrid.RowTotals" | "DashboardWebStringId.PivotGrid.ValuesPosition" | "DashboardWebStringId.PivotGrid.ValuesPositionColumns" | "DashboardWebStringId.PivotGrid.ValuesPositionRows" | "DashboardWebStringId.PivotGrid.RowTotalsPosition" | "DashboardWebStringId.PivotGrid.RowTotalsPositionBottom" | "DashboardWebStringId.PivotGrid.RowTotalsPositionTop" | "DashboardWebStringId.PivotGrid.ColumnTotalsPosition" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionFar" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionNear" | "DashboardWebStringId.PivotGrid.LayoutType" | "DashboardWebStringId.PivotGrid.LayoutTypeCompact" | "DashboardWebStringId.PivotGrid.LayoutTypeTabular" | "DashboardWebStringId.Options.Caption" | "DashboardWebStringId.InteractivityOptions.IsMasterFilter" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.None" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Single" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Multiple" | "DashboardWebStringId.InteractivityOptions.TargetDimensions" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Arguments" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Series" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Points" | "DashboardWebStringId.ColoringOptions" | "DashboardWebStringId.DataSources.Filter" | "DashboardWebStringId.Chart.Rotated" | "DashboardWebStringId.Chart.Panes" | "DashboardWebStringId.Chart.Legend" | "DashboardWebStringId.Chart.AxisX" | "DashboardWebStringId.Chart.AxisY" | "DashboardWebStringId.Chart.AxisYSecondary" | "DashboardWebStringId.Chart.PointLabelOptions" | "DashboardWebStringId.Chart.AxisXMeasure" | "DashboardWebStringId.Chart.AxisYMeasure" | "DashboardWebStringId.Chart.Weight" | "DashboardWebStringId.Chart.Content" | "DashboardWebStringId.Chart.ArgumentAndWeight" | "DashboardWebStringId.Chart.ArgumentAndValues" | "DashboardWebStringId.Chart.Reverse" | "DashboardWebStringId.Chart.Visible" | "DashboardWebStringId.Chart.Title" | "DashboardWebStringId.Chart.TitleText" | "DashboardWebStringId.Chart.EnableZooming" | "DashboardWebStringId.Chart.LimitVisiblePoints" | "DashboardWebStringId.Chart.VisiblePointsCount" | "DashboardWebStringId.Chart.AlwaysShowZeroLevel" | "DashboardWebStringId.Chart.GridLines" | "DashboardWebStringId.Chart.LogarithmicScale" | "DashboardWebStringId.Chart.LogarithmicScaleBase" | "DashboardWebStringId.Chart.LogarithmicScaleBase2" | "DashboardWebStringId.Chart.LogarithmicScaleBase5" | "DashboardWebStringId.Chart.LogarithmicScaleBase10" | "DashboardWebStringId.Chart.Position" | "DashboardWebStringId.Chart.IsInsideOfDiagram" | "DashboardWebStringId.Chart.PrimaryAxisY" | "DashboardWebStringId.Chart.SecondaryAxisY" | "DashboardWebStringId.Chart.Name" | "DashboardWebStringId.Chart.PlotOnSecondaryAxis" | "DashboardWebStringId.Chart.IgnoreEmptyPoints" | "DashboardWebStringId.Chart.ShowPointMarkers" | "DashboardWebStringId.Chart.Value" | "DashboardWebStringId.Chart.ShowZeroValues" | "DashboardWebStringId.Chart.OverlappingMode" | "DashboardWebStringId.Chart.Orientation" | "DashboardWebStringId.Chart.ShowPointLablels" | "DashboardWebStringId.Chart.TooltipContent" | "DashboardWebStringId.Chart.LabelContent" | "DashboardWebStringId.Card.SparklineOptions" | "DashboardWebStringId.Card.SparklineVisible" | "DashboardWebStringId.Chart.Position.TopLeftVertical" | "DashboardWebStringId.Chart.Position.TopLeftHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterHorizontal" | "DashboardWebStringId.Chart.Position.TopRightVertical" | "DashboardWebStringId.Chart.Position.TopRightHorizontal" | "DashboardWebStringId.Chart.Position.BottomLeftVertical" | "DashboardWebStringId.Chart.Position.BottomLeftHorizontal" | "DashboardWebStringId.Chart.Position.BottomCenterHorizontal" | "DashboardWebStringId.Chart.Position.BottomRightVertical" | "DashboardWebStringId.Chart.Position.BottomRightHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterVertical" | "DashboardWebStringId.Chart.Position.BottomCenterVertical" | "DashboardWebStringId.FilterItem.Type" | "DashboardWebStringId.FilterItem.Type.Standard" | "DashboardWebStringId.FilterItem.Type.Checked" | "DashboardWebStringId.FilterItem.Type.Radio" | "DashboardWebStringId.FilterItem.ShowAllValue" | "DashboardWebStringId.FilterItem.EnableSearch" | "DashboardWebStringId.Gauge.Min" | "DashboardWebStringId.Gauge.Max" | "DashboardWebStringId.Gauge.ScaleOptions" | "DashboardWebStringId.Gauge.Type" | "DashboardWebStringId.Gauge.Type.FullQuarterGauge" | "DashboardWebStringId.Gauge.Type.HalfCircular" | "DashboardWebStringId.Gauge.Type.LeftQuarterCircular" | "DashboardWebStringId.Gauge.Type.RightQuarterCircular" | "DashboardWebStringId.Gauge.Type.ThreeFourthCircular" | "DashboardWebStringId.Gauge.Type.LinearHorizontal" | "DashboardWebStringId.Gauge.Type.LinearVertical" | "DashboardWebStringId.Gauge.Captions" | "DashboardWebStringId.Gauge.Scale.Custom" | "DashboardWebStringId.Gauge.Scale.Auto" | "DashboardWebStringId.Grid.ColumnType" | "DashboardWebStringId.Grid.DisplayMode" | "DashboardWebStringId.Grid.DisplayMode.Value" | "DashboardWebStringId.Grid.DisplayMode.Bar" | "DashboardWebStringId.Grid.DisplayMode.Text" | "DashboardWebStringId.Grid.DisplayMode.Image" | "DashboardWebStringId.Grid.FixedWidth" | "DashboardWebStringId.Grid.WidthType" | "DashboardWebStringId.Grid.WidthType.Weight" | "DashboardWebStringId.Grid.WidthType.FitToContent" | "DashboardWebStringId.Grid.DeltaOptions" | "DashboardWebStringId.Grid.ShowStartEndValues" | "DashboardWebStringId.Grid.TotalType" | "DashboardWebStringId.Grid.Dimension" | "DashboardWebStringId.Grid.Measure" | "DashboardWebStringId.Grid.Delta" | "DashboardWebStringId.Grid.Sparkline" | "DashboardWebStringId.Grid.Hyperlink" | "DashboardWebStringId.Grid.Options" | "DashboardWebStringId.Map.ShapeFileLoaded" | "DashboardWebStringId.Map.AttributeFileLoaded" | "DashboardWebStringId.Map.ValueMap" | "DashboardWebStringId.Map.DeltaMap" | "DashboardWebStringId.Map.TooltipCaption" | "DashboardWebStringId.Map.TooltipActualValueCaption" | "DashboardWebStringId.Map.TooltipDeltaCaption" | "DashboardWebStringId.Map.CustomMapOptions" | "DashboardWebStringId.Map.CustomMapOptionsSource" | "DashboardWebStringId.Map.CustomMapOptionsUrl" | "DashboardWebStringId.Map.CustomMapOptionsFile" | "DashboardWebStringId.Map.CustomMapUrl" | "DashboardWebStringId.Map.CustomMapFile" | "DashboardWebStringId.Map.CustomAttributeFile" | "DashboardWebStringId.Map.AttributeDimension" | "DashboardWebStringId.Map.IncludeSummaryValueToShapeTitle" | "DashboardWebStringId.Map.AttributeName" | "DashboardWebStringId.Map.TooltipAttribute" | "DashboardWebStringId.Map.TooltipDimensions" | "DashboardWebStringId.Map.Area.Custom" | "DashboardWebStringId.Map.Area.WorldCountries" | "DashboardWebStringId.Map.Area.Europe" | "DashboardWebStringId.Map.Area.Asia" | "DashboardWebStringId.Map.Area.NorthAmerica" | "DashboardWebStringId.Map.Area.SouthAmerica" | "DashboardWebStringId.Map.Area.Africa" | "DashboardWebStringId.Map.Area.USA" | "DashboardWebStringId.Map.Area.Canada" | "DashboardWebStringId.Map.Viewport" | "DashboardWebStringId.Map.ShapeTitleAttribute" | "DashboardWebStringId.Map.UseBindingAttribute" | "DashboardWebStringId.Map.WeightedLegendType" | "DashboardWebStringId.Map.WeightedLegendType.Linear" | "DashboardWebStringId.Map.WeightedLegendType.Nested" | "DashboardWebStringId.Map.Orientation.Vertical" | "DashboardWebStringId.Map.Orientation.Horizontal" | "DashboardWebStringId.Map.Position.TopLeft" | "DashboardWebStringId.Map.Position.TopCenter" | "DashboardWebStringId.Map.Position.TopRight" | "DashboardWebStringId.Map.Position.BottomLeft" | "DashboardWebStringId.Map.Position.BottomCenter" | "DashboardWebStringId.Map.Position.BottomRight" | "DashboardWebStringId.Map.Viewport.TopLatitude" | "DashboardWebStringId.Map.Viewport.LeftLongitude" | "DashboardWebStringId.Map.Viewport.RightLongitude" | "DashboardWebStringId.Map.Viewport.BottomLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLongitude" | "DashboardWebStringId.Map.Viewport.CreateViewerPaddings" | "DashboardWebStringId.Map.ShowLegend" | "DashboardWebStringId.Pie.Type" | "DashboardWebStringId.Pie" | "DashboardWebStringId.Pie.Donut" | "DashboardWebStringId.Pie.LabelContentType.None" | "DashboardWebStringId.Pie.LabelContentType.Argument" | "DashboardWebStringId.Pie.LabelContentType.Percent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndPercent" | "DashboardWebStringId.Pie.LabelContentType.Value" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndValue" | "DashboardWebStringId.Pie.LabelContentType.ValueAndPercent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentValueAndPercent" | "DashboardWebStringId.Image.BindingMode" | "DashboardWebStringId.Image.BindingMode.BinaryArray" | "DashboardWebStringId.Image.BindingMode.Uri" | "DashboardWebStringId.RangeFilter.UriPattern" | "DashboardWebStringId.Image.SizeMode.Clip" | "DashboardWebStringId.Image.SizeMode.Stretch" | "DashboardWebStringId.Image.SizeMode.Zoom" | "DashboardWebStringId.Image.SizeMode.Squeeze" | "DashboardWebStringId.Image.HorizontalAlignment" | "DashboardWebStringId.Image.VerticalAlignment" | "DashboardWebStringId.Image.Alignment.Left" | "DashboardWebStringId.Image.Alignment.Center" | "DashboardWebStringId.Image.Alignment.Right" | "DashboardWebStringId.Image.Alignment.Top" | "DashboardWebStringId.Image.Alignment.Bottom" | "DashboardWebStringId.SeriesItem.SeriesDimensions" | "DashboardWebStringId.TextBox.Text" | "DashboardWebStringId.Chart.Orientation.Default" | "DashboardWebStringId.Chart.Orientation.RotateRight" | "DashboardWebStringId.Chart.Orientation.RotateLeft" | "DashboardWebStringId.Chart.OverlappingMode.Hide" | "DashboardWebStringId.Chart.OverlappingMode.None" | "DashboardWebStringId.Chart.Position.Outside" | "DashboardWebStringId.Chart.Position.Inside" | "DashboardWebStringId.Chart.SeriesType.Weighted" | "DashboardWebStringId.Coloring.MeasuresColoringMode" | "DashboardWebStringId.Coloring.Global" | "DashboardWebStringId.Coloring.Local" | "DashboardWebStringId.Delta.ValueType" | "DashboardWebStringId.Delta.ResultIndication" | "DashboardWebStringId.Delta.ThresholdType" | "DashboardWebStringId.Delta.ThresholdValue" | "DashboardWebStringId.Sparkline.ViewType" | "DashboardWebStringId.Sparkline.HighlightMinMaxPoints" | "DashboardWebStringId.Sparkline.HighlightStartEndPoints" | "DashboardWebStringId.Title.Aligment.Left" | "DashboardWebStringId.Title.Aligment.Center" | "DashboardWebStringId.Parameters.LookUpSettingsType.NoLookUp" | "DashboardWebStringId.Parameters.LookUpSettingsType.StaticList" | "DashboardWebStringId.Parameters.LookUpSettingsType.DynamicList" | "DashboardWebStringId.Parameters.LookUpSettingsType" | "DashboardWebStringId.Parameters.DefaultValue" | "DashboardWebStringId.DataItem" | "DashboardWebStringId.DataItem.Precision" | "DashboardWebStringId.DataItem.IncludeGroupSeparator" | "DashboardWebStringId.DataItem.ShowValues" | "DashboardWebStringId.DataItem.ShowTotals" | "DashboardWebStringId.DataItem.ShowGrandTotals" | "DashboardWebStringId.Dialog.ConfirmSaving" | "DashboardWebStringId.Dimension.GroupInterval" | "DashboardWebStringId.Dimension.SortMode" | "DashboardWebStringId.Dialog.ArgumentMode" | "DashboardWebStringId.Calculations" | "DashboardWebStringId.Calculations.Expression" | "DashboardWebStringId.Calculations.DifferenceCalculation" | "DashboardWebStringId.Calculations.Moving" | "DashboardWebStringId.Calculations.RunningTotal" | "DashboardWebStringId.Calculations.PercentOfTotal" | "DashboardWebStringId.Calculations.Rank" | "DashboardWebStringId.Calculations.DefinitionMode" | "DashboardWebStringId.Calculations.WindowDefinition" | "DashboardWebStringId.Calculations.WindowDefinitionModeSpecific" | "DashboardWebStringId.Calculations.WindowDefinitionModePredefined" | "DashboardWebStringId.Calculations.DifferenceType" | "DashboardWebStringId.TreemapLayoutAlgorithm" | "DashboardWebStringId.TilesLabelContentType" | "DashboardWebStringId.TilesTooltipContentType" | "DashboardWebStringId.GroupsLabelContentType" | "DashboardWebStringId.GroupsTooltipContentType" | "DashboardWebStringId.ShowOthersValue" | "DashboardWebStringId.TopNEnabled" | "DashboardWebStringId.Parameters.StaticListLookUpSettings" | "DashboardWebStringId.Parameters.DynamicListLookUpSettings" | "DashboardWebStringId.ConvertTo" | "DashboardWebStringId.Duplicate" | "DashboardWebStringId.DataSourceWizard" | "DashboardWebStringId.RangeFilter.CustomPeriods" | "DashboardWebStringId.RangeFilter.StartMode" | "DashboardWebStringId.RangeFilter.EndMode" | "DashboardWebStringId.RangeFilter.StartIntervalAndOffset" | "DashboardWebStringId.RangeFilter.EndIntervalAndOffset" | "DashboardWebStringId.RangeFilter.StartDate" | "DashboardWebStringId.RangeFilter.EndDate" | "DashboardWebStringId.RangeFilter.None" | "DashboardWebStringId.RangeFilter.Fixed" | "DashboardWebStringId.RangeFilter.Flow" | "DashboardWebStringId.Tabs.Binding" | "DashboardWebStringId.Tabs.DataShaping" | "DashboardWebStringId.Tabs.Format" | "DashboardWebStringId.Calculations.Types.Moving" | "DashboardWebStringId.Parameters.SortByMember" | "DashboardWebStringId.Parameters.LookUpSettingsTypeCaption" | "DashboardWebStringId.Dashboard.Items" | "DashboardWebStringId.Dashboard.Groups" | "DashboardWebStringId.Dashboard.LayoutItems" | "DashboardWebStringId.Dashboard.ComponentName" | "DashboardWebStringId.ButtonConfirm" | "DashboardWebStringId.Colorization.GroupInterval" | "DashboardWebStringId.ButtonOn" | "DashboardWebStringId.ButtonOff" | "DashboardWebStringId.ButtonYes" | "DashboardWebStringId.ButtonNo" | "DashboardWebStringId.ButtonDiscrete" | "DashboardWebStringId.ButtonContinuous" | "DashboardWebStringId.ButtonVisible" | "DashboardWebStringId.ButtonHidden" | "DashboardWebStringId.Calculations.PreviousValuesCount" | "DashboardWebStringId.Calculations.NextValuesCount" | "DashboardWebStringId.Calculations.RankType" | "DashboardWebStringId.Calculations.RankOrder" | "DashboardWebStringId.TileOptions" | "DashboardWebStringId.MapLockNavigationLocked" | "DashboardWebStringId.MapLockNavigationUnlocked" | "DashboardWebStringId.ConditionalFormatting.BarOptions" | "DashboardWebStringId.ConditionalFormatting.CalculatedBy" | "DashboardWebStringId.ConditionalFormatting.IconType" | "DashboardWebStringId.ConditionalFormatting.PredefinedColor" | "DashboardWebStringId.ConditionalFormatting.AppearanceType" | "DashboardWebStringId.ConditionalFormatting.FontStyle" | "DashboardWebStringId.ConditionalFormatting.FontFamily" | "DashboardWebStringId.ConditionalFormatting.FontRegular" | "DashboardWebStringId.ConditionalFormatting.IconType.None" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowSideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGraySideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDash" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedTriangleDown" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenTriangleUp" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingHalfGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1QuarterGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1Bar" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1FilledBox" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTriangle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedDiamond" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedFlag" | "DashboardWebStringId.ConditionalFormatting.IntersectionColumnDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionRowDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionLevelMode" | "DashboardWebStringId.ConditionalFormatting.GradientRangeBar" | "DashboardWebStringId.ConditionalFormatting.RangeGradient" | "DashboardWebStringId.ConditionalFormatting.SegmentNumber" | "DashboardWebStringId.ConditionalFormatting.ValueComparison" | "DashboardWebStringId.ConditionalFormatting.Ranges" | "DashboardWebStringId.ConditionalFormatting.AverageType" | "DashboardWebStringId.ConditionalFormatting.Above" | "DashboardWebStringId.ConditionalFormatting.AboveOrEqual" | "DashboardWebStringId.ConditionalFormatting.Below" | "DashboardWebStringId.ConditionalFormatting.BelowOrEqual" | "DashboardWebStringId.ConditionalFormatting.StyleSettingsType" | "DashboardWebStringId.ConditionalFormatting.Positive" | "DashboardWebStringId.ConditionalFormatting.Negative" | "DashboardWebStringId.ConditionalFormatting.MinimumType" | "DashboardWebStringId.ConditionalFormatting.MaximumType" | "DashboardWebStringId.ConditionalFormatting.DateType" | "DashboardWebStringId.ConditionalFormatting.DateType.None" | "DashboardWebStringId.ConditionalFormatting.DateType.SpecificDate" | "DashboardWebStringId.ConditionalFormatting.DateType.BeyondThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.NextWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.Tomorrow" | "DashboardWebStringId.ConditionalFormatting.DateType.Today" | "DashboardWebStringId.ConditionalFormatting.DateType.Yesterday" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.LastWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.PriorThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.Empty" | "DashboardWebStringId.ConditionalFormatting.DateType.User" | "DashboardWebStringId.ConditionalFormatting.DateType.Beyond" | "DashboardWebStringId.ConditionalFormatting.DateType.ThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.ThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAfter1" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAfter2" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo1" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo2" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo3" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo4" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo5" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo6" | "DashboardWebStringId.ConditionalFormatting.DateType.Earlier" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeDataItem" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeCard" | "DashboardWebStringId.Colorization.NoSelectedSchema" | "DashboardWebStringId.Colorization.ColorSchemes" | "DashboardWebStringId.LayoutHasBeenChangedDialogMessage" | "DashboardWebStringId.SaveConfirmationDialogMessage" | "DashboardWebStringId.SaveChangesDialogMessage" | "DashboardWebStringId.Dialog.ChangeDataMemberMessage" | "DashboardWebStringId.Dialog.RemovedDataItemsMessage" | "DashboardWebStringId.Dialog.ConfirmChanges" | "DashboardWebStringId.Dialog.Save" | "DashboardWebStringId.Dialog.DoNotSave" | "DashboardWebStringId.Dialog.ButtonYes" | "DashboardWebStringId.Dialog.ButtonDontChange" | "DashboardWebStringId.Colorization.ColorSchemeType" | "DashboardWebStringId.Colorization.MeasureNames" | "DashboardWebStringId.Colorization.AddColor" | "DashboardWebStringId.Colorization.ValidationSelectMeasure" | "DashboardWebStringId.ColoringModeAuto" | "DashboardWebStringId.ColoringModeOff" | "DashboardWebStringId.ColoringModeOn" | "DashboardWebStringId.ColorScheme.Empty" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButton" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip" | "DashboardWebStringId.ConditionalFormatting.Miscellaneous" | "DashboardWebStringId.Dashboards" | "DashboardWebStringId.EditInDesigner" | "DashboardWebStringId.NoDashboards" | "DashboardWebStringId.AddNewDashboard" | "DashboardWebStringId.NewDashboard" | "DashboardWebStringId.Binding.Searching" | "DashboardWebStringId.Binding.EmptySearchResult" | "DashboardWebStringId.Errors.AttemptToLoadData" | "DashboardWebStringId.ConditionType" | "DashboardWebStringId.ConditionalFormatting.UnsupportedDataType" | "DashboardWebStringId.FormatRule" | "DashboardWebStringId.Notification.DashboardSaving" | "DashboardWebStringId.Notification.DashboardSaved" | "DashboardWebStringId.Notification.DashboardCanNotBeSaved" | "DashboardWebStringId.Notification.DashboardSavingIsNotAvailable" | "DashboardWebStringId.Notification.AttemptToLoadDashboards" | "DashboardWebStringId.Notification.DashboardLoading" | "DashboardWebStringId.Notification.AttemptToLoadDashboard" | "DashboardWebStringId.Notification.AttemptToConnectionStrings" | "DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode" | "DashboardWebStringId.Notification.AttemptToLoadParameterValues" | "DashboardWebStringId.Notification.AttemptToGetUnderlyingData" | "DashboardWebStringId.Notification.AttemptToConvertItemToType" | "DashboardWebStringId.Notification.AttemptToLoadDimensionUniqueValues" | "DashboardWebStringId.Notification.AttemptToLoadFieldListForDataSource" | "DashboardWebStringId.Notification.AttemptToGetColorScheme" | "DashboardWebStringId.Notification.NewDashboardCannotBeCreated" | "DashboardWebStringId.Notification.ErrorHasOccuredOn" | "DashboardWebStringId.Notification.UnsupportedDataSourceType" | "DashboardWebStringId.LimitVisibleData.DisplayAllDataTooltip" | "DashboardWebStringId.LimitVisibleData.IncreasePerformanceTooltip" | "DashboardWebStringId.ConditionalFormatting.Condition" | "DashboardWebStringId.CardLayout.MinWidth" | "DashboardWebStringId.CardLayout.MaxWidth" | "DashboardWebStringId.CardLayout.Editor.CardLayout" | "DashboardWebStringId.CardLayout.Editor.FormatOptions" | "DashboardWebStringId.CardLayout.LayoutOptions" | "DashboardWebStringId.CardLayout.ResetTemplate" | "DashboardWebStringId.CardLayout.ApplyToAllCards" | "DashboardWebStringId.Binding.ValuesPattern" | "DashboardWebStringId.Parameters.ParameterNameShouldBeUnique" | "DashboardWebStringId.Title.ImageEmbedded" | "DashboardWebStringId.Title.ImageLinked" | "DashboardWebStringId.Title.ImageNone" | "DashboardWebStringId.RangeFilter.SetDefaultCustomPeriod" | "DashboardWebStringId.RangeFilter.ClearDefaultCustomPeriod" | "DashboardWebStringId.MobileLayout.Back" | "DashboardWebStringId.MobileLayout.SwitchToViewer" | "DashboardWebStringId.Search" | "DashboardStringId.DefaultNameTabPage" | "DashboardStringId.DefaultNameChartPane" | "DashboardStringId.NewCalculatedFieldNamePrefix" | "DashboardStringId.NewParameterNamePrefix" | "AnalyticsCoreStringId.Parameter_Type_String" | "AnalyticsCoreStringId.Parameter_Type_DateTime" | "AnalyticsCoreStringId.Parameter_Type_Int16" | "AnalyticsCoreStringId.Parameter_Type_Int32" | "AnalyticsCoreStringId.Parameter_Type_Int64" | "AnalyticsCoreStringId.Parameter_Type_Float" | "AnalyticsCoreStringId.Parameter_Type_Double" | "AnalyticsCoreStringId.Parameter_Type_Decimal" | "AnalyticsCoreStringId.Parameter_Type_Boolean" | "AnalyticsCoreStringId.Parameter_Type_Guid" | "AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption" | "DataAccessUIStringId.FiltersView" | "DashboardStringId.SeriesTypeGroupArea" | "DashboardStringId.SeriesTypeGroupBar" | "DashboardStringId.SeriesTypeGroupBubble" | "DashboardStringId.SeriesTypeGroupFinancial" | "DashboardStringId.SeriesTypeGroupPointLine" | "DashboardStringId.SeriesTypeGroupRange" | "DashboardStringId.FunctionCategoryWindow" | "DashboardStringId.FunctionCategoryAggregate" | "DashboardStringId.FunctionCategoryAdvanced" | "DashboardStringId.FunctionDescriptionWindowAvg" | "DashboardStringId.FunctionDescriptionRunningMin" | "DashboardStringId.FunctionDescriptionTotal" | "DashboardStringId.FunctionDescriptionRankCompetition" | "DashboardStringId.FunctionDescriptionLookup" | "DashboardStringId.FunctionDescriptionRunningCount" | "DashboardStringId.FunctionDescriptionWindowMax" | "DashboardStringId.FunctionDescriptionVarp" | "DashboardStringId.FunctionDescriptionRunningAvg" | "DashboardStringId.FunctionDescriptionFirst" | "DashboardStringId.FunctionDescriptionWindowMin" | "DashboardStringId.FunctionDescriptionWindowStdDev" | "DashboardStringId.FunctionDescriptionLast" | "DashboardStringId.FunctionDescriptionWindowCount" | "DashboardStringId.FunctionDescriptionCountDistinct" | "DashboardStringId.FunctionDescriptionIndex" | "DashboardStringId.FunctionDescriptionWindowStdDevp" | "DashboardStringId.FunctionDescriptionWindowMode" | "DashboardStringId.FunctionDescriptionRunningMax" | "DashboardStringId.FunctionDescriptionRankPercentile" | "DashboardStringId.FunctionDescriptionRankDense" | "DashboardStringId.FunctionDescriptionWindowSum" | "DashboardStringId.FunctionDescriptionWindowCountDistinct" | "DashboardStringId.FunctionDescriptionStdDevp" | "DashboardStringId.FunctionDescriptionSize" | "DashboardStringId.FunctionDescriptionMedian" | "DashboardStringId.FunctionDescriptionRankModified" | "DashboardStringId.FunctionDescriptionWindowMedian" | "DashboardStringId.FunctionDescriptionRunningSum" | "DashboardStringId.FunctionDescriptionWindowVarp" | "DashboardStringId.FunctionDescriptionWindowVar" | "DashboardStringId.FunctionDescriptionStdDev" | "DashboardStringId.FunctionDescriptionRankUnique" | "DashboardStringId.FunctionDescriptionVar" | "DashboardStringId.FunctionDescriptionAggr" | "DashboardStringId.FunctionDescriptionAggrJoinRule" | "DashboardStringId.FunctionDescriptionWindowDefinition" | "DashboardStringId.FunctionDescriptionWindowDefinitionPartitionBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderAsc" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderDesc" | "DashboardStringId.AggregateExFunctionDescriptionCountNotNull" | "DashboardStringId.AggregateExFunctionDescriptionMode" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHour" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinute" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinuteSecond" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateMonthYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear2" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateQuarterYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetQuarter" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfMonth" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime3" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime4" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime5" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime6" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToBoolean" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToDateTime" | "DashboardStringId.SparklineIndicationModeLine" | "DashboardStringId.SparklineIndicationModeArea" | "DashboardStringId.SparklineIndicationModeBar" | "DashboardStringId.SparklineIndicationModeWinLoss" | "DashboardStringId.DefaultNameDateFilterItem" | "DashboardWebStringId.DateFilter.FilterType" | "DashboardWebStringId.DateFilter.FilterTypeExact" | "DashboardWebStringId.DateFilter.FilterTypeAfter" | "DashboardWebStringId.DateFilter.FilterTypeBefore" | "DashboardWebStringId.DateFilter.FilterTypeBetween" | "DashboardWebStringId.DateFilter.ArrangementMode" | "DashboardWebStringId.DateFilter.ArrangementModeAutoHeight" | "DashboardWebStringId.DateFilter.ArrangementModeHorizontal" | "DashboardWebStringId.DateFilter.ArrangementModeVertical" | "DashboardWebStringId.DateFilter.DatePickerLocation" | "DashboardWebStringId.DateFilter.DatePickerLocationFar" | "DashboardWebStringId.DateFilter.DatePickerLocationNear" | "DashboardWebStringId.DateFilter.DatePickerLocationHidden" | "DashboardStringId.DateFilterDisplayTextPattern" | "DashboardStringId.DateFilterDatePickerButtonDefaultText" | "DashboardStringId.FromDatePeriodCaption" | "DashboardStringId.ToDatePeriodCaption" | "DashboardStringId.FromToDatePeriodCaption" | "DashboardStringId.UniqueNameValidationMessage" | "DashboardStringId.GridTotalAutoTemplate" | "DashboardStringId.GridTotalValueTemplate" | "DashboardStringId.GridTotalTemplate" | "DashboardStringId.GridTotalTypeCount" | "DashboardStringId.GridTotalTypeMin" | "DashboardStringId.GridTotalTypeMax" | "DashboardStringId.GridTotalTypeAvg" | "DashboardStringId.GridTotalTypeSum" | "DashboardStringId.ActionShowDataInspector" | "DashboardStringId.InspectedData" | "DashboardStringId.InspectedTypeFormatString" | "DashboardStringId.AggregatedDataType" | "DashboardStringId.RawDataType" | "DashboardStringId.OLAPUnavailableRawData" | "DashboardStringId.SparklineValuesSeparator" | "DashboardStringId.SparklineArgumentValueSeparator" | "DashboardWebStringId.Grid.FilterClause.ApplyFilter" | "DashboardWebStringId.Grid.FilterClause.ResetOperation" | "DashboardWebStringId.Grid.FilterClause.Contains" | "DashboardWebStringId.Grid.FilterClause.DoesNotContain" | "DashboardWebStringId.Grid.FilterClause.StartsWith" | "DashboardWebStringId.Grid.FilterClause.EndsWith" | "DashboardWebStringId.Grid.FilterClause.Equals" | "DashboardWebStringId.Grid.FilterClause.DoesNotEqual" | "DashboardWebStringId.Grid.FilterClause.Less" | "DashboardWebStringId.Grid.FilterClause.Greater" | "DashboardWebStringId.Grid.FilterClause.LessOrEqual" | "DashboardWebStringId.Grid.FilterClause.GreaterOrEqual" | "DashboardWebStringId.Grid.FilterClause.Between" | "DashboardWebStringId.Grid.FilterClause.BetweenStart" | "DashboardWebStringId.Grid.FilterClause.BetweenEnd" | "DashboardWebStringId.AccordionTab.Content" | "DashboardWebStringId.TextBoxItemEditor.NoFields" | "DashboardWebStringId.TextBoxItemEditor.InsertField" | "DashboardWebStringId.TextBoxItemEditor.EditTextButton" | "DashboardWebStringId.TextBoxItemEditor.DialogCaption" | "DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose" | "DashboardWebStringId.TextBoxItemEditor.DialogClose" | "DashboardStringId.StartDate" | "DashboardStringId.EndDate" | "DashboardWebStringId.AccordionTab.MeasureFilter" | "DashboardStringId.FunctionDescriptionAggregateFilter" | "DashboardWebStringId.TabPages" | "DashboardWebStringId.More" | "DashboardStringId.MeasureFilterCaptionFormatString";
	    FirstLevel: "DashboardStringId.ActionClearMasterFilter" | "DashboardStringId.ActionClearSelection" | "DashboardStringId.ActionOtherValues" | "DashboardStringId.ActionDrillUp" | "DashboardStringId.ActionExportTo" | "DashboardStringId.ActionExportToPdf" | "DashboardStringId.ActionExportToImage" | "DashboardStringId.ActionExportToExcel" | "DashboardStringId.RangeFilterCustomDateTimePeriod" | "DashboardStringId.ActionExportTemplate" | "DashboardStringId.ActionAllowMultiselection" | "DashboardStringId.DashboardNullValue" | "DashboardStringId.TopNOthersValue" | "DashboardStringId.DashboardErrorValue" | "DashboardStringId.DateTimeQuarterFormat" | "DashboardStringId.MessageLoading" | "DashboardStringId.ParametersFormCaption" | "DashboardStringId.ParametersSelectorText" | "DashboardStringId.ParametersFormAllowNullColumnCaption" | "DashboardStringId.ParametersFormValueColumnCaption" | "DashboardStringId.ParametersFormNameColumnCaption" | "DashboardStringId.ButtonOK" | "DashboardStringId.ButtonCancel" | "DashboardStringId.SelectDate" | "DashboardStringId.ButtonReset" | "DashboardStringId.ButtonSubmit" | "DashboardStringId.ButtonApply" | "DashboardStringId.ButtonExport" | "DashboardStringId.GridResetColumnWidths" | "DashboardStringId.GridSortAscending" | "DashboardStringId.GridSortDescending" | "DashboardStringId.GridClearSorting" | "DashboardStringId.PivotGridTotal" | "DashboardStringId.PivotGridGrandTotal" | "DashboardStringId.ChartTotalValue" | "DashboardStringId.PageLayout" | "DashboardStringId.PageLayoutAuto" | "DashboardStringId.PageLayoutPortrait" | "DashboardStringId.PageLayoutLandscape" | "DashboardStringId.PaperKind" | "DashboardStringId.PaperKindLetter" | "DashboardStringId.PaperKindLegal" | "DashboardStringId.PaperKindExecutive" | "DashboardStringId.PaperKindA5" | "DashboardStringId.PaperKindA4" | "DashboardStringId.PaperKindA3" | "DashboardStringId.ScaleMode" | "DashboardStringId.ScaleModeNone" | "DashboardStringId.ScaleModeUseScaleFactor" | "DashboardStringId.ScaleModeAutoFitToPagesWidth" | "DashboardStringId.AutoFitPageCount" | "DashboardStringId.ScaleFactor" | "DashboardStringId.PrintHeadersOnEveryPage" | "DashboardStringId.FitToPageWidth" | "DashboardStringId.SizeMode" | "DashboardStringId.SizeModeNone" | "DashboardStringId.SizeModeStretch" | "DashboardStringId.SizeModeZoom" | "DashboardStringId.AutoArrangeContent" | "DashboardStringId.ImageFormat" | "DashboardStringId.ExcelFormat" | "DashboardStringId.CsvValueSeparator" | "DashboardStringId.ExportFilters" | "DashboardStringId.ExportParameters" | "DashboardStringId.DashboardStatePosition" | "DashboardStringId.Resolution" | "DashboardStringId.ShowTitle" | "DashboardStringId.Title" | "DashboardStringId.FileName" | "DashboardStringId.FilterStatePresentationAfter" | "DashboardStringId.FilterStatePresentationAfterAndSplitPage" | "DashboardStringId.FilterStatePresentationSplitSheet" | "DashboardStringId.MessageCustomItemIsNotSupported" | "DashboardStringId.MessageGridHasNoData" | "DashboardStringId.MessagePivotHasNoData" | "DashboardStringId.SparklineTooltipStartValue" | "DashboardStringId.SparklineTooltipEndValue" | "DashboardStringId.SparklineTooltipMinValue" | "DashboardStringId.SparklineTooltipMaxValue" | "DashboardStringId.OpenCaption" | "DashboardStringId.HighCaption" | "DashboardStringId.LowCaption" | "DashboardStringId.CloseCaption" | "DashboardStringId.InitialExtent" | "DashboardStringId.FilterElementShowAllItem" | "DashboardStringId.NumericFormatUnitSymbolThousands" | "DashboardStringId.NumericFormatUnitSymbolMillions" | "DashboardStringId.NumericFormatUnitSymbolBillions" | "DashboardStringId.ActionSelectDateTimePeriod" | "DashboardStringId.RangeFilterSelectRange" | "DashboardStringId.FilterElementCheckedComboBoxNoDataCaption" | "DashboardStringId.FilterElementRadioComboBoxNoDataCaption" | "DashboardStringId.FilterElementNoDataToDisplay" | "DashboardStringId.RangeFilterSelectRangeFromCaption" | "DashboardStringId.RangeFilterSelectRangeToCaption" | "DashboardWebStringId.DashboardParameters" | "DashboardStringId.DataSourceDataMember" | "DashboardStringId.DescriptionMeasures" | "DashboardWebStringId.TextBoxFormatText" | "DashboardStringId.NumericFormatUnitCaption" | "DashboardWebStringId.SummaryType" | "DashboardStringId.CalculationTypeExpression" | "DevExpressWebStringId.CalculatedFieldDataType" | "DashboardStringId.ValueCaption" | "DashboardStringId.Value1Caption" | "DashboardStringId.Value2Caption" | "DashboardStringId.CommandFormatRuleTopBottom" | "DashboardStringId.CommandFormatRuleAboveBelowAverage" | "DashboardStringId.CommandFormatRuleBar" | "DashboardStringId.CommandFormatRuleColorRangeBar" | "DashboardStringId.CommandFormatRuleGradientRangeBar" | "DashboardStringId.FormatRuleStyleAppearance" | "DashboardStringId.FormatRuleStyleIcons" | "DashboardStringId.FormatRuleNegativeStyle" | "DashboardStringId.CommandFormatRuleExpression" | "DashboardWebStringId.TopNMode" | "DashboardStringId.CommandFormatRuleRangeSet" | "DashboardStringId.CommandFormatRuleValue" | "DashboardStringId.CommandFormatRuleDateOccurring" | "DashboardWebStringId.ConditionalFormatting.Appearance.BackColor" | "DashboardWebStringId.ConditionalFormatting.Appearance.ForeColor" | "DashboardStringId.DescriptionBoundImageAttribute" | "DashboardWebStringId.ShowCaptionText" | "DashboardWebStringId.DisplayItemAsPage" | "DashboardStringId.DefaultNameItemGroup" | "DashboardStringId.DefaultNameTabContainerItem" | "DashboardStringId.DefaultDataSourceName" | "DashboardWebStringId.CrossDataSourceFiltering" | "DashboardStringId.RangeFilterCalculationAlongSeries" | "DashboardStringId.RangeFilterCalculationAlongArgument" | "DashboardStringId.DescriptionItemSeries" | "DashboardStringId.DescriptionSeries" | "DashboardWebStringId.Chart.SeriesType" | "DashboardStringId.DescriptionDimensions" | "DashboardWebStringId.TreeView.AutoExpand" | "DashboardWebStringId.ConditionalFormatting.ConditionMinimum" | "DashboardWebStringId.ConditionalFormatting.ConditionMaximum" | "DashboardStringId.DescriptionItemDimension" | "DashboardStringId.DescriptionItemMeasure" | "DashboardWebStringId.Grid.MergeCells" | "DashboardWebStringId.Grid.ColumnWidthMode" | "DashboardWebStringId.Grid.BandedRows" | "DashboardWebStringId.Grid.VerticalLines" | "DashboardWebStringId.Grid.HorizontalLines" | "DashboardWebStringId.Grid.ColumnHeaders" | "DashboardWebStringId.Grid.WordWrap" | "DashboardStringId.ActualValueCaption" | "DashboardStringId.TargetValueCaption" | "DashboardStringId.UriPatternCaption" | "DashboardStringId.UriCaption" | "DashboardStringId.DisplayValueCaption" | "DashboardStringId.WeightCaption" | "DashboardStringId.DescriptionItemColor" | "DashboardStringId.Latitude" | "DashboardStringId.Longitude" | "DashboardWebStringId.GeoPointMapClusterization" | "DashboardWebStringId.MapLockNavigation" | "DashboardWebStringId.WeightedLegendGalleryGroup" | "DashboardStringId.DescriptionItemArgument" | "DashboardWebStringId.PieMapIsWeighted" | "DashboardWebStringId.InteractivityOptions.IgnoreMasterFilters" | "DashboardWebStringId.InteractivityOptions.DrillDown" | "DashboardWebStringId.Pie.ShowCaptions" | "DashboardStringId.DescriptionColumns" | "DashboardStringId.DescriptionRows" | "DashboardStringId.DescriptionValues" | "DashboardStringId.DescriptionArguments" | "DashboardStringId.TextGroupIntervalAlphabetical" | "DashboardStringId.ActionMaximizeDashboardItem" | "DashboardStringId.ActionRestoreDashboardItem" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataSource" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.ValueMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DisplayMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.SortOrder" | "DevExpress.DashboardCommon.DashboardParameter.Visible" | "DevExpress.DashboardCommon.DashboardParameter.Description" | "DevExpress.DashboardCommon.DashboardParameter.AllowMultiselect" | "DevExpress.DashboardCommon.DashboardParameter.AllowNull" | "DevExpress.DashboardCommon.DashboardParameter.SelectAllValues" | "DevExpress.DashboardCommon.StaticListLookUpSettings.Values" | "DevExpress.DashboardCommon.DimensionSortOrder.Ascending" | "DevExpress.DashboardCommon.DimensionSortOrder.Descending" | "DevExpress.DashboardCommon.DimensionSortOrder.None" | "DashboardWebStringId.AccordionTab.ScatterChartPointLabelOptions" | "DashboardWebStringId.AccordionTab.ChoroplethMapShapeLabelsAttribute" | "DashboardStringId.CommandFormatRuleTopN" | "DashboardWebStringId.Type" | "DashboardWebStringId.Grid.ColumnWidth" | "DashboardWebStringId.AccordionTab.ShowTotals" | "DashboardWebStringId.AccordionTab.Layout" | "DashboardWebStringId.AccordionTab.PivotInitialState" | "DashboardWebStringId.AccordionTab.ImageOptions" | "DashboardWebStringId.AccordionTab.Labels" | "DashboardWebStringId.AccordionTab.MapLegend" | "DashboardWebStringId.AccordionTab.WeightedLegend" | "DashboardWebStringId.AccordionTab.Common" | "DashboardWebStringId.AccordionTab.ChartLegend" | "DashboardWebStringId.Grid.AutoFitToContentsColumnWidthMode" | "DashboardWebStringId.Grid.AutoFitToGridColumnWidthMode" | "DashboardWebStringId.Grid.ManualGridColumnWidthMode" | "DashboardStringId.DateTimeIntervalYear" | "DashboardStringId.DateTimeIntervalQuarter" | "DashboardStringId.DateTimeIntervalMonth" | "DashboardStringId.DateTimeIntervalWeek" | "DashboardStringId.DateTimeIntervalDay" | "DashboardStringId.DateTimeIntervalHour" | "DashboardStringId.DateTimeIntervalMinute" | "DashboardStringId.DateTimeIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalYear" | "DashboardStringId.DateTimeGroupIntervalQuarter" | "DashboardStringId.DateTimeGroupIntervalMonth" | "DashboardStringId.DateTimeGroupIntervalDay" | "DashboardStringId.DateTimeGroupIntervalHour" | "DashboardStringId.DateTimeGroupIntervalMinute" | "DashboardStringId.DateTimeGroupIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalDayOfYear" | "DashboardStringId.DateTimeGroupIntervalDayOfWeek" | "DashboardStringId.DateTimeGroupIntervalWeekOfYear" | "DashboardStringId.DateTimeGroupIntervalWeekOfMonth" | "DashboardStringId.DateTimeGroupIntervalMonthYear" | "DashboardStringId.DateTimeGroupIntervalQuarterYear" | "DashboardStringId.DateTimeGroupIntervalWeekYear" | "DashboardStringId.DateTimeGroupIntervalDayMonthYear" | "DashboardStringId.DateTimeGroupIntervalDateHour" | "DashboardStringId.DateTimeGroupIntervalDateHourMinute" | "DashboardStringId.DateTimeGroupIntervalDateHourMinuteSecond" | "DashboardStringId.DateTimeGroupIntervalExactDate" | "DashboardStringId.GroupIntervalNone" | "DashboardWebStringId.Treemap.StripedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SquarifiedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SliceAndDiceLayoutAlgorithm" | "DashboardWebStringId.Treemap.TileLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.TileLabelsNone" | "DashboardWebStringId.Treemap.TileLabelsValue" | "DashboardWebStringId.Treemap.TileLabelsArgument" | "DashboardWebStringId.Treemap.TileTooltipsArgumentAndValue" | "DashboardWebStringId.Treemap.TileTooltipsArgument" | "DashboardWebStringId.Treemap.TileTooltipsValue" | "DashboardWebStringId.Treemap.TileTooltipsNone" | "DashboardWebStringId.Treemap.TopLeftToBottomRightLayoutDirection" | "DashboardWebStringId.Treemap.TopRightToBottomLeftLayoutDirection" | "DashboardWebStringId.Treemap.BottomLeftToTopRightLayoutDirection" | "DashboardWebStringId.Treemap.BottomRightToTopLeftLayoutDirection" | "DashboardWebStringId.Treemap.LayoutDirection" | "DashboardWebStringId.Treemap.GroupLabelsNone" | "DashboardWebStringId.Treemap.GroupLabelsArgument" | "DashboardWebStringId.Treemap.GroupLabelsValue" | "DashboardWebStringId.Treemap.GroupLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.GroupTooltipsNone" | "DashboardWebStringId.Treemap.GroupTooltipsArgument" | "DashboardWebStringId.Treemap.GroupTooltipsValue" | "DashboardWebStringId.Treemap.GroupTooltipsArgumentAndValue" | "DashboardStringId.RankOrderAscending" | "DashboardStringId.RankOrderDescending" | "DashboardStringId.DateTimeFormatYearFormatDefaultCaption" | "DashboardStringId.DateTimeFormatYearFormatFullCaption" | "DashboardStringId.DateTimeFormatYearFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatQuarterFormatDefaultCaption" | "DashboardStringId.DateTimeFormatQuarterFormatNumericCaption" | "DashboardStringId.DateTimeFormatQuarterFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatDefaultCaption" | "DashboardStringId.DateTimeFormatMonthFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatMonthFormatNumericCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatFullCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatNumericCaption" | "DashboardStringId.DateTimeFormatDateFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateFormatLongCaption" | "DashboardStringId.DateTimeFormatDateFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatLongCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption" | "DashboardStringId.ExactDateFormatYear" | "DashboardStringId.ExactDateFormatQuarter" | "DashboardStringId.ExactDateFormatMonth" | "DashboardStringId.ExactDateFormatDay" | "DashboardStringId.ExactDateFormatHour" | "DashboardStringId.ExactDateFormatMinute" | "DashboardStringId.ExactDateFormatSecond" | "DashboardWebStringId.FormatType" | "DashboardWebStringId.TopN.Top" | "DashboardWebStringId.TopN.Bottom" | "DashboardWebStringId.DimensionSortBy" | "DashboardStringId.NumericFormatUnitAutoCaption" | "DashboardStringId.NumericFormatFormatTypeAutoCaption" | "DashboardStringId.NumericFormatFormatTypeGeneralCaption" | "DashboardStringId.NumericFormatFormatTypeNumberCaption" | "DashboardStringId.NumericFormatFormatTypeCurrencyCaption" | "DashboardStringId.NumericFormatFormatTypeScientificCaption" | "DashboardStringId.NumericFormatFormatTypePercentCaption" | "DashboardStringId.NumericFormatUnitOnesCaption" | "DashboardStringId.NumericFormatUnitThousandsCaption" | "DashboardStringId.NumericFormatUnitMillionsCaption" | "DashboardStringId.NumericFormatUnitBillionsCaption" | "DashboardStringId.DeltaValueTypeActualValueCaption" | "DashboardStringId.DeltaValueTypeAbsoluteVariationCaption" | "DashboardStringId.DeltaValueTypePercentVariationCaption" | "DashboardStringId.DeltaValueTypePercentOfTargetCaption" | "DashboardStringId.DeltaValueTypeTargetValueCaption" | "DashboardStringId.DeltaIndicationModeGreaterIsGoodCaption" | "DashboardStringId.DeltaIndicationModeLessIsGoodCaption" | "DashboardStringId.DeltaIndicationModeWarningIfGreaterCaption" | "DashboardStringId.DeltaIndicationModeWarningIfLessCaption" | "DashboardStringId.DeltaIndicationModeNoIndicationCaption" | "DashboardStringId.DeltaThresholdTypeAbsolute" | "DashboardStringId.DeltaThresholdTypePercent" | "DashboardStringId.CommandDimensionGroupChildValues" | "DashboardStringId.SeriesTypeBar" | "DashboardStringId.SeriesTypeStackedBar" | "DashboardStringId.SeriesTypeFullStackedBar" | "DashboardStringId.SeriesTypePoint" | "DashboardStringId.SeriesTypeLine" | "DashboardStringId.SeriesTypeStackedLine" | "DashboardStringId.SeriesTypeFullStackedLine" | "DashboardStringId.SeriesTypeStepLine" | "DashboardStringId.SeriesTypeSpline" | "DashboardStringId.SeriesTypeArea" | "DashboardStringId.SeriesTypeStackedArea" | "DashboardStringId.SeriesTypeFullStackedArea" | "DashboardStringId.SeriesTypeStepArea" | "DashboardStringId.SeriesTypeSplineArea" | "DashboardStringId.SeriesTypeStackedSplineArea" | "DashboardStringId.SeriesTypeFullStackedSplineArea" | "DashboardWebStringId.Chart.ShowLegend" | "DashboardStringId.DefaultNameBoundImageItem" | "DashboardStringId.DefaultNameImageItem" | "DashboardStringId.DefaultNameTextBoxItem" | "DashboardStringId.DefaultNameCardItem" | "DashboardStringId.DefaultNameChartItem" | "DashboardStringId.DefaultNameComboBoxItem" | "DashboardStringId.DefaultNameListBoxItem" | "DashboardStringId.DefaultNameTreeViewItem" | "DashboardStringId.DefaultNameGaugeItem" | "DashboardStringId.DefaultNameGridItem" | "DashboardStringId.GridHyperlinkUriPatternErrorMessage" | "DashboardWebStringId.DefaultNameBubbleMapItem" | "DashboardWebStringId.DefaultNameChoroplethMapItem" | "DashboardWebStringId.DefaultNameGeoPointMapItem" | "DashboardWebStringId.DefaultNamePieMapItem" | "DashboardStringId.DefaultNamePieItem" | "DashboardStringId.DefaultNamePivotItem" | "DashboardStringId.DefaultNameRangeFilterItem" | "DashboardStringId.DefaultNameScatterChartItem" | "DashboardStringId.DefaultNameTreemapItem" | "DashboardStringId.DescriptionMaps" | "DashboardStringId.EntireRangePeriodCaption" | "DashboardStringId.CalculationTypePercentOfTotal" | "DashboardStringId.CalculationTypeDifference" | "DashboardStringId.CalculationTypePercentageDifference" | "DashboardStringId.CalculationTypeRunningTotal" | "DashboardStringId.CalculationTypeMovingCalculation" | "DashboardStringId.CalculationTypeRank" | "DashboardStringId.ColorPaletteIndex" | "DashboardStringId.DifferenceCalculationTargetPrevious" | "DashboardStringId.DifferenceCalculationTargetNext" | "DashboardStringId.DifferenceCalculationTargetFirst" | "DashboardStringId.DifferenceCalculationTargetLast" | "DashboardStringId.SummaryTypeCount" | "DashboardStringId.SummaryTypeSum" | "DashboardStringId.SummaryTypeMin" | "DashboardStringId.SummaryTypeMax" | "DashboardStringId.SummaryTypeAverage" | "DashboardStringId.SummaryTypeStdDev" | "DashboardStringId.SummaryTypeStdDevp" | "DashboardStringId.SummaryTypeVar" | "DashboardStringId.SummaryTypeVarp" | "DashboardStringId.SummaryTypeCountDistinct" | "DashboardStringId.SummaryTypeMedian" | "DashboardStringId.SummaryTypeMode" | "DashboardStringId.RankTypeUnique" | "DashboardStringId.RankTypeCompetition" | "DashboardStringId.RankTypeDense" | "DashboardStringId.RankTypeModified" | "DashboardStringId.RankTypePercentile" | "DashboardStringId.CardCalculationAlongCards" | "DashboardStringId.CardCalculationAlongSparklineArgument" | "DashboardStringId.CardCalculationAlongCardsAndSparklineArgument" | "DashboardStringId.CardCalculationAlongSparklineArgumentAndCards" | "DashboardStringId.ChartCalculationAlongArguments" | "DashboardStringId.ChartCalculationAlongSeries" | "DashboardStringId.ChartCalculationAlongArgumentsAndSeries" | "DashboardStringId.ChartCalculationAlongSeriesAndArguments" | "DashboardStringId.GridCalculationAlongRows" | "DashboardStringId.GridCalculationAlongSparklineArgument" | "DashboardStringId.GridCalculationAlongRowsAndSparklineArgument" | "DashboardStringId.GridCalculationAlongSparklineArgumentAndRows" | "DashboardStringId.PivotCalculationAlongColumns" | "DashboardStringId.PivotCalculationAlongRows" | "DashboardStringId.PivotCalculationAlongColumnsAndRows" | "DashboardStringId.PivotCalculationAlongRowsAndColumns" | "DashboardStringId.PivotCalculationAlongGroupsInColumns" | "DashboardStringId.PivotCalculationAlongGroupsInRows" | "DashboardStringId.PivotCalculationAlongGroupsInColumnsAndRows" | "DashboardStringId.PivotCalculationAlongGroupsInRowsAndColumns" | "DashboardStringId.PieCalculationAlongArguments" | "DashboardStringId.PieCalculationAlongSeries" | "DashboardStringId.PieCalculationAlongArgumentsAndSeries" | "DashboardStringId.PieCalculationAlongSeriesAndArguments" | "DashboardStringId.RangeFilterCalculationAlongArgumentAndSeries" | "DashboardStringId.RangeFilterCalculationAlongSeriesAndArgument" | "DashboardStringId.GaugeCalculationAlongGauges" | "DashboardStringId.ScatterCalculationAlongArguments" | "DashboardStringId.CalculationAlongSpecificDimensions" | "DashboardStringId.CalculatedFieldTypeString" | "DashboardStringId.CalculatedFieldTypeLong" | "DashboardStringId.CalculatedFieldTypeDecimal" | "DashboardStringId.CalculatedFieldTypeBoolean" | "DashboardStringId.CalculatedFieldTypeDateTime" | "DashboardStringId.CalculatedFieldTypeDouble" | "DashboardStringId.CalculatedFieldTypeAuto" | "DashboardStringId.CalculatedFieldTypeObject" | "DashboardStringId.DefaultEFDataSourceName" | "DashboardStringId.DefaultExcelDataSourceName" | "DashboardStringId.DefaultFileExtractDataSourceName" | "DashboardStringId.DefaultObjectDataSourceName" | "DashboardStringId.DefaultOlapDataSourceName" | "DashboardStringId.DefaultSqlDataSourceName" | "DashboardStringId.DefaultJsonDataSourceName" | "DashboardStringId.DefaultXpoDataSourceName" | "DashboardStringId.OlapRaggedHierarchyNoneItemCaption" | "DashboardStringId.FormatRuleApplyToColumn" | "DashboardStringId.SeriesTypeSideBySideRangeBar" | "DashboardStringId.SeriesTypeRangeArea" | "DashboardStringId.SeriesTypeHighLowClose" | "DashboardStringId.SeriesTypeCandleStick" | "DashboardStringId.SeriesTypeStock" | "DashboardWebStringId.StyleSettings" | "DashboardStringId.ParametersFormCalendarTodayButton" | "DashboardStringId.TreemapLabelArgumentTemplate" | "DashboardStringId.TreemapLabelValueTemplate" | "DashboardStringId.SearchNullValuePrompt" | "DashboardStringId.CustomItems" | "DashboardStringId.FormatRuleAllowNegativeAxis" | "DashboardStringId.FormatRuleDrawAxis" | "DashboardStringId.FormatRuleShowBarOnly" | "DashboardStringId.CommandFormatRuleBottomN" | "DashboardStringId.FormatConditionAppearanceNone" | "DashboardStringId.FormatConditionAppearanceCustom" | "DashboardStringId.FormatConditionAppearancePaleRed" | "DashboardStringId.FormatConditionAppearancePaleYellow" | "DashboardStringId.FormatConditionAppearancePaleGreen" | "DashboardStringId.FormatConditionAppearancePaleBlue" | "DashboardStringId.FormatConditionAppearancePalePurple" | "DashboardStringId.FormatConditionAppearancePaleCyan" | "DashboardStringId.FormatConditionAppearancePaleOrange" | "DashboardStringId.FormatConditionAppearancePaleGray" | "DashboardStringId.FormatConditionAppearanceRed" | "DashboardStringId.FormatConditionAppearanceYellow" | "DashboardStringId.FormatConditionAppearanceGreen" | "DashboardStringId.FormatConditionAppearanceBlue" | "DashboardStringId.FormatConditionAppearancePurple" | "DashboardStringId.FormatConditionAppearanceCyan" | "DashboardStringId.FormatConditionAppearanceOrange" | "DashboardStringId.FormatConditionAppearanceGray" | "DashboardStringId.FormatConditionAppearanceGradientRed" | "DashboardStringId.FormatConditionAppearanceGradientYellow" | "DashboardStringId.FormatConditionAppearanceGradientGreen" | "DashboardStringId.FormatConditionAppearanceGradientBlue" | "DashboardStringId.FormatConditionAppearanceGradientPurple" | "DashboardStringId.FormatConditionAppearanceGradientCyan" | "DashboardStringId.FormatConditionAppearanceGradientOrange" | "DashboardStringId.FormatConditionAppearanceGradientTransparent" | "DashboardStringId.FormatConditionAppearanceFontBold" | "DashboardStringId.FormatConditionAppearanceFontItalic" | "DashboardStringId.FormatConditionAppearanceFontUnderline" | "DashboardStringId.FormatConditionAppearanceFontGrayed" | "DashboardStringId.FormatConditionAppearanceFontRed" | "DashboardStringId.FormatConditionAppearanceFontYellow" | "DashboardStringId.FormatConditionAppearanceFontGreen" | "DashboardStringId.FormatConditionAppearanceFontBlue" | "DashboardStringId.IntersectionLevelModeFirst" | "DashboardStringId.IntersectionLevelModeLast" | "DashboardStringId.IntersectionLevelModeAuto" | "DashboardStringId.IntersectionLevelModeAll" | "DashboardStringId.IntersectionLevelModeSpecific" | "DashboardStringId.FormatRuleApplyToRow" | "DashboardStringId.FormatRuleApplyTo" | "DashboardWebStringId.FilterItem.AllowEmptyFilter" | "DashboardStringId.FormatConditionAppearanceFontStrikeout" | "DashboardStringId.FormatConditionAutomaticValueType" | "DashboardStringId.FormatConditionNumberValueType" | "DashboardStringId.FormatConditionPercentValueType" | "DashboardStringId.CommandFormatRuleRangeIcons" | "DashboardStringId.CommandFormatRuleGreaterThan" | "DashboardStringId.CommandFormatRuleGreaterThanOrEqualTo" | "DashboardStringId.CommandFormatRuleLessThan" | "DashboardStringId.CommandFormatRuleLessThanOrEqualTo" | "DashboardStringId.CommandFormatRuleEqualTo" | "DashboardStringId.CommandFormatRuleNotEqualTo" | "DashboardStringId.CommandFormatRuleBetween" | "DashboardStringId.CommandFormatRuleNotBetween" | "DashboardStringId.CommandFormatRuleBetweenOrEqual" | "DashboardStringId.CommandFormatRuleNotBetweenOrEqual" | "DashboardStringId.CommandFormatRuleContains" | "DashboardStringId.ColorAutoAssigned" | "DashboardStringId.CalculationTypeNone" | "DashboardStringId.UndoText" | "DashboardStringId.RedoText" | "DashboardStringId.DashboardCurrencyUseCurrentCurrency" | "DashboardStringId.CommandDimensionSortModeDisplayText" | "DashboardStringId.CommandDimensionSortModeValue" | "DashboardStringId.CommandDimensionSortModeID" | "DashboardStringId.CommandDimensionSortModeKey" | "DashboardWebStringId.Chart.AddPane" | "DashboardStringId.MapShapeNoneAttribute" | "DashboardStringId.DefaultPeriodName" | "DashboardStringId.CardLayoutTemplateStretchedCaption" | "DashboardStringId.CardLayoutTemplateCenteredCaption" | "DashboardStringId.CardLayoutTemplateCompactCaption" | "DashboardStringId.CardLayoutTemplateLightweightCaption" | "DashboardStringId.CardLayoutTemplateCustomCaption" | "DashboardStringId.CardLayoutTemplateNoneCaption" | "DashboardStringId.CardRowDataElementTypeTitleCaption" | "DashboardStringId.CardRowDataElementTypeSubtitleCaption" | "DashboardStringId.CardRowDataElementTypeActualValueCaption" | "DashboardStringId.CardRowDataElementTypeTargetValueCaption" | "DashboardStringId.CardRowDataElementTypeAbsoluteVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentOfTargetCaption" | "DashboardStringId.CardRowDataElementTypeDimensionValueCaption" | "DashboardStringId.CardRowDataElementTypeCardNameCaption" | "DashboardStringId.CardRowDataElementTypeDeltaIndicatorCaption" | "DashboardStringId.CardRowDataElementTypeSparklineCaption" | "DashboardStringId.FormatRuleApplyToAllElements" | "DashboardWebStringId.Pie.LabelPosition" | "DashboardWebStringId.Pie.LabelPositionOutside" | "DashboardWebStringId.Pie.LabelPositionInside" | "DashboardStringId.IncludeExportDashboardState" | "DashboardStringId.PointLabelContentTypeArgument" | "DashboardStringId.PointLabelContentTypeSeriesName" | "DashboardStringId.PointLabelContentTypeValue" | "DashboardStringId.PointLabelContentTypePercent" | "DashboardWebStringId.DashboardMenu" | "DashboardWebStringId.DashboardMenuNew" | "DashboardWebStringId.DashboardMenuOpen" | "DashboardWebStringId.DashboardMenuSave" | "DashboardWebStringId.DashboardMenuCurrency" | "DashboardWebStringId.DashboardMenuDataSources" | "DashboardWebStringId.DashboardMenuColorScheme" | "DashboardWebStringId.DashboardMenuNewDashboardCreate" | "DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder" | "DashboardWebStringId.Binding.DefaultEmptyPlaceholder" | "DashboardWebStringId.Binding.DefaultSelectedPlaceholder" | "DashboardWebStringId.Binding.DataFiltering" | "DashboardWebStringId.Binding.Argument" | "DashboardWebStringId.Binding.Attribute" | "DashboardWebStringId.Binding.Sparkline" | "DashboardWebStringId.Binding.Columns" | "DashboardWebStringId.Binding.TooltipDimensions" | "DashboardWebStringId.Binding.TooltipMeasures" | "DashboardWebStringId.Binding.HiddenDimensions" | "DashboardWebStringId.Binding.HiddenMeasures" | "DashboardWebStringId.Binding.AddDimension" | "DashboardWebStringId.Binding.AddMeasure" | "DashboardWebStringId.Binding.AddColumn" | "DashboardWebStringId.Binding.AddRow" | "DashboardWebStringId.Binding.AddValue" | "DashboardWebStringId.Binding.AddSeries" | "DashboardWebStringId.Binding.SetLatitude" | "DashboardWebStringId.Binding.SetLongitude" | "DashboardWebStringId.Binding.SetArgument" | "DashboardWebStringId.Binding.AddArgument" | "DashboardWebStringId.Binding.SetWeight" | "DashboardWebStringId.Binding.SetColor" | "DashboardWebStringId.Binding.SetAttribute" | "DashboardWebStringId.Binding.SetValue" | "DashboardWebStringId.Binding.XAxis" | "DashboardWebStringId.Binding.YAxis" | "DashboardWebStringId.Binding.ConfigureDimension" | "DashboardWebStringId.Binding.ConfigureMeasure" | "DashboardWebStringId.Binding.ConfigureSeries" | "DashboardWebStringId.Binding.ConfigureArgument" | "DashboardWebStringId.Binding.ConfigureValue" | "DashboardWebStringId.Binding.ConfigureAttribute" | "DashboardWebStringId.Binding.ConfigureLatitude" | "DashboardWebStringId.Binding.ConfigureLongitude" | "DashboardWebStringId.Binding.ConfigureColumn" | "DashboardWebStringId.Binding.ConfigureRow" | "DashboardWebStringId.Binding.ConfigureWeight" | "DashboardWebStringId.Binding.ConfigureColor" | "DashboardWebStringId.Binding.ShowAll" | "DashboardWebStringId.ColorScheme.Color" | "DashboardWebStringId.ColorScheme.Colors" | "DashboardWebStringId.Parameters.ParameterList" | "DashboardWebStringId.Parameters.AddParameter" | "DashboardWebStringId.Parameters.AddParameter.Tooltip" | "DashboardWebStringId.Parameters.NoSelectedParameter" | "DashboardWebStringId.Parameters.Reorder" | "DashboardWebStringId.Parameters.Done" | "DashboardWebStringId.Currency.Currency" | "DashboardWebStringId.Currency.CurrencyCulture" | "DashboardWebStringId.Currency.DefaultCurrencyWarning" | "DashboardWebStringId.Preview" | "DashboardWebStringId.Add" | "DashboardWebStringId.DataSources.UsedDataSources" | "DashboardWebStringId.DataSources.DataItems" | "DashboardWebStringId.DataSources.AddQuery" | "DashboardWebStringId.DataSources.AddCalculatedField" | "DashboardWebStringId.DataSources.AddDataSource" | "DashboardWebStringId.DataSources.NoUsedDataSources" | "DashboardWebStringId.DataSources.NoAvailableDataSources" | "DashboardWebStringId.DataSources.ChooseDataSource" | "DashboardWebStringId.DataSources.CreateDataSource" | "DashboardWebStringId.DataSources.CreateNewDataSource" | "DashboardWebStringId.DataSources.CreateDataSource.Tooltip" | "DashboardWebStringId.DataSources.EditCalculatedField" | "DashboardWebStringId.DataSources.CalculatedField.Name" | "DashboardWebStringId.DataSources.CalculatedField.FieldType" | "DashboardWebStringId.DataSources.CalculatedField.UniqueNameError" | "DashboardWebStringId.DataSources.CalculatedField.Corrupted" | "DashboardWebStringId.DataSources.Edit" | "DashboardStringId.MessageCollectionTypesNotSupported" | "DashboardWebStringId.New.DashboardName" | "DashboardWebStringId.Bindings" | "DashboardWebStringId.Interactivity" | "DashboardWebStringId.Options" | "DashboardWebStringId.Remove" | "DashboardWebStringId.MasterFilterMode" | "DashboardWebStringId.Title.Text" | "DashboardWebStringId.Title.Visible" | "DashboardWebStringId.Title.IncludeMasterFilter" | "DashboardWebStringId.Title.Aligment" | "DashboardWebStringId.Title.Image" | "DashboardWebStringId.DataSources.Cancel" | "DashboardWebStringId.DataSources.IncludeToTheDashboard" | "DashboardWebStringId.DataSources.AvailableDataSourcesError" | "DashboardWebStringId.DataSources.DashboardDataSourceWizard" | "DashboardWebStringId.Viewer" | "DashboardWebStringId.Loading" | "DashboardWebStringId.ClickHereInvitation" | "DashboardWebStringId.BindDataInvitation" | "DashboardWebStringId.AddItemInvitation" | "DashboardWebStringId.Parameters.Values" | "DashboardWebStringId.Binding.Cards" | "DashboardWebStringId.Binding.AddCard" | "DashboardWebStringId.Binding.ConfigureCard" | "DashboardWebStringId.Binding.AddValues" | "DashboardWebStringId.Binding.ConfigureValues" | "DashboardWebStringId.Binding.Maps" | "DashboardWebStringId.Binding.AddMap" | "DashboardWebStringId.Binding.ConfigureMap" | "DashboardWebStringId.Binding.Gauges" | "DashboardWebStringId.Binding.AddGauge" | "DashboardWebStringId.Binding.ConfigureGauge" | "DashboardWebStringId.InteractivityOptions" | "DashboardWebStringId.Binding.Values" | "DashboardWebStringId.Binding.RemovePane" | "DashboardWebStringId.ClickToSetFilterCriteria" | "DashboardWebStringId.DataSources.OK" | "DashboardWebStringId.DataSources.Save" | "DashboardWebStringId.Cards.ArrangementMode" | "DashboardWebStringId.Cards.ArrangementMode.Auto" | "DashboardWebStringId.Cards.ArrangementMode.FixedRows" | "DashboardWebStringId.Cards.ArrangementMode.FixedColumns" | "DashboardWebStringId.Cards.LineCount" | "DashboardWebStringId.ConditionalFormatting" | "DashboardWebStringId.CollectionEditor.NoItems" | "DashboardWebStringId.CollectionEditor.Totals.NoItems" | "DashboardWebStringId.CollectionEditor.Parameters.NoItems" | "DashboardWebStringId.PivotGrid.AutoExpandColumnGroups" | "DashboardWebStringId.PivotGrid.AutoExpandRowGroups" | "DashboardWebStringId.PivotGrid.ColumnGrandTotals" | "DashboardWebStringId.PivotGrid.RowGrandTotals" | "DashboardWebStringId.PivotGrid.ColumnTotals" | "DashboardWebStringId.PivotGrid.RowTotals" | "DashboardWebStringId.PivotGrid.ValuesPosition" | "DashboardWebStringId.PivotGrid.ValuesPositionColumns" | "DashboardWebStringId.PivotGrid.ValuesPositionRows" | "DashboardWebStringId.PivotGrid.RowTotalsPosition" | "DashboardWebStringId.PivotGrid.RowTotalsPositionBottom" | "DashboardWebStringId.PivotGrid.RowTotalsPositionTop" | "DashboardWebStringId.PivotGrid.ColumnTotalsPosition" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionFar" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionNear" | "DashboardWebStringId.PivotGrid.LayoutType" | "DashboardWebStringId.PivotGrid.LayoutTypeCompact" | "DashboardWebStringId.PivotGrid.LayoutTypeTabular" | "DashboardWebStringId.Options.Caption" | "DashboardWebStringId.InteractivityOptions.IsMasterFilter" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.None" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Single" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Multiple" | "DashboardWebStringId.InteractivityOptions.TargetDimensions" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Arguments" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Series" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Points" | "DashboardWebStringId.ColoringOptions" | "DashboardWebStringId.DataSources.Filter" | "DashboardWebStringId.Chart.Rotated" | "DashboardWebStringId.Chart.Panes" | "DashboardWebStringId.Chart.Legend" | "DashboardWebStringId.Chart.AxisX" | "DashboardWebStringId.Chart.AxisY" | "DashboardWebStringId.Chart.AxisYSecondary" | "DashboardWebStringId.Chart.PointLabelOptions" | "DashboardWebStringId.Chart.AxisXMeasure" | "DashboardWebStringId.Chart.AxisYMeasure" | "DashboardWebStringId.Chart.Weight" | "DashboardWebStringId.Chart.Content" | "DashboardWebStringId.Chart.ArgumentAndWeight" | "DashboardWebStringId.Chart.ArgumentAndValues" | "DashboardWebStringId.Chart.Reverse" | "DashboardWebStringId.Chart.Visible" | "DashboardWebStringId.Chart.Title" | "DashboardWebStringId.Chart.TitleText" | "DashboardWebStringId.Chart.EnableZooming" | "DashboardWebStringId.Chart.LimitVisiblePoints" | "DashboardWebStringId.Chart.VisiblePointsCount" | "DashboardWebStringId.Chart.AlwaysShowZeroLevel" | "DashboardWebStringId.Chart.GridLines" | "DashboardWebStringId.Chart.LogarithmicScale" | "DashboardWebStringId.Chart.LogarithmicScaleBase" | "DashboardWebStringId.Chart.LogarithmicScaleBase2" | "DashboardWebStringId.Chart.LogarithmicScaleBase5" | "DashboardWebStringId.Chart.LogarithmicScaleBase10" | "DashboardWebStringId.Chart.Position" | "DashboardWebStringId.Chart.IsInsideOfDiagram" | "DashboardWebStringId.Chart.PrimaryAxisY" | "DashboardWebStringId.Chart.SecondaryAxisY" | "DashboardWebStringId.Chart.Name" | "DashboardWebStringId.Chart.PlotOnSecondaryAxis" | "DashboardWebStringId.Chart.IgnoreEmptyPoints" | "DashboardWebStringId.Chart.ShowPointMarkers" | "DashboardWebStringId.Chart.Value" | "DashboardWebStringId.Chart.ShowZeroValues" | "DashboardWebStringId.Chart.OverlappingMode" | "DashboardWebStringId.Chart.Orientation" | "DashboardWebStringId.Chart.ShowPointLablels" | "DashboardWebStringId.Chart.TooltipContent" | "DashboardWebStringId.Chart.LabelContent" | "DashboardWebStringId.Card.SparklineOptions" | "DashboardWebStringId.Card.SparklineVisible" | "DashboardWebStringId.Chart.Position.TopLeftVertical" | "DashboardWebStringId.Chart.Position.TopLeftHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterHorizontal" | "DashboardWebStringId.Chart.Position.TopRightVertical" | "DashboardWebStringId.Chart.Position.TopRightHorizontal" | "DashboardWebStringId.Chart.Position.BottomLeftVertical" | "DashboardWebStringId.Chart.Position.BottomLeftHorizontal" | "DashboardWebStringId.Chart.Position.BottomCenterHorizontal" | "DashboardWebStringId.Chart.Position.BottomRightVertical" | "DashboardWebStringId.Chart.Position.BottomRightHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterVertical" | "DashboardWebStringId.Chart.Position.BottomCenterVertical" | "DashboardWebStringId.FilterItem.Type" | "DashboardWebStringId.FilterItem.Type.Standard" | "DashboardWebStringId.FilterItem.Type.Checked" | "DashboardWebStringId.FilterItem.Type.Radio" | "DashboardWebStringId.FilterItem.ShowAllValue" | "DashboardWebStringId.FilterItem.EnableSearch" | "DashboardWebStringId.Gauge.Min" | "DashboardWebStringId.Gauge.Max" | "DashboardWebStringId.Gauge.ScaleOptions" | "DashboardWebStringId.Gauge.Type" | "DashboardWebStringId.Gauge.Type.FullQuarterGauge" | "DashboardWebStringId.Gauge.Type.HalfCircular" | "DashboardWebStringId.Gauge.Type.LeftQuarterCircular" | "DashboardWebStringId.Gauge.Type.RightQuarterCircular" | "DashboardWebStringId.Gauge.Type.ThreeFourthCircular" | "DashboardWebStringId.Gauge.Type.LinearHorizontal" | "DashboardWebStringId.Gauge.Type.LinearVertical" | "DashboardWebStringId.Gauge.Captions" | "DashboardWebStringId.Gauge.Scale.Custom" | "DashboardWebStringId.Gauge.Scale.Auto" | "DashboardWebStringId.Grid.ColumnType" | "DashboardWebStringId.Grid.DisplayMode" | "DashboardWebStringId.Grid.DisplayMode.Value" | "DashboardWebStringId.Grid.DisplayMode.Bar" | "DashboardWebStringId.Grid.DisplayMode.Text" | "DashboardWebStringId.Grid.DisplayMode.Image" | "DashboardWebStringId.Grid.FixedWidth" | "DashboardWebStringId.Grid.WidthType" | "DashboardWebStringId.Grid.WidthType.Weight" | "DashboardWebStringId.Grid.WidthType.FitToContent" | "DashboardWebStringId.Grid.DeltaOptions" | "DashboardWebStringId.Grid.ShowStartEndValues" | "DashboardWebStringId.Grid.TotalType" | "DashboardWebStringId.Grid.Dimension" | "DashboardWebStringId.Grid.Measure" | "DashboardWebStringId.Grid.Delta" | "DashboardWebStringId.Grid.Sparkline" | "DashboardWebStringId.Grid.Hyperlink" | "DashboardWebStringId.Grid.Options" | "DashboardWebStringId.Map.ShapeFileLoaded" | "DashboardWebStringId.Map.AttributeFileLoaded" | "DashboardWebStringId.Map.ValueMap" | "DashboardWebStringId.Map.DeltaMap" | "DashboardWebStringId.Map.TooltipCaption" | "DashboardWebStringId.Map.TooltipActualValueCaption" | "DashboardWebStringId.Map.TooltipDeltaCaption" | "DashboardWebStringId.Map.CustomMapOptions" | "DashboardWebStringId.Map.CustomMapOptionsSource" | "DashboardWebStringId.Map.CustomMapOptionsUrl" | "DashboardWebStringId.Map.CustomMapOptionsFile" | "DashboardWebStringId.Map.CustomMapUrl" | "DashboardWebStringId.Map.CustomMapFile" | "DashboardWebStringId.Map.CustomAttributeFile" | "DashboardWebStringId.Map.AttributeDimension" | "DashboardWebStringId.Map.IncludeSummaryValueToShapeTitle" | "DashboardWebStringId.Map.AttributeName" | "DashboardWebStringId.Map.TooltipAttribute" | "DashboardWebStringId.Map.TooltipDimensions" | "DashboardWebStringId.Map.Area.Custom" | "DashboardWebStringId.Map.Area.WorldCountries" | "DashboardWebStringId.Map.Area.Europe" | "DashboardWebStringId.Map.Area.Asia" | "DashboardWebStringId.Map.Area.NorthAmerica" | "DashboardWebStringId.Map.Area.SouthAmerica" | "DashboardWebStringId.Map.Area.Africa" | "DashboardWebStringId.Map.Area.USA" | "DashboardWebStringId.Map.Area.Canada" | "DashboardWebStringId.Map.Viewport" | "DashboardWebStringId.Map.ShapeTitleAttribute" | "DashboardWebStringId.Map.UseBindingAttribute" | "DashboardWebStringId.Map.WeightedLegendType" | "DashboardWebStringId.Map.WeightedLegendType.Linear" | "DashboardWebStringId.Map.WeightedLegendType.Nested" | "DashboardWebStringId.Map.Orientation.Vertical" | "DashboardWebStringId.Map.Orientation.Horizontal" | "DashboardWebStringId.Map.Position.TopLeft" | "DashboardWebStringId.Map.Position.TopCenter" | "DashboardWebStringId.Map.Position.TopRight" | "DashboardWebStringId.Map.Position.BottomLeft" | "DashboardWebStringId.Map.Position.BottomCenter" | "DashboardWebStringId.Map.Position.BottomRight" | "DashboardWebStringId.Map.Viewport.TopLatitude" | "DashboardWebStringId.Map.Viewport.LeftLongitude" | "DashboardWebStringId.Map.Viewport.RightLongitude" | "DashboardWebStringId.Map.Viewport.BottomLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLongitude" | "DashboardWebStringId.Map.Viewport.CreateViewerPaddings" | "DashboardWebStringId.Map.ShowLegend" | "DashboardWebStringId.Pie.Type" | "DashboardWebStringId.Pie" | "DashboardWebStringId.Pie.Donut" | "DashboardWebStringId.Pie.LabelContentType.None" | "DashboardWebStringId.Pie.LabelContentType.Argument" | "DashboardWebStringId.Pie.LabelContentType.Percent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndPercent" | "DashboardWebStringId.Pie.LabelContentType.Value" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndValue" | "DashboardWebStringId.Pie.LabelContentType.ValueAndPercent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentValueAndPercent" | "DashboardWebStringId.Image.BindingMode" | "DashboardWebStringId.Image.BindingMode.BinaryArray" | "DashboardWebStringId.Image.BindingMode.Uri" | "DashboardWebStringId.RangeFilter.UriPattern" | "DashboardWebStringId.Image.SizeMode.Clip" | "DashboardWebStringId.Image.SizeMode.Stretch" | "DashboardWebStringId.Image.SizeMode.Zoom" | "DashboardWebStringId.Image.SizeMode.Squeeze" | "DashboardWebStringId.Image.HorizontalAlignment" | "DashboardWebStringId.Image.VerticalAlignment" | "DashboardWebStringId.Image.Alignment.Left" | "DashboardWebStringId.Image.Alignment.Center" | "DashboardWebStringId.Image.Alignment.Right" | "DashboardWebStringId.Image.Alignment.Top" | "DashboardWebStringId.Image.Alignment.Bottom" | "DashboardWebStringId.SeriesItem.SeriesDimensions" | "DashboardWebStringId.TextBox.Text" | "DashboardWebStringId.Chart.Orientation.Default" | "DashboardWebStringId.Chart.Orientation.RotateRight" | "DashboardWebStringId.Chart.Orientation.RotateLeft" | "DashboardWebStringId.Chart.OverlappingMode.Hide" | "DashboardWebStringId.Chart.OverlappingMode.None" | "DashboardWebStringId.Chart.Position.Outside" | "DashboardWebStringId.Chart.Position.Inside" | "DashboardWebStringId.Chart.SeriesType.Weighted" | "DashboardWebStringId.Coloring.MeasuresColoringMode" | "DashboardWebStringId.Coloring.Global" | "DashboardWebStringId.Coloring.Local" | "DashboardWebStringId.Delta.ValueType" | "DashboardWebStringId.Delta.ResultIndication" | "DashboardWebStringId.Delta.ThresholdType" | "DashboardWebStringId.Delta.ThresholdValue" | "DashboardWebStringId.Sparkline.ViewType" | "DashboardWebStringId.Sparkline.HighlightMinMaxPoints" | "DashboardWebStringId.Sparkline.HighlightStartEndPoints" | "DashboardWebStringId.Title.Aligment.Left" | "DashboardWebStringId.Title.Aligment.Center" | "DashboardWebStringId.Parameters.LookUpSettingsType.NoLookUp" | "DashboardWebStringId.Parameters.LookUpSettingsType.StaticList" | "DashboardWebStringId.Parameters.LookUpSettingsType.DynamicList" | "DashboardWebStringId.Parameters.LookUpSettingsType" | "DashboardWebStringId.Parameters.DefaultValue" | "DashboardWebStringId.DataItem" | "DashboardWebStringId.DataItem.Precision" | "DashboardWebStringId.DataItem.IncludeGroupSeparator" | "DashboardWebStringId.DataItem.ShowValues" | "DashboardWebStringId.DataItem.ShowTotals" | "DashboardWebStringId.DataItem.ShowGrandTotals" | "DashboardWebStringId.Dialog.ConfirmSaving" | "DashboardWebStringId.Dimension.GroupInterval" | "DashboardWebStringId.Dimension.SortMode" | "DashboardWebStringId.Dialog.ArgumentMode" | "DashboardWebStringId.Calculations" | "DashboardWebStringId.Calculations.Expression" | "DashboardWebStringId.Calculations.DifferenceCalculation" | "DashboardWebStringId.Calculations.Moving" | "DashboardWebStringId.Calculations.RunningTotal" | "DashboardWebStringId.Calculations.PercentOfTotal" | "DashboardWebStringId.Calculations.Rank" | "DashboardWebStringId.Calculations.DefinitionMode" | "DashboardWebStringId.Calculations.WindowDefinition" | "DashboardWebStringId.Calculations.WindowDefinitionModeSpecific" | "DashboardWebStringId.Calculations.WindowDefinitionModePredefined" | "DashboardWebStringId.Calculations.DifferenceType" | "DashboardWebStringId.TreemapLayoutAlgorithm" | "DashboardWebStringId.TilesLabelContentType" | "DashboardWebStringId.TilesTooltipContentType" | "DashboardWebStringId.GroupsLabelContentType" | "DashboardWebStringId.GroupsTooltipContentType" | "DashboardWebStringId.ShowOthersValue" | "DashboardWebStringId.TopNEnabled" | "DashboardWebStringId.Parameters.StaticListLookUpSettings" | "DashboardWebStringId.Parameters.DynamicListLookUpSettings" | "DashboardWebStringId.ConvertTo" | "DashboardWebStringId.Duplicate" | "DashboardWebStringId.DataSourceWizard" | "DashboardWebStringId.RangeFilter.CustomPeriods" | "DashboardWebStringId.RangeFilter.StartMode" | "DashboardWebStringId.RangeFilter.EndMode" | "DashboardWebStringId.RangeFilter.StartIntervalAndOffset" | "DashboardWebStringId.RangeFilter.EndIntervalAndOffset" | "DashboardWebStringId.RangeFilter.StartDate" | "DashboardWebStringId.RangeFilter.EndDate" | "DashboardWebStringId.RangeFilter.None" | "DashboardWebStringId.RangeFilter.Fixed" | "DashboardWebStringId.RangeFilter.Flow" | "DashboardWebStringId.Tabs.Binding" | "DashboardWebStringId.Tabs.DataShaping" | "DashboardWebStringId.Tabs.Format" | "DashboardWebStringId.Calculations.Types.Moving" | "DashboardWebStringId.Parameters.SortByMember" | "DashboardWebStringId.Parameters.LookUpSettingsTypeCaption" | "DashboardWebStringId.Dashboard.Items" | "DashboardWebStringId.Dashboard.Groups" | "DashboardWebStringId.Dashboard.LayoutItems" | "DashboardWebStringId.Dashboard.ComponentName" | "DashboardWebStringId.ButtonConfirm" | "DashboardWebStringId.Colorization.GroupInterval" | "DashboardWebStringId.ButtonOn" | "DashboardWebStringId.ButtonOff" | "DashboardWebStringId.ButtonYes" | "DashboardWebStringId.ButtonNo" | "DashboardWebStringId.ButtonDiscrete" | "DashboardWebStringId.ButtonContinuous" | "DashboardWebStringId.ButtonVisible" | "DashboardWebStringId.ButtonHidden" | "DashboardWebStringId.Calculations.PreviousValuesCount" | "DashboardWebStringId.Calculations.NextValuesCount" | "DashboardWebStringId.Calculations.RankType" | "DashboardWebStringId.Calculations.RankOrder" | "DashboardWebStringId.TileOptions" | "DashboardWebStringId.MapLockNavigationLocked" | "DashboardWebStringId.MapLockNavigationUnlocked" | "DashboardWebStringId.ConditionalFormatting.BarOptions" | "DashboardWebStringId.ConditionalFormatting.CalculatedBy" | "DashboardWebStringId.ConditionalFormatting.IconType" | "DashboardWebStringId.ConditionalFormatting.PredefinedColor" | "DashboardWebStringId.ConditionalFormatting.AppearanceType" | "DashboardWebStringId.ConditionalFormatting.FontStyle" | "DashboardWebStringId.ConditionalFormatting.FontFamily" | "DashboardWebStringId.ConditionalFormatting.FontRegular" | "DashboardWebStringId.ConditionalFormatting.IconType.None" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowSideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGraySideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDash" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedTriangleDown" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenTriangleUp" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingHalfGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1QuarterGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1Bar" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1FilledBox" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTriangle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedDiamond" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedFlag" | "DashboardWebStringId.ConditionalFormatting.IntersectionColumnDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionRowDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionLevelMode" | "DashboardWebStringId.ConditionalFormatting.GradientRangeBar" | "DashboardWebStringId.ConditionalFormatting.RangeGradient" | "DashboardWebStringId.ConditionalFormatting.SegmentNumber" | "DashboardWebStringId.ConditionalFormatting.ValueComparison" | "DashboardWebStringId.ConditionalFormatting.Ranges" | "DashboardWebStringId.ConditionalFormatting.AverageType" | "DashboardWebStringId.ConditionalFormatting.Above" | "DashboardWebStringId.ConditionalFormatting.AboveOrEqual" | "DashboardWebStringId.ConditionalFormatting.Below" | "DashboardWebStringId.ConditionalFormatting.BelowOrEqual" | "DashboardWebStringId.ConditionalFormatting.StyleSettingsType" | "DashboardWebStringId.ConditionalFormatting.Positive" | "DashboardWebStringId.ConditionalFormatting.Negative" | "DashboardWebStringId.ConditionalFormatting.MinimumType" | "DashboardWebStringId.ConditionalFormatting.MaximumType" | "DashboardWebStringId.ConditionalFormatting.DateType" | "DashboardWebStringId.ConditionalFormatting.DateType.None" | "DashboardWebStringId.ConditionalFormatting.DateType.SpecificDate" | "DashboardWebStringId.ConditionalFormatting.DateType.BeyondThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.NextWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.Tomorrow" | "DashboardWebStringId.ConditionalFormatting.DateType.Today" | "DashboardWebStringId.ConditionalFormatting.DateType.Yesterday" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.LastWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.PriorThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.Empty" | "DashboardWebStringId.ConditionalFormatting.DateType.User" | "DashboardWebStringId.ConditionalFormatting.DateType.Beyond" | "DashboardWebStringId.ConditionalFormatting.DateType.ThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.ThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAfter1" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAfter2" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo1" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo2" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo3" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo4" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo5" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo6" | "DashboardWebStringId.ConditionalFormatting.DateType.Earlier" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeDataItem" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeCard" | "DashboardWebStringId.Colorization.NoSelectedSchema" | "DashboardWebStringId.Colorization.ColorSchemes" | "DashboardWebStringId.LayoutHasBeenChangedDialogMessage" | "DashboardWebStringId.SaveConfirmationDialogMessage" | "DashboardWebStringId.SaveChangesDialogMessage" | "DashboardWebStringId.Dialog.ChangeDataMemberMessage" | "DashboardWebStringId.Dialog.RemovedDataItemsMessage" | "DashboardWebStringId.Dialog.ConfirmChanges" | "DashboardWebStringId.Dialog.Save" | "DashboardWebStringId.Dialog.DoNotSave" | "DashboardWebStringId.Dialog.ButtonYes" | "DashboardWebStringId.Dialog.ButtonDontChange" | "DashboardWebStringId.Colorization.ColorSchemeType" | "DashboardWebStringId.Colorization.MeasureNames" | "DashboardWebStringId.Colorization.AddColor" | "DashboardWebStringId.Colorization.ValidationSelectMeasure" | "DashboardWebStringId.ColoringModeAuto" | "DashboardWebStringId.ColoringModeOff" | "DashboardWebStringId.ColoringModeOn" | "DashboardWebStringId.ColorScheme.Empty" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButton" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip" | "DashboardWebStringId.ConditionalFormatting.Miscellaneous" | "DashboardWebStringId.Dashboards" | "DashboardWebStringId.EditInDesigner" | "DashboardWebStringId.NoDashboards" | "DashboardWebStringId.AddNewDashboard" | "DashboardWebStringId.NewDashboard" | "DashboardWebStringId.Binding.Searching" | "DashboardWebStringId.Binding.EmptySearchResult" | "DashboardWebStringId.Errors.AttemptToLoadData" | "DashboardWebStringId.ConditionType" | "DashboardWebStringId.ConditionalFormatting.UnsupportedDataType" | "DashboardWebStringId.FormatRule" | "DashboardWebStringId.Notification.DashboardSaving" | "DashboardWebStringId.Notification.DashboardSaved" | "DashboardWebStringId.Notification.DashboardCanNotBeSaved" | "DashboardWebStringId.Notification.DashboardSavingIsNotAvailable" | "DashboardWebStringId.Notification.AttemptToLoadDashboards" | "DashboardWebStringId.Notification.DashboardLoading" | "DashboardWebStringId.Notification.AttemptToLoadDashboard" | "DashboardWebStringId.Notification.AttemptToConnectionStrings" | "DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode" | "DashboardWebStringId.Notification.AttemptToLoadParameterValues" | "DashboardWebStringId.Notification.AttemptToGetUnderlyingData" | "DashboardWebStringId.Notification.AttemptToConvertItemToType" | "DashboardWebStringId.Notification.AttemptToLoadDimensionUniqueValues" | "DashboardWebStringId.Notification.AttemptToLoadFieldListForDataSource" | "DashboardWebStringId.Notification.AttemptToGetColorScheme" | "DashboardWebStringId.Notification.NewDashboardCannotBeCreated" | "DashboardWebStringId.Notification.ErrorHasOccuredOn" | "DashboardWebStringId.Notification.UnsupportedDataSourceType" | "DashboardWebStringId.LimitVisibleData.DisplayAllDataTooltip" | "DashboardWebStringId.LimitVisibleData.IncreasePerformanceTooltip" | "DashboardWebStringId.ConditionalFormatting.Condition" | "DashboardWebStringId.CardLayout.MinWidth" | "DashboardWebStringId.CardLayout.MaxWidth" | "DashboardWebStringId.CardLayout.Editor.CardLayout" | "DashboardWebStringId.CardLayout.Editor.FormatOptions" | "DashboardWebStringId.CardLayout.LayoutOptions" | "DashboardWebStringId.CardLayout.ResetTemplate" | "DashboardWebStringId.CardLayout.ApplyToAllCards" | "DashboardWebStringId.Binding.ValuesPattern" | "DashboardWebStringId.Parameters.ParameterNameShouldBeUnique" | "DashboardWebStringId.Title.ImageEmbedded" | "DashboardWebStringId.Title.ImageLinked" | "DashboardWebStringId.Title.ImageNone" | "DashboardWebStringId.RangeFilter.SetDefaultCustomPeriod" | "DashboardWebStringId.RangeFilter.ClearDefaultCustomPeriod" | "DashboardWebStringId.MobileLayout.Back" | "DashboardWebStringId.MobileLayout.SwitchToViewer" | "DashboardWebStringId.Search" | "DashboardStringId.DefaultNameTabPage" | "DashboardStringId.DefaultNameChartPane" | "DashboardStringId.NewCalculatedFieldNamePrefix" | "DashboardStringId.NewParameterNamePrefix" | "AnalyticsCoreStringId.Parameter_Type_String" | "AnalyticsCoreStringId.Parameter_Type_DateTime" | "AnalyticsCoreStringId.Parameter_Type_Int16" | "AnalyticsCoreStringId.Parameter_Type_Int32" | "AnalyticsCoreStringId.Parameter_Type_Int64" | "AnalyticsCoreStringId.Parameter_Type_Float" | "AnalyticsCoreStringId.Parameter_Type_Double" | "AnalyticsCoreStringId.Parameter_Type_Decimal" | "AnalyticsCoreStringId.Parameter_Type_Boolean" | "AnalyticsCoreStringId.Parameter_Type_Guid" | "AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption" | "DataAccessUIStringId.FiltersView" | "DashboardStringId.SeriesTypeGroupArea" | "DashboardStringId.SeriesTypeGroupBar" | "DashboardStringId.SeriesTypeGroupBubble" | "DashboardStringId.SeriesTypeGroupFinancial" | "DashboardStringId.SeriesTypeGroupPointLine" | "DashboardStringId.SeriesTypeGroupRange" | "DashboardStringId.FunctionCategoryWindow" | "DashboardStringId.FunctionCategoryAggregate" | "DashboardStringId.FunctionCategoryAdvanced" | "DashboardStringId.FunctionDescriptionWindowAvg" | "DashboardStringId.FunctionDescriptionRunningMin" | "DashboardStringId.FunctionDescriptionTotal" | "DashboardStringId.FunctionDescriptionRankCompetition" | "DashboardStringId.FunctionDescriptionLookup" | "DashboardStringId.FunctionDescriptionRunningCount" | "DashboardStringId.FunctionDescriptionWindowMax" | "DashboardStringId.FunctionDescriptionVarp" | "DashboardStringId.FunctionDescriptionRunningAvg" | "DashboardStringId.FunctionDescriptionFirst" | "DashboardStringId.FunctionDescriptionWindowMin" | "DashboardStringId.FunctionDescriptionWindowStdDev" | "DashboardStringId.FunctionDescriptionLast" | "DashboardStringId.FunctionDescriptionWindowCount" | "DashboardStringId.FunctionDescriptionCountDistinct" | "DashboardStringId.FunctionDescriptionIndex" | "DashboardStringId.FunctionDescriptionWindowStdDevp" | "DashboardStringId.FunctionDescriptionWindowMode" | "DashboardStringId.FunctionDescriptionRunningMax" | "DashboardStringId.FunctionDescriptionRankPercentile" | "DashboardStringId.FunctionDescriptionRankDense" | "DashboardStringId.FunctionDescriptionWindowSum" | "DashboardStringId.FunctionDescriptionWindowCountDistinct" | "DashboardStringId.FunctionDescriptionStdDevp" | "DashboardStringId.FunctionDescriptionSize" | "DashboardStringId.FunctionDescriptionMedian" | "DashboardStringId.FunctionDescriptionRankModified" | "DashboardStringId.FunctionDescriptionWindowMedian" | "DashboardStringId.FunctionDescriptionRunningSum" | "DashboardStringId.FunctionDescriptionWindowVarp" | "DashboardStringId.FunctionDescriptionWindowVar" | "DashboardStringId.FunctionDescriptionStdDev" | "DashboardStringId.FunctionDescriptionRankUnique" | "DashboardStringId.FunctionDescriptionVar" | "DashboardStringId.FunctionDescriptionAggr" | "DashboardStringId.FunctionDescriptionAggrJoinRule" | "DashboardStringId.FunctionDescriptionWindowDefinition" | "DashboardStringId.FunctionDescriptionWindowDefinitionPartitionBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderAsc" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderDesc" | "DashboardStringId.AggregateExFunctionDescriptionCountNotNull" | "DashboardStringId.AggregateExFunctionDescriptionMode" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHour" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinute" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinuteSecond" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateMonthYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear2" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateQuarterYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetQuarter" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfMonth" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime3" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime4" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime5" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime6" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToBoolean" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToDateTime" | "DashboardStringId.SparklineIndicationModeLine" | "DashboardStringId.SparklineIndicationModeArea" | "DashboardStringId.SparklineIndicationModeBar" | "DashboardStringId.SparklineIndicationModeWinLoss" | "DashboardStringId.DefaultNameDateFilterItem" | "DashboardWebStringId.DateFilter.FilterType" | "DashboardWebStringId.DateFilter.FilterTypeExact" | "DashboardWebStringId.DateFilter.FilterTypeAfter" | "DashboardWebStringId.DateFilter.FilterTypeBefore" | "DashboardWebStringId.DateFilter.FilterTypeBetween" | "DashboardWebStringId.DateFilter.ArrangementMode" | "DashboardWebStringId.DateFilter.ArrangementModeAutoHeight" | "DashboardWebStringId.DateFilter.ArrangementModeHorizontal" | "DashboardWebStringId.DateFilter.ArrangementModeVertical" | "DashboardWebStringId.DateFilter.DatePickerLocation" | "DashboardWebStringId.DateFilter.DatePickerLocationFar" | "DashboardWebStringId.DateFilter.DatePickerLocationNear" | "DashboardWebStringId.DateFilter.DatePickerLocationHidden" | "DashboardStringId.DateFilterDisplayTextPattern" | "DashboardStringId.DateFilterDatePickerButtonDefaultText" | "DashboardStringId.FromDatePeriodCaption" | "DashboardStringId.ToDatePeriodCaption" | "DashboardStringId.FromToDatePeriodCaption" | "DashboardStringId.UniqueNameValidationMessage" | "DashboardStringId.GridTotalAutoTemplate" | "DashboardStringId.GridTotalValueTemplate" | "DashboardStringId.GridTotalTemplate" | "DashboardStringId.GridTotalTypeCount" | "DashboardStringId.GridTotalTypeMin" | "DashboardStringId.GridTotalTypeMax" | "DashboardStringId.GridTotalTypeAvg" | "DashboardStringId.GridTotalTypeSum" | "DashboardStringId.ActionShowDataInspector" | "DashboardStringId.InspectedData" | "DashboardStringId.InspectedTypeFormatString" | "DashboardStringId.AggregatedDataType" | "DashboardStringId.RawDataType" | "DashboardStringId.OLAPUnavailableRawData" | "DashboardStringId.SparklineValuesSeparator" | "DashboardStringId.SparklineArgumentValueSeparator" | "DashboardWebStringId.Grid.FilterClause.ApplyFilter" | "DashboardWebStringId.Grid.FilterClause.ResetOperation" | "DashboardWebStringId.Grid.FilterClause.Contains" | "DashboardWebStringId.Grid.FilterClause.DoesNotContain" | "DashboardWebStringId.Grid.FilterClause.StartsWith" | "DashboardWebStringId.Grid.FilterClause.EndsWith" | "DashboardWebStringId.Grid.FilterClause.Equals" | "DashboardWebStringId.Grid.FilterClause.DoesNotEqual" | "DashboardWebStringId.Grid.FilterClause.Less" | "DashboardWebStringId.Grid.FilterClause.Greater" | "DashboardWebStringId.Grid.FilterClause.LessOrEqual" | "DashboardWebStringId.Grid.FilterClause.GreaterOrEqual" | "DashboardWebStringId.Grid.FilterClause.Between" | "DashboardWebStringId.Grid.FilterClause.BetweenStart" | "DashboardWebStringId.Grid.FilterClause.BetweenEnd" | "DashboardWebStringId.AccordionTab.Content" | "DashboardWebStringId.TextBoxItemEditor.NoFields" | "DashboardWebStringId.TextBoxItemEditor.InsertField" | "DashboardWebStringId.TextBoxItemEditor.EditTextButton" | "DashboardWebStringId.TextBoxItemEditor.DialogCaption" | "DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose" | "DashboardWebStringId.TextBoxItemEditor.DialogClose" | "DashboardStringId.StartDate" | "DashboardStringId.EndDate" | "DashboardWebStringId.AccordionTab.MeasureFilter" | "DashboardStringId.FunctionDescriptionAggregateFilter" | "DashboardWebStringId.TabPages" | "DashboardWebStringId.More" | "DashboardStringId.MeasureFilterCaptionFormatString";
	    LastLevel: "DashboardStringId.ActionClearMasterFilter" | "DashboardStringId.ActionClearSelection" | "DashboardStringId.ActionOtherValues" | "DashboardStringId.ActionDrillUp" | "DashboardStringId.ActionExportTo" | "DashboardStringId.ActionExportToPdf" | "DashboardStringId.ActionExportToImage" | "DashboardStringId.ActionExportToExcel" | "DashboardStringId.RangeFilterCustomDateTimePeriod" | "DashboardStringId.ActionExportTemplate" | "DashboardStringId.ActionAllowMultiselection" | "DashboardStringId.DashboardNullValue" | "DashboardStringId.TopNOthersValue" | "DashboardStringId.DashboardErrorValue" | "DashboardStringId.DateTimeQuarterFormat" | "DashboardStringId.MessageLoading" | "DashboardStringId.ParametersFormCaption" | "DashboardStringId.ParametersSelectorText" | "DashboardStringId.ParametersFormAllowNullColumnCaption" | "DashboardStringId.ParametersFormValueColumnCaption" | "DashboardStringId.ParametersFormNameColumnCaption" | "DashboardStringId.ButtonOK" | "DashboardStringId.ButtonCancel" | "DashboardStringId.SelectDate" | "DashboardStringId.ButtonReset" | "DashboardStringId.ButtonSubmit" | "DashboardStringId.ButtonApply" | "DashboardStringId.ButtonExport" | "DashboardStringId.GridResetColumnWidths" | "DashboardStringId.GridSortAscending" | "DashboardStringId.GridSortDescending" | "DashboardStringId.GridClearSorting" | "DashboardStringId.PivotGridTotal" | "DashboardStringId.PivotGridGrandTotal" | "DashboardStringId.ChartTotalValue" | "DashboardStringId.PageLayout" | "DashboardStringId.PageLayoutAuto" | "DashboardStringId.PageLayoutPortrait" | "DashboardStringId.PageLayoutLandscape" | "DashboardStringId.PaperKind" | "DashboardStringId.PaperKindLetter" | "DashboardStringId.PaperKindLegal" | "DashboardStringId.PaperKindExecutive" | "DashboardStringId.PaperKindA5" | "DashboardStringId.PaperKindA4" | "DashboardStringId.PaperKindA3" | "DashboardStringId.ScaleMode" | "DashboardStringId.ScaleModeNone" | "DashboardStringId.ScaleModeUseScaleFactor" | "DashboardStringId.ScaleModeAutoFitToPagesWidth" | "DashboardStringId.AutoFitPageCount" | "DashboardStringId.ScaleFactor" | "DashboardStringId.PrintHeadersOnEveryPage" | "DashboardStringId.FitToPageWidth" | "DashboardStringId.SizeMode" | "DashboardStringId.SizeModeNone" | "DashboardStringId.SizeModeStretch" | "DashboardStringId.SizeModeZoom" | "DashboardStringId.AutoArrangeContent" | "DashboardStringId.ImageFormat" | "DashboardStringId.ExcelFormat" | "DashboardStringId.CsvValueSeparator" | "DashboardStringId.ExportFilters" | "DashboardStringId.ExportParameters" | "DashboardStringId.DashboardStatePosition" | "DashboardStringId.Resolution" | "DashboardStringId.ShowTitle" | "DashboardStringId.Title" | "DashboardStringId.FileName" | "DashboardStringId.FilterStatePresentationAfter" | "DashboardStringId.FilterStatePresentationAfterAndSplitPage" | "DashboardStringId.FilterStatePresentationSplitSheet" | "DashboardStringId.MessageCustomItemIsNotSupported" | "DashboardStringId.MessageGridHasNoData" | "DashboardStringId.MessagePivotHasNoData" | "DashboardStringId.SparklineTooltipStartValue" | "DashboardStringId.SparklineTooltipEndValue" | "DashboardStringId.SparklineTooltipMinValue" | "DashboardStringId.SparklineTooltipMaxValue" | "DashboardStringId.OpenCaption" | "DashboardStringId.HighCaption" | "DashboardStringId.LowCaption" | "DashboardStringId.CloseCaption" | "DashboardStringId.InitialExtent" | "DashboardStringId.FilterElementShowAllItem" | "DashboardStringId.NumericFormatUnitSymbolThousands" | "DashboardStringId.NumericFormatUnitSymbolMillions" | "DashboardStringId.NumericFormatUnitSymbolBillions" | "DashboardStringId.ActionSelectDateTimePeriod" | "DashboardStringId.RangeFilterSelectRange" | "DashboardStringId.FilterElementCheckedComboBoxNoDataCaption" | "DashboardStringId.FilterElementRadioComboBoxNoDataCaption" | "DashboardStringId.FilterElementNoDataToDisplay" | "DashboardStringId.RangeFilterSelectRangeFromCaption" | "DashboardStringId.RangeFilterSelectRangeToCaption" | "DashboardWebStringId.DashboardParameters" | "DashboardStringId.DataSourceDataMember" | "DashboardStringId.DescriptionMeasures" | "DashboardWebStringId.TextBoxFormatText" | "DashboardStringId.NumericFormatUnitCaption" | "DashboardWebStringId.SummaryType" | "DashboardStringId.CalculationTypeExpression" | "DevExpressWebStringId.CalculatedFieldDataType" | "DashboardStringId.ValueCaption" | "DashboardStringId.Value1Caption" | "DashboardStringId.Value2Caption" | "DashboardStringId.CommandFormatRuleTopBottom" | "DashboardStringId.CommandFormatRuleAboveBelowAverage" | "DashboardStringId.CommandFormatRuleBar" | "DashboardStringId.CommandFormatRuleColorRangeBar" | "DashboardStringId.CommandFormatRuleGradientRangeBar" | "DashboardStringId.FormatRuleStyleAppearance" | "DashboardStringId.FormatRuleStyleIcons" | "DashboardStringId.FormatRuleNegativeStyle" | "DashboardStringId.CommandFormatRuleExpression" | "DashboardWebStringId.TopNMode" | "DashboardStringId.CommandFormatRuleRangeSet" | "DashboardStringId.CommandFormatRuleValue" | "DashboardStringId.CommandFormatRuleDateOccurring" | "DashboardWebStringId.ConditionalFormatting.Appearance.BackColor" | "DashboardWebStringId.ConditionalFormatting.Appearance.ForeColor" | "DashboardStringId.DescriptionBoundImageAttribute" | "DashboardWebStringId.ShowCaptionText" | "DashboardWebStringId.DisplayItemAsPage" | "DashboardStringId.DefaultNameItemGroup" | "DashboardStringId.DefaultNameTabContainerItem" | "DashboardStringId.DefaultDataSourceName" | "DashboardWebStringId.CrossDataSourceFiltering" | "DashboardStringId.RangeFilterCalculationAlongSeries" | "DashboardStringId.RangeFilterCalculationAlongArgument" | "DashboardStringId.DescriptionItemSeries" | "DashboardStringId.DescriptionSeries" | "DashboardWebStringId.Chart.SeriesType" | "DashboardStringId.DescriptionDimensions" | "DashboardWebStringId.TreeView.AutoExpand" | "DashboardWebStringId.ConditionalFormatting.ConditionMinimum" | "DashboardWebStringId.ConditionalFormatting.ConditionMaximum" | "DashboardStringId.DescriptionItemDimension" | "DashboardStringId.DescriptionItemMeasure" | "DashboardWebStringId.Grid.MergeCells" | "DashboardWebStringId.Grid.ColumnWidthMode" | "DashboardWebStringId.Grid.BandedRows" | "DashboardWebStringId.Grid.VerticalLines" | "DashboardWebStringId.Grid.HorizontalLines" | "DashboardWebStringId.Grid.ColumnHeaders" | "DashboardWebStringId.Grid.WordWrap" | "DashboardStringId.ActualValueCaption" | "DashboardStringId.TargetValueCaption" | "DashboardStringId.UriPatternCaption" | "DashboardStringId.UriCaption" | "DashboardStringId.DisplayValueCaption" | "DashboardStringId.WeightCaption" | "DashboardStringId.DescriptionItemColor" | "DashboardStringId.Latitude" | "DashboardStringId.Longitude" | "DashboardWebStringId.GeoPointMapClusterization" | "DashboardWebStringId.MapLockNavigation" | "DashboardWebStringId.WeightedLegendGalleryGroup" | "DashboardStringId.DescriptionItemArgument" | "DashboardWebStringId.PieMapIsWeighted" | "DashboardWebStringId.InteractivityOptions.IgnoreMasterFilters" | "DashboardWebStringId.InteractivityOptions.DrillDown" | "DashboardWebStringId.Pie.ShowCaptions" | "DashboardStringId.DescriptionColumns" | "DashboardStringId.DescriptionRows" | "DashboardStringId.DescriptionValues" | "DashboardStringId.DescriptionArguments" | "DashboardStringId.TextGroupIntervalAlphabetical" | "DashboardStringId.ActionMaximizeDashboardItem" | "DashboardStringId.ActionRestoreDashboardItem" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataSource" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.ValueMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DisplayMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.SortOrder" | "DevExpress.DashboardCommon.DashboardParameter.Visible" | "DevExpress.DashboardCommon.DashboardParameter.Description" | "DevExpress.DashboardCommon.DashboardParameter.AllowMultiselect" | "DevExpress.DashboardCommon.DashboardParameter.AllowNull" | "DevExpress.DashboardCommon.DashboardParameter.SelectAllValues" | "DevExpress.DashboardCommon.StaticListLookUpSettings.Values" | "DevExpress.DashboardCommon.DimensionSortOrder.Ascending" | "DevExpress.DashboardCommon.DimensionSortOrder.Descending" | "DevExpress.DashboardCommon.DimensionSortOrder.None" | "DashboardWebStringId.AccordionTab.ScatterChartPointLabelOptions" | "DashboardWebStringId.AccordionTab.ChoroplethMapShapeLabelsAttribute" | "DashboardStringId.CommandFormatRuleTopN" | "DashboardWebStringId.Type" | "DashboardWebStringId.Grid.ColumnWidth" | "DashboardWebStringId.AccordionTab.ShowTotals" | "DashboardWebStringId.AccordionTab.Layout" | "DashboardWebStringId.AccordionTab.PivotInitialState" | "DashboardWebStringId.AccordionTab.ImageOptions" | "DashboardWebStringId.AccordionTab.Labels" | "DashboardWebStringId.AccordionTab.MapLegend" | "DashboardWebStringId.AccordionTab.WeightedLegend" | "DashboardWebStringId.AccordionTab.Common" | "DashboardWebStringId.AccordionTab.ChartLegend" | "DashboardWebStringId.Grid.AutoFitToContentsColumnWidthMode" | "DashboardWebStringId.Grid.AutoFitToGridColumnWidthMode" | "DashboardWebStringId.Grid.ManualGridColumnWidthMode" | "DashboardStringId.DateTimeIntervalYear" | "DashboardStringId.DateTimeIntervalQuarter" | "DashboardStringId.DateTimeIntervalMonth" | "DashboardStringId.DateTimeIntervalWeek" | "DashboardStringId.DateTimeIntervalDay" | "DashboardStringId.DateTimeIntervalHour" | "DashboardStringId.DateTimeIntervalMinute" | "DashboardStringId.DateTimeIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalYear" | "DashboardStringId.DateTimeGroupIntervalQuarter" | "DashboardStringId.DateTimeGroupIntervalMonth" | "DashboardStringId.DateTimeGroupIntervalDay" | "DashboardStringId.DateTimeGroupIntervalHour" | "DashboardStringId.DateTimeGroupIntervalMinute" | "DashboardStringId.DateTimeGroupIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalDayOfYear" | "DashboardStringId.DateTimeGroupIntervalDayOfWeek" | "DashboardStringId.DateTimeGroupIntervalWeekOfYear" | "DashboardStringId.DateTimeGroupIntervalWeekOfMonth" | "DashboardStringId.DateTimeGroupIntervalMonthYear" | "DashboardStringId.DateTimeGroupIntervalQuarterYear" | "DashboardStringId.DateTimeGroupIntervalWeekYear" | "DashboardStringId.DateTimeGroupIntervalDayMonthYear" | "DashboardStringId.DateTimeGroupIntervalDateHour" | "DashboardStringId.DateTimeGroupIntervalDateHourMinute" | "DashboardStringId.DateTimeGroupIntervalDateHourMinuteSecond" | "DashboardStringId.DateTimeGroupIntervalExactDate" | "DashboardStringId.GroupIntervalNone" | "DashboardWebStringId.Treemap.StripedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SquarifiedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SliceAndDiceLayoutAlgorithm" | "DashboardWebStringId.Treemap.TileLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.TileLabelsNone" | "DashboardWebStringId.Treemap.TileLabelsValue" | "DashboardWebStringId.Treemap.TileLabelsArgument" | "DashboardWebStringId.Treemap.TileTooltipsArgumentAndValue" | "DashboardWebStringId.Treemap.TileTooltipsArgument" | "DashboardWebStringId.Treemap.TileTooltipsValue" | "DashboardWebStringId.Treemap.TileTooltipsNone" | "DashboardWebStringId.Treemap.TopLeftToBottomRightLayoutDirection" | "DashboardWebStringId.Treemap.TopRightToBottomLeftLayoutDirection" | "DashboardWebStringId.Treemap.BottomLeftToTopRightLayoutDirection" | "DashboardWebStringId.Treemap.BottomRightToTopLeftLayoutDirection" | "DashboardWebStringId.Treemap.LayoutDirection" | "DashboardWebStringId.Treemap.GroupLabelsNone" | "DashboardWebStringId.Treemap.GroupLabelsArgument" | "DashboardWebStringId.Treemap.GroupLabelsValue" | "DashboardWebStringId.Treemap.GroupLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.GroupTooltipsNone" | "DashboardWebStringId.Treemap.GroupTooltipsArgument" | "DashboardWebStringId.Treemap.GroupTooltipsValue" | "DashboardWebStringId.Treemap.GroupTooltipsArgumentAndValue" | "DashboardStringId.RankOrderAscending" | "DashboardStringId.RankOrderDescending" | "DashboardStringId.DateTimeFormatYearFormatDefaultCaption" | "DashboardStringId.DateTimeFormatYearFormatFullCaption" | "DashboardStringId.DateTimeFormatYearFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatQuarterFormatDefaultCaption" | "DashboardStringId.DateTimeFormatQuarterFormatNumericCaption" | "DashboardStringId.DateTimeFormatQuarterFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatDefaultCaption" | "DashboardStringId.DateTimeFormatMonthFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatMonthFormatNumericCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatFullCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatNumericCaption" | "DashboardStringId.DateTimeFormatDateFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateFormatLongCaption" | "DashboardStringId.DateTimeFormatDateFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatLongCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption" | "DashboardStringId.ExactDateFormatYear" | "DashboardStringId.ExactDateFormatQuarter" | "DashboardStringId.ExactDateFormatMonth" | "DashboardStringId.ExactDateFormatDay" | "DashboardStringId.ExactDateFormatHour" | "DashboardStringId.ExactDateFormatMinute" | "DashboardStringId.ExactDateFormatSecond" | "DashboardWebStringId.FormatType" | "DashboardWebStringId.TopN.Top" | "DashboardWebStringId.TopN.Bottom" | "DashboardWebStringId.DimensionSortBy" | "DashboardStringId.NumericFormatUnitAutoCaption" | "DashboardStringId.NumericFormatFormatTypeAutoCaption" | "DashboardStringId.NumericFormatFormatTypeGeneralCaption" | "DashboardStringId.NumericFormatFormatTypeNumberCaption" | "DashboardStringId.NumericFormatFormatTypeCurrencyCaption" | "DashboardStringId.NumericFormatFormatTypeScientificCaption" | "DashboardStringId.NumericFormatFormatTypePercentCaption" | "DashboardStringId.NumericFormatUnitOnesCaption" | "DashboardStringId.NumericFormatUnitThousandsCaption" | "DashboardStringId.NumericFormatUnitMillionsCaption" | "DashboardStringId.NumericFormatUnitBillionsCaption" | "DashboardStringId.DeltaValueTypeActualValueCaption" | "DashboardStringId.DeltaValueTypeAbsoluteVariationCaption" | "DashboardStringId.DeltaValueTypePercentVariationCaption" | "DashboardStringId.DeltaValueTypePercentOfTargetCaption" | "DashboardStringId.DeltaValueTypeTargetValueCaption" | "DashboardStringId.DeltaIndicationModeGreaterIsGoodCaption" | "DashboardStringId.DeltaIndicationModeLessIsGoodCaption" | "DashboardStringId.DeltaIndicationModeWarningIfGreaterCaption" | "DashboardStringId.DeltaIndicationModeWarningIfLessCaption" | "DashboardStringId.DeltaIndicationModeNoIndicationCaption" | "DashboardStringId.DeltaThresholdTypeAbsolute" | "DashboardStringId.DeltaThresholdTypePercent" | "DashboardStringId.CommandDimensionGroupChildValues" | "DashboardStringId.SeriesTypeBar" | "DashboardStringId.SeriesTypeStackedBar" | "DashboardStringId.SeriesTypeFullStackedBar" | "DashboardStringId.SeriesTypePoint" | "DashboardStringId.SeriesTypeLine" | "DashboardStringId.SeriesTypeStackedLine" | "DashboardStringId.SeriesTypeFullStackedLine" | "DashboardStringId.SeriesTypeStepLine" | "DashboardStringId.SeriesTypeSpline" | "DashboardStringId.SeriesTypeArea" | "DashboardStringId.SeriesTypeStackedArea" | "DashboardStringId.SeriesTypeFullStackedArea" | "DashboardStringId.SeriesTypeStepArea" | "DashboardStringId.SeriesTypeSplineArea" | "DashboardStringId.SeriesTypeStackedSplineArea" | "DashboardStringId.SeriesTypeFullStackedSplineArea" | "DashboardWebStringId.Chart.ShowLegend" | "DashboardStringId.DefaultNameBoundImageItem" | "DashboardStringId.DefaultNameImageItem" | "DashboardStringId.DefaultNameTextBoxItem" | "DashboardStringId.DefaultNameCardItem" | "DashboardStringId.DefaultNameChartItem" | "DashboardStringId.DefaultNameComboBoxItem" | "DashboardStringId.DefaultNameListBoxItem" | "DashboardStringId.DefaultNameTreeViewItem" | "DashboardStringId.DefaultNameGaugeItem" | "DashboardStringId.DefaultNameGridItem" | "DashboardStringId.GridHyperlinkUriPatternErrorMessage" | "DashboardWebStringId.DefaultNameBubbleMapItem" | "DashboardWebStringId.DefaultNameChoroplethMapItem" | "DashboardWebStringId.DefaultNameGeoPointMapItem" | "DashboardWebStringId.DefaultNamePieMapItem" | "DashboardStringId.DefaultNamePieItem" | "DashboardStringId.DefaultNamePivotItem" | "DashboardStringId.DefaultNameRangeFilterItem" | "DashboardStringId.DefaultNameScatterChartItem" | "DashboardStringId.DefaultNameTreemapItem" | "DashboardStringId.DescriptionMaps" | "DashboardStringId.EntireRangePeriodCaption" | "DashboardStringId.CalculationTypePercentOfTotal" | "DashboardStringId.CalculationTypeDifference" | "DashboardStringId.CalculationTypePercentageDifference" | "DashboardStringId.CalculationTypeRunningTotal" | "DashboardStringId.CalculationTypeMovingCalculation" | "DashboardStringId.CalculationTypeRank" | "DashboardStringId.ColorPaletteIndex" | "DashboardStringId.DifferenceCalculationTargetPrevious" | "DashboardStringId.DifferenceCalculationTargetNext" | "DashboardStringId.DifferenceCalculationTargetFirst" | "DashboardStringId.DifferenceCalculationTargetLast" | "DashboardStringId.SummaryTypeCount" | "DashboardStringId.SummaryTypeSum" | "DashboardStringId.SummaryTypeMin" | "DashboardStringId.SummaryTypeMax" | "DashboardStringId.SummaryTypeAverage" | "DashboardStringId.SummaryTypeStdDev" | "DashboardStringId.SummaryTypeStdDevp" | "DashboardStringId.SummaryTypeVar" | "DashboardStringId.SummaryTypeVarp" | "DashboardStringId.SummaryTypeCountDistinct" | "DashboardStringId.SummaryTypeMedian" | "DashboardStringId.SummaryTypeMode" | "DashboardStringId.RankTypeUnique" | "DashboardStringId.RankTypeCompetition" | "DashboardStringId.RankTypeDense" | "DashboardStringId.RankTypeModified" | "DashboardStringId.RankTypePercentile" | "DashboardStringId.CardCalculationAlongCards" | "DashboardStringId.CardCalculationAlongSparklineArgument" | "DashboardStringId.CardCalculationAlongCardsAndSparklineArgument" | "DashboardStringId.CardCalculationAlongSparklineArgumentAndCards" | "DashboardStringId.ChartCalculationAlongArguments" | "DashboardStringId.ChartCalculationAlongSeries" | "DashboardStringId.ChartCalculationAlongArgumentsAndSeries" | "DashboardStringId.ChartCalculationAlongSeriesAndArguments" | "DashboardStringId.GridCalculationAlongRows" | "DashboardStringId.GridCalculationAlongSparklineArgument" | "DashboardStringId.GridCalculationAlongRowsAndSparklineArgument" | "DashboardStringId.GridCalculationAlongSparklineArgumentAndRows" | "DashboardStringId.PivotCalculationAlongColumns" | "DashboardStringId.PivotCalculationAlongRows" | "DashboardStringId.PivotCalculationAlongColumnsAndRows" | "DashboardStringId.PivotCalculationAlongRowsAndColumns" | "DashboardStringId.PivotCalculationAlongGroupsInColumns" | "DashboardStringId.PivotCalculationAlongGroupsInRows" | "DashboardStringId.PivotCalculationAlongGroupsInColumnsAndRows" | "DashboardStringId.PivotCalculationAlongGroupsInRowsAndColumns" | "DashboardStringId.PieCalculationAlongArguments" | "DashboardStringId.PieCalculationAlongSeries" | "DashboardStringId.PieCalculationAlongArgumentsAndSeries" | "DashboardStringId.PieCalculationAlongSeriesAndArguments" | "DashboardStringId.RangeFilterCalculationAlongArgumentAndSeries" | "DashboardStringId.RangeFilterCalculationAlongSeriesAndArgument" | "DashboardStringId.GaugeCalculationAlongGauges" | "DashboardStringId.ScatterCalculationAlongArguments" | "DashboardStringId.CalculationAlongSpecificDimensions" | "DashboardStringId.CalculatedFieldTypeString" | "DashboardStringId.CalculatedFieldTypeLong" | "DashboardStringId.CalculatedFieldTypeDecimal" | "DashboardStringId.CalculatedFieldTypeBoolean" | "DashboardStringId.CalculatedFieldTypeDateTime" | "DashboardStringId.CalculatedFieldTypeDouble" | "DashboardStringId.CalculatedFieldTypeAuto" | "DashboardStringId.CalculatedFieldTypeObject" | "DashboardStringId.DefaultEFDataSourceName" | "DashboardStringId.DefaultExcelDataSourceName" | "DashboardStringId.DefaultFileExtractDataSourceName" | "DashboardStringId.DefaultObjectDataSourceName" | "DashboardStringId.DefaultOlapDataSourceName" | "DashboardStringId.DefaultSqlDataSourceName" | "DashboardStringId.DefaultJsonDataSourceName" | "DashboardStringId.DefaultXpoDataSourceName" | "DashboardStringId.OlapRaggedHierarchyNoneItemCaption" | "DashboardStringId.FormatRuleApplyToColumn" | "DashboardStringId.SeriesTypeSideBySideRangeBar" | "DashboardStringId.SeriesTypeRangeArea" | "DashboardStringId.SeriesTypeHighLowClose" | "DashboardStringId.SeriesTypeCandleStick" | "DashboardStringId.SeriesTypeStock" | "DashboardWebStringId.StyleSettings" | "DashboardStringId.ParametersFormCalendarTodayButton" | "DashboardStringId.TreemapLabelArgumentTemplate" | "DashboardStringId.TreemapLabelValueTemplate" | "DashboardStringId.SearchNullValuePrompt" | "DashboardStringId.CustomItems" | "DashboardStringId.FormatRuleAllowNegativeAxis" | "DashboardStringId.FormatRuleDrawAxis" | "DashboardStringId.FormatRuleShowBarOnly" | "DashboardStringId.CommandFormatRuleBottomN" | "DashboardStringId.FormatConditionAppearanceNone" | "DashboardStringId.FormatConditionAppearanceCustom" | "DashboardStringId.FormatConditionAppearancePaleRed" | "DashboardStringId.FormatConditionAppearancePaleYellow" | "DashboardStringId.FormatConditionAppearancePaleGreen" | "DashboardStringId.FormatConditionAppearancePaleBlue" | "DashboardStringId.FormatConditionAppearancePalePurple" | "DashboardStringId.FormatConditionAppearancePaleCyan" | "DashboardStringId.FormatConditionAppearancePaleOrange" | "DashboardStringId.FormatConditionAppearancePaleGray" | "DashboardStringId.FormatConditionAppearanceRed" | "DashboardStringId.FormatConditionAppearanceYellow" | "DashboardStringId.FormatConditionAppearanceGreen" | "DashboardStringId.FormatConditionAppearanceBlue" | "DashboardStringId.FormatConditionAppearancePurple" | "DashboardStringId.FormatConditionAppearanceCyan" | "DashboardStringId.FormatConditionAppearanceOrange" | "DashboardStringId.FormatConditionAppearanceGray" | "DashboardStringId.FormatConditionAppearanceGradientRed" | "DashboardStringId.FormatConditionAppearanceGradientYellow" | "DashboardStringId.FormatConditionAppearanceGradientGreen" | "DashboardStringId.FormatConditionAppearanceGradientBlue" | "DashboardStringId.FormatConditionAppearanceGradientPurple" | "DashboardStringId.FormatConditionAppearanceGradientCyan" | "DashboardStringId.FormatConditionAppearanceGradientOrange" | "DashboardStringId.FormatConditionAppearanceGradientTransparent" | "DashboardStringId.FormatConditionAppearanceFontBold" | "DashboardStringId.FormatConditionAppearanceFontItalic" | "DashboardStringId.FormatConditionAppearanceFontUnderline" | "DashboardStringId.FormatConditionAppearanceFontGrayed" | "DashboardStringId.FormatConditionAppearanceFontRed" | "DashboardStringId.FormatConditionAppearanceFontYellow" | "DashboardStringId.FormatConditionAppearanceFontGreen" | "DashboardStringId.FormatConditionAppearanceFontBlue" | "DashboardStringId.IntersectionLevelModeFirst" | "DashboardStringId.IntersectionLevelModeLast" | "DashboardStringId.IntersectionLevelModeAuto" | "DashboardStringId.IntersectionLevelModeAll" | "DashboardStringId.IntersectionLevelModeSpecific" | "DashboardStringId.FormatRuleApplyToRow" | "DashboardStringId.FormatRuleApplyTo" | "DashboardWebStringId.FilterItem.AllowEmptyFilter" | "DashboardStringId.FormatConditionAppearanceFontStrikeout" | "DashboardStringId.FormatConditionAutomaticValueType" | "DashboardStringId.FormatConditionNumberValueType" | "DashboardStringId.FormatConditionPercentValueType" | "DashboardStringId.CommandFormatRuleRangeIcons" | "DashboardStringId.CommandFormatRuleGreaterThan" | "DashboardStringId.CommandFormatRuleGreaterThanOrEqualTo" | "DashboardStringId.CommandFormatRuleLessThan" | "DashboardStringId.CommandFormatRuleLessThanOrEqualTo" | "DashboardStringId.CommandFormatRuleEqualTo" | "DashboardStringId.CommandFormatRuleNotEqualTo" | "DashboardStringId.CommandFormatRuleBetween" | "DashboardStringId.CommandFormatRuleNotBetween" | "DashboardStringId.CommandFormatRuleBetweenOrEqual" | "DashboardStringId.CommandFormatRuleNotBetweenOrEqual" | "DashboardStringId.CommandFormatRuleContains" | "DashboardStringId.ColorAutoAssigned" | "DashboardStringId.CalculationTypeNone" | "DashboardStringId.UndoText" | "DashboardStringId.RedoText" | "DashboardStringId.DashboardCurrencyUseCurrentCurrency" | "DashboardStringId.CommandDimensionSortModeDisplayText" | "DashboardStringId.CommandDimensionSortModeValue" | "DashboardStringId.CommandDimensionSortModeID" | "DashboardStringId.CommandDimensionSortModeKey" | "DashboardWebStringId.Chart.AddPane" | "DashboardStringId.MapShapeNoneAttribute" | "DashboardStringId.DefaultPeriodName" | "DashboardStringId.CardLayoutTemplateStretchedCaption" | "DashboardStringId.CardLayoutTemplateCenteredCaption" | "DashboardStringId.CardLayoutTemplateCompactCaption" | "DashboardStringId.CardLayoutTemplateLightweightCaption" | "DashboardStringId.CardLayoutTemplateCustomCaption" | "DashboardStringId.CardLayoutTemplateNoneCaption" | "DashboardStringId.CardRowDataElementTypeTitleCaption" | "DashboardStringId.CardRowDataElementTypeSubtitleCaption" | "DashboardStringId.CardRowDataElementTypeActualValueCaption" | "DashboardStringId.CardRowDataElementTypeTargetValueCaption" | "DashboardStringId.CardRowDataElementTypeAbsoluteVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentOfTargetCaption" | "DashboardStringId.CardRowDataElementTypeDimensionValueCaption" | "DashboardStringId.CardRowDataElementTypeCardNameCaption" | "DashboardStringId.CardRowDataElementTypeDeltaIndicatorCaption" | "DashboardStringId.CardRowDataElementTypeSparklineCaption" | "DashboardStringId.FormatRuleApplyToAllElements" | "DashboardWebStringId.Pie.LabelPosition" | "DashboardWebStringId.Pie.LabelPositionOutside" | "DashboardWebStringId.Pie.LabelPositionInside" | "DashboardStringId.IncludeExportDashboardState" | "DashboardStringId.PointLabelContentTypeArgument" | "DashboardStringId.PointLabelContentTypeSeriesName" | "DashboardStringId.PointLabelContentTypeValue" | "DashboardStringId.PointLabelContentTypePercent" | "DashboardWebStringId.DashboardMenu" | "DashboardWebStringId.DashboardMenuNew" | "DashboardWebStringId.DashboardMenuOpen" | "DashboardWebStringId.DashboardMenuSave" | "DashboardWebStringId.DashboardMenuCurrency" | "DashboardWebStringId.DashboardMenuDataSources" | "DashboardWebStringId.DashboardMenuColorScheme" | "DashboardWebStringId.DashboardMenuNewDashboardCreate" | "DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder" | "DashboardWebStringId.Binding.DefaultEmptyPlaceholder" | "DashboardWebStringId.Binding.DefaultSelectedPlaceholder" | "DashboardWebStringId.Binding.DataFiltering" | "DashboardWebStringId.Binding.Argument" | "DashboardWebStringId.Binding.Attribute" | "DashboardWebStringId.Binding.Sparkline" | "DashboardWebStringId.Binding.Columns" | "DashboardWebStringId.Binding.TooltipDimensions" | "DashboardWebStringId.Binding.TooltipMeasures" | "DashboardWebStringId.Binding.HiddenDimensions" | "DashboardWebStringId.Binding.HiddenMeasures" | "DashboardWebStringId.Binding.AddDimension" | "DashboardWebStringId.Binding.AddMeasure" | "DashboardWebStringId.Binding.AddColumn" | "DashboardWebStringId.Binding.AddRow" | "DashboardWebStringId.Binding.AddValue" | "DashboardWebStringId.Binding.AddSeries" | "DashboardWebStringId.Binding.SetLatitude" | "DashboardWebStringId.Binding.SetLongitude" | "DashboardWebStringId.Binding.SetArgument" | "DashboardWebStringId.Binding.AddArgument" | "DashboardWebStringId.Binding.SetWeight" | "DashboardWebStringId.Binding.SetColor" | "DashboardWebStringId.Binding.SetAttribute" | "DashboardWebStringId.Binding.SetValue" | "DashboardWebStringId.Binding.XAxis" | "DashboardWebStringId.Binding.YAxis" | "DashboardWebStringId.Binding.ConfigureDimension" | "DashboardWebStringId.Binding.ConfigureMeasure" | "DashboardWebStringId.Binding.ConfigureSeries" | "DashboardWebStringId.Binding.ConfigureArgument" | "DashboardWebStringId.Binding.ConfigureValue" | "DashboardWebStringId.Binding.ConfigureAttribute" | "DashboardWebStringId.Binding.ConfigureLatitude" | "DashboardWebStringId.Binding.ConfigureLongitude" | "DashboardWebStringId.Binding.ConfigureColumn" | "DashboardWebStringId.Binding.ConfigureRow" | "DashboardWebStringId.Binding.ConfigureWeight" | "DashboardWebStringId.Binding.ConfigureColor" | "DashboardWebStringId.Binding.ShowAll" | "DashboardWebStringId.ColorScheme.Color" | "DashboardWebStringId.ColorScheme.Colors" | "DashboardWebStringId.Parameters.ParameterList" | "DashboardWebStringId.Parameters.AddParameter" | "DashboardWebStringId.Parameters.AddParameter.Tooltip" | "DashboardWebStringId.Parameters.NoSelectedParameter" | "DashboardWebStringId.Parameters.Reorder" | "DashboardWebStringId.Parameters.Done" | "DashboardWebStringId.Currency.Currency" | "DashboardWebStringId.Currency.CurrencyCulture" | "DashboardWebStringId.Currency.DefaultCurrencyWarning" | "DashboardWebStringId.Preview" | "DashboardWebStringId.Add" | "DashboardWebStringId.DataSources.UsedDataSources" | "DashboardWebStringId.DataSources.DataItems" | "DashboardWebStringId.DataSources.AddQuery" | "DashboardWebStringId.DataSources.AddCalculatedField" | "DashboardWebStringId.DataSources.AddDataSource" | "DashboardWebStringId.DataSources.NoUsedDataSources" | "DashboardWebStringId.DataSources.NoAvailableDataSources" | "DashboardWebStringId.DataSources.ChooseDataSource" | "DashboardWebStringId.DataSources.CreateDataSource" | "DashboardWebStringId.DataSources.CreateNewDataSource" | "DashboardWebStringId.DataSources.CreateDataSource.Tooltip" | "DashboardWebStringId.DataSources.EditCalculatedField" | "DashboardWebStringId.DataSources.CalculatedField.Name" | "DashboardWebStringId.DataSources.CalculatedField.FieldType" | "DashboardWebStringId.DataSources.CalculatedField.UniqueNameError" | "DashboardWebStringId.DataSources.CalculatedField.Corrupted" | "DashboardWebStringId.DataSources.Edit" | "DashboardStringId.MessageCollectionTypesNotSupported" | "DashboardWebStringId.New.DashboardName" | "DashboardWebStringId.Bindings" | "DashboardWebStringId.Interactivity" | "DashboardWebStringId.Options" | "DashboardWebStringId.Remove" | "DashboardWebStringId.MasterFilterMode" | "DashboardWebStringId.Title.Text" | "DashboardWebStringId.Title.Visible" | "DashboardWebStringId.Title.IncludeMasterFilter" | "DashboardWebStringId.Title.Aligment" | "DashboardWebStringId.Title.Image" | "DashboardWebStringId.DataSources.Cancel" | "DashboardWebStringId.DataSources.IncludeToTheDashboard" | "DashboardWebStringId.DataSources.AvailableDataSourcesError" | "DashboardWebStringId.DataSources.DashboardDataSourceWizard" | "DashboardWebStringId.Viewer" | "DashboardWebStringId.Loading" | "DashboardWebStringId.ClickHereInvitation" | "DashboardWebStringId.BindDataInvitation" | "DashboardWebStringId.AddItemInvitation" | "DashboardWebStringId.Parameters.Values" | "DashboardWebStringId.Binding.Cards" | "DashboardWebStringId.Binding.AddCard" | "DashboardWebStringId.Binding.ConfigureCard" | "DashboardWebStringId.Binding.AddValues" | "DashboardWebStringId.Binding.ConfigureValues" | "DashboardWebStringId.Binding.Maps" | "DashboardWebStringId.Binding.AddMap" | "DashboardWebStringId.Binding.ConfigureMap" | "DashboardWebStringId.Binding.Gauges" | "DashboardWebStringId.Binding.AddGauge" | "DashboardWebStringId.Binding.ConfigureGauge" | "DashboardWebStringId.InteractivityOptions" | "DashboardWebStringId.Binding.Values" | "DashboardWebStringId.Binding.RemovePane" | "DashboardWebStringId.ClickToSetFilterCriteria" | "DashboardWebStringId.DataSources.OK" | "DashboardWebStringId.DataSources.Save" | "DashboardWebStringId.Cards.ArrangementMode" | "DashboardWebStringId.Cards.ArrangementMode.Auto" | "DashboardWebStringId.Cards.ArrangementMode.FixedRows" | "DashboardWebStringId.Cards.ArrangementMode.FixedColumns" | "DashboardWebStringId.Cards.LineCount" | "DashboardWebStringId.ConditionalFormatting" | "DashboardWebStringId.CollectionEditor.NoItems" | "DashboardWebStringId.CollectionEditor.Totals.NoItems" | "DashboardWebStringId.CollectionEditor.Parameters.NoItems" | "DashboardWebStringId.PivotGrid.AutoExpandColumnGroups" | "DashboardWebStringId.PivotGrid.AutoExpandRowGroups" | "DashboardWebStringId.PivotGrid.ColumnGrandTotals" | "DashboardWebStringId.PivotGrid.RowGrandTotals" | "DashboardWebStringId.PivotGrid.ColumnTotals" | "DashboardWebStringId.PivotGrid.RowTotals" | "DashboardWebStringId.PivotGrid.ValuesPosition" | "DashboardWebStringId.PivotGrid.ValuesPositionColumns" | "DashboardWebStringId.PivotGrid.ValuesPositionRows" | "DashboardWebStringId.PivotGrid.RowTotalsPosition" | "DashboardWebStringId.PivotGrid.RowTotalsPositionBottom" | "DashboardWebStringId.PivotGrid.RowTotalsPositionTop" | "DashboardWebStringId.PivotGrid.ColumnTotalsPosition" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionFar" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionNear" | "DashboardWebStringId.PivotGrid.LayoutType" | "DashboardWebStringId.PivotGrid.LayoutTypeCompact" | "DashboardWebStringId.PivotGrid.LayoutTypeTabular" | "DashboardWebStringId.Options.Caption" | "DashboardWebStringId.InteractivityOptions.IsMasterFilter" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.None" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Single" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Multiple" | "DashboardWebStringId.InteractivityOptions.TargetDimensions" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Arguments" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Series" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Points" | "DashboardWebStringId.ColoringOptions" | "DashboardWebStringId.DataSources.Filter" | "DashboardWebStringId.Chart.Rotated" | "DashboardWebStringId.Chart.Panes" | "DashboardWebStringId.Chart.Legend" | "DashboardWebStringId.Chart.AxisX" | "DashboardWebStringId.Chart.AxisY" | "DashboardWebStringId.Chart.AxisYSecondary" | "DashboardWebStringId.Chart.PointLabelOptions" | "DashboardWebStringId.Chart.AxisXMeasure" | "DashboardWebStringId.Chart.AxisYMeasure" | "DashboardWebStringId.Chart.Weight" | "DashboardWebStringId.Chart.Content" | "DashboardWebStringId.Chart.ArgumentAndWeight" | "DashboardWebStringId.Chart.ArgumentAndValues" | "DashboardWebStringId.Chart.Reverse" | "DashboardWebStringId.Chart.Visible" | "DashboardWebStringId.Chart.Title" | "DashboardWebStringId.Chart.TitleText" | "DashboardWebStringId.Chart.EnableZooming" | "DashboardWebStringId.Chart.LimitVisiblePoints" | "DashboardWebStringId.Chart.VisiblePointsCount" | "DashboardWebStringId.Chart.AlwaysShowZeroLevel" | "DashboardWebStringId.Chart.GridLines" | "DashboardWebStringId.Chart.LogarithmicScale" | "DashboardWebStringId.Chart.LogarithmicScaleBase" | "DashboardWebStringId.Chart.LogarithmicScaleBase2" | "DashboardWebStringId.Chart.LogarithmicScaleBase5" | "DashboardWebStringId.Chart.LogarithmicScaleBase10" | "DashboardWebStringId.Chart.Position" | "DashboardWebStringId.Chart.IsInsideOfDiagram" | "DashboardWebStringId.Chart.PrimaryAxisY" | "DashboardWebStringId.Chart.SecondaryAxisY" | "DashboardWebStringId.Chart.Name" | "DashboardWebStringId.Chart.PlotOnSecondaryAxis" | "DashboardWebStringId.Chart.IgnoreEmptyPoints" | "DashboardWebStringId.Chart.ShowPointMarkers" | "DashboardWebStringId.Chart.Value" | "DashboardWebStringId.Chart.ShowZeroValues" | "DashboardWebStringId.Chart.OverlappingMode" | "DashboardWebStringId.Chart.Orientation" | "DashboardWebStringId.Chart.ShowPointLablels" | "DashboardWebStringId.Chart.TooltipContent" | "DashboardWebStringId.Chart.LabelContent" | "DashboardWebStringId.Card.SparklineOptions" | "DashboardWebStringId.Card.SparklineVisible" | "DashboardWebStringId.Chart.Position.TopLeftVertical" | "DashboardWebStringId.Chart.Position.TopLeftHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterHorizontal" | "DashboardWebStringId.Chart.Position.TopRightVertical" | "DashboardWebStringId.Chart.Position.TopRightHorizontal" | "DashboardWebStringId.Chart.Position.BottomLeftVertical" | "DashboardWebStringId.Chart.Position.BottomLeftHorizontal" | "DashboardWebStringId.Chart.Position.BottomCenterHorizontal" | "DashboardWebStringId.Chart.Position.BottomRightVertical" | "DashboardWebStringId.Chart.Position.BottomRightHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterVertical" | "DashboardWebStringId.Chart.Position.BottomCenterVertical" | "DashboardWebStringId.FilterItem.Type" | "DashboardWebStringId.FilterItem.Type.Standard" | "DashboardWebStringId.FilterItem.Type.Checked" | "DashboardWebStringId.FilterItem.Type.Radio" | "DashboardWebStringId.FilterItem.ShowAllValue" | "DashboardWebStringId.FilterItem.EnableSearch" | "DashboardWebStringId.Gauge.Min" | "DashboardWebStringId.Gauge.Max" | "DashboardWebStringId.Gauge.ScaleOptions" | "DashboardWebStringId.Gauge.Type" | "DashboardWebStringId.Gauge.Type.FullQuarterGauge" | "DashboardWebStringId.Gauge.Type.HalfCircular" | "DashboardWebStringId.Gauge.Type.LeftQuarterCircular" | "DashboardWebStringId.Gauge.Type.RightQuarterCircular" | "DashboardWebStringId.Gauge.Type.ThreeFourthCircular" | "DashboardWebStringId.Gauge.Type.LinearHorizontal" | "DashboardWebStringId.Gauge.Type.LinearVertical" | "DashboardWebStringId.Gauge.Captions" | "DashboardWebStringId.Gauge.Scale.Custom" | "DashboardWebStringId.Gauge.Scale.Auto" | "DashboardWebStringId.Grid.ColumnType" | "DashboardWebStringId.Grid.DisplayMode" | "DashboardWebStringId.Grid.DisplayMode.Value" | "DashboardWebStringId.Grid.DisplayMode.Bar" | "DashboardWebStringId.Grid.DisplayMode.Text" | "DashboardWebStringId.Grid.DisplayMode.Image" | "DashboardWebStringId.Grid.FixedWidth" | "DashboardWebStringId.Grid.WidthType" | "DashboardWebStringId.Grid.WidthType.Weight" | "DashboardWebStringId.Grid.WidthType.FitToContent" | "DashboardWebStringId.Grid.DeltaOptions" | "DashboardWebStringId.Grid.ShowStartEndValues" | "DashboardWebStringId.Grid.TotalType" | "DashboardWebStringId.Grid.Dimension" | "DashboardWebStringId.Grid.Measure" | "DashboardWebStringId.Grid.Delta" | "DashboardWebStringId.Grid.Sparkline" | "DashboardWebStringId.Grid.Hyperlink" | "DashboardWebStringId.Grid.Options" | "DashboardWebStringId.Map.ShapeFileLoaded" | "DashboardWebStringId.Map.AttributeFileLoaded" | "DashboardWebStringId.Map.ValueMap" | "DashboardWebStringId.Map.DeltaMap" | "DashboardWebStringId.Map.TooltipCaption" | "DashboardWebStringId.Map.TooltipActualValueCaption" | "DashboardWebStringId.Map.TooltipDeltaCaption" | "DashboardWebStringId.Map.CustomMapOptions" | "DashboardWebStringId.Map.CustomMapOptionsSource" | "DashboardWebStringId.Map.CustomMapOptionsUrl" | "DashboardWebStringId.Map.CustomMapOptionsFile" | "DashboardWebStringId.Map.CustomMapUrl" | "DashboardWebStringId.Map.CustomMapFile" | "DashboardWebStringId.Map.CustomAttributeFile" | "DashboardWebStringId.Map.AttributeDimension" | "DashboardWebStringId.Map.IncludeSummaryValueToShapeTitle" | "DashboardWebStringId.Map.AttributeName" | "DashboardWebStringId.Map.TooltipAttribute" | "DashboardWebStringId.Map.TooltipDimensions" | "DashboardWebStringId.Map.Area.Custom" | "DashboardWebStringId.Map.Area.WorldCountries" | "DashboardWebStringId.Map.Area.Europe" | "DashboardWebStringId.Map.Area.Asia" | "DashboardWebStringId.Map.Area.NorthAmerica" | "DashboardWebStringId.Map.Area.SouthAmerica" | "DashboardWebStringId.Map.Area.Africa" | "DashboardWebStringId.Map.Area.USA" | "DashboardWebStringId.Map.Area.Canada" | "DashboardWebStringId.Map.Viewport" | "DashboardWebStringId.Map.ShapeTitleAttribute" | "DashboardWebStringId.Map.UseBindingAttribute" | "DashboardWebStringId.Map.WeightedLegendType" | "DashboardWebStringId.Map.WeightedLegendType.Linear" | "DashboardWebStringId.Map.WeightedLegendType.Nested" | "DashboardWebStringId.Map.Orientation.Vertical" | "DashboardWebStringId.Map.Orientation.Horizontal" | "DashboardWebStringId.Map.Position.TopLeft" | "DashboardWebStringId.Map.Position.TopCenter" | "DashboardWebStringId.Map.Position.TopRight" | "DashboardWebStringId.Map.Position.BottomLeft" | "DashboardWebStringId.Map.Position.BottomCenter" | "DashboardWebStringId.Map.Position.BottomRight" | "DashboardWebStringId.Map.Viewport.TopLatitude" | "DashboardWebStringId.Map.Viewport.LeftLongitude" | "DashboardWebStringId.Map.Viewport.RightLongitude" | "DashboardWebStringId.Map.Viewport.BottomLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLongitude" | "DashboardWebStringId.Map.Viewport.CreateViewerPaddings" | "DashboardWebStringId.Map.ShowLegend" | "DashboardWebStringId.Pie.Type" | "DashboardWebStringId.Pie" | "DashboardWebStringId.Pie.Donut" | "DashboardWebStringId.Pie.LabelContentType.None" | "DashboardWebStringId.Pie.LabelContentType.Argument" | "DashboardWebStringId.Pie.LabelContentType.Percent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndPercent" | "DashboardWebStringId.Pie.LabelContentType.Value" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndValue" | "DashboardWebStringId.Pie.LabelContentType.ValueAndPercent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentValueAndPercent" | "DashboardWebStringId.Image.BindingMode" | "DashboardWebStringId.Image.BindingMode.BinaryArray" | "DashboardWebStringId.Image.BindingMode.Uri" | "DashboardWebStringId.RangeFilter.UriPattern" | "DashboardWebStringId.Image.SizeMode.Clip" | "DashboardWebStringId.Image.SizeMode.Stretch" | "DashboardWebStringId.Image.SizeMode.Zoom" | "DashboardWebStringId.Image.SizeMode.Squeeze" | "DashboardWebStringId.Image.HorizontalAlignment" | "DashboardWebStringId.Image.VerticalAlignment" | "DashboardWebStringId.Image.Alignment.Left" | "DashboardWebStringId.Image.Alignment.Center" | "DashboardWebStringId.Image.Alignment.Right" | "DashboardWebStringId.Image.Alignment.Top" | "DashboardWebStringId.Image.Alignment.Bottom" | "DashboardWebStringId.SeriesItem.SeriesDimensions" | "DashboardWebStringId.TextBox.Text" | "DashboardWebStringId.Chart.Orientation.Default" | "DashboardWebStringId.Chart.Orientation.RotateRight" | "DashboardWebStringId.Chart.Orientation.RotateLeft" | "DashboardWebStringId.Chart.OverlappingMode.Hide" | "DashboardWebStringId.Chart.OverlappingMode.None" | "DashboardWebStringId.Chart.Position.Outside" | "DashboardWebStringId.Chart.Position.Inside" | "DashboardWebStringId.Chart.SeriesType.Weighted" | "DashboardWebStringId.Coloring.MeasuresColoringMode" | "DashboardWebStringId.Coloring.Global" | "DashboardWebStringId.Coloring.Local" | "DashboardWebStringId.Delta.ValueType" | "DashboardWebStringId.Delta.ResultIndication" | "DashboardWebStringId.Delta.ThresholdType" | "DashboardWebStringId.Delta.ThresholdValue" | "DashboardWebStringId.Sparkline.ViewType" | "DashboardWebStringId.Sparkline.HighlightMinMaxPoints" | "DashboardWebStringId.Sparkline.HighlightStartEndPoints" | "DashboardWebStringId.Title.Aligment.Left" | "DashboardWebStringId.Title.Aligment.Center" | "DashboardWebStringId.Parameters.LookUpSettingsType.NoLookUp" | "DashboardWebStringId.Parameters.LookUpSettingsType.StaticList" | "DashboardWebStringId.Parameters.LookUpSettingsType.DynamicList" | "DashboardWebStringId.Parameters.LookUpSettingsType" | "DashboardWebStringId.Parameters.DefaultValue" | "DashboardWebStringId.DataItem" | "DashboardWebStringId.DataItem.Precision" | "DashboardWebStringId.DataItem.IncludeGroupSeparator" | "DashboardWebStringId.DataItem.ShowValues" | "DashboardWebStringId.DataItem.ShowTotals" | "DashboardWebStringId.DataItem.ShowGrandTotals" | "DashboardWebStringId.Dialog.ConfirmSaving" | "DashboardWebStringId.Dimension.GroupInterval" | "DashboardWebStringId.Dimension.SortMode" | "DashboardWebStringId.Dialog.ArgumentMode" | "DashboardWebStringId.Calculations" | "DashboardWebStringId.Calculations.Expression" | "DashboardWebStringId.Calculations.DifferenceCalculation" | "DashboardWebStringId.Calculations.Moving" | "DashboardWebStringId.Calculations.RunningTotal" | "DashboardWebStringId.Calculations.PercentOfTotal" | "DashboardWebStringId.Calculations.Rank" | "DashboardWebStringId.Calculations.DefinitionMode" | "DashboardWebStringId.Calculations.WindowDefinition" | "DashboardWebStringId.Calculations.WindowDefinitionModeSpecific" | "DashboardWebStringId.Calculations.WindowDefinitionModePredefined" | "DashboardWebStringId.Calculations.DifferenceType" | "DashboardWebStringId.TreemapLayoutAlgorithm" | "DashboardWebStringId.TilesLabelContentType" | "DashboardWebStringId.TilesTooltipContentType" | "DashboardWebStringId.GroupsLabelContentType" | "DashboardWebStringId.GroupsTooltipContentType" | "DashboardWebStringId.ShowOthersValue" | "DashboardWebStringId.TopNEnabled" | "DashboardWebStringId.Parameters.StaticListLookUpSettings" | "DashboardWebStringId.Parameters.DynamicListLookUpSettings" | "DashboardWebStringId.ConvertTo" | "DashboardWebStringId.Duplicate" | "DashboardWebStringId.DataSourceWizard" | "DashboardWebStringId.RangeFilter.CustomPeriods" | "DashboardWebStringId.RangeFilter.StartMode" | "DashboardWebStringId.RangeFilter.EndMode" | "DashboardWebStringId.RangeFilter.StartIntervalAndOffset" | "DashboardWebStringId.RangeFilter.EndIntervalAndOffset" | "DashboardWebStringId.RangeFilter.StartDate" | "DashboardWebStringId.RangeFilter.EndDate" | "DashboardWebStringId.RangeFilter.None" | "DashboardWebStringId.RangeFilter.Fixed" | "DashboardWebStringId.RangeFilter.Flow" | "DashboardWebStringId.Tabs.Binding" | "DashboardWebStringId.Tabs.DataShaping" | "DashboardWebStringId.Tabs.Format" | "DashboardWebStringId.Calculations.Types.Moving" | "DashboardWebStringId.Parameters.SortByMember" | "DashboardWebStringId.Parameters.LookUpSettingsTypeCaption" | "DashboardWebStringId.Dashboard.Items" | "DashboardWebStringId.Dashboard.Groups" | "DashboardWebStringId.Dashboard.LayoutItems" | "DashboardWebStringId.Dashboard.ComponentName" | "DashboardWebStringId.ButtonConfirm" | "DashboardWebStringId.Colorization.GroupInterval" | "DashboardWebStringId.ButtonOn" | "DashboardWebStringId.ButtonOff" | "DashboardWebStringId.ButtonYes" | "DashboardWebStringId.ButtonNo" | "DashboardWebStringId.ButtonDiscrete" | "DashboardWebStringId.ButtonContinuous" | "DashboardWebStringId.ButtonVisible" | "DashboardWebStringId.ButtonHidden" | "DashboardWebStringId.Calculations.PreviousValuesCount" | "DashboardWebStringId.Calculations.NextValuesCount" | "DashboardWebStringId.Calculations.RankType" | "DashboardWebStringId.Calculations.RankOrder" | "DashboardWebStringId.TileOptions" | "DashboardWebStringId.MapLockNavigationLocked" | "DashboardWebStringId.MapLockNavigationUnlocked" | "DashboardWebStringId.ConditionalFormatting.BarOptions" | "DashboardWebStringId.ConditionalFormatting.CalculatedBy" | "DashboardWebStringId.ConditionalFormatting.IconType" | "DashboardWebStringId.ConditionalFormatting.PredefinedColor" | "DashboardWebStringId.ConditionalFormatting.AppearanceType" | "DashboardWebStringId.ConditionalFormatting.FontStyle" | "DashboardWebStringId.ConditionalFormatting.FontFamily" | "DashboardWebStringId.ConditionalFormatting.FontRegular" | "DashboardWebStringId.ConditionalFormatting.IconType.None" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowSideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGraySideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDash" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedTriangleDown" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenTriangleUp" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingHalfGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1QuarterGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1Bar" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1FilledBox" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTriangle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedDiamond" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedFlag" | "DashboardWebStringId.ConditionalFormatting.IntersectionColumnDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionRowDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionLevelMode" | "DashboardWebStringId.ConditionalFormatting.GradientRangeBar" | "DashboardWebStringId.ConditionalFormatting.RangeGradient" | "DashboardWebStringId.ConditionalFormatting.SegmentNumber" | "DashboardWebStringId.ConditionalFormatting.ValueComparison" | "DashboardWebStringId.ConditionalFormatting.Ranges" | "DashboardWebStringId.ConditionalFormatting.AverageType" | "DashboardWebStringId.ConditionalFormatting.Above" | "DashboardWebStringId.ConditionalFormatting.AboveOrEqual" | "DashboardWebStringId.ConditionalFormatting.Below" | "DashboardWebStringId.ConditionalFormatting.BelowOrEqual" | "DashboardWebStringId.ConditionalFormatting.StyleSettingsType" | "DashboardWebStringId.ConditionalFormatting.Positive" | "DashboardWebStringId.ConditionalFormatting.Negative" | "DashboardWebStringId.ConditionalFormatting.MinimumType" | "DashboardWebStringId.ConditionalFormatting.MaximumType" | "DashboardWebStringId.ConditionalFormatting.DateType" | "DashboardWebStringId.ConditionalFormatting.DateType.None" | "DashboardWebStringId.ConditionalFormatting.DateType.SpecificDate" | "DashboardWebStringId.ConditionalFormatting.DateType.BeyondThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.NextWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.Tomorrow" | "DashboardWebStringId.ConditionalFormatting.DateType.Today" | "DashboardWebStringId.ConditionalFormatting.DateType.Yesterday" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.LastWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.PriorThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.Empty" | "DashboardWebStringId.ConditionalFormatting.DateType.User" | "DashboardWebStringId.ConditionalFormatting.DateType.Beyond" | "DashboardWebStringId.ConditionalFormatting.DateType.ThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.ThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAfter1" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAfter2" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo1" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo2" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo3" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo4" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo5" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo6" | "DashboardWebStringId.ConditionalFormatting.DateType.Earlier" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeDataItem" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeCard" | "DashboardWebStringId.Colorization.NoSelectedSchema" | "DashboardWebStringId.Colorization.ColorSchemes" | "DashboardWebStringId.LayoutHasBeenChangedDialogMessage" | "DashboardWebStringId.SaveConfirmationDialogMessage" | "DashboardWebStringId.SaveChangesDialogMessage" | "DashboardWebStringId.Dialog.ChangeDataMemberMessage" | "DashboardWebStringId.Dialog.RemovedDataItemsMessage" | "DashboardWebStringId.Dialog.ConfirmChanges" | "DashboardWebStringId.Dialog.Save" | "DashboardWebStringId.Dialog.DoNotSave" | "DashboardWebStringId.Dialog.ButtonYes" | "DashboardWebStringId.Dialog.ButtonDontChange" | "DashboardWebStringId.Colorization.ColorSchemeType" | "DashboardWebStringId.Colorization.MeasureNames" | "DashboardWebStringId.Colorization.AddColor" | "DashboardWebStringId.Colorization.ValidationSelectMeasure" | "DashboardWebStringId.ColoringModeAuto" | "DashboardWebStringId.ColoringModeOff" | "DashboardWebStringId.ColoringModeOn" | "DashboardWebStringId.ColorScheme.Empty" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButton" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip" | "DashboardWebStringId.ConditionalFormatting.Miscellaneous" | "DashboardWebStringId.Dashboards" | "DashboardWebStringId.EditInDesigner" | "DashboardWebStringId.NoDashboards" | "DashboardWebStringId.AddNewDashboard" | "DashboardWebStringId.NewDashboard" | "DashboardWebStringId.Binding.Searching" | "DashboardWebStringId.Binding.EmptySearchResult" | "DashboardWebStringId.Errors.AttemptToLoadData" | "DashboardWebStringId.ConditionType" | "DashboardWebStringId.ConditionalFormatting.UnsupportedDataType" | "DashboardWebStringId.FormatRule" | "DashboardWebStringId.Notification.DashboardSaving" | "DashboardWebStringId.Notification.DashboardSaved" | "DashboardWebStringId.Notification.DashboardCanNotBeSaved" | "DashboardWebStringId.Notification.DashboardSavingIsNotAvailable" | "DashboardWebStringId.Notification.AttemptToLoadDashboards" | "DashboardWebStringId.Notification.DashboardLoading" | "DashboardWebStringId.Notification.AttemptToLoadDashboard" | "DashboardWebStringId.Notification.AttemptToConnectionStrings" | "DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode" | "DashboardWebStringId.Notification.AttemptToLoadParameterValues" | "DashboardWebStringId.Notification.AttemptToGetUnderlyingData" | "DashboardWebStringId.Notification.AttemptToConvertItemToType" | "DashboardWebStringId.Notification.AttemptToLoadDimensionUniqueValues" | "DashboardWebStringId.Notification.AttemptToLoadFieldListForDataSource" | "DashboardWebStringId.Notification.AttemptToGetColorScheme" | "DashboardWebStringId.Notification.NewDashboardCannotBeCreated" | "DashboardWebStringId.Notification.ErrorHasOccuredOn" | "DashboardWebStringId.Notification.UnsupportedDataSourceType" | "DashboardWebStringId.LimitVisibleData.DisplayAllDataTooltip" | "DashboardWebStringId.LimitVisibleData.IncreasePerformanceTooltip" | "DashboardWebStringId.ConditionalFormatting.Condition" | "DashboardWebStringId.CardLayout.MinWidth" | "DashboardWebStringId.CardLayout.MaxWidth" | "DashboardWebStringId.CardLayout.Editor.CardLayout" | "DashboardWebStringId.CardLayout.Editor.FormatOptions" | "DashboardWebStringId.CardLayout.LayoutOptions" | "DashboardWebStringId.CardLayout.ResetTemplate" | "DashboardWebStringId.CardLayout.ApplyToAllCards" | "DashboardWebStringId.Binding.ValuesPattern" | "DashboardWebStringId.Parameters.ParameterNameShouldBeUnique" | "DashboardWebStringId.Title.ImageEmbedded" | "DashboardWebStringId.Title.ImageLinked" | "DashboardWebStringId.Title.ImageNone" | "DashboardWebStringId.RangeFilter.SetDefaultCustomPeriod" | "DashboardWebStringId.RangeFilter.ClearDefaultCustomPeriod" | "DashboardWebStringId.MobileLayout.Back" | "DashboardWebStringId.MobileLayout.SwitchToViewer" | "DashboardWebStringId.Search" | "DashboardStringId.DefaultNameTabPage" | "DashboardStringId.DefaultNameChartPane" | "DashboardStringId.NewCalculatedFieldNamePrefix" | "DashboardStringId.NewParameterNamePrefix" | "AnalyticsCoreStringId.Parameter_Type_String" | "AnalyticsCoreStringId.Parameter_Type_DateTime" | "AnalyticsCoreStringId.Parameter_Type_Int16" | "AnalyticsCoreStringId.Parameter_Type_Int32" | "AnalyticsCoreStringId.Parameter_Type_Int64" | "AnalyticsCoreStringId.Parameter_Type_Float" | "AnalyticsCoreStringId.Parameter_Type_Double" | "AnalyticsCoreStringId.Parameter_Type_Decimal" | "AnalyticsCoreStringId.Parameter_Type_Boolean" | "AnalyticsCoreStringId.Parameter_Type_Guid" | "AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption" | "DataAccessUIStringId.FiltersView" | "DashboardStringId.SeriesTypeGroupArea" | "DashboardStringId.SeriesTypeGroupBar" | "DashboardStringId.SeriesTypeGroupBubble" | "DashboardStringId.SeriesTypeGroupFinancial" | "DashboardStringId.SeriesTypeGroupPointLine" | "DashboardStringId.SeriesTypeGroupRange" | "DashboardStringId.FunctionCategoryWindow" | "DashboardStringId.FunctionCategoryAggregate" | "DashboardStringId.FunctionCategoryAdvanced" | "DashboardStringId.FunctionDescriptionWindowAvg" | "DashboardStringId.FunctionDescriptionRunningMin" | "DashboardStringId.FunctionDescriptionTotal" | "DashboardStringId.FunctionDescriptionRankCompetition" | "DashboardStringId.FunctionDescriptionLookup" | "DashboardStringId.FunctionDescriptionRunningCount" | "DashboardStringId.FunctionDescriptionWindowMax" | "DashboardStringId.FunctionDescriptionVarp" | "DashboardStringId.FunctionDescriptionRunningAvg" | "DashboardStringId.FunctionDescriptionFirst" | "DashboardStringId.FunctionDescriptionWindowMin" | "DashboardStringId.FunctionDescriptionWindowStdDev" | "DashboardStringId.FunctionDescriptionLast" | "DashboardStringId.FunctionDescriptionWindowCount" | "DashboardStringId.FunctionDescriptionCountDistinct" | "DashboardStringId.FunctionDescriptionIndex" | "DashboardStringId.FunctionDescriptionWindowStdDevp" | "DashboardStringId.FunctionDescriptionWindowMode" | "DashboardStringId.FunctionDescriptionRunningMax" | "DashboardStringId.FunctionDescriptionRankPercentile" | "DashboardStringId.FunctionDescriptionRankDense" | "DashboardStringId.FunctionDescriptionWindowSum" | "DashboardStringId.FunctionDescriptionWindowCountDistinct" | "DashboardStringId.FunctionDescriptionStdDevp" | "DashboardStringId.FunctionDescriptionSize" | "DashboardStringId.FunctionDescriptionMedian" | "DashboardStringId.FunctionDescriptionRankModified" | "DashboardStringId.FunctionDescriptionWindowMedian" | "DashboardStringId.FunctionDescriptionRunningSum" | "DashboardStringId.FunctionDescriptionWindowVarp" | "DashboardStringId.FunctionDescriptionWindowVar" | "DashboardStringId.FunctionDescriptionStdDev" | "DashboardStringId.FunctionDescriptionRankUnique" | "DashboardStringId.FunctionDescriptionVar" | "DashboardStringId.FunctionDescriptionAggr" | "DashboardStringId.FunctionDescriptionAggrJoinRule" | "DashboardStringId.FunctionDescriptionWindowDefinition" | "DashboardStringId.FunctionDescriptionWindowDefinitionPartitionBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderAsc" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderDesc" | "DashboardStringId.AggregateExFunctionDescriptionCountNotNull" | "DashboardStringId.AggregateExFunctionDescriptionMode" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHour" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinute" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinuteSecond" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateMonthYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear2" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateQuarterYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetQuarter" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfMonth" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime3" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime4" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime5" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime6" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToBoolean" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToDateTime" | "DashboardStringId.SparklineIndicationModeLine" | "DashboardStringId.SparklineIndicationModeArea" | "DashboardStringId.SparklineIndicationModeBar" | "DashboardStringId.SparklineIndicationModeWinLoss" | "DashboardStringId.DefaultNameDateFilterItem" | "DashboardWebStringId.DateFilter.FilterType" | "DashboardWebStringId.DateFilter.FilterTypeExact" | "DashboardWebStringId.DateFilter.FilterTypeAfter" | "DashboardWebStringId.DateFilter.FilterTypeBefore" | "DashboardWebStringId.DateFilter.FilterTypeBetween" | "DashboardWebStringId.DateFilter.ArrangementMode" | "DashboardWebStringId.DateFilter.ArrangementModeAutoHeight" | "DashboardWebStringId.DateFilter.ArrangementModeHorizontal" | "DashboardWebStringId.DateFilter.ArrangementModeVertical" | "DashboardWebStringId.DateFilter.DatePickerLocation" | "DashboardWebStringId.DateFilter.DatePickerLocationFar" | "DashboardWebStringId.DateFilter.DatePickerLocationNear" | "DashboardWebStringId.DateFilter.DatePickerLocationHidden" | "DashboardStringId.DateFilterDisplayTextPattern" | "DashboardStringId.DateFilterDatePickerButtonDefaultText" | "DashboardStringId.FromDatePeriodCaption" | "DashboardStringId.ToDatePeriodCaption" | "DashboardStringId.FromToDatePeriodCaption" | "DashboardStringId.UniqueNameValidationMessage" | "DashboardStringId.GridTotalAutoTemplate" | "DashboardStringId.GridTotalValueTemplate" | "DashboardStringId.GridTotalTemplate" | "DashboardStringId.GridTotalTypeCount" | "DashboardStringId.GridTotalTypeMin" | "DashboardStringId.GridTotalTypeMax" | "DashboardStringId.GridTotalTypeAvg" | "DashboardStringId.GridTotalTypeSum" | "DashboardStringId.ActionShowDataInspector" | "DashboardStringId.InspectedData" | "DashboardStringId.InspectedTypeFormatString" | "DashboardStringId.AggregatedDataType" | "DashboardStringId.RawDataType" | "DashboardStringId.OLAPUnavailableRawData" | "DashboardStringId.SparklineValuesSeparator" | "DashboardStringId.SparklineArgumentValueSeparator" | "DashboardWebStringId.Grid.FilterClause.ApplyFilter" | "DashboardWebStringId.Grid.FilterClause.ResetOperation" | "DashboardWebStringId.Grid.FilterClause.Contains" | "DashboardWebStringId.Grid.FilterClause.DoesNotContain" | "DashboardWebStringId.Grid.FilterClause.StartsWith" | "DashboardWebStringId.Grid.FilterClause.EndsWith" | "DashboardWebStringId.Grid.FilterClause.Equals" | "DashboardWebStringId.Grid.FilterClause.DoesNotEqual" | "DashboardWebStringId.Grid.FilterClause.Less" | "DashboardWebStringId.Grid.FilterClause.Greater" | "DashboardWebStringId.Grid.FilterClause.LessOrEqual" | "DashboardWebStringId.Grid.FilterClause.GreaterOrEqual" | "DashboardWebStringId.Grid.FilterClause.Between" | "DashboardWebStringId.Grid.FilterClause.BetweenStart" | "DashboardWebStringId.Grid.FilterClause.BetweenEnd" | "DashboardWebStringId.AccordionTab.Content" | "DashboardWebStringId.TextBoxItemEditor.NoFields" | "DashboardWebStringId.TextBoxItemEditor.InsertField" | "DashboardWebStringId.TextBoxItemEditor.EditTextButton" | "DashboardWebStringId.TextBoxItemEditor.DialogCaption" | "DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose" | "DashboardWebStringId.TextBoxItemEditor.DialogClose" | "DashboardStringId.StartDate" | "DashboardStringId.EndDate" | "DashboardWebStringId.AccordionTab.MeasureFilter" | "DashboardStringId.FunctionDescriptionAggregateFilter" | "DashboardWebStringId.TabPages" | "DashboardWebStringId.More" | "DashboardStringId.MeasureFilterCaptionFormatString";
	    AllLevels: "DashboardStringId.ActionClearMasterFilter" | "DashboardStringId.ActionClearSelection" | "DashboardStringId.ActionOtherValues" | "DashboardStringId.ActionDrillUp" | "DashboardStringId.ActionExportTo" | "DashboardStringId.ActionExportToPdf" | "DashboardStringId.ActionExportToImage" | "DashboardStringId.ActionExportToExcel" | "DashboardStringId.RangeFilterCustomDateTimePeriod" | "DashboardStringId.ActionExportTemplate" | "DashboardStringId.ActionAllowMultiselection" | "DashboardStringId.DashboardNullValue" | "DashboardStringId.TopNOthersValue" | "DashboardStringId.DashboardErrorValue" | "DashboardStringId.DateTimeQuarterFormat" | "DashboardStringId.MessageLoading" | "DashboardStringId.ParametersFormCaption" | "DashboardStringId.ParametersSelectorText" | "DashboardStringId.ParametersFormAllowNullColumnCaption" | "DashboardStringId.ParametersFormValueColumnCaption" | "DashboardStringId.ParametersFormNameColumnCaption" | "DashboardStringId.ButtonOK" | "DashboardStringId.ButtonCancel" | "DashboardStringId.SelectDate" | "DashboardStringId.ButtonReset" | "DashboardStringId.ButtonSubmit" | "DashboardStringId.ButtonApply" | "DashboardStringId.ButtonExport" | "DashboardStringId.GridResetColumnWidths" | "DashboardStringId.GridSortAscending" | "DashboardStringId.GridSortDescending" | "DashboardStringId.GridClearSorting" | "DashboardStringId.PivotGridTotal" | "DashboardStringId.PivotGridGrandTotal" | "DashboardStringId.ChartTotalValue" | "DashboardStringId.PageLayout" | "DashboardStringId.PageLayoutAuto" | "DashboardStringId.PageLayoutPortrait" | "DashboardStringId.PageLayoutLandscape" | "DashboardStringId.PaperKind" | "DashboardStringId.PaperKindLetter" | "DashboardStringId.PaperKindLegal" | "DashboardStringId.PaperKindExecutive" | "DashboardStringId.PaperKindA5" | "DashboardStringId.PaperKindA4" | "DashboardStringId.PaperKindA3" | "DashboardStringId.ScaleMode" | "DashboardStringId.ScaleModeNone" | "DashboardStringId.ScaleModeUseScaleFactor" | "DashboardStringId.ScaleModeAutoFitToPagesWidth" | "DashboardStringId.AutoFitPageCount" | "DashboardStringId.ScaleFactor" | "DashboardStringId.PrintHeadersOnEveryPage" | "DashboardStringId.FitToPageWidth" | "DashboardStringId.SizeMode" | "DashboardStringId.SizeModeNone" | "DashboardStringId.SizeModeStretch" | "DashboardStringId.SizeModeZoom" | "DashboardStringId.AutoArrangeContent" | "DashboardStringId.ImageFormat" | "DashboardStringId.ExcelFormat" | "DashboardStringId.CsvValueSeparator" | "DashboardStringId.ExportFilters" | "DashboardStringId.ExportParameters" | "DashboardStringId.DashboardStatePosition" | "DashboardStringId.Resolution" | "DashboardStringId.ShowTitle" | "DashboardStringId.Title" | "DashboardStringId.FileName" | "DashboardStringId.FilterStatePresentationAfter" | "DashboardStringId.FilterStatePresentationAfterAndSplitPage" | "DashboardStringId.FilterStatePresentationSplitSheet" | "DashboardStringId.MessageCustomItemIsNotSupported" | "DashboardStringId.MessageGridHasNoData" | "DashboardStringId.MessagePivotHasNoData" | "DashboardStringId.SparklineTooltipStartValue" | "DashboardStringId.SparklineTooltipEndValue" | "DashboardStringId.SparklineTooltipMinValue" | "DashboardStringId.SparklineTooltipMaxValue" | "DashboardStringId.OpenCaption" | "DashboardStringId.HighCaption" | "DashboardStringId.LowCaption" | "DashboardStringId.CloseCaption" | "DashboardStringId.InitialExtent" | "DashboardStringId.FilterElementShowAllItem" | "DashboardStringId.NumericFormatUnitSymbolThousands" | "DashboardStringId.NumericFormatUnitSymbolMillions" | "DashboardStringId.NumericFormatUnitSymbolBillions" | "DashboardStringId.ActionSelectDateTimePeriod" | "DashboardStringId.RangeFilterSelectRange" | "DashboardStringId.FilterElementCheckedComboBoxNoDataCaption" | "DashboardStringId.FilterElementRadioComboBoxNoDataCaption" | "DashboardStringId.FilterElementNoDataToDisplay" | "DashboardStringId.RangeFilterSelectRangeFromCaption" | "DashboardStringId.RangeFilterSelectRangeToCaption" | "DashboardWebStringId.DashboardParameters" | "DashboardStringId.DataSourceDataMember" | "DashboardStringId.DescriptionMeasures" | "DashboardWebStringId.TextBoxFormatText" | "DashboardStringId.NumericFormatUnitCaption" | "DashboardWebStringId.SummaryType" | "DashboardStringId.CalculationTypeExpression" | "DevExpressWebStringId.CalculatedFieldDataType" | "DashboardStringId.ValueCaption" | "DashboardStringId.Value1Caption" | "DashboardStringId.Value2Caption" | "DashboardStringId.CommandFormatRuleTopBottom" | "DashboardStringId.CommandFormatRuleAboveBelowAverage" | "DashboardStringId.CommandFormatRuleBar" | "DashboardStringId.CommandFormatRuleColorRangeBar" | "DashboardStringId.CommandFormatRuleGradientRangeBar" | "DashboardStringId.FormatRuleStyleAppearance" | "DashboardStringId.FormatRuleStyleIcons" | "DashboardStringId.FormatRuleNegativeStyle" | "DashboardStringId.CommandFormatRuleExpression" | "DashboardWebStringId.TopNMode" | "DashboardStringId.CommandFormatRuleRangeSet" | "DashboardStringId.CommandFormatRuleValue" | "DashboardStringId.CommandFormatRuleDateOccurring" | "DashboardWebStringId.ConditionalFormatting.Appearance.BackColor" | "DashboardWebStringId.ConditionalFormatting.Appearance.ForeColor" | "DashboardStringId.DescriptionBoundImageAttribute" | "DashboardWebStringId.ShowCaptionText" | "DashboardWebStringId.DisplayItemAsPage" | "DashboardStringId.DefaultNameItemGroup" | "DashboardStringId.DefaultNameTabContainerItem" | "DashboardStringId.DefaultDataSourceName" | "DashboardWebStringId.CrossDataSourceFiltering" | "DashboardStringId.RangeFilterCalculationAlongSeries" | "DashboardStringId.RangeFilterCalculationAlongArgument" | "DashboardStringId.DescriptionItemSeries" | "DashboardStringId.DescriptionSeries" | "DashboardWebStringId.Chart.SeriesType" | "DashboardStringId.DescriptionDimensions" | "DashboardWebStringId.TreeView.AutoExpand" | "DashboardWebStringId.ConditionalFormatting.ConditionMinimum" | "DashboardWebStringId.ConditionalFormatting.ConditionMaximum" | "DashboardStringId.DescriptionItemDimension" | "DashboardStringId.DescriptionItemMeasure" | "DashboardWebStringId.Grid.MergeCells" | "DashboardWebStringId.Grid.ColumnWidthMode" | "DashboardWebStringId.Grid.BandedRows" | "DashboardWebStringId.Grid.VerticalLines" | "DashboardWebStringId.Grid.HorizontalLines" | "DashboardWebStringId.Grid.ColumnHeaders" | "DashboardWebStringId.Grid.WordWrap" | "DashboardStringId.ActualValueCaption" | "DashboardStringId.TargetValueCaption" | "DashboardStringId.UriPatternCaption" | "DashboardStringId.UriCaption" | "DashboardStringId.DisplayValueCaption" | "DashboardStringId.WeightCaption" | "DashboardStringId.DescriptionItemColor" | "DashboardStringId.Latitude" | "DashboardStringId.Longitude" | "DashboardWebStringId.GeoPointMapClusterization" | "DashboardWebStringId.MapLockNavigation" | "DashboardWebStringId.WeightedLegendGalleryGroup" | "DashboardStringId.DescriptionItemArgument" | "DashboardWebStringId.PieMapIsWeighted" | "DashboardWebStringId.InteractivityOptions.IgnoreMasterFilters" | "DashboardWebStringId.InteractivityOptions.DrillDown" | "DashboardWebStringId.Pie.ShowCaptions" | "DashboardStringId.DescriptionColumns" | "DashboardStringId.DescriptionRows" | "DashboardStringId.DescriptionValues" | "DashboardStringId.DescriptionArguments" | "DashboardStringId.TextGroupIntervalAlphabetical" | "DashboardStringId.ActionMaximizeDashboardItem" | "DashboardStringId.ActionRestoreDashboardItem" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataSource" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.ValueMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DisplayMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.SortOrder" | "DevExpress.DashboardCommon.DashboardParameter.Visible" | "DevExpress.DashboardCommon.DashboardParameter.Description" | "DevExpress.DashboardCommon.DashboardParameter.AllowMultiselect" | "DevExpress.DashboardCommon.DashboardParameter.AllowNull" | "DevExpress.DashboardCommon.DashboardParameter.SelectAllValues" | "DevExpress.DashboardCommon.StaticListLookUpSettings.Values" | "DevExpress.DashboardCommon.DimensionSortOrder.Ascending" | "DevExpress.DashboardCommon.DimensionSortOrder.Descending" | "DevExpress.DashboardCommon.DimensionSortOrder.None" | "DashboardWebStringId.AccordionTab.ScatterChartPointLabelOptions" | "DashboardWebStringId.AccordionTab.ChoroplethMapShapeLabelsAttribute" | "DashboardStringId.CommandFormatRuleTopN" | "DashboardWebStringId.Type" | "DashboardWebStringId.Grid.ColumnWidth" | "DashboardWebStringId.AccordionTab.ShowTotals" | "DashboardWebStringId.AccordionTab.Layout" | "DashboardWebStringId.AccordionTab.PivotInitialState" | "DashboardWebStringId.AccordionTab.ImageOptions" | "DashboardWebStringId.AccordionTab.Labels" | "DashboardWebStringId.AccordionTab.MapLegend" | "DashboardWebStringId.AccordionTab.WeightedLegend" | "DashboardWebStringId.AccordionTab.Common" | "DashboardWebStringId.AccordionTab.ChartLegend" | "DashboardWebStringId.Grid.AutoFitToContentsColumnWidthMode" | "DashboardWebStringId.Grid.AutoFitToGridColumnWidthMode" | "DashboardWebStringId.Grid.ManualGridColumnWidthMode" | "DashboardStringId.DateTimeIntervalYear" | "DashboardStringId.DateTimeIntervalQuarter" | "DashboardStringId.DateTimeIntervalMonth" | "DashboardStringId.DateTimeIntervalWeek" | "DashboardStringId.DateTimeIntervalDay" | "DashboardStringId.DateTimeIntervalHour" | "DashboardStringId.DateTimeIntervalMinute" | "DashboardStringId.DateTimeIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalYear" | "DashboardStringId.DateTimeGroupIntervalQuarter" | "DashboardStringId.DateTimeGroupIntervalMonth" | "DashboardStringId.DateTimeGroupIntervalDay" | "DashboardStringId.DateTimeGroupIntervalHour" | "DashboardStringId.DateTimeGroupIntervalMinute" | "DashboardStringId.DateTimeGroupIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalDayOfYear" | "DashboardStringId.DateTimeGroupIntervalDayOfWeek" | "DashboardStringId.DateTimeGroupIntervalWeekOfYear" | "DashboardStringId.DateTimeGroupIntervalWeekOfMonth" | "DashboardStringId.DateTimeGroupIntervalMonthYear" | "DashboardStringId.DateTimeGroupIntervalQuarterYear" | "DashboardStringId.DateTimeGroupIntervalWeekYear" | "DashboardStringId.DateTimeGroupIntervalDayMonthYear" | "DashboardStringId.DateTimeGroupIntervalDateHour" | "DashboardStringId.DateTimeGroupIntervalDateHourMinute" | "DashboardStringId.DateTimeGroupIntervalDateHourMinuteSecond" | "DashboardStringId.DateTimeGroupIntervalExactDate" | "DashboardStringId.GroupIntervalNone" | "DashboardWebStringId.Treemap.StripedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SquarifiedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SliceAndDiceLayoutAlgorithm" | "DashboardWebStringId.Treemap.TileLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.TileLabelsNone" | "DashboardWebStringId.Treemap.TileLabelsValue" | "DashboardWebStringId.Treemap.TileLabelsArgument" | "DashboardWebStringId.Treemap.TileTooltipsArgumentAndValue" | "DashboardWebStringId.Treemap.TileTooltipsArgument" | "DashboardWebStringId.Treemap.TileTooltipsValue" | "DashboardWebStringId.Treemap.TileTooltipsNone" | "DashboardWebStringId.Treemap.TopLeftToBottomRightLayoutDirection" | "DashboardWebStringId.Treemap.TopRightToBottomLeftLayoutDirection" | "DashboardWebStringId.Treemap.BottomLeftToTopRightLayoutDirection" | "DashboardWebStringId.Treemap.BottomRightToTopLeftLayoutDirection" | "DashboardWebStringId.Treemap.LayoutDirection" | "DashboardWebStringId.Treemap.GroupLabelsNone" | "DashboardWebStringId.Treemap.GroupLabelsArgument" | "DashboardWebStringId.Treemap.GroupLabelsValue" | "DashboardWebStringId.Treemap.GroupLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.GroupTooltipsNone" | "DashboardWebStringId.Treemap.GroupTooltipsArgument" | "DashboardWebStringId.Treemap.GroupTooltipsValue" | "DashboardWebStringId.Treemap.GroupTooltipsArgumentAndValue" | "DashboardStringId.RankOrderAscending" | "DashboardStringId.RankOrderDescending" | "DashboardStringId.DateTimeFormatYearFormatDefaultCaption" | "DashboardStringId.DateTimeFormatYearFormatFullCaption" | "DashboardStringId.DateTimeFormatYearFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatQuarterFormatDefaultCaption" | "DashboardStringId.DateTimeFormatQuarterFormatNumericCaption" | "DashboardStringId.DateTimeFormatQuarterFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatDefaultCaption" | "DashboardStringId.DateTimeFormatMonthFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatMonthFormatNumericCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatFullCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatNumericCaption" | "DashboardStringId.DateTimeFormatDateFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateFormatLongCaption" | "DashboardStringId.DateTimeFormatDateFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatLongCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption" | "DashboardStringId.ExactDateFormatYear" | "DashboardStringId.ExactDateFormatQuarter" | "DashboardStringId.ExactDateFormatMonth" | "DashboardStringId.ExactDateFormatDay" | "DashboardStringId.ExactDateFormatHour" | "DashboardStringId.ExactDateFormatMinute" | "DashboardStringId.ExactDateFormatSecond" | "DashboardWebStringId.FormatType" | "DashboardWebStringId.TopN.Top" | "DashboardWebStringId.TopN.Bottom" | "DashboardWebStringId.DimensionSortBy" | "DashboardStringId.NumericFormatUnitAutoCaption" | "DashboardStringId.NumericFormatFormatTypeAutoCaption" | "DashboardStringId.NumericFormatFormatTypeGeneralCaption" | "DashboardStringId.NumericFormatFormatTypeNumberCaption" | "DashboardStringId.NumericFormatFormatTypeCurrencyCaption" | "DashboardStringId.NumericFormatFormatTypeScientificCaption" | "DashboardStringId.NumericFormatFormatTypePercentCaption" | "DashboardStringId.NumericFormatUnitOnesCaption" | "DashboardStringId.NumericFormatUnitThousandsCaption" | "DashboardStringId.NumericFormatUnitMillionsCaption" | "DashboardStringId.NumericFormatUnitBillionsCaption" | "DashboardStringId.DeltaValueTypeActualValueCaption" | "DashboardStringId.DeltaValueTypeAbsoluteVariationCaption" | "DashboardStringId.DeltaValueTypePercentVariationCaption" | "DashboardStringId.DeltaValueTypePercentOfTargetCaption" | "DashboardStringId.DeltaValueTypeTargetValueCaption" | "DashboardStringId.DeltaIndicationModeGreaterIsGoodCaption" | "DashboardStringId.DeltaIndicationModeLessIsGoodCaption" | "DashboardStringId.DeltaIndicationModeWarningIfGreaterCaption" | "DashboardStringId.DeltaIndicationModeWarningIfLessCaption" | "DashboardStringId.DeltaIndicationModeNoIndicationCaption" | "DashboardStringId.DeltaThresholdTypeAbsolute" | "DashboardStringId.DeltaThresholdTypePercent" | "DashboardStringId.CommandDimensionGroupChildValues" | "DashboardStringId.SeriesTypeBar" | "DashboardStringId.SeriesTypeStackedBar" | "DashboardStringId.SeriesTypeFullStackedBar" | "DashboardStringId.SeriesTypePoint" | "DashboardStringId.SeriesTypeLine" | "DashboardStringId.SeriesTypeStackedLine" | "DashboardStringId.SeriesTypeFullStackedLine" | "DashboardStringId.SeriesTypeStepLine" | "DashboardStringId.SeriesTypeSpline" | "DashboardStringId.SeriesTypeArea" | "DashboardStringId.SeriesTypeStackedArea" | "DashboardStringId.SeriesTypeFullStackedArea" | "DashboardStringId.SeriesTypeStepArea" | "DashboardStringId.SeriesTypeSplineArea" | "DashboardStringId.SeriesTypeStackedSplineArea" | "DashboardStringId.SeriesTypeFullStackedSplineArea" | "DashboardWebStringId.Chart.ShowLegend" | "DashboardStringId.DefaultNameBoundImageItem" | "DashboardStringId.DefaultNameImageItem" | "DashboardStringId.DefaultNameTextBoxItem" | "DashboardStringId.DefaultNameCardItem" | "DashboardStringId.DefaultNameChartItem" | "DashboardStringId.DefaultNameComboBoxItem" | "DashboardStringId.DefaultNameListBoxItem" | "DashboardStringId.DefaultNameTreeViewItem" | "DashboardStringId.DefaultNameGaugeItem" | "DashboardStringId.DefaultNameGridItem" | "DashboardStringId.GridHyperlinkUriPatternErrorMessage" | "DashboardWebStringId.DefaultNameBubbleMapItem" | "DashboardWebStringId.DefaultNameChoroplethMapItem" | "DashboardWebStringId.DefaultNameGeoPointMapItem" | "DashboardWebStringId.DefaultNamePieMapItem" | "DashboardStringId.DefaultNamePieItem" | "DashboardStringId.DefaultNamePivotItem" | "DashboardStringId.DefaultNameRangeFilterItem" | "DashboardStringId.DefaultNameScatterChartItem" | "DashboardStringId.DefaultNameTreemapItem" | "DashboardStringId.DescriptionMaps" | "DashboardStringId.EntireRangePeriodCaption" | "DashboardStringId.CalculationTypePercentOfTotal" | "DashboardStringId.CalculationTypeDifference" | "DashboardStringId.CalculationTypePercentageDifference" | "DashboardStringId.CalculationTypeRunningTotal" | "DashboardStringId.CalculationTypeMovingCalculation" | "DashboardStringId.CalculationTypeRank" | "DashboardStringId.ColorPaletteIndex" | "DashboardStringId.DifferenceCalculationTargetPrevious" | "DashboardStringId.DifferenceCalculationTargetNext" | "DashboardStringId.DifferenceCalculationTargetFirst" | "DashboardStringId.DifferenceCalculationTargetLast" | "DashboardStringId.SummaryTypeCount" | "DashboardStringId.SummaryTypeSum" | "DashboardStringId.SummaryTypeMin" | "DashboardStringId.SummaryTypeMax" | "DashboardStringId.SummaryTypeAverage" | "DashboardStringId.SummaryTypeStdDev" | "DashboardStringId.SummaryTypeStdDevp" | "DashboardStringId.SummaryTypeVar" | "DashboardStringId.SummaryTypeVarp" | "DashboardStringId.SummaryTypeCountDistinct" | "DashboardStringId.SummaryTypeMedian" | "DashboardStringId.SummaryTypeMode" | "DashboardStringId.RankTypeUnique" | "DashboardStringId.RankTypeCompetition" | "DashboardStringId.RankTypeDense" | "DashboardStringId.RankTypeModified" | "DashboardStringId.RankTypePercentile" | "DashboardStringId.CardCalculationAlongCards" | "DashboardStringId.CardCalculationAlongSparklineArgument" | "DashboardStringId.CardCalculationAlongCardsAndSparklineArgument" | "DashboardStringId.CardCalculationAlongSparklineArgumentAndCards" | "DashboardStringId.ChartCalculationAlongArguments" | "DashboardStringId.ChartCalculationAlongSeries" | "DashboardStringId.ChartCalculationAlongArgumentsAndSeries" | "DashboardStringId.ChartCalculationAlongSeriesAndArguments" | "DashboardStringId.GridCalculationAlongRows" | "DashboardStringId.GridCalculationAlongSparklineArgument" | "DashboardStringId.GridCalculationAlongRowsAndSparklineArgument" | "DashboardStringId.GridCalculationAlongSparklineArgumentAndRows" | "DashboardStringId.PivotCalculationAlongColumns" | "DashboardStringId.PivotCalculationAlongRows" | "DashboardStringId.PivotCalculationAlongColumnsAndRows" | "DashboardStringId.PivotCalculationAlongRowsAndColumns" | "DashboardStringId.PivotCalculationAlongGroupsInColumns" | "DashboardStringId.PivotCalculationAlongGroupsInRows" | "DashboardStringId.PivotCalculationAlongGroupsInColumnsAndRows" | "DashboardStringId.PivotCalculationAlongGroupsInRowsAndColumns" | "DashboardStringId.PieCalculationAlongArguments" | "DashboardStringId.PieCalculationAlongSeries" | "DashboardStringId.PieCalculationAlongArgumentsAndSeries" | "DashboardStringId.PieCalculationAlongSeriesAndArguments" | "DashboardStringId.RangeFilterCalculationAlongArgumentAndSeries" | "DashboardStringId.RangeFilterCalculationAlongSeriesAndArgument" | "DashboardStringId.GaugeCalculationAlongGauges" | "DashboardStringId.ScatterCalculationAlongArguments" | "DashboardStringId.CalculationAlongSpecificDimensions" | "DashboardStringId.CalculatedFieldTypeString" | "DashboardStringId.CalculatedFieldTypeLong" | "DashboardStringId.CalculatedFieldTypeDecimal" | "DashboardStringId.CalculatedFieldTypeBoolean" | "DashboardStringId.CalculatedFieldTypeDateTime" | "DashboardStringId.CalculatedFieldTypeDouble" | "DashboardStringId.CalculatedFieldTypeAuto" | "DashboardStringId.CalculatedFieldTypeObject" | "DashboardStringId.DefaultEFDataSourceName" | "DashboardStringId.DefaultExcelDataSourceName" | "DashboardStringId.DefaultFileExtractDataSourceName" | "DashboardStringId.DefaultObjectDataSourceName" | "DashboardStringId.DefaultOlapDataSourceName" | "DashboardStringId.DefaultSqlDataSourceName" | "DashboardStringId.DefaultJsonDataSourceName" | "DashboardStringId.DefaultXpoDataSourceName" | "DashboardStringId.OlapRaggedHierarchyNoneItemCaption" | "DashboardStringId.FormatRuleApplyToColumn" | "DashboardStringId.SeriesTypeSideBySideRangeBar" | "DashboardStringId.SeriesTypeRangeArea" | "DashboardStringId.SeriesTypeHighLowClose" | "DashboardStringId.SeriesTypeCandleStick" | "DashboardStringId.SeriesTypeStock" | "DashboardWebStringId.StyleSettings" | "DashboardStringId.ParametersFormCalendarTodayButton" | "DashboardStringId.TreemapLabelArgumentTemplate" | "DashboardStringId.TreemapLabelValueTemplate" | "DashboardStringId.SearchNullValuePrompt" | "DashboardStringId.CustomItems" | "DashboardStringId.FormatRuleAllowNegativeAxis" | "DashboardStringId.FormatRuleDrawAxis" | "DashboardStringId.FormatRuleShowBarOnly" | "DashboardStringId.CommandFormatRuleBottomN" | "DashboardStringId.FormatConditionAppearanceNone" | "DashboardStringId.FormatConditionAppearanceCustom" | "DashboardStringId.FormatConditionAppearancePaleRed" | "DashboardStringId.FormatConditionAppearancePaleYellow" | "DashboardStringId.FormatConditionAppearancePaleGreen" | "DashboardStringId.FormatConditionAppearancePaleBlue" | "DashboardStringId.FormatConditionAppearancePalePurple" | "DashboardStringId.FormatConditionAppearancePaleCyan" | "DashboardStringId.FormatConditionAppearancePaleOrange" | "DashboardStringId.FormatConditionAppearancePaleGray" | "DashboardStringId.FormatConditionAppearanceRed" | "DashboardStringId.FormatConditionAppearanceYellow" | "DashboardStringId.FormatConditionAppearanceGreen" | "DashboardStringId.FormatConditionAppearanceBlue" | "DashboardStringId.FormatConditionAppearancePurple" | "DashboardStringId.FormatConditionAppearanceCyan" | "DashboardStringId.FormatConditionAppearanceOrange" | "DashboardStringId.FormatConditionAppearanceGray" | "DashboardStringId.FormatConditionAppearanceGradientRed" | "DashboardStringId.FormatConditionAppearanceGradientYellow" | "DashboardStringId.FormatConditionAppearanceGradientGreen" | "DashboardStringId.FormatConditionAppearanceGradientBlue" | "DashboardStringId.FormatConditionAppearanceGradientPurple" | "DashboardStringId.FormatConditionAppearanceGradientCyan" | "DashboardStringId.FormatConditionAppearanceGradientOrange" | "DashboardStringId.FormatConditionAppearanceGradientTransparent" | "DashboardStringId.FormatConditionAppearanceFontBold" | "DashboardStringId.FormatConditionAppearanceFontItalic" | "DashboardStringId.FormatConditionAppearanceFontUnderline" | "DashboardStringId.FormatConditionAppearanceFontGrayed" | "DashboardStringId.FormatConditionAppearanceFontRed" | "DashboardStringId.FormatConditionAppearanceFontYellow" | "DashboardStringId.FormatConditionAppearanceFontGreen" | "DashboardStringId.FormatConditionAppearanceFontBlue" | "DashboardStringId.IntersectionLevelModeFirst" | "DashboardStringId.IntersectionLevelModeLast" | "DashboardStringId.IntersectionLevelModeAuto" | "DashboardStringId.IntersectionLevelModeAll" | "DashboardStringId.IntersectionLevelModeSpecific" | "DashboardStringId.FormatRuleApplyToRow" | "DashboardStringId.FormatRuleApplyTo" | "DashboardWebStringId.FilterItem.AllowEmptyFilter" | "DashboardStringId.FormatConditionAppearanceFontStrikeout" | "DashboardStringId.FormatConditionAutomaticValueType" | "DashboardStringId.FormatConditionNumberValueType" | "DashboardStringId.FormatConditionPercentValueType" | "DashboardStringId.CommandFormatRuleRangeIcons" | "DashboardStringId.CommandFormatRuleGreaterThan" | "DashboardStringId.CommandFormatRuleGreaterThanOrEqualTo" | "DashboardStringId.CommandFormatRuleLessThan" | "DashboardStringId.CommandFormatRuleLessThanOrEqualTo" | "DashboardStringId.CommandFormatRuleEqualTo" | "DashboardStringId.CommandFormatRuleNotEqualTo" | "DashboardStringId.CommandFormatRuleBetween" | "DashboardStringId.CommandFormatRuleNotBetween" | "DashboardStringId.CommandFormatRuleBetweenOrEqual" | "DashboardStringId.CommandFormatRuleNotBetweenOrEqual" | "DashboardStringId.CommandFormatRuleContains" | "DashboardStringId.ColorAutoAssigned" | "DashboardStringId.CalculationTypeNone" | "DashboardStringId.UndoText" | "DashboardStringId.RedoText" | "DashboardStringId.DashboardCurrencyUseCurrentCurrency" | "DashboardStringId.CommandDimensionSortModeDisplayText" | "DashboardStringId.CommandDimensionSortModeValue" | "DashboardStringId.CommandDimensionSortModeID" | "DashboardStringId.CommandDimensionSortModeKey" | "DashboardWebStringId.Chart.AddPane" | "DashboardStringId.MapShapeNoneAttribute" | "DashboardStringId.DefaultPeriodName" | "DashboardStringId.CardLayoutTemplateStretchedCaption" | "DashboardStringId.CardLayoutTemplateCenteredCaption" | "DashboardStringId.CardLayoutTemplateCompactCaption" | "DashboardStringId.CardLayoutTemplateLightweightCaption" | "DashboardStringId.CardLayoutTemplateCustomCaption" | "DashboardStringId.CardLayoutTemplateNoneCaption" | "DashboardStringId.CardRowDataElementTypeTitleCaption" | "DashboardStringId.CardRowDataElementTypeSubtitleCaption" | "DashboardStringId.CardRowDataElementTypeActualValueCaption" | "DashboardStringId.CardRowDataElementTypeTargetValueCaption" | "DashboardStringId.CardRowDataElementTypeAbsoluteVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentOfTargetCaption" | "DashboardStringId.CardRowDataElementTypeDimensionValueCaption" | "DashboardStringId.CardRowDataElementTypeCardNameCaption" | "DashboardStringId.CardRowDataElementTypeDeltaIndicatorCaption" | "DashboardStringId.CardRowDataElementTypeSparklineCaption" | "DashboardStringId.FormatRuleApplyToAllElements" | "DashboardWebStringId.Pie.LabelPosition" | "DashboardWebStringId.Pie.LabelPositionOutside" | "DashboardWebStringId.Pie.LabelPositionInside" | "DashboardStringId.IncludeExportDashboardState" | "DashboardStringId.PointLabelContentTypeArgument" | "DashboardStringId.PointLabelContentTypeSeriesName" | "DashboardStringId.PointLabelContentTypeValue" | "DashboardStringId.PointLabelContentTypePercent" | "DashboardWebStringId.DashboardMenu" | "DashboardWebStringId.DashboardMenuNew" | "DashboardWebStringId.DashboardMenuOpen" | "DashboardWebStringId.DashboardMenuSave" | "DashboardWebStringId.DashboardMenuCurrency" | "DashboardWebStringId.DashboardMenuDataSources" | "DashboardWebStringId.DashboardMenuColorScheme" | "DashboardWebStringId.DashboardMenuNewDashboardCreate" | "DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder" | "DashboardWebStringId.Binding.DefaultEmptyPlaceholder" | "DashboardWebStringId.Binding.DefaultSelectedPlaceholder" | "DashboardWebStringId.Binding.DataFiltering" | "DashboardWebStringId.Binding.Argument" | "DashboardWebStringId.Binding.Attribute" | "DashboardWebStringId.Binding.Sparkline" | "DashboardWebStringId.Binding.Columns" | "DashboardWebStringId.Binding.TooltipDimensions" | "DashboardWebStringId.Binding.TooltipMeasures" | "DashboardWebStringId.Binding.HiddenDimensions" | "DashboardWebStringId.Binding.HiddenMeasures" | "DashboardWebStringId.Binding.AddDimension" | "DashboardWebStringId.Binding.AddMeasure" | "DashboardWebStringId.Binding.AddColumn" | "DashboardWebStringId.Binding.AddRow" | "DashboardWebStringId.Binding.AddValue" | "DashboardWebStringId.Binding.AddSeries" | "DashboardWebStringId.Binding.SetLatitude" | "DashboardWebStringId.Binding.SetLongitude" | "DashboardWebStringId.Binding.SetArgument" | "DashboardWebStringId.Binding.AddArgument" | "DashboardWebStringId.Binding.SetWeight" | "DashboardWebStringId.Binding.SetColor" | "DashboardWebStringId.Binding.SetAttribute" | "DashboardWebStringId.Binding.SetValue" | "DashboardWebStringId.Binding.XAxis" | "DashboardWebStringId.Binding.YAxis" | "DashboardWebStringId.Binding.ConfigureDimension" | "DashboardWebStringId.Binding.ConfigureMeasure" | "DashboardWebStringId.Binding.ConfigureSeries" | "DashboardWebStringId.Binding.ConfigureArgument" | "DashboardWebStringId.Binding.ConfigureValue" | "DashboardWebStringId.Binding.ConfigureAttribute" | "DashboardWebStringId.Binding.ConfigureLatitude" | "DashboardWebStringId.Binding.ConfigureLongitude" | "DashboardWebStringId.Binding.ConfigureColumn" | "DashboardWebStringId.Binding.ConfigureRow" | "DashboardWebStringId.Binding.ConfigureWeight" | "DashboardWebStringId.Binding.ConfigureColor" | "DashboardWebStringId.Binding.ShowAll" | "DashboardWebStringId.ColorScheme.Color" | "DashboardWebStringId.ColorScheme.Colors" | "DashboardWebStringId.Parameters.ParameterList" | "DashboardWebStringId.Parameters.AddParameter" | "DashboardWebStringId.Parameters.AddParameter.Tooltip" | "DashboardWebStringId.Parameters.NoSelectedParameter" | "DashboardWebStringId.Parameters.Reorder" | "DashboardWebStringId.Parameters.Done" | "DashboardWebStringId.Currency.Currency" | "DashboardWebStringId.Currency.CurrencyCulture" | "DashboardWebStringId.Currency.DefaultCurrencyWarning" | "DashboardWebStringId.Preview" | "DashboardWebStringId.Add" | "DashboardWebStringId.DataSources.UsedDataSources" | "DashboardWebStringId.DataSources.DataItems" | "DashboardWebStringId.DataSources.AddQuery" | "DashboardWebStringId.DataSources.AddCalculatedField" | "DashboardWebStringId.DataSources.AddDataSource" | "DashboardWebStringId.DataSources.NoUsedDataSources" | "DashboardWebStringId.DataSources.NoAvailableDataSources" | "DashboardWebStringId.DataSources.ChooseDataSource" | "DashboardWebStringId.DataSources.CreateDataSource" | "DashboardWebStringId.DataSources.CreateNewDataSource" | "DashboardWebStringId.DataSources.CreateDataSource.Tooltip" | "DashboardWebStringId.DataSources.EditCalculatedField" | "DashboardWebStringId.DataSources.CalculatedField.Name" | "DashboardWebStringId.DataSources.CalculatedField.FieldType" | "DashboardWebStringId.DataSources.CalculatedField.UniqueNameError" | "DashboardWebStringId.DataSources.CalculatedField.Corrupted" | "DashboardWebStringId.DataSources.Edit" | "DashboardStringId.MessageCollectionTypesNotSupported" | "DashboardWebStringId.New.DashboardName" | "DashboardWebStringId.Bindings" | "DashboardWebStringId.Interactivity" | "DashboardWebStringId.Options" | "DashboardWebStringId.Remove" | "DashboardWebStringId.MasterFilterMode" | "DashboardWebStringId.Title.Text" | "DashboardWebStringId.Title.Visible" | "DashboardWebStringId.Title.IncludeMasterFilter" | "DashboardWebStringId.Title.Aligment" | "DashboardWebStringId.Title.Image" | "DashboardWebStringId.DataSources.Cancel" | "DashboardWebStringId.DataSources.IncludeToTheDashboard" | "DashboardWebStringId.DataSources.AvailableDataSourcesError" | "DashboardWebStringId.DataSources.DashboardDataSourceWizard" | "DashboardWebStringId.Viewer" | "DashboardWebStringId.Loading" | "DashboardWebStringId.ClickHereInvitation" | "DashboardWebStringId.BindDataInvitation" | "DashboardWebStringId.AddItemInvitation" | "DashboardWebStringId.Parameters.Values" | "DashboardWebStringId.Binding.Cards" | "DashboardWebStringId.Binding.AddCard" | "DashboardWebStringId.Binding.ConfigureCard" | "DashboardWebStringId.Binding.AddValues" | "DashboardWebStringId.Binding.ConfigureValues" | "DashboardWebStringId.Binding.Maps" | "DashboardWebStringId.Binding.AddMap" | "DashboardWebStringId.Binding.ConfigureMap" | "DashboardWebStringId.Binding.Gauges" | "DashboardWebStringId.Binding.AddGauge" | "DashboardWebStringId.Binding.ConfigureGauge" | "DashboardWebStringId.InteractivityOptions" | "DashboardWebStringId.Binding.Values" | "DashboardWebStringId.Binding.RemovePane" | "DashboardWebStringId.ClickToSetFilterCriteria" | "DashboardWebStringId.DataSources.OK" | "DashboardWebStringId.DataSources.Save" | "DashboardWebStringId.Cards.ArrangementMode" | "DashboardWebStringId.Cards.ArrangementMode.Auto" | "DashboardWebStringId.Cards.ArrangementMode.FixedRows" | "DashboardWebStringId.Cards.ArrangementMode.FixedColumns" | "DashboardWebStringId.Cards.LineCount" | "DashboardWebStringId.ConditionalFormatting" | "DashboardWebStringId.CollectionEditor.NoItems" | "DashboardWebStringId.CollectionEditor.Totals.NoItems" | "DashboardWebStringId.CollectionEditor.Parameters.NoItems" | "DashboardWebStringId.PivotGrid.AutoExpandColumnGroups" | "DashboardWebStringId.PivotGrid.AutoExpandRowGroups" | "DashboardWebStringId.PivotGrid.ColumnGrandTotals" | "DashboardWebStringId.PivotGrid.RowGrandTotals" | "DashboardWebStringId.PivotGrid.ColumnTotals" | "DashboardWebStringId.PivotGrid.RowTotals" | "DashboardWebStringId.PivotGrid.ValuesPosition" | "DashboardWebStringId.PivotGrid.ValuesPositionColumns" | "DashboardWebStringId.PivotGrid.ValuesPositionRows" | "DashboardWebStringId.PivotGrid.RowTotalsPosition" | "DashboardWebStringId.PivotGrid.RowTotalsPositionBottom" | "DashboardWebStringId.PivotGrid.RowTotalsPositionTop" | "DashboardWebStringId.PivotGrid.ColumnTotalsPosition" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionFar" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionNear" | "DashboardWebStringId.PivotGrid.LayoutType" | "DashboardWebStringId.PivotGrid.LayoutTypeCompact" | "DashboardWebStringId.PivotGrid.LayoutTypeTabular" | "DashboardWebStringId.Options.Caption" | "DashboardWebStringId.InteractivityOptions.IsMasterFilter" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.None" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Single" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Multiple" | "DashboardWebStringId.InteractivityOptions.TargetDimensions" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Arguments" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Series" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Points" | "DashboardWebStringId.ColoringOptions" | "DashboardWebStringId.DataSources.Filter" | "DashboardWebStringId.Chart.Rotated" | "DashboardWebStringId.Chart.Panes" | "DashboardWebStringId.Chart.Legend" | "DashboardWebStringId.Chart.AxisX" | "DashboardWebStringId.Chart.AxisY" | "DashboardWebStringId.Chart.AxisYSecondary" | "DashboardWebStringId.Chart.PointLabelOptions" | "DashboardWebStringId.Chart.AxisXMeasure" | "DashboardWebStringId.Chart.AxisYMeasure" | "DashboardWebStringId.Chart.Weight" | "DashboardWebStringId.Chart.Content" | "DashboardWebStringId.Chart.ArgumentAndWeight" | "DashboardWebStringId.Chart.ArgumentAndValues" | "DashboardWebStringId.Chart.Reverse" | "DashboardWebStringId.Chart.Visible" | "DashboardWebStringId.Chart.Title" | "DashboardWebStringId.Chart.TitleText" | "DashboardWebStringId.Chart.EnableZooming" | "DashboardWebStringId.Chart.LimitVisiblePoints" | "DashboardWebStringId.Chart.VisiblePointsCount" | "DashboardWebStringId.Chart.AlwaysShowZeroLevel" | "DashboardWebStringId.Chart.GridLines" | "DashboardWebStringId.Chart.LogarithmicScale" | "DashboardWebStringId.Chart.LogarithmicScaleBase" | "DashboardWebStringId.Chart.LogarithmicScaleBase2" | "DashboardWebStringId.Chart.LogarithmicScaleBase5" | "DashboardWebStringId.Chart.LogarithmicScaleBase10" | "DashboardWebStringId.Chart.Position" | "DashboardWebStringId.Chart.IsInsideOfDiagram" | "DashboardWebStringId.Chart.PrimaryAxisY" | "DashboardWebStringId.Chart.SecondaryAxisY" | "DashboardWebStringId.Chart.Name" | "DashboardWebStringId.Chart.PlotOnSecondaryAxis" | "DashboardWebStringId.Chart.IgnoreEmptyPoints" | "DashboardWebStringId.Chart.ShowPointMarkers" | "DashboardWebStringId.Chart.Value" | "DashboardWebStringId.Chart.ShowZeroValues" | "DashboardWebStringId.Chart.OverlappingMode" | "DashboardWebStringId.Chart.Orientation" | "DashboardWebStringId.Chart.ShowPointLablels" | "DashboardWebStringId.Chart.TooltipContent" | "DashboardWebStringId.Chart.LabelContent" | "DashboardWebStringId.Card.SparklineOptions" | "DashboardWebStringId.Card.SparklineVisible" | "DashboardWebStringId.Chart.Position.TopLeftVertical" | "DashboardWebStringId.Chart.Position.TopLeftHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterHorizontal" | "DashboardWebStringId.Chart.Position.TopRightVertical" | "DashboardWebStringId.Chart.Position.TopRightHorizontal" | "DashboardWebStringId.Chart.Position.BottomLeftVertical" | "DashboardWebStringId.Chart.Position.BottomLeftHorizontal" | "DashboardWebStringId.Chart.Position.BottomCenterHorizontal" | "DashboardWebStringId.Chart.Position.BottomRightVertical" | "DashboardWebStringId.Chart.Position.BottomRightHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterVertical" | "DashboardWebStringId.Chart.Position.BottomCenterVertical" | "DashboardWebStringId.FilterItem.Type" | "DashboardWebStringId.FilterItem.Type.Standard" | "DashboardWebStringId.FilterItem.Type.Checked" | "DashboardWebStringId.FilterItem.Type.Radio" | "DashboardWebStringId.FilterItem.ShowAllValue" | "DashboardWebStringId.FilterItem.EnableSearch" | "DashboardWebStringId.Gauge.Min" | "DashboardWebStringId.Gauge.Max" | "DashboardWebStringId.Gauge.ScaleOptions" | "DashboardWebStringId.Gauge.Type" | "DashboardWebStringId.Gauge.Type.FullQuarterGauge" | "DashboardWebStringId.Gauge.Type.HalfCircular" | "DashboardWebStringId.Gauge.Type.LeftQuarterCircular" | "DashboardWebStringId.Gauge.Type.RightQuarterCircular" | "DashboardWebStringId.Gauge.Type.ThreeFourthCircular" | "DashboardWebStringId.Gauge.Type.LinearHorizontal" | "DashboardWebStringId.Gauge.Type.LinearVertical" | "DashboardWebStringId.Gauge.Captions" | "DashboardWebStringId.Gauge.Scale.Custom" | "DashboardWebStringId.Gauge.Scale.Auto" | "DashboardWebStringId.Grid.ColumnType" | "DashboardWebStringId.Grid.DisplayMode" | "DashboardWebStringId.Grid.DisplayMode.Value" | "DashboardWebStringId.Grid.DisplayMode.Bar" | "DashboardWebStringId.Grid.DisplayMode.Text" | "DashboardWebStringId.Grid.DisplayMode.Image" | "DashboardWebStringId.Grid.FixedWidth" | "DashboardWebStringId.Grid.WidthType" | "DashboardWebStringId.Grid.WidthType.Weight" | "DashboardWebStringId.Grid.WidthType.FitToContent" | "DashboardWebStringId.Grid.DeltaOptions" | "DashboardWebStringId.Grid.ShowStartEndValues" | "DashboardWebStringId.Grid.TotalType" | "DashboardWebStringId.Grid.Dimension" | "DashboardWebStringId.Grid.Measure" | "DashboardWebStringId.Grid.Delta" | "DashboardWebStringId.Grid.Sparkline" | "DashboardWebStringId.Grid.Hyperlink" | "DashboardWebStringId.Grid.Options" | "DashboardWebStringId.Map.ShapeFileLoaded" | "DashboardWebStringId.Map.AttributeFileLoaded" | "DashboardWebStringId.Map.ValueMap" | "DashboardWebStringId.Map.DeltaMap" | "DashboardWebStringId.Map.TooltipCaption" | "DashboardWebStringId.Map.TooltipActualValueCaption" | "DashboardWebStringId.Map.TooltipDeltaCaption" | "DashboardWebStringId.Map.CustomMapOptions" | "DashboardWebStringId.Map.CustomMapOptionsSource" | "DashboardWebStringId.Map.CustomMapOptionsUrl" | "DashboardWebStringId.Map.CustomMapOptionsFile" | "DashboardWebStringId.Map.CustomMapUrl" | "DashboardWebStringId.Map.CustomMapFile" | "DashboardWebStringId.Map.CustomAttributeFile" | "DashboardWebStringId.Map.AttributeDimension" | "DashboardWebStringId.Map.IncludeSummaryValueToShapeTitle" | "DashboardWebStringId.Map.AttributeName" | "DashboardWebStringId.Map.TooltipAttribute" | "DashboardWebStringId.Map.TooltipDimensions" | "DashboardWebStringId.Map.Area.Custom" | "DashboardWebStringId.Map.Area.WorldCountries" | "DashboardWebStringId.Map.Area.Europe" | "DashboardWebStringId.Map.Area.Asia" | "DashboardWebStringId.Map.Area.NorthAmerica" | "DashboardWebStringId.Map.Area.SouthAmerica" | "DashboardWebStringId.Map.Area.Africa" | "DashboardWebStringId.Map.Area.USA" | "DashboardWebStringId.Map.Area.Canada" | "DashboardWebStringId.Map.Viewport" | "DashboardWebStringId.Map.ShapeTitleAttribute" | "DashboardWebStringId.Map.UseBindingAttribute" | "DashboardWebStringId.Map.WeightedLegendType" | "DashboardWebStringId.Map.WeightedLegendType.Linear" | "DashboardWebStringId.Map.WeightedLegendType.Nested" | "DashboardWebStringId.Map.Orientation.Vertical" | "DashboardWebStringId.Map.Orientation.Horizontal" | "DashboardWebStringId.Map.Position.TopLeft" | "DashboardWebStringId.Map.Position.TopCenter" | "DashboardWebStringId.Map.Position.TopRight" | "DashboardWebStringId.Map.Position.BottomLeft" | "DashboardWebStringId.Map.Position.BottomCenter" | "DashboardWebStringId.Map.Position.BottomRight" | "DashboardWebStringId.Map.Viewport.TopLatitude" | "DashboardWebStringId.Map.Viewport.LeftLongitude" | "DashboardWebStringId.Map.Viewport.RightLongitude" | "DashboardWebStringId.Map.Viewport.BottomLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLongitude" | "DashboardWebStringId.Map.Viewport.CreateViewerPaddings" | "DashboardWebStringId.Map.ShowLegend" | "DashboardWebStringId.Pie.Type" | "DashboardWebStringId.Pie" | "DashboardWebStringId.Pie.Donut" | "DashboardWebStringId.Pie.LabelContentType.None" | "DashboardWebStringId.Pie.LabelContentType.Argument" | "DashboardWebStringId.Pie.LabelContentType.Percent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndPercent" | "DashboardWebStringId.Pie.LabelContentType.Value" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndValue" | "DashboardWebStringId.Pie.LabelContentType.ValueAndPercent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentValueAndPercent" | "DashboardWebStringId.Image.BindingMode" | "DashboardWebStringId.Image.BindingMode.BinaryArray" | "DashboardWebStringId.Image.BindingMode.Uri" | "DashboardWebStringId.RangeFilter.UriPattern" | "DashboardWebStringId.Image.SizeMode.Clip" | "DashboardWebStringId.Image.SizeMode.Stretch" | "DashboardWebStringId.Image.SizeMode.Zoom" | "DashboardWebStringId.Image.SizeMode.Squeeze" | "DashboardWebStringId.Image.HorizontalAlignment" | "DashboardWebStringId.Image.VerticalAlignment" | "DashboardWebStringId.Image.Alignment.Left" | "DashboardWebStringId.Image.Alignment.Center" | "DashboardWebStringId.Image.Alignment.Right" | "DashboardWebStringId.Image.Alignment.Top" | "DashboardWebStringId.Image.Alignment.Bottom" | "DashboardWebStringId.SeriesItem.SeriesDimensions" | "DashboardWebStringId.TextBox.Text" | "DashboardWebStringId.Chart.Orientation.Default" | "DashboardWebStringId.Chart.Orientation.RotateRight" | "DashboardWebStringId.Chart.Orientation.RotateLeft" | "DashboardWebStringId.Chart.OverlappingMode.Hide" | "DashboardWebStringId.Chart.OverlappingMode.None" | "DashboardWebStringId.Chart.Position.Outside" | "DashboardWebStringId.Chart.Position.Inside" | "DashboardWebStringId.Chart.SeriesType.Weighted" | "DashboardWebStringId.Coloring.MeasuresColoringMode" | "DashboardWebStringId.Coloring.Global" | "DashboardWebStringId.Coloring.Local" | "DashboardWebStringId.Delta.ValueType" | "DashboardWebStringId.Delta.ResultIndication" | "DashboardWebStringId.Delta.ThresholdType" | "DashboardWebStringId.Delta.ThresholdValue" | "DashboardWebStringId.Sparkline.ViewType" | "DashboardWebStringId.Sparkline.HighlightMinMaxPoints" | "DashboardWebStringId.Sparkline.HighlightStartEndPoints" | "DashboardWebStringId.Title.Aligment.Left" | "DashboardWebStringId.Title.Aligment.Center" | "DashboardWebStringId.Parameters.LookUpSettingsType.NoLookUp" | "DashboardWebStringId.Parameters.LookUpSettingsType.StaticList" | "DashboardWebStringId.Parameters.LookUpSettingsType.DynamicList" | "DashboardWebStringId.Parameters.LookUpSettingsType" | "DashboardWebStringId.Parameters.DefaultValue" | "DashboardWebStringId.DataItem" | "DashboardWebStringId.DataItem.Precision" | "DashboardWebStringId.DataItem.IncludeGroupSeparator" | "DashboardWebStringId.DataItem.ShowValues" | "DashboardWebStringId.DataItem.ShowTotals" | "DashboardWebStringId.DataItem.ShowGrandTotals" | "DashboardWebStringId.Dialog.ConfirmSaving" | "DashboardWebStringId.Dimension.GroupInterval" | "DashboardWebStringId.Dimension.SortMode" | "DashboardWebStringId.Dialog.ArgumentMode" | "DashboardWebStringId.Calculations" | "DashboardWebStringId.Calculations.Expression" | "DashboardWebStringId.Calculations.DifferenceCalculation" | "DashboardWebStringId.Calculations.Moving" | "DashboardWebStringId.Calculations.RunningTotal" | "DashboardWebStringId.Calculations.PercentOfTotal" | "DashboardWebStringId.Calculations.Rank" | "DashboardWebStringId.Calculations.DefinitionMode" | "DashboardWebStringId.Calculations.WindowDefinition" | "DashboardWebStringId.Calculations.WindowDefinitionModeSpecific" | "DashboardWebStringId.Calculations.WindowDefinitionModePredefined" | "DashboardWebStringId.Calculations.DifferenceType" | "DashboardWebStringId.TreemapLayoutAlgorithm" | "DashboardWebStringId.TilesLabelContentType" | "DashboardWebStringId.TilesTooltipContentType" | "DashboardWebStringId.GroupsLabelContentType" | "DashboardWebStringId.GroupsTooltipContentType" | "DashboardWebStringId.ShowOthersValue" | "DashboardWebStringId.TopNEnabled" | "DashboardWebStringId.Parameters.StaticListLookUpSettings" | "DashboardWebStringId.Parameters.DynamicListLookUpSettings" | "DashboardWebStringId.ConvertTo" | "DashboardWebStringId.Duplicate" | "DashboardWebStringId.DataSourceWizard" | "DashboardWebStringId.RangeFilter.CustomPeriods" | "DashboardWebStringId.RangeFilter.StartMode" | "DashboardWebStringId.RangeFilter.EndMode" | "DashboardWebStringId.RangeFilter.StartIntervalAndOffset" | "DashboardWebStringId.RangeFilter.EndIntervalAndOffset" | "DashboardWebStringId.RangeFilter.StartDate" | "DashboardWebStringId.RangeFilter.EndDate" | "DashboardWebStringId.RangeFilter.None" | "DashboardWebStringId.RangeFilter.Fixed" | "DashboardWebStringId.RangeFilter.Flow" | "DashboardWebStringId.Tabs.Binding" | "DashboardWebStringId.Tabs.DataShaping" | "DashboardWebStringId.Tabs.Format" | "DashboardWebStringId.Calculations.Types.Moving" | "DashboardWebStringId.Parameters.SortByMember" | "DashboardWebStringId.Parameters.LookUpSettingsTypeCaption" | "DashboardWebStringId.Dashboard.Items" | "DashboardWebStringId.Dashboard.Groups" | "DashboardWebStringId.Dashboard.LayoutItems" | "DashboardWebStringId.Dashboard.ComponentName" | "DashboardWebStringId.ButtonConfirm" | "DashboardWebStringId.Colorization.GroupInterval" | "DashboardWebStringId.ButtonOn" | "DashboardWebStringId.ButtonOff" | "DashboardWebStringId.ButtonYes" | "DashboardWebStringId.ButtonNo" | "DashboardWebStringId.ButtonDiscrete" | "DashboardWebStringId.ButtonContinuous" | "DashboardWebStringId.ButtonVisible" | "DashboardWebStringId.ButtonHidden" | "DashboardWebStringId.Calculations.PreviousValuesCount" | "DashboardWebStringId.Calculations.NextValuesCount" | "DashboardWebStringId.Calculations.RankType" | "DashboardWebStringId.Calculations.RankOrder" | "DashboardWebStringId.TileOptions" | "DashboardWebStringId.MapLockNavigationLocked" | "DashboardWebStringId.MapLockNavigationUnlocked" | "DashboardWebStringId.ConditionalFormatting.BarOptions" | "DashboardWebStringId.ConditionalFormatting.CalculatedBy" | "DashboardWebStringId.ConditionalFormatting.IconType" | "DashboardWebStringId.ConditionalFormatting.PredefinedColor" | "DashboardWebStringId.ConditionalFormatting.AppearanceType" | "DashboardWebStringId.ConditionalFormatting.FontStyle" | "DashboardWebStringId.ConditionalFormatting.FontFamily" | "DashboardWebStringId.ConditionalFormatting.FontRegular" | "DashboardWebStringId.ConditionalFormatting.IconType.None" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowSideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGraySideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDash" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedTriangleDown" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenTriangleUp" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingHalfGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1QuarterGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1Bar" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1FilledBox" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTriangle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedDiamond" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedFlag" | "DashboardWebStringId.ConditionalFormatting.IntersectionColumnDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionRowDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionLevelMode" | "DashboardWebStringId.ConditionalFormatting.GradientRangeBar" | "DashboardWebStringId.ConditionalFormatting.RangeGradient" | "DashboardWebStringId.ConditionalFormatting.SegmentNumber" | "DashboardWebStringId.ConditionalFormatting.ValueComparison" | "DashboardWebStringId.ConditionalFormatting.Ranges" | "DashboardWebStringId.ConditionalFormatting.AverageType" | "DashboardWebStringId.ConditionalFormatting.Above" | "DashboardWebStringId.ConditionalFormatting.AboveOrEqual" | "DashboardWebStringId.ConditionalFormatting.Below" | "DashboardWebStringId.ConditionalFormatting.BelowOrEqual" | "DashboardWebStringId.ConditionalFormatting.StyleSettingsType" | "DashboardWebStringId.ConditionalFormatting.Positive" | "DashboardWebStringId.ConditionalFormatting.Negative" | "DashboardWebStringId.ConditionalFormatting.MinimumType" | "DashboardWebStringId.ConditionalFormatting.MaximumType" | "DashboardWebStringId.ConditionalFormatting.DateType" | "DashboardWebStringId.ConditionalFormatting.DateType.None" | "DashboardWebStringId.ConditionalFormatting.DateType.SpecificDate" | "DashboardWebStringId.ConditionalFormatting.DateType.BeyondThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.NextWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.Tomorrow" | "DashboardWebStringId.ConditionalFormatting.DateType.Today" | "DashboardWebStringId.ConditionalFormatting.DateType.Yesterday" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.LastWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.PriorThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.Empty" | "DashboardWebStringId.ConditionalFormatting.DateType.User" | "DashboardWebStringId.ConditionalFormatting.DateType.Beyond" | "DashboardWebStringId.ConditionalFormatting.DateType.ThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.ThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAfter1" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAfter2" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo1" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo2" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo3" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo4" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo5" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo6" | "DashboardWebStringId.ConditionalFormatting.DateType.Earlier" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeDataItem" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeCard" | "DashboardWebStringId.Colorization.NoSelectedSchema" | "DashboardWebStringId.Colorization.ColorSchemes" | "DashboardWebStringId.LayoutHasBeenChangedDialogMessage" | "DashboardWebStringId.SaveConfirmationDialogMessage" | "DashboardWebStringId.SaveChangesDialogMessage" | "DashboardWebStringId.Dialog.ChangeDataMemberMessage" | "DashboardWebStringId.Dialog.RemovedDataItemsMessage" | "DashboardWebStringId.Dialog.ConfirmChanges" | "DashboardWebStringId.Dialog.Save" | "DashboardWebStringId.Dialog.DoNotSave" | "DashboardWebStringId.Dialog.ButtonYes" | "DashboardWebStringId.Dialog.ButtonDontChange" | "DashboardWebStringId.Colorization.ColorSchemeType" | "DashboardWebStringId.Colorization.MeasureNames" | "DashboardWebStringId.Colorization.AddColor" | "DashboardWebStringId.Colorization.ValidationSelectMeasure" | "DashboardWebStringId.ColoringModeAuto" | "DashboardWebStringId.ColoringModeOff" | "DashboardWebStringId.ColoringModeOn" | "DashboardWebStringId.ColorScheme.Empty" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButton" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip" | "DashboardWebStringId.ConditionalFormatting.Miscellaneous" | "DashboardWebStringId.Dashboards" | "DashboardWebStringId.EditInDesigner" | "DashboardWebStringId.NoDashboards" | "DashboardWebStringId.AddNewDashboard" | "DashboardWebStringId.NewDashboard" | "DashboardWebStringId.Binding.Searching" | "DashboardWebStringId.Binding.EmptySearchResult" | "DashboardWebStringId.Errors.AttemptToLoadData" | "DashboardWebStringId.ConditionType" | "DashboardWebStringId.ConditionalFormatting.UnsupportedDataType" | "DashboardWebStringId.FormatRule" | "DashboardWebStringId.Notification.DashboardSaving" | "DashboardWebStringId.Notification.DashboardSaved" | "DashboardWebStringId.Notification.DashboardCanNotBeSaved" | "DashboardWebStringId.Notification.DashboardSavingIsNotAvailable" | "DashboardWebStringId.Notification.AttemptToLoadDashboards" | "DashboardWebStringId.Notification.DashboardLoading" | "DashboardWebStringId.Notification.AttemptToLoadDashboard" | "DashboardWebStringId.Notification.AttemptToConnectionStrings" | "DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode" | "DashboardWebStringId.Notification.AttemptToLoadParameterValues" | "DashboardWebStringId.Notification.AttemptToGetUnderlyingData" | "DashboardWebStringId.Notification.AttemptToConvertItemToType" | "DashboardWebStringId.Notification.AttemptToLoadDimensionUniqueValues" | "DashboardWebStringId.Notification.AttemptToLoadFieldListForDataSource" | "DashboardWebStringId.Notification.AttemptToGetColorScheme" | "DashboardWebStringId.Notification.NewDashboardCannotBeCreated" | "DashboardWebStringId.Notification.ErrorHasOccuredOn" | "DashboardWebStringId.Notification.UnsupportedDataSourceType" | "DashboardWebStringId.LimitVisibleData.DisplayAllDataTooltip" | "DashboardWebStringId.LimitVisibleData.IncreasePerformanceTooltip" | "DashboardWebStringId.ConditionalFormatting.Condition" | "DashboardWebStringId.CardLayout.MinWidth" | "DashboardWebStringId.CardLayout.MaxWidth" | "DashboardWebStringId.CardLayout.Editor.CardLayout" | "DashboardWebStringId.CardLayout.Editor.FormatOptions" | "DashboardWebStringId.CardLayout.LayoutOptions" | "DashboardWebStringId.CardLayout.ResetTemplate" | "DashboardWebStringId.CardLayout.ApplyToAllCards" | "DashboardWebStringId.Binding.ValuesPattern" | "DashboardWebStringId.Parameters.ParameterNameShouldBeUnique" | "DashboardWebStringId.Title.ImageEmbedded" | "DashboardWebStringId.Title.ImageLinked" | "DashboardWebStringId.Title.ImageNone" | "DashboardWebStringId.RangeFilter.SetDefaultCustomPeriod" | "DashboardWebStringId.RangeFilter.ClearDefaultCustomPeriod" | "DashboardWebStringId.MobileLayout.Back" | "DashboardWebStringId.MobileLayout.SwitchToViewer" | "DashboardWebStringId.Search" | "DashboardStringId.DefaultNameTabPage" | "DashboardStringId.DefaultNameChartPane" | "DashboardStringId.NewCalculatedFieldNamePrefix" | "DashboardStringId.NewParameterNamePrefix" | "AnalyticsCoreStringId.Parameter_Type_String" | "AnalyticsCoreStringId.Parameter_Type_DateTime" | "AnalyticsCoreStringId.Parameter_Type_Int16" | "AnalyticsCoreStringId.Parameter_Type_Int32" | "AnalyticsCoreStringId.Parameter_Type_Int64" | "AnalyticsCoreStringId.Parameter_Type_Float" | "AnalyticsCoreStringId.Parameter_Type_Double" | "AnalyticsCoreStringId.Parameter_Type_Decimal" | "AnalyticsCoreStringId.Parameter_Type_Boolean" | "AnalyticsCoreStringId.Parameter_Type_Guid" | "AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption" | "DataAccessUIStringId.FiltersView" | "DashboardStringId.SeriesTypeGroupArea" | "DashboardStringId.SeriesTypeGroupBar" | "DashboardStringId.SeriesTypeGroupBubble" | "DashboardStringId.SeriesTypeGroupFinancial" | "DashboardStringId.SeriesTypeGroupPointLine" | "DashboardStringId.SeriesTypeGroupRange" | "DashboardStringId.FunctionCategoryWindow" | "DashboardStringId.FunctionCategoryAggregate" | "DashboardStringId.FunctionCategoryAdvanced" | "DashboardStringId.FunctionDescriptionWindowAvg" | "DashboardStringId.FunctionDescriptionRunningMin" | "DashboardStringId.FunctionDescriptionTotal" | "DashboardStringId.FunctionDescriptionRankCompetition" | "DashboardStringId.FunctionDescriptionLookup" | "DashboardStringId.FunctionDescriptionRunningCount" | "DashboardStringId.FunctionDescriptionWindowMax" | "DashboardStringId.FunctionDescriptionVarp" | "DashboardStringId.FunctionDescriptionRunningAvg" | "DashboardStringId.FunctionDescriptionFirst" | "DashboardStringId.FunctionDescriptionWindowMin" | "DashboardStringId.FunctionDescriptionWindowStdDev" | "DashboardStringId.FunctionDescriptionLast" | "DashboardStringId.FunctionDescriptionWindowCount" | "DashboardStringId.FunctionDescriptionCountDistinct" | "DashboardStringId.FunctionDescriptionIndex" | "DashboardStringId.FunctionDescriptionWindowStdDevp" | "DashboardStringId.FunctionDescriptionWindowMode" | "DashboardStringId.FunctionDescriptionRunningMax" | "DashboardStringId.FunctionDescriptionRankPercentile" | "DashboardStringId.FunctionDescriptionRankDense" | "DashboardStringId.FunctionDescriptionWindowSum" | "DashboardStringId.FunctionDescriptionWindowCountDistinct" | "DashboardStringId.FunctionDescriptionStdDevp" | "DashboardStringId.FunctionDescriptionSize" | "DashboardStringId.FunctionDescriptionMedian" | "DashboardStringId.FunctionDescriptionRankModified" | "DashboardStringId.FunctionDescriptionWindowMedian" | "DashboardStringId.FunctionDescriptionRunningSum" | "DashboardStringId.FunctionDescriptionWindowVarp" | "DashboardStringId.FunctionDescriptionWindowVar" | "DashboardStringId.FunctionDescriptionStdDev" | "DashboardStringId.FunctionDescriptionRankUnique" | "DashboardStringId.FunctionDescriptionVar" | "DashboardStringId.FunctionDescriptionAggr" | "DashboardStringId.FunctionDescriptionAggrJoinRule" | "DashboardStringId.FunctionDescriptionWindowDefinition" | "DashboardStringId.FunctionDescriptionWindowDefinitionPartitionBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderAsc" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderDesc" | "DashboardStringId.AggregateExFunctionDescriptionCountNotNull" | "DashboardStringId.AggregateExFunctionDescriptionMode" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHour" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinute" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinuteSecond" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateMonthYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear2" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateQuarterYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetQuarter" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfMonth" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime3" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime4" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime5" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime6" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToBoolean" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToDateTime" | "DashboardStringId.SparklineIndicationModeLine" | "DashboardStringId.SparklineIndicationModeArea" | "DashboardStringId.SparklineIndicationModeBar" | "DashboardStringId.SparklineIndicationModeWinLoss" | "DashboardStringId.DefaultNameDateFilterItem" | "DashboardWebStringId.DateFilter.FilterType" | "DashboardWebStringId.DateFilter.FilterTypeExact" | "DashboardWebStringId.DateFilter.FilterTypeAfter" | "DashboardWebStringId.DateFilter.FilterTypeBefore" | "DashboardWebStringId.DateFilter.FilterTypeBetween" | "DashboardWebStringId.DateFilter.ArrangementMode" | "DashboardWebStringId.DateFilter.ArrangementModeAutoHeight" | "DashboardWebStringId.DateFilter.ArrangementModeHorizontal" | "DashboardWebStringId.DateFilter.ArrangementModeVertical" | "DashboardWebStringId.DateFilter.DatePickerLocation" | "DashboardWebStringId.DateFilter.DatePickerLocationFar" | "DashboardWebStringId.DateFilter.DatePickerLocationNear" | "DashboardWebStringId.DateFilter.DatePickerLocationHidden" | "DashboardStringId.DateFilterDisplayTextPattern" | "DashboardStringId.DateFilterDatePickerButtonDefaultText" | "DashboardStringId.FromDatePeriodCaption" | "DashboardStringId.ToDatePeriodCaption" | "DashboardStringId.FromToDatePeriodCaption" | "DashboardStringId.UniqueNameValidationMessage" | "DashboardStringId.GridTotalAutoTemplate" | "DashboardStringId.GridTotalValueTemplate" | "DashboardStringId.GridTotalTemplate" | "DashboardStringId.GridTotalTypeCount" | "DashboardStringId.GridTotalTypeMin" | "DashboardStringId.GridTotalTypeMax" | "DashboardStringId.GridTotalTypeAvg" | "DashboardStringId.GridTotalTypeSum" | "DashboardStringId.ActionShowDataInspector" | "DashboardStringId.InspectedData" | "DashboardStringId.InspectedTypeFormatString" | "DashboardStringId.AggregatedDataType" | "DashboardStringId.RawDataType" | "DashboardStringId.OLAPUnavailableRawData" | "DashboardStringId.SparklineValuesSeparator" | "DashboardStringId.SparklineArgumentValueSeparator" | "DashboardWebStringId.Grid.FilterClause.ApplyFilter" | "DashboardWebStringId.Grid.FilterClause.ResetOperation" | "DashboardWebStringId.Grid.FilterClause.Contains" | "DashboardWebStringId.Grid.FilterClause.DoesNotContain" | "DashboardWebStringId.Grid.FilterClause.StartsWith" | "DashboardWebStringId.Grid.FilterClause.EndsWith" | "DashboardWebStringId.Grid.FilterClause.Equals" | "DashboardWebStringId.Grid.FilterClause.DoesNotEqual" | "DashboardWebStringId.Grid.FilterClause.Less" | "DashboardWebStringId.Grid.FilterClause.Greater" | "DashboardWebStringId.Grid.FilterClause.LessOrEqual" | "DashboardWebStringId.Grid.FilterClause.GreaterOrEqual" | "DashboardWebStringId.Grid.FilterClause.Between" | "DashboardWebStringId.Grid.FilterClause.BetweenStart" | "DashboardWebStringId.Grid.FilterClause.BetweenEnd" | "DashboardWebStringId.AccordionTab.Content" | "DashboardWebStringId.TextBoxItemEditor.NoFields" | "DashboardWebStringId.TextBoxItemEditor.InsertField" | "DashboardWebStringId.TextBoxItemEditor.EditTextButton" | "DashboardWebStringId.TextBoxItemEditor.DialogCaption" | "DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose" | "DashboardWebStringId.TextBoxItemEditor.DialogClose" | "DashboardStringId.StartDate" | "DashboardStringId.EndDate" | "DashboardWebStringId.AccordionTab.MeasureFilter" | "DashboardStringId.FunctionDescriptionAggregateFilter" | "DashboardWebStringId.TabPages" | "DashboardWebStringId.More" | "DashboardStringId.MeasureFilterCaptionFormatString";
	    SpecificLevel: "DashboardStringId.ActionClearMasterFilter" | "DashboardStringId.ActionClearSelection" | "DashboardStringId.ActionOtherValues" | "DashboardStringId.ActionDrillUp" | "DashboardStringId.ActionExportTo" | "DashboardStringId.ActionExportToPdf" | "DashboardStringId.ActionExportToImage" | "DashboardStringId.ActionExportToExcel" | "DashboardStringId.RangeFilterCustomDateTimePeriod" | "DashboardStringId.ActionExportTemplate" | "DashboardStringId.ActionAllowMultiselection" | "DashboardStringId.DashboardNullValue" | "DashboardStringId.TopNOthersValue" | "DashboardStringId.DashboardErrorValue" | "DashboardStringId.DateTimeQuarterFormat" | "DashboardStringId.MessageLoading" | "DashboardStringId.ParametersFormCaption" | "DashboardStringId.ParametersSelectorText" | "DashboardStringId.ParametersFormAllowNullColumnCaption" | "DashboardStringId.ParametersFormValueColumnCaption" | "DashboardStringId.ParametersFormNameColumnCaption" | "DashboardStringId.ButtonOK" | "DashboardStringId.ButtonCancel" | "DashboardStringId.SelectDate" | "DashboardStringId.ButtonReset" | "DashboardStringId.ButtonSubmit" | "DashboardStringId.ButtonApply" | "DashboardStringId.ButtonExport" | "DashboardStringId.GridResetColumnWidths" | "DashboardStringId.GridSortAscending" | "DashboardStringId.GridSortDescending" | "DashboardStringId.GridClearSorting" | "DashboardStringId.PivotGridTotal" | "DashboardStringId.PivotGridGrandTotal" | "DashboardStringId.ChartTotalValue" | "DashboardStringId.PageLayout" | "DashboardStringId.PageLayoutAuto" | "DashboardStringId.PageLayoutPortrait" | "DashboardStringId.PageLayoutLandscape" | "DashboardStringId.PaperKind" | "DashboardStringId.PaperKindLetter" | "DashboardStringId.PaperKindLegal" | "DashboardStringId.PaperKindExecutive" | "DashboardStringId.PaperKindA5" | "DashboardStringId.PaperKindA4" | "DashboardStringId.PaperKindA3" | "DashboardStringId.ScaleMode" | "DashboardStringId.ScaleModeNone" | "DashboardStringId.ScaleModeUseScaleFactor" | "DashboardStringId.ScaleModeAutoFitToPagesWidth" | "DashboardStringId.AutoFitPageCount" | "DashboardStringId.ScaleFactor" | "DashboardStringId.PrintHeadersOnEveryPage" | "DashboardStringId.FitToPageWidth" | "DashboardStringId.SizeMode" | "DashboardStringId.SizeModeNone" | "DashboardStringId.SizeModeStretch" | "DashboardStringId.SizeModeZoom" | "DashboardStringId.AutoArrangeContent" | "DashboardStringId.ImageFormat" | "DashboardStringId.ExcelFormat" | "DashboardStringId.CsvValueSeparator" | "DashboardStringId.ExportFilters" | "DashboardStringId.ExportParameters" | "DashboardStringId.DashboardStatePosition" | "DashboardStringId.Resolution" | "DashboardStringId.ShowTitle" | "DashboardStringId.Title" | "DashboardStringId.FileName" | "DashboardStringId.FilterStatePresentationAfter" | "DashboardStringId.FilterStatePresentationAfterAndSplitPage" | "DashboardStringId.FilterStatePresentationSplitSheet" | "DashboardStringId.MessageCustomItemIsNotSupported" | "DashboardStringId.MessageGridHasNoData" | "DashboardStringId.MessagePivotHasNoData" | "DashboardStringId.SparklineTooltipStartValue" | "DashboardStringId.SparklineTooltipEndValue" | "DashboardStringId.SparklineTooltipMinValue" | "DashboardStringId.SparklineTooltipMaxValue" | "DashboardStringId.OpenCaption" | "DashboardStringId.HighCaption" | "DashboardStringId.LowCaption" | "DashboardStringId.CloseCaption" | "DashboardStringId.InitialExtent" | "DashboardStringId.FilterElementShowAllItem" | "DashboardStringId.NumericFormatUnitSymbolThousands" | "DashboardStringId.NumericFormatUnitSymbolMillions" | "DashboardStringId.NumericFormatUnitSymbolBillions" | "DashboardStringId.ActionSelectDateTimePeriod" | "DashboardStringId.RangeFilterSelectRange" | "DashboardStringId.FilterElementCheckedComboBoxNoDataCaption" | "DashboardStringId.FilterElementRadioComboBoxNoDataCaption" | "DashboardStringId.FilterElementNoDataToDisplay" | "DashboardStringId.RangeFilterSelectRangeFromCaption" | "DashboardStringId.RangeFilterSelectRangeToCaption" | "DashboardWebStringId.DashboardParameters" | "DashboardStringId.DataSourceDataMember" | "DashboardStringId.DescriptionMeasures" | "DashboardWebStringId.TextBoxFormatText" | "DashboardStringId.NumericFormatUnitCaption" | "DashboardWebStringId.SummaryType" | "DashboardStringId.CalculationTypeExpression" | "DevExpressWebStringId.CalculatedFieldDataType" | "DashboardStringId.ValueCaption" | "DashboardStringId.Value1Caption" | "DashboardStringId.Value2Caption" | "DashboardStringId.CommandFormatRuleTopBottom" | "DashboardStringId.CommandFormatRuleAboveBelowAverage" | "DashboardStringId.CommandFormatRuleBar" | "DashboardStringId.CommandFormatRuleColorRangeBar" | "DashboardStringId.CommandFormatRuleGradientRangeBar" | "DashboardStringId.FormatRuleStyleAppearance" | "DashboardStringId.FormatRuleStyleIcons" | "DashboardStringId.FormatRuleNegativeStyle" | "DashboardStringId.CommandFormatRuleExpression" | "DashboardWebStringId.TopNMode" | "DashboardStringId.CommandFormatRuleRangeSet" | "DashboardStringId.CommandFormatRuleValue" | "DashboardStringId.CommandFormatRuleDateOccurring" | "DashboardWebStringId.ConditionalFormatting.Appearance.BackColor" | "DashboardWebStringId.ConditionalFormatting.Appearance.ForeColor" | "DashboardStringId.DescriptionBoundImageAttribute" | "DashboardWebStringId.ShowCaptionText" | "DashboardWebStringId.DisplayItemAsPage" | "DashboardStringId.DefaultNameItemGroup" | "DashboardStringId.DefaultNameTabContainerItem" | "DashboardStringId.DefaultDataSourceName" | "DashboardWebStringId.CrossDataSourceFiltering" | "DashboardStringId.RangeFilterCalculationAlongSeries" | "DashboardStringId.RangeFilterCalculationAlongArgument" | "DashboardStringId.DescriptionItemSeries" | "DashboardStringId.DescriptionSeries" | "DashboardWebStringId.Chart.SeriesType" | "DashboardStringId.DescriptionDimensions" | "DashboardWebStringId.TreeView.AutoExpand" | "DashboardWebStringId.ConditionalFormatting.ConditionMinimum" | "DashboardWebStringId.ConditionalFormatting.ConditionMaximum" | "DashboardStringId.DescriptionItemDimension" | "DashboardStringId.DescriptionItemMeasure" | "DashboardWebStringId.Grid.MergeCells" | "DashboardWebStringId.Grid.ColumnWidthMode" | "DashboardWebStringId.Grid.BandedRows" | "DashboardWebStringId.Grid.VerticalLines" | "DashboardWebStringId.Grid.HorizontalLines" | "DashboardWebStringId.Grid.ColumnHeaders" | "DashboardWebStringId.Grid.WordWrap" | "DashboardStringId.ActualValueCaption" | "DashboardStringId.TargetValueCaption" | "DashboardStringId.UriPatternCaption" | "DashboardStringId.UriCaption" | "DashboardStringId.DisplayValueCaption" | "DashboardStringId.WeightCaption" | "DashboardStringId.DescriptionItemColor" | "DashboardStringId.Latitude" | "DashboardStringId.Longitude" | "DashboardWebStringId.GeoPointMapClusterization" | "DashboardWebStringId.MapLockNavigation" | "DashboardWebStringId.WeightedLegendGalleryGroup" | "DashboardStringId.DescriptionItemArgument" | "DashboardWebStringId.PieMapIsWeighted" | "DashboardWebStringId.InteractivityOptions.IgnoreMasterFilters" | "DashboardWebStringId.InteractivityOptions.DrillDown" | "DashboardWebStringId.Pie.ShowCaptions" | "DashboardStringId.DescriptionColumns" | "DashboardStringId.DescriptionRows" | "DashboardStringId.DescriptionValues" | "DashboardStringId.DescriptionArguments" | "DashboardStringId.TextGroupIntervalAlphabetical" | "DashboardStringId.ActionMaximizeDashboardItem" | "DashboardStringId.ActionRestoreDashboardItem" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataSource" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.ValueMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DisplayMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.SortOrder" | "DevExpress.DashboardCommon.DashboardParameter.Visible" | "DevExpress.DashboardCommon.DashboardParameter.Description" | "DevExpress.DashboardCommon.DashboardParameter.AllowMultiselect" | "DevExpress.DashboardCommon.DashboardParameter.AllowNull" | "DevExpress.DashboardCommon.DashboardParameter.SelectAllValues" | "DevExpress.DashboardCommon.StaticListLookUpSettings.Values" | "DevExpress.DashboardCommon.DimensionSortOrder.Ascending" | "DevExpress.DashboardCommon.DimensionSortOrder.Descending" | "DevExpress.DashboardCommon.DimensionSortOrder.None" | "DashboardWebStringId.AccordionTab.ScatterChartPointLabelOptions" | "DashboardWebStringId.AccordionTab.ChoroplethMapShapeLabelsAttribute" | "DashboardStringId.CommandFormatRuleTopN" | "DashboardWebStringId.Type" | "DashboardWebStringId.Grid.ColumnWidth" | "DashboardWebStringId.AccordionTab.ShowTotals" | "DashboardWebStringId.AccordionTab.Layout" | "DashboardWebStringId.AccordionTab.PivotInitialState" | "DashboardWebStringId.AccordionTab.ImageOptions" | "DashboardWebStringId.AccordionTab.Labels" | "DashboardWebStringId.AccordionTab.MapLegend" | "DashboardWebStringId.AccordionTab.WeightedLegend" | "DashboardWebStringId.AccordionTab.Common" | "DashboardWebStringId.AccordionTab.ChartLegend" | "DashboardWebStringId.Grid.AutoFitToContentsColumnWidthMode" | "DashboardWebStringId.Grid.AutoFitToGridColumnWidthMode" | "DashboardWebStringId.Grid.ManualGridColumnWidthMode" | "DashboardStringId.DateTimeIntervalYear" | "DashboardStringId.DateTimeIntervalQuarter" | "DashboardStringId.DateTimeIntervalMonth" | "DashboardStringId.DateTimeIntervalWeek" | "DashboardStringId.DateTimeIntervalDay" | "DashboardStringId.DateTimeIntervalHour" | "DashboardStringId.DateTimeIntervalMinute" | "DashboardStringId.DateTimeIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalYear" | "DashboardStringId.DateTimeGroupIntervalQuarter" | "DashboardStringId.DateTimeGroupIntervalMonth" | "DashboardStringId.DateTimeGroupIntervalDay" | "DashboardStringId.DateTimeGroupIntervalHour" | "DashboardStringId.DateTimeGroupIntervalMinute" | "DashboardStringId.DateTimeGroupIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalDayOfYear" | "DashboardStringId.DateTimeGroupIntervalDayOfWeek" | "DashboardStringId.DateTimeGroupIntervalWeekOfYear" | "DashboardStringId.DateTimeGroupIntervalWeekOfMonth" | "DashboardStringId.DateTimeGroupIntervalMonthYear" | "DashboardStringId.DateTimeGroupIntervalQuarterYear" | "DashboardStringId.DateTimeGroupIntervalWeekYear" | "DashboardStringId.DateTimeGroupIntervalDayMonthYear" | "DashboardStringId.DateTimeGroupIntervalDateHour" | "DashboardStringId.DateTimeGroupIntervalDateHourMinute" | "DashboardStringId.DateTimeGroupIntervalDateHourMinuteSecond" | "DashboardStringId.DateTimeGroupIntervalExactDate" | "DashboardStringId.GroupIntervalNone" | "DashboardWebStringId.Treemap.StripedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SquarifiedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SliceAndDiceLayoutAlgorithm" | "DashboardWebStringId.Treemap.TileLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.TileLabelsNone" | "DashboardWebStringId.Treemap.TileLabelsValue" | "DashboardWebStringId.Treemap.TileLabelsArgument" | "DashboardWebStringId.Treemap.TileTooltipsArgumentAndValue" | "DashboardWebStringId.Treemap.TileTooltipsArgument" | "DashboardWebStringId.Treemap.TileTooltipsValue" | "DashboardWebStringId.Treemap.TileTooltipsNone" | "DashboardWebStringId.Treemap.TopLeftToBottomRightLayoutDirection" | "DashboardWebStringId.Treemap.TopRightToBottomLeftLayoutDirection" | "DashboardWebStringId.Treemap.BottomLeftToTopRightLayoutDirection" | "DashboardWebStringId.Treemap.BottomRightToTopLeftLayoutDirection" | "DashboardWebStringId.Treemap.LayoutDirection" | "DashboardWebStringId.Treemap.GroupLabelsNone" | "DashboardWebStringId.Treemap.GroupLabelsArgument" | "DashboardWebStringId.Treemap.GroupLabelsValue" | "DashboardWebStringId.Treemap.GroupLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.GroupTooltipsNone" | "DashboardWebStringId.Treemap.GroupTooltipsArgument" | "DashboardWebStringId.Treemap.GroupTooltipsValue" | "DashboardWebStringId.Treemap.GroupTooltipsArgumentAndValue" | "DashboardStringId.RankOrderAscending" | "DashboardStringId.RankOrderDescending" | "DashboardStringId.DateTimeFormatYearFormatDefaultCaption" | "DashboardStringId.DateTimeFormatYearFormatFullCaption" | "DashboardStringId.DateTimeFormatYearFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatQuarterFormatDefaultCaption" | "DashboardStringId.DateTimeFormatQuarterFormatNumericCaption" | "DashboardStringId.DateTimeFormatQuarterFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatDefaultCaption" | "DashboardStringId.DateTimeFormatMonthFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatMonthFormatNumericCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatFullCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatNumericCaption" | "DashboardStringId.DateTimeFormatDateFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateFormatLongCaption" | "DashboardStringId.DateTimeFormatDateFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatLongCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption" | "DashboardStringId.ExactDateFormatYear" | "DashboardStringId.ExactDateFormatQuarter" | "DashboardStringId.ExactDateFormatMonth" | "DashboardStringId.ExactDateFormatDay" | "DashboardStringId.ExactDateFormatHour" | "DashboardStringId.ExactDateFormatMinute" | "DashboardStringId.ExactDateFormatSecond" | "DashboardWebStringId.FormatType" | "DashboardWebStringId.TopN.Top" | "DashboardWebStringId.TopN.Bottom" | "DashboardWebStringId.DimensionSortBy" | "DashboardStringId.NumericFormatUnitAutoCaption" | "DashboardStringId.NumericFormatFormatTypeAutoCaption" | "DashboardStringId.NumericFormatFormatTypeGeneralCaption" | "DashboardStringId.NumericFormatFormatTypeNumberCaption" | "DashboardStringId.NumericFormatFormatTypeCurrencyCaption" | "DashboardStringId.NumericFormatFormatTypeScientificCaption" | "DashboardStringId.NumericFormatFormatTypePercentCaption" | "DashboardStringId.NumericFormatUnitOnesCaption" | "DashboardStringId.NumericFormatUnitThousandsCaption" | "DashboardStringId.NumericFormatUnitMillionsCaption" | "DashboardStringId.NumericFormatUnitBillionsCaption" | "DashboardStringId.DeltaValueTypeActualValueCaption" | "DashboardStringId.DeltaValueTypeAbsoluteVariationCaption" | "DashboardStringId.DeltaValueTypePercentVariationCaption" | "DashboardStringId.DeltaValueTypePercentOfTargetCaption" | "DashboardStringId.DeltaValueTypeTargetValueCaption" | "DashboardStringId.DeltaIndicationModeGreaterIsGoodCaption" | "DashboardStringId.DeltaIndicationModeLessIsGoodCaption" | "DashboardStringId.DeltaIndicationModeWarningIfGreaterCaption" | "DashboardStringId.DeltaIndicationModeWarningIfLessCaption" | "DashboardStringId.DeltaIndicationModeNoIndicationCaption" | "DashboardStringId.DeltaThresholdTypeAbsolute" | "DashboardStringId.DeltaThresholdTypePercent" | "DashboardStringId.CommandDimensionGroupChildValues" | "DashboardStringId.SeriesTypeBar" | "DashboardStringId.SeriesTypeStackedBar" | "DashboardStringId.SeriesTypeFullStackedBar" | "DashboardStringId.SeriesTypePoint" | "DashboardStringId.SeriesTypeLine" | "DashboardStringId.SeriesTypeStackedLine" | "DashboardStringId.SeriesTypeFullStackedLine" | "DashboardStringId.SeriesTypeStepLine" | "DashboardStringId.SeriesTypeSpline" | "DashboardStringId.SeriesTypeArea" | "DashboardStringId.SeriesTypeStackedArea" | "DashboardStringId.SeriesTypeFullStackedArea" | "DashboardStringId.SeriesTypeStepArea" | "DashboardStringId.SeriesTypeSplineArea" | "DashboardStringId.SeriesTypeStackedSplineArea" | "DashboardStringId.SeriesTypeFullStackedSplineArea" | "DashboardWebStringId.Chart.ShowLegend" | "DashboardStringId.DefaultNameBoundImageItem" | "DashboardStringId.DefaultNameImageItem" | "DashboardStringId.DefaultNameTextBoxItem" | "DashboardStringId.DefaultNameCardItem" | "DashboardStringId.DefaultNameChartItem" | "DashboardStringId.DefaultNameComboBoxItem" | "DashboardStringId.DefaultNameListBoxItem" | "DashboardStringId.DefaultNameTreeViewItem" | "DashboardStringId.DefaultNameGaugeItem" | "DashboardStringId.DefaultNameGridItem" | "DashboardStringId.GridHyperlinkUriPatternErrorMessage" | "DashboardWebStringId.DefaultNameBubbleMapItem" | "DashboardWebStringId.DefaultNameChoroplethMapItem" | "DashboardWebStringId.DefaultNameGeoPointMapItem" | "DashboardWebStringId.DefaultNamePieMapItem" | "DashboardStringId.DefaultNamePieItem" | "DashboardStringId.DefaultNamePivotItem" | "DashboardStringId.DefaultNameRangeFilterItem" | "DashboardStringId.DefaultNameScatterChartItem" | "DashboardStringId.DefaultNameTreemapItem" | "DashboardStringId.DescriptionMaps" | "DashboardStringId.EntireRangePeriodCaption" | "DashboardStringId.CalculationTypePercentOfTotal" | "DashboardStringId.CalculationTypeDifference" | "DashboardStringId.CalculationTypePercentageDifference" | "DashboardStringId.CalculationTypeRunningTotal" | "DashboardStringId.CalculationTypeMovingCalculation" | "DashboardStringId.CalculationTypeRank" | "DashboardStringId.ColorPaletteIndex" | "DashboardStringId.DifferenceCalculationTargetPrevious" | "DashboardStringId.DifferenceCalculationTargetNext" | "DashboardStringId.DifferenceCalculationTargetFirst" | "DashboardStringId.DifferenceCalculationTargetLast" | "DashboardStringId.SummaryTypeCount" | "DashboardStringId.SummaryTypeSum" | "DashboardStringId.SummaryTypeMin" | "DashboardStringId.SummaryTypeMax" | "DashboardStringId.SummaryTypeAverage" | "DashboardStringId.SummaryTypeStdDev" | "DashboardStringId.SummaryTypeStdDevp" | "DashboardStringId.SummaryTypeVar" | "DashboardStringId.SummaryTypeVarp" | "DashboardStringId.SummaryTypeCountDistinct" | "DashboardStringId.SummaryTypeMedian" | "DashboardStringId.SummaryTypeMode" | "DashboardStringId.RankTypeUnique" | "DashboardStringId.RankTypeCompetition" | "DashboardStringId.RankTypeDense" | "DashboardStringId.RankTypeModified" | "DashboardStringId.RankTypePercentile" | "DashboardStringId.CardCalculationAlongCards" | "DashboardStringId.CardCalculationAlongSparklineArgument" | "DashboardStringId.CardCalculationAlongCardsAndSparklineArgument" | "DashboardStringId.CardCalculationAlongSparklineArgumentAndCards" | "DashboardStringId.ChartCalculationAlongArguments" | "DashboardStringId.ChartCalculationAlongSeries" | "DashboardStringId.ChartCalculationAlongArgumentsAndSeries" | "DashboardStringId.ChartCalculationAlongSeriesAndArguments" | "DashboardStringId.GridCalculationAlongRows" | "DashboardStringId.GridCalculationAlongSparklineArgument" | "DashboardStringId.GridCalculationAlongRowsAndSparklineArgument" | "DashboardStringId.GridCalculationAlongSparklineArgumentAndRows" | "DashboardStringId.PivotCalculationAlongColumns" | "DashboardStringId.PivotCalculationAlongRows" | "DashboardStringId.PivotCalculationAlongColumnsAndRows" | "DashboardStringId.PivotCalculationAlongRowsAndColumns" | "DashboardStringId.PivotCalculationAlongGroupsInColumns" | "DashboardStringId.PivotCalculationAlongGroupsInRows" | "DashboardStringId.PivotCalculationAlongGroupsInColumnsAndRows" | "DashboardStringId.PivotCalculationAlongGroupsInRowsAndColumns" | "DashboardStringId.PieCalculationAlongArguments" | "DashboardStringId.PieCalculationAlongSeries" | "DashboardStringId.PieCalculationAlongArgumentsAndSeries" | "DashboardStringId.PieCalculationAlongSeriesAndArguments" | "DashboardStringId.RangeFilterCalculationAlongArgumentAndSeries" | "DashboardStringId.RangeFilterCalculationAlongSeriesAndArgument" | "DashboardStringId.GaugeCalculationAlongGauges" | "DashboardStringId.ScatterCalculationAlongArguments" | "DashboardStringId.CalculationAlongSpecificDimensions" | "DashboardStringId.CalculatedFieldTypeString" | "DashboardStringId.CalculatedFieldTypeLong" | "DashboardStringId.CalculatedFieldTypeDecimal" | "DashboardStringId.CalculatedFieldTypeBoolean" | "DashboardStringId.CalculatedFieldTypeDateTime" | "DashboardStringId.CalculatedFieldTypeDouble" | "DashboardStringId.CalculatedFieldTypeAuto" | "DashboardStringId.CalculatedFieldTypeObject" | "DashboardStringId.DefaultEFDataSourceName" | "DashboardStringId.DefaultExcelDataSourceName" | "DashboardStringId.DefaultFileExtractDataSourceName" | "DashboardStringId.DefaultObjectDataSourceName" | "DashboardStringId.DefaultOlapDataSourceName" | "DashboardStringId.DefaultSqlDataSourceName" | "DashboardStringId.DefaultJsonDataSourceName" | "DashboardStringId.DefaultXpoDataSourceName" | "DashboardStringId.OlapRaggedHierarchyNoneItemCaption" | "DashboardStringId.FormatRuleApplyToColumn" | "DashboardStringId.SeriesTypeSideBySideRangeBar" | "DashboardStringId.SeriesTypeRangeArea" | "DashboardStringId.SeriesTypeHighLowClose" | "DashboardStringId.SeriesTypeCandleStick" | "DashboardStringId.SeriesTypeStock" | "DashboardWebStringId.StyleSettings" | "DashboardStringId.ParametersFormCalendarTodayButton" | "DashboardStringId.TreemapLabelArgumentTemplate" | "DashboardStringId.TreemapLabelValueTemplate" | "DashboardStringId.SearchNullValuePrompt" | "DashboardStringId.CustomItems" | "DashboardStringId.FormatRuleAllowNegativeAxis" | "DashboardStringId.FormatRuleDrawAxis" | "DashboardStringId.FormatRuleShowBarOnly" | "DashboardStringId.CommandFormatRuleBottomN" | "DashboardStringId.FormatConditionAppearanceNone" | "DashboardStringId.FormatConditionAppearanceCustom" | "DashboardStringId.FormatConditionAppearancePaleRed" | "DashboardStringId.FormatConditionAppearancePaleYellow" | "DashboardStringId.FormatConditionAppearancePaleGreen" | "DashboardStringId.FormatConditionAppearancePaleBlue" | "DashboardStringId.FormatConditionAppearancePalePurple" | "DashboardStringId.FormatConditionAppearancePaleCyan" | "DashboardStringId.FormatConditionAppearancePaleOrange" | "DashboardStringId.FormatConditionAppearancePaleGray" | "DashboardStringId.FormatConditionAppearanceRed" | "DashboardStringId.FormatConditionAppearanceYellow" | "DashboardStringId.FormatConditionAppearanceGreen" | "DashboardStringId.FormatConditionAppearanceBlue" | "DashboardStringId.FormatConditionAppearancePurple" | "DashboardStringId.FormatConditionAppearanceCyan" | "DashboardStringId.FormatConditionAppearanceOrange" | "DashboardStringId.FormatConditionAppearanceGray" | "DashboardStringId.FormatConditionAppearanceGradientRed" | "DashboardStringId.FormatConditionAppearanceGradientYellow" | "DashboardStringId.FormatConditionAppearanceGradientGreen" | "DashboardStringId.FormatConditionAppearanceGradientBlue" | "DashboardStringId.FormatConditionAppearanceGradientPurple" | "DashboardStringId.FormatConditionAppearanceGradientCyan" | "DashboardStringId.FormatConditionAppearanceGradientOrange" | "DashboardStringId.FormatConditionAppearanceGradientTransparent" | "DashboardStringId.FormatConditionAppearanceFontBold" | "DashboardStringId.FormatConditionAppearanceFontItalic" | "DashboardStringId.FormatConditionAppearanceFontUnderline" | "DashboardStringId.FormatConditionAppearanceFontGrayed" | "DashboardStringId.FormatConditionAppearanceFontRed" | "DashboardStringId.FormatConditionAppearanceFontYellow" | "DashboardStringId.FormatConditionAppearanceFontGreen" | "DashboardStringId.FormatConditionAppearanceFontBlue" | "DashboardStringId.IntersectionLevelModeFirst" | "DashboardStringId.IntersectionLevelModeLast" | "DashboardStringId.IntersectionLevelModeAuto" | "DashboardStringId.IntersectionLevelModeAll" | "DashboardStringId.IntersectionLevelModeSpecific" | "DashboardStringId.FormatRuleApplyToRow" | "DashboardStringId.FormatRuleApplyTo" | "DashboardWebStringId.FilterItem.AllowEmptyFilter" | "DashboardStringId.FormatConditionAppearanceFontStrikeout" | "DashboardStringId.FormatConditionAutomaticValueType" | "DashboardStringId.FormatConditionNumberValueType" | "DashboardStringId.FormatConditionPercentValueType" | "DashboardStringId.CommandFormatRuleRangeIcons" | "DashboardStringId.CommandFormatRuleGreaterThan" | "DashboardStringId.CommandFormatRuleGreaterThanOrEqualTo" | "DashboardStringId.CommandFormatRuleLessThan" | "DashboardStringId.CommandFormatRuleLessThanOrEqualTo" | "DashboardStringId.CommandFormatRuleEqualTo" | "DashboardStringId.CommandFormatRuleNotEqualTo" | "DashboardStringId.CommandFormatRuleBetween" | "DashboardStringId.CommandFormatRuleNotBetween" | "DashboardStringId.CommandFormatRuleBetweenOrEqual" | "DashboardStringId.CommandFormatRuleNotBetweenOrEqual" | "DashboardStringId.CommandFormatRuleContains" | "DashboardStringId.ColorAutoAssigned" | "DashboardStringId.CalculationTypeNone" | "DashboardStringId.UndoText" | "DashboardStringId.RedoText" | "DashboardStringId.DashboardCurrencyUseCurrentCurrency" | "DashboardStringId.CommandDimensionSortModeDisplayText" | "DashboardStringId.CommandDimensionSortModeValue" | "DashboardStringId.CommandDimensionSortModeID" | "DashboardStringId.CommandDimensionSortModeKey" | "DashboardWebStringId.Chart.AddPane" | "DashboardStringId.MapShapeNoneAttribute" | "DashboardStringId.DefaultPeriodName" | "DashboardStringId.CardLayoutTemplateStretchedCaption" | "DashboardStringId.CardLayoutTemplateCenteredCaption" | "DashboardStringId.CardLayoutTemplateCompactCaption" | "DashboardStringId.CardLayoutTemplateLightweightCaption" | "DashboardStringId.CardLayoutTemplateCustomCaption" | "DashboardStringId.CardLayoutTemplateNoneCaption" | "DashboardStringId.CardRowDataElementTypeTitleCaption" | "DashboardStringId.CardRowDataElementTypeSubtitleCaption" | "DashboardStringId.CardRowDataElementTypeActualValueCaption" | "DashboardStringId.CardRowDataElementTypeTargetValueCaption" | "DashboardStringId.CardRowDataElementTypeAbsoluteVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentOfTargetCaption" | "DashboardStringId.CardRowDataElementTypeDimensionValueCaption" | "DashboardStringId.CardRowDataElementTypeCardNameCaption" | "DashboardStringId.CardRowDataElementTypeDeltaIndicatorCaption" | "DashboardStringId.CardRowDataElementTypeSparklineCaption" | "DashboardStringId.FormatRuleApplyToAllElements" | "DashboardWebStringId.Pie.LabelPosition" | "DashboardWebStringId.Pie.LabelPositionOutside" | "DashboardWebStringId.Pie.LabelPositionInside" | "DashboardStringId.IncludeExportDashboardState" | "DashboardStringId.PointLabelContentTypeArgument" | "DashboardStringId.PointLabelContentTypeSeriesName" | "DashboardStringId.PointLabelContentTypeValue" | "DashboardStringId.PointLabelContentTypePercent" | "DashboardWebStringId.DashboardMenu" | "DashboardWebStringId.DashboardMenuNew" | "DashboardWebStringId.DashboardMenuOpen" | "DashboardWebStringId.DashboardMenuSave" | "DashboardWebStringId.DashboardMenuCurrency" | "DashboardWebStringId.DashboardMenuDataSources" | "DashboardWebStringId.DashboardMenuColorScheme" | "DashboardWebStringId.DashboardMenuNewDashboardCreate" | "DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder" | "DashboardWebStringId.Binding.DefaultEmptyPlaceholder" | "DashboardWebStringId.Binding.DefaultSelectedPlaceholder" | "DashboardWebStringId.Binding.DataFiltering" | "DashboardWebStringId.Binding.Argument" | "DashboardWebStringId.Binding.Attribute" | "DashboardWebStringId.Binding.Sparkline" | "DashboardWebStringId.Binding.Columns" | "DashboardWebStringId.Binding.TooltipDimensions" | "DashboardWebStringId.Binding.TooltipMeasures" | "DashboardWebStringId.Binding.HiddenDimensions" | "DashboardWebStringId.Binding.HiddenMeasures" | "DashboardWebStringId.Binding.AddDimension" | "DashboardWebStringId.Binding.AddMeasure" | "DashboardWebStringId.Binding.AddColumn" | "DashboardWebStringId.Binding.AddRow" | "DashboardWebStringId.Binding.AddValue" | "DashboardWebStringId.Binding.AddSeries" | "DashboardWebStringId.Binding.SetLatitude" | "DashboardWebStringId.Binding.SetLongitude" | "DashboardWebStringId.Binding.SetArgument" | "DashboardWebStringId.Binding.AddArgument" | "DashboardWebStringId.Binding.SetWeight" | "DashboardWebStringId.Binding.SetColor" | "DashboardWebStringId.Binding.SetAttribute" | "DashboardWebStringId.Binding.SetValue" | "DashboardWebStringId.Binding.XAxis" | "DashboardWebStringId.Binding.YAxis" | "DashboardWebStringId.Binding.ConfigureDimension" | "DashboardWebStringId.Binding.ConfigureMeasure" | "DashboardWebStringId.Binding.ConfigureSeries" | "DashboardWebStringId.Binding.ConfigureArgument" | "DashboardWebStringId.Binding.ConfigureValue" | "DashboardWebStringId.Binding.ConfigureAttribute" | "DashboardWebStringId.Binding.ConfigureLatitude" | "DashboardWebStringId.Binding.ConfigureLongitude" | "DashboardWebStringId.Binding.ConfigureColumn" | "DashboardWebStringId.Binding.ConfigureRow" | "DashboardWebStringId.Binding.ConfigureWeight" | "DashboardWebStringId.Binding.ConfigureColor" | "DashboardWebStringId.Binding.ShowAll" | "DashboardWebStringId.ColorScheme.Color" | "DashboardWebStringId.ColorScheme.Colors" | "DashboardWebStringId.Parameters.ParameterList" | "DashboardWebStringId.Parameters.AddParameter" | "DashboardWebStringId.Parameters.AddParameter.Tooltip" | "DashboardWebStringId.Parameters.NoSelectedParameter" | "DashboardWebStringId.Parameters.Reorder" | "DashboardWebStringId.Parameters.Done" | "DashboardWebStringId.Currency.Currency" | "DashboardWebStringId.Currency.CurrencyCulture" | "DashboardWebStringId.Currency.DefaultCurrencyWarning" | "DashboardWebStringId.Preview" | "DashboardWebStringId.Add" | "DashboardWebStringId.DataSources.UsedDataSources" | "DashboardWebStringId.DataSources.DataItems" | "DashboardWebStringId.DataSources.AddQuery" | "DashboardWebStringId.DataSources.AddCalculatedField" | "DashboardWebStringId.DataSources.AddDataSource" | "DashboardWebStringId.DataSources.NoUsedDataSources" | "DashboardWebStringId.DataSources.NoAvailableDataSources" | "DashboardWebStringId.DataSources.ChooseDataSource" | "DashboardWebStringId.DataSources.CreateDataSource" | "DashboardWebStringId.DataSources.CreateNewDataSource" | "DashboardWebStringId.DataSources.CreateDataSource.Tooltip" | "DashboardWebStringId.DataSources.EditCalculatedField" | "DashboardWebStringId.DataSources.CalculatedField.Name" | "DashboardWebStringId.DataSources.CalculatedField.FieldType" | "DashboardWebStringId.DataSources.CalculatedField.UniqueNameError" | "DashboardWebStringId.DataSources.CalculatedField.Corrupted" | "DashboardWebStringId.DataSources.Edit" | "DashboardStringId.MessageCollectionTypesNotSupported" | "DashboardWebStringId.New.DashboardName" | "DashboardWebStringId.Bindings" | "DashboardWebStringId.Interactivity" | "DashboardWebStringId.Options" | "DashboardWebStringId.Remove" | "DashboardWebStringId.MasterFilterMode" | "DashboardWebStringId.Title.Text" | "DashboardWebStringId.Title.Visible" | "DashboardWebStringId.Title.IncludeMasterFilter" | "DashboardWebStringId.Title.Aligment" | "DashboardWebStringId.Title.Image" | "DashboardWebStringId.DataSources.Cancel" | "DashboardWebStringId.DataSources.IncludeToTheDashboard" | "DashboardWebStringId.DataSources.AvailableDataSourcesError" | "DashboardWebStringId.DataSources.DashboardDataSourceWizard" | "DashboardWebStringId.Viewer" | "DashboardWebStringId.Loading" | "DashboardWebStringId.ClickHereInvitation" | "DashboardWebStringId.BindDataInvitation" | "DashboardWebStringId.AddItemInvitation" | "DashboardWebStringId.Parameters.Values" | "DashboardWebStringId.Binding.Cards" | "DashboardWebStringId.Binding.AddCard" | "DashboardWebStringId.Binding.ConfigureCard" | "DashboardWebStringId.Binding.AddValues" | "DashboardWebStringId.Binding.ConfigureValues" | "DashboardWebStringId.Binding.Maps" | "DashboardWebStringId.Binding.AddMap" | "DashboardWebStringId.Binding.ConfigureMap" | "DashboardWebStringId.Binding.Gauges" | "DashboardWebStringId.Binding.AddGauge" | "DashboardWebStringId.Binding.ConfigureGauge" | "DashboardWebStringId.InteractivityOptions" | "DashboardWebStringId.Binding.Values" | "DashboardWebStringId.Binding.RemovePane" | "DashboardWebStringId.ClickToSetFilterCriteria" | "DashboardWebStringId.DataSources.OK" | "DashboardWebStringId.DataSources.Save" | "DashboardWebStringId.Cards.ArrangementMode" | "DashboardWebStringId.Cards.ArrangementMode.Auto" | "DashboardWebStringId.Cards.ArrangementMode.FixedRows" | "DashboardWebStringId.Cards.ArrangementMode.FixedColumns" | "DashboardWebStringId.Cards.LineCount" | "DashboardWebStringId.ConditionalFormatting" | "DashboardWebStringId.CollectionEditor.NoItems" | "DashboardWebStringId.CollectionEditor.Totals.NoItems" | "DashboardWebStringId.CollectionEditor.Parameters.NoItems" | "DashboardWebStringId.PivotGrid.AutoExpandColumnGroups" | "DashboardWebStringId.PivotGrid.AutoExpandRowGroups" | "DashboardWebStringId.PivotGrid.ColumnGrandTotals" | "DashboardWebStringId.PivotGrid.RowGrandTotals" | "DashboardWebStringId.PivotGrid.ColumnTotals" | "DashboardWebStringId.PivotGrid.RowTotals" | "DashboardWebStringId.PivotGrid.ValuesPosition" | "DashboardWebStringId.PivotGrid.ValuesPositionColumns" | "DashboardWebStringId.PivotGrid.ValuesPositionRows" | "DashboardWebStringId.PivotGrid.RowTotalsPosition" | "DashboardWebStringId.PivotGrid.RowTotalsPositionBottom" | "DashboardWebStringId.PivotGrid.RowTotalsPositionTop" | "DashboardWebStringId.PivotGrid.ColumnTotalsPosition" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionFar" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionNear" | "DashboardWebStringId.PivotGrid.LayoutType" | "DashboardWebStringId.PivotGrid.LayoutTypeCompact" | "DashboardWebStringId.PivotGrid.LayoutTypeTabular" | "DashboardWebStringId.Options.Caption" | "DashboardWebStringId.InteractivityOptions.IsMasterFilter" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.None" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Single" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Multiple" | "DashboardWebStringId.InteractivityOptions.TargetDimensions" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Arguments" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Series" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Points" | "DashboardWebStringId.ColoringOptions" | "DashboardWebStringId.DataSources.Filter" | "DashboardWebStringId.Chart.Rotated" | "DashboardWebStringId.Chart.Panes" | "DashboardWebStringId.Chart.Legend" | "DashboardWebStringId.Chart.AxisX" | "DashboardWebStringId.Chart.AxisY" | "DashboardWebStringId.Chart.AxisYSecondary" | "DashboardWebStringId.Chart.PointLabelOptions" | "DashboardWebStringId.Chart.AxisXMeasure" | "DashboardWebStringId.Chart.AxisYMeasure" | "DashboardWebStringId.Chart.Weight" | "DashboardWebStringId.Chart.Content" | "DashboardWebStringId.Chart.ArgumentAndWeight" | "DashboardWebStringId.Chart.ArgumentAndValues" | "DashboardWebStringId.Chart.Reverse" | "DashboardWebStringId.Chart.Visible" | "DashboardWebStringId.Chart.Title" | "DashboardWebStringId.Chart.TitleText" | "DashboardWebStringId.Chart.EnableZooming" | "DashboardWebStringId.Chart.LimitVisiblePoints" | "DashboardWebStringId.Chart.VisiblePointsCount" | "DashboardWebStringId.Chart.AlwaysShowZeroLevel" | "DashboardWebStringId.Chart.GridLines" | "DashboardWebStringId.Chart.LogarithmicScale" | "DashboardWebStringId.Chart.LogarithmicScaleBase" | "DashboardWebStringId.Chart.LogarithmicScaleBase2" | "DashboardWebStringId.Chart.LogarithmicScaleBase5" | "DashboardWebStringId.Chart.LogarithmicScaleBase10" | "DashboardWebStringId.Chart.Position" | "DashboardWebStringId.Chart.IsInsideOfDiagram" | "DashboardWebStringId.Chart.PrimaryAxisY" | "DashboardWebStringId.Chart.SecondaryAxisY" | "DashboardWebStringId.Chart.Name" | "DashboardWebStringId.Chart.PlotOnSecondaryAxis" | "DashboardWebStringId.Chart.IgnoreEmptyPoints" | "DashboardWebStringId.Chart.ShowPointMarkers" | "DashboardWebStringId.Chart.Value" | "DashboardWebStringId.Chart.ShowZeroValues" | "DashboardWebStringId.Chart.OverlappingMode" | "DashboardWebStringId.Chart.Orientation" | "DashboardWebStringId.Chart.ShowPointLablels" | "DashboardWebStringId.Chart.TooltipContent" | "DashboardWebStringId.Chart.LabelContent" | "DashboardWebStringId.Card.SparklineOptions" | "DashboardWebStringId.Card.SparklineVisible" | "DashboardWebStringId.Chart.Position.TopLeftVertical" | "DashboardWebStringId.Chart.Position.TopLeftHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterHorizontal" | "DashboardWebStringId.Chart.Position.TopRightVertical" | "DashboardWebStringId.Chart.Position.TopRightHorizontal" | "DashboardWebStringId.Chart.Position.BottomLeftVertical" | "DashboardWebStringId.Chart.Position.BottomLeftHorizontal" | "DashboardWebStringId.Chart.Position.BottomCenterHorizontal" | "DashboardWebStringId.Chart.Position.BottomRightVertical" | "DashboardWebStringId.Chart.Position.BottomRightHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterVertical" | "DashboardWebStringId.Chart.Position.BottomCenterVertical" | "DashboardWebStringId.FilterItem.Type" | "DashboardWebStringId.FilterItem.Type.Standard" | "DashboardWebStringId.FilterItem.Type.Checked" | "DashboardWebStringId.FilterItem.Type.Radio" | "DashboardWebStringId.FilterItem.ShowAllValue" | "DashboardWebStringId.FilterItem.EnableSearch" | "DashboardWebStringId.Gauge.Min" | "DashboardWebStringId.Gauge.Max" | "DashboardWebStringId.Gauge.ScaleOptions" | "DashboardWebStringId.Gauge.Type" | "DashboardWebStringId.Gauge.Type.FullQuarterGauge" | "DashboardWebStringId.Gauge.Type.HalfCircular" | "DashboardWebStringId.Gauge.Type.LeftQuarterCircular" | "DashboardWebStringId.Gauge.Type.RightQuarterCircular" | "DashboardWebStringId.Gauge.Type.ThreeFourthCircular" | "DashboardWebStringId.Gauge.Type.LinearHorizontal" | "DashboardWebStringId.Gauge.Type.LinearVertical" | "DashboardWebStringId.Gauge.Captions" | "DashboardWebStringId.Gauge.Scale.Custom" | "DashboardWebStringId.Gauge.Scale.Auto" | "DashboardWebStringId.Grid.ColumnType" | "DashboardWebStringId.Grid.DisplayMode" | "DashboardWebStringId.Grid.DisplayMode.Value" | "DashboardWebStringId.Grid.DisplayMode.Bar" | "DashboardWebStringId.Grid.DisplayMode.Text" | "DashboardWebStringId.Grid.DisplayMode.Image" | "DashboardWebStringId.Grid.FixedWidth" | "DashboardWebStringId.Grid.WidthType" | "DashboardWebStringId.Grid.WidthType.Weight" | "DashboardWebStringId.Grid.WidthType.FitToContent" | "DashboardWebStringId.Grid.DeltaOptions" | "DashboardWebStringId.Grid.ShowStartEndValues" | "DashboardWebStringId.Grid.TotalType" | "DashboardWebStringId.Grid.Dimension" | "DashboardWebStringId.Grid.Measure" | "DashboardWebStringId.Grid.Delta" | "DashboardWebStringId.Grid.Sparkline" | "DashboardWebStringId.Grid.Hyperlink" | "DashboardWebStringId.Grid.Options" | "DashboardWebStringId.Map.ShapeFileLoaded" | "DashboardWebStringId.Map.AttributeFileLoaded" | "DashboardWebStringId.Map.ValueMap" | "DashboardWebStringId.Map.DeltaMap" | "DashboardWebStringId.Map.TooltipCaption" | "DashboardWebStringId.Map.TooltipActualValueCaption" | "DashboardWebStringId.Map.TooltipDeltaCaption" | "DashboardWebStringId.Map.CustomMapOptions" | "DashboardWebStringId.Map.CustomMapOptionsSource" | "DashboardWebStringId.Map.CustomMapOptionsUrl" | "DashboardWebStringId.Map.CustomMapOptionsFile" | "DashboardWebStringId.Map.CustomMapUrl" | "DashboardWebStringId.Map.CustomMapFile" | "DashboardWebStringId.Map.CustomAttributeFile" | "DashboardWebStringId.Map.AttributeDimension" | "DashboardWebStringId.Map.IncludeSummaryValueToShapeTitle" | "DashboardWebStringId.Map.AttributeName" | "DashboardWebStringId.Map.TooltipAttribute" | "DashboardWebStringId.Map.TooltipDimensions" | "DashboardWebStringId.Map.Area.Custom" | "DashboardWebStringId.Map.Area.WorldCountries" | "DashboardWebStringId.Map.Area.Europe" | "DashboardWebStringId.Map.Area.Asia" | "DashboardWebStringId.Map.Area.NorthAmerica" | "DashboardWebStringId.Map.Area.SouthAmerica" | "DashboardWebStringId.Map.Area.Africa" | "DashboardWebStringId.Map.Area.USA" | "DashboardWebStringId.Map.Area.Canada" | "DashboardWebStringId.Map.Viewport" | "DashboardWebStringId.Map.ShapeTitleAttribute" | "DashboardWebStringId.Map.UseBindingAttribute" | "DashboardWebStringId.Map.WeightedLegendType" | "DashboardWebStringId.Map.WeightedLegendType.Linear" | "DashboardWebStringId.Map.WeightedLegendType.Nested" | "DashboardWebStringId.Map.Orientation.Vertical" | "DashboardWebStringId.Map.Orientation.Horizontal" | "DashboardWebStringId.Map.Position.TopLeft" | "DashboardWebStringId.Map.Position.TopCenter" | "DashboardWebStringId.Map.Position.TopRight" | "DashboardWebStringId.Map.Position.BottomLeft" | "DashboardWebStringId.Map.Position.BottomCenter" | "DashboardWebStringId.Map.Position.BottomRight" | "DashboardWebStringId.Map.Viewport.TopLatitude" | "DashboardWebStringId.Map.Viewport.LeftLongitude" | "DashboardWebStringId.Map.Viewport.RightLongitude" | "DashboardWebStringId.Map.Viewport.BottomLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLongitude" | "DashboardWebStringId.Map.Viewport.CreateViewerPaddings" | "DashboardWebStringId.Map.ShowLegend" | "DashboardWebStringId.Pie.Type" | "DashboardWebStringId.Pie" | "DashboardWebStringId.Pie.Donut" | "DashboardWebStringId.Pie.LabelContentType.None" | "DashboardWebStringId.Pie.LabelContentType.Argument" | "DashboardWebStringId.Pie.LabelContentType.Percent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndPercent" | "DashboardWebStringId.Pie.LabelContentType.Value" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndValue" | "DashboardWebStringId.Pie.LabelContentType.ValueAndPercent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentValueAndPercent" | "DashboardWebStringId.Image.BindingMode" | "DashboardWebStringId.Image.BindingMode.BinaryArray" | "DashboardWebStringId.Image.BindingMode.Uri" | "DashboardWebStringId.RangeFilter.UriPattern" | "DashboardWebStringId.Image.SizeMode.Clip" | "DashboardWebStringId.Image.SizeMode.Stretch" | "DashboardWebStringId.Image.SizeMode.Zoom" | "DashboardWebStringId.Image.SizeMode.Squeeze" | "DashboardWebStringId.Image.HorizontalAlignment" | "DashboardWebStringId.Image.VerticalAlignment" | "DashboardWebStringId.Image.Alignment.Left" | "DashboardWebStringId.Image.Alignment.Center" | "DashboardWebStringId.Image.Alignment.Right" | "DashboardWebStringId.Image.Alignment.Top" | "DashboardWebStringId.Image.Alignment.Bottom" | "DashboardWebStringId.SeriesItem.SeriesDimensions" | "DashboardWebStringId.TextBox.Text" | "DashboardWebStringId.Chart.Orientation.Default" | "DashboardWebStringId.Chart.Orientation.RotateRight" | "DashboardWebStringId.Chart.Orientation.RotateLeft" | "DashboardWebStringId.Chart.OverlappingMode.Hide" | "DashboardWebStringId.Chart.OverlappingMode.None" | "DashboardWebStringId.Chart.Position.Outside" | "DashboardWebStringId.Chart.Position.Inside" | "DashboardWebStringId.Chart.SeriesType.Weighted" | "DashboardWebStringId.Coloring.MeasuresColoringMode" | "DashboardWebStringId.Coloring.Global" | "DashboardWebStringId.Coloring.Local" | "DashboardWebStringId.Delta.ValueType" | "DashboardWebStringId.Delta.ResultIndication" | "DashboardWebStringId.Delta.ThresholdType" | "DashboardWebStringId.Delta.ThresholdValue" | "DashboardWebStringId.Sparkline.ViewType" | "DashboardWebStringId.Sparkline.HighlightMinMaxPoints" | "DashboardWebStringId.Sparkline.HighlightStartEndPoints" | "DashboardWebStringId.Title.Aligment.Left" | "DashboardWebStringId.Title.Aligment.Center" | "DashboardWebStringId.Parameters.LookUpSettingsType.NoLookUp" | "DashboardWebStringId.Parameters.LookUpSettingsType.StaticList" | "DashboardWebStringId.Parameters.LookUpSettingsType.DynamicList" | "DashboardWebStringId.Parameters.LookUpSettingsType" | "DashboardWebStringId.Parameters.DefaultValue" | "DashboardWebStringId.DataItem" | "DashboardWebStringId.DataItem.Precision" | "DashboardWebStringId.DataItem.IncludeGroupSeparator" | "DashboardWebStringId.DataItem.ShowValues" | "DashboardWebStringId.DataItem.ShowTotals" | "DashboardWebStringId.DataItem.ShowGrandTotals" | "DashboardWebStringId.Dialog.ConfirmSaving" | "DashboardWebStringId.Dimension.GroupInterval" | "DashboardWebStringId.Dimension.SortMode" | "DashboardWebStringId.Dialog.ArgumentMode" | "DashboardWebStringId.Calculations" | "DashboardWebStringId.Calculations.Expression" | "DashboardWebStringId.Calculations.DifferenceCalculation" | "DashboardWebStringId.Calculations.Moving" | "DashboardWebStringId.Calculations.RunningTotal" | "DashboardWebStringId.Calculations.PercentOfTotal" | "DashboardWebStringId.Calculations.Rank" | "DashboardWebStringId.Calculations.DefinitionMode" | "DashboardWebStringId.Calculations.WindowDefinition" | "DashboardWebStringId.Calculations.WindowDefinitionModeSpecific" | "DashboardWebStringId.Calculations.WindowDefinitionModePredefined" | "DashboardWebStringId.Calculations.DifferenceType" | "DashboardWebStringId.TreemapLayoutAlgorithm" | "DashboardWebStringId.TilesLabelContentType" | "DashboardWebStringId.TilesTooltipContentType" | "DashboardWebStringId.GroupsLabelContentType" | "DashboardWebStringId.GroupsTooltipContentType" | "DashboardWebStringId.ShowOthersValue" | "DashboardWebStringId.TopNEnabled" | "DashboardWebStringId.Parameters.StaticListLookUpSettings" | "DashboardWebStringId.Parameters.DynamicListLookUpSettings" | "DashboardWebStringId.ConvertTo" | "DashboardWebStringId.Duplicate" | "DashboardWebStringId.DataSourceWizard" | "DashboardWebStringId.RangeFilter.CustomPeriods" | "DashboardWebStringId.RangeFilter.StartMode" | "DashboardWebStringId.RangeFilter.EndMode" | "DashboardWebStringId.RangeFilter.StartIntervalAndOffset" | "DashboardWebStringId.RangeFilter.EndIntervalAndOffset" | "DashboardWebStringId.RangeFilter.StartDate" | "DashboardWebStringId.RangeFilter.EndDate" | "DashboardWebStringId.RangeFilter.None" | "DashboardWebStringId.RangeFilter.Fixed" | "DashboardWebStringId.RangeFilter.Flow" | "DashboardWebStringId.Tabs.Binding" | "DashboardWebStringId.Tabs.DataShaping" | "DashboardWebStringId.Tabs.Format" | "DashboardWebStringId.Calculations.Types.Moving" | "DashboardWebStringId.Parameters.SortByMember" | "DashboardWebStringId.Parameters.LookUpSettingsTypeCaption" | "DashboardWebStringId.Dashboard.Items" | "DashboardWebStringId.Dashboard.Groups" | "DashboardWebStringId.Dashboard.LayoutItems" | "DashboardWebStringId.Dashboard.ComponentName" | "DashboardWebStringId.ButtonConfirm" | "DashboardWebStringId.Colorization.GroupInterval" | "DashboardWebStringId.ButtonOn" | "DashboardWebStringId.ButtonOff" | "DashboardWebStringId.ButtonYes" | "DashboardWebStringId.ButtonNo" | "DashboardWebStringId.ButtonDiscrete" | "DashboardWebStringId.ButtonContinuous" | "DashboardWebStringId.ButtonVisible" | "DashboardWebStringId.ButtonHidden" | "DashboardWebStringId.Calculations.PreviousValuesCount" | "DashboardWebStringId.Calculations.NextValuesCount" | "DashboardWebStringId.Calculations.RankType" | "DashboardWebStringId.Calculations.RankOrder" | "DashboardWebStringId.TileOptions" | "DashboardWebStringId.MapLockNavigationLocked" | "DashboardWebStringId.MapLockNavigationUnlocked" | "DashboardWebStringId.ConditionalFormatting.BarOptions" | "DashboardWebStringId.ConditionalFormatting.CalculatedBy" | "DashboardWebStringId.ConditionalFormatting.IconType" | "DashboardWebStringId.ConditionalFormatting.PredefinedColor" | "DashboardWebStringId.ConditionalFormatting.AppearanceType" | "DashboardWebStringId.ConditionalFormatting.FontStyle" | "DashboardWebStringId.ConditionalFormatting.FontFamily" | "DashboardWebStringId.ConditionalFormatting.FontRegular" | "DashboardWebStringId.ConditionalFormatting.IconType.None" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowSideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGraySideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDash" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedTriangleDown" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenTriangleUp" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingHalfGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1QuarterGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1Bar" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1FilledBox" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTriangle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedDiamond" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedFlag" | "DashboardWebStringId.ConditionalFormatting.IntersectionColumnDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionRowDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionLevelMode" | "DashboardWebStringId.ConditionalFormatting.GradientRangeBar" | "DashboardWebStringId.ConditionalFormatting.RangeGradient" | "DashboardWebStringId.ConditionalFormatting.SegmentNumber" | "DashboardWebStringId.ConditionalFormatting.ValueComparison" | "DashboardWebStringId.ConditionalFormatting.Ranges" | "DashboardWebStringId.ConditionalFormatting.AverageType" | "DashboardWebStringId.ConditionalFormatting.Above" | "DashboardWebStringId.ConditionalFormatting.AboveOrEqual" | "DashboardWebStringId.ConditionalFormatting.Below" | "DashboardWebStringId.ConditionalFormatting.BelowOrEqual" | "DashboardWebStringId.ConditionalFormatting.StyleSettingsType" | "DashboardWebStringId.ConditionalFormatting.Positive" | "DashboardWebStringId.ConditionalFormatting.Negative" | "DashboardWebStringId.ConditionalFormatting.MinimumType" | "DashboardWebStringId.ConditionalFormatting.MaximumType" | "DashboardWebStringId.ConditionalFormatting.DateType" | "DashboardWebStringId.ConditionalFormatting.DateType.None" | "DashboardWebStringId.ConditionalFormatting.DateType.SpecificDate" | "DashboardWebStringId.ConditionalFormatting.DateType.BeyondThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.NextWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.Tomorrow" | "DashboardWebStringId.ConditionalFormatting.DateType.Today" | "DashboardWebStringId.ConditionalFormatting.DateType.Yesterday" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.LastWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.PriorThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.Empty" | "DashboardWebStringId.ConditionalFormatting.DateType.User" | "DashboardWebStringId.ConditionalFormatting.DateType.Beyond" | "DashboardWebStringId.ConditionalFormatting.DateType.ThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.ThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAfter1" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAfter2" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo1" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo2" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo3" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo4" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo5" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo6" | "DashboardWebStringId.ConditionalFormatting.DateType.Earlier" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeDataItem" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeCard" | "DashboardWebStringId.Colorization.NoSelectedSchema" | "DashboardWebStringId.Colorization.ColorSchemes" | "DashboardWebStringId.LayoutHasBeenChangedDialogMessage" | "DashboardWebStringId.SaveConfirmationDialogMessage" | "DashboardWebStringId.SaveChangesDialogMessage" | "DashboardWebStringId.Dialog.ChangeDataMemberMessage" | "DashboardWebStringId.Dialog.RemovedDataItemsMessage" | "DashboardWebStringId.Dialog.ConfirmChanges" | "DashboardWebStringId.Dialog.Save" | "DashboardWebStringId.Dialog.DoNotSave" | "DashboardWebStringId.Dialog.ButtonYes" | "DashboardWebStringId.Dialog.ButtonDontChange" | "DashboardWebStringId.Colorization.ColorSchemeType" | "DashboardWebStringId.Colorization.MeasureNames" | "DashboardWebStringId.Colorization.AddColor" | "DashboardWebStringId.Colorization.ValidationSelectMeasure" | "DashboardWebStringId.ColoringModeAuto" | "DashboardWebStringId.ColoringModeOff" | "DashboardWebStringId.ColoringModeOn" | "DashboardWebStringId.ColorScheme.Empty" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButton" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip" | "DashboardWebStringId.ConditionalFormatting.Miscellaneous" | "DashboardWebStringId.Dashboards" | "DashboardWebStringId.EditInDesigner" | "DashboardWebStringId.NoDashboards" | "DashboardWebStringId.AddNewDashboard" | "DashboardWebStringId.NewDashboard" | "DashboardWebStringId.Binding.Searching" | "DashboardWebStringId.Binding.EmptySearchResult" | "DashboardWebStringId.Errors.AttemptToLoadData" | "DashboardWebStringId.ConditionType" | "DashboardWebStringId.ConditionalFormatting.UnsupportedDataType" | "DashboardWebStringId.FormatRule" | "DashboardWebStringId.Notification.DashboardSaving" | "DashboardWebStringId.Notification.DashboardSaved" | "DashboardWebStringId.Notification.DashboardCanNotBeSaved" | "DashboardWebStringId.Notification.DashboardSavingIsNotAvailable" | "DashboardWebStringId.Notification.AttemptToLoadDashboards" | "DashboardWebStringId.Notification.DashboardLoading" | "DashboardWebStringId.Notification.AttemptToLoadDashboard" | "DashboardWebStringId.Notification.AttemptToConnectionStrings" | "DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode" | "DashboardWebStringId.Notification.AttemptToLoadParameterValues" | "DashboardWebStringId.Notification.AttemptToGetUnderlyingData" | "DashboardWebStringId.Notification.AttemptToConvertItemToType" | "DashboardWebStringId.Notification.AttemptToLoadDimensionUniqueValues" | "DashboardWebStringId.Notification.AttemptToLoadFieldListForDataSource" | "DashboardWebStringId.Notification.AttemptToGetColorScheme" | "DashboardWebStringId.Notification.NewDashboardCannotBeCreated" | "DashboardWebStringId.Notification.ErrorHasOccuredOn" | "DashboardWebStringId.Notification.UnsupportedDataSourceType" | "DashboardWebStringId.LimitVisibleData.DisplayAllDataTooltip" | "DashboardWebStringId.LimitVisibleData.IncreasePerformanceTooltip" | "DashboardWebStringId.ConditionalFormatting.Condition" | "DashboardWebStringId.CardLayout.MinWidth" | "DashboardWebStringId.CardLayout.MaxWidth" | "DashboardWebStringId.CardLayout.Editor.CardLayout" | "DashboardWebStringId.CardLayout.Editor.FormatOptions" | "DashboardWebStringId.CardLayout.LayoutOptions" | "DashboardWebStringId.CardLayout.ResetTemplate" | "DashboardWebStringId.CardLayout.ApplyToAllCards" | "DashboardWebStringId.Binding.ValuesPattern" | "DashboardWebStringId.Parameters.ParameterNameShouldBeUnique" | "DashboardWebStringId.Title.ImageEmbedded" | "DashboardWebStringId.Title.ImageLinked" | "DashboardWebStringId.Title.ImageNone" | "DashboardWebStringId.RangeFilter.SetDefaultCustomPeriod" | "DashboardWebStringId.RangeFilter.ClearDefaultCustomPeriod" | "DashboardWebStringId.MobileLayout.Back" | "DashboardWebStringId.MobileLayout.SwitchToViewer" | "DashboardWebStringId.Search" | "DashboardStringId.DefaultNameTabPage" | "DashboardStringId.DefaultNameChartPane" | "DashboardStringId.NewCalculatedFieldNamePrefix" | "DashboardStringId.NewParameterNamePrefix" | "AnalyticsCoreStringId.Parameter_Type_String" | "AnalyticsCoreStringId.Parameter_Type_DateTime" | "AnalyticsCoreStringId.Parameter_Type_Int16" | "AnalyticsCoreStringId.Parameter_Type_Int32" | "AnalyticsCoreStringId.Parameter_Type_Int64" | "AnalyticsCoreStringId.Parameter_Type_Float" | "AnalyticsCoreStringId.Parameter_Type_Double" | "AnalyticsCoreStringId.Parameter_Type_Decimal" | "AnalyticsCoreStringId.Parameter_Type_Boolean" | "AnalyticsCoreStringId.Parameter_Type_Guid" | "AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption" | "DataAccessUIStringId.FiltersView" | "DashboardStringId.SeriesTypeGroupArea" | "DashboardStringId.SeriesTypeGroupBar" | "DashboardStringId.SeriesTypeGroupBubble" | "DashboardStringId.SeriesTypeGroupFinancial" | "DashboardStringId.SeriesTypeGroupPointLine" | "DashboardStringId.SeriesTypeGroupRange" | "DashboardStringId.FunctionCategoryWindow" | "DashboardStringId.FunctionCategoryAggregate" | "DashboardStringId.FunctionCategoryAdvanced" | "DashboardStringId.FunctionDescriptionWindowAvg" | "DashboardStringId.FunctionDescriptionRunningMin" | "DashboardStringId.FunctionDescriptionTotal" | "DashboardStringId.FunctionDescriptionRankCompetition" | "DashboardStringId.FunctionDescriptionLookup" | "DashboardStringId.FunctionDescriptionRunningCount" | "DashboardStringId.FunctionDescriptionWindowMax" | "DashboardStringId.FunctionDescriptionVarp" | "DashboardStringId.FunctionDescriptionRunningAvg" | "DashboardStringId.FunctionDescriptionFirst" | "DashboardStringId.FunctionDescriptionWindowMin" | "DashboardStringId.FunctionDescriptionWindowStdDev" | "DashboardStringId.FunctionDescriptionLast" | "DashboardStringId.FunctionDescriptionWindowCount" | "DashboardStringId.FunctionDescriptionCountDistinct" | "DashboardStringId.FunctionDescriptionIndex" | "DashboardStringId.FunctionDescriptionWindowStdDevp" | "DashboardStringId.FunctionDescriptionWindowMode" | "DashboardStringId.FunctionDescriptionRunningMax" | "DashboardStringId.FunctionDescriptionRankPercentile" | "DashboardStringId.FunctionDescriptionRankDense" | "DashboardStringId.FunctionDescriptionWindowSum" | "DashboardStringId.FunctionDescriptionWindowCountDistinct" | "DashboardStringId.FunctionDescriptionStdDevp" | "DashboardStringId.FunctionDescriptionSize" | "DashboardStringId.FunctionDescriptionMedian" | "DashboardStringId.FunctionDescriptionRankModified" | "DashboardStringId.FunctionDescriptionWindowMedian" | "DashboardStringId.FunctionDescriptionRunningSum" | "DashboardStringId.FunctionDescriptionWindowVarp" | "DashboardStringId.FunctionDescriptionWindowVar" | "DashboardStringId.FunctionDescriptionStdDev" | "DashboardStringId.FunctionDescriptionRankUnique" | "DashboardStringId.FunctionDescriptionVar" | "DashboardStringId.FunctionDescriptionAggr" | "DashboardStringId.FunctionDescriptionAggrJoinRule" | "DashboardStringId.FunctionDescriptionWindowDefinition" | "DashboardStringId.FunctionDescriptionWindowDefinitionPartitionBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderAsc" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderDesc" | "DashboardStringId.AggregateExFunctionDescriptionCountNotNull" | "DashboardStringId.AggregateExFunctionDescriptionMode" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHour" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinute" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinuteSecond" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateMonthYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear2" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateQuarterYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetQuarter" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfMonth" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime3" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime4" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime5" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime6" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToBoolean" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToDateTime" | "DashboardStringId.SparklineIndicationModeLine" | "DashboardStringId.SparklineIndicationModeArea" | "DashboardStringId.SparklineIndicationModeBar" | "DashboardStringId.SparklineIndicationModeWinLoss" | "DashboardStringId.DefaultNameDateFilterItem" | "DashboardWebStringId.DateFilter.FilterType" | "DashboardWebStringId.DateFilter.FilterTypeExact" | "DashboardWebStringId.DateFilter.FilterTypeAfter" | "DashboardWebStringId.DateFilter.FilterTypeBefore" | "DashboardWebStringId.DateFilter.FilterTypeBetween" | "DashboardWebStringId.DateFilter.ArrangementMode" | "DashboardWebStringId.DateFilter.ArrangementModeAutoHeight" | "DashboardWebStringId.DateFilter.ArrangementModeHorizontal" | "DashboardWebStringId.DateFilter.ArrangementModeVertical" | "DashboardWebStringId.DateFilter.DatePickerLocation" | "DashboardWebStringId.DateFilter.DatePickerLocationFar" | "DashboardWebStringId.DateFilter.DatePickerLocationNear" | "DashboardWebStringId.DateFilter.DatePickerLocationHidden" | "DashboardStringId.DateFilterDisplayTextPattern" | "DashboardStringId.DateFilterDatePickerButtonDefaultText" | "DashboardStringId.FromDatePeriodCaption" | "DashboardStringId.ToDatePeriodCaption" | "DashboardStringId.FromToDatePeriodCaption" | "DashboardStringId.UniqueNameValidationMessage" | "DashboardStringId.GridTotalAutoTemplate" | "DashboardStringId.GridTotalValueTemplate" | "DashboardStringId.GridTotalTemplate" | "DashboardStringId.GridTotalTypeCount" | "DashboardStringId.GridTotalTypeMin" | "DashboardStringId.GridTotalTypeMax" | "DashboardStringId.GridTotalTypeAvg" | "DashboardStringId.GridTotalTypeSum" | "DashboardStringId.ActionShowDataInspector" | "DashboardStringId.InspectedData" | "DashboardStringId.InspectedTypeFormatString" | "DashboardStringId.AggregatedDataType" | "DashboardStringId.RawDataType" | "DashboardStringId.OLAPUnavailableRawData" | "DashboardStringId.SparklineValuesSeparator" | "DashboardStringId.SparklineArgumentValueSeparator" | "DashboardWebStringId.Grid.FilterClause.ApplyFilter" | "DashboardWebStringId.Grid.FilterClause.ResetOperation" | "DashboardWebStringId.Grid.FilterClause.Contains" | "DashboardWebStringId.Grid.FilterClause.DoesNotContain" | "DashboardWebStringId.Grid.FilterClause.StartsWith" | "DashboardWebStringId.Grid.FilterClause.EndsWith" | "DashboardWebStringId.Grid.FilterClause.Equals" | "DashboardWebStringId.Grid.FilterClause.DoesNotEqual" | "DashboardWebStringId.Grid.FilterClause.Less" | "DashboardWebStringId.Grid.FilterClause.Greater" | "DashboardWebStringId.Grid.FilterClause.LessOrEqual" | "DashboardWebStringId.Grid.FilterClause.GreaterOrEqual" | "DashboardWebStringId.Grid.FilterClause.Between" | "DashboardWebStringId.Grid.FilterClause.BetweenStart" | "DashboardWebStringId.Grid.FilterClause.BetweenEnd" | "DashboardWebStringId.AccordionTab.Content" | "DashboardWebStringId.TextBoxItemEditor.NoFields" | "DashboardWebStringId.TextBoxItemEditor.InsertField" | "DashboardWebStringId.TextBoxItemEditor.EditTextButton" | "DashboardWebStringId.TextBoxItemEditor.DialogCaption" | "DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose" | "DashboardWebStringId.TextBoxItemEditor.DialogClose" | "DashboardStringId.StartDate" | "DashboardStringId.EndDate" | "DashboardWebStringId.AccordionTab.MeasureFilter" | "DashboardStringId.FunctionDescriptionAggregateFilter" | "DashboardWebStringId.TabPages" | "DashboardWebStringId.More" | "DashboardStringId.MeasureFilterCaptionFormatString";
	};
	export let intersectionLevelMode: IDashboardSerializationInfo;
	export let pivotLevel: IDashboardSerializationInfo;
	export let pivotItemFormatRuleSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import FormatConditionIntersectionLevelMode = DevExpress.Dashboard.Model.FormatConditionIntersectionLevelMode;
    import CellsItemFormatRule = DevExpress.Dashboard.Model.CellsItemFormatRule;
    import PivotItemFormatRuleLevel = DevExpress.Dashboard.Model.PivotItemFormatRuleLevel;
	export class PivotItemFormatRule extends CellsItemFormatRule {
	    applyToColumn: ko.Observable<boolean>;
	    intersectionLevelMode: ko.Observable<FormatConditionIntersectionLevelMode>;
	    level: PivotItemFormatRuleLevel;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    protected _getDefaultItemType(): string;
	}

}
declare module DevExpress.Dashboard.Internal.Model {
	export interface IExpandingState {
	    rows: Array<Array<any>>;
	    columns: Array<Array<any>>;
	}
	export interface IExpandingParams {
	    values: Array<any>;
	    isColumn: boolean;
	}
	export class ExpandingManager {
	    getPivotExpandViewState(): any;
	    setExpandingParams(expandingParams: IExpandingParams): any;
	    onViewStateChanged(expandingState: IExpandingState): void;
	    canProvideExpandingState(): IExpandingState | IExpandingParams;
	    calculateExpandingState(): any;
	    resetExpandingParams(): void;
	    resetColumnViewState(): void;
	    resetRowViewState(): void;
	    private _expandingParams;
	    private _expandingState;
	}

}
declare module DevExpress.Dashboard.Internal.Model {
    import ItemState = DevExpress.Dashboard.Model.ItemState;
	export class ObsoleteDashboardState {
	    parameters: {
	        [id: string]: any;
	    };
	    items: {
	        [id: string]: ItemState;
	    };
	}
	export class ObsoleteItemState {
	    static unwrapDilldownValues(values: any[][][]): any[];
	    DrillLevels: Array<Array<Array<any>>>;
	    Selection: Array<Array<any>>;
	    ClientState: any;
	    SelectedElementIndex: number;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let showCaption: IDashboardSerializationInfo;
	export let showCaptionDefaultFalse: IDashboardSerializationInfo;
	export let parentContainer: IDashboardSerializationInfo;
	export let dashboardItemSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let dataSource: IDashboardSerializationInfo;
	export let filterString: IDashboardSerializationInfo;
	export let isMasterFilterCrossDataSource: IDashboardSerializationInfo;
	export let itemColorScheme: IDashboardSerializationInfo;
	export let dataItemsSerializable: IDashboardSerializationInfo;
	export let hiddenDimensions: IDashboardSerializationInfo;
	export let hiddenMeasures: IDashboardSerializationInfo;
	export let formatRules: IDashboardSerializationInfo;
	export let dataDashboardItemSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let useGlobalColors: IDashboardSerializationInfo;
	export let measuresColoringMode: IDashboardSerializationInfo;
	export let dashboardItemColoringOptionsSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import ColoringMode = DevExpress.Dashboard.Model.ColoringMode;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
	export class DashboardItemColoringOptions extends SerializableModel {
	    useGlobalColors: ko.Observable<boolean>;
	    measuresColoringMode: ko.Observable<ColoringMode>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}

}
declare module DevExpress.Dashboard.Internal.Model {
	export interface LimitDataViewModel {
	    isReduceMode: boolean;
	    isReduced: boolean;
	}
	export class LimitDataState {
	    _visible: boolean;
	    _enabled: boolean;
	    readonly enabled: boolean;
	    setReduced(): void;
	    getViewModel(): LimitDataViewModel;
	    toggle(): void;
	    reset(): void;
	}

}
declare module DevExpress.Dashboard.Model {


    import ItemDataAxisName = DevExpress.Dashboard.Data.ItemDataAxisName;
    import ItemDataAxisPointTuple = DevExpress.Dashboard.Data.ItemDataAxisPointTuple;
    import itemData = DevExpress.Dashboard.Internal.Data.itemData;
    import itemDataTuple = DevExpress.Dashboard.Internal.Data.itemDataTuple;
    import PrimitiveType = DevExpress.Dashboard.Data.PrimitiveType;
    import ClearMasterFilterButtonState = DevExpress.Dashboard.Internal.Data.ClearMasterFilterButtonState;
    import ColorSchemeDefinition = DevExpress.Dashboard.Model.ColorSchemeDefinition;
    import ColorSchemeEntry = DevExpress.Dashboard.Model.ColorSchemeEntry;
    import ItemState = DevExpress.Dashboard.Model.ItemState;
    import AcceptableShapingType = DevExpress.Dashboard.Model.AcceptableShapingType;
    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import Measure = DevExpress.Dashboard.Model.Measure;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
    import DimensionFilterValues = DevExpress.Dashboard.Internal.Model.DimensionFilterValues;
    import IFormattableValue = DevExpress.Dashboard.Internal.Model.IFormattableValue;
    import IDataSourceConsumer = DevExpress.Dashboard.Model.IDataSourceConsumer;
    import IDataField = DevExpress.Dashboard.Internal.Model.IDataField;
    import DataFieldType = DevExpress.Dashboard.Model.DataFieldType;
    import DashboardItemFormatRule = DevExpress.Dashboard.Model.DashboardItemFormatRule;
    import ExpandingManager = DevExpress.Dashboard.Internal.Model.ExpandingManager;
    import IExpandingParams = DevExpress.Dashboard.Internal.Model.IExpandingParams;
    import IExpandingState = DevExpress.Dashboard.Internal.Model.IExpandingState;
    import IColorSignaturesProvider = DevExpress.Dashboard.Internal.Model.IColorSignaturesProvider;
    import IExternalFilter = DevExpress.Dashboard.Internal.Model.IExternalFilter;
    import IMasterFilterItemsProvider = DevExpress.Dashboard.Internal.Model.IMasterFilterItemsProvider;
    import KnockoutEntry = DevExpress.Dashboard.Internal.Model.KnockoutEntry;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import IBindingProperty = DevExpress.Dashboard.Model.IBindingProperty;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import UiStateType = DevExpress.Dashboard.Model.UiStateType;
    import DashboardItemColoringOptions = DevExpress.Dashboard.Model.DashboardItemColoringOptions;
    import IBindingModelProvider = DevExpress.Dashboard.Internal.Model.IBindingModelProvider;
    import IDataItemProvider = DevExpress.Dashboard.Internal.Model.IDataItemProvider;
    import LimitDataState = DevExpress.Dashboard.Internal.Model.LimitDataState;
	export type MasterFilterValues = Array<Array<PrimitiveType>> | Array<ItemDataAxisPointTuple>;
	export abstract class DataDashboardItem extends DashboardItem implements IDataItemProvider, IMasterFilterItemsProvider, IColorSignaturesProvider, IDataSourceConsumer {
	    private static _itemTypesMap;
	    private static _formatRuleTypesMap;
	    private static _createDataItem;
	    private static _updateDataItemByField;
	    protected static _addColoringMeta: (links: DataItemLink[]) => void;
	    static _createFormatRule(item: DataDashboardItem, formatRuleJSON: any, serializer?: DevExpress.Analytics.Utils.IModelSerializer): DashboardItemFormatRule;
	    static _getAvaliableSummaryTypeInfo(dataField: IDataField, acceptableShapingType: AcceptableShapingType, dataItem: DataItem): IDashboardSerializationInfo;
	    dataSource: ko.Observable<string>;
	    dataMember: ko.Observable<string>;
	    dataItems: ko.ObservableArray<DataItem>;
	    filterString: ko.Observable<string>;
	    private __hiddenDimensions;
	    hiddenDimensions: ko.ObservableArray<Dimension>;
	    private __hiddenMeasures;
	    hiddenMeasures: ko.ObservableArray<Measure>;
	    colorScheme: ko.ObservableArray<ColorSchemeEntry>;
	    formatRules: ko.ObservableArray<DashboardItemFormatRule>;
	    isMasterFilterCrossDataSource: ko.Observable<boolean>;
	    coloringOptions: DashboardItemColoringOptions;
	    _masterFilterMode: ko.Computed<string>;
	    _isSingleMasterFilter: ko.Computed<boolean>;
	    _isMultipleMasterFilter: ko.Computed<boolean>;
	    _isDrillDownEnabled: ko.Computed<boolean>;
	    _isIgnoreMasterFilter: ko.Computed<boolean>;
	    _isMasterFilter: ko.Computed<boolean>;
	    _clearMasterFilterSupported: ko.Computed<boolean>;
	    _colorableItems: ko.Subscribable<DashboardItem[]>;
	    _fullRange: ko.Observable<any[]>;
	    _selectedElementIndex: ko.Observable<number>;
	    _beforeMasterFilterSetByUserInteraction: () => void;
	    _afterMasterFilterSetByUserInteraction: () => void;
	    _drillDownChangedByUserInteraction: () => void;
	    _masterFilterItems: ko.Observable<DataDashboardItem[]>;
	    _dataManager: ko.Observable<any>;
	    _drillDownValues: ko.ObservableArray<PrimitiveType>;
	    _clientState: ko.Observable<any>;
	    protected _dataRequestArgs: ko.Observable<any>;
	    protected _expandingManager: ExpandingManager;
	    _selectionValues: ko.Observable<PrimitiveType[][]>;
	    protected _supportedUIStates: ko.Observable<Array<UiStateType>>;
	    private _componentNameGenerator;
	    _outputFilter: ko.Computed<IExternalFilter>;
	    _limitDataState: LimitDataState;
	    readonly _actualSelectionValues: KnockoutEntry<Array<Array<any>>>;
	    readonly _canColorByMeasures: boolean;
	    readonly _canColorByDimensions: boolean;
	    readonly _isLocallyColored: boolean;
	    readonly _isGloballyColored: boolean;
	    readonly _interactivityDimensions: Array<Dimension>;
	    readonly _dimensions: Array<Dimension>;
	    readonly _measures: Array<Measure>;
	    readonly _uniqueDataItems: Array<DataItem>;
	    _isExcludingAllFilter: ko.Computed<boolean>;
	    protected readonly _multiData: any;
	    constructor(dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer, info?: IDashboardSerializationInfoArray);
	    private _removeFromFilters;
	    _clearBindings(): void;
	    _clearInteractivityState(): void;
	    _isCalculationSupported(): boolean;
	    _isSortingEnabled(): boolean;
	    _isTopNEnabled(dataItem: Dimension): boolean;
	    _isColoringEnabled(dataItem: DataItem): boolean;
	    _getDataItem(uniqueName: any): DataItem;
	    _getFinalDataType(dataItemId: string): DataFieldType;
	    _createDataItem(dataField: IDataField, binding: IBindingProperty): DataItem;
	    _updateDataItem(dataItem: DataItem, binding: IBindingProperty, dataField: IDataField, acceptableShapingType: AcceptableShapingType): void;
	    _removeDataItem(dataItem: DataItem, skipGroups?: boolean): void;
	    _attachDataItem(target: Object, propertyName: string, link?: DataItemLink): void;
	    protected _subscribeDataItemLinkArrays(...propertyInfos: Array<{
	        propertyName: string;
	        modelName?: string;
	    }>): void;
	    protected _getMasterFilterMode(): string;
	    protected _getDrillDownEnabled(): boolean;
	    protected _getIgnoreMasterFilter(): boolean;
	    protected _getClearMasterFilterSupported(): boolean;
	    protected _getIsMasterFilter(): boolean;
	    protected _getInteractivityDimensionLinks(): DataItemLink[];
	    protected _getCanColorByMeasures(): boolean;
	    protected _getCanColorByDimensions(): boolean;
	    protected _getAreMeasuresColoredByDefault(): boolean;
	    protected _getIsDimensionColoredByDefault(dimension: Dimension): boolean;
	    protected _coloredDimensions(): Dimension[];
	    protected _coloredByMeasures(): boolean;
	    private _getUseGlobalColors;
	    protected _getValidatedSelection(selectionValues: Array<Array<any>>): Array<Array<any>>;
	    _getClearMasterFilterState(): ClearMasterFilterButtonState;
	    protected _allowAllValue(): boolean;
	    protected _validateSelectionByData(selection: Array<Array<any>>): void;
	    protected _updateContentData(content: any): void;
	    protected _extendContentState(content: any): void;
	    private _updateDataManager;
	    protected _getAllSelectionValues(activeDimensions: Array<string>): any;
	    protected _getPointsByDimension(dimensionId: string, axisName: string): any;
	    _getColorizableDataItemsInfo(): Array<{
	        items: Array<DataItemLink>;
	        prefixId: string;
	    }>;
	    _getDefaultCalculationWindowDefinition(): MeasureCalculationWindowDefinition;
	    _getExportingSelection(): PrimitiveType[][];
	    _getDisplayFilterValues(limitCount?: number): Array<DimensionFilterValues>;
	    protected _createFormattableValue(dimension: Dimension, value: any): IFormattableValue;
	    _getDisplayFilterValuesExternal(): Array<DimensionFilterValues>;
	    _getDisplayDrillDownValues(): Array<DimensionFilterValues>;
	    _getColoringSignature(): ColorSchemeDefinition;
	    _isAttribute(dataItem: DataItem): boolean;
	    _getItemDataAxis(): ItemDataAxisName;
	    _getDataItemContainerDisplayName(dataItemContainer: IBindingModelProvider, dataItemDisplayNameGetter?: (d: DataItem) => string): string;
	    protected _getDataItemDisplayName(dataItem: DataItem): string;
	    protected _getMeasureDisplayName(uniqueName: string): string;
	    _getDimensionDisplayName(uniqueName: string): string;
	    protected _getOlapDimensionDisplayText(uniqueValue: any, dimensionId: any): any;
	    protected _cleanDataItemDependencies(): void;
	    protected _setLinkCollectionAcceptableShapingType(links: Array<DataItemLink>, type: AcceptableShapingType): void;
	    protected _updateDataQueryParams(params: any): void;
	    private _stateSupported;
	    private _isHiddenDimension;
	    private _isHiddenMeasure;
	    _setSelection(stateSelection: Array<Array<PrimitiveType>>): void;
	    protected _hasSelection(): boolean;
	    protected _performOutputFilterOptimization(filter: IExternalFilter): IExternalFilter;
	    _setState(parameter: ItemState): void;
	    _setClientState(clientState: any): void;
	    _setSelectionData(selection: Array<Array<PrimitiveType>>): void;
	    _processItemSelectionChange: (itemElement: any, mode: string, selection: any) => void;
	    _processItemDrillUp: () => void;
	    _processItemClearMasterFilter: (itemElement?: any) => void;
	    _processItemSetPredefinedPeriod: (periodName: string) => void;
	    _processContentElementSelection: (itemName: any, args: any) => void;
	    _processDataRequest: () => void;
	    _processItemClientStateUpdate: (itemName: any, clientState: any) => void;
	    _processExpandingStateChanged: (expandingParams: IExpandingState) => void;
	    _processItemExpandingChange: (expandingParams: IExpandingParams) => void;
	    _itemInteractivityByColumnAxis(): boolean;
	    _getInteractivityAxisDimensionCount(): number;
	    protected _removeSelectionFromState(state: ItemState): ItemState;
	    protected _setSelectionToState(state: ItemState, selection: Array<Array<PrimitiveType>>): ItemState;
	    protected _setPredefinedPeriodToState(itemState: ItemState, periodName: string): ItemState;
	    private _unassignDataItem;
	    private _removeDataItemCore;
	    _getActiveDimensions(): Array<Dimension>;
	    _getDimensionIdsByItemName(): Array<string>;
	    _getValues(tuples: any): any[];
	    _getAvailableTuples(): itemDataTuple[];
	    _getCurrentAxisNameByItemName(): ItemDataAxisName;
	    _getSelectedValuesByItemName(): PrimitiveType[][];
	    _performSetMasterFilter(values: MasterFilterValues): void;
	    _performClearMasterFilter(): void;
	    _performDrillDown(values: ItemDataAxisPointTuple | PrimitiveType): void;
	    _performDrillUp(): void;
	    _getAvailableDrillDownValues(itemName: any): itemDataTuple[];
	    _getCurrentDrillDownValues(): itemDataTuple;
	    _getAvailableFilterValues(itemName: any): itemDataTuple[];
	    _getAvailableActions(): Array<string>;
	    _getItemData(): itemData;
	    _getCurrentFilterValues(): itemDataTuple[];
	    _conditionFormattingExpressionEditorFilter(dataItem: DataItem): boolean;
	}

}
declare module DevExpress.Dashboard.Metadata {

    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
	export let ignoreMasterFiltersDefaultFalse: IDashboardSerializationInfo;
	export let ignoreMasterFiltersDefaultTrue: IDashboardSerializationInfo;
	export let isMasterFilterDefaultFalse: IDashboardSerializationInfo;
	export let isMasterFilterDefaultTrue: IDashboardSerializationInfo;
	export let masterFilterMode: IDashboardSerializationInfo;
	export let isDrillDownEnabled: IDashboardSerializationInfo;
	export let targetDimensions: IDashboardSerializationInfo;
	export let commonInteractivityOptions: IDashboardSerializationInfo;
	export function getInteractivityOptionsPropertyInfo(type: DevExpress.Analytics.Utils.ISerializableModelConstructor): IDashboardSerializationInfo;

}
declare module DevExpress.Dashboard.Model {


    import TargetDimensions = DevExpress.Dashboard.Model.TargetDimensions;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
	export class FilterableDashboardItemInteractivityOptions extends SerializableModel {
	    ignoreMasterFilters: ko.Observable<boolean>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}
	export class DashboardItemGroupInteractivityOptions extends FilterableDashboardItemInteractivityOptions {
	    isMasterFilter: ko.Observable<boolean>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}
	export class DashboardItemBaseInteractivityOptions extends SerializableModel {
	    ignoreMasterFilters: ko.Observable<boolean>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}
	export class DashboardTabItemInteractivityOptions extends DashboardItemBaseInteractivityOptions {
	    isMasterFilter: ko.Observable<boolean>;
	    ignoreMasterFilters: ko.Observable<boolean>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}
	export class DashboardItemMasterFilterInteractivityOptions extends DashboardItemBaseInteractivityOptions {
	    masterFilterMode: ko.Observable<string>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}
	export class DashboardItemDrillDownInteractivityOptions extends DashboardItemBaseInteractivityOptions {
	    isDrillDownEnabled: ko.Observable<boolean>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}
	export class DashboardItemInteractivityOptions extends DashboardItemMasterFilterInteractivityOptions {
	    isDrillDownEnabled: ko.Observable<boolean>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}
	export class ChartInteractivityOptions extends DashboardItemInteractivityOptions {
	    targetDimensions: ko.Observable<TargetDimensions>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}
	export let _filterItemInteractivityOptionsMeta: IDashboardSerializationInfo;
	export let _groupItemInteractivityOptionsMeta: IDashboardSerializationInfo;
	export let _tabItemInteractivityOptions: IDashboardSerializationInfo;
	export let _baseInteractivityOptionsMeta: IDashboardSerializationInfo;
	export let _dashboardItemInteractivityOptionsMeta: IDashboardSerializationInfo;
	export let _masterFilterInteractivityOptionsMeta: IDashboardSerializationInfo;
	export let _drillDownInteractivityOptionsMeta: IDashboardSerializationInfo;
	export let _chartItemInteractivityOptionsMeta: IDashboardSerializationInfo;

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let groupItemSerializationInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {

    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DashboardItemGroupInteractivityOptions = DevExpress.Dashboard.Model.DashboardItemGroupInteractivityOptions;
	export class GroupItem extends DashboardItem {
	    interactivityOptions: DashboardItemGroupInteractivityOptions;
	    constructor(dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getInfoCore(): IDashboardSerializationInfo[];
	    protected _getDefaultItemType(): string;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let showItemAsTabPage: IDashboardSerializationInfo;
	export let tabPageSerializationInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {

    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DashboardItemGroupInteractivityOptions = DevExpress.Dashboard.Model.DashboardItemGroupInteractivityOptions;
	export class DashboardTabPage extends DashboardItem {
	    showItemAsTabPage: ko.Observable<boolean>;
	    private _uniqueNamePrefix;
	    interactivityOptions: DashboardItemGroupInteractivityOptions;
	    constructor(dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getInfoCore(): IDashboardSerializationInfo[];
	    getUniqueNamePrefix(): string;
	    protected _getDefaultItemType(): string;
	}

}
declare module DevExpress.Dashboard.Model {

    import CustomProperties = DevExpress.Dashboard.Model.CustomProperties;
    import ICustomPropertiesProvider = DevExpress.Dashboard.Internal.Model.ICustomPropertiesProvider;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import TypedSerializableModel = DevExpress.Dashboard.Model.TypedSerializableModel;
    import IBindingProperty = DevExpress.Dashboard.Model.IBindingProperty;
    import IBindingModelProvider = DevExpress.Dashboard.Internal.Model.IBindingModelProvider;
	export abstract class DataItemContainer extends TypedSerializableModel implements IBindingModelProvider, ICustomPropertiesProvider {
	    name: ko.Observable<string>;
	    customProperties: CustomProperties;
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    grabFrom(dataItemContainer: DataItemContainer): void;
	    _getContainerType(): string;
	    abstract _getBindingModel(): Array<IBindingProperty>;
	    protected abstract _getInfoCore(): Array<IDashboardSerializationInfo>;
	    abstract _getDataId(): string;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {

    import dxForm =  DevExpress.ui.dxForm ;

    import DisposableType = DevExpress.Dashboard.Model.DisposableType;
    import FormAdapterItem = DevExpress.Dashboard.Metadata.FormAdapterItem;
    import PropertyEditorInfo = DevExpress.Dashboard.Metadata.PropertyEditorInfo;
    import SimpleFormAdapterItems = DevExpress.Dashboard.Metadata.SimpleFormAdapterItems;
	export interface WrapperPropertyInfo extends PropertyEditorInfo {
	    replacementPropertyName?: string;
	    sourceObject?: any;
	}
	export interface PropertyDesciptors extends Array<PropertyEditorInfo | WrapperPropertyInfo | {
	    container: PropertyEditorInfo;
	    properties: PropertyDesciptors;
	}> {
	}
	export interface ObjectPropertiesRules {
	    [key: string]: Array<any> | ((model: any) => boolean);
	}
	export interface DynamicEditorInfo {
	    simpleFormAdapterItem?: SimpleFormAdapterItems;
	    formAdapterItem?: FormAdapterItem;
	    editor?: any;
	    editorOptions?: Object;
	}
	export interface IDynamicEditorRules<T> {
	    [key: string]: (model: T) => DynamicEditorInfo;
	}
	export interface ObjectPropertiesInfo<TModel = any> {
	    properties: PropertyDesciptors;
	    visibilityFilterRules?: ObjectPropertiesRules;
	    disabledFilterRules?: ObjectPropertiesRules;
	    dynamicEditorRules?: IDynamicEditorRules<TModel>;
	    disposableModelSubscriptions?: DisposableType[];
	}
	export interface ObjectPropertiesWrapperOptions<TModel = any> extends ObjectPropertiesInfo<TModel> {
	    model: TModel;
	    modelExtention?: any;
	    summary?: ko.Computed<string>;
	}
	export class ObjectPropertiesWrapper<TModel = any> {
	    private _serializationInfo;
	    private _modelSubscriptions;
	    model: TModel;
	    visibilityFilterRules: ObjectPropertiesRules;
	    disabledFilterRules: ObjectPropertiesRules;
	    summary: ko.Computed<string>;
	    dynamicEditorRules: IDynamicEditorRules<TModel>;
	    onContentReady: ((e: {
	        component?: dxForm;
	        element?: DevExpress.core.dxElement;
	    }) => void);
	    onInitialized: ((e: {
	        component?: dxForm;
	        element?: DevExpress.core.dxElement;
	    }) => void);
	    onFieldDataChanged: (e: {
	        component?: dxForm;
	        element?: DevExpress.core.dxElement;
	        model?: any;
	        dataField?: string;
	        value?: any;
	    }) => any;
	    constructor(options: ObjectPropertiesWrapperOptions<TModel>);
	    getPropertiesFromContainer(cur: any, properties: PropertyDesciptors): void;
	    _validationProvider: dxForm;
	    assignValidationPovider(validationProvider: dxForm): void;
	    _assignPropertyCore(propertyObject: any, info: PropertyEditorInfo): void;
	    addProperty(propertyValue: any, info: PropertyEditorInfo): void;
	    getInfo(): PropertyEditorInfo[];
	    isEmpty(): boolean;
	    isPropertyVisible: (name: string) => boolean;
	    isPropertyDisabled: (name: string) => boolean;
	    getDynamicEditor: (name: string) => DynamicEditorInfo;
	    unbindModel(): void;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let dataSourceSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let connectionName: IDashboardSerializationInfo;
	export let olapDataSourceSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import DataSource = DevExpress.Dashboard.Model.DataSource;
	export class OlapDataSource extends DataSource {
	    connectionName: ko.Observable<string>;
	    constructor(dataSourceJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    getDisplayNamePrefix(): string;
	    protected _getDefaultItemType(): string;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let dataSourceNameSerialization: IDashboardSerializationInfo;
	export let dataMemberSerialization: IDashboardSerializationInfo;
	export let valueMemberSerialization: IDashboardSerializationInfo;
	export let displayMemberSerialization: IDashboardSerializationInfo;
	export let sortByMember: IDashboardSerializationInfo;
	export let sortOrder: IDashboardSerializationInfo;
	export let _dataMemberSerialization: IDashboardSerializationInfo;
	export let _dataSourceNameSerialization: IDashboardSerializationInfo;
	export let dynamicListLookUpSettingsSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import IDataSourceConsumer = DevExpress.Dashboard.Model.IDataSourceConsumer;
    import DimensionSortOrder = DevExpress.Dashboard.Model.DimensionSortOrder;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
	export class DynamicListLookUpSettings extends SerializableModel implements IDataSourceConsumer {
	    static modelName: string;
	    dataMember: ko.Observable<string>;
	    dataSource: ko.Observable<string>;
	    valueMemberName: ko.Observable<string>;
	    displayMemberName: ko.Observable<string>;
	    sortByMember: ko.Observable<string>;
	    sortOrder: ko.Observable<DimensionSortOrder>;
	    _dataSource: ko.Computed<string>;
	    _dataMember: ko.Computed<string>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    equals(target: DynamicListLookUpSettings): boolean;
	    isPropertyDisabled(propertyName: string): boolean;
	}
	export let _dynamicListLookUpSettingsSerializationInfo: IDashboardSerializationInfo;

}
declare module DevExpress.Dashboard.Model {


    import TypedSerializableModel = DevExpress.Dashboard.Model.TypedSerializableModel;
	export class LookUpValue extends TypedSerializableModel {
	    valueType: ko.Observable<string>;
	    value: ko.Observable<string>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    protected _getDefaultItemType(): string;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let lookUpValue: IDashboardSerializationInfo;
	export let lookUpvalues: IDashboardSerializationInfo;
	export let staticListLookUpSettingsSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    import LookUpValue = DevExpress.Dashboard.Model.LookUpValue;
	export class StaticListLookUpSettings extends SerializableModel {
	    private _valueType;
	    static modelName: string;
	    values: ko.ObservableArray<LookUpValue>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    _updateValuesType(newType: string): void;
	}
	export let _staticListLookUpSettingsSerializationInfo: IDashboardSerializationInfo;

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let parameterVisible: IDashboardSerializationInfo;
	export let description: IDashboardSerializationInfo;
	export let allowMultiselect: IDashboardSerializationInfo;
	export let allowNull: IDashboardSerializationInfo;
	export let parameterName: IDashboardSerializationInfo;
	export let defaultValue: IDashboardSerializationInfo;
	export let parameterTypeSerialization: IDashboardSerializationInfo;
	export let parameterTypePropertyGrid: IDashboardSerializationInfo;
	export let lookUpSourceType: IDashboardSerializationInfo;
	export let defaultValues: IDashboardSerializationInfo;
	export let selectAllValues: IDashboardSerializationInfo;
	export let dashboardParameterSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import TypedSerializableModel = DevExpress.Dashboard.Model.TypedSerializableModel;
    import DynamicListLookUpSettings = DevExpress.Dashboard.Model.DynamicListLookUpSettings;
    import LookUpValue = DevExpress.Dashboard.Model.LookUpValue;
    import StaticListLookUpSettings = DevExpress.Dashboard.Model.StaticListLookUpSettings;
	export interface IQueryParameter {
	    name: string;
	    value: any;
	    type: string;
	    allowMultiselect: boolean;
	    selectAll: boolean;
	}
	export function _getParametersQuery(parameters: Parameter[]): IQueryParameter[];
	export class Parameter extends TypedSerializableModel {
	    private _allParameters?;
	    static SelectAllValue: string;
	    private _patchSerializationsInfo;
	    type: ko.Computed<string>;
	    parameterVisible: ko.Observable<boolean>;
	    description: ko.Observable<string>;
	    allowMultiselect: ko.Observable<boolean>;
	    allowNull: ko.Observable<boolean>;
	    name: ko.Observable<string>;
	    defaultValue: ko.Observable<any>;
	    _type: ko.Observable<string>;
	    lookUpSourceType: ko.Subscribable;
	    defaultValues: ko.ObservableArray<LookUpValue>;
	    selectAllValues: ko.Observable<boolean>;
	    containsDisplayMember: ko.Computed<boolean>;
	    staticListLookUpSettings: ko.Observable<StaticListLookUpSettings>;
	    dynamicListLookUpSettings: ko.Observable<DynamicListLookUpSettings>;
	    _valuesOfDefaultValues: ko.Computed<string[]>;
	    _actualValue: ko.Computed<any>;
	    private _paramDialogValue;
	    _value: ko.Computed<any>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer, _allParameters?: ko.ObservableArray<Parameter>);
	    _isNameValid: (name: string) => boolean;
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    _resetDefaultValues(): void;
	    grabFrom(another: Parameter): void;
	    protected _getDefaultItemType(): string;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {

    import IDataFieldsProvider = DevExpress.Dashboard.Internal.IDataFieldsProvider;
    import DataSource = DevExpress.Dashboard.Model.DataSource;
    import KnockoutEntry = DevExpress.Dashboard.Internal.Model.KnockoutEntry;
    import Parameter = DevExpress.Dashboard.Model.Parameter;
	export interface IDataSourceProvider {
	    findDataSource: (dsName: string) => DataSource;
	}
	export class ExpressionEditorItemsProvider implements DevExpress.Analytics.Utils.IItemsProvider {
	    private dataFieldsProvider;
	    private dataSourceProvider;
	    private parameters;
	    private dataSourceName;
	    private dataMember;
	    private filterPredicate;
	    constructor(dataFieldsProvider: IDataFieldsProvider, dataSourceProvider: IDataSourceProvider, parameters: Parameter[], dataSourceName: KnockoutEntry<string>, dataMember: KnockoutEntry<string>, filterPredicate?: (field?: any) => boolean);
	    getItems(pathRequest: DevExpress.Analytics.Utils.IPathRequest): JQuery.Promise<DevExpress.Analytics.Utils.IDataMemberInfo[], any, any>;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let efDataSourceSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import DataSource = DevExpress.Dashboard.Model.DataSource;
    import IDataField = DevExpress.Dashboard.Internal.Model.IDataField;
	export class EFDataSource extends DataSource {
	    _tables: ko.ObservableArray<IDataField>;
	    constructor(dataSourceJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    getDisplayNamePrefix(): string;
	    protected _getDefaultItemType(): string;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let aliasProperty: IDashboardSerializationInfo;
	export let queryNodeSerializationsInfo: IDashboardSerializationInfoArray;
	export let queryNodes: IDashboardSerializationInfo;
	export let idProperty: IDashboardSerializationInfo;
	export let contextItemSerializationsInfo: IDashboardSerializationInfoArray;
	export let context: IDashboardSerializationInfo;
	export let dataSourceProperty: IDashboardSerializationInfo;
	export let dataMemberProperty: IDashboardSerializationInfo;
	export let sourceSerializationsInfo: IDashboardSerializationInfoArray;
	export let sources: IDashboardSerializationInfo;
	export let federationDataSourceSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let excelDataSourceSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {

    import DataSource = DevExpress.Dashboard.Model.DataSource;
	export class ExcelDataSource extends DataSource {
	    constructor(dataSourceJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    getDisplayNamePrefix(): string;
	    protected _getDefaultItemType(): string;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let extractDataSourceSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {

    import DataSource = DevExpress.Dashboard.Model.DataSource;
	export class ExtractDataSource extends DataSource {
	    constructor(dataSourceJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    getDisplayNamePrefix(): string;
	    protected _getDefaultItemType(): string;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let jsonDataSourceSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {



    import DataSource = DevExpress.Dashboard.Model.DataSource;
	export class JsonDataSource extends DataSource {
	    rootElement: ko.Observable<string>;
	    schema: ko.Observable<DevExpress.Analytics.Data.JsonSchemaRootNode>;
	    constructor(dataSourceJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    getDisplayNamePrefix(): string;
	    protected _getDefaultItemType(): string;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let objectDataSourceSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {

    import DataSource = DevExpress.Dashboard.Model.DataSource;
	export class ObjectDataSource extends DataSource {
	    constructor(dataSourceJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    getDisplayNamePrefix(): string;
	    protected _getDefaultItemType(): string;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let connectionSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
	export class SqlConnection extends SerializableModel {
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    constructor(connectionJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    name: ko.Observable<string>;
	    fromAppConfig: ko.Computed<boolean>;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let queries: IDashboardSerializationInfo;
	export let selectedTables: IDashboardSerializationInfo;
	export let connection: IDashboardSerializationInfo;
	export let sqlDataSourceSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {



    import SqlConnection = DevExpress.Dashboard.Model.SqlConnection;
    import DataSource = DevExpress.Dashboard.Model.DataSource;
	export class SqlDataSource extends DataSource {
	    queries: ko.ObservableArray<DevExpress.Analytics.Data.Utils.ISqlQueryViewModel>;
	    connection: SqlConnection;
	    constructor(dataSourceJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    getDisplayNamePrefix(): string;
	    protected _getDefaultItemType(): string;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let xpoDataSourceSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {

    import DataSource = DevExpress.Dashboard.Model.DataSource;
	export class XpoDataSource extends DataSource {
	    constructor(dataSourceJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    getDisplayNamePrefix(): string;
	    protected _getDefaultItemType(): string;
	}

}
declare module DevExpress.Dashboard.Internal.Model {
    import EFDataSource = DevExpress.Dashboard.Model.EFDataSource;
    import ExcelDataSource = DevExpress.Dashboard.Model.ExcelDataSource;
    import ExtractDataSource = DevExpress.Dashboard.Model.ExtractDataSource;
    import JsonDataSource = DevExpress.Dashboard.Model.JsonDataSource;
    import ObjectDataSource = DevExpress.Dashboard.Model.ObjectDataSource;
    import OlapDataSource = DevExpress.Dashboard.Model.OlapDataSource;
    import SqlDataSource = DevExpress.Dashboard.Model.SqlDataSource;
    import XpoDataSource = DevExpress.Dashboard.Model.XpoDataSource;
	export let _baseDataSourceTypesMap: {
	    'ObjectDataSource': typeof ObjectDataSource;
	    'SqlDataSource': typeof SqlDataSource;
	    'OLAPDataSource': typeof OlapDataSource;
	    'EFDataSource': typeof EFDataSource;
	    'ExcelDataSource': typeof ExcelDataSource;
	    'ExtractFileDataSource': typeof ExtractDataSource;
	    'JsonDataSource': typeof JsonDataSource;
	    'XPObjectSource': typeof XpoDataSource;
	};

}
declare module DevExpress.Dashboard.Model {


    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    import DataSource = DevExpress.Dashboard.Model.DataSource;
	export class FederationDataSource extends DataSource {
	    sources: ko.ObservableArray<Source>;
	    queries: ko.ObservableArray<QueryNode>;
	    context: ko.ObservableArray<ContextItem>;
	    constructor(dataSourceJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    getDisplayNamePrefix(): string;
	    protected _getDefaultItemType(): string;
	}
	export class QueryNode extends SerializableModel {
	    alias: ko.Observable<string>;
	    constructor(json?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    protected _getDefaultItemType(): string;
	}
	export class ContextItem extends SerializableModel {
	    source: ko.Observable<DataSource>;
	    id: ko.Observable<string>;
	    constructor(json?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    protected _getDefaultItemType(): string;
	}
	export class Source extends SerializableModel {
	    dataSource: ko.Observable<string>;
	    dataMember: ko.Observable<string>;
	    name: ko.Observable<string>;
	    constructor(json?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    protected _getDefaultItemType(): string;
	}

}
declare module DevExpress.Dashboard.Model {
    import IBindingProperty = DevExpress.Dashboard.Model.IBindingProperty;
	export type DataType = 'Text' | 'DateTime' | 'Bool' | 'Integer' | 'Float' | 'Double' | 'Decimal';
	export interface ICustomItemBinding extends IBindingProperty {
	    displayName: string;
	    array: boolean;
	    enableInteractivity?: boolean;
	    enableColoring?: boolean;
	    constraints?: {
	        allowedTypes: Array<DataType>;
	    };
	    slice?: string;
	}
	export interface ICustomItemBindingValue {
	    displayName: () => string;
	    uniqueName: () => string;
	}

}
declare module DevExpress.Dashboard.Model {
	export interface ICustomDataRow {
	    getColor: (measureBindingName?: string) => Array<string>;
	    getDisplayText: (property: string) => Array<string>;
	    getValue: (property: string) => Array<any>;
	    getUniqueValue: (property: string) => Array<any>;
	}

}
declare module DevExpress.Dashboard.Internal.Model {
	export interface ObsoleteMemberInfo {
	    target: Object;
	    memberName: string;
	    oldMemberDisplayName?: string;
	    newMemberDisplayName?: string;
	    warmMessage?: string;
	    ignoreWarmMessage?: boolean;
	    action: (...args: any[]) => any;
	}
	export let ClassMemberType: {
	    method: string;
	    property: string;
	};
	export function defineObsoleteProperty(info: ObsoleteMemberInfo): void;
	export function defineClassMoved(className: string, sourceNamespace: any, destNamespace: any, sourceNamespaceName: string, destNamespaceName: string, additionalInfo: string): void;
	export function defineObsoleteMethod(info: ObsoleteMemberInfo): void;

}
declare module DevExpress.Dashboard.Internal.Viewer {
	export class DashboardLayoutModeHelper {
	    private static _forceTouchMode?;
	    private static _forceMobileMode?;
	    static isMobile: boolean;
	    static isTouch: boolean;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
	export class HashsetWrapper {
	    private FNV_prime_32;
	    private FNV_offset_basis_32;
	    private hashSet;
	    constructor(array: any[]);
	    contains(item: any): boolean;
	    getIntersection(array: any[]): any[];
	    indexOf(item: any): number;
	    private getItem;
	    private getHash;
	    private toHash;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
	export let filterDimensions: IDashboardSerializationInfo;
	export let showAllValue: IDashboardSerializationInfo;
	export let enableSearch: IDashboardSerializationInfo;
	export let filterElementItemBaseSerializationInfo: IDashboardSerializationInfo[];

}
declare module DevExpress.Dashboard.Model {


    import PrimitiveType = DevExpress.Dashboard.Data.PrimitiveType;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import IExternalFilter = DevExpress.Dashboard.Internal.Model.IExternalFilter;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import FilterableDashboardItemInteractivityOptions = DevExpress.Dashboard.Model.FilterableDashboardItemInteractivityOptions;
	export abstract class FilterElementItemBase extends DataDashboardItem {
	    private __filterDimensions;
	    filterDimensions: ko.ObservableArray<Dimension>;
	    enableSearch: ko.Observable<boolean>;
	    interactivityOptions: FilterableDashboardItemInteractivityOptions;
	    _unselectedValues: ko.Observable<any[][]>;
	    _isExcludingAllFilter: ko.Computed<boolean>;
	    readonly _supportParallelRequests: boolean;
	    private readonly _useCriteriaOptimization;
	    constructor(dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    _clearBindings(): void;
	    protected _getInfoCore(): IDashboardSerializationInfo[];
	    _isCalculationSupported(): boolean;
	    protected _getInteractivityDimensionLinks(): DataItemLink[];
	    protected _getMasterFilterMode(): string;
	    protected _getIgnoreMasterFilter(): boolean;
	    protected _getClearMasterFilterSupported(): boolean;
	    protected _getIsMasterFilter(): boolean;
	    protected _isMultiselectable(): boolean;
	    protected _updateContentViewModel(content: any): void;
	    protected _performOutputFilterOptimization(filter: IExternalFilter): IExternalFilter;
	    protected _validateSelectionByData(selection: Array<Array<any>>): void;
	    _setSelectionData(selection: Array<Array<PrimitiveType>>): void;
	    private _correctSelectionValues;
	    private _updateUnselectedValues;
	    private _arrayContains;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import IEntireRange = DevExpress.Dashboard.Internal.Viewer.IEntireRange;
    import IRange = DevExpress.Dashboard.Internal.Viewer.IRange;
	export class RangeFilterSelectionValidator {
	    static validate(range: IRange, isYearGroupInterval: boolean, entireRange?: IEntireRange): IRange;
	    static validateLimitsOrder(range: IRange): IRange;
	    static isValidValue(value: any): boolean;
	    static _validateValues(range: IRange, entireRange: IEntireRange): IRange;
	    static _validateOutOfRange(range: IRange, entireRange: IEntireRange): IRange;
	    static _prepareYearRangeBeforeSelection(range: IRange, isYearGroupInterval: boolean): IRange;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DayOfWeekNumber = DevExpress.Dashboard.Internal.Data.DayOfWeekNumber;
    import DateTimeInterval = DevExpress.Dashboard.Model.DateTimeInterval;
	export interface IRange {
	    startValue: any;
	    endValue: any;
	}
	export interface IEntireRange {
	    minimum: any;
	    maximum: any;
	}
	export interface IDateTimePeriod {
	    Start: IDateTimePeriodLimit;
	    End: IDateTimePeriodLimit;
	}
	export interface IDateTimePeriodLimit {
	    Relative: boolean;
	    Interval?: DateTimeInterval;
	    Offset?: number;
	    Date?: Date;
	}
	export class DateTimePeriodConverter {
	    static toRange(period: IDateTimePeriod, firstDayOfWeek: DayOfWeekNumber): IRange;
	    static _getDateTime(limit: IDateTimePeriodLimit, now: Date, firstDayOfWeek: DayOfWeekNumber): Date;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let rangeFilterDefinitionMode: IDashboardSerializationInfo;
	export let rangeFilterWindowDefinitionSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import RangeFilterWindowDefinitionMode = DevExpress.Dashboard.Model.RangeFilterWindowDefinitionMode;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
	export class RangeFilterWindowDefinition extends MeasureCalculationWindowDefinition {
	    definitionMode: ko.Observable<RangeFilterWindowDefinitionMode>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    equals(def: any): boolean;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let showPointLabels: IDashboardSerializationInfo;
	export let pointLabelOrientation: IDashboardSerializationInfo;
	export let overlappingMode: IDashboardSerializationInfo;
	export let pointLabelOptionsBaseSerializationsInfo: IDashboardSerializationInfoArray;
	export let showForZeroValues: IDashboardSerializationInfo;
	export let position: IDashboardSerializationInfo;
	export let contentType: IDashboardSerializationInfo;
	export let pointLabelOptionsSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import PointLabelContentType = DevExpress.Dashboard.Model.PointLabelContentType;
    import PointLabelOrientation = DevExpress.Dashboard.Model.PointLabelOrientation;
    import PointLabelOverlappingMode = DevExpress.Dashboard.Model.PointLabelOverlappingMode;
    import PointLabelPosition = DevExpress.Dashboard.Model.PointLabelPosition;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
	export class PointLabelOptionsBase extends SerializableModel {
	    showPointLabels: ko.Observable<boolean>;
	    orientation: ko.Observable<PointLabelOrientation>;
	    overlappingMode: ko.Observable<PointLabelOverlappingMode>;
	    constructor(JSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    grabFrom(options: PointLabelOptionsBase): void;
	}
	export class PointLabelOptions extends PointLabelOptionsBase {
	    showForZeroValues: ko.Observable<boolean>;
	    position: ko.Observable<PointLabelPosition>;
	    contentType: ko.Observable<PointLabelContentType>;
	    constructor(JSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    grabFrom(options: PointLabelOptions): void;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let plotOnSecondaryAxis: IDashboardSerializationInfo;
	export let ignoreEmptyPoints: IDashboardSerializationInfo;
	export let showPointMarkers: IDashboardSerializationInfo;
	export let chartSeriesPointLabelOptions: IDashboardSerializationInfo;
	export let chartSeriesSerializationsInfo: IDashboardSerializationInfoArray;
	export let chartSeriesType: IDashboardSerializationInfo;
	export let simpleSeriesType: IDashboardSerializationInfo;
	export let rangeSeriesType: IDashboardSerializationInfo;
	export let openHighLowCloseSeriesType: IDashboardSerializationInfo;
	export let chartSeriesValue: IDashboardSerializationInfo;
	export let value1: IDashboardSerializationInfo;
	export let value2: IDashboardSerializationInfo;
	export let chartSeriesWeight: IDashboardSerializationInfo;
	export let open: IDashboardSerializationInfo;
	export let high: IDashboardSerializationInfo;
	export let low: IDashboardSerializationInfo;
	export let close: IDashboardSerializationInfo;
	export let simpleSeriesSerializationsInfo: IDashboardSerializationInfoArray;
	export let rangeSeriesSerializationsInfo: IDashboardSerializationInfoArray;
	export let weightedSeriesSerializationsInfo: IDashboardSerializationInfoArray;
	export let highLowCloseSeriesSerializationsInfo: IDashboardSerializationInfoArray;
	export let openHighLowCloseSeriesSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import Measure = DevExpress.Dashboard.Model.Measure;
    import OpenHighLowCloseSeriesType = DevExpress.Dashboard.Model.OpenHighLowCloseSeriesType;
    import RangeSeriesType = DevExpress.Dashboard.Model.RangeSeriesType;
    import SimpleSeriesType = DevExpress.Dashboard.Model.SimpleSeriesType;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import IBindingProperty = DevExpress.Dashboard.Model.IBindingProperty;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import DataItemContainer = DevExpress.Dashboard.Model.DataItemContainer;
    import PointLabelOptions = DevExpress.Dashboard.Model.PointLabelOptions;
	export abstract class ChartSeries extends DataItemContainer {
	    plotOnSecondaryAxis: ko.Observable<boolean>;
	    ignoreEmptyPoints: ko.Observable<boolean>;
	    showPointMarkers: ko.Observable<boolean>;
	    pointLabelOptions: PointLabelOptions;
	    constructor(seriesJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getInfoCore(): IDashboardSerializationInfoArray;
	    grabFrom(series: ChartSeries): void;
	    protected abstract readonly _defaultMeasure: Measure;
	    _getDataId(): string;
	    abstract _getBindingModel(): Array<IBindingProperty>;
	}
	export class SimpleSeries extends ChartSeries {
	    private __value;
	    value: ko.Observable<Measure>;
	    seriesType: ko.Observable<SimpleSeriesType>;
	    constructor(dataItemProvider: DataDashboardItem, seriesJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    _getBindingModel(): Array<IBindingProperty>;
	    _getContainerType(): SimpleSeriesType;
	    protected _getInfoCore(): IDashboardSerializationInfoArray;
	    protected _getDefaultItemType(): string;
	    protected readonly _defaultMeasure: Measure;
	}
	export class RangeSeries extends ChartSeries {
	    private __value1;
	    private __value2;
	    value1: ko.Observable<Measure>;
	    value2: ko.Observable<Measure>;
	    seriesType: ko.Observable<RangeSeriesType>;
	    constructor(dataItemProvider: DataDashboardItem, seriesJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getInfoCore(): IDashboardSerializationInfoArray;
	    protected _getDefaultItemType(): string;
	    _getBindingModel(): Array<IBindingProperty>;
	    _getContainerType(): RangeSeriesType;
	    protected readonly _defaultMeasure: Measure;
	}
	export class WeightedSeries extends ChartSeries {
	    private __weight;
	    private __value;
	    weight: ko.Observable<Measure>;
	    value: ko.Observable<Measure>;
	    constructor(dataItemProvider: DataDashboardItem, seriesJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getInfoCore(): IDashboardSerializationInfoArray;
	    protected _getDefaultItemType(): string;
	    _getBindingModel(): Array<IBindingProperty>;
	    protected readonly _defaultMeasure: Measure;
	}
	export class HighLowCloseSeries extends ChartSeries {
	    private __high;
	    private __low;
	    private __close;
	    high: ko.Observable<Measure>;
	    low: ko.Observable<Measure>;
	    close: ko.Observable<Measure>;
	    constructor(dataItemProvider: DataDashboardItem, seriesJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getInfoCore(): IDashboardSerializationInfoArray;
	    protected _getDefaultItemType(): string;
	    _getBindingModel(): Array<IBindingProperty>;
	    protected readonly _defaultMeasure: Measure;
	}
	export class OpenHighLowCloseSeries extends HighLowCloseSeries {
	    private __open;
	    open: ko.Observable<Measure>;
	    seriesType: ko.Observable<OpenHighLowCloseSeriesType>;
	    constructor(dataItemProvider: DataDashboardItem, seriesJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getInfoCore(): IDashboardSerializationInfoArray;
	    protected _getDefaultItemType(): string;
	    _getBindingModel(): Array<IBindingProperty>;
	    _getContainerType(): OpenHighLowCloseSeriesType;
	    protected readonly _defaultMeasure: Measure;
	}

}
declare module DevExpress.Dashboard.Model {

    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import ChartSeries = DevExpress.Dashboard.Model.ChartSeries;
    import HighLowCloseSeries = DevExpress.Dashboard.Model.HighLowCloseSeries;
    import OpenHighLowCloseSeries = DevExpress.Dashboard.Model.OpenHighLowCloseSeries;
    import RangeSeries = DevExpress.Dashboard.Model.RangeSeries;
    import SimpleSeries = DevExpress.Dashboard.Model.SimpleSeries;
    import WeightedSeries = DevExpress.Dashboard.Model.WeightedSeries;
	export class ChartSeriesCreator {
	    static chartSeriesTypesMap: {
	        'Simple': typeof SimpleSeries;
	        'Range': typeof RangeSeries;
	        'Weighted': typeof WeightedSeries;
	        'OpenHighLowClose': typeof OpenHighLowCloseSeries;
	        'HighLowClose': typeof HighLowCloseSeries;
	    };
	    static chartSeriesViewTypesMap: {
	        Bar: any;
	        Point: any;
	        Line: any;
	        Spline: any;
	        Area: any;
	        StackedBar: any;
	        FullStackedBar: any;
	        StackedLine: any;
	        FullStackedLine: any;
	        StepLine: any;
	        StackedArea: any;
	        FullStackedArea: any;
	        StepArea: any;
	        SplineArea: any;
	        StackedSplineArea: any;
	        FullStackedSplineArea: any;
	    };
	    static chartSeriesGroupLocalization: {
	        'Area': string;
	        'Bar': string;
	        'Bubble': string;
	        'Financial': string;
	        'Point / Line': string;
	        'Range': string;
	    };
	    static getSeriesCreator(dataItemProvider: DataDashboardItem): (seriesViewType: "Bar" | "Point" | "Line" | "Spline" | "Area" | "StackedBar" | "FullStackedBar" | "StackedLine" | "FullStackedLine" | "StepLine" | "StackedArea" | "FullStackedArea" | "StepArea" | "SplineArea" | "StackedSplineArea" | "FullStackedSplineArea" | "SideBySideRangeBar" | "RangeArea" | "CandleStick" | "Stock") => ChartSeries;
	    static createSeries(dataItemProvider: DataDashboardItem, seriesJSON: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer): ChartSeries;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let seriesDimensions: IDashboardSerializationInfo;
	export let seriesDashboardItemSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
	export abstract class SeriesItem extends DataDashboardItem {
	    protected __seriesDimensions: ko.ObservableArray<DataItemLink>;
	    seriesDimensions: ko.ObservableArray<Dimension>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getInfoCore(): IDashboardSerializationInfo[];
	    _clearBindings(): void;
	    protected _getInteractivityDimensionLinks(): DataItemLink[];
	}

}
declare module DevExpress.Dashboard.Metadata {
    import FixedDateTimePeriodLimit = DevExpress.Dashboard.Model.FixedDateTimePeriodLimit;
    import FlowDateTimePeriodLimit = DevExpress.Dashboard.Model.FlowDateTimePeriodLimit;
    import DashboardLocalizationId = DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    import DateTimeGroupInterval = DevExpress.Dashboard.Model.DateTimeGroupInterval;
    import DateTimeInterval = DevExpress.Dashboard.Model.DateTimeInterval;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import ITypedDashboardSerializationInfo = DevExpress.Dashboard.Metadata.ITypedDashboardSerializationInfo;
	export let flowIntervalOrderedValues: Array<DateTimeInterval>;
	export let flowIntervalValues: {
	    [key in DateTimeInterval]: DashboardLocalizationId;
	};
	export function convertDateTimeGroupInterval(groupInterval: DateTimeGroupInterval): DateTimeInterval;
	export let interval: IDashboardSerializationInfo;
	export let offset: ITypedDashboardSerializationInfo<FlowDateTimePeriodLimit>;
	export let flowDateTimePeriodLimitSerializationsInfo: IDashboardSerializationInfoArray;
	export let date: ITypedDashboardSerializationInfo<FixedDateTimePeriodLimit>;
	export let fixedDateTimePeriodLimitSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import DateTimeGroupInterval = DevExpress.Dashboard.Model.DateTimeGroupInterval;
    import DateTimeInterval = DevExpress.Dashboard.Model.DateTimeInterval;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
	export class FixedDateTimePeriodLimit extends SerializableModel {
	    date: ko.Observable<Date>;
	    isEmpty: ko.Observable<boolean>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    getDateTimeValue(): Date;
	}
	export class FlowDateTimePeriodLimit extends SerializableModel {
	    interval: ko.Observable<DateTimeInterval>;
	    offset: ko.Observable<number>;
	    isEmpty: ko.Observable<boolean>;
	    argumentInterval: ko.Observable<DateTimeGroupInterval>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    _getAvailableIntervals(): DevExpress.Analytics.Utils.IDisplayedValue[];
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import ITypedDashboardSerializationInfo = DevExpress.Dashboard.Metadata.ITypedDashboardSerializationInfo;
    import LimitContainer = DevExpress.Dashboard.Model.LimitContainer;
	export let fixedDateTimePeriodLimitProperty: ITypedDashboardSerializationInfo<LimitContainer>;
	export let flowDateTimePeriodLimitProperty: ITypedDashboardSerializationInfo<LimitContainer>;
	export let limitContainer: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import DateTimeGroupInterval = DevExpress.Dashboard.Model.DateTimeGroupInterval;
    import DateTimeInterval = DevExpress.Dashboard.Model.DateTimeInterval;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    import FixedDateTimePeriodLimit = DevExpress.Dashboard.Model.FixedDateTimePeriodLimit;
    import FlowDateTimePeriodLimit = DevExpress.Dashboard.Model.FlowDateTimePeriodLimit;
	export class LimitContainer extends SerializableModel {
	    fixed: FixedDateTimePeriodLimit;
	    flow: FlowDateTimePeriodLimit;
	    mode: ko.Observable<"None" | "Fixed" | "Flow">;
	    argumentInterval: ko.Observable<DateTimeGroupInterval>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    isEmpty(): boolean;
	    getInterval(): DateTimeInterval;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import ITypedDashboardSerializationInfo = DevExpress.Dashboard.Metadata.ITypedDashboardSerializationInfo;
    import DateTimePeriod = DevExpress.Dashboard.Model.DateTimePeriod;
    import LimitContainer = DevExpress.Dashboard.Model.LimitContainer;
	export let startLimit: ITypedDashboardSerializationInfo<DateTimePeriod>;
	export let endLimit: ITypedDashboardSerializationInfo<DateTimePeriod>;
	export let dateTimePeriodSerializationsInfo: IDashboardSerializationInfoArray;
	export let mode: ITypedDashboardSerializationInfo<LimitContainer>;

}
declare module DevExpress.Dashboard.Model {


    import DateTimeFormatInfoType = DevExpress.Dashboard.Internal.Data.DateTimeFormatInfoType;
    import DayOfWeekNumber = DevExpress.Dashboard.Internal.Data.DayOfWeekNumber;
    import IRange = DevExpress.Dashboard.Internal.Viewer.IRange;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import DisposableType = DevExpress.Dashboard.Model.DisposableType;
    import DateTimeGroupInterval = DevExpress.Dashboard.Model.DateTimeGroupInterval;
    import TypedSerializableModel = DevExpress.Dashboard.Model.TypedSerializableModel;
    import LimitContainer = DevExpress.Dashboard.Model.LimitContainer;
	export class DateTimePeriod extends TypedSerializableModel {
	    start: LimitContainer;
	    end: LimitContainer;
	    name: ko.Observable<string>;
	    argumentInterval: ko.Observable<DateTimeGroupInterval>;
	    _firstDayOfWeek: ko.Observable<DayOfWeekNumber>;
	    _getPeriodTextValue: ko.PureComputed<any>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    protected _getDefaultItemType(): string;
	    getDateTimeValue(): IRange;
	    getDateFormat(): DateTimeFormatInfoType;
	    format(value: Date): string;
	    _subscribeToGroupInterval(dimension: Dimension): DisposableType;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
	export let coloringOptions: IDashboardSerializationInfo;

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let defaultDateTimePeriodName: IDashboardSerializationInfo;
	export let dateTimePeriods: IDashboardSerializationInfo;
	export let rangeSeries: IDashboardSerializationInfo;
	export let argument: IDashboardSerializationInfo;
	export let rangeFilterDashboardItemSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Internal.Model {
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import DateTimePeriod = DevExpress.Dashboard.Model.DateTimePeriod;
	export const _subscribeToDimension: (dimension: import("knockout").Observable<Dimension>, dateTimePeriods: import("knockout").ObservableArray<DateTimePeriod>) => void;

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let filterType: IDashboardSerializationInfo;
	export let arrangementMode: IDashboardSerializationInfo;
	export let datePickerLocation: IDashboardSerializationInfo;
	export let displayTextPattern: IDashboardSerializationInfo;
	export let dateFilterDimension: IDashboardSerializationInfo;
	export let dateFilterDashboardItemSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import PrimitiveType = DevExpress.Dashboard.Data.PrimitiveType;
    import ItemState = DevExpress.Dashboard.Model.ItemState;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import DimensionFilterValues = DevExpress.Dashboard.Internal.Model.DimensionFilterValues;
    import DateFilterArrangementMode = DevExpress.Dashboard.Model.DateFilterArrangementMode;
    import DateFilterType = DevExpress.Dashboard.Model.DateFilterType;
    import DatePickerLocation = DevExpress.Dashboard.Model.DatePickerLocation;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import FilterableDashboardItemInteractivityOptions = DevExpress.Dashboard.Model.FilterableDashboardItemInteractivityOptions;
    import DateTimePeriod = DevExpress.Dashboard.Model.DateTimePeriod;
    import RangeStateController = DevExpress.Dashboard.Internal.Model.RangeStateController;
	export class DateFilterItem extends DataDashboardItem {
	    private __dimension;
	    dimension: ko.Observable<Dimension>;
	    filterType: ko.Observable<DateFilterType>;
	    arrangementMode: ko.Observable<DateFilterArrangementMode>;
	    datePickerLocation: ko.Observable<DatePickerLocation>;
	    defaultDateTimePeriodName: ko.Observable<string>;
	    displayTextPattern: ko.Observable<string>;
	    dateTimePeriods: ko.ObservableArray<DateTimePeriod>;
	    _defaultDateTimePeriodIndexSubscription: ko.Subscription;
	    currentSelectedDateTimePeriodName: ko.Observable<string>;
	    _stateController: RangeStateController;
	    interactivityOptions: FilterableDashboardItemInteractivityOptions;
	    constructor(dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    _getSelectionByPeriod(period: DateTimePeriod): any[][];
	    _clearBindings(): void;
	    protected _getInfoCore(): IDashboardSerializationInfo[];
	    protected _getDefaultItemType(): string;
	    protected _getClearMasterFilterSupported(): boolean;
	    protected _getIsMasterFilter(): boolean;
	    protected _getIgnoreMasterFilter(): boolean;
	    protected _getInteractivityDimensionLinks(): DataItemLink[];
	    _getDisplayFilterValues(limitCount?: number): Array<DimensionFilterValues>;
	    protected _updateContentViewModel(content: any): void;
	    _setState(itemState: ItemState): void;
	    protected _removeSelectionFromState(state: ItemState): ItemState;
	    protected _setPredefinedPeriodToState(state: ItemState, periodName: string): ItemState;
	    protected _setSelectionToState(state: ItemState, selection: Array<Array<PrimitiveType>>): ItemState;
	    protected _getValidatedSelection(selectionValues: Array<Array<any>>): Array<Array<any>>;
	    protected _extendContentState(content: any): void;
	    protected _hasSelection(): boolean;
	    _isSortingEnabled(): boolean;
	    _isTopNEnabled(dataItem: Dimension): boolean;
	    _getEntireRange(): Array<any>;
	}

}
declare module DevExpress.Dashboard.Internal.Model {

    import PrimitiveType = DevExpress.Dashboard.Data.PrimitiveType;
    import ItemState = DevExpress.Dashboard.Model.ItemState;
    import DimensionFilterValues = DevExpress.Dashboard.Internal.Model.DimensionFilterValues;
    import DateFilterItem = DevExpress.Dashboard.Model.DateFilterItem;
    import DateTimePeriod = DevExpress.Dashboard.Model.DateTimePeriod;
    import RangeFilterItem = DevExpress.Dashboard.Model.RangeFilterItem;
	export class RangeStateController {
	    item: DateFilterItem | RangeFilterItem;
	    readonly defaultDateTimePeriodName: ko.Observable<string>;
	    readonly currentSelectedDateTimePeriodName: ko.Observable<string>;
	    readonly dateTimePeriods: ko.ObservableArray<DateTimePeriod>;
	    readonly _selectionValues: ko.Observable<PrimitiveType[][]>;
	    _getSelectionByPeriod(period: DateTimePeriod): any[][];
	    _setSelection(stateSelection: any): void;
	    constructor(item: DateFilterItem | RangeFilterItem);
	    initialize(): void;
	    setState(itemState: ItemState): void;
	    removeSelectionFromState(state: ItemState): any;
	    setPredefinedPeriodToState(state: ItemState, periodName: string): any;
	    setSelectionToState(state: ItemState, selection: Array<Array<PrimitiveType>>): ItemState;
	    extendContentState(content: any): void;
	    _getDisplayFilterValues(limitCount?: number): Array<DimensionFilterValues>;
	}

}
declare module DevExpress.Dashboard.Model {


    import PrimitiveType = DevExpress.Dashboard.Data.PrimitiveType;
    import ItemState = DevExpress.Dashboard.Model.ItemState;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
    import DimensionFilterValues = DevExpress.Dashboard.Internal.Model.DimensionFilterValues;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import ChartSeries = DevExpress.Dashboard.Model.ChartSeries;
    import FilterableDashboardItemInteractivityOptions = DevExpress.Dashboard.Model.FilterableDashboardItemInteractivityOptions;
    import SeriesItem = DevExpress.Dashboard.Model.SeriesItem;
    import DateTimePeriod = DevExpress.Dashboard.Model.DateTimePeriod;
    import RangeStateController = DevExpress.Dashboard.Internal.Model.RangeStateController;
	export class RangeFilterItem extends SeriesItem {
	    static rangeSeriesViewTypesMap: {
	        Line: any;
	        StackedLine: any;
	        FullStackedLine: any;
	        Area: any;
	        StackedArea: any;
	        FullStackedArea: any;
	        Bar: any;
	        StackedBar: any;
	        FullStackedBar: any;
	    };
	    private __argument;
	    argument: ko.Observable<Dimension>;
	    interactivityOptions: FilterableDashboardItemInteractivityOptions;
	    dateTimePeriods: ko.ObservableArray<DateTimePeriod>;
	    series: ko.ObservableArray<ChartSeries>;
	    defaultDateTimePeriodName: ko.Observable<string>;
	    _defaultDateTimePeriodIndexSubscription: ko.Subscription;
	    currentSelectedDateTimePeriodName: ko.Observable<string>;
	    _stateController: RangeStateController;
	    readonly _supportParallelRequests: boolean;
	    constructor(dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    _clearBindings(): void;
	    protected _getInfoCore(): IDashboardSerializationInfo[];
	    protected _getDefaultItemType(): string;
	    protected _getIgnoreMasterFilter(): boolean;
	    protected _getClearMasterFilterSupported(): boolean;
	    protected _getIsMasterFilter(): boolean;
	    protected _getInteractivityDimensionLinks(): DataItemLink[];
	    protected _getCanColorByDimensions(): boolean;
	    protected _getCanColorByMeasures(): boolean;
	    protected _getAreMeasuresColoredByDefault(): boolean;
	    protected _getIsDimensionColoredByDefault(dimension: Dimension): boolean;
	    _getColorizableDataItemsInfo(): Array<{
	        items: Array<DataItemLink>;
	        prefixId: string;
	    }>;
	    _getDefaultCalculationWindowDefinition(): MeasureCalculationWindowDefinition;
	    protected _hasSelection(): boolean;
	    _getSelectionByPeriod(period: DateTimePeriod): any[][];
	    _getDisplayFilterValues(limitCount?: number): Array<DimensionFilterValues>;
	    _getEntireRange(): Array<any>;
	    protected _validateSelectionByData(selection: Array<Array<any>>): void;
	    protected _getValidatedSelection(selectionValues: Array<Array<any>>): Array<Array<any>>;
	    _setState(itemState: ItemState): void;
	    protected _removeSelectionFromState(state: ItemState): ItemState;
	    protected _setPredefinedPeriodToState(state: ItemState, periodName: string): ItemState;
	    protected _setSelectionToState(state: ItemState, selection: Array<Array<PrimitiveType>>): ItemState;
	    protected _extendContentState(content: any): void;
	    _isSortingEnabled(): boolean;
	    _isTopNEnabled(dataItem: Dimension): boolean;
	}

}
declare module DevExpress.Dashboard.Internal.Model {

    import PropertyCategory = DevExpress.Dashboard.Metadata.PropertyCategory;
	export function getCategoryContentName(category: PropertyCategory): string;
	export class PaneContentHolder {
	    private _content;
	    _getContentInfo(category: PropertyCategory): {
	        category: string;
	        content: ko.Observable<any>;
	        requestsInProgress: ko.Observable<number>;
	        needAnotherRequest: boolean;
	    };
	    getContent(category: PropertyCategory): any;
	    valid: ko.Computed<boolean>;
	    isValid(category: PropertyCategory): boolean;
	    isWaitingForContent(category?: PropertyCategory): boolean;
	    getCompatibleCategories(category: PropertyCategory): any;
	    needRequestContentFromServer(category: PropertyCategory): boolean;
	    itemChanged(category?: PropertyCategory): void;
	    beginRequest(category: PropertyCategory): void;
	    endRequest(args: {
	        category?: PropertyCategory;
	        response?: any;
	    }): void;
	}

}
declare module DevExpress.Dashboard.Internal {

    import Notification = DevExpress.Dashboard.Internal.Model.Notification;
	export class NotificationControllerViewModel {
	    private _visible;
	    private _widget;
	    visible: ko.Observable<boolean>;
	    type: ko.Observable<string>;
	    notifications: ko.ObservableArray<Notification>;
	    suspended: ko.Observable<boolean>;
	    displayTime: ko.Computed<number>;
	    onInitialized: (args: any) => void;
	    reset(): void;
	    updateNotification(type: string, title: string, detail?: any): void;
	}

}
declare module DevExpress.Dashboard {
    import ErrorInfo = DevExpress.Dashboard.ErrorInfo;
    import IErrorHandler = DevExpress.Dashboard.Internal.IErrorHandler;
    import NotificationControllerViewModel = DevExpress.Dashboard.Internal.NotificationControllerViewModel;
	export class NotificationController implements IErrorHandler {
	    static _getErrorTextFromResponse(request: JQueryXHR): any;
	    static _getDetailedErrorMessage(errorInfo: ErrorInfo): string;
	    _viewModel: NotificationControllerViewModel;
	    suspended(isSuspended: boolean): void;
	    showState(message: string): void;
	    showSuccess(message: string): void;
	    showError(title: string, errorInfo?: ErrorInfo): void;
	    reset(): void;
	}

}
declare module DevExpress.Dashboard.Internal {

    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import ErrorInfo = DevExpress.Dashboard.ErrorInfo;
    import KnockoutTemplate = DevExpress.Dashboard.KnockoutTemplate;
    import NotificationController = DevExpress.Dashboard.NotificationController;
    import ISize = DevExpress.Dashboard.Internal.ISize;
    import ISizeController = DevExpress.Dashboard.Internal.ISizeController;
	export var KeyCodes: {
	    Esc: number;
	    Delete: number;
	    Z: number;
	    Y: number;
	    S: number;
	};
	export interface IErrorHandler {
	    showError(title: string, errorInfo?: ErrorInfo): any;
	}
	export interface IDashboardUrls {
	    GetDashboardsAction: string;
	    DashboardAction: string;
	}
	export interface IDataSourceUrls {
	    GetDataSourcesAction: string;
	}
	export interface IDataSourceWizardUrls {
	    DataSourceWizardAction: string;
	    GetConnectionStringsAction: string;
	}
	export interface IDataServiceUrls {
	    ConvertItemAction: string;
	    FieldListAction: string;
	    ParameterValuesAction: string;
	    DimensionUniqueValuesAction: string;
	    DimensionFilterItemsAction: string;
	    DimensionFilterStringAction: string;
	    DashboardItemGetAction: string;
	    PerformExportAction: string;
	    GetColoringSchemeAction: string;
	    GetDashboardPaletteAction: string;
	    GetUnderlyingDataAction: string;
	    GetMapShapeFileAction: string;
	    MarkDataSourcesForReloadAction: string;
	    DashboardItemBatchGetAction: string;
	}
	export interface IEndpointCollection {
	    dashboardUrls?: IDashboardUrls;
	    dataSourceUrls?: IDataSourceUrls;
	    dataSourceWizardUrls?: IDataSourceWizardUrls;
	    dataServiceUrls?: IDataServiceUrls;
	}
	export class SingleItemSizeController implements ISizeController {
	    private _element;
	    requestRepaint: any;
	    renderImmediately: boolean;
	    constructor(_element: Element, requestRepaint: any);
	    getWidth(): number;
	    getHeight(): number;
	    setConstraints(constraints: {
	        min: ISize;
	        max: ISize;
	    }): void;
	}
	export class SingleTabItemSizeController implements ISizeController {
	    requestRepaint: any;
	    width: ko.Observable<number>;
	    height: ko.Observable<number>;
	    renderImmediately: boolean;
	    constructor(requestRepaint: any, width: ko.Observable<number>, height: ko.Observable<number>);
	    getWidth(): number;
	    getHeight(): number;
	    setConstraints(constraints: {
	        min: ISize;
	        max: ISize;
	    }): void;
	}
	export interface IDashboardLayout {
	    fullscreenItemProvider: IFullscreenItemProvider;
	    visibleItemsProvider: VisibleItemsProvider;
	}
	export interface IFullscreenItemProvider {
	    maximizedItemName: string;
	    maximizeItem(dashboardItem: DashboardItem): any;
	    restoreDownItem(): any;
	}
	export interface VisibleItemsProvider {
	    visibleItems: ko.Subscribable<DashboardItem[]>;
	}
	export interface ILayoutBinder {
	    name: string;
	    getData: () => ko.Subscribable<IDashboardLayout>;
	    condition: () => boolean;
	}
	export interface IDashboardControlViewModel {
	    getWidgetContainer: () => HTMLElement;
	    surfaceLeft: ko.Subscribable<number>;
	    colorSchemeCss: string;
	    isLoading: ko.Subscribable<boolean>;
	    isDashboardLoaded: ko.Subscribable<boolean>;
	    layoutTemplate: ko.Observable<{
	        name: string;
	        data: ko.Subscribable<IDashboardLayout>;
	    }>;
	    externalTemplates: ko.Subscribable<Array<KnockoutTemplate>>;
	    emptyControlTemplates: ko.ObservableArray<KnockoutTemplate>;
	    notificationController: NotificationController;
	    $unwrap: (element: Element | JQuery) => Element;
	    $: any;
	    ko: any;
	}

}
declare module DevExpress.Dashboard.Internal {
    import IDisposable = DevExpress.Dashboard.Model.IDisposable;
	export class DashboardEvent<TArgs> {
	    private handlers;
	    add(handler: {
	        (args?: TArgs): void;
	    }): IDisposable;
	    remove(handler: {
	        (args?: TArgs): void;
	    }): void;
	    fire(args?: TArgs): void;
	}

}
declare module DevExpress.Dashboard.Internal {

    import IDisposable = DevExpress.Dashboard.Model.IDisposable;
    import PropertyCategory = DevExpress.Dashboard.Metadata.PropertyCategory;
	export class ModelSubscriber implements IDisposable {
	    private _model;
	    private static dxSubscription;
	    private static dxSubscriptionSuspend;
	    static changePropertyQuietly(property: any, func: () => any): void;
	    private handlers;
	    constructor(_model: DevExpress.Analytics.Utils.ISerializableModel);
	    private _unsubscribe;
	    private _subscribe;
	    _propertyChanged(category: PropertyCategory, model: any, propertyName: string, status: PropertyChangedStatus): void;
	    registerHandler(handler: (category: PropertyCategory, model?: any, propertyName?: string, status?: PropertyChangedStatus) => void): void;
	    private _isPropertySerializeModel;
	    dispose(): void;
	}
	export type PropertyChangedStatus = 'added' | 'deleted' | 'changed' | 'unknown';

}
declare module DevExpress.Dashboard.Internal {


    import ColorSchemeEntry = DevExpress.Dashboard.Model.ColorSchemeEntry;
    import DataSource = DevExpress.Dashboard.Model.DataSource;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import IDisposable = DevExpress.Dashboard.Model.IDisposable;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import PropertyCategory = DevExpress.Dashboard.Metadata.PropertyCategory;
    import ModelSubscriber = DevExpress.Dashboard.Internal.ModelSubscriber;
    import PropertyChangedStatus = DevExpress.Dashboard.Internal.PropertyChangedStatus;
	export class ItemChangeSubscriber extends DisposableObject {
	    dashboardItem: DashboardItem;
	    constructor(dashboardItem: DashboardItem, itemChanged: (category: PropertyCategory) => void);
	}
	export abstract class ComponentArraySubscriber extends DisposableObject {
	    private _items;
	    private _propertyUniqueName;
	    private _subscribers;
	    constructor(_items: ko.ObservableArray<DevExpress.Analytics.Utils.ISerializableModel>, _propertyUniqueName?: string);
	    protected itemAdded(item: DevExpress.Analytics.Utils.ISerializableModel): void;
	    protected itemDeleted(item: DevExpress.Analytics.Utils.ISerializableModel): void;
	    protected abstract createSubscriber(item: DevExpress.Analytics.Utils.ISerializableModel): IDisposable;
	    protected _subscribe(item: DevExpress.Analytics.Utils.ISerializableModel): void;
	    protected _unsubscribe(item: DevExpress.Analytics.Utils.ISerializableModel): void;
	    dispose(): void;
	}
	export interface ISubscriberOptions {
	    itemAdded?: (item: any) => void;
	    itemDeleted?: (item: any) => void;
	    itemChanged: (item: any, changeCategory: PropertyCategory) => void;
	}
	export class ItemsChangeSubscriber extends ComponentArraySubscriber {
	    private _options;
	    constructor(items: ko.ObservableArray<DashboardItem>, _options: ISubscriberOptions);
	    protected itemAdded(item: any): void;
	    protected itemDeleted(item: any): void;
	    protected createSubscriber(item: DashboardItem): ItemChangeSubscriber;
	}
	export class ColorSchemeSubscriber extends ComponentArraySubscriber {
	    private _changed;
	    constructor(entries: ko.ObservableArray<ColorSchemeEntry>, _changed: () => void);
	    protected createSubscriber(item: any): ModelSubscriber;
	    protected itemAdded(item: any): void;
	    protected itemDeleted(item: any): void;
	}
	export class DataSourcesSubscriber extends ComponentArraySubscriber {
	    private _onDataSourceChanged;
	    constructor(dataSources: ko.ObservableArray<DataSource>, _onDataSourceChanged: (args: DataSourceChangedEventArgs) => void);
	    protected createSubscriber(dataSource: DevExpress.Analytics.Utils.ISerializableModel): ModelSubscriber;
	    protected itemAdded(dataSource: DevExpress.Analytics.Utils.ISerializableModel): void;
	    protected itemDeleted(dataSource: DevExpress.Analytics.Utils.ISerializableModel): void;
	}
	export interface DataSourceChangedEventArgs {
	    dataSource: DataSource;
	    propertyName?: string;
	    model?: any;
	    status: PropertyChangedStatus;
	    queryName?: string;
	    fieldName?: string;
	}
	export interface DashboardItemChangedEventArgs {
	    item: DashboardItem;
	    category: PropertyCategory;
	}

}
declare module DevExpress.Dashboard.Internal {
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import PropertyCategory = DevExpress.Dashboard.Metadata.PropertyCategory;
    import DataRequestOptions = DevExpress.Dashboard.DataRequestOptions;
    import VisibleItemsProvider = DevExpress.Dashboard.Internal.VisibleItemsProvider;
    import DashboardEvent = DevExpress.Dashboard.Internal.DashboardEvent;
    import DashboardItemChangedEventArgs = DevExpress.Dashboard.Internal.DashboardItemChangedEventArgs;
    import DataSourceChangedEventArgs = DevExpress.Dashboard.Internal.DataSourceChangedEventArgs;
	interface UpdateHubCallbacks {
	    getItemData: (item: DashboardItem) => JQueryPromise<{}>;
	    getBatchItemData: (items: DashboardItem[]) => JQueryPromise<{}>;
	    getMapShapeFile: (item: DashboardItem) => JQueryPromise<{}>;
	}
	export class DashboardUpdateHub extends DisposableObject {
	    private _dashboard;
	    private _dataRequestOptions;
	    private _callBacks;
	    private _visibleItemsProvider?;
	    private _timer;
	    private _requestQueue;
	    private _suspendItem;
	    private _isUpdating;
	    private _dequeueRequest;
	    private _enqueueRequest;
	    _getDataRequestPriority(dashboardItem: DashboardItem): 0 | 1 | 2;
	    _getRequestLockingMasterFilterItems(dashboardItem: DashboardItem): DashboardItem[];
	    private _resolveItems;
	    private _processItemChanged;
	    private _itemChanged;
	    private _resolveItemsDeffered;
	    initializeItem: (item: DashboardItem) => void;
	    constructor(_dashboard: Dashboard, _dataRequestOptions: DataRequestOptions, _callBacks: UpdateHubCallbacks, _visibleItemsProvider?: VisibleItemsProvider);
	    _getItemData: (item: DashboardItem) => JQueryPromise<any>;
	    _performServerRequest(item: DashboardItem, category: any): JQueryPromise<any>;
	    refreshItems(itemsNames: Array<string>): void;
	    reloadAllItems(caterory: PropertyCategory): void;
	    reloadGlobalColoredItems(caterory: PropertyCategory): void;
	    initialize(): void;
	    itemBeginUpdate: (itemName: string) => void;
	    itemEndUpdate: (itemName: string) => void;
	    dashboardBeginUpdate: () => void;
	    dashboardEndUpdate: () => void;
	    dataSourcePropertyChanged: DashboardEvent<DataSourceChangedEventArgs>;
	    dashboardItemPropertyChanged: DashboardEvent<DashboardItemChangedEventArgs>;
	    dispose(): void;
	}
	export {};

}
declare module DevExpress.Dashboard.Internal {
	export type EventSubscriber<TEvents> = <K extends Extract<keyof TEvents, string>>(eventName: K, eventHandler: (ev: TEvents[K]) => any) => void;
	export class OptionsManager<TOptions extends Object, TEvents extends Object> {
	    events: EventManager<TEvents>;
	    options: TOptions;
	    initialize(_defaultOptions: TOptions, options: TOptions, extension: {
	        on: EventSubscriber<TEvents>;
	        off: EventSubscriber<TEvents>;
	    }): void;
	    dispose(): void;
	}
	export class EventManager<TEvents> {
	    dispose(): void;
	    private _handlers;
	    raise<K extends Extract<keyof TEvents, string>>(eventName: K, eventArgs: TEvents[K]): void;
	    on: EventSubscriber<TEvents>;
	    off: EventSubscriber<TEvents>;
	}

}
declare module DevExpress.Dashboard {
    import AjaxRemoteServiceOptions = DevExpress.Dashboard.AjaxRemoteServiceOptions;
    import IRemoteService = DevExpress.Dashboard.IRemoteService;
	export class AjaxRemoteService implements IRemoteService {
	    beforeSend: (jqXHR: JQueryXHR, settings: JQueryAjaxSettings) => any;
	    complete?: (jqXHR: JQueryXHR, textStatus: string) => any;
	    headers: {
	        [key: string]: any;
	    };
	    constructor(options?: AjaxRemoteServiceOptions);
	    getFromServer(url: string, data?: Object, queryOptions?: JQueryAjaxSettings): JQueryXHR;
	    postToServer(url: string, data?: Object): JQueryXHR;
	    performPostback(url: string, args: string): void;
	}

}
declare module DevExpress.Dashboard.Internal {
	export const resources: {
	    "SvgResources": string;
	    "HtmlResources": string;
	};

}
declare module DevExpress.Dashboard {
	export class ResourceManager {
	    static embedBundledResources(): void;
	    static removeEmbeddedResources(): void;
	    static setLocalizationMessages(localizationMessages: {
	        [localizationStringId: string]: string;
	    }): void;
	    static registerIcon(icon: string): void;
	}

}
declare module DevExpress.Dashboard.Internal {

	export interface IResizableModel {
	    width: ko.Subscribable<number>;
	    height: ko.Subscribable<number>;
	    isValidWidth?: (width: number) => boolean;
	    isValidHeight?: (width: number) => boolean;
	    resizeHandles: () => string;
	    resizeStarted?: () => void;
	    resizeCompleted?: () => void;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
	export let dashboardSelectionMode: {
	    none: string;
	    single: string;
	    multiple: string;
	};
	export let interactivityController: any;

}
declare module DevExpress.Dashboard {
import dxElement = DevExpress.core.dxElement;
	export interface DashboardTitleToolbarOptions {
	    contentItems: Array<ViewerToolbarItem>;
	    actionItems: Array<ViewerToolbarItem>;
	    navigationItems: Array<ViewerToolbarItem>;
	}
	export interface DashboardItemCaptionToolbarOptions {
	    actionItems: Array<ViewerToolbarItem>;
	    staticItems: Array<ViewerToolbarItem>;
	    stateItems: Array<ViewerToolbarItem>;
	    navigationItems: Array<ViewerToolbarItem>;
	}
	export interface ViewerToolbarItem {
	    type?: 'button' | 'menu' | 'text';
	    text?: string;
	    icon?: string;
	    name?: string;
	    checked?: boolean;
	    disabled?: boolean;
	    menu?: ViewerToolbarItemMenu;
	    tooltip?: ViewerToolbarItemTooltip | string;
	    hint?: string;
	    template?: () => JQuery | Element | string;
	    click?: (element: dxElement) => void;
	}
	export interface ViewerToolbarItemTooltip {
	    className?: string;
	    template?: (contentElement: dxElement) => JQuery | Element | string;
	}
	export interface ViewerToolbarItemMenu {
	    type: 'list' | 'icons';
	    title?: string;
	    items?: Array<string>;
	    selectionMode?: 'none' | 'single' | 'multiple';
	    selectedItems?: Array<string>;
	    columnCount?: number;
	    itemClick?: (itemData: Object, itemElement: dxElement, itemIndex: number) => void;
	    itemTemplate?: (itemData: Object, itemElement: dxElement, itemIndex: number) => JQuery | Element | string;
	}
	export let dashboardToolbarItemNames: {
	    titleFilterText: string;
	    titleFilterIcon: string;
	    exportMenu: string;
	    dashboardTitleImage: string;
	    dashboardTitle: string;
	    parameters: string;
	    itemCaption: string;
	    limitVisibleData: string;
	    clearMasterFilter: string;
	    clearSelection: string;
	    drillUp: string;
	    values: string;
	    multiselection: string;
	    initialExtent: string;
	    dateTimePeriodMenu: string;
	    customDateTimePeriod: string;
	    dashboardList: string;
	    dashboardFilters: string;
	    backButton: string;
	    itemFilters: string;
	    restoreItem: string;
	    maximizeItem: string;
	    dataInspector: string;
	};

}
declare module DevExpress.Dashboard.Internal.Data {
	export class GridBarCalculator {
	    _valueItems: Array<any>;
	    _alwaysShowZeroLevel: any;
	    _initialized: boolean;
	    _normalizedValues: any;
	    _zeroPosition: any;
	    _range: any;
	    _min: any;
	    _max: any;
	    _normalizationData: any;
	    constructor(showZeroLevel: any);
	    addValue(valueItem: any): void;
	    getNormalizedValue(index: any): any;
	    getZeroPosition(): any;
	    _invalidate(): void;
	    _normalizeValue(value: any): number;
	    _calcMinMax(): void;
	    _calcRange(): void;
	    _calcZeroPosition(): void;
	    _calcNormalizationData(): void;
	    _initialize(): void;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
	export interface CellValue {
	    getValue: () => any;
	    getData: () => any;
	    getStyleSettingsInfo: () => any;
	}
	export interface DimensionCellValue extends CellValue {
	    getUniqueValue: () => any;
	}
	export interface HyperlinkCellValue extends DimensionCellValue {
	    getUriValue: () => any;
	}
	export class gridDataController extends dataControllerBase {
	    private _axisColumnPoints;
	    private _axisSparklinePoints;
	    private _columnRepository;
	    private _selectionMembers;
	    constructor(options: any);
	    getDataSource(): {
	        store: {
	            type: string;
	            data: any[];
	            key: string;
	        };
	    };
	    getValueItem(columnName: any, rowIndex?: any): any;
	    private _getValueItem;
	    getSelectionValues(values: any): any[];
	    getSelectedRowKeys(valuesSet: any): any[];
	    getDimensionValues(rowIndex: any): any;
	    getTotalValue(measureId: any): any;
	    private _getBarCellValue;
	    private _getBarData;
	    private _getMeasureCellValue;
	    private _getCellValue;
	    private _getStyleSettingsInfo;
	    protected _getStyleIndexes(rule: any, cellInfo: any, points: any): any[];
	    private _getAxisPoint;
	    private _getDeltaValue;
	    private _getDeltaValueItem;
	    private _getSparklineCellValues;
	    private _getColumnAxisPoint;
	    private _getPointArray;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
	export let localizationId: {
	    FilterElementShowAllItem: string;
	    DateTimeQuarterFormat: string;
	    buttonNames: {
	        [key: string]: "DashboardStringId.ActionClearMasterFilter" | "DashboardStringId.ActionClearSelection" | "DashboardStringId.ActionOtherValues" | "DashboardStringId.ActionDrillUp" | "DashboardStringId.ActionExportTo" | "DashboardStringId.ActionExportToPdf" | "DashboardStringId.ActionExportToImage" | "DashboardStringId.ActionExportToExcel" | "DashboardStringId.RangeFilterCustomDateTimePeriod" | "DashboardStringId.ActionExportTemplate" | "DashboardStringId.ActionAllowMultiselection" | "DashboardStringId.DashboardNullValue" | "DashboardStringId.TopNOthersValue" | "DashboardStringId.DashboardErrorValue" | "DashboardStringId.DateTimeQuarterFormat" | "DashboardStringId.MessageLoading" | "DashboardStringId.ParametersFormCaption" | "DashboardStringId.ParametersSelectorText" | "DashboardStringId.ParametersFormAllowNullColumnCaption" | "DashboardStringId.ParametersFormValueColumnCaption" | "DashboardStringId.ParametersFormNameColumnCaption" | "DashboardStringId.ButtonOK" | "DashboardStringId.ButtonCancel" | "DashboardStringId.SelectDate" | "DashboardStringId.ButtonReset" | "DashboardStringId.ButtonSubmit" | "DashboardStringId.ButtonApply" | "DashboardStringId.ButtonExport" | "DashboardStringId.GridResetColumnWidths" | "DashboardStringId.GridSortAscending" | "DashboardStringId.GridSortDescending" | "DashboardStringId.GridClearSorting" | "DashboardStringId.PivotGridTotal" | "DashboardStringId.PivotGridGrandTotal" | "DashboardStringId.ChartTotalValue" | "DashboardStringId.PageLayout" | "DashboardStringId.PageLayoutAuto" | "DashboardStringId.PageLayoutPortrait" | "DashboardStringId.PageLayoutLandscape" | "DashboardStringId.PaperKind" | "DashboardStringId.PaperKindLetter" | "DashboardStringId.PaperKindLegal" | "DashboardStringId.PaperKindExecutive" | "DashboardStringId.PaperKindA5" | "DashboardStringId.PaperKindA4" | "DashboardStringId.PaperKindA3" | "DashboardStringId.ScaleMode" | "DashboardStringId.ScaleModeNone" | "DashboardStringId.ScaleModeUseScaleFactor" | "DashboardStringId.ScaleModeAutoFitToPagesWidth" | "DashboardStringId.AutoFitPageCount" | "DashboardStringId.ScaleFactor" | "DashboardStringId.PrintHeadersOnEveryPage" | "DashboardStringId.FitToPageWidth" | "DashboardStringId.SizeMode" | "DashboardStringId.SizeModeNone" | "DashboardStringId.SizeModeStretch" | "DashboardStringId.SizeModeZoom" | "DashboardStringId.AutoArrangeContent" | "DashboardStringId.ImageFormat" | "DashboardStringId.ExcelFormat" | "DashboardStringId.CsvValueSeparator" | "DashboardStringId.ExportFilters" | "DashboardStringId.ExportParameters" | "DashboardStringId.DashboardStatePosition" | "DashboardStringId.Resolution" | "DashboardStringId.ShowTitle" | "DashboardStringId.Title" | "DashboardStringId.FileName" | "DashboardStringId.FilterStatePresentationAfter" | "DashboardStringId.FilterStatePresentationAfterAndSplitPage" | "DashboardStringId.FilterStatePresentationSplitSheet" | "DashboardStringId.MessageCustomItemIsNotSupported" | "DashboardStringId.MessageGridHasNoData" | "DashboardStringId.MessagePivotHasNoData" | "DashboardStringId.SparklineTooltipStartValue" | "DashboardStringId.SparklineTooltipEndValue" | "DashboardStringId.SparklineTooltipMinValue" | "DashboardStringId.SparklineTooltipMaxValue" | "DashboardStringId.OpenCaption" | "DashboardStringId.HighCaption" | "DashboardStringId.LowCaption" | "DashboardStringId.CloseCaption" | "DashboardStringId.InitialExtent" | "DashboardStringId.FilterElementShowAllItem" | "DashboardStringId.NumericFormatUnitSymbolThousands" | "DashboardStringId.NumericFormatUnitSymbolMillions" | "DashboardStringId.NumericFormatUnitSymbolBillions" | "DashboardStringId.ActionSelectDateTimePeriod" | "DashboardStringId.RangeFilterSelectRange" | "DashboardStringId.FilterElementCheckedComboBoxNoDataCaption" | "DashboardStringId.FilterElementRadioComboBoxNoDataCaption" | "DashboardStringId.FilterElementNoDataToDisplay" | "DashboardStringId.RangeFilterSelectRangeFromCaption" | "DashboardStringId.RangeFilterSelectRangeToCaption" | "DashboardWebStringId.DashboardParameters" | "DashboardStringId.DataSourceDataMember" | "DashboardStringId.DescriptionMeasures" | "DashboardWebStringId.TextBoxFormatText" | "DashboardStringId.NumericFormatUnitCaption" | "DashboardWebStringId.SummaryType" | "DashboardStringId.CalculationTypeExpression" | "DevExpressWebStringId.CalculatedFieldDataType" | "DashboardStringId.ValueCaption" | "DashboardStringId.Value1Caption" | "DashboardStringId.Value2Caption" | "DashboardStringId.CommandFormatRuleTopBottom" | "DashboardStringId.CommandFormatRuleAboveBelowAverage" | "DashboardStringId.CommandFormatRuleBar" | "DashboardStringId.CommandFormatRuleColorRangeBar" | "DashboardStringId.CommandFormatRuleGradientRangeBar" | "DashboardStringId.FormatRuleStyleAppearance" | "DashboardStringId.FormatRuleStyleIcons" | "DashboardStringId.FormatRuleNegativeStyle" | "DashboardStringId.CommandFormatRuleExpression" | "DashboardWebStringId.TopNMode" | "DashboardStringId.CommandFormatRuleRangeSet" | "DashboardStringId.CommandFormatRuleValue" | "DashboardStringId.CommandFormatRuleDateOccurring" | "DashboardWebStringId.ConditionalFormatting.Appearance.BackColor" | "DashboardWebStringId.ConditionalFormatting.Appearance.ForeColor" | "DashboardStringId.DescriptionBoundImageAttribute" | "DashboardWebStringId.ShowCaptionText" | "DashboardWebStringId.DisplayItemAsPage" | "DashboardStringId.DefaultNameItemGroup" | "DashboardStringId.DefaultNameTabContainerItem" | "DashboardStringId.DefaultDataSourceName" | "DashboardWebStringId.CrossDataSourceFiltering" | "DashboardStringId.RangeFilterCalculationAlongSeries" | "DashboardStringId.RangeFilterCalculationAlongArgument" | "DashboardStringId.DescriptionItemSeries" | "DashboardStringId.DescriptionSeries" | "DashboardWebStringId.Chart.SeriesType" | "DashboardStringId.DescriptionDimensions" | "DashboardWebStringId.TreeView.AutoExpand" | "DashboardWebStringId.ConditionalFormatting.ConditionMinimum" | "DashboardWebStringId.ConditionalFormatting.ConditionMaximum" | "DashboardStringId.DescriptionItemDimension" | "DashboardStringId.DescriptionItemMeasure" | "DashboardWebStringId.Grid.MergeCells" | "DashboardWebStringId.Grid.ColumnWidthMode" | "DashboardWebStringId.Grid.BandedRows" | "DashboardWebStringId.Grid.VerticalLines" | "DashboardWebStringId.Grid.HorizontalLines" | "DashboardWebStringId.Grid.ColumnHeaders" | "DashboardWebStringId.Grid.WordWrap" | "DashboardStringId.ActualValueCaption" | "DashboardStringId.TargetValueCaption" | "DashboardStringId.UriPatternCaption" | "DashboardStringId.UriCaption" | "DashboardStringId.DisplayValueCaption" | "DashboardStringId.WeightCaption" | "DashboardStringId.DescriptionItemColor" | "DashboardStringId.Latitude" | "DashboardStringId.Longitude" | "DashboardWebStringId.GeoPointMapClusterization" | "DashboardWebStringId.MapLockNavigation" | "DashboardWebStringId.WeightedLegendGalleryGroup" | "DashboardStringId.DescriptionItemArgument" | "DashboardWebStringId.PieMapIsWeighted" | "DashboardWebStringId.InteractivityOptions.IgnoreMasterFilters" | "DashboardWebStringId.InteractivityOptions.DrillDown" | "DashboardWebStringId.Pie.ShowCaptions" | "DashboardStringId.DescriptionColumns" | "DashboardStringId.DescriptionRows" | "DashboardStringId.DescriptionValues" | "DashboardStringId.DescriptionArguments" | "DashboardStringId.TextGroupIntervalAlphabetical" | "DashboardStringId.ActionMaximizeDashboardItem" | "DashboardStringId.ActionRestoreDashboardItem" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataSource" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.ValueMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DisplayMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.SortOrder" | "DevExpress.DashboardCommon.DashboardParameter.Visible" | "DevExpress.DashboardCommon.DashboardParameter.Description" | "DevExpress.DashboardCommon.DashboardParameter.AllowMultiselect" | "DevExpress.DashboardCommon.DashboardParameter.AllowNull" | "DevExpress.DashboardCommon.DashboardParameter.SelectAllValues" | "DevExpress.DashboardCommon.StaticListLookUpSettings.Values" | "DevExpress.DashboardCommon.DimensionSortOrder.Ascending" | "DevExpress.DashboardCommon.DimensionSortOrder.Descending" | "DevExpress.DashboardCommon.DimensionSortOrder.None" | "DashboardWebStringId.AccordionTab.ScatterChartPointLabelOptions" | "DashboardWebStringId.AccordionTab.ChoroplethMapShapeLabelsAttribute" | "DashboardStringId.CommandFormatRuleTopN" | "DashboardWebStringId.Type" | "DashboardWebStringId.Grid.ColumnWidth" | "DashboardWebStringId.AccordionTab.ShowTotals" | "DashboardWebStringId.AccordionTab.Layout" | "DashboardWebStringId.AccordionTab.PivotInitialState" | "DashboardWebStringId.AccordionTab.ImageOptions" | "DashboardWebStringId.AccordionTab.Labels" | "DashboardWebStringId.AccordionTab.MapLegend" | "DashboardWebStringId.AccordionTab.WeightedLegend" | "DashboardWebStringId.AccordionTab.Common" | "DashboardWebStringId.AccordionTab.ChartLegend" | "DashboardWebStringId.Grid.AutoFitToContentsColumnWidthMode" | "DashboardWebStringId.Grid.AutoFitToGridColumnWidthMode" | "DashboardWebStringId.Grid.ManualGridColumnWidthMode" | "DashboardStringId.DateTimeIntervalYear" | "DashboardStringId.DateTimeIntervalQuarter" | "DashboardStringId.DateTimeIntervalMonth" | "DashboardStringId.DateTimeIntervalWeek" | "DashboardStringId.DateTimeIntervalDay" | "DashboardStringId.DateTimeIntervalHour" | "DashboardStringId.DateTimeIntervalMinute" | "DashboardStringId.DateTimeIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalYear" | "DashboardStringId.DateTimeGroupIntervalQuarter" | "DashboardStringId.DateTimeGroupIntervalMonth" | "DashboardStringId.DateTimeGroupIntervalDay" | "DashboardStringId.DateTimeGroupIntervalHour" | "DashboardStringId.DateTimeGroupIntervalMinute" | "DashboardStringId.DateTimeGroupIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalDayOfYear" | "DashboardStringId.DateTimeGroupIntervalDayOfWeek" | "DashboardStringId.DateTimeGroupIntervalWeekOfYear" | "DashboardStringId.DateTimeGroupIntervalWeekOfMonth" | "DashboardStringId.DateTimeGroupIntervalMonthYear" | "DashboardStringId.DateTimeGroupIntervalQuarterYear" | "DashboardStringId.DateTimeGroupIntervalWeekYear" | "DashboardStringId.DateTimeGroupIntervalDayMonthYear" | "DashboardStringId.DateTimeGroupIntervalDateHour" | "DashboardStringId.DateTimeGroupIntervalDateHourMinute" | "DashboardStringId.DateTimeGroupIntervalDateHourMinuteSecond" | "DashboardStringId.DateTimeGroupIntervalExactDate" | "DashboardStringId.GroupIntervalNone" | "DashboardWebStringId.Treemap.StripedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SquarifiedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SliceAndDiceLayoutAlgorithm" | "DashboardWebStringId.Treemap.TileLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.TileLabelsNone" | "DashboardWebStringId.Treemap.TileLabelsValue" | "DashboardWebStringId.Treemap.TileLabelsArgument" | "DashboardWebStringId.Treemap.TileTooltipsArgumentAndValue" | "DashboardWebStringId.Treemap.TileTooltipsArgument" | "DashboardWebStringId.Treemap.TileTooltipsValue" | "DashboardWebStringId.Treemap.TileTooltipsNone" | "DashboardWebStringId.Treemap.TopLeftToBottomRightLayoutDirection" | "DashboardWebStringId.Treemap.TopRightToBottomLeftLayoutDirection" | "DashboardWebStringId.Treemap.BottomLeftToTopRightLayoutDirection" | "DashboardWebStringId.Treemap.BottomRightToTopLeftLayoutDirection" | "DashboardWebStringId.Treemap.LayoutDirection" | "DashboardWebStringId.Treemap.GroupLabelsNone" | "DashboardWebStringId.Treemap.GroupLabelsArgument" | "DashboardWebStringId.Treemap.GroupLabelsValue" | "DashboardWebStringId.Treemap.GroupLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.GroupTooltipsNone" | "DashboardWebStringId.Treemap.GroupTooltipsArgument" | "DashboardWebStringId.Treemap.GroupTooltipsValue" | "DashboardWebStringId.Treemap.GroupTooltipsArgumentAndValue" | "DashboardStringId.RankOrderAscending" | "DashboardStringId.RankOrderDescending" | "DashboardStringId.DateTimeFormatYearFormatDefaultCaption" | "DashboardStringId.DateTimeFormatYearFormatFullCaption" | "DashboardStringId.DateTimeFormatYearFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatQuarterFormatDefaultCaption" | "DashboardStringId.DateTimeFormatQuarterFormatNumericCaption" | "DashboardStringId.DateTimeFormatQuarterFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatDefaultCaption" | "DashboardStringId.DateTimeFormatMonthFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatMonthFormatNumericCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatFullCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatNumericCaption" | "DashboardStringId.DateTimeFormatDateFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateFormatLongCaption" | "DashboardStringId.DateTimeFormatDateFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatLongCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption" | "DashboardStringId.ExactDateFormatYear" | "DashboardStringId.ExactDateFormatQuarter" | "DashboardStringId.ExactDateFormatMonth" | "DashboardStringId.ExactDateFormatDay" | "DashboardStringId.ExactDateFormatHour" | "DashboardStringId.ExactDateFormatMinute" | "DashboardStringId.ExactDateFormatSecond" | "DashboardWebStringId.FormatType" | "DashboardWebStringId.TopN.Top" | "DashboardWebStringId.TopN.Bottom" | "DashboardWebStringId.DimensionSortBy" | "DashboardStringId.NumericFormatUnitAutoCaption" | "DashboardStringId.NumericFormatFormatTypeAutoCaption" | "DashboardStringId.NumericFormatFormatTypeGeneralCaption" | "DashboardStringId.NumericFormatFormatTypeNumberCaption" | "DashboardStringId.NumericFormatFormatTypeCurrencyCaption" | "DashboardStringId.NumericFormatFormatTypeScientificCaption" | "DashboardStringId.NumericFormatFormatTypePercentCaption" | "DashboardStringId.NumericFormatUnitOnesCaption" | "DashboardStringId.NumericFormatUnitThousandsCaption" | "DashboardStringId.NumericFormatUnitMillionsCaption" | "DashboardStringId.NumericFormatUnitBillionsCaption" | "DashboardStringId.DeltaValueTypeActualValueCaption" | "DashboardStringId.DeltaValueTypeAbsoluteVariationCaption" | "DashboardStringId.DeltaValueTypePercentVariationCaption" | "DashboardStringId.DeltaValueTypePercentOfTargetCaption" | "DashboardStringId.DeltaValueTypeTargetValueCaption" | "DashboardStringId.DeltaIndicationModeGreaterIsGoodCaption" | "DashboardStringId.DeltaIndicationModeLessIsGoodCaption" | "DashboardStringId.DeltaIndicationModeWarningIfGreaterCaption" | "DashboardStringId.DeltaIndicationModeWarningIfLessCaption" | "DashboardStringId.DeltaIndicationModeNoIndicationCaption" | "DashboardStringId.DeltaThresholdTypeAbsolute" | "DashboardStringId.DeltaThresholdTypePercent" | "DashboardStringId.CommandDimensionGroupChildValues" | "DashboardStringId.SeriesTypeBar" | "DashboardStringId.SeriesTypeStackedBar" | "DashboardStringId.SeriesTypeFullStackedBar" | "DashboardStringId.SeriesTypePoint" | "DashboardStringId.SeriesTypeLine" | "DashboardStringId.SeriesTypeStackedLine" | "DashboardStringId.SeriesTypeFullStackedLine" | "DashboardStringId.SeriesTypeStepLine" | "DashboardStringId.SeriesTypeSpline" | "DashboardStringId.SeriesTypeArea" | "DashboardStringId.SeriesTypeStackedArea" | "DashboardStringId.SeriesTypeFullStackedArea" | "DashboardStringId.SeriesTypeStepArea" | "DashboardStringId.SeriesTypeSplineArea" | "DashboardStringId.SeriesTypeStackedSplineArea" | "DashboardStringId.SeriesTypeFullStackedSplineArea" | "DashboardWebStringId.Chart.ShowLegend" | "DashboardStringId.DefaultNameBoundImageItem" | "DashboardStringId.DefaultNameImageItem" | "DashboardStringId.DefaultNameTextBoxItem" | "DashboardStringId.DefaultNameCardItem" | "DashboardStringId.DefaultNameChartItem" | "DashboardStringId.DefaultNameComboBoxItem" | "DashboardStringId.DefaultNameListBoxItem" | "DashboardStringId.DefaultNameTreeViewItem" | "DashboardStringId.DefaultNameGaugeItem" | "DashboardStringId.DefaultNameGridItem" | "DashboardStringId.GridHyperlinkUriPatternErrorMessage" | "DashboardWebStringId.DefaultNameBubbleMapItem" | "DashboardWebStringId.DefaultNameChoroplethMapItem" | "DashboardWebStringId.DefaultNameGeoPointMapItem" | "DashboardWebStringId.DefaultNamePieMapItem" | "DashboardStringId.DefaultNamePieItem" | "DashboardStringId.DefaultNamePivotItem" | "DashboardStringId.DefaultNameRangeFilterItem" | "DashboardStringId.DefaultNameScatterChartItem" | "DashboardStringId.DefaultNameTreemapItem" | "DashboardStringId.DescriptionMaps" | "DashboardStringId.EntireRangePeriodCaption" | "DashboardStringId.CalculationTypePercentOfTotal" | "DashboardStringId.CalculationTypeDifference" | "DashboardStringId.CalculationTypePercentageDifference" | "DashboardStringId.CalculationTypeRunningTotal" | "DashboardStringId.CalculationTypeMovingCalculation" | "DashboardStringId.CalculationTypeRank" | "DashboardStringId.ColorPaletteIndex" | "DashboardStringId.DifferenceCalculationTargetPrevious" | "DashboardStringId.DifferenceCalculationTargetNext" | "DashboardStringId.DifferenceCalculationTargetFirst" | "DashboardStringId.DifferenceCalculationTargetLast" | "DashboardStringId.SummaryTypeCount" | "DashboardStringId.SummaryTypeSum" | "DashboardStringId.SummaryTypeMin" | "DashboardStringId.SummaryTypeMax" | "DashboardStringId.SummaryTypeAverage" | "DashboardStringId.SummaryTypeStdDev" | "DashboardStringId.SummaryTypeStdDevp" | "DashboardStringId.SummaryTypeVar" | "DashboardStringId.SummaryTypeVarp" | "DashboardStringId.SummaryTypeCountDistinct" | "DashboardStringId.SummaryTypeMedian" | "DashboardStringId.SummaryTypeMode" | "DashboardStringId.RankTypeUnique" | "DashboardStringId.RankTypeCompetition" | "DashboardStringId.RankTypeDense" | "DashboardStringId.RankTypeModified" | "DashboardStringId.RankTypePercentile" | "DashboardStringId.CardCalculationAlongCards" | "DashboardStringId.CardCalculationAlongSparklineArgument" | "DashboardStringId.CardCalculationAlongCardsAndSparklineArgument" | "DashboardStringId.CardCalculationAlongSparklineArgumentAndCards" | "DashboardStringId.ChartCalculationAlongArguments" | "DashboardStringId.ChartCalculationAlongSeries" | "DashboardStringId.ChartCalculationAlongArgumentsAndSeries" | "DashboardStringId.ChartCalculationAlongSeriesAndArguments" | "DashboardStringId.GridCalculationAlongRows" | "DashboardStringId.GridCalculationAlongSparklineArgument" | "DashboardStringId.GridCalculationAlongRowsAndSparklineArgument" | "DashboardStringId.GridCalculationAlongSparklineArgumentAndRows" | "DashboardStringId.PivotCalculationAlongColumns" | "DashboardStringId.PivotCalculationAlongRows" | "DashboardStringId.PivotCalculationAlongColumnsAndRows" | "DashboardStringId.PivotCalculationAlongRowsAndColumns" | "DashboardStringId.PivotCalculationAlongGroupsInColumns" | "DashboardStringId.PivotCalculationAlongGroupsInRows" | "DashboardStringId.PivotCalculationAlongGroupsInColumnsAndRows" | "DashboardStringId.PivotCalculationAlongGroupsInRowsAndColumns" | "DashboardStringId.PieCalculationAlongArguments" | "DashboardStringId.PieCalculationAlongSeries" | "DashboardStringId.PieCalculationAlongArgumentsAndSeries" | "DashboardStringId.PieCalculationAlongSeriesAndArguments" | "DashboardStringId.RangeFilterCalculationAlongArgumentAndSeries" | "DashboardStringId.RangeFilterCalculationAlongSeriesAndArgument" | "DashboardStringId.GaugeCalculationAlongGauges" | "DashboardStringId.ScatterCalculationAlongArguments" | "DashboardStringId.CalculationAlongSpecificDimensions" | "DashboardStringId.CalculatedFieldTypeString" | "DashboardStringId.CalculatedFieldTypeLong" | "DashboardStringId.CalculatedFieldTypeDecimal" | "DashboardStringId.CalculatedFieldTypeBoolean" | "DashboardStringId.CalculatedFieldTypeDateTime" | "DashboardStringId.CalculatedFieldTypeDouble" | "DashboardStringId.CalculatedFieldTypeAuto" | "DashboardStringId.CalculatedFieldTypeObject" | "DashboardStringId.DefaultEFDataSourceName" | "DashboardStringId.DefaultExcelDataSourceName" | "DashboardStringId.DefaultFileExtractDataSourceName" | "DashboardStringId.DefaultObjectDataSourceName" | "DashboardStringId.DefaultOlapDataSourceName" | "DashboardStringId.DefaultSqlDataSourceName" | "DashboardStringId.DefaultJsonDataSourceName" | "DashboardStringId.DefaultXpoDataSourceName" | "DashboardStringId.OlapRaggedHierarchyNoneItemCaption" | "DashboardStringId.FormatRuleApplyToColumn" | "DashboardStringId.SeriesTypeSideBySideRangeBar" | "DashboardStringId.SeriesTypeRangeArea" | "DashboardStringId.SeriesTypeHighLowClose" | "DashboardStringId.SeriesTypeCandleStick" | "DashboardStringId.SeriesTypeStock" | "DashboardWebStringId.StyleSettings" | "DashboardStringId.ParametersFormCalendarTodayButton" | "DashboardStringId.TreemapLabelArgumentTemplate" | "DashboardStringId.TreemapLabelValueTemplate" | "DashboardStringId.SearchNullValuePrompt" | "DashboardStringId.CustomItems" | "DashboardStringId.FormatRuleAllowNegativeAxis" | "DashboardStringId.FormatRuleDrawAxis" | "DashboardStringId.FormatRuleShowBarOnly" | "DashboardStringId.CommandFormatRuleBottomN" | "DashboardStringId.FormatConditionAppearanceNone" | "DashboardStringId.FormatConditionAppearanceCustom" | "DashboardStringId.FormatConditionAppearancePaleRed" | "DashboardStringId.FormatConditionAppearancePaleYellow" | "DashboardStringId.FormatConditionAppearancePaleGreen" | "DashboardStringId.FormatConditionAppearancePaleBlue" | "DashboardStringId.FormatConditionAppearancePalePurple" | "DashboardStringId.FormatConditionAppearancePaleCyan" | "DashboardStringId.FormatConditionAppearancePaleOrange" | "DashboardStringId.FormatConditionAppearancePaleGray" | "DashboardStringId.FormatConditionAppearanceRed" | "DashboardStringId.FormatConditionAppearanceYellow" | "DashboardStringId.FormatConditionAppearanceGreen" | "DashboardStringId.FormatConditionAppearanceBlue" | "DashboardStringId.FormatConditionAppearancePurple" | "DashboardStringId.FormatConditionAppearanceCyan" | "DashboardStringId.FormatConditionAppearanceOrange" | "DashboardStringId.FormatConditionAppearanceGray" | "DashboardStringId.FormatConditionAppearanceGradientRed" | "DashboardStringId.FormatConditionAppearanceGradientYellow" | "DashboardStringId.FormatConditionAppearanceGradientGreen" | "DashboardStringId.FormatConditionAppearanceGradientBlue" | "DashboardStringId.FormatConditionAppearanceGradientPurple" | "DashboardStringId.FormatConditionAppearanceGradientCyan" | "DashboardStringId.FormatConditionAppearanceGradientOrange" | "DashboardStringId.FormatConditionAppearanceGradientTransparent" | "DashboardStringId.FormatConditionAppearanceFontBold" | "DashboardStringId.FormatConditionAppearanceFontItalic" | "DashboardStringId.FormatConditionAppearanceFontUnderline" | "DashboardStringId.FormatConditionAppearanceFontGrayed" | "DashboardStringId.FormatConditionAppearanceFontRed" | "DashboardStringId.FormatConditionAppearanceFontYellow" | "DashboardStringId.FormatConditionAppearanceFontGreen" | "DashboardStringId.FormatConditionAppearanceFontBlue" | "DashboardStringId.IntersectionLevelModeFirst" | "DashboardStringId.IntersectionLevelModeLast" | "DashboardStringId.IntersectionLevelModeAuto" | "DashboardStringId.IntersectionLevelModeAll" | "DashboardStringId.IntersectionLevelModeSpecific" | "DashboardStringId.FormatRuleApplyToRow" | "DashboardStringId.FormatRuleApplyTo" | "DashboardWebStringId.FilterItem.AllowEmptyFilter" | "DashboardStringId.FormatConditionAppearanceFontStrikeout" | "DashboardStringId.FormatConditionAutomaticValueType" | "DashboardStringId.FormatConditionNumberValueType" | "DashboardStringId.FormatConditionPercentValueType" | "DashboardStringId.CommandFormatRuleRangeIcons" | "DashboardStringId.CommandFormatRuleGreaterThan" | "DashboardStringId.CommandFormatRuleGreaterThanOrEqualTo" | "DashboardStringId.CommandFormatRuleLessThan" | "DashboardStringId.CommandFormatRuleLessThanOrEqualTo" | "DashboardStringId.CommandFormatRuleEqualTo" | "DashboardStringId.CommandFormatRuleNotEqualTo" | "DashboardStringId.CommandFormatRuleBetween" | "DashboardStringId.CommandFormatRuleNotBetween" | "DashboardStringId.CommandFormatRuleBetweenOrEqual" | "DashboardStringId.CommandFormatRuleNotBetweenOrEqual" | "DashboardStringId.CommandFormatRuleContains" | "DashboardStringId.ColorAutoAssigned" | "DashboardStringId.CalculationTypeNone" | "DashboardStringId.UndoText" | "DashboardStringId.RedoText" | "DashboardStringId.DashboardCurrencyUseCurrentCurrency" | "DashboardStringId.CommandDimensionSortModeDisplayText" | "DashboardStringId.CommandDimensionSortModeValue" | "DashboardStringId.CommandDimensionSortModeID" | "DashboardStringId.CommandDimensionSortModeKey" | "DashboardWebStringId.Chart.AddPane" | "DashboardStringId.MapShapeNoneAttribute" | "DashboardStringId.DefaultPeriodName" | "DashboardStringId.CardLayoutTemplateStretchedCaption" | "DashboardStringId.CardLayoutTemplateCenteredCaption" | "DashboardStringId.CardLayoutTemplateCompactCaption" | "DashboardStringId.CardLayoutTemplateLightweightCaption" | "DashboardStringId.CardLayoutTemplateCustomCaption" | "DashboardStringId.CardLayoutTemplateNoneCaption" | "DashboardStringId.CardRowDataElementTypeTitleCaption" | "DashboardStringId.CardRowDataElementTypeSubtitleCaption" | "DashboardStringId.CardRowDataElementTypeActualValueCaption" | "DashboardStringId.CardRowDataElementTypeTargetValueCaption" | "DashboardStringId.CardRowDataElementTypeAbsoluteVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentOfTargetCaption" | "DashboardStringId.CardRowDataElementTypeDimensionValueCaption" | "DashboardStringId.CardRowDataElementTypeCardNameCaption" | "DashboardStringId.CardRowDataElementTypeDeltaIndicatorCaption" | "DashboardStringId.CardRowDataElementTypeSparklineCaption" | "DashboardStringId.FormatRuleApplyToAllElements" | "DashboardWebStringId.Pie.LabelPosition" | "DashboardWebStringId.Pie.LabelPositionOutside" | "DashboardWebStringId.Pie.LabelPositionInside" | "DashboardStringId.IncludeExportDashboardState" | "DashboardStringId.PointLabelContentTypeArgument" | "DashboardStringId.PointLabelContentTypeSeriesName" | "DashboardStringId.PointLabelContentTypeValue" | "DashboardStringId.PointLabelContentTypePercent" | "DashboardWebStringId.DashboardMenu" | "DashboardWebStringId.DashboardMenuNew" | "DashboardWebStringId.DashboardMenuOpen" | "DashboardWebStringId.DashboardMenuSave" | "DashboardWebStringId.DashboardMenuCurrency" | "DashboardWebStringId.DashboardMenuDataSources" | "DashboardWebStringId.DashboardMenuColorScheme" | "DashboardWebStringId.DashboardMenuNewDashboardCreate" | "DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder" | "DashboardWebStringId.Binding.DefaultEmptyPlaceholder" | "DashboardWebStringId.Binding.DefaultSelectedPlaceholder" | "DashboardWebStringId.Binding.DataFiltering" | "DashboardWebStringId.Binding.Argument" | "DashboardWebStringId.Binding.Attribute" | "DashboardWebStringId.Binding.Sparkline" | "DashboardWebStringId.Binding.Columns" | "DashboardWebStringId.Binding.TooltipDimensions" | "DashboardWebStringId.Binding.TooltipMeasures" | "DashboardWebStringId.Binding.HiddenDimensions" | "DashboardWebStringId.Binding.HiddenMeasures" | "DashboardWebStringId.Binding.AddDimension" | "DashboardWebStringId.Binding.AddMeasure" | "DashboardWebStringId.Binding.AddColumn" | "DashboardWebStringId.Binding.AddRow" | "DashboardWebStringId.Binding.AddValue" | "DashboardWebStringId.Binding.AddSeries" | "DashboardWebStringId.Binding.SetLatitude" | "DashboardWebStringId.Binding.SetLongitude" | "DashboardWebStringId.Binding.SetArgument" | "DashboardWebStringId.Binding.AddArgument" | "DashboardWebStringId.Binding.SetWeight" | "DashboardWebStringId.Binding.SetColor" | "DashboardWebStringId.Binding.SetAttribute" | "DashboardWebStringId.Binding.SetValue" | "DashboardWebStringId.Binding.XAxis" | "DashboardWebStringId.Binding.YAxis" | "DashboardWebStringId.Binding.ConfigureDimension" | "DashboardWebStringId.Binding.ConfigureMeasure" | "DashboardWebStringId.Binding.ConfigureSeries" | "DashboardWebStringId.Binding.ConfigureArgument" | "DashboardWebStringId.Binding.ConfigureValue" | "DashboardWebStringId.Binding.ConfigureAttribute" | "DashboardWebStringId.Binding.ConfigureLatitude" | "DashboardWebStringId.Binding.ConfigureLongitude" | "DashboardWebStringId.Binding.ConfigureColumn" | "DashboardWebStringId.Binding.ConfigureRow" | "DashboardWebStringId.Binding.ConfigureWeight" | "DashboardWebStringId.Binding.ConfigureColor" | "DashboardWebStringId.Binding.ShowAll" | "DashboardWebStringId.ColorScheme.Color" | "DashboardWebStringId.ColorScheme.Colors" | "DashboardWebStringId.Parameters.ParameterList" | "DashboardWebStringId.Parameters.AddParameter" | "DashboardWebStringId.Parameters.AddParameter.Tooltip" | "DashboardWebStringId.Parameters.NoSelectedParameter" | "DashboardWebStringId.Parameters.Reorder" | "DashboardWebStringId.Parameters.Done" | "DashboardWebStringId.Currency.Currency" | "DashboardWebStringId.Currency.CurrencyCulture" | "DashboardWebStringId.Currency.DefaultCurrencyWarning" | "DashboardWebStringId.Preview" | "DashboardWebStringId.Add" | "DashboardWebStringId.DataSources.UsedDataSources" | "DashboardWebStringId.DataSources.DataItems" | "DashboardWebStringId.DataSources.AddQuery" | "DashboardWebStringId.DataSources.AddCalculatedField" | "DashboardWebStringId.DataSources.AddDataSource" | "DashboardWebStringId.DataSources.NoUsedDataSources" | "DashboardWebStringId.DataSources.NoAvailableDataSources" | "DashboardWebStringId.DataSources.ChooseDataSource" | "DashboardWebStringId.DataSources.CreateDataSource" | "DashboardWebStringId.DataSources.CreateNewDataSource" | "DashboardWebStringId.DataSources.CreateDataSource.Tooltip" | "DashboardWebStringId.DataSources.EditCalculatedField" | "DashboardWebStringId.DataSources.CalculatedField.Name" | "DashboardWebStringId.DataSources.CalculatedField.FieldType" | "DashboardWebStringId.DataSources.CalculatedField.UniqueNameError" | "DashboardWebStringId.DataSources.CalculatedField.Corrupted" | "DashboardWebStringId.DataSources.Edit" | "DashboardStringId.MessageCollectionTypesNotSupported" | "DashboardWebStringId.New.DashboardName" | "DashboardWebStringId.Bindings" | "DashboardWebStringId.Interactivity" | "DashboardWebStringId.Options" | "DashboardWebStringId.Remove" | "DashboardWebStringId.MasterFilterMode" | "DashboardWebStringId.Title.Text" | "DashboardWebStringId.Title.Visible" | "DashboardWebStringId.Title.IncludeMasterFilter" | "DashboardWebStringId.Title.Aligment" | "DashboardWebStringId.Title.Image" | "DashboardWebStringId.DataSources.Cancel" | "DashboardWebStringId.DataSources.IncludeToTheDashboard" | "DashboardWebStringId.DataSources.AvailableDataSourcesError" | "DashboardWebStringId.DataSources.DashboardDataSourceWizard" | "DashboardWebStringId.Viewer" | "DashboardWebStringId.Loading" | "DashboardWebStringId.ClickHereInvitation" | "DashboardWebStringId.BindDataInvitation" | "DashboardWebStringId.AddItemInvitation" | "DashboardWebStringId.Parameters.Values" | "DashboardWebStringId.Binding.Cards" | "DashboardWebStringId.Binding.AddCard" | "DashboardWebStringId.Binding.ConfigureCard" | "DashboardWebStringId.Binding.AddValues" | "DashboardWebStringId.Binding.ConfigureValues" | "DashboardWebStringId.Binding.Maps" | "DashboardWebStringId.Binding.AddMap" | "DashboardWebStringId.Binding.ConfigureMap" | "DashboardWebStringId.Binding.Gauges" | "DashboardWebStringId.Binding.AddGauge" | "DashboardWebStringId.Binding.ConfigureGauge" | "DashboardWebStringId.InteractivityOptions" | "DashboardWebStringId.Binding.Values" | "DashboardWebStringId.Binding.RemovePane" | "DashboardWebStringId.ClickToSetFilterCriteria" | "DashboardWebStringId.DataSources.OK" | "DashboardWebStringId.DataSources.Save" | "DashboardWebStringId.Cards.ArrangementMode" | "DashboardWebStringId.Cards.ArrangementMode.Auto" | "DashboardWebStringId.Cards.ArrangementMode.FixedRows" | "DashboardWebStringId.Cards.ArrangementMode.FixedColumns" | "DashboardWebStringId.Cards.LineCount" | "DashboardWebStringId.ConditionalFormatting" | "DashboardWebStringId.CollectionEditor.NoItems" | "DashboardWebStringId.CollectionEditor.Totals.NoItems" | "DashboardWebStringId.CollectionEditor.Parameters.NoItems" | "DashboardWebStringId.PivotGrid.AutoExpandColumnGroups" | "DashboardWebStringId.PivotGrid.AutoExpandRowGroups" | "DashboardWebStringId.PivotGrid.ColumnGrandTotals" | "DashboardWebStringId.PivotGrid.RowGrandTotals" | "DashboardWebStringId.PivotGrid.ColumnTotals" | "DashboardWebStringId.PivotGrid.RowTotals" | "DashboardWebStringId.PivotGrid.ValuesPosition" | "DashboardWebStringId.PivotGrid.ValuesPositionColumns" | "DashboardWebStringId.PivotGrid.ValuesPositionRows" | "DashboardWebStringId.PivotGrid.RowTotalsPosition" | "DashboardWebStringId.PivotGrid.RowTotalsPositionBottom" | "DashboardWebStringId.PivotGrid.RowTotalsPositionTop" | "DashboardWebStringId.PivotGrid.ColumnTotalsPosition" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionFar" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionNear" | "DashboardWebStringId.PivotGrid.LayoutType" | "DashboardWebStringId.PivotGrid.LayoutTypeCompact" | "DashboardWebStringId.PivotGrid.LayoutTypeTabular" | "DashboardWebStringId.Options.Caption" | "DashboardWebStringId.InteractivityOptions.IsMasterFilter" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.None" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Single" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Multiple" | "DashboardWebStringId.InteractivityOptions.TargetDimensions" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Arguments" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Series" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Points" | "DashboardWebStringId.ColoringOptions" | "DashboardWebStringId.DataSources.Filter" | "DashboardWebStringId.Chart.Rotated" | "DashboardWebStringId.Chart.Panes" | "DashboardWebStringId.Chart.Legend" | "DashboardWebStringId.Chart.AxisX" | "DashboardWebStringId.Chart.AxisY" | "DashboardWebStringId.Chart.AxisYSecondary" | "DashboardWebStringId.Chart.PointLabelOptions" | "DashboardWebStringId.Chart.AxisXMeasure" | "DashboardWebStringId.Chart.AxisYMeasure" | "DashboardWebStringId.Chart.Weight" | "DashboardWebStringId.Chart.Content" | "DashboardWebStringId.Chart.ArgumentAndWeight" | "DashboardWebStringId.Chart.ArgumentAndValues" | "DashboardWebStringId.Chart.Reverse" | "DashboardWebStringId.Chart.Visible" | "DashboardWebStringId.Chart.Title" | "DashboardWebStringId.Chart.TitleText" | "DashboardWebStringId.Chart.EnableZooming" | "DashboardWebStringId.Chart.LimitVisiblePoints" | "DashboardWebStringId.Chart.VisiblePointsCount" | "DashboardWebStringId.Chart.AlwaysShowZeroLevel" | "DashboardWebStringId.Chart.GridLines" | "DashboardWebStringId.Chart.LogarithmicScale" | "DashboardWebStringId.Chart.LogarithmicScaleBase" | "DashboardWebStringId.Chart.LogarithmicScaleBase2" | "DashboardWebStringId.Chart.LogarithmicScaleBase5" | "DashboardWebStringId.Chart.LogarithmicScaleBase10" | "DashboardWebStringId.Chart.Position" | "DashboardWebStringId.Chart.IsInsideOfDiagram" | "DashboardWebStringId.Chart.PrimaryAxisY" | "DashboardWebStringId.Chart.SecondaryAxisY" | "DashboardWebStringId.Chart.Name" | "DashboardWebStringId.Chart.PlotOnSecondaryAxis" | "DashboardWebStringId.Chart.IgnoreEmptyPoints" | "DashboardWebStringId.Chart.ShowPointMarkers" | "DashboardWebStringId.Chart.Value" | "DashboardWebStringId.Chart.ShowZeroValues" | "DashboardWebStringId.Chart.OverlappingMode" | "DashboardWebStringId.Chart.Orientation" | "DashboardWebStringId.Chart.ShowPointLablels" | "DashboardWebStringId.Chart.TooltipContent" | "DashboardWebStringId.Chart.LabelContent" | "DashboardWebStringId.Card.SparklineOptions" | "DashboardWebStringId.Card.SparklineVisible" | "DashboardWebStringId.Chart.Position.TopLeftVertical" | "DashboardWebStringId.Chart.Position.TopLeftHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterHorizontal" | "DashboardWebStringId.Chart.Position.TopRightVertical" | "DashboardWebStringId.Chart.Position.TopRightHorizontal" | "DashboardWebStringId.Chart.Position.BottomLeftVertical" | "DashboardWebStringId.Chart.Position.BottomLeftHorizontal" | "DashboardWebStringId.Chart.Position.BottomCenterHorizontal" | "DashboardWebStringId.Chart.Position.BottomRightVertical" | "DashboardWebStringId.Chart.Position.BottomRightHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterVertical" | "DashboardWebStringId.Chart.Position.BottomCenterVertical" | "DashboardWebStringId.FilterItem.Type" | "DashboardWebStringId.FilterItem.Type.Standard" | "DashboardWebStringId.FilterItem.Type.Checked" | "DashboardWebStringId.FilterItem.Type.Radio" | "DashboardWebStringId.FilterItem.ShowAllValue" | "DashboardWebStringId.FilterItem.EnableSearch" | "DashboardWebStringId.Gauge.Min" | "DashboardWebStringId.Gauge.Max" | "DashboardWebStringId.Gauge.ScaleOptions" | "DashboardWebStringId.Gauge.Type" | "DashboardWebStringId.Gauge.Type.FullQuarterGauge" | "DashboardWebStringId.Gauge.Type.HalfCircular" | "DashboardWebStringId.Gauge.Type.LeftQuarterCircular" | "DashboardWebStringId.Gauge.Type.RightQuarterCircular" | "DashboardWebStringId.Gauge.Type.ThreeFourthCircular" | "DashboardWebStringId.Gauge.Type.LinearHorizontal" | "DashboardWebStringId.Gauge.Type.LinearVertical" | "DashboardWebStringId.Gauge.Captions" | "DashboardWebStringId.Gauge.Scale.Custom" | "DashboardWebStringId.Gauge.Scale.Auto" | "DashboardWebStringId.Grid.ColumnType" | "DashboardWebStringId.Grid.DisplayMode" | "DashboardWebStringId.Grid.DisplayMode.Value" | "DashboardWebStringId.Grid.DisplayMode.Bar" | "DashboardWebStringId.Grid.DisplayMode.Text" | "DashboardWebStringId.Grid.DisplayMode.Image" | "DashboardWebStringId.Grid.FixedWidth" | "DashboardWebStringId.Grid.WidthType" | "DashboardWebStringId.Grid.WidthType.Weight" | "DashboardWebStringId.Grid.WidthType.FitToContent" | "DashboardWebStringId.Grid.DeltaOptions" | "DashboardWebStringId.Grid.ShowStartEndValues" | "DashboardWebStringId.Grid.TotalType" | "DashboardWebStringId.Grid.Dimension" | "DashboardWebStringId.Grid.Measure" | "DashboardWebStringId.Grid.Delta" | "DashboardWebStringId.Grid.Sparkline" | "DashboardWebStringId.Grid.Hyperlink" | "DashboardWebStringId.Grid.Options" | "DashboardWebStringId.Map.ShapeFileLoaded" | "DashboardWebStringId.Map.AttributeFileLoaded" | "DashboardWebStringId.Map.ValueMap" | "DashboardWebStringId.Map.DeltaMap" | "DashboardWebStringId.Map.TooltipCaption" | "DashboardWebStringId.Map.TooltipActualValueCaption" | "DashboardWebStringId.Map.TooltipDeltaCaption" | "DashboardWebStringId.Map.CustomMapOptions" | "DashboardWebStringId.Map.CustomMapOptionsSource" | "DashboardWebStringId.Map.CustomMapOptionsUrl" | "DashboardWebStringId.Map.CustomMapOptionsFile" | "DashboardWebStringId.Map.CustomMapUrl" | "DashboardWebStringId.Map.CustomMapFile" | "DashboardWebStringId.Map.CustomAttributeFile" | "DashboardWebStringId.Map.AttributeDimension" | "DashboardWebStringId.Map.IncludeSummaryValueToShapeTitle" | "DashboardWebStringId.Map.AttributeName" | "DashboardWebStringId.Map.TooltipAttribute" | "DashboardWebStringId.Map.TooltipDimensions" | "DashboardWebStringId.Map.Area.Custom" | "DashboardWebStringId.Map.Area.WorldCountries" | "DashboardWebStringId.Map.Area.Europe" | "DashboardWebStringId.Map.Area.Asia" | "DashboardWebStringId.Map.Area.NorthAmerica" | "DashboardWebStringId.Map.Area.SouthAmerica" | "DashboardWebStringId.Map.Area.Africa" | "DashboardWebStringId.Map.Area.USA" | "DashboardWebStringId.Map.Area.Canada" | "DashboardWebStringId.Map.Viewport" | "DashboardWebStringId.Map.ShapeTitleAttribute" | "DashboardWebStringId.Map.UseBindingAttribute" | "DashboardWebStringId.Map.WeightedLegendType" | "DashboardWebStringId.Map.WeightedLegendType.Linear" | "DashboardWebStringId.Map.WeightedLegendType.Nested" | "DashboardWebStringId.Map.Orientation.Vertical" | "DashboardWebStringId.Map.Orientation.Horizontal" | "DashboardWebStringId.Map.Position.TopLeft" | "DashboardWebStringId.Map.Position.TopCenter" | "DashboardWebStringId.Map.Position.TopRight" | "DashboardWebStringId.Map.Position.BottomLeft" | "DashboardWebStringId.Map.Position.BottomCenter" | "DashboardWebStringId.Map.Position.BottomRight" | "DashboardWebStringId.Map.Viewport.TopLatitude" | "DashboardWebStringId.Map.Viewport.LeftLongitude" | "DashboardWebStringId.Map.Viewport.RightLongitude" | "DashboardWebStringId.Map.Viewport.BottomLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLongitude" | "DashboardWebStringId.Map.Viewport.CreateViewerPaddings" | "DashboardWebStringId.Map.ShowLegend" | "DashboardWebStringId.Pie.Type" | "DashboardWebStringId.Pie" | "DashboardWebStringId.Pie.Donut" | "DashboardWebStringId.Pie.LabelContentType.None" | "DashboardWebStringId.Pie.LabelContentType.Argument" | "DashboardWebStringId.Pie.LabelContentType.Percent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndPercent" | "DashboardWebStringId.Pie.LabelContentType.Value" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndValue" | "DashboardWebStringId.Pie.LabelContentType.ValueAndPercent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentValueAndPercent" | "DashboardWebStringId.Image.BindingMode" | "DashboardWebStringId.Image.BindingMode.BinaryArray" | "DashboardWebStringId.Image.BindingMode.Uri" | "DashboardWebStringId.RangeFilter.UriPattern" | "DashboardWebStringId.Image.SizeMode.Clip" | "DashboardWebStringId.Image.SizeMode.Stretch" | "DashboardWebStringId.Image.SizeMode.Zoom" | "DashboardWebStringId.Image.SizeMode.Squeeze" | "DashboardWebStringId.Image.HorizontalAlignment" | "DashboardWebStringId.Image.VerticalAlignment" | "DashboardWebStringId.Image.Alignment.Left" | "DashboardWebStringId.Image.Alignment.Center" | "DashboardWebStringId.Image.Alignment.Right" | "DashboardWebStringId.Image.Alignment.Top" | "DashboardWebStringId.Image.Alignment.Bottom" | "DashboardWebStringId.SeriesItem.SeriesDimensions" | "DashboardWebStringId.TextBox.Text" | "DashboardWebStringId.Chart.Orientation.Default" | "DashboardWebStringId.Chart.Orientation.RotateRight" | "DashboardWebStringId.Chart.Orientation.RotateLeft" | "DashboardWebStringId.Chart.OverlappingMode.Hide" | "DashboardWebStringId.Chart.OverlappingMode.None" | "DashboardWebStringId.Chart.Position.Outside" | "DashboardWebStringId.Chart.Position.Inside" | "DashboardWebStringId.Chart.SeriesType.Weighted" | "DashboardWebStringId.Coloring.MeasuresColoringMode" | "DashboardWebStringId.Coloring.Global" | "DashboardWebStringId.Coloring.Local" | "DashboardWebStringId.Delta.ValueType" | "DashboardWebStringId.Delta.ResultIndication" | "DashboardWebStringId.Delta.ThresholdType" | "DashboardWebStringId.Delta.ThresholdValue" | "DashboardWebStringId.Sparkline.ViewType" | "DashboardWebStringId.Sparkline.HighlightMinMaxPoints" | "DashboardWebStringId.Sparkline.HighlightStartEndPoints" | "DashboardWebStringId.Title.Aligment.Left" | "DashboardWebStringId.Title.Aligment.Center" | "DashboardWebStringId.Parameters.LookUpSettingsType.NoLookUp" | "DashboardWebStringId.Parameters.LookUpSettingsType.StaticList" | "DashboardWebStringId.Parameters.LookUpSettingsType.DynamicList" | "DashboardWebStringId.Parameters.LookUpSettingsType" | "DashboardWebStringId.Parameters.DefaultValue" | "DashboardWebStringId.DataItem" | "DashboardWebStringId.DataItem.Precision" | "DashboardWebStringId.DataItem.IncludeGroupSeparator" | "DashboardWebStringId.DataItem.ShowValues" | "DashboardWebStringId.DataItem.ShowTotals" | "DashboardWebStringId.DataItem.ShowGrandTotals" | "DashboardWebStringId.Dialog.ConfirmSaving" | "DashboardWebStringId.Dimension.GroupInterval" | "DashboardWebStringId.Dimension.SortMode" | "DashboardWebStringId.Dialog.ArgumentMode" | "DashboardWebStringId.Calculations" | "DashboardWebStringId.Calculations.Expression" | "DashboardWebStringId.Calculations.DifferenceCalculation" | "DashboardWebStringId.Calculations.Moving" | "DashboardWebStringId.Calculations.RunningTotal" | "DashboardWebStringId.Calculations.PercentOfTotal" | "DashboardWebStringId.Calculations.Rank" | "DashboardWebStringId.Calculations.DefinitionMode" | "DashboardWebStringId.Calculations.WindowDefinition" | "DashboardWebStringId.Calculations.WindowDefinitionModeSpecific" | "DashboardWebStringId.Calculations.WindowDefinitionModePredefined" | "DashboardWebStringId.Calculations.DifferenceType" | "DashboardWebStringId.TreemapLayoutAlgorithm" | "DashboardWebStringId.TilesLabelContentType" | "DashboardWebStringId.TilesTooltipContentType" | "DashboardWebStringId.GroupsLabelContentType" | "DashboardWebStringId.GroupsTooltipContentType" | "DashboardWebStringId.ShowOthersValue" | "DashboardWebStringId.TopNEnabled" | "DashboardWebStringId.Parameters.StaticListLookUpSettings" | "DashboardWebStringId.Parameters.DynamicListLookUpSettings" | "DashboardWebStringId.ConvertTo" | "DashboardWebStringId.Duplicate" | "DashboardWebStringId.DataSourceWizard" | "DashboardWebStringId.RangeFilter.CustomPeriods" | "DashboardWebStringId.RangeFilter.StartMode" | "DashboardWebStringId.RangeFilter.EndMode" | "DashboardWebStringId.RangeFilter.StartIntervalAndOffset" | "DashboardWebStringId.RangeFilter.EndIntervalAndOffset" | "DashboardWebStringId.RangeFilter.StartDate" | "DashboardWebStringId.RangeFilter.EndDate" | "DashboardWebStringId.RangeFilter.None" | "DashboardWebStringId.RangeFilter.Fixed" | "DashboardWebStringId.RangeFilter.Flow" | "DashboardWebStringId.Tabs.Binding" | "DashboardWebStringId.Tabs.DataShaping" | "DashboardWebStringId.Tabs.Format" | "DashboardWebStringId.Calculations.Types.Moving" | "DashboardWebStringId.Parameters.SortByMember" | "DashboardWebStringId.Parameters.LookUpSettingsTypeCaption" | "DashboardWebStringId.Dashboard.Items" | "DashboardWebStringId.Dashboard.Groups" | "DashboardWebStringId.Dashboard.LayoutItems" | "DashboardWebStringId.Dashboard.ComponentName" | "DashboardWebStringId.ButtonConfirm" | "DashboardWebStringId.Colorization.GroupInterval" | "DashboardWebStringId.ButtonOn" | "DashboardWebStringId.ButtonOff" | "DashboardWebStringId.ButtonYes" | "DashboardWebStringId.ButtonNo" | "DashboardWebStringId.ButtonDiscrete" | "DashboardWebStringId.ButtonContinuous" | "DashboardWebStringId.ButtonVisible" | "DashboardWebStringId.ButtonHidden" | "DashboardWebStringId.Calculations.PreviousValuesCount" | "DashboardWebStringId.Calculations.NextValuesCount" | "DashboardWebStringId.Calculations.RankType" | "DashboardWebStringId.Calculations.RankOrder" | "DashboardWebStringId.TileOptions" | "DashboardWebStringId.MapLockNavigationLocked" | "DashboardWebStringId.MapLockNavigationUnlocked" | "DashboardWebStringId.ConditionalFormatting.BarOptions" | "DashboardWebStringId.ConditionalFormatting.CalculatedBy" | "DashboardWebStringId.ConditionalFormatting.IconType" | "DashboardWebStringId.ConditionalFormatting.PredefinedColor" | "DashboardWebStringId.ConditionalFormatting.AppearanceType" | "DashboardWebStringId.ConditionalFormatting.FontStyle" | "DashboardWebStringId.ConditionalFormatting.FontFamily" | "DashboardWebStringId.ConditionalFormatting.FontRegular" | "DashboardWebStringId.ConditionalFormatting.IconType.None" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowSideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGraySideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDash" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedTriangleDown" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenTriangleUp" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingHalfGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1QuarterGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1Bar" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1FilledBox" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTriangle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedDiamond" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedFlag" | "DashboardWebStringId.ConditionalFormatting.IntersectionColumnDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionRowDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionLevelMode" | "DashboardWebStringId.ConditionalFormatting.GradientRangeBar" | "DashboardWebStringId.ConditionalFormatting.RangeGradient" | "DashboardWebStringId.ConditionalFormatting.SegmentNumber" | "DashboardWebStringId.ConditionalFormatting.ValueComparison" | "DashboardWebStringId.ConditionalFormatting.Ranges" | "DashboardWebStringId.ConditionalFormatting.AverageType" | "DashboardWebStringId.ConditionalFormatting.Above" | "DashboardWebStringId.ConditionalFormatting.AboveOrEqual" | "DashboardWebStringId.ConditionalFormatting.Below" | "DashboardWebStringId.ConditionalFormatting.BelowOrEqual" | "DashboardWebStringId.ConditionalFormatting.StyleSettingsType" | "DashboardWebStringId.ConditionalFormatting.Positive" | "DashboardWebStringId.ConditionalFormatting.Negative" | "DashboardWebStringId.ConditionalFormatting.MinimumType" | "DashboardWebStringId.ConditionalFormatting.MaximumType" | "DashboardWebStringId.ConditionalFormatting.DateType" | "DashboardWebStringId.ConditionalFormatting.DateType.None" | "DashboardWebStringId.ConditionalFormatting.DateType.SpecificDate" | "DashboardWebStringId.ConditionalFormatting.DateType.BeyondThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.NextWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.Tomorrow" | "DashboardWebStringId.ConditionalFormatting.DateType.Today" | "DashboardWebStringId.ConditionalFormatting.DateType.Yesterday" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.LastWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.PriorThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.Empty" | "DashboardWebStringId.ConditionalFormatting.DateType.User" | "DashboardWebStringId.ConditionalFormatting.DateType.Beyond" | "DashboardWebStringId.ConditionalFormatting.DateType.ThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.ThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAfter1" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAfter2" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo1" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo2" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo3" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo4" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo5" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo6" | "DashboardWebStringId.ConditionalFormatting.DateType.Earlier" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeDataItem" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeCard" | "DashboardWebStringId.Colorization.NoSelectedSchema" | "DashboardWebStringId.Colorization.ColorSchemes" | "DashboardWebStringId.LayoutHasBeenChangedDialogMessage" | "DashboardWebStringId.SaveConfirmationDialogMessage" | "DashboardWebStringId.SaveChangesDialogMessage" | "DashboardWebStringId.Dialog.ChangeDataMemberMessage" | "DashboardWebStringId.Dialog.RemovedDataItemsMessage" | "DashboardWebStringId.Dialog.ConfirmChanges" | "DashboardWebStringId.Dialog.Save" | "DashboardWebStringId.Dialog.DoNotSave" | "DashboardWebStringId.Dialog.ButtonYes" | "DashboardWebStringId.Dialog.ButtonDontChange" | "DashboardWebStringId.Colorization.ColorSchemeType" | "DashboardWebStringId.Colorization.MeasureNames" | "DashboardWebStringId.Colorization.AddColor" | "DashboardWebStringId.Colorization.ValidationSelectMeasure" | "DashboardWebStringId.ColoringModeAuto" | "DashboardWebStringId.ColoringModeOff" | "DashboardWebStringId.ColoringModeOn" | "DashboardWebStringId.ColorScheme.Empty" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButton" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip" | "DashboardWebStringId.ConditionalFormatting.Miscellaneous" | "DashboardWebStringId.Dashboards" | "DashboardWebStringId.EditInDesigner" | "DashboardWebStringId.NoDashboards" | "DashboardWebStringId.AddNewDashboard" | "DashboardWebStringId.NewDashboard" | "DashboardWebStringId.Binding.Searching" | "DashboardWebStringId.Binding.EmptySearchResult" | "DashboardWebStringId.Errors.AttemptToLoadData" | "DashboardWebStringId.ConditionType" | "DashboardWebStringId.ConditionalFormatting.UnsupportedDataType" | "DashboardWebStringId.FormatRule" | "DashboardWebStringId.Notification.DashboardSaving" | "DashboardWebStringId.Notification.DashboardSaved" | "DashboardWebStringId.Notification.DashboardCanNotBeSaved" | "DashboardWebStringId.Notification.DashboardSavingIsNotAvailable" | "DashboardWebStringId.Notification.AttemptToLoadDashboards" | "DashboardWebStringId.Notification.DashboardLoading" | "DashboardWebStringId.Notification.AttemptToLoadDashboard" | "DashboardWebStringId.Notification.AttemptToConnectionStrings" | "DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode" | "DashboardWebStringId.Notification.AttemptToLoadParameterValues" | "DashboardWebStringId.Notification.AttemptToGetUnderlyingData" | "DashboardWebStringId.Notification.AttemptToConvertItemToType" | "DashboardWebStringId.Notification.AttemptToLoadDimensionUniqueValues" | "DashboardWebStringId.Notification.AttemptToLoadFieldListForDataSource" | "DashboardWebStringId.Notification.AttemptToGetColorScheme" | "DashboardWebStringId.Notification.NewDashboardCannotBeCreated" | "DashboardWebStringId.Notification.ErrorHasOccuredOn" | "DashboardWebStringId.Notification.UnsupportedDataSourceType" | "DashboardWebStringId.LimitVisibleData.DisplayAllDataTooltip" | "DashboardWebStringId.LimitVisibleData.IncreasePerformanceTooltip" | "DashboardWebStringId.ConditionalFormatting.Condition" | "DashboardWebStringId.CardLayout.MinWidth" | "DashboardWebStringId.CardLayout.MaxWidth" | "DashboardWebStringId.CardLayout.Editor.CardLayout" | "DashboardWebStringId.CardLayout.Editor.FormatOptions" | "DashboardWebStringId.CardLayout.LayoutOptions" | "DashboardWebStringId.CardLayout.ResetTemplate" | "DashboardWebStringId.CardLayout.ApplyToAllCards" | "DashboardWebStringId.Binding.ValuesPattern" | "DashboardWebStringId.Parameters.ParameterNameShouldBeUnique" | "DashboardWebStringId.Title.ImageEmbedded" | "DashboardWebStringId.Title.ImageLinked" | "DashboardWebStringId.Title.ImageNone" | "DashboardWebStringId.RangeFilter.SetDefaultCustomPeriod" | "DashboardWebStringId.RangeFilter.ClearDefaultCustomPeriod" | "DashboardWebStringId.MobileLayout.Back" | "DashboardWebStringId.MobileLayout.SwitchToViewer" | "DashboardWebStringId.Search" | "DashboardStringId.DefaultNameTabPage" | "DashboardStringId.DefaultNameChartPane" | "DashboardStringId.NewCalculatedFieldNamePrefix" | "DashboardStringId.NewParameterNamePrefix" | "AnalyticsCoreStringId.Parameter_Type_String" | "AnalyticsCoreStringId.Parameter_Type_DateTime" | "AnalyticsCoreStringId.Parameter_Type_Int16" | "AnalyticsCoreStringId.Parameter_Type_Int32" | "AnalyticsCoreStringId.Parameter_Type_Int64" | "AnalyticsCoreStringId.Parameter_Type_Float" | "AnalyticsCoreStringId.Parameter_Type_Double" | "AnalyticsCoreStringId.Parameter_Type_Decimal" | "AnalyticsCoreStringId.Parameter_Type_Boolean" | "AnalyticsCoreStringId.Parameter_Type_Guid" | "AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption" | "DataAccessUIStringId.FiltersView" | "DashboardStringId.SeriesTypeGroupArea" | "DashboardStringId.SeriesTypeGroupBar" | "DashboardStringId.SeriesTypeGroupBubble" | "DashboardStringId.SeriesTypeGroupFinancial" | "DashboardStringId.SeriesTypeGroupPointLine" | "DashboardStringId.SeriesTypeGroupRange" | "DashboardStringId.FunctionCategoryWindow" | "DashboardStringId.FunctionCategoryAggregate" | "DashboardStringId.FunctionCategoryAdvanced" | "DashboardStringId.FunctionDescriptionWindowAvg" | "DashboardStringId.FunctionDescriptionRunningMin" | "DashboardStringId.FunctionDescriptionTotal" | "DashboardStringId.FunctionDescriptionRankCompetition" | "DashboardStringId.FunctionDescriptionLookup" | "DashboardStringId.FunctionDescriptionRunningCount" | "DashboardStringId.FunctionDescriptionWindowMax" | "DashboardStringId.FunctionDescriptionVarp" | "DashboardStringId.FunctionDescriptionRunningAvg" | "DashboardStringId.FunctionDescriptionFirst" | "DashboardStringId.FunctionDescriptionWindowMin" | "DashboardStringId.FunctionDescriptionWindowStdDev" | "DashboardStringId.FunctionDescriptionLast" | "DashboardStringId.FunctionDescriptionWindowCount" | "DashboardStringId.FunctionDescriptionCountDistinct" | "DashboardStringId.FunctionDescriptionIndex" | "DashboardStringId.FunctionDescriptionWindowStdDevp" | "DashboardStringId.FunctionDescriptionWindowMode" | "DashboardStringId.FunctionDescriptionRunningMax" | "DashboardStringId.FunctionDescriptionRankPercentile" | "DashboardStringId.FunctionDescriptionRankDense" | "DashboardStringId.FunctionDescriptionWindowSum" | "DashboardStringId.FunctionDescriptionWindowCountDistinct" | "DashboardStringId.FunctionDescriptionStdDevp" | "DashboardStringId.FunctionDescriptionSize" | "DashboardStringId.FunctionDescriptionMedian" | "DashboardStringId.FunctionDescriptionRankModified" | "DashboardStringId.FunctionDescriptionWindowMedian" | "DashboardStringId.FunctionDescriptionRunningSum" | "DashboardStringId.FunctionDescriptionWindowVarp" | "DashboardStringId.FunctionDescriptionWindowVar" | "DashboardStringId.FunctionDescriptionStdDev" | "DashboardStringId.FunctionDescriptionRankUnique" | "DashboardStringId.FunctionDescriptionVar" | "DashboardStringId.FunctionDescriptionAggr" | "DashboardStringId.FunctionDescriptionAggrJoinRule" | "DashboardStringId.FunctionDescriptionWindowDefinition" | "DashboardStringId.FunctionDescriptionWindowDefinitionPartitionBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderAsc" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderDesc" | "DashboardStringId.AggregateExFunctionDescriptionCountNotNull" | "DashboardStringId.AggregateExFunctionDescriptionMode" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHour" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinute" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinuteSecond" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateMonthYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear2" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateQuarterYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetQuarter" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfMonth" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime3" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime4" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime5" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime6" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToBoolean" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToDateTime" | "DashboardStringId.SparklineIndicationModeLine" | "DashboardStringId.SparklineIndicationModeArea" | "DashboardStringId.SparklineIndicationModeBar" | "DashboardStringId.SparklineIndicationModeWinLoss" | "DashboardStringId.DefaultNameDateFilterItem" | "DashboardWebStringId.DateFilter.FilterType" | "DashboardWebStringId.DateFilter.FilterTypeExact" | "DashboardWebStringId.DateFilter.FilterTypeAfter" | "DashboardWebStringId.DateFilter.FilterTypeBefore" | "DashboardWebStringId.DateFilter.FilterTypeBetween" | "DashboardWebStringId.DateFilter.ArrangementMode" | "DashboardWebStringId.DateFilter.ArrangementModeAutoHeight" | "DashboardWebStringId.DateFilter.ArrangementModeHorizontal" | "DashboardWebStringId.DateFilter.ArrangementModeVertical" | "DashboardWebStringId.DateFilter.DatePickerLocation" | "DashboardWebStringId.DateFilter.DatePickerLocationFar" | "DashboardWebStringId.DateFilter.DatePickerLocationNear" | "DashboardWebStringId.DateFilter.DatePickerLocationHidden" | "DashboardStringId.DateFilterDisplayTextPattern" | "DashboardStringId.DateFilterDatePickerButtonDefaultText" | "DashboardStringId.FromDatePeriodCaption" | "DashboardStringId.ToDatePeriodCaption" | "DashboardStringId.FromToDatePeriodCaption" | "DashboardStringId.UniqueNameValidationMessage" | "DashboardStringId.GridTotalAutoTemplate" | "DashboardStringId.GridTotalValueTemplate" | "DashboardStringId.GridTotalTemplate" | "DashboardStringId.GridTotalTypeCount" | "DashboardStringId.GridTotalTypeMin" | "DashboardStringId.GridTotalTypeMax" | "DashboardStringId.GridTotalTypeAvg" | "DashboardStringId.GridTotalTypeSum" | "DashboardStringId.ActionShowDataInspector" | "DashboardStringId.InspectedData" | "DashboardStringId.InspectedTypeFormatString" | "DashboardStringId.AggregatedDataType" | "DashboardStringId.RawDataType" | "DashboardStringId.OLAPUnavailableRawData" | "DashboardStringId.SparklineValuesSeparator" | "DashboardStringId.SparklineArgumentValueSeparator" | "DashboardWebStringId.Grid.FilterClause.ApplyFilter" | "DashboardWebStringId.Grid.FilterClause.ResetOperation" | "DashboardWebStringId.Grid.FilterClause.Contains" | "DashboardWebStringId.Grid.FilterClause.DoesNotContain" | "DashboardWebStringId.Grid.FilterClause.StartsWith" | "DashboardWebStringId.Grid.FilterClause.EndsWith" | "DashboardWebStringId.Grid.FilterClause.Equals" | "DashboardWebStringId.Grid.FilterClause.DoesNotEqual" | "DashboardWebStringId.Grid.FilterClause.Less" | "DashboardWebStringId.Grid.FilterClause.Greater" | "DashboardWebStringId.Grid.FilterClause.LessOrEqual" | "DashboardWebStringId.Grid.FilterClause.GreaterOrEqual" | "DashboardWebStringId.Grid.FilterClause.Between" | "DashboardWebStringId.Grid.FilterClause.BetweenStart" | "DashboardWebStringId.Grid.FilterClause.BetweenEnd" | "DashboardWebStringId.AccordionTab.Content" | "DashboardWebStringId.TextBoxItemEditor.NoFields" | "DashboardWebStringId.TextBoxItemEditor.InsertField" | "DashboardWebStringId.TextBoxItemEditor.EditTextButton" | "DashboardWebStringId.TextBoxItemEditor.DialogCaption" | "DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose" | "DashboardWebStringId.TextBoxItemEditor.DialogClose" | "DashboardStringId.StartDate" | "DashboardStringId.EndDate" | "DashboardWebStringId.AccordionTab.MeasureFilter" | "DashboardStringId.FunctionDescriptionAggregateFilter" | "DashboardWebStringId.TabPages" | "DashboardWebStringId.More" | "DashboardStringId.MeasureFilterCaptionFormatString";
	    };
	    labelName: {
	        [key: string]: "DashboardStringId.ActionClearMasterFilter" | "DashboardStringId.ActionClearSelection" | "DashboardStringId.ActionOtherValues" | "DashboardStringId.ActionDrillUp" | "DashboardStringId.ActionExportTo" | "DashboardStringId.ActionExportToPdf" | "DashboardStringId.ActionExportToImage" | "DashboardStringId.ActionExportToExcel" | "DashboardStringId.RangeFilterCustomDateTimePeriod" | "DashboardStringId.ActionExportTemplate" | "DashboardStringId.ActionAllowMultiselection" | "DashboardStringId.DashboardNullValue" | "DashboardStringId.TopNOthersValue" | "DashboardStringId.DashboardErrorValue" | "DashboardStringId.DateTimeQuarterFormat" | "DashboardStringId.MessageLoading" | "DashboardStringId.ParametersFormCaption" | "DashboardStringId.ParametersSelectorText" | "DashboardStringId.ParametersFormAllowNullColumnCaption" | "DashboardStringId.ParametersFormValueColumnCaption" | "DashboardStringId.ParametersFormNameColumnCaption" | "DashboardStringId.ButtonOK" | "DashboardStringId.ButtonCancel" | "DashboardStringId.SelectDate" | "DashboardStringId.ButtonReset" | "DashboardStringId.ButtonSubmit" | "DashboardStringId.ButtonApply" | "DashboardStringId.ButtonExport" | "DashboardStringId.GridResetColumnWidths" | "DashboardStringId.GridSortAscending" | "DashboardStringId.GridSortDescending" | "DashboardStringId.GridClearSorting" | "DashboardStringId.PivotGridTotal" | "DashboardStringId.PivotGridGrandTotal" | "DashboardStringId.ChartTotalValue" | "DashboardStringId.PageLayout" | "DashboardStringId.PageLayoutAuto" | "DashboardStringId.PageLayoutPortrait" | "DashboardStringId.PageLayoutLandscape" | "DashboardStringId.PaperKind" | "DashboardStringId.PaperKindLetter" | "DashboardStringId.PaperKindLegal" | "DashboardStringId.PaperKindExecutive" | "DashboardStringId.PaperKindA5" | "DashboardStringId.PaperKindA4" | "DashboardStringId.PaperKindA3" | "DashboardStringId.ScaleMode" | "DashboardStringId.ScaleModeNone" | "DashboardStringId.ScaleModeUseScaleFactor" | "DashboardStringId.ScaleModeAutoFitToPagesWidth" | "DashboardStringId.AutoFitPageCount" | "DashboardStringId.ScaleFactor" | "DashboardStringId.PrintHeadersOnEveryPage" | "DashboardStringId.FitToPageWidth" | "DashboardStringId.SizeMode" | "DashboardStringId.SizeModeNone" | "DashboardStringId.SizeModeStretch" | "DashboardStringId.SizeModeZoom" | "DashboardStringId.AutoArrangeContent" | "DashboardStringId.ImageFormat" | "DashboardStringId.ExcelFormat" | "DashboardStringId.CsvValueSeparator" | "DashboardStringId.ExportFilters" | "DashboardStringId.ExportParameters" | "DashboardStringId.DashboardStatePosition" | "DashboardStringId.Resolution" | "DashboardStringId.ShowTitle" | "DashboardStringId.Title" | "DashboardStringId.FileName" | "DashboardStringId.FilterStatePresentationAfter" | "DashboardStringId.FilterStatePresentationAfterAndSplitPage" | "DashboardStringId.FilterStatePresentationSplitSheet" | "DashboardStringId.MessageCustomItemIsNotSupported" | "DashboardStringId.MessageGridHasNoData" | "DashboardStringId.MessagePivotHasNoData" | "DashboardStringId.SparklineTooltipStartValue" | "DashboardStringId.SparklineTooltipEndValue" | "DashboardStringId.SparklineTooltipMinValue" | "DashboardStringId.SparklineTooltipMaxValue" | "DashboardStringId.OpenCaption" | "DashboardStringId.HighCaption" | "DashboardStringId.LowCaption" | "DashboardStringId.CloseCaption" | "DashboardStringId.InitialExtent" | "DashboardStringId.FilterElementShowAllItem" | "DashboardStringId.NumericFormatUnitSymbolThousands" | "DashboardStringId.NumericFormatUnitSymbolMillions" | "DashboardStringId.NumericFormatUnitSymbolBillions" | "DashboardStringId.ActionSelectDateTimePeriod" | "DashboardStringId.RangeFilterSelectRange" | "DashboardStringId.FilterElementCheckedComboBoxNoDataCaption" | "DashboardStringId.FilterElementRadioComboBoxNoDataCaption" | "DashboardStringId.FilterElementNoDataToDisplay" | "DashboardStringId.RangeFilterSelectRangeFromCaption" | "DashboardStringId.RangeFilterSelectRangeToCaption" | "DashboardWebStringId.DashboardParameters" | "DashboardStringId.DataSourceDataMember" | "DashboardStringId.DescriptionMeasures" | "DashboardWebStringId.TextBoxFormatText" | "DashboardStringId.NumericFormatUnitCaption" | "DashboardWebStringId.SummaryType" | "DashboardStringId.CalculationTypeExpression" | "DevExpressWebStringId.CalculatedFieldDataType" | "DashboardStringId.ValueCaption" | "DashboardStringId.Value1Caption" | "DashboardStringId.Value2Caption" | "DashboardStringId.CommandFormatRuleTopBottom" | "DashboardStringId.CommandFormatRuleAboveBelowAverage" | "DashboardStringId.CommandFormatRuleBar" | "DashboardStringId.CommandFormatRuleColorRangeBar" | "DashboardStringId.CommandFormatRuleGradientRangeBar" | "DashboardStringId.FormatRuleStyleAppearance" | "DashboardStringId.FormatRuleStyleIcons" | "DashboardStringId.FormatRuleNegativeStyle" | "DashboardStringId.CommandFormatRuleExpression" | "DashboardWebStringId.TopNMode" | "DashboardStringId.CommandFormatRuleRangeSet" | "DashboardStringId.CommandFormatRuleValue" | "DashboardStringId.CommandFormatRuleDateOccurring" | "DashboardWebStringId.ConditionalFormatting.Appearance.BackColor" | "DashboardWebStringId.ConditionalFormatting.Appearance.ForeColor" | "DashboardStringId.DescriptionBoundImageAttribute" | "DashboardWebStringId.ShowCaptionText" | "DashboardWebStringId.DisplayItemAsPage" | "DashboardStringId.DefaultNameItemGroup" | "DashboardStringId.DefaultNameTabContainerItem" | "DashboardStringId.DefaultDataSourceName" | "DashboardWebStringId.CrossDataSourceFiltering" | "DashboardStringId.RangeFilterCalculationAlongSeries" | "DashboardStringId.RangeFilterCalculationAlongArgument" | "DashboardStringId.DescriptionItemSeries" | "DashboardStringId.DescriptionSeries" | "DashboardWebStringId.Chart.SeriesType" | "DashboardStringId.DescriptionDimensions" | "DashboardWebStringId.TreeView.AutoExpand" | "DashboardWebStringId.ConditionalFormatting.ConditionMinimum" | "DashboardWebStringId.ConditionalFormatting.ConditionMaximum" | "DashboardStringId.DescriptionItemDimension" | "DashboardStringId.DescriptionItemMeasure" | "DashboardWebStringId.Grid.MergeCells" | "DashboardWebStringId.Grid.ColumnWidthMode" | "DashboardWebStringId.Grid.BandedRows" | "DashboardWebStringId.Grid.VerticalLines" | "DashboardWebStringId.Grid.HorizontalLines" | "DashboardWebStringId.Grid.ColumnHeaders" | "DashboardWebStringId.Grid.WordWrap" | "DashboardStringId.ActualValueCaption" | "DashboardStringId.TargetValueCaption" | "DashboardStringId.UriPatternCaption" | "DashboardStringId.UriCaption" | "DashboardStringId.DisplayValueCaption" | "DashboardStringId.WeightCaption" | "DashboardStringId.DescriptionItemColor" | "DashboardStringId.Latitude" | "DashboardStringId.Longitude" | "DashboardWebStringId.GeoPointMapClusterization" | "DashboardWebStringId.MapLockNavigation" | "DashboardWebStringId.WeightedLegendGalleryGroup" | "DashboardStringId.DescriptionItemArgument" | "DashboardWebStringId.PieMapIsWeighted" | "DashboardWebStringId.InteractivityOptions.IgnoreMasterFilters" | "DashboardWebStringId.InteractivityOptions.DrillDown" | "DashboardWebStringId.Pie.ShowCaptions" | "DashboardStringId.DescriptionColumns" | "DashboardStringId.DescriptionRows" | "DashboardStringId.DescriptionValues" | "DashboardStringId.DescriptionArguments" | "DashboardStringId.TextGroupIntervalAlphabetical" | "DashboardStringId.ActionMaximizeDashboardItem" | "DashboardStringId.ActionRestoreDashboardItem" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataSource" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.ValueMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DisplayMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.SortOrder" | "DevExpress.DashboardCommon.DashboardParameter.Visible" | "DevExpress.DashboardCommon.DashboardParameter.Description" | "DevExpress.DashboardCommon.DashboardParameter.AllowMultiselect" | "DevExpress.DashboardCommon.DashboardParameter.AllowNull" | "DevExpress.DashboardCommon.DashboardParameter.SelectAllValues" | "DevExpress.DashboardCommon.StaticListLookUpSettings.Values" | "DevExpress.DashboardCommon.DimensionSortOrder.Ascending" | "DevExpress.DashboardCommon.DimensionSortOrder.Descending" | "DevExpress.DashboardCommon.DimensionSortOrder.None" | "DashboardWebStringId.AccordionTab.ScatterChartPointLabelOptions" | "DashboardWebStringId.AccordionTab.ChoroplethMapShapeLabelsAttribute" | "DashboardStringId.CommandFormatRuleTopN" | "DashboardWebStringId.Type" | "DashboardWebStringId.Grid.ColumnWidth" | "DashboardWebStringId.AccordionTab.ShowTotals" | "DashboardWebStringId.AccordionTab.Layout" | "DashboardWebStringId.AccordionTab.PivotInitialState" | "DashboardWebStringId.AccordionTab.ImageOptions" | "DashboardWebStringId.AccordionTab.Labels" | "DashboardWebStringId.AccordionTab.MapLegend" | "DashboardWebStringId.AccordionTab.WeightedLegend" | "DashboardWebStringId.AccordionTab.Common" | "DashboardWebStringId.AccordionTab.ChartLegend" | "DashboardWebStringId.Grid.AutoFitToContentsColumnWidthMode" | "DashboardWebStringId.Grid.AutoFitToGridColumnWidthMode" | "DashboardWebStringId.Grid.ManualGridColumnWidthMode" | "DashboardStringId.DateTimeIntervalYear" | "DashboardStringId.DateTimeIntervalQuarter" | "DashboardStringId.DateTimeIntervalMonth" | "DashboardStringId.DateTimeIntervalWeek" | "DashboardStringId.DateTimeIntervalDay" | "DashboardStringId.DateTimeIntervalHour" | "DashboardStringId.DateTimeIntervalMinute" | "DashboardStringId.DateTimeIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalYear" | "DashboardStringId.DateTimeGroupIntervalQuarter" | "DashboardStringId.DateTimeGroupIntervalMonth" | "DashboardStringId.DateTimeGroupIntervalDay" | "DashboardStringId.DateTimeGroupIntervalHour" | "DashboardStringId.DateTimeGroupIntervalMinute" | "DashboardStringId.DateTimeGroupIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalDayOfYear" | "DashboardStringId.DateTimeGroupIntervalDayOfWeek" | "DashboardStringId.DateTimeGroupIntervalWeekOfYear" | "DashboardStringId.DateTimeGroupIntervalWeekOfMonth" | "DashboardStringId.DateTimeGroupIntervalMonthYear" | "DashboardStringId.DateTimeGroupIntervalQuarterYear" | "DashboardStringId.DateTimeGroupIntervalWeekYear" | "DashboardStringId.DateTimeGroupIntervalDayMonthYear" | "DashboardStringId.DateTimeGroupIntervalDateHour" | "DashboardStringId.DateTimeGroupIntervalDateHourMinute" | "DashboardStringId.DateTimeGroupIntervalDateHourMinuteSecond" | "DashboardStringId.DateTimeGroupIntervalExactDate" | "DashboardStringId.GroupIntervalNone" | "DashboardWebStringId.Treemap.StripedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SquarifiedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SliceAndDiceLayoutAlgorithm" | "DashboardWebStringId.Treemap.TileLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.TileLabelsNone" | "DashboardWebStringId.Treemap.TileLabelsValue" | "DashboardWebStringId.Treemap.TileLabelsArgument" | "DashboardWebStringId.Treemap.TileTooltipsArgumentAndValue" | "DashboardWebStringId.Treemap.TileTooltipsArgument" | "DashboardWebStringId.Treemap.TileTooltipsValue" | "DashboardWebStringId.Treemap.TileTooltipsNone" | "DashboardWebStringId.Treemap.TopLeftToBottomRightLayoutDirection" | "DashboardWebStringId.Treemap.TopRightToBottomLeftLayoutDirection" | "DashboardWebStringId.Treemap.BottomLeftToTopRightLayoutDirection" | "DashboardWebStringId.Treemap.BottomRightToTopLeftLayoutDirection" | "DashboardWebStringId.Treemap.LayoutDirection" | "DashboardWebStringId.Treemap.GroupLabelsNone" | "DashboardWebStringId.Treemap.GroupLabelsArgument" | "DashboardWebStringId.Treemap.GroupLabelsValue" | "DashboardWebStringId.Treemap.GroupLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.GroupTooltipsNone" | "DashboardWebStringId.Treemap.GroupTooltipsArgument" | "DashboardWebStringId.Treemap.GroupTooltipsValue" | "DashboardWebStringId.Treemap.GroupTooltipsArgumentAndValue" | "DashboardStringId.RankOrderAscending" | "DashboardStringId.RankOrderDescending" | "DashboardStringId.DateTimeFormatYearFormatDefaultCaption" | "DashboardStringId.DateTimeFormatYearFormatFullCaption" | "DashboardStringId.DateTimeFormatYearFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatQuarterFormatDefaultCaption" | "DashboardStringId.DateTimeFormatQuarterFormatNumericCaption" | "DashboardStringId.DateTimeFormatQuarterFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatDefaultCaption" | "DashboardStringId.DateTimeFormatMonthFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatMonthFormatNumericCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatFullCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatNumericCaption" | "DashboardStringId.DateTimeFormatDateFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateFormatLongCaption" | "DashboardStringId.DateTimeFormatDateFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatLongCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption" | "DashboardStringId.ExactDateFormatYear" | "DashboardStringId.ExactDateFormatQuarter" | "DashboardStringId.ExactDateFormatMonth" | "DashboardStringId.ExactDateFormatDay" | "DashboardStringId.ExactDateFormatHour" | "DashboardStringId.ExactDateFormatMinute" | "DashboardStringId.ExactDateFormatSecond" | "DashboardWebStringId.FormatType" | "DashboardWebStringId.TopN.Top" | "DashboardWebStringId.TopN.Bottom" | "DashboardWebStringId.DimensionSortBy" | "DashboardStringId.NumericFormatUnitAutoCaption" | "DashboardStringId.NumericFormatFormatTypeAutoCaption" | "DashboardStringId.NumericFormatFormatTypeGeneralCaption" | "DashboardStringId.NumericFormatFormatTypeNumberCaption" | "DashboardStringId.NumericFormatFormatTypeCurrencyCaption" | "DashboardStringId.NumericFormatFormatTypeScientificCaption" | "DashboardStringId.NumericFormatFormatTypePercentCaption" | "DashboardStringId.NumericFormatUnitOnesCaption" | "DashboardStringId.NumericFormatUnitThousandsCaption" | "DashboardStringId.NumericFormatUnitMillionsCaption" | "DashboardStringId.NumericFormatUnitBillionsCaption" | "DashboardStringId.DeltaValueTypeActualValueCaption" | "DashboardStringId.DeltaValueTypeAbsoluteVariationCaption" | "DashboardStringId.DeltaValueTypePercentVariationCaption" | "DashboardStringId.DeltaValueTypePercentOfTargetCaption" | "DashboardStringId.DeltaValueTypeTargetValueCaption" | "DashboardStringId.DeltaIndicationModeGreaterIsGoodCaption" | "DashboardStringId.DeltaIndicationModeLessIsGoodCaption" | "DashboardStringId.DeltaIndicationModeWarningIfGreaterCaption" | "DashboardStringId.DeltaIndicationModeWarningIfLessCaption" | "DashboardStringId.DeltaIndicationModeNoIndicationCaption" | "DashboardStringId.DeltaThresholdTypeAbsolute" | "DashboardStringId.DeltaThresholdTypePercent" | "DashboardStringId.CommandDimensionGroupChildValues" | "DashboardStringId.SeriesTypeBar" | "DashboardStringId.SeriesTypeStackedBar" | "DashboardStringId.SeriesTypeFullStackedBar" | "DashboardStringId.SeriesTypePoint" | "DashboardStringId.SeriesTypeLine" | "DashboardStringId.SeriesTypeStackedLine" | "DashboardStringId.SeriesTypeFullStackedLine" | "DashboardStringId.SeriesTypeStepLine" | "DashboardStringId.SeriesTypeSpline" | "DashboardStringId.SeriesTypeArea" | "DashboardStringId.SeriesTypeStackedArea" | "DashboardStringId.SeriesTypeFullStackedArea" | "DashboardStringId.SeriesTypeStepArea" | "DashboardStringId.SeriesTypeSplineArea" | "DashboardStringId.SeriesTypeStackedSplineArea" | "DashboardStringId.SeriesTypeFullStackedSplineArea" | "DashboardWebStringId.Chart.ShowLegend" | "DashboardStringId.DefaultNameBoundImageItem" | "DashboardStringId.DefaultNameImageItem" | "DashboardStringId.DefaultNameTextBoxItem" | "DashboardStringId.DefaultNameCardItem" | "DashboardStringId.DefaultNameChartItem" | "DashboardStringId.DefaultNameComboBoxItem" | "DashboardStringId.DefaultNameListBoxItem" | "DashboardStringId.DefaultNameTreeViewItem" | "DashboardStringId.DefaultNameGaugeItem" | "DashboardStringId.DefaultNameGridItem" | "DashboardStringId.GridHyperlinkUriPatternErrorMessage" | "DashboardWebStringId.DefaultNameBubbleMapItem" | "DashboardWebStringId.DefaultNameChoroplethMapItem" | "DashboardWebStringId.DefaultNameGeoPointMapItem" | "DashboardWebStringId.DefaultNamePieMapItem" | "DashboardStringId.DefaultNamePieItem" | "DashboardStringId.DefaultNamePivotItem" | "DashboardStringId.DefaultNameRangeFilterItem" | "DashboardStringId.DefaultNameScatterChartItem" | "DashboardStringId.DefaultNameTreemapItem" | "DashboardStringId.DescriptionMaps" | "DashboardStringId.EntireRangePeriodCaption" | "DashboardStringId.CalculationTypePercentOfTotal" | "DashboardStringId.CalculationTypeDifference" | "DashboardStringId.CalculationTypePercentageDifference" | "DashboardStringId.CalculationTypeRunningTotal" | "DashboardStringId.CalculationTypeMovingCalculation" | "DashboardStringId.CalculationTypeRank" | "DashboardStringId.ColorPaletteIndex" | "DashboardStringId.DifferenceCalculationTargetPrevious" | "DashboardStringId.DifferenceCalculationTargetNext" | "DashboardStringId.DifferenceCalculationTargetFirst" | "DashboardStringId.DifferenceCalculationTargetLast" | "DashboardStringId.SummaryTypeCount" | "DashboardStringId.SummaryTypeSum" | "DashboardStringId.SummaryTypeMin" | "DashboardStringId.SummaryTypeMax" | "DashboardStringId.SummaryTypeAverage" | "DashboardStringId.SummaryTypeStdDev" | "DashboardStringId.SummaryTypeStdDevp" | "DashboardStringId.SummaryTypeVar" | "DashboardStringId.SummaryTypeVarp" | "DashboardStringId.SummaryTypeCountDistinct" | "DashboardStringId.SummaryTypeMedian" | "DashboardStringId.SummaryTypeMode" | "DashboardStringId.RankTypeUnique" | "DashboardStringId.RankTypeCompetition" | "DashboardStringId.RankTypeDense" | "DashboardStringId.RankTypeModified" | "DashboardStringId.RankTypePercentile" | "DashboardStringId.CardCalculationAlongCards" | "DashboardStringId.CardCalculationAlongSparklineArgument" | "DashboardStringId.CardCalculationAlongCardsAndSparklineArgument" | "DashboardStringId.CardCalculationAlongSparklineArgumentAndCards" | "DashboardStringId.ChartCalculationAlongArguments" | "DashboardStringId.ChartCalculationAlongSeries" | "DashboardStringId.ChartCalculationAlongArgumentsAndSeries" | "DashboardStringId.ChartCalculationAlongSeriesAndArguments" | "DashboardStringId.GridCalculationAlongRows" | "DashboardStringId.GridCalculationAlongSparklineArgument" | "DashboardStringId.GridCalculationAlongRowsAndSparklineArgument" | "DashboardStringId.GridCalculationAlongSparklineArgumentAndRows" | "DashboardStringId.PivotCalculationAlongColumns" | "DashboardStringId.PivotCalculationAlongRows" | "DashboardStringId.PivotCalculationAlongColumnsAndRows" | "DashboardStringId.PivotCalculationAlongRowsAndColumns" | "DashboardStringId.PivotCalculationAlongGroupsInColumns" | "DashboardStringId.PivotCalculationAlongGroupsInRows" | "DashboardStringId.PivotCalculationAlongGroupsInColumnsAndRows" | "DashboardStringId.PivotCalculationAlongGroupsInRowsAndColumns" | "DashboardStringId.PieCalculationAlongArguments" | "DashboardStringId.PieCalculationAlongSeries" | "DashboardStringId.PieCalculationAlongArgumentsAndSeries" | "DashboardStringId.PieCalculationAlongSeriesAndArguments" | "DashboardStringId.RangeFilterCalculationAlongArgumentAndSeries" | "DashboardStringId.RangeFilterCalculationAlongSeriesAndArgument" | "DashboardStringId.GaugeCalculationAlongGauges" | "DashboardStringId.ScatterCalculationAlongArguments" | "DashboardStringId.CalculationAlongSpecificDimensions" | "DashboardStringId.CalculatedFieldTypeString" | "DashboardStringId.CalculatedFieldTypeLong" | "DashboardStringId.CalculatedFieldTypeDecimal" | "DashboardStringId.CalculatedFieldTypeBoolean" | "DashboardStringId.CalculatedFieldTypeDateTime" | "DashboardStringId.CalculatedFieldTypeDouble" | "DashboardStringId.CalculatedFieldTypeAuto" | "DashboardStringId.CalculatedFieldTypeObject" | "DashboardStringId.DefaultEFDataSourceName" | "DashboardStringId.DefaultExcelDataSourceName" | "DashboardStringId.DefaultFileExtractDataSourceName" | "DashboardStringId.DefaultObjectDataSourceName" | "DashboardStringId.DefaultOlapDataSourceName" | "DashboardStringId.DefaultSqlDataSourceName" | "DashboardStringId.DefaultJsonDataSourceName" | "DashboardStringId.DefaultXpoDataSourceName" | "DashboardStringId.OlapRaggedHierarchyNoneItemCaption" | "DashboardStringId.FormatRuleApplyToColumn" | "DashboardStringId.SeriesTypeSideBySideRangeBar" | "DashboardStringId.SeriesTypeRangeArea" | "DashboardStringId.SeriesTypeHighLowClose" | "DashboardStringId.SeriesTypeCandleStick" | "DashboardStringId.SeriesTypeStock" | "DashboardWebStringId.StyleSettings" | "DashboardStringId.ParametersFormCalendarTodayButton" | "DashboardStringId.TreemapLabelArgumentTemplate" | "DashboardStringId.TreemapLabelValueTemplate" | "DashboardStringId.SearchNullValuePrompt" | "DashboardStringId.CustomItems" | "DashboardStringId.FormatRuleAllowNegativeAxis" | "DashboardStringId.FormatRuleDrawAxis" | "DashboardStringId.FormatRuleShowBarOnly" | "DashboardStringId.CommandFormatRuleBottomN" | "DashboardStringId.FormatConditionAppearanceNone" | "DashboardStringId.FormatConditionAppearanceCustom" | "DashboardStringId.FormatConditionAppearancePaleRed" | "DashboardStringId.FormatConditionAppearancePaleYellow" | "DashboardStringId.FormatConditionAppearancePaleGreen" | "DashboardStringId.FormatConditionAppearancePaleBlue" | "DashboardStringId.FormatConditionAppearancePalePurple" | "DashboardStringId.FormatConditionAppearancePaleCyan" | "DashboardStringId.FormatConditionAppearancePaleOrange" | "DashboardStringId.FormatConditionAppearancePaleGray" | "DashboardStringId.FormatConditionAppearanceRed" | "DashboardStringId.FormatConditionAppearanceYellow" | "DashboardStringId.FormatConditionAppearanceGreen" | "DashboardStringId.FormatConditionAppearanceBlue" | "DashboardStringId.FormatConditionAppearancePurple" | "DashboardStringId.FormatConditionAppearanceCyan" | "DashboardStringId.FormatConditionAppearanceOrange" | "DashboardStringId.FormatConditionAppearanceGray" | "DashboardStringId.FormatConditionAppearanceGradientRed" | "DashboardStringId.FormatConditionAppearanceGradientYellow" | "DashboardStringId.FormatConditionAppearanceGradientGreen" | "DashboardStringId.FormatConditionAppearanceGradientBlue" | "DashboardStringId.FormatConditionAppearanceGradientPurple" | "DashboardStringId.FormatConditionAppearanceGradientCyan" | "DashboardStringId.FormatConditionAppearanceGradientOrange" | "DashboardStringId.FormatConditionAppearanceGradientTransparent" | "DashboardStringId.FormatConditionAppearanceFontBold" | "DashboardStringId.FormatConditionAppearanceFontItalic" | "DashboardStringId.FormatConditionAppearanceFontUnderline" | "DashboardStringId.FormatConditionAppearanceFontGrayed" | "DashboardStringId.FormatConditionAppearanceFontRed" | "DashboardStringId.FormatConditionAppearanceFontYellow" | "DashboardStringId.FormatConditionAppearanceFontGreen" | "DashboardStringId.FormatConditionAppearanceFontBlue" | "DashboardStringId.IntersectionLevelModeFirst" | "DashboardStringId.IntersectionLevelModeLast" | "DashboardStringId.IntersectionLevelModeAuto" | "DashboardStringId.IntersectionLevelModeAll" | "DashboardStringId.IntersectionLevelModeSpecific" | "DashboardStringId.FormatRuleApplyToRow" | "DashboardStringId.FormatRuleApplyTo" | "DashboardWebStringId.FilterItem.AllowEmptyFilter" | "DashboardStringId.FormatConditionAppearanceFontStrikeout" | "DashboardStringId.FormatConditionAutomaticValueType" | "DashboardStringId.FormatConditionNumberValueType" | "DashboardStringId.FormatConditionPercentValueType" | "DashboardStringId.CommandFormatRuleRangeIcons" | "DashboardStringId.CommandFormatRuleGreaterThan" | "DashboardStringId.CommandFormatRuleGreaterThanOrEqualTo" | "DashboardStringId.CommandFormatRuleLessThan" | "DashboardStringId.CommandFormatRuleLessThanOrEqualTo" | "DashboardStringId.CommandFormatRuleEqualTo" | "DashboardStringId.CommandFormatRuleNotEqualTo" | "DashboardStringId.CommandFormatRuleBetween" | "DashboardStringId.CommandFormatRuleNotBetween" | "DashboardStringId.CommandFormatRuleBetweenOrEqual" | "DashboardStringId.CommandFormatRuleNotBetweenOrEqual" | "DashboardStringId.CommandFormatRuleContains" | "DashboardStringId.ColorAutoAssigned" | "DashboardStringId.CalculationTypeNone" | "DashboardStringId.UndoText" | "DashboardStringId.RedoText" | "DashboardStringId.DashboardCurrencyUseCurrentCurrency" | "DashboardStringId.CommandDimensionSortModeDisplayText" | "DashboardStringId.CommandDimensionSortModeValue" | "DashboardStringId.CommandDimensionSortModeID" | "DashboardStringId.CommandDimensionSortModeKey" | "DashboardWebStringId.Chart.AddPane" | "DashboardStringId.MapShapeNoneAttribute" | "DashboardStringId.DefaultPeriodName" | "DashboardStringId.CardLayoutTemplateStretchedCaption" | "DashboardStringId.CardLayoutTemplateCenteredCaption" | "DashboardStringId.CardLayoutTemplateCompactCaption" | "DashboardStringId.CardLayoutTemplateLightweightCaption" | "DashboardStringId.CardLayoutTemplateCustomCaption" | "DashboardStringId.CardLayoutTemplateNoneCaption" | "DashboardStringId.CardRowDataElementTypeTitleCaption" | "DashboardStringId.CardRowDataElementTypeSubtitleCaption" | "DashboardStringId.CardRowDataElementTypeActualValueCaption" | "DashboardStringId.CardRowDataElementTypeTargetValueCaption" | "DashboardStringId.CardRowDataElementTypeAbsoluteVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentOfTargetCaption" | "DashboardStringId.CardRowDataElementTypeDimensionValueCaption" | "DashboardStringId.CardRowDataElementTypeCardNameCaption" | "DashboardStringId.CardRowDataElementTypeDeltaIndicatorCaption" | "DashboardStringId.CardRowDataElementTypeSparklineCaption" | "DashboardStringId.FormatRuleApplyToAllElements" | "DashboardWebStringId.Pie.LabelPosition" | "DashboardWebStringId.Pie.LabelPositionOutside" | "DashboardWebStringId.Pie.LabelPositionInside" | "DashboardStringId.IncludeExportDashboardState" | "DashboardStringId.PointLabelContentTypeArgument" | "DashboardStringId.PointLabelContentTypeSeriesName" | "DashboardStringId.PointLabelContentTypeValue" | "DashboardStringId.PointLabelContentTypePercent" | "DashboardWebStringId.DashboardMenu" | "DashboardWebStringId.DashboardMenuNew" | "DashboardWebStringId.DashboardMenuOpen" | "DashboardWebStringId.DashboardMenuSave" | "DashboardWebStringId.DashboardMenuCurrency" | "DashboardWebStringId.DashboardMenuDataSources" | "DashboardWebStringId.DashboardMenuColorScheme" | "DashboardWebStringId.DashboardMenuNewDashboardCreate" | "DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder" | "DashboardWebStringId.Binding.DefaultEmptyPlaceholder" | "DashboardWebStringId.Binding.DefaultSelectedPlaceholder" | "DashboardWebStringId.Binding.DataFiltering" | "DashboardWebStringId.Binding.Argument" | "DashboardWebStringId.Binding.Attribute" | "DashboardWebStringId.Binding.Sparkline" | "DashboardWebStringId.Binding.Columns" | "DashboardWebStringId.Binding.TooltipDimensions" | "DashboardWebStringId.Binding.TooltipMeasures" | "DashboardWebStringId.Binding.HiddenDimensions" | "DashboardWebStringId.Binding.HiddenMeasures" | "DashboardWebStringId.Binding.AddDimension" | "DashboardWebStringId.Binding.AddMeasure" | "DashboardWebStringId.Binding.AddColumn" | "DashboardWebStringId.Binding.AddRow" | "DashboardWebStringId.Binding.AddValue" | "DashboardWebStringId.Binding.AddSeries" | "DashboardWebStringId.Binding.SetLatitude" | "DashboardWebStringId.Binding.SetLongitude" | "DashboardWebStringId.Binding.SetArgument" | "DashboardWebStringId.Binding.AddArgument" | "DashboardWebStringId.Binding.SetWeight" | "DashboardWebStringId.Binding.SetColor" | "DashboardWebStringId.Binding.SetAttribute" | "DashboardWebStringId.Binding.SetValue" | "DashboardWebStringId.Binding.XAxis" | "DashboardWebStringId.Binding.YAxis" | "DashboardWebStringId.Binding.ConfigureDimension" | "DashboardWebStringId.Binding.ConfigureMeasure" | "DashboardWebStringId.Binding.ConfigureSeries" | "DashboardWebStringId.Binding.ConfigureArgument" | "DashboardWebStringId.Binding.ConfigureValue" | "DashboardWebStringId.Binding.ConfigureAttribute" | "DashboardWebStringId.Binding.ConfigureLatitude" | "DashboardWebStringId.Binding.ConfigureLongitude" | "DashboardWebStringId.Binding.ConfigureColumn" | "DashboardWebStringId.Binding.ConfigureRow" | "DashboardWebStringId.Binding.ConfigureWeight" | "DashboardWebStringId.Binding.ConfigureColor" | "DashboardWebStringId.Binding.ShowAll" | "DashboardWebStringId.ColorScheme.Color" | "DashboardWebStringId.ColorScheme.Colors" | "DashboardWebStringId.Parameters.ParameterList" | "DashboardWebStringId.Parameters.AddParameter" | "DashboardWebStringId.Parameters.AddParameter.Tooltip" | "DashboardWebStringId.Parameters.NoSelectedParameter" | "DashboardWebStringId.Parameters.Reorder" | "DashboardWebStringId.Parameters.Done" | "DashboardWebStringId.Currency.Currency" | "DashboardWebStringId.Currency.CurrencyCulture" | "DashboardWebStringId.Currency.DefaultCurrencyWarning" | "DashboardWebStringId.Preview" | "DashboardWebStringId.Add" | "DashboardWebStringId.DataSources.UsedDataSources" | "DashboardWebStringId.DataSources.DataItems" | "DashboardWebStringId.DataSources.AddQuery" | "DashboardWebStringId.DataSources.AddCalculatedField" | "DashboardWebStringId.DataSources.AddDataSource" | "DashboardWebStringId.DataSources.NoUsedDataSources" | "DashboardWebStringId.DataSources.NoAvailableDataSources" | "DashboardWebStringId.DataSources.ChooseDataSource" | "DashboardWebStringId.DataSources.CreateDataSource" | "DashboardWebStringId.DataSources.CreateNewDataSource" | "DashboardWebStringId.DataSources.CreateDataSource.Tooltip" | "DashboardWebStringId.DataSources.EditCalculatedField" | "DashboardWebStringId.DataSources.CalculatedField.Name" | "DashboardWebStringId.DataSources.CalculatedField.FieldType" | "DashboardWebStringId.DataSources.CalculatedField.UniqueNameError" | "DashboardWebStringId.DataSources.CalculatedField.Corrupted" | "DashboardWebStringId.DataSources.Edit" | "DashboardStringId.MessageCollectionTypesNotSupported" | "DashboardWebStringId.New.DashboardName" | "DashboardWebStringId.Bindings" | "DashboardWebStringId.Interactivity" | "DashboardWebStringId.Options" | "DashboardWebStringId.Remove" | "DashboardWebStringId.MasterFilterMode" | "DashboardWebStringId.Title.Text" | "DashboardWebStringId.Title.Visible" | "DashboardWebStringId.Title.IncludeMasterFilter" | "DashboardWebStringId.Title.Aligment" | "DashboardWebStringId.Title.Image" | "DashboardWebStringId.DataSources.Cancel" | "DashboardWebStringId.DataSources.IncludeToTheDashboard" | "DashboardWebStringId.DataSources.AvailableDataSourcesError" | "DashboardWebStringId.DataSources.DashboardDataSourceWizard" | "DashboardWebStringId.Viewer" | "DashboardWebStringId.Loading" | "DashboardWebStringId.ClickHereInvitation" | "DashboardWebStringId.BindDataInvitation" | "DashboardWebStringId.AddItemInvitation" | "DashboardWebStringId.Parameters.Values" | "DashboardWebStringId.Binding.Cards" | "DashboardWebStringId.Binding.AddCard" | "DashboardWebStringId.Binding.ConfigureCard" | "DashboardWebStringId.Binding.AddValues" | "DashboardWebStringId.Binding.ConfigureValues" | "DashboardWebStringId.Binding.Maps" | "DashboardWebStringId.Binding.AddMap" | "DashboardWebStringId.Binding.ConfigureMap" | "DashboardWebStringId.Binding.Gauges" | "DashboardWebStringId.Binding.AddGauge" | "DashboardWebStringId.Binding.ConfigureGauge" | "DashboardWebStringId.InteractivityOptions" | "DashboardWebStringId.Binding.Values" | "DashboardWebStringId.Binding.RemovePane" | "DashboardWebStringId.ClickToSetFilterCriteria" | "DashboardWebStringId.DataSources.OK" | "DashboardWebStringId.DataSources.Save" | "DashboardWebStringId.Cards.ArrangementMode" | "DashboardWebStringId.Cards.ArrangementMode.Auto" | "DashboardWebStringId.Cards.ArrangementMode.FixedRows" | "DashboardWebStringId.Cards.ArrangementMode.FixedColumns" | "DashboardWebStringId.Cards.LineCount" | "DashboardWebStringId.ConditionalFormatting" | "DashboardWebStringId.CollectionEditor.NoItems" | "DashboardWebStringId.CollectionEditor.Totals.NoItems" | "DashboardWebStringId.CollectionEditor.Parameters.NoItems" | "DashboardWebStringId.PivotGrid.AutoExpandColumnGroups" | "DashboardWebStringId.PivotGrid.AutoExpandRowGroups" | "DashboardWebStringId.PivotGrid.ColumnGrandTotals" | "DashboardWebStringId.PivotGrid.RowGrandTotals" | "DashboardWebStringId.PivotGrid.ColumnTotals" | "DashboardWebStringId.PivotGrid.RowTotals" | "DashboardWebStringId.PivotGrid.ValuesPosition" | "DashboardWebStringId.PivotGrid.ValuesPositionColumns" | "DashboardWebStringId.PivotGrid.ValuesPositionRows" | "DashboardWebStringId.PivotGrid.RowTotalsPosition" | "DashboardWebStringId.PivotGrid.RowTotalsPositionBottom" | "DashboardWebStringId.PivotGrid.RowTotalsPositionTop" | "DashboardWebStringId.PivotGrid.ColumnTotalsPosition" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionFar" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionNear" | "DashboardWebStringId.PivotGrid.LayoutType" | "DashboardWebStringId.PivotGrid.LayoutTypeCompact" | "DashboardWebStringId.PivotGrid.LayoutTypeTabular" | "DashboardWebStringId.Options.Caption" | "DashboardWebStringId.InteractivityOptions.IsMasterFilter" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.None" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Single" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Multiple" | "DashboardWebStringId.InteractivityOptions.TargetDimensions" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Arguments" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Series" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Points" | "DashboardWebStringId.ColoringOptions" | "DashboardWebStringId.DataSources.Filter" | "DashboardWebStringId.Chart.Rotated" | "DashboardWebStringId.Chart.Panes" | "DashboardWebStringId.Chart.Legend" | "DashboardWebStringId.Chart.AxisX" | "DashboardWebStringId.Chart.AxisY" | "DashboardWebStringId.Chart.AxisYSecondary" | "DashboardWebStringId.Chart.PointLabelOptions" | "DashboardWebStringId.Chart.AxisXMeasure" | "DashboardWebStringId.Chart.AxisYMeasure" | "DashboardWebStringId.Chart.Weight" | "DashboardWebStringId.Chart.Content" | "DashboardWebStringId.Chart.ArgumentAndWeight" | "DashboardWebStringId.Chart.ArgumentAndValues" | "DashboardWebStringId.Chart.Reverse" | "DashboardWebStringId.Chart.Visible" | "DashboardWebStringId.Chart.Title" | "DashboardWebStringId.Chart.TitleText" | "DashboardWebStringId.Chart.EnableZooming" | "DashboardWebStringId.Chart.LimitVisiblePoints" | "DashboardWebStringId.Chart.VisiblePointsCount" | "DashboardWebStringId.Chart.AlwaysShowZeroLevel" | "DashboardWebStringId.Chart.GridLines" | "DashboardWebStringId.Chart.LogarithmicScale" | "DashboardWebStringId.Chart.LogarithmicScaleBase" | "DashboardWebStringId.Chart.LogarithmicScaleBase2" | "DashboardWebStringId.Chart.LogarithmicScaleBase5" | "DashboardWebStringId.Chart.LogarithmicScaleBase10" | "DashboardWebStringId.Chart.Position" | "DashboardWebStringId.Chart.IsInsideOfDiagram" | "DashboardWebStringId.Chart.PrimaryAxisY" | "DashboardWebStringId.Chart.SecondaryAxisY" | "DashboardWebStringId.Chart.Name" | "DashboardWebStringId.Chart.PlotOnSecondaryAxis" | "DashboardWebStringId.Chart.IgnoreEmptyPoints" | "DashboardWebStringId.Chart.ShowPointMarkers" | "DashboardWebStringId.Chart.Value" | "DashboardWebStringId.Chart.ShowZeroValues" | "DashboardWebStringId.Chart.OverlappingMode" | "DashboardWebStringId.Chart.Orientation" | "DashboardWebStringId.Chart.ShowPointLablels" | "DashboardWebStringId.Chart.TooltipContent" | "DashboardWebStringId.Chart.LabelContent" | "DashboardWebStringId.Card.SparklineOptions" | "DashboardWebStringId.Card.SparklineVisible" | "DashboardWebStringId.Chart.Position.TopLeftVertical" | "DashboardWebStringId.Chart.Position.TopLeftHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterHorizontal" | "DashboardWebStringId.Chart.Position.TopRightVertical" | "DashboardWebStringId.Chart.Position.TopRightHorizontal" | "DashboardWebStringId.Chart.Position.BottomLeftVertical" | "DashboardWebStringId.Chart.Position.BottomLeftHorizontal" | "DashboardWebStringId.Chart.Position.BottomCenterHorizontal" | "DashboardWebStringId.Chart.Position.BottomRightVertical" | "DashboardWebStringId.Chart.Position.BottomRightHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterVertical" | "DashboardWebStringId.Chart.Position.BottomCenterVertical" | "DashboardWebStringId.FilterItem.Type" | "DashboardWebStringId.FilterItem.Type.Standard" | "DashboardWebStringId.FilterItem.Type.Checked" | "DashboardWebStringId.FilterItem.Type.Radio" | "DashboardWebStringId.FilterItem.ShowAllValue" | "DashboardWebStringId.FilterItem.EnableSearch" | "DashboardWebStringId.Gauge.Min" | "DashboardWebStringId.Gauge.Max" | "DashboardWebStringId.Gauge.ScaleOptions" | "DashboardWebStringId.Gauge.Type" | "DashboardWebStringId.Gauge.Type.FullQuarterGauge" | "DashboardWebStringId.Gauge.Type.HalfCircular" | "DashboardWebStringId.Gauge.Type.LeftQuarterCircular" | "DashboardWebStringId.Gauge.Type.RightQuarterCircular" | "DashboardWebStringId.Gauge.Type.ThreeFourthCircular" | "DashboardWebStringId.Gauge.Type.LinearHorizontal" | "DashboardWebStringId.Gauge.Type.LinearVertical" | "DashboardWebStringId.Gauge.Captions" | "DashboardWebStringId.Gauge.Scale.Custom" | "DashboardWebStringId.Gauge.Scale.Auto" | "DashboardWebStringId.Grid.ColumnType" | "DashboardWebStringId.Grid.DisplayMode" | "DashboardWebStringId.Grid.DisplayMode.Value" | "DashboardWebStringId.Grid.DisplayMode.Bar" | "DashboardWebStringId.Grid.DisplayMode.Text" | "DashboardWebStringId.Grid.DisplayMode.Image" | "DashboardWebStringId.Grid.FixedWidth" | "DashboardWebStringId.Grid.WidthType" | "DashboardWebStringId.Grid.WidthType.Weight" | "DashboardWebStringId.Grid.WidthType.FitToContent" | "DashboardWebStringId.Grid.DeltaOptions" | "DashboardWebStringId.Grid.ShowStartEndValues" | "DashboardWebStringId.Grid.TotalType" | "DashboardWebStringId.Grid.Dimension" | "DashboardWebStringId.Grid.Measure" | "DashboardWebStringId.Grid.Delta" | "DashboardWebStringId.Grid.Sparkline" | "DashboardWebStringId.Grid.Hyperlink" | "DashboardWebStringId.Grid.Options" | "DashboardWebStringId.Map.ShapeFileLoaded" | "DashboardWebStringId.Map.AttributeFileLoaded" | "DashboardWebStringId.Map.ValueMap" | "DashboardWebStringId.Map.DeltaMap" | "DashboardWebStringId.Map.TooltipCaption" | "DashboardWebStringId.Map.TooltipActualValueCaption" | "DashboardWebStringId.Map.TooltipDeltaCaption" | "DashboardWebStringId.Map.CustomMapOptions" | "DashboardWebStringId.Map.CustomMapOptionsSource" | "DashboardWebStringId.Map.CustomMapOptionsUrl" | "DashboardWebStringId.Map.CustomMapOptionsFile" | "DashboardWebStringId.Map.CustomMapUrl" | "DashboardWebStringId.Map.CustomMapFile" | "DashboardWebStringId.Map.CustomAttributeFile" | "DashboardWebStringId.Map.AttributeDimension" | "DashboardWebStringId.Map.IncludeSummaryValueToShapeTitle" | "DashboardWebStringId.Map.AttributeName" | "DashboardWebStringId.Map.TooltipAttribute" | "DashboardWebStringId.Map.TooltipDimensions" | "DashboardWebStringId.Map.Area.Custom" | "DashboardWebStringId.Map.Area.WorldCountries" | "DashboardWebStringId.Map.Area.Europe" | "DashboardWebStringId.Map.Area.Asia" | "DashboardWebStringId.Map.Area.NorthAmerica" | "DashboardWebStringId.Map.Area.SouthAmerica" | "DashboardWebStringId.Map.Area.Africa" | "DashboardWebStringId.Map.Area.USA" | "DashboardWebStringId.Map.Area.Canada" | "DashboardWebStringId.Map.Viewport" | "DashboardWebStringId.Map.ShapeTitleAttribute" | "DashboardWebStringId.Map.UseBindingAttribute" | "DashboardWebStringId.Map.WeightedLegendType" | "DashboardWebStringId.Map.WeightedLegendType.Linear" | "DashboardWebStringId.Map.WeightedLegendType.Nested" | "DashboardWebStringId.Map.Orientation.Vertical" | "DashboardWebStringId.Map.Orientation.Horizontal" | "DashboardWebStringId.Map.Position.TopLeft" | "DashboardWebStringId.Map.Position.TopCenter" | "DashboardWebStringId.Map.Position.TopRight" | "DashboardWebStringId.Map.Position.BottomLeft" | "DashboardWebStringId.Map.Position.BottomCenter" | "DashboardWebStringId.Map.Position.BottomRight" | "DashboardWebStringId.Map.Viewport.TopLatitude" | "DashboardWebStringId.Map.Viewport.LeftLongitude" | "DashboardWebStringId.Map.Viewport.RightLongitude" | "DashboardWebStringId.Map.Viewport.BottomLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLongitude" | "DashboardWebStringId.Map.Viewport.CreateViewerPaddings" | "DashboardWebStringId.Map.ShowLegend" | "DashboardWebStringId.Pie.Type" | "DashboardWebStringId.Pie" | "DashboardWebStringId.Pie.Donut" | "DashboardWebStringId.Pie.LabelContentType.None" | "DashboardWebStringId.Pie.LabelContentType.Argument" | "DashboardWebStringId.Pie.LabelContentType.Percent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndPercent" | "DashboardWebStringId.Pie.LabelContentType.Value" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndValue" | "DashboardWebStringId.Pie.LabelContentType.ValueAndPercent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentValueAndPercent" | "DashboardWebStringId.Image.BindingMode" | "DashboardWebStringId.Image.BindingMode.BinaryArray" | "DashboardWebStringId.Image.BindingMode.Uri" | "DashboardWebStringId.RangeFilter.UriPattern" | "DashboardWebStringId.Image.SizeMode.Clip" | "DashboardWebStringId.Image.SizeMode.Stretch" | "DashboardWebStringId.Image.SizeMode.Zoom" | "DashboardWebStringId.Image.SizeMode.Squeeze" | "DashboardWebStringId.Image.HorizontalAlignment" | "DashboardWebStringId.Image.VerticalAlignment" | "DashboardWebStringId.Image.Alignment.Left" | "DashboardWebStringId.Image.Alignment.Center" | "DashboardWebStringId.Image.Alignment.Right" | "DashboardWebStringId.Image.Alignment.Top" | "DashboardWebStringId.Image.Alignment.Bottom" | "DashboardWebStringId.SeriesItem.SeriesDimensions" | "DashboardWebStringId.TextBox.Text" | "DashboardWebStringId.Chart.Orientation.Default" | "DashboardWebStringId.Chart.Orientation.RotateRight" | "DashboardWebStringId.Chart.Orientation.RotateLeft" | "DashboardWebStringId.Chart.OverlappingMode.Hide" | "DashboardWebStringId.Chart.OverlappingMode.None" | "DashboardWebStringId.Chart.Position.Outside" | "DashboardWebStringId.Chart.Position.Inside" | "DashboardWebStringId.Chart.SeriesType.Weighted" | "DashboardWebStringId.Coloring.MeasuresColoringMode" | "DashboardWebStringId.Coloring.Global" | "DashboardWebStringId.Coloring.Local" | "DashboardWebStringId.Delta.ValueType" | "DashboardWebStringId.Delta.ResultIndication" | "DashboardWebStringId.Delta.ThresholdType" | "DashboardWebStringId.Delta.ThresholdValue" | "DashboardWebStringId.Sparkline.ViewType" | "DashboardWebStringId.Sparkline.HighlightMinMaxPoints" | "DashboardWebStringId.Sparkline.HighlightStartEndPoints" | "DashboardWebStringId.Title.Aligment.Left" | "DashboardWebStringId.Title.Aligment.Center" | "DashboardWebStringId.Parameters.LookUpSettingsType.NoLookUp" | "DashboardWebStringId.Parameters.LookUpSettingsType.StaticList" | "DashboardWebStringId.Parameters.LookUpSettingsType.DynamicList" | "DashboardWebStringId.Parameters.LookUpSettingsType" | "DashboardWebStringId.Parameters.DefaultValue" | "DashboardWebStringId.DataItem" | "DashboardWebStringId.DataItem.Precision" | "DashboardWebStringId.DataItem.IncludeGroupSeparator" | "DashboardWebStringId.DataItem.ShowValues" | "DashboardWebStringId.DataItem.ShowTotals" | "DashboardWebStringId.DataItem.ShowGrandTotals" | "DashboardWebStringId.Dialog.ConfirmSaving" | "DashboardWebStringId.Dimension.GroupInterval" | "DashboardWebStringId.Dimension.SortMode" | "DashboardWebStringId.Dialog.ArgumentMode" | "DashboardWebStringId.Calculations" | "DashboardWebStringId.Calculations.Expression" | "DashboardWebStringId.Calculations.DifferenceCalculation" | "DashboardWebStringId.Calculations.Moving" | "DashboardWebStringId.Calculations.RunningTotal" | "DashboardWebStringId.Calculations.PercentOfTotal" | "DashboardWebStringId.Calculations.Rank" | "DashboardWebStringId.Calculations.DefinitionMode" | "DashboardWebStringId.Calculations.WindowDefinition" | "DashboardWebStringId.Calculations.WindowDefinitionModeSpecific" | "DashboardWebStringId.Calculations.WindowDefinitionModePredefined" | "DashboardWebStringId.Calculations.DifferenceType" | "DashboardWebStringId.TreemapLayoutAlgorithm" | "DashboardWebStringId.TilesLabelContentType" | "DashboardWebStringId.TilesTooltipContentType" | "DashboardWebStringId.GroupsLabelContentType" | "DashboardWebStringId.GroupsTooltipContentType" | "DashboardWebStringId.ShowOthersValue" | "DashboardWebStringId.TopNEnabled" | "DashboardWebStringId.Parameters.StaticListLookUpSettings" | "DashboardWebStringId.Parameters.DynamicListLookUpSettings" | "DashboardWebStringId.ConvertTo" | "DashboardWebStringId.Duplicate" | "DashboardWebStringId.DataSourceWizard" | "DashboardWebStringId.RangeFilter.CustomPeriods" | "DashboardWebStringId.RangeFilter.StartMode" | "DashboardWebStringId.RangeFilter.EndMode" | "DashboardWebStringId.RangeFilter.StartIntervalAndOffset" | "DashboardWebStringId.RangeFilter.EndIntervalAndOffset" | "DashboardWebStringId.RangeFilter.StartDate" | "DashboardWebStringId.RangeFilter.EndDate" | "DashboardWebStringId.RangeFilter.None" | "DashboardWebStringId.RangeFilter.Fixed" | "DashboardWebStringId.RangeFilter.Flow" | "DashboardWebStringId.Tabs.Binding" | "DashboardWebStringId.Tabs.DataShaping" | "DashboardWebStringId.Tabs.Format" | "DashboardWebStringId.Calculations.Types.Moving" | "DashboardWebStringId.Parameters.SortByMember" | "DashboardWebStringId.Parameters.LookUpSettingsTypeCaption" | "DashboardWebStringId.Dashboard.Items" | "DashboardWebStringId.Dashboard.Groups" | "DashboardWebStringId.Dashboard.LayoutItems" | "DashboardWebStringId.Dashboard.ComponentName" | "DashboardWebStringId.ButtonConfirm" | "DashboardWebStringId.Colorization.GroupInterval" | "DashboardWebStringId.ButtonOn" | "DashboardWebStringId.ButtonOff" | "DashboardWebStringId.ButtonYes" | "DashboardWebStringId.ButtonNo" | "DashboardWebStringId.ButtonDiscrete" | "DashboardWebStringId.ButtonContinuous" | "DashboardWebStringId.ButtonVisible" | "DashboardWebStringId.ButtonHidden" | "DashboardWebStringId.Calculations.PreviousValuesCount" | "DashboardWebStringId.Calculations.NextValuesCount" | "DashboardWebStringId.Calculations.RankType" | "DashboardWebStringId.Calculations.RankOrder" | "DashboardWebStringId.TileOptions" | "DashboardWebStringId.MapLockNavigationLocked" | "DashboardWebStringId.MapLockNavigationUnlocked" | "DashboardWebStringId.ConditionalFormatting.BarOptions" | "DashboardWebStringId.ConditionalFormatting.CalculatedBy" | "DashboardWebStringId.ConditionalFormatting.IconType" | "DashboardWebStringId.ConditionalFormatting.PredefinedColor" | "DashboardWebStringId.ConditionalFormatting.AppearanceType" | "DashboardWebStringId.ConditionalFormatting.FontStyle" | "DashboardWebStringId.ConditionalFormatting.FontFamily" | "DashboardWebStringId.ConditionalFormatting.FontRegular" | "DashboardWebStringId.ConditionalFormatting.IconType.None" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowSideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGraySideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDash" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedTriangleDown" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenTriangleUp" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingHalfGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1QuarterGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1Bar" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1FilledBox" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTriangle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedDiamond" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedFlag" | "DashboardWebStringId.ConditionalFormatting.IntersectionColumnDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionRowDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionLevelMode" | "DashboardWebStringId.ConditionalFormatting.GradientRangeBar" | "DashboardWebStringId.ConditionalFormatting.RangeGradient" | "DashboardWebStringId.ConditionalFormatting.SegmentNumber" | "DashboardWebStringId.ConditionalFormatting.ValueComparison" | "DashboardWebStringId.ConditionalFormatting.Ranges" | "DashboardWebStringId.ConditionalFormatting.AverageType" | "DashboardWebStringId.ConditionalFormatting.Above" | "DashboardWebStringId.ConditionalFormatting.AboveOrEqual" | "DashboardWebStringId.ConditionalFormatting.Below" | "DashboardWebStringId.ConditionalFormatting.BelowOrEqual" | "DashboardWebStringId.ConditionalFormatting.StyleSettingsType" | "DashboardWebStringId.ConditionalFormatting.Positive" | "DashboardWebStringId.ConditionalFormatting.Negative" | "DashboardWebStringId.ConditionalFormatting.MinimumType" | "DashboardWebStringId.ConditionalFormatting.MaximumType" | "DashboardWebStringId.ConditionalFormatting.DateType" | "DashboardWebStringId.ConditionalFormatting.DateType.None" | "DashboardWebStringId.ConditionalFormatting.DateType.SpecificDate" | "DashboardWebStringId.ConditionalFormatting.DateType.BeyondThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.NextWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.Tomorrow" | "DashboardWebStringId.ConditionalFormatting.DateType.Today" | "DashboardWebStringId.ConditionalFormatting.DateType.Yesterday" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.LastWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.PriorThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.Empty" | "DashboardWebStringId.ConditionalFormatting.DateType.User" | "DashboardWebStringId.ConditionalFormatting.DateType.Beyond" | "DashboardWebStringId.ConditionalFormatting.DateType.ThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.ThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAfter1" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAfter2" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo1" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo2" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo3" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo4" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo5" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo6" | "DashboardWebStringId.ConditionalFormatting.DateType.Earlier" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeDataItem" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeCard" | "DashboardWebStringId.Colorization.NoSelectedSchema" | "DashboardWebStringId.Colorization.ColorSchemes" | "DashboardWebStringId.LayoutHasBeenChangedDialogMessage" | "DashboardWebStringId.SaveConfirmationDialogMessage" | "DashboardWebStringId.SaveChangesDialogMessage" | "DashboardWebStringId.Dialog.ChangeDataMemberMessage" | "DashboardWebStringId.Dialog.RemovedDataItemsMessage" | "DashboardWebStringId.Dialog.ConfirmChanges" | "DashboardWebStringId.Dialog.Save" | "DashboardWebStringId.Dialog.DoNotSave" | "DashboardWebStringId.Dialog.ButtonYes" | "DashboardWebStringId.Dialog.ButtonDontChange" | "DashboardWebStringId.Colorization.ColorSchemeType" | "DashboardWebStringId.Colorization.MeasureNames" | "DashboardWebStringId.Colorization.AddColor" | "DashboardWebStringId.Colorization.ValidationSelectMeasure" | "DashboardWebStringId.ColoringModeAuto" | "DashboardWebStringId.ColoringModeOff" | "DashboardWebStringId.ColoringModeOn" | "DashboardWebStringId.ColorScheme.Empty" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButton" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip" | "DashboardWebStringId.ConditionalFormatting.Miscellaneous" | "DashboardWebStringId.Dashboards" | "DashboardWebStringId.EditInDesigner" | "DashboardWebStringId.NoDashboards" | "DashboardWebStringId.AddNewDashboard" | "DashboardWebStringId.NewDashboard" | "DashboardWebStringId.Binding.Searching" | "DashboardWebStringId.Binding.EmptySearchResult" | "DashboardWebStringId.Errors.AttemptToLoadData" | "DashboardWebStringId.ConditionType" | "DashboardWebStringId.ConditionalFormatting.UnsupportedDataType" | "DashboardWebStringId.FormatRule" | "DashboardWebStringId.Notification.DashboardSaving" | "DashboardWebStringId.Notification.DashboardSaved" | "DashboardWebStringId.Notification.DashboardCanNotBeSaved" | "DashboardWebStringId.Notification.DashboardSavingIsNotAvailable" | "DashboardWebStringId.Notification.AttemptToLoadDashboards" | "DashboardWebStringId.Notification.DashboardLoading" | "DashboardWebStringId.Notification.AttemptToLoadDashboard" | "DashboardWebStringId.Notification.AttemptToConnectionStrings" | "DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode" | "DashboardWebStringId.Notification.AttemptToLoadParameterValues" | "DashboardWebStringId.Notification.AttemptToGetUnderlyingData" | "DashboardWebStringId.Notification.AttemptToConvertItemToType" | "DashboardWebStringId.Notification.AttemptToLoadDimensionUniqueValues" | "DashboardWebStringId.Notification.AttemptToLoadFieldListForDataSource" | "DashboardWebStringId.Notification.AttemptToGetColorScheme" | "DashboardWebStringId.Notification.NewDashboardCannotBeCreated" | "DashboardWebStringId.Notification.ErrorHasOccuredOn" | "DashboardWebStringId.Notification.UnsupportedDataSourceType" | "DashboardWebStringId.LimitVisibleData.DisplayAllDataTooltip" | "DashboardWebStringId.LimitVisibleData.IncreasePerformanceTooltip" | "DashboardWebStringId.ConditionalFormatting.Condition" | "DashboardWebStringId.CardLayout.MinWidth" | "DashboardWebStringId.CardLayout.MaxWidth" | "DashboardWebStringId.CardLayout.Editor.CardLayout" | "DashboardWebStringId.CardLayout.Editor.FormatOptions" | "DashboardWebStringId.CardLayout.LayoutOptions" | "DashboardWebStringId.CardLayout.ResetTemplate" | "DashboardWebStringId.CardLayout.ApplyToAllCards" | "DashboardWebStringId.Binding.ValuesPattern" | "DashboardWebStringId.Parameters.ParameterNameShouldBeUnique" | "DashboardWebStringId.Title.ImageEmbedded" | "DashboardWebStringId.Title.ImageLinked" | "DashboardWebStringId.Title.ImageNone" | "DashboardWebStringId.RangeFilter.SetDefaultCustomPeriod" | "DashboardWebStringId.RangeFilter.ClearDefaultCustomPeriod" | "DashboardWebStringId.MobileLayout.Back" | "DashboardWebStringId.MobileLayout.SwitchToViewer" | "DashboardWebStringId.Search" | "DashboardStringId.DefaultNameTabPage" | "DashboardStringId.DefaultNameChartPane" | "DashboardStringId.NewCalculatedFieldNamePrefix" | "DashboardStringId.NewParameterNamePrefix" | "AnalyticsCoreStringId.Parameter_Type_String" | "AnalyticsCoreStringId.Parameter_Type_DateTime" | "AnalyticsCoreStringId.Parameter_Type_Int16" | "AnalyticsCoreStringId.Parameter_Type_Int32" | "AnalyticsCoreStringId.Parameter_Type_Int64" | "AnalyticsCoreStringId.Parameter_Type_Float" | "AnalyticsCoreStringId.Parameter_Type_Double" | "AnalyticsCoreStringId.Parameter_Type_Decimal" | "AnalyticsCoreStringId.Parameter_Type_Boolean" | "AnalyticsCoreStringId.Parameter_Type_Guid" | "AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption" | "DataAccessUIStringId.FiltersView" | "DashboardStringId.SeriesTypeGroupArea" | "DashboardStringId.SeriesTypeGroupBar" | "DashboardStringId.SeriesTypeGroupBubble" | "DashboardStringId.SeriesTypeGroupFinancial" | "DashboardStringId.SeriesTypeGroupPointLine" | "DashboardStringId.SeriesTypeGroupRange" | "DashboardStringId.FunctionCategoryWindow" | "DashboardStringId.FunctionCategoryAggregate" | "DashboardStringId.FunctionCategoryAdvanced" | "DashboardStringId.FunctionDescriptionWindowAvg" | "DashboardStringId.FunctionDescriptionRunningMin" | "DashboardStringId.FunctionDescriptionTotal" | "DashboardStringId.FunctionDescriptionRankCompetition" | "DashboardStringId.FunctionDescriptionLookup" | "DashboardStringId.FunctionDescriptionRunningCount" | "DashboardStringId.FunctionDescriptionWindowMax" | "DashboardStringId.FunctionDescriptionVarp" | "DashboardStringId.FunctionDescriptionRunningAvg" | "DashboardStringId.FunctionDescriptionFirst" | "DashboardStringId.FunctionDescriptionWindowMin" | "DashboardStringId.FunctionDescriptionWindowStdDev" | "DashboardStringId.FunctionDescriptionLast" | "DashboardStringId.FunctionDescriptionWindowCount" | "DashboardStringId.FunctionDescriptionCountDistinct" | "DashboardStringId.FunctionDescriptionIndex" | "DashboardStringId.FunctionDescriptionWindowStdDevp" | "DashboardStringId.FunctionDescriptionWindowMode" | "DashboardStringId.FunctionDescriptionRunningMax" | "DashboardStringId.FunctionDescriptionRankPercentile" | "DashboardStringId.FunctionDescriptionRankDense" | "DashboardStringId.FunctionDescriptionWindowSum" | "DashboardStringId.FunctionDescriptionWindowCountDistinct" | "DashboardStringId.FunctionDescriptionStdDevp" | "DashboardStringId.FunctionDescriptionSize" | "DashboardStringId.FunctionDescriptionMedian" | "DashboardStringId.FunctionDescriptionRankModified" | "DashboardStringId.FunctionDescriptionWindowMedian" | "DashboardStringId.FunctionDescriptionRunningSum" | "DashboardStringId.FunctionDescriptionWindowVarp" | "DashboardStringId.FunctionDescriptionWindowVar" | "DashboardStringId.FunctionDescriptionStdDev" | "DashboardStringId.FunctionDescriptionRankUnique" | "DashboardStringId.FunctionDescriptionVar" | "DashboardStringId.FunctionDescriptionAggr" | "DashboardStringId.FunctionDescriptionAggrJoinRule" | "DashboardStringId.FunctionDescriptionWindowDefinition" | "DashboardStringId.FunctionDescriptionWindowDefinitionPartitionBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderAsc" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderDesc" | "DashboardStringId.AggregateExFunctionDescriptionCountNotNull" | "DashboardStringId.AggregateExFunctionDescriptionMode" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHour" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinute" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinuteSecond" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateMonthYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear2" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateQuarterYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetQuarter" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfMonth" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime3" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime4" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime5" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime6" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToBoolean" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToDateTime" | "DashboardStringId.SparklineIndicationModeLine" | "DashboardStringId.SparklineIndicationModeArea" | "DashboardStringId.SparklineIndicationModeBar" | "DashboardStringId.SparklineIndicationModeWinLoss" | "DashboardStringId.DefaultNameDateFilterItem" | "DashboardWebStringId.DateFilter.FilterType" | "DashboardWebStringId.DateFilter.FilterTypeExact" | "DashboardWebStringId.DateFilter.FilterTypeAfter" | "DashboardWebStringId.DateFilter.FilterTypeBefore" | "DashboardWebStringId.DateFilter.FilterTypeBetween" | "DashboardWebStringId.DateFilter.ArrangementMode" | "DashboardWebStringId.DateFilter.ArrangementModeAutoHeight" | "DashboardWebStringId.DateFilter.ArrangementModeHorizontal" | "DashboardWebStringId.DateFilter.ArrangementModeVertical" | "DashboardWebStringId.DateFilter.DatePickerLocation" | "DashboardWebStringId.DateFilter.DatePickerLocationFar" | "DashboardWebStringId.DateFilter.DatePickerLocationNear" | "DashboardWebStringId.DateFilter.DatePickerLocationHidden" | "DashboardStringId.DateFilterDisplayTextPattern" | "DashboardStringId.DateFilterDatePickerButtonDefaultText" | "DashboardStringId.FromDatePeriodCaption" | "DashboardStringId.ToDatePeriodCaption" | "DashboardStringId.FromToDatePeriodCaption" | "DashboardStringId.UniqueNameValidationMessage" | "DashboardStringId.GridTotalAutoTemplate" | "DashboardStringId.GridTotalValueTemplate" | "DashboardStringId.GridTotalTemplate" | "DashboardStringId.GridTotalTypeCount" | "DashboardStringId.GridTotalTypeMin" | "DashboardStringId.GridTotalTypeMax" | "DashboardStringId.GridTotalTypeAvg" | "DashboardStringId.GridTotalTypeSum" | "DashboardStringId.ActionShowDataInspector" | "DashboardStringId.InspectedData" | "DashboardStringId.InspectedTypeFormatString" | "DashboardStringId.AggregatedDataType" | "DashboardStringId.RawDataType" | "DashboardStringId.OLAPUnavailableRawData" | "DashboardStringId.SparklineValuesSeparator" | "DashboardStringId.SparklineArgumentValueSeparator" | "DashboardWebStringId.Grid.FilterClause.ApplyFilter" | "DashboardWebStringId.Grid.FilterClause.ResetOperation" | "DashboardWebStringId.Grid.FilterClause.Contains" | "DashboardWebStringId.Grid.FilterClause.DoesNotContain" | "DashboardWebStringId.Grid.FilterClause.StartsWith" | "DashboardWebStringId.Grid.FilterClause.EndsWith" | "DashboardWebStringId.Grid.FilterClause.Equals" | "DashboardWebStringId.Grid.FilterClause.DoesNotEqual" | "DashboardWebStringId.Grid.FilterClause.Less" | "DashboardWebStringId.Grid.FilterClause.Greater" | "DashboardWebStringId.Grid.FilterClause.LessOrEqual" | "DashboardWebStringId.Grid.FilterClause.GreaterOrEqual" | "DashboardWebStringId.Grid.FilterClause.Between" | "DashboardWebStringId.Grid.FilterClause.BetweenStart" | "DashboardWebStringId.Grid.FilterClause.BetweenEnd" | "DashboardWebStringId.AccordionTab.Content" | "DashboardWebStringId.TextBoxItemEditor.NoFields" | "DashboardWebStringId.TextBoxItemEditor.InsertField" | "DashboardWebStringId.TextBoxItemEditor.EditTextButton" | "DashboardWebStringId.TextBoxItemEditor.DialogCaption" | "DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose" | "DashboardWebStringId.TextBoxItemEditor.DialogClose" | "DashboardStringId.StartDate" | "DashboardStringId.EndDate" | "DashboardWebStringId.AccordionTab.MeasureFilter" | "DashboardStringId.FunctionDescriptionAggregateFilter" | "DashboardWebStringId.TabPages" | "DashboardWebStringId.More" | "DashboardStringId.MeasureFilterCaptionFormatString";
	    };
	    sparkline: {
	        [key: string]: "DashboardStringId.ActionClearMasterFilter" | "DashboardStringId.ActionClearSelection" | "DashboardStringId.ActionOtherValues" | "DashboardStringId.ActionDrillUp" | "DashboardStringId.ActionExportTo" | "DashboardStringId.ActionExportToPdf" | "DashboardStringId.ActionExportToImage" | "DashboardStringId.ActionExportToExcel" | "DashboardStringId.RangeFilterCustomDateTimePeriod" | "DashboardStringId.ActionExportTemplate" | "DashboardStringId.ActionAllowMultiselection" | "DashboardStringId.DashboardNullValue" | "DashboardStringId.TopNOthersValue" | "DashboardStringId.DashboardErrorValue" | "DashboardStringId.DateTimeQuarterFormat" | "DashboardStringId.MessageLoading" | "DashboardStringId.ParametersFormCaption" | "DashboardStringId.ParametersSelectorText" | "DashboardStringId.ParametersFormAllowNullColumnCaption" | "DashboardStringId.ParametersFormValueColumnCaption" | "DashboardStringId.ParametersFormNameColumnCaption" | "DashboardStringId.ButtonOK" | "DashboardStringId.ButtonCancel" | "DashboardStringId.SelectDate" | "DashboardStringId.ButtonReset" | "DashboardStringId.ButtonSubmit" | "DashboardStringId.ButtonApply" | "DashboardStringId.ButtonExport" | "DashboardStringId.GridResetColumnWidths" | "DashboardStringId.GridSortAscending" | "DashboardStringId.GridSortDescending" | "DashboardStringId.GridClearSorting" | "DashboardStringId.PivotGridTotal" | "DashboardStringId.PivotGridGrandTotal" | "DashboardStringId.ChartTotalValue" | "DashboardStringId.PageLayout" | "DashboardStringId.PageLayoutAuto" | "DashboardStringId.PageLayoutPortrait" | "DashboardStringId.PageLayoutLandscape" | "DashboardStringId.PaperKind" | "DashboardStringId.PaperKindLetter" | "DashboardStringId.PaperKindLegal" | "DashboardStringId.PaperKindExecutive" | "DashboardStringId.PaperKindA5" | "DashboardStringId.PaperKindA4" | "DashboardStringId.PaperKindA3" | "DashboardStringId.ScaleMode" | "DashboardStringId.ScaleModeNone" | "DashboardStringId.ScaleModeUseScaleFactor" | "DashboardStringId.ScaleModeAutoFitToPagesWidth" | "DashboardStringId.AutoFitPageCount" | "DashboardStringId.ScaleFactor" | "DashboardStringId.PrintHeadersOnEveryPage" | "DashboardStringId.FitToPageWidth" | "DashboardStringId.SizeMode" | "DashboardStringId.SizeModeNone" | "DashboardStringId.SizeModeStretch" | "DashboardStringId.SizeModeZoom" | "DashboardStringId.AutoArrangeContent" | "DashboardStringId.ImageFormat" | "DashboardStringId.ExcelFormat" | "DashboardStringId.CsvValueSeparator" | "DashboardStringId.ExportFilters" | "DashboardStringId.ExportParameters" | "DashboardStringId.DashboardStatePosition" | "DashboardStringId.Resolution" | "DashboardStringId.ShowTitle" | "DashboardStringId.Title" | "DashboardStringId.FileName" | "DashboardStringId.FilterStatePresentationAfter" | "DashboardStringId.FilterStatePresentationAfterAndSplitPage" | "DashboardStringId.FilterStatePresentationSplitSheet" | "DashboardStringId.MessageCustomItemIsNotSupported" | "DashboardStringId.MessageGridHasNoData" | "DashboardStringId.MessagePivotHasNoData" | "DashboardStringId.SparklineTooltipStartValue" | "DashboardStringId.SparklineTooltipEndValue" | "DashboardStringId.SparklineTooltipMinValue" | "DashboardStringId.SparklineTooltipMaxValue" | "DashboardStringId.OpenCaption" | "DashboardStringId.HighCaption" | "DashboardStringId.LowCaption" | "DashboardStringId.CloseCaption" | "DashboardStringId.InitialExtent" | "DashboardStringId.FilterElementShowAllItem" | "DashboardStringId.NumericFormatUnitSymbolThousands" | "DashboardStringId.NumericFormatUnitSymbolMillions" | "DashboardStringId.NumericFormatUnitSymbolBillions" | "DashboardStringId.ActionSelectDateTimePeriod" | "DashboardStringId.RangeFilterSelectRange" | "DashboardStringId.FilterElementCheckedComboBoxNoDataCaption" | "DashboardStringId.FilterElementRadioComboBoxNoDataCaption" | "DashboardStringId.FilterElementNoDataToDisplay" | "DashboardStringId.RangeFilterSelectRangeFromCaption" | "DashboardStringId.RangeFilterSelectRangeToCaption" | "DashboardWebStringId.DashboardParameters" | "DashboardStringId.DataSourceDataMember" | "DashboardStringId.DescriptionMeasures" | "DashboardWebStringId.TextBoxFormatText" | "DashboardStringId.NumericFormatUnitCaption" | "DashboardWebStringId.SummaryType" | "DashboardStringId.CalculationTypeExpression" | "DevExpressWebStringId.CalculatedFieldDataType" | "DashboardStringId.ValueCaption" | "DashboardStringId.Value1Caption" | "DashboardStringId.Value2Caption" | "DashboardStringId.CommandFormatRuleTopBottom" | "DashboardStringId.CommandFormatRuleAboveBelowAverage" | "DashboardStringId.CommandFormatRuleBar" | "DashboardStringId.CommandFormatRuleColorRangeBar" | "DashboardStringId.CommandFormatRuleGradientRangeBar" | "DashboardStringId.FormatRuleStyleAppearance" | "DashboardStringId.FormatRuleStyleIcons" | "DashboardStringId.FormatRuleNegativeStyle" | "DashboardStringId.CommandFormatRuleExpression" | "DashboardWebStringId.TopNMode" | "DashboardStringId.CommandFormatRuleRangeSet" | "DashboardStringId.CommandFormatRuleValue" | "DashboardStringId.CommandFormatRuleDateOccurring" | "DashboardWebStringId.ConditionalFormatting.Appearance.BackColor" | "DashboardWebStringId.ConditionalFormatting.Appearance.ForeColor" | "DashboardStringId.DescriptionBoundImageAttribute" | "DashboardWebStringId.ShowCaptionText" | "DashboardWebStringId.DisplayItemAsPage" | "DashboardStringId.DefaultNameItemGroup" | "DashboardStringId.DefaultNameTabContainerItem" | "DashboardStringId.DefaultDataSourceName" | "DashboardWebStringId.CrossDataSourceFiltering" | "DashboardStringId.RangeFilterCalculationAlongSeries" | "DashboardStringId.RangeFilterCalculationAlongArgument" | "DashboardStringId.DescriptionItemSeries" | "DashboardStringId.DescriptionSeries" | "DashboardWebStringId.Chart.SeriesType" | "DashboardStringId.DescriptionDimensions" | "DashboardWebStringId.TreeView.AutoExpand" | "DashboardWebStringId.ConditionalFormatting.ConditionMinimum" | "DashboardWebStringId.ConditionalFormatting.ConditionMaximum" | "DashboardStringId.DescriptionItemDimension" | "DashboardStringId.DescriptionItemMeasure" | "DashboardWebStringId.Grid.MergeCells" | "DashboardWebStringId.Grid.ColumnWidthMode" | "DashboardWebStringId.Grid.BandedRows" | "DashboardWebStringId.Grid.VerticalLines" | "DashboardWebStringId.Grid.HorizontalLines" | "DashboardWebStringId.Grid.ColumnHeaders" | "DashboardWebStringId.Grid.WordWrap" | "DashboardStringId.ActualValueCaption" | "DashboardStringId.TargetValueCaption" | "DashboardStringId.UriPatternCaption" | "DashboardStringId.UriCaption" | "DashboardStringId.DisplayValueCaption" | "DashboardStringId.WeightCaption" | "DashboardStringId.DescriptionItemColor" | "DashboardStringId.Latitude" | "DashboardStringId.Longitude" | "DashboardWebStringId.GeoPointMapClusterization" | "DashboardWebStringId.MapLockNavigation" | "DashboardWebStringId.WeightedLegendGalleryGroup" | "DashboardStringId.DescriptionItemArgument" | "DashboardWebStringId.PieMapIsWeighted" | "DashboardWebStringId.InteractivityOptions.IgnoreMasterFilters" | "DashboardWebStringId.InteractivityOptions.DrillDown" | "DashboardWebStringId.Pie.ShowCaptions" | "DashboardStringId.DescriptionColumns" | "DashboardStringId.DescriptionRows" | "DashboardStringId.DescriptionValues" | "DashboardStringId.DescriptionArguments" | "DashboardStringId.TextGroupIntervalAlphabetical" | "DashboardStringId.ActionMaximizeDashboardItem" | "DashboardStringId.ActionRestoreDashboardItem" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataSource" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DataMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.ValueMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.DisplayMember" | "DevExpress.DashboardCommon.DynamicListLookUpSettings.SortOrder" | "DevExpress.DashboardCommon.DashboardParameter.Visible" | "DevExpress.DashboardCommon.DashboardParameter.Description" | "DevExpress.DashboardCommon.DashboardParameter.AllowMultiselect" | "DevExpress.DashboardCommon.DashboardParameter.AllowNull" | "DevExpress.DashboardCommon.DashboardParameter.SelectAllValues" | "DevExpress.DashboardCommon.StaticListLookUpSettings.Values" | "DevExpress.DashboardCommon.DimensionSortOrder.Ascending" | "DevExpress.DashboardCommon.DimensionSortOrder.Descending" | "DevExpress.DashboardCommon.DimensionSortOrder.None" | "DashboardWebStringId.AccordionTab.ScatterChartPointLabelOptions" | "DashboardWebStringId.AccordionTab.ChoroplethMapShapeLabelsAttribute" | "DashboardStringId.CommandFormatRuleTopN" | "DashboardWebStringId.Type" | "DashboardWebStringId.Grid.ColumnWidth" | "DashboardWebStringId.AccordionTab.ShowTotals" | "DashboardWebStringId.AccordionTab.Layout" | "DashboardWebStringId.AccordionTab.PivotInitialState" | "DashboardWebStringId.AccordionTab.ImageOptions" | "DashboardWebStringId.AccordionTab.Labels" | "DashboardWebStringId.AccordionTab.MapLegend" | "DashboardWebStringId.AccordionTab.WeightedLegend" | "DashboardWebStringId.AccordionTab.Common" | "DashboardWebStringId.AccordionTab.ChartLegend" | "DashboardWebStringId.Grid.AutoFitToContentsColumnWidthMode" | "DashboardWebStringId.Grid.AutoFitToGridColumnWidthMode" | "DashboardWebStringId.Grid.ManualGridColumnWidthMode" | "DashboardStringId.DateTimeIntervalYear" | "DashboardStringId.DateTimeIntervalQuarter" | "DashboardStringId.DateTimeIntervalMonth" | "DashboardStringId.DateTimeIntervalWeek" | "DashboardStringId.DateTimeIntervalDay" | "DashboardStringId.DateTimeIntervalHour" | "DashboardStringId.DateTimeIntervalMinute" | "DashboardStringId.DateTimeIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalYear" | "DashboardStringId.DateTimeGroupIntervalQuarter" | "DashboardStringId.DateTimeGroupIntervalMonth" | "DashboardStringId.DateTimeGroupIntervalDay" | "DashboardStringId.DateTimeGroupIntervalHour" | "DashboardStringId.DateTimeGroupIntervalMinute" | "DashboardStringId.DateTimeGroupIntervalSecond" | "DashboardStringId.DateTimeGroupIntervalDayOfYear" | "DashboardStringId.DateTimeGroupIntervalDayOfWeek" | "DashboardStringId.DateTimeGroupIntervalWeekOfYear" | "DashboardStringId.DateTimeGroupIntervalWeekOfMonth" | "DashboardStringId.DateTimeGroupIntervalMonthYear" | "DashboardStringId.DateTimeGroupIntervalQuarterYear" | "DashboardStringId.DateTimeGroupIntervalWeekYear" | "DashboardStringId.DateTimeGroupIntervalDayMonthYear" | "DashboardStringId.DateTimeGroupIntervalDateHour" | "DashboardStringId.DateTimeGroupIntervalDateHourMinute" | "DashboardStringId.DateTimeGroupIntervalDateHourMinuteSecond" | "DashboardStringId.DateTimeGroupIntervalExactDate" | "DashboardStringId.GroupIntervalNone" | "DashboardWebStringId.Treemap.StripedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SquarifiedLayoutAlgorithm" | "DashboardWebStringId.Treemap.SliceAndDiceLayoutAlgorithm" | "DashboardWebStringId.Treemap.TileLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.TileLabelsNone" | "DashboardWebStringId.Treemap.TileLabelsValue" | "DashboardWebStringId.Treemap.TileLabelsArgument" | "DashboardWebStringId.Treemap.TileTooltipsArgumentAndValue" | "DashboardWebStringId.Treemap.TileTooltipsArgument" | "DashboardWebStringId.Treemap.TileTooltipsValue" | "DashboardWebStringId.Treemap.TileTooltipsNone" | "DashboardWebStringId.Treemap.TopLeftToBottomRightLayoutDirection" | "DashboardWebStringId.Treemap.TopRightToBottomLeftLayoutDirection" | "DashboardWebStringId.Treemap.BottomLeftToTopRightLayoutDirection" | "DashboardWebStringId.Treemap.BottomRightToTopLeftLayoutDirection" | "DashboardWebStringId.Treemap.LayoutDirection" | "DashboardWebStringId.Treemap.GroupLabelsNone" | "DashboardWebStringId.Treemap.GroupLabelsArgument" | "DashboardWebStringId.Treemap.GroupLabelsValue" | "DashboardWebStringId.Treemap.GroupLabelsArgumentAndValue" | "DashboardWebStringId.Treemap.GroupTooltipsNone" | "DashboardWebStringId.Treemap.GroupTooltipsArgument" | "DashboardWebStringId.Treemap.GroupTooltipsValue" | "DashboardWebStringId.Treemap.GroupTooltipsArgumentAndValue" | "DashboardStringId.RankOrderAscending" | "DashboardStringId.RankOrderDescending" | "DashboardStringId.DateTimeFormatYearFormatDefaultCaption" | "DashboardStringId.DateTimeFormatYearFormatFullCaption" | "DashboardStringId.DateTimeFormatYearFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatQuarterFormatDefaultCaption" | "DashboardStringId.DateTimeFormatQuarterFormatNumericCaption" | "DashboardStringId.DateTimeFormatQuarterFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatDefaultCaption" | "DashboardStringId.DateTimeFormatMonthFormatFullCaption" | "DashboardStringId.DateTimeFormatMonthFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatMonthFormatNumericCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatFullCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatAbbreviatedCaption" | "DashboardStringId.DateTimeFormatDayOfWeekFormatNumericCaption" | "DashboardStringId.DateTimeFormatDateFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateFormatLongCaption" | "DashboardStringId.DateTimeFormatDateFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatDefaultCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatLongCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatShortCaption" | "DashboardStringId.DateTimeFormatDateTimeFormatTimeOnlyCaption" | "DashboardStringId.ExactDateFormatYear" | "DashboardStringId.ExactDateFormatQuarter" | "DashboardStringId.ExactDateFormatMonth" | "DashboardStringId.ExactDateFormatDay" | "DashboardStringId.ExactDateFormatHour" | "DashboardStringId.ExactDateFormatMinute" | "DashboardStringId.ExactDateFormatSecond" | "DashboardWebStringId.FormatType" | "DashboardWebStringId.TopN.Top" | "DashboardWebStringId.TopN.Bottom" | "DashboardWebStringId.DimensionSortBy" | "DashboardStringId.NumericFormatUnitAutoCaption" | "DashboardStringId.NumericFormatFormatTypeAutoCaption" | "DashboardStringId.NumericFormatFormatTypeGeneralCaption" | "DashboardStringId.NumericFormatFormatTypeNumberCaption" | "DashboardStringId.NumericFormatFormatTypeCurrencyCaption" | "DashboardStringId.NumericFormatFormatTypeScientificCaption" | "DashboardStringId.NumericFormatFormatTypePercentCaption" | "DashboardStringId.NumericFormatUnitOnesCaption" | "DashboardStringId.NumericFormatUnitThousandsCaption" | "DashboardStringId.NumericFormatUnitMillionsCaption" | "DashboardStringId.NumericFormatUnitBillionsCaption" | "DashboardStringId.DeltaValueTypeActualValueCaption" | "DashboardStringId.DeltaValueTypeAbsoluteVariationCaption" | "DashboardStringId.DeltaValueTypePercentVariationCaption" | "DashboardStringId.DeltaValueTypePercentOfTargetCaption" | "DashboardStringId.DeltaValueTypeTargetValueCaption" | "DashboardStringId.DeltaIndicationModeGreaterIsGoodCaption" | "DashboardStringId.DeltaIndicationModeLessIsGoodCaption" | "DashboardStringId.DeltaIndicationModeWarningIfGreaterCaption" | "DashboardStringId.DeltaIndicationModeWarningIfLessCaption" | "DashboardStringId.DeltaIndicationModeNoIndicationCaption" | "DashboardStringId.DeltaThresholdTypeAbsolute" | "DashboardStringId.DeltaThresholdTypePercent" | "DashboardStringId.CommandDimensionGroupChildValues" | "DashboardStringId.SeriesTypeBar" | "DashboardStringId.SeriesTypeStackedBar" | "DashboardStringId.SeriesTypeFullStackedBar" | "DashboardStringId.SeriesTypePoint" | "DashboardStringId.SeriesTypeLine" | "DashboardStringId.SeriesTypeStackedLine" | "DashboardStringId.SeriesTypeFullStackedLine" | "DashboardStringId.SeriesTypeStepLine" | "DashboardStringId.SeriesTypeSpline" | "DashboardStringId.SeriesTypeArea" | "DashboardStringId.SeriesTypeStackedArea" | "DashboardStringId.SeriesTypeFullStackedArea" | "DashboardStringId.SeriesTypeStepArea" | "DashboardStringId.SeriesTypeSplineArea" | "DashboardStringId.SeriesTypeStackedSplineArea" | "DashboardStringId.SeriesTypeFullStackedSplineArea" | "DashboardWebStringId.Chart.ShowLegend" | "DashboardStringId.DefaultNameBoundImageItem" | "DashboardStringId.DefaultNameImageItem" | "DashboardStringId.DefaultNameTextBoxItem" | "DashboardStringId.DefaultNameCardItem" | "DashboardStringId.DefaultNameChartItem" | "DashboardStringId.DefaultNameComboBoxItem" | "DashboardStringId.DefaultNameListBoxItem" | "DashboardStringId.DefaultNameTreeViewItem" | "DashboardStringId.DefaultNameGaugeItem" | "DashboardStringId.DefaultNameGridItem" | "DashboardStringId.GridHyperlinkUriPatternErrorMessage" | "DashboardWebStringId.DefaultNameBubbleMapItem" | "DashboardWebStringId.DefaultNameChoroplethMapItem" | "DashboardWebStringId.DefaultNameGeoPointMapItem" | "DashboardWebStringId.DefaultNamePieMapItem" | "DashboardStringId.DefaultNamePieItem" | "DashboardStringId.DefaultNamePivotItem" | "DashboardStringId.DefaultNameRangeFilterItem" | "DashboardStringId.DefaultNameScatterChartItem" | "DashboardStringId.DefaultNameTreemapItem" | "DashboardStringId.DescriptionMaps" | "DashboardStringId.EntireRangePeriodCaption" | "DashboardStringId.CalculationTypePercentOfTotal" | "DashboardStringId.CalculationTypeDifference" | "DashboardStringId.CalculationTypePercentageDifference" | "DashboardStringId.CalculationTypeRunningTotal" | "DashboardStringId.CalculationTypeMovingCalculation" | "DashboardStringId.CalculationTypeRank" | "DashboardStringId.ColorPaletteIndex" | "DashboardStringId.DifferenceCalculationTargetPrevious" | "DashboardStringId.DifferenceCalculationTargetNext" | "DashboardStringId.DifferenceCalculationTargetFirst" | "DashboardStringId.DifferenceCalculationTargetLast" | "DashboardStringId.SummaryTypeCount" | "DashboardStringId.SummaryTypeSum" | "DashboardStringId.SummaryTypeMin" | "DashboardStringId.SummaryTypeMax" | "DashboardStringId.SummaryTypeAverage" | "DashboardStringId.SummaryTypeStdDev" | "DashboardStringId.SummaryTypeStdDevp" | "DashboardStringId.SummaryTypeVar" | "DashboardStringId.SummaryTypeVarp" | "DashboardStringId.SummaryTypeCountDistinct" | "DashboardStringId.SummaryTypeMedian" | "DashboardStringId.SummaryTypeMode" | "DashboardStringId.RankTypeUnique" | "DashboardStringId.RankTypeCompetition" | "DashboardStringId.RankTypeDense" | "DashboardStringId.RankTypeModified" | "DashboardStringId.RankTypePercentile" | "DashboardStringId.CardCalculationAlongCards" | "DashboardStringId.CardCalculationAlongSparklineArgument" | "DashboardStringId.CardCalculationAlongCardsAndSparklineArgument" | "DashboardStringId.CardCalculationAlongSparklineArgumentAndCards" | "DashboardStringId.ChartCalculationAlongArguments" | "DashboardStringId.ChartCalculationAlongSeries" | "DashboardStringId.ChartCalculationAlongArgumentsAndSeries" | "DashboardStringId.ChartCalculationAlongSeriesAndArguments" | "DashboardStringId.GridCalculationAlongRows" | "DashboardStringId.GridCalculationAlongSparklineArgument" | "DashboardStringId.GridCalculationAlongRowsAndSparklineArgument" | "DashboardStringId.GridCalculationAlongSparklineArgumentAndRows" | "DashboardStringId.PivotCalculationAlongColumns" | "DashboardStringId.PivotCalculationAlongRows" | "DashboardStringId.PivotCalculationAlongColumnsAndRows" | "DashboardStringId.PivotCalculationAlongRowsAndColumns" | "DashboardStringId.PivotCalculationAlongGroupsInColumns" | "DashboardStringId.PivotCalculationAlongGroupsInRows" | "DashboardStringId.PivotCalculationAlongGroupsInColumnsAndRows" | "DashboardStringId.PivotCalculationAlongGroupsInRowsAndColumns" | "DashboardStringId.PieCalculationAlongArguments" | "DashboardStringId.PieCalculationAlongSeries" | "DashboardStringId.PieCalculationAlongArgumentsAndSeries" | "DashboardStringId.PieCalculationAlongSeriesAndArguments" | "DashboardStringId.RangeFilterCalculationAlongArgumentAndSeries" | "DashboardStringId.RangeFilterCalculationAlongSeriesAndArgument" | "DashboardStringId.GaugeCalculationAlongGauges" | "DashboardStringId.ScatterCalculationAlongArguments" | "DashboardStringId.CalculationAlongSpecificDimensions" | "DashboardStringId.CalculatedFieldTypeString" | "DashboardStringId.CalculatedFieldTypeLong" | "DashboardStringId.CalculatedFieldTypeDecimal" | "DashboardStringId.CalculatedFieldTypeBoolean" | "DashboardStringId.CalculatedFieldTypeDateTime" | "DashboardStringId.CalculatedFieldTypeDouble" | "DashboardStringId.CalculatedFieldTypeAuto" | "DashboardStringId.CalculatedFieldTypeObject" | "DashboardStringId.DefaultEFDataSourceName" | "DashboardStringId.DefaultExcelDataSourceName" | "DashboardStringId.DefaultFileExtractDataSourceName" | "DashboardStringId.DefaultObjectDataSourceName" | "DashboardStringId.DefaultOlapDataSourceName" | "DashboardStringId.DefaultSqlDataSourceName" | "DashboardStringId.DefaultJsonDataSourceName" | "DashboardStringId.DefaultXpoDataSourceName" | "DashboardStringId.OlapRaggedHierarchyNoneItemCaption" | "DashboardStringId.FormatRuleApplyToColumn" | "DashboardStringId.SeriesTypeSideBySideRangeBar" | "DashboardStringId.SeriesTypeRangeArea" | "DashboardStringId.SeriesTypeHighLowClose" | "DashboardStringId.SeriesTypeCandleStick" | "DashboardStringId.SeriesTypeStock" | "DashboardWebStringId.StyleSettings" | "DashboardStringId.ParametersFormCalendarTodayButton" | "DashboardStringId.TreemapLabelArgumentTemplate" | "DashboardStringId.TreemapLabelValueTemplate" | "DashboardStringId.SearchNullValuePrompt" | "DashboardStringId.CustomItems" | "DashboardStringId.FormatRuleAllowNegativeAxis" | "DashboardStringId.FormatRuleDrawAxis" | "DashboardStringId.FormatRuleShowBarOnly" | "DashboardStringId.CommandFormatRuleBottomN" | "DashboardStringId.FormatConditionAppearanceNone" | "DashboardStringId.FormatConditionAppearanceCustom" | "DashboardStringId.FormatConditionAppearancePaleRed" | "DashboardStringId.FormatConditionAppearancePaleYellow" | "DashboardStringId.FormatConditionAppearancePaleGreen" | "DashboardStringId.FormatConditionAppearancePaleBlue" | "DashboardStringId.FormatConditionAppearancePalePurple" | "DashboardStringId.FormatConditionAppearancePaleCyan" | "DashboardStringId.FormatConditionAppearancePaleOrange" | "DashboardStringId.FormatConditionAppearancePaleGray" | "DashboardStringId.FormatConditionAppearanceRed" | "DashboardStringId.FormatConditionAppearanceYellow" | "DashboardStringId.FormatConditionAppearanceGreen" | "DashboardStringId.FormatConditionAppearanceBlue" | "DashboardStringId.FormatConditionAppearancePurple" | "DashboardStringId.FormatConditionAppearanceCyan" | "DashboardStringId.FormatConditionAppearanceOrange" | "DashboardStringId.FormatConditionAppearanceGray" | "DashboardStringId.FormatConditionAppearanceGradientRed" | "DashboardStringId.FormatConditionAppearanceGradientYellow" | "DashboardStringId.FormatConditionAppearanceGradientGreen" | "DashboardStringId.FormatConditionAppearanceGradientBlue" | "DashboardStringId.FormatConditionAppearanceGradientPurple" | "DashboardStringId.FormatConditionAppearanceGradientCyan" | "DashboardStringId.FormatConditionAppearanceGradientOrange" | "DashboardStringId.FormatConditionAppearanceGradientTransparent" | "DashboardStringId.FormatConditionAppearanceFontBold" | "DashboardStringId.FormatConditionAppearanceFontItalic" | "DashboardStringId.FormatConditionAppearanceFontUnderline" | "DashboardStringId.FormatConditionAppearanceFontGrayed" | "DashboardStringId.FormatConditionAppearanceFontRed" | "DashboardStringId.FormatConditionAppearanceFontYellow" | "DashboardStringId.FormatConditionAppearanceFontGreen" | "DashboardStringId.FormatConditionAppearanceFontBlue" | "DashboardStringId.IntersectionLevelModeFirst" | "DashboardStringId.IntersectionLevelModeLast" | "DashboardStringId.IntersectionLevelModeAuto" | "DashboardStringId.IntersectionLevelModeAll" | "DashboardStringId.IntersectionLevelModeSpecific" | "DashboardStringId.FormatRuleApplyToRow" | "DashboardStringId.FormatRuleApplyTo" | "DashboardWebStringId.FilterItem.AllowEmptyFilter" | "DashboardStringId.FormatConditionAppearanceFontStrikeout" | "DashboardStringId.FormatConditionAutomaticValueType" | "DashboardStringId.FormatConditionNumberValueType" | "DashboardStringId.FormatConditionPercentValueType" | "DashboardStringId.CommandFormatRuleRangeIcons" | "DashboardStringId.CommandFormatRuleGreaterThan" | "DashboardStringId.CommandFormatRuleGreaterThanOrEqualTo" | "DashboardStringId.CommandFormatRuleLessThan" | "DashboardStringId.CommandFormatRuleLessThanOrEqualTo" | "DashboardStringId.CommandFormatRuleEqualTo" | "DashboardStringId.CommandFormatRuleNotEqualTo" | "DashboardStringId.CommandFormatRuleBetween" | "DashboardStringId.CommandFormatRuleNotBetween" | "DashboardStringId.CommandFormatRuleBetweenOrEqual" | "DashboardStringId.CommandFormatRuleNotBetweenOrEqual" | "DashboardStringId.CommandFormatRuleContains" | "DashboardStringId.ColorAutoAssigned" | "DashboardStringId.CalculationTypeNone" | "DashboardStringId.UndoText" | "DashboardStringId.RedoText" | "DashboardStringId.DashboardCurrencyUseCurrentCurrency" | "DashboardStringId.CommandDimensionSortModeDisplayText" | "DashboardStringId.CommandDimensionSortModeValue" | "DashboardStringId.CommandDimensionSortModeID" | "DashboardStringId.CommandDimensionSortModeKey" | "DashboardWebStringId.Chart.AddPane" | "DashboardStringId.MapShapeNoneAttribute" | "DashboardStringId.DefaultPeriodName" | "DashboardStringId.CardLayoutTemplateStretchedCaption" | "DashboardStringId.CardLayoutTemplateCenteredCaption" | "DashboardStringId.CardLayoutTemplateCompactCaption" | "DashboardStringId.CardLayoutTemplateLightweightCaption" | "DashboardStringId.CardLayoutTemplateCustomCaption" | "DashboardStringId.CardLayoutTemplateNoneCaption" | "DashboardStringId.CardRowDataElementTypeTitleCaption" | "DashboardStringId.CardRowDataElementTypeSubtitleCaption" | "DashboardStringId.CardRowDataElementTypeActualValueCaption" | "DashboardStringId.CardRowDataElementTypeTargetValueCaption" | "DashboardStringId.CardRowDataElementTypeAbsoluteVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentVariationCaption" | "DashboardStringId.CardRowDataElementTypePercentOfTargetCaption" | "DashboardStringId.CardRowDataElementTypeDimensionValueCaption" | "DashboardStringId.CardRowDataElementTypeCardNameCaption" | "DashboardStringId.CardRowDataElementTypeDeltaIndicatorCaption" | "DashboardStringId.CardRowDataElementTypeSparklineCaption" | "DashboardStringId.FormatRuleApplyToAllElements" | "DashboardWebStringId.Pie.LabelPosition" | "DashboardWebStringId.Pie.LabelPositionOutside" | "DashboardWebStringId.Pie.LabelPositionInside" | "DashboardStringId.IncludeExportDashboardState" | "DashboardStringId.PointLabelContentTypeArgument" | "DashboardStringId.PointLabelContentTypeSeriesName" | "DashboardStringId.PointLabelContentTypeValue" | "DashboardStringId.PointLabelContentTypePercent" | "DashboardWebStringId.DashboardMenu" | "DashboardWebStringId.DashboardMenuNew" | "DashboardWebStringId.DashboardMenuOpen" | "DashboardWebStringId.DashboardMenuSave" | "DashboardWebStringId.DashboardMenuCurrency" | "DashboardWebStringId.DashboardMenuDataSources" | "DashboardWebStringId.DashboardMenuColorScheme" | "DashboardWebStringId.DashboardMenuNewDashboardCreate" | "DashboardWebStringId.DashboardMenuNewDashboardNamePlaceholder" | "DashboardWebStringId.Binding.DefaultEmptyPlaceholder" | "DashboardWebStringId.Binding.DefaultSelectedPlaceholder" | "DashboardWebStringId.Binding.DataFiltering" | "DashboardWebStringId.Binding.Argument" | "DashboardWebStringId.Binding.Attribute" | "DashboardWebStringId.Binding.Sparkline" | "DashboardWebStringId.Binding.Columns" | "DashboardWebStringId.Binding.TooltipDimensions" | "DashboardWebStringId.Binding.TooltipMeasures" | "DashboardWebStringId.Binding.HiddenDimensions" | "DashboardWebStringId.Binding.HiddenMeasures" | "DashboardWebStringId.Binding.AddDimension" | "DashboardWebStringId.Binding.AddMeasure" | "DashboardWebStringId.Binding.AddColumn" | "DashboardWebStringId.Binding.AddRow" | "DashboardWebStringId.Binding.AddValue" | "DashboardWebStringId.Binding.AddSeries" | "DashboardWebStringId.Binding.SetLatitude" | "DashboardWebStringId.Binding.SetLongitude" | "DashboardWebStringId.Binding.SetArgument" | "DashboardWebStringId.Binding.AddArgument" | "DashboardWebStringId.Binding.SetWeight" | "DashboardWebStringId.Binding.SetColor" | "DashboardWebStringId.Binding.SetAttribute" | "DashboardWebStringId.Binding.SetValue" | "DashboardWebStringId.Binding.XAxis" | "DashboardWebStringId.Binding.YAxis" | "DashboardWebStringId.Binding.ConfigureDimension" | "DashboardWebStringId.Binding.ConfigureMeasure" | "DashboardWebStringId.Binding.ConfigureSeries" | "DashboardWebStringId.Binding.ConfigureArgument" | "DashboardWebStringId.Binding.ConfigureValue" | "DashboardWebStringId.Binding.ConfigureAttribute" | "DashboardWebStringId.Binding.ConfigureLatitude" | "DashboardWebStringId.Binding.ConfigureLongitude" | "DashboardWebStringId.Binding.ConfigureColumn" | "DashboardWebStringId.Binding.ConfigureRow" | "DashboardWebStringId.Binding.ConfigureWeight" | "DashboardWebStringId.Binding.ConfigureColor" | "DashboardWebStringId.Binding.ShowAll" | "DashboardWebStringId.ColorScheme.Color" | "DashboardWebStringId.ColorScheme.Colors" | "DashboardWebStringId.Parameters.ParameterList" | "DashboardWebStringId.Parameters.AddParameter" | "DashboardWebStringId.Parameters.AddParameter.Tooltip" | "DashboardWebStringId.Parameters.NoSelectedParameter" | "DashboardWebStringId.Parameters.Reorder" | "DashboardWebStringId.Parameters.Done" | "DashboardWebStringId.Currency.Currency" | "DashboardWebStringId.Currency.CurrencyCulture" | "DashboardWebStringId.Currency.DefaultCurrencyWarning" | "DashboardWebStringId.Preview" | "DashboardWebStringId.Add" | "DashboardWebStringId.DataSources.UsedDataSources" | "DashboardWebStringId.DataSources.DataItems" | "DashboardWebStringId.DataSources.AddQuery" | "DashboardWebStringId.DataSources.AddCalculatedField" | "DashboardWebStringId.DataSources.AddDataSource" | "DashboardWebStringId.DataSources.NoUsedDataSources" | "DashboardWebStringId.DataSources.NoAvailableDataSources" | "DashboardWebStringId.DataSources.ChooseDataSource" | "DashboardWebStringId.DataSources.CreateDataSource" | "DashboardWebStringId.DataSources.CreateNewDataSource" | "DashboardWebStringId.DataSources.CreateDataSource.Tooltip" | "DashboardWebStringId.DataSources.EditCalculatedField" | "DashboardWebStringId.DataSources.CalculatedField.Name" | "DashboardWebStringId.DataSources.CalculatedField.FieldType" | "DashboardWebStringId.DataSources.CalculatedField.UniqueNameError" | "DashboardWebStringId.DataSources.CalculatedField.Corrupted" | "DashboardWebStringId.DataSources.Edit" | "DashboardStringId.MessageCollectionTypesNotSupported" | "DashboardWebStringId.New.DashboardName" | "DashboardWebStringId.Bindings" | "DashboardWebStringId.Interactivity" | "DashboardWebStringId.Options" | "DashboardWebStringId.Remove" | "DashboardWebStringId.MasterFilterMode" | "DashboardWebStringId.Title.Text" | "DashboardWebStringId.Title.Visible" | "DashboardWebStringId.Title.IncludeMasterFilter" | "DashboardWebStringId.Title.Aligment" | "DashboardWebStringId.Title.Image" | "DashboardWebStringId.DataSources.Cancel" | "DashboardWebStringId.DataSources.IncludeToTheDashboard" | "DashboardWebStringId.DataSources.AvailableDataSourcesError" | "DashboardWebStringId.DataSources.DashboardDataSourceWizard" | "DashboardWebStringId.Viewer" | "DashboardWebStringId.Loading" | "DashboardWebStringId.ClickHereInvitation" | "DashboardWebStringId.BindDataInvitation" | "DashboardWebStringId.AddItemInvitation" | "DashboardWebStringId.Parameters.Values" | "DashboardWebStringId.Binding.Cards" | "DashboardWebStringId.Binding.AddCard" | "DashboardWebStringId.Binding.ConfigureCard" | "DashboardWebStringId.Binding.AddValues" | "DashboardWebStringId.Binding.ConfigureValues" | "DashboardWebStringId.Binding.Maps" | "DashboardWebStringId.Binding.AddMap" | "DashboardWebStringId.Binding.ConfigureMap" | "DashboardWebStringId.Binding.Gauges" | "DashboardWebStringId.Binding.AddGauge" | "DashboardWebStringId.Binding.ConfigureGauge" | "DashboardWebStringId.InteractivityOptions" | "DashboardWebStringId.Binding.Values" | "DashboardWebStringId.Binding.RemovePane" | "DashboardWebStringId.ClickToSetFilterCriteria" | "DashboardWebStringId.DataSources.OK" | "DashboardWebStringId.DataSources.Save" | "DashboardWebStringId.Cards.ArrangementMode" | "DashboardWebStringId.Cards.ArrangementMode.Auto" | "DashboardWebStringId.Cards.ArrangementMode.FixedRows" | "DashboardWebStringId.Cards.ArrangementMode.FixedColumns" | "DashboardWebStringId.Cards.LineCount" | "DashboardWebStringId.ConditionalFormatting" | "DashboardWebStringId.CollectionEditor.NoItems" | "DashboardWebStringId.CollectionEditor.Totals.NoItems" | "DashboardWebStringId.CollectionEditor.Parameters.NoItems" | "DashboardWebStringId.PivotGrid.AutoExpandColumnGroups" | "DashboardWebStringId.PivotGrid.AutoExpandRowGroups" | "DashboardWebStringId.PivotGrid.ColumnGrandTotals" | "DashboardWebStringId.PivotGrid.RowGrandTotals" | "DashboardWebStringId.PivotGrid.ColumnTotals" | "DashboardWebStringId.PivotGrid.RowTotals" | "DashboardWebStringId.PivotGrid.ValuesPosition" | "DashboardWebStringId.PivotGrid.ValuesPositionColumns" | "DashboardWebStringId.PivotGrid.ValuesPositionRows" | "DashboardWebStringId.PivotGrid.RowTotalsPosition" | "DashboardWebStringId.PivotGrid.RowTotalsPositionBottom" | "DashboardWebStringId.PivotGrid.RowTotalsPositionTop" | "DashboardWebStringId.PivotGrid.ColumnTotalsPosition" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionFar" | "DashboardWebStringId.PivotGrid.ColumnTotalsPositionNear" | "DashboardWebStringId.PivotGrid.LayoutType" | "DashboardWebStringId.PivotGrid.LayoutTypeCompact" | "DashboardWebStringId.PivotGrid.LayoutTypeTabular" | "DashboardWebStringId.Options.Caption" | "DashboardWebStringId.InteractivityOptions.IsMasterFilter" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.None" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Single" | "DashboardWebStringId.InteractivityOptions.MasterFilterMode.Multiple" | "DashboardWebStringId.InteractivityOptions.TargetDimensions" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Arguments" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Series" | "DashboardWebStringId.InteractivityOptions.TargetDimensions.Points" | "DashboardWebStringId.ColoringOptions" | "DashboardWebStringId.DataSources.Filter" | "DashboardWebStringId.Chart.Rotated" | "DashboardWebStringId.Chart.Panes" | "DashboardWebStringId.Chart.Legend" | "DashboardWebStringId.Chart.AxisX" | "DashboardWebStringId.Chart.AxisY" | "DashboardWebStringId.Chart.AxisYSecondary" | "DashboardWebStringId.Chart.PointLabelOptions" | "DashboardWebStringId.Chart.AxisXMeasure" | "DashboardWebStringId.Chart.AxisYMeasure" | "DashboardWebStringId.Chart.Weight" | "DashboardWebStringId.Chart.Content" | "DashboardWebStringId.Chart.ArgumentAndWeight" | "DashboardWebStringId.Chart.ArgumentAndValues" | "DashboardWebStringId.Chart.Reverse" | "DashboardWebStringId.Chart.Visible" | "DashboardWebStringId.Chart.Title" | "DashboardWebStringId.Chart.TitleText" | "DashboardWebStringId.Chart.EnableZooming" | "DashboardWebStringId.Chart.LimitVisiblePoints" | "DashboardWebStringId.Chart.VisiblePointsCount" | "DashboardWebStringId.Chart.AlwaysShowZeroLevel" | "DashboardWebStringId.Chart.GridLines" | "DashboardWebStringId.Chart.LogarithmicScale" | "DashboardWebStringId.Chart.LogarithmicScaleBase" | "DashboardWebStringId.Chart.LogarithmicScaleBase2" | "DashboardWebStringId.Chart.LogarithmicScaleBase5" | "DashboardWebStringId.Chart.LogarithmicScaleBase10" | "DashboardWebStringId.Chart.Position" | "DashboardWebStringId.Chart.IsInsideOfDiagram" | "DashboardWebStringId.Chart.PrimaryAxisY" | "DashboardWebStringId.Chart.SecondaryAxisY" | "DashboardWebStringId.Chart.Name" | "DashboardWebStringId.Chart.PlotOnSecondaryAxis" | "DashboardWebStringId.Chart.IgnoreEmptyPoints" | "DashboardWebStringId.Chart.ShowPointMarkers" | "DashboardWebStringId.Chart.Value" | "DashboardWebStringId.Chart.ShowZeroValues" | "DashboardWebStringId.Chart.OverlappingMode" | "DashboardWebStringId.Chart.Orientation" | "DashboardWebStringId.Chart.ShowPointLablels" | "DashboardWebStringId.Chart.TooltipContent" | "DashboardWebStringId.Chart.LabelContent" | "DashboardWebStringId.Card.SparklineOptions" | "DashboardWebStringId.Card.SparklineVisible" | "DashboardWebStringId.Chart.Position.TopLeftVertical" | "DashboardWebStringId.Chart.Position.TopLeftHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterHorizontal" | "DashboardWebStringId.Chart.Position.TopRightVertical" | "DashboardWebStringId.Chart.Position.TopRightHorizontal" | "DashboardWebStringId.Chart.Position.BottomLeftVertical" | "DashboardWebStringId.Chart.Position.BottomLeftHorizontal" | "DashboardWebStringId.Chart.Position.BottomCenterHorizontal" | "DashboardWebStringId.Chart.Position.BottomRightVertical" | "DashboardWebStringId.Chart.Position.BottomRightHorizontal" | "DashboardWebStringId.Chart.Position.TopCenterVertical" | "DashboardWebStringId.Chart.Position.BottomCenterVertical" | "DashboardWebStringId.FilterItem.Type" | "DashboardWebStringId.FilterItem.Type.Standard" | "DashboardWebStringId.FilterItem.Type.Checked" | "DashboardWebStringId.FilterItem.Type.Radio" | "DashboardWebStringId.FilterItem.ShowAllValue" | "DashboardWebStringId.FilterItem.EnableSearch" | "DashboardWebStringId.Gauge.Min" | "DashboardWebStringId.Gauge.Max" | "DashboardWebStringId.Gauge.ScaleOptions" | "DashboardWebStringId.Gauge.Type" | "DashboardWebStringId.Gauge.Type.FullQuarterGauge" | "DashboardWebStringId.Gauge.Type.HalfCircular" | "DashboardWebStringId.Gauge.Type.LeftQuarterCircular" | "DashboardWebStringId.Gauge.Type.RightQuarterCircular" | "DashboardWebStringId.Gauge.Type.ThreeFourthCircular" | "DashboardWebStringId.Gauge.Type.LinearHorizontal" | "DashboardWebStringId.Gauge.Type.LinearVertical" | "DashboardWebStringId.Gauge.Captions" | "DashboardWebStringId.Gauge.Scale.Custom" | "DashboardWebStringId.Gauge.Scale.Auto" | "DashboardWebStringId.Grid.ColumnType" | "DashboardWebStringId.Grid.DisplayMode" | "DashboardWebStringId.Grid.DisplayMode.Value" | "DashboardWebStringId.Grid.DisplayMode.Bar" | "DashboardWebStringId.Grid.DisplayMode.Text" | "DashboardWebStringId.Grid.DisplayMode.Image" | "DashboardWebStringId.Grid.FixedWidth" | "DashboardWebStringId.Grid.WidthType" | "DashboardWebStringId.Grid.WidthType.Weight" | "DashboardWebStringId.Grid.WidthType.FitToContent" | "DashboardWebStringId.Grid.DeltaOptions" | "DashboardWebStringId.Grid.ShowStartEndValues" | "DashboardWebStringId.Grid.TotalType" | "DashboardWebStringId.Grid.Dimension" | "DashboardWebStringId.Grid.Measure" | "DashboardWebStringId.Grid.Delta" | "DashboardWebStringId.Grid.Sparkline" | "DashboardWebStringId.Grid.Hyperlink" | "DashboardWebStringId.Grid.Options" | "DashboardWebStringId.Map.ShapeFileLoaded" | "DashboardWebStringId.Map.AttributeFileLoaded" | "DashboardWebStringId.Map.ValueMap" | "DashboardWebStringId.Map.DeltaMap" | "DashboardWebStringId.Map.TooltipCaption" | "DashboardWebStringId.Map.TooltipActualValueCaption" | "DashboardWebStringId.Map.TooltipDeltaCaption" | "DashboardWebStringId.Map.CustomMapOptions" | "DashboardWebStringId.Map.CustomMapOptionsSource" | "DashboardWebStringId.Map.CustomMapOptionsUrl" | "DashboardWebStringId.Map.CustomMapOptionsFile" | "DashboardWebStringId.Map.CustomMapUrl" | "DashboardWebStringId.Map.CustomMapFile" | "DashboardWebStringId.Map.CustomAttributeFile" | "DashboardWebStringId.Map.AttributeDimension" | "DashboardWebStringId.Map.IncludeSummaryValueToShapeTitle" | "DashboardWebStringId.Map.AttributeName" | "DashboardWebStringId.Map.TooltipAttribute" | "DashboardWebStringId.Map.TooltipDimensions" | "DashboardWebStringId.Map.Area.Custom" | "DashboardWebStringId.Map.Area.WorldCountries" | "DashboardWebStringId.Map.Area.Europe" | "DashboardWebStringId.Map.Area.Asia" | "DashboardWebStringId.Map.Area.NorthAmerica" | "DashboardWebStringId.Map.Area.SouthAmerica" | "DashboardWebStringId.Map.Area.Africa" | "DashboardWebStringId.Map.Area.USA" | "DashboardWebStringId.Map.Area.Canada" | "DashboardWebStringId.Map.Viewport" | "DashboardWebStringId.Map.ShapeTitleAttribute" | "DashboardWebStringId.Map.UseBindingAttribute" | "DashboardWebStringId.Map.WeightedLegendType" | "DashboardWebStringId.Map.WeightedLegendType.Linear" | "DashboardWebStringId.Map.WeightedLegendType.Nested" | "DashboardWebStringId.Map.Orientation.Vertical" | "DashboardWebStringId.Map.Orientation.Horizontal" | "DashboardWebStringId.Map.Position.TopLeft" | "DashboardWebStringId.Map.Position.TopCenter" | "DashboardWebStringId.Map.Position.TopRight" | "DashboardWebStringId.Map.Position.BottomLeft" | "DashboardWebStringId.Map.Position.BottomCenter" | "DashboardWebStringId.Map.Position.BottomRight" | "DashboardWebStringId.Map.Viewport.TopLatitude" | "DashboardWebStringId.Map.Viewport.LeftLongitude" | "DashboardWebStringId.Map.Viewport.RightLongitude" | "DashboardWebStringId.Map.Viewport.BottomLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLatitude" | "DashboardWebStringId.Map.Viewport.CenterPointLongitude" | "DashboardWebStringId.Map.Viewport.CreateViewerPaddings" | "DashboardWebStringId.Map.ShowLegend" | "DashboardWebStringId.Pie.Type" | "DashboardWebStringId.Pie" | "DashboardWebStringId.Pie.Donut" | "DashboardWebStringId.Pie.LabelContentType.None" | "DashboardWebStringId.Pie.LabelContentType.Argument" | "DashboardWebStringId.Pie.LabelContentType.Percent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndPercent" | "DashboardWebStringId.Pie.LabelContentType.Value" | "DashboardWebStringId.Pie.LabelContentType.ArgumentAndValue" | "DashboardWebStringId.Pie.LabelContentType.ValueAndPercent" | "DashboardWebStringId.Pie.LabelContentType.ArgumentValueAndPercent" | "DashboardWebStringId.Image.BindingMode" | "DashboardWebStringId.Image.BindingMode.BinaryArray" | "DashboardWebStringId.Image.BindingMode.Uri" | "DashboardWebStringId.RangeFilter.UriPattern" | "DashboardWebStringId.Image.SizeMode.Clip" | "DashboardWebStringId.Image.SizeMode.Stretch" | "DashboardWebStringId.Image.SizeMode.Zoom" | "DashboardWebStringId.Image.SizeMode.Squeeze" | "DashboardWebStringId.Image.HorizontalAlignment" | "DashboardWebStringId.Image.VerticalAlignment" | "DashboardWebStringId.Image.Alignment.Left" | "DashboardWebStringId.Image.Alignment.Center" | "DashboardWebStringId.Image.Alignment.Right" | "DashboardWebStringId.Image.Alignment.Top" | "DashboardWebStringId.Image.Alignment.Bottom" | "DashboardWebStringId.SeriesItem.SeriesDimensions" | "DashboardWebStringId.TextBox.Text" | "DashboardWebStringId.Chart.Orientation.Default" | "DashboardWebStringId.Chart.Orientation.RotateRight" | "DashboardWebStringId.Chart.Orientation.RotateLeft" | "DashboardWebStringId.Chart.OverlappingMode.Hide" | "DashboardWebStringId.Chart.OverlappingMode.None" | "DashboardWebStringId.Chart.Position.Outside" | "DashboardWebStringId.Chart.Position.Inside" | "DashboardWebStringId.Chart.SeriesType.Weighted" | "DashboardWebStringId.Coloring.MeasuresColoringMode" | "DashboardWebStringId.Coloring.Global" | "DashboardWebStringId.Coloring.Local" | "DashboardWebStringId.Delta.ValueType" | "DashboardWebStringId.Delta.ResultIndication" | "DashboardWebStringId.Delta.ThresholdType" | "DashboardWebStringId.Delta.ThresholdValue" | "DashboardWebStringId.Sparkline.ViewType" | "DashboardWebStringId.Sparkline.HighlightMinMaxPoints" | "DashboardWebStringId.Sparkline.HighlightStartEndPoints" | "DashboardWebStringId.Title.Aligment.Left" | "DashboardWebStringId.Title.Aligment.Center" | "DashboardWebStringId.Parameters.LookUpSettingsType.NoLookUp" | "DashboardWebStringId.Parameters.LookUpSettingsType.StaticList" | "DashboardWebStringId.Parameters.LookUpSettingsType.DynamicList" | "DashboardWebStringId.Parameters.LookUpSettingsType" | "DashboardWebStringId.Parameters.DefaultValue" | "DashboardWebStringId.DataItem" | "DashboardWebStringId.DataItem.Precision" | "DashboardWebStringId.DataItem.IncludeGroupSeparator" | "DashboardWebStringId.DataItem.ShowValues" | "DashboardWebStringId.DataItem.ShowTotals" | "DashboardWebStringId.DataItem.ShowGrandTotals" | "DashboardWebStringId.Dialog.ConfirmSaving" | "DashboardWebStringId.Dimension.GroupInterval" | "DashboardWebStringId.Dimension.SortMode" | "DashboardWebStringId.Dialog.ArgumentMode" | "DashboardWebStringId.Calculations" | "DashboardWebStringId.Calculations.Expression" | "DashboardWebStringId.Calculations.DifferenceCalculation" | "DashboardWebStringId.Calculations.Moving" | "DashboardWebStringId.Calculations.RunningTotal" | "DashboardWebStringId.Calculations.PercentOfTotal" | "DashboardWebStringId.Calculations.Rank" | "DashboardWebStringId.Calculations.DefinitionMode" | "DashboardWebStringId.Calculations.WindowDefinition" | "DashboardWebStringId.Calculations.WindowDefinitionModeSpecific" | "DashboardWebStringId.Calculations.WindowDefinitionModePredefined" | "DashboardWebStringId.Calculations.DifferenceType" | "DashboardWebStringId.TreemapLayoutAlgorithm" | "DashboardWebStringId.TilesLabelContentType" | "DashboardWebStringId.TilesTooltipContentType" | "DashboardWebStringId.GroupsLabelContentType" | "DashboardWebStringId.GroupsTooltipContentType" | "DashboardWebStringId.ShowOthersValue" | "DashboardWebStringId.TopNEnabled" | "DashboardWebStringId.Parameters.StaticListLookUpSettings" | "DashboardWebStringId.Parameters.DynamicListLookUpSettings" | "DashboardWebStringId.ConvertTo" | "DashboardWebStringId.Duplicate" | "DashboardWebStringId.DataSourceWizard" | "DashboardWebStringId.RangeFilter.CustomPeriods" | "DashboardWebStringId.RangeFilter.StartMode" | "DashboardWebStringId.RangeFilter.EndMode" | "DashboardWebStringId.RangeFilter.StartIntervalAndOffset" | "DashboardWebStringId.RangeFilter.EndIntervalAndOffset" | "DashboardWebStringId.RangeFilter.StartDate" | "DashboardWebStringId.RangeFilter.EndDate" | "DashboardWebStringId.RangeFilter.None" | "DashboardWebStringId.RangeFilter.Fixed" | "DashboardWebStringId.RangeFilter.Flow" | "DashboardWebStringId.Tabs.Binding" | "DashboardWebStringId.Tabs.DataShaping" | "DashboardWebStringId.Tabs.Format" | "DashboardWebStringId.Calculations.Types.Moving" | "DashboardWebStringId.Parameters.SortByMember" | "DashboardWebStringId.Parameters.LookUpSettingsTypeCaption" | "DashboardWebStringId.Dashboard.Items" | "DashboardWebStringId.Dashboard.Groups" | "DashboardWebStringId.Dashboard.LayoutItems" | "DashboardWebStringId.Dashboard.ComponentName" | "DashboardWebStringId.ButtonConfirm" | "DashboardWebStringId.Colorization.GroupInterval" | "DashboardWebStringId.ButtonOn" | "DashboardWebStringId.ButtonOff" | "DashboardWebStringId.ButtonYes" | "DashboardWebStringId.ButtonNo" | "DashboardWebStringId.ButtonDiscrete" | "DashboardWebStringId.ButtonContinuous" | "DashboardWebStringId.ButtonVisible" | "DashboardWebStringId.ButtonHidden" | "DashboardWebStringId.Calculations.PreviousValuesCount" | "DashboardWebStringId.Calculations.NextValuesCount" | "DashboardWebStringId.Calculations.RankType" | "DashboardWebStringId.Calculations.RankOrder" | "DashboardWebStringId.TileOptions" | "DashboardWebStringId.MapLockNavigationLocked" | "DashboardWebStringId.MapLockNavigationUnlocked" | "DashboardWebStringId.ConditionalFormatting.BarOptions" | "DashboardWebStringId.ConditionalFormatting.CalculatedBy" | "DashboardWebStringId.ConditionalFormatting.IconType" | "DashboardWebStringId.ConditionalFormatting.PredefinedColor" | "DashboardWebStringId.ConditionalFormatting.AppearanceType" | "DashboardWebStringId.ConditionalFormatting.FontStyle" | "DashboardWebStringId.ConditionalFormatting.FontFamily" | "DashboardWebStringId.ConditionalFormatting.FontRegular" | "DashboardWebStringId.ConditionalFormatting.IconType.None" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowSideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayArrowUp" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayUpInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGraySideArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownInclineArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGrayDownArrow" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalYellowDash" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalRedTriangleDown" | "DashboardWebStringId.ConditionalFormatting.IconType.DirectionalGreenTriangleUp" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingHalfGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayStar" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingFullGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1QuarterGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3QuartersGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.RatingEmptyGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1Bar" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0Bars" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating4FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating3FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating2FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating1FilledBox" | "DashboardWebStringId.ConditionalFormatting.IconType.Rating0FilledBoxes" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedTrafficLight" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeGreenCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightRedCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeLightGrayCircle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeYellowTriangle" | "DashboardWebStringId.ConditionalFormatting.IconType.ShapeRedDiamond" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledGreenCheck" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledYellowExclamation" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorCircledRedCross" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorGreenFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorYellowFlag" | "DashboardWebStringId.ConditionalFormatting.IconType.IndicatorRedFlag" | "DashboardWebStringId.ConditionalFormatting.IntersectionColumnDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionRowDimension" | "DashboardWebStringId.ConditionalFormatting.IntersectionLevelMode" | "DashboardWebStringId.ConditionalFormatting.GradientRangeBar" | "DashboardWebStringId.ConditionalFormatting.RangeGradient" | "DashboardWebStringId.ConditionalFormatting.SegmentNumber" | "DashboardWebStringId.ConditionalFormatting.ValueComparison" | "DashboardWebStringId.ConditionalFormatting.Ranges" | "DashboardWebStringId.ConditionalFormatting.AverageType" | "DashboardWebStringId.ConditionalFormatting.Above" | "DashboardWebStringId.ConditionalFormatting.AboveOrEqual" | "DashboardWebStringId.ConditionalFormatting.Below" | "DashboardWebStringId.ConditionalFormatting.BelowOrEqual" | "DashboardWebStringId.ConditionalFormatting.StyleSettingsType" | "DashboardWebStringId.ConditionalFormatting.Positive" | "DashboardWebStringId.ConditionalFormatting.Negative" | "DashboardWebStringId.ConditionalFormatting.MinimumType" | "DashboardWebStringId.ConditionalFormatting.MaximumType" | "DashboardWebStringId.ConditionalFormatting.DateType" | "DashboardWebStringId.ConditionalFormatting.DateType.None" | "DashboardWebStringId.ConditionalFormatting.DateType.SpecificDate" | "DashboardWebStringId.ConditionalFormatting.DateType.BeyondThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.LaterThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.NextWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.Tomorrow" | "DashboardWebStringId.ConditionalFormatting.DateType.Today" | "DashboardWebStringId.ConditionalFormatting.DateType.Yesterday" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.LastWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.EarlierThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.PriorThisYear" | "DashboardWebStringId.ConditionalFormatting.DateType.Empty" | "DashboardWebStringId.ConditionalFormatting.DateType.User" | "DashboardWebStringId.ConditionalFormatting.DateType.Beyond" | "DashboardWebStringId.ConditionalFormatting.DateType.ThisWeek" | "DashboardWebStringId.ConditionalFormatting.DateType.ThisMonth" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAfter1" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAfter2" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo1" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo2" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo3" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo4" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo5" | "DashboardWebStringId.ConditionalFormatting.DateType.MonthAgo6" | "DashboardWebStringId.ConditionalFormatting.DateType.Earlier" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeDataItem" | "DashboardWebStringId.ConditionalFormatting.CardRuleTypeCard" | "DashboardWebStringId.Colorization.NoSelectedSchema" | "DashboardWebStringId.Colorization.ColorSchemes" | "DashboardWebStringId.LayoutHasBeenChangedDialogMessage" | "DashboardWebStringId.SaveConfirmationDialogMessage" | "DashboardWebStringId.SaveChangesDialogMessage" | "DashboardWebStringId.Dialog.ChangeDataMemberMessage" | "DashboardWebStringId.Dialog.RemovedDataItemsMessage" | "DashboardWebStringId.Dialog.ConfirmChanges" | "DashboardWebStringId.Dialog.Save" | "DashboardWebStringId.Dialog.DoNotSave" | "DashboardWebStringId.Dialog.ButtonYes" | "DashboardWebStringId.Dialog.ButtonDontChange" | "DashboardWebStringId.Colorization.ColorSchemeType" | "DashboardWebStringId.Colorization.MeasureNames" | "DashboardWebStringId.Colorization.AddColor" | "DashboardWebStringId.Colorization.ValidationSelectMeasure" | "DashboardWebStringId.ColoringModeAuto" | "DashboardWebStringId.ColoringModeOff" | "DashboardWebStringId.ColoringModeOn" | "DashboardWebStringId.ColorScheme.Empty" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButton" | "DashboardWebStringId.DashboardItemMenu.Bindings.SelectDataSourceButtonTooltip" | "DashboardWebStringId.ConditionalFormatting.Miscellaneous" | "DashboardWebStringId.Dashboards" | "DashboardWebStringId.EditInDesigner" | "DashboardWebStringId.NoDashboards" | "DashboardWebStringId.AddNewDashboard" | "DashboardWebStringId.NewDashboard" | "DashboardWebStringId.Binding.Searching" | "DashboardWebStringId.Binding.EmptySearchResult" | "DashboardWebStringId.Errors.AttemptToLoadData" | "DashboardWebStringId.ConditionType" | "DashboardWebStringId.ConditionalFormatting.UnsupportedDataType" | "DashboardWebStringId.FormatRule" | "DashboardWebStringId.Notification.DashboardSaving" | "DashboardWebStringId.Notification.DashboardSaved" | "DashboardWebStringId.Notification.DashboardCanNotBeSaved" | "DashboardWebStringId.Notification.DashboardSavingIsNotAvailable" | "DashboardWebStringId.Notification.AttemptToLoadDashboards" | "DashboardWebStringId.Notification.DashboardLoading" | "DashboardWebStringId.Notification.AttemptToLoadDashboard" | "DashboardWebStringId.Notification.AttemptToConnectionStrings" | "DashboardWebStringId.Notification.MethodIsNotAllowedInViewerMode" | "DashboardWebStringId.Notification.AttemptToLoadParameterValues" | "DashboardWebStringId.Notification.AttemptToGetUnderlyingData" | "DashboardWebStringId.Notification.AttemptToConvertItemToType" | "DashboardWebStringId.Notification.AttemptToLoadDimensionUniqueValues" | "DashboardWebStringId.Notification.AttemptToLoadFieldListForDataSource" | "DashboardWebStringId.Notification.AttemptToGetColorScheme" | "DashboardWebStringId.Notification.NewDashboardCannotBeCreated" | "DashboardWebStringId.Notification.ErrorHasOccuredOn" | "DashboardWebStringId.Notification.UnsupportedDataSourceType" | "DashboardWebStringId.LimitVisibleData.DisplayAllDataTooltip" | "DashboardWebStringId.LimitVisibleData.IncreasePerformanceTooltip" | "DashboardWebStringId.ConditionalFormatting.Condition" | "DashboardWebStringId.CardLayout.MinWidth" | "DashboardWebStringId.CardLayout.MaxWidth" | "DashboardWebStringId.CardLayout.Editor.CardLayout" | "DashboardWebStringId.CardLayout.Editor.FormatOptions" | "DashboardWebStringId.CardLayout.LayoutOptions" | "DashboardWebStringId.CardLayout.ResetTemplate" | "DashboardWebStringId.CardLayout.ApplyToAllCards" | "DashboardWebStringId.Binding.ValuesPattern" | "DashboardWebStringId.Parameters.ParameterNameShouldBeUnique" | "DashboardWebStringId.Title.ImageEmbedded" | "DashboardWebStringId.Title.ImageLinked" | "DashboardWebStringId.Title.ImageNone" | "DashboardWebStringId.RangeFilter.SetDefaultCustomPeriod" | "DashboardWebStringId.RangeFilter.ClearDefaultCustomPeriod" | "DashboardWebStringId.MobileLayout.Back" | "DashboardWebStringId.MobileLayout.SwitchToViewer" | "DashboardWebStringId.Search" | "DashboardStringId.DefaultNameTabPage" | "DashboardStringId.DefaultNameChartPane" | "DashboardStringId.NewCalculatedFieldNamePrefix" | "DashboardStringId.NewParameterNamePrefix" | "AnalyticsCoreStringId.Parameter_Type_String" | "AnalyticsCoreStringId.Parameter_Type_DateTime" | "AnalyticsCoreStringId.Parameter_Type_Int16" | "AnalyticsCoreStringId.Parameter_Type_Int32" | "AnalyticsCoreStringId.Parameter_Type_Int64" | "AnalyticsCoreStringId.Parameter_Type_Float" | "AnalyticsCoreStringId.Parameter_Type_Double" | "AnalyticsCoreStringId.Parameter_Type_Decimal" | "AnalyticsCoreStringId.Parameter_Type_Boolean" | "AnalyticsCoreStringId.Parameter_Type_Guid" | "AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption" | "DataAccessUIStringId.FiltersView" | "DashboardStringId.SeriesTypeGroupArea" | "DashboardStringId.SeriesTypeGroupBar" | "DashboardStringId.SeriesTypeGroupBubble" | "DashboardStringId.SeriesTypeGroupFinancial" | "DashboardStringId.SeriesTypeGroupPointLine" | "DashboardStringId.SeriesTypeGroupRange" | "DashboardStringId.FunctionCategoryWindow" | "DashboardStringId.FunctionCategoryAggregate" | "DashboardStringId.FunctionCategoryAdvanced" | "DashboardStringId.FunctionDescriptionWindowAvg" | "DashboardStringId.FunctionDescriptionRunningMin" | "DashboardStringId.FunctionDescriptionTotal" | "DashboardStringId.FunctionDescriptionRankCompetition" | "DashboardStringId.FunctionDescriptionLookup" | "DashboardStringId.FunctionDescriptionRunningCount" | "DashboardStringId.FunctionDescriptionWindowMax" | "DashboardStringId.FunctionDescriptionVarp" | "DashboardStringId.FunctionDescriptionRunningAvg" | "DashboardStringId.FunctionDescriptionFirst" | "DashboardStringId.FunctionDescriptionWindowMin" | "DashboardStringId.FunctionDescriptionWindowStdDev" | "DashboardStringId.FunctionDescriptionLast" | "DashboardStringId.FunctionDescriptionWindowCount" | "DashboardStringId.FunctionDescriptionCountDistinct" | "DashboardStringId.FunctionDescriptionIndex" | "DashboardStringId.FunctionDescriptionWindowStdDevp" | "DashboardStringId.FunctionDescriptionWindowMode" | "DashboardStringId.FunctionDescriptionRunningMax" | "DashboardStringId.FunctionDescriptionRankPercentile" | "DashboardStringId.FunctionDescriptionRankDense" | "DashboardStringId.FunctionDescriptionWindowSum" | "DashboardStringId.FunctionDescriptionWindowCountDistinct" | "DashboardStringId.FunctionDescriptionStdDevp" | "DashboardStringId.FunctionDescriptionSize" | "DashboardStringId.FunctionDescriptionMedian" | "DashboardStringId.FunctionDescriptionRankModified" | "DashboardStringId.FunctionDescriptionWindowMedian" | "DashboardStringId.FunctionDescriptionRunningSum" | "DashboardStringId.FunctionDescriptionWindowVarp" | "DashboardStringId.FunctionDescriptionWindowVar" | "DashboardStringId.FunctionDescriptionStdDev" | "DashboardStringId.FunctionDescriptionRankUnique" | "DashboardStringId.FunctionDescriptionVar" | "DashboardStringId.FunctionDescriptionAggr" | "DashboardStringId.FunctionDescriptionAggrJoinRule" | "DashboardStringId.FunctionDescriptionWindowDefinition" | "DashboardStringId.FunctionDescriptionWindowDefinitionPartitionBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderBy" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderAsc" | "DashboardStringId.FunctionDescriptionWindowDefinitionOrderDesc" | "DashboardStringId.AggregateExFunctionDescriptionCountNotNull" | "DashboardStringId.AggregateExFunctionDescriptionMode" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHour" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinute" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateHourMinuteSecond" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateMonthYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear" | "DashboardStringId.FunctionDescriptionGetDateWeekYear2" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetDateQuarterYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetQuarter" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfMonth" | "DashboardStringId.FunctionOperatorExFunctionDescriptionGetWeekOfYear" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime3" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime4" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime5" | "DashboardStringId.FunctionOperatorExFunctionDescriptionMakeDateTime6" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToBoolean" | "DashboardStringId.FunctionOperatorExFunctionDescriptionToDateTime" | "DashboardStringId.SparklineIndicationModeLine" | "DashboardStringId.SparklineIndicationModeArea" | "DashboardStringId.SparklineIndicationModeBar" | "DashboardStringId.SparklineIndicationModeWinLoss" | "DashboardStringId.DefaultNameDateFilterItem" | "DashboardWebStringId.DateFilter.FilterType" | "DashboardWebStringId.DateFilter.FilterTypeExact" | "DashboardWebStringId.DateFilter.FilterTypeAfter" | "DashboardWebStringId.DateFilter.FilterTypeBefore" | "DashboardWebStringId.DateFilter.FilterTypeBetween" | "DashboardWebStringId.DateFilter.ArrangementMode" | "DashboardWebStringId.DateFilter.ArrangementModeAutoHeight" | "DashboardWebStringId.DateFilter.ArrangementModeHorizontal" | "DashboardWebStringId.DateFilter.ArrangementModeVertical" | "DashboardWebStringId.DateFilter.DatePickerLocation" | "DashboardWebStringId.DateFilter.DatePickerLocationFar" | "DashboardWebStringId.DateFilter.DatePickerLocationNear" | "DashboardWebStringId.DateFilter.DatePickerLocationHidden" | "DashboardStringId.DateFilterDisplayTextPattern" | "DashboardStringId.DateFilterDatePickerButtonDefaultText" | "DashboardStringId.FromDatePeriodCaption" | "DashboardStringId.ToDatePeriodCaption" | "DashboardStringId.FromToDatePeriodCaption" | "DashboardStringId.UniqueNameValidationMessage" | "DashboardStringId.GridTotalAutoTemplate" | "DashboardStringId.GridTotalValueTemplate" | "DashboardStringId.GridTotalTemplate" | "DashboardStringId.GridTotalTypeCount" | "DashboardStringId.GridTotalTypeMin" | "DashboardStringId.GridTotalTypeMax" | "DashboardStringId.GridTotalTypeAvg" | "DashboardStringId.GridTotalTypeSum" | "DashboardStringId.ActionShowDataInspector" | "DashboardStringId.InspectedData" | "DashboardStringId.InspectedTypeFormatString" | "DashboardStringId.AggregatedDataType" | "DashboardStringId.RawDataType" | "DashboardStringId.OLAPUnavailableRawData" | "DashboardStringId.SparklineValuesSeparator" | "DashboardStringId.SparklineArgumentValueSeparator" | "DashboardWebStringId.Grid.FilterClause.ApplyFilter" | "DashboardWebStringId.Grid.FilterClause.ResetOperation" | "DashboardWebStringId.Grid.FilterClause.Contains" | "DashboardWebStringId.Grid.FilterClause.DoesNotContain" | "DashboardWebStringId.Grid.FilterClause.StartsWith" | "DashboardWebStringId.Grid.FilterClause.EndsWith" | "DashboardWebStringId.Grid.FilterClause.Equals" | "DashboardWebStringId.Grid.FilterClause.DoesNotEqual" | "DashboardWebStringId.Grid.FilterClause.Less" | "DashboardWebStringId.Grid.FilterClause.Greater" | "DashboardWebStringId.Grid.FilterClause.LessOrEqual" | "DashboardWebStringId.Grid.FilterClause.GreaterOrEqual" | "DashboardWebStringId.Grid.FilterClause.Between" | "DashboardWebStringId.Grid.FilterClause.BetweenStart" | "DashboardWebStringId.Grid.FilterClause.BetweenEnd" | "DashboardWebStringId.AccordionTab.Content" | "DashboardWebStringId.TextBoxItemEditor.NoFields" | "DashboardWebStringId.TextBoxItemEditor.InsertField" | "DashboardWebStringId.TextBoxItemEditor.EditTextButton" | "DashboardWebStringId.TextBoxItemEditor.DialogCaption" | "DashboardWebStringId.TextBoxItemEditor.DialogSaveAndClose" | "DashboardWebStringId.TextBoxItemEditor.DialogClose" | "DashboardStringId.StartDate" | "DashboardStringId.EndDate" | "DashboardWebStringId.AccordionTab.MeasureFilter" | "DashboardStringId.FunctionDescriptionAggregateFilter" | "DashboardWebStringId.TabPages" | "DashboardWebStringId.More" | "DashboardStringId.MeasureFilterCaptionFormatString";
	    };
	    MessageCustomItemIsNotSupported: string;
	    MessageGridHasNoData: string;
	    MessagePivotHasNoData: string;
	    PivotGridGrandTotal: string;
	    PivotGridTotal: string;
	    ChartTotalValue: string;
	    ParametersSelectorText: string;
	    OpenCaption: string;
	    HighCaption: string;
	    LowCaption: string;
	    CloseCaption: string;
	    NumericFormatUnitSymbolThousands: string;
	    NumericFormatUnitSymbolMillions: string;
	    NumericFormatUnitSymbolBillions: string;
	    FilterElementCheckedComboBoxNoDataCaption: string;
	    FilterElementRadioComboBoxNoDataCaption: string;
	    FilterElementNoDataToDisplay: string;
	    OlapRaggedHierarchyNoneItemCaption: string;
	    TreemapLabelArgumentTemplate: string;
	    TreemapLabelValueTemplate: string;
	    SearchNullValuePrompt: string;
	};

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import GridColumnFixedWidthType = DevExpress.Dashboard.Model.GridColumnFixedWidthType;
	export interface IColumnOptions {
	    widthType: GridColumnFixedWidthType;
	    weight: number;
	    actualIndex: number;
	    fixedWidth?: number;
	}
	export interface IWidthOptions {
	    mode: ColumnWidthMode;
	    columnsOptions: Array<IColumnOptions>;
	}
	export interface IWidthInfo {
	    mode: string;
	    columnsOptions: Array<IColumnWidthInfo>;
	}
	export interface IColumnWidthInfo {
	    widthType: string;
	    initialWidth: number;
	    actualWidth: number;
	}
	export interface IBestFitProvider {
	    getBestFit: (index: number) => number;
	}
	export interface IColumnWidthsStorage {
	    columnsResized: boolean;
	    mode: ColumnWidthMode;
	    columnsOptions: Array<IColumnOptions>;
	}
	export type ColumnWidthMode = 'Manual' | 'AutoFitToContents' | 'AutoFitToGrid';
	export class ColumnWidthCalculator {
	    widthOptions: IWidthOptions;
	    _columnWidths: Array<number>;
	    _columnWidthsStorage: IColumnWidthsStorage;
	    readonly columnsResized: boolean;
	    reset(viewModel: any, columnWidthMode: ColumnWidthMode): void;
	    getLeftPrintingColumnIndex(hScrollPosition: any): number;
	    getClientWidthOptions(): any;
	    onDataLoaded(viewModel: any, columnWidthMode: ColumnWidthMode): void;
	    calcColumnsWidth(bestFitProvider: IBestFitProvider, maxVisibleWidth: number, charWidth: number): Array<number>;
	    onColumnResized(leftColumnIndex: number, leftColumnWidth: number, rightColumnWidth: number): Array<number>;
	    _unfixColumnWidth(leftColumnIndex: any): void;
	    _calcWidth(optionsInfo: any, maxVisibleWidth: any): void;
	    _scaleColumns(optionsInfo: any, isFixed: any, maxVisibleWidth: any, actualWidthSum: any): any;
	    _spreadRemainder(optionsInfo: any, isFixed: any, maxVisibleWidth: any, actualWidthSum: any): any;
	    _isScaledColumns(widthMode: any, widthType: any, isFixed: any): boolean;
	    _resetWidthOptions(viewModel: any, columnWidthMode: ColumnWidthMode): void;
	    _createWidthInfo(bestFitProvider: IBestFitProvider, charWidth: number): IWidthInfo;
	    _updateColumnWidthsStorage(): void;
	    _isAllColumnsFixed(): boolean;
	    _updateWeight(columnsWidthInfo: any, columnWidths: any): void;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
	export const zIndex: {
	    floatingToolbar: number;
	    dashboardItemShield: number;
	    dashboardItemTooltips: number;
	};

}
declare module DevExpress.Dashboard.Internal.Viewer {


	export class GridColumnPainter {
	    static CssClasses: {
	        flexParent: string;
	        flexDeltaParent: string;
	        sparklineStartValue: string;
	        deltaIndicator: string;
	        truncated: string;
	        fixed: string;
	        rightAlignment: string;
	    };
	    static renderDelta(parentContainer: HTMLElement, deltaValue: any, isDetail: any): void;
	    static renderSparkline(name: string, showStartEndValues: boolean, parentContainer: HTMLElement, sparklineData: any): void;
	    static renderBar(columnName: string, parentContainer: HTMLElement, tooltipText: string, value: number, zeroValue: number): void;
	    static renderImage(container: HTMLElement, imageData: any): void;
	    static renderHyperlink(container: HTMLElement, uri: string, displayValue: string, isEncodeHtml: boolean): void;
	    static renderValue(container: HTMLElement, text: string, isEncodeHtml: boolean): void;
	    static changeGridSparklineColumnsWidth(gridRootElement: HTMLElement, columnName: string): void;
	    static calcMaxWidth(values: NodeListOf<Element>): number;
	    static changeGridBarColumnsWidth(gridRootElement: HTMLElement, columnName: string): void;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dxDataGrid =  DevExpress.ui.dxDataGrid ;
    import dxDataGridOptions = DevExpress.ui;
    import CellValue = DevExpress.Dashboard.Internal.Data.CellValue;
    import GridColumnTotalType = DevExpress.Dashboard.Model.GridColumnTotalType;
    import styleSettingsProvider = DevExpress.Dashboard.Internal.Viewer.styleSettingsProvider;
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    import DataPoint = DevExpress.Dashboard.Internal.Viewer.DataPoint;
    import ColumnWidthCalculator = DevExpress.Dashboard.Internal.Viewer.ColumnWidthCalculator;
    import ColumnWidthMode = DevExpress.Dashboard.Internal.Viewer.ColumnWidthMode;
    import IBestFitProvider = DevExpress.Dashboard.Internal.Viewer.IBestFitProvider;
	export class dataGridItem extends baseItem {
	    _calculator: ColumnWidthCalculator;
	    _styleSettingsProvider: styleSettingsProvider;
	    _dataGrid: dxDataGrid;
	    _updateLocked: boolean;
	    _digits_string: string;
	    charWidth: number;
	    resetClientStateOnUpdate: boolean;
	    manualyResetClientState: boolean;
	    protected readonly _captionToolbarSeparatorRequired: boolean;
	    constructor(container: HTMLElement, options: any);
	    TextAlignment: {
	        [key: string]: 'left' | 'right' | 'center';
	    };
	    DisplayMode: {
	        Value: string;
	        Delta: string;
	        Bar: string;
	        Sparkline: string;
	        Image: string;
	        Hyperlink: string;
	    };
	    SummaryType: {
	        Count: string;
	        Min: string;
	        Max: string;
	        Avg: string;
	        Sum: string;
	    };
	    CssClasses: {
	        wordWrap: string;
	        gridAdaptiveCellValue: string;
	    };
	    dispose(): void;
	    protected _clearSelectionUnsafe(): void;
	    protected _setSelectionUnsafe(values: any): void;
	    protected _selectTuplesCore(tuples: any, updateTupleDelegate: any, state: any): void;
	    protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
	    protected getInfoUnsafe(): any;
	    _parseFilter(filterItems: any, columnIndex: any): string;
	    _parseFilterOperatorPart(filterItemPart: any, exprColumnIndex: any): any;
	    _getSortInfo(): any[];
	    protected _initializeData(newOptions: any): void;
	    getValueItem(columnName: string, index: number): CellValue;
	    _bestFitProvider: IBestFitProvider;
	    _resetColumnWidths(): void;
	    _updateColumnsWidth(columnWidths: Array<number>): void;
	    _getColumnWidthProperty(): string;
	    _getColumnWidthMode(): ColumnWidthMode;
	    _getDefaultBestCharacterCount(index: number): number;
	    _beginResize(): void;
	    _endResize(): void;
	    _updateCharWidth(): void;
	    gridWidthOptionsChanged: (args: {
	        widthOptions: any;
	    }) => void;
	    _clientStateUpdateDebounced: (...args: any[]) => void;
	    _onColumnsChanging(e: {
	        component: dxDataGrid;
	        optionNames: any;
	    }): void;
	    _getViewOptions(): dxDataGridOptions;
	    _customizeViewOptions: (opts: dxDataGridOptions) => void;
	    _getCommonOptions(): dxDataGridOptions;
	    _getRowsValues(data: {
	        index: number;
	    }): any;
	    _getSelectedRowIndices(): any;
	    _getTotalCaptionTemplate(totalType: GridColumnTotalType): any;
	    _getTotals(): any[];
	    _calculateCustomSummary(options: any): void;
	    _getColumns(): any[];
	    _isDetail(rowType: string): boolean;
	    protected _applySelectionUnsafe(): void;
	    protected _resizeUnsafe(): void;
	    _getDataPoint(element: any): DataPoint;
	    _getColumnsByColumnType(columnType: any): any[];
	    _getColumnDataIdsByColumnType(columnType: any): any[];
	    _getElementInteractionValue(element: any, viewModel: any): any;
	    _getWidget(): dxDataGrid;
	    _setGridSelection(values: any, keyProcessingDelegate?: any): void;
	    _selectRows(data: any): void;
	    _isMultiDataSupported(): boolean;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
	export let KEY_EXPR: string;
	export class filterElementDataController extends dataControllerBase {
	    dataSource: any;
	    selection: any;
	    fullSelection: any;
	    constructor(options: any);
	    getAllItemIndex(): any;
	    isAllSelected(): boolean;
	    update(selectedValues: any, encodeHtml: any, selectionOnly?: boolean): void;
	    getInteractionValues(elements: any, selectedValues: any): any[];
	    _getDataValue(wrappedValue: any): any;
	    _reset(selectionOnly?: boolean): void;
	}
	export class listViewDataController extends filterElementDataController {
	    ListBoxType: {
	        Checked: string;
	        Radio: string;
	    };
	    ComboBoxType: {
	        Standard: string;
	        Checked: string;
	    };
	    constructor(options: any);
	    isMultiselectable(): boolean;
	}
	export class treeViewDataController extends filterElementDataController {
	    constructor(options: any);
	    isMultiselectable(): boolean;
	    getAllItemIndex(): number;
	    isAllSelected(): boolean;
	    update(selectedValues: any, encodeHtml: any, selectionOnly?: boolean): void;
	    getInteractionValues(elements: any, selectedValues: any): any;
	    private _updateSelection;
	    private _getDataNullChildCount;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DataSource =  DevExpress.data.DataSource ;
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
	export class filterElementBaseItem extends baseItem {
	    widget: any;
	    constructor(container: HTMLElement, options: any);
	    dispose(): void;
	    protected _setSelectionUnsafe(values: any): void;
	    protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
	    protected _createWidgetDiv(): HTMLDivElement;
	    protected _initializeData(newOptions: any): void;
	    allowMultiselection: boolean;
	    protected readonly isMultiSelectable: boolean;
	    protected _isPaneEmpty(): boolean;
	    updateInteractivityOptions(): void;
	    getDataSource(): DataSource;
	    protected readonly _enableSearch: boolean;
	    protected readonly _isBottomFloatingToolbarPosition: boolean;
	    _isBorderRequired(): boolean;
	    _getDisplayExpr(): 'text' | 'html';
	    _getOptions(includeActions: any): Object;
	    _hasToggleSelectionModeButton(): boolean;
	    protected _resizeUnsafe(): void;
	    _raiseItemClick(elements: any): void;
	    _mustSelectingFired(values: any): boolean;
	    _isUpdating(widget: any): boolean;
	    protected _applySelectionUnsafe(): void;
	    _selectTuples(tuplesToSelect: any, unaffectedTuples: any, isSelect: any): void;
	    _getWidget(): any;
	    _getWidgetName(): string;
	    _createWidget(div: HTMLElement, opts: any): any;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dxSelectBox =  DevExpress.ui.dxSelectBox ;
    import filterElementBaseItem = DevExpress.Dashboard.Internal.Viewer.filterElementBaseItem;
	export let cssComboBoxClassNames: {
	    item: string;
	    multiText: string;
	    margins: string;
	};
	export class comboBoxFilterElement extends filterElementBaseItem {
	    protected readonly _shouldApplySelectionOnInitialRender: boolean;
	    constructor(container: HTMLElement, options: any);
	    protected _setSelectionUnsafe(values: any): void;
	    protected _clearSelectionUnsafe(): void;
	    protected readonly _isBottomFloatingToolbarPosition: boolean;
	    protected readonly _allowPreview: boolean;
	    _getWidgetName(): "dxSelectBox" | "dxTagBox";
	    protected _createWidgetDiv(): HTMLDivElement;
	    _createWidget(div: HTMLElement, opts: any): dxSelectBox;
	    _getMinContentHeight(): number;
	    _generateInnerBorderClassesUnsafe(element: HTMLElement): string[];
	    _getSelection(): any;
	    _getOptions(includeActions: any): Object;
	    protected _resizeUnsafe(): void;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DateTimeGroupInterval = DevExpress.Dashboard.Model.DateTimeGroupInterval;
	export class CalendarHelper {
	    static getCalendarMaxZoomLevel(groupInterval: DateTimeGroupInterval): "month" | "year" | "decade";
	    static getCalendarType(groupInterval: DateTimeGroupInterval): 'date' | 'datetime' | 'time';
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DateTimeFormatViewModel = DevExpress.Dashboard.Internal.Data.DateTimeFormatViewModel;
    import DateTimeGroupInterval = DevExpress.Dashboard.Model.DateTimeGroupInterval;
	export type DateFilterType = 'Between' | 'After' | 'Before' | 'Exact';
	export type DateFilterArrangementMode = 'AutoHeight' | 'Horizontal' | 'Vertical';
	export type DatePickerLocation = 'Far' | 'Near' | 'Hidden';
	export type VisibleComponents = 'All' | 'DatePicker' | 'QuickFilters';
	export let dateFilterWidgetClassNames: {
	    widget: string;
	    buttons: string;
	    buttonsNoPaddings: string;
	    buttonsLeftToRight: string;
	    buttonsTopDown: string;
	    button: string;
	    datePickerButtonEmpty: string;
	    overlayWrapper: string;
	    overlay: string;
	    mobile: string;
	    overlayCalendarContainer: string;
	    overlayCalendar: string;
	    overlayTextBox: string;
	    overlayButton: string;
	};
	export interface DateFilterViewModel {
	    FilterType: DateFilterType;
	    ArrangementMode: DateFilterArrangementMode;
	    DatePickerLocation: DatePickerLocation;
	    DisplayTextPattern: string;
	    DateTimePeriods: Array<DateTimePeriodViewModel>;
	    GroupInterval: any;
	    DateTimeFormat: DateTimeFormatViewModel;
	    MinimumId: string;
	    MaximumId: string;
	}
	export interface DateTimePeriodViewModel {
	    Name: string;
	}
	export class DateFilterWidgetOptions {
	    filterType?: DateFilterType;
	    arrangementMode?: DateFilterArrangementMode;
	    datePickerLocation?: DatePickerLocation;
	    displayTextPattern?: string;
	    groupInterval?: DateTimeGroupInterval;
	    format?: (value: any) => string;
	    valueChanged?: (values: any[]) => void;
	    buttonClick?: (name: string) => void;
	    buttonsInfo?: string[];
	    startDate?: Date;
	    endDate?: Date;
	    minimum?: Date;
	    maximum?: Date;
	    clearAction?: () => void;
	    hasOuterMargin?: boolean;
	    mobileLayout?: boolean;
	}
	export class DatePickerButtonElement {
	    text?: string;
	    icon?: string;
	    key: string;
	}
	export class DatePickerButtons {
	    private dropDownButton;
	    checkButton: DatePickerButtonElement;
	    showDropDown: boolean;
	    text: string;
	    constructor();
	    getButtons(): DatePickerButtonElement[];
	}

}
declare module DevExpress.Dashboard {
    import dxButtonGroup =  DevExpress.ui.dxButtonGroup ;
    import dxCalendar =  DevExpress.ui.dxCalendar ;
    import dxOverlay =  DevExpress.ui.dxOverlay ;
    import DateFilterWidgetOptions = DevExpress.Dashboard.Internal.Viewer.DateFilterWidgetOptions;
    import DatePickerButtons = DevExpress.Dashboard.Internal.Viewer.DatePickerButtons;
	export class DateFilterWidget {
	    private boundaryElementContainer;
	    private _defaultButtonText;
	    private _dropDownContentDiv;
	    private _datePickerDiv;
	    private _widgetDiv;
	    private _scrollableContent;
	    private _overlayShown;
	    private _lockSelectionEvents;
	    private _updateScrollableContainer;
	    private _getBtnsContainerScrollWidth;
	    _datePickerContent: DatePickerButtons;
	    _options: DateFilterWidgetOptions;
	    _startDate: Date;
	    _endDate: Date;
	    _overlay: dxOverlay;
	    quickButtons: Array<dxButtonGroup>;
	    datePickerButton: dxButtonGroup;
	    calendarFrom: dxCalendar;
	    calendarTo: dxCalendar;
	    constructor(element: HTMLElement, viewerOptions: any, boundaryElementContainer: HTMLElement);
	    element(): import("devextreme/core/element").dxElement;
	    _update(widgetOptions: DateFilterWidgetOptions): void;
	    _getHeight(): number;
	    _updateSize(width: number, height: number): void;
	    _setSelectedValues(values: any[]): void;
	    _setPeriod(periodIndex: number): void;
	    _clearSelectedPeriods(): void;
	    _clearSelectedValues(): void;
	    _submit(): void;
	    private _applyValues;
	    private _addDatePicker;
	    private _getStartCalendarValue;
	    private _getEndCalendarValue;
	    private _createDiv;
	    private _createButtonDiv;
	    private _createDropDownContent;
	    private _createDatePicker;
	    private _createDesktopCalendar;
	    private _createMobileCalendar;
	    private _createCalendar;
	    private _createTextBox;
	    private _createSubmitButton;
	    private _processItemClick;
	    private _updateDropDownButtonText;
	    private _getDefaultOptions;
	    private _addClass;
	    private _removeClass;
	    private _dispose;
	    private _getOverlayOptions;
	    private _getOverlayWidth;
	    private _setDatePickerText;
	    private _selectQuickButton;
	    private _showPopup;
	    private _setDatePickerBtnState;
	    private _onDatePickerUnchecked;
	    private _performWithLockedEvents;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    import ViewerItemOptions = DevExpress.Dashboard.Internal.Viewer.ViewerItemOptions;
    import DateFilterWidget = DevExpress.Dashboard.DateFilterWidget;
    import DateFilterWidgetOptions = DevExpress.Dashboard.Internal.Viewer.DateFilterWidgetOptions;
	export let cssDateFilterClassNames: {
	    item: string;
	};
	export class dateFilterElement extends baseItem {
	    static readonly MinMeasureId: string;
	    static readonly MaxMeasureId: string;
	    widget: DateFilterWidget;
	    timePeriodMenuSelectedIndex: number;
	    predefinedRangeChanged: (rangeName: any) => void;
	    protected readonly _allowPreview: boolean;
	    constructor(container: HTMLElement, options: ViewerItemOptions);
	    _getMinContentHeight(): number;
	    protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
	    protected getInfoUnsafe(): {
	        selectedPeriodName: any;
	        name: string;
	        headerHeight: number;
	        position: JQuery.Coordinates;
	        width: number;
	        height: number;
	        virtualSize: any;
	        scroll: any;
	    };
	    protected _setSelectionUnsafe(values: any): void;
	    protected _clearSelectionUnsafe(): void;
	    protected _initializeData(newOptions: any): void;
	    _clearSelectedValues(): void;
	    _applySelectionToWidget(): void;
	    getWidgetOptions(): DateFilterWidgetOptions;
	    _mobileLayout(): boolean;
	    _convertSelectedValues(value: any): Date;
	    _getCurrentPredefinedRange(): any;
	    _setPredefinedRange(dateTimePeriodName: string): void;
	    _ensureYearValue(value: any): any;
	    _updateContentSizeUnsafe(): void;
	    protected _getWidget(): DateFilterWidget;
	    _isBorderRequired(): boolean;
	    protected _isPaneEmpty(): boolean;
	    _isTransparentBackground(): boolean;
	    _generateInnerBorderClassesUnsafe(element: HTMLElement): string[];
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dxList =  DevExpress.ui.dxList ;
    import filterElementBaseItem = DevExpress.Dashboard.Internal.Viewer.filterElementBaseItem;
	export let cssListBoxClassNames: {
	    borderVisible: string;
	    separatorHidden: string;
	    list: string;
	    item: string;
	    emptyMessage: string;
	};
	export class listFilterElement extends filterElementBaseItem {
	    constructor(container: HTMLElement, options: any);
	    protected _setSelectionUnsafe(values: any): void;
	    protected _clearSelectionUnsafe(): void;
	    _generateInnerBorderClassesUnsafe(element: HTMLElement): string[];
	    protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
	    _getWidgetName(): string;
	    _createWidget(div: HTMLElement, opts: any): dxList;
	    _getSelection(): any;
	    _getOptions(includeActions: any): Object;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dxTreeList =  DevExpress.ui.dxTreeList ;
    import dxTreeView =  DevExpress.ui.dxTreeView ;
    import filterElementBaseItem = DevExpress.Dashboard.Internal.Viewer.filterElementBaseItem;
	export let cssTreeViewClassNames: {
	    borderVisible: string;
	    topBorder: string;
	    item: string;
	};
	export class treeViewFilterElement extends filterElementBaseItem {
	    protected _setSelectionUnsafe(values: any): void;
	    _generateInnerBorderClassesUnsafe(element: HTMLElement): string[];
	    protected _clearSelectionUnsafe(): void;
	    protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
	    _getWidgetName(): "dxTreeView" | "dxTreeList";
	    _createWidget(div: HTMLElement, opts: any): dxTreeList | dxTreeView;
	    _getOptions(includeActions: any): Object;
	    private _onScrollChanged;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
	export type ChartSeriesType = 'area' | 'bar' | 'bubble' | 'candlestick' | 'fullstackedarea' | 'fullstackedbar' | 'fullstackedline' | 'fullstackedspline' | 'fullstackedsplinearea' | 'line' | 'rangearea' | 'rangebar' | 'scatter' | 'spline' | 'splinearea' | 'stackedarea' | 'stackedbar' | 'stackedline' | 'stackedspline' | 'stackedsplinearea' | 'steparea' | 'stepline' | 'stock';
	export type PieSeriesType = 'doughnut' | 'pie';
	export let chartHelper: {
	    SelectionMode: {
	        Argument: string;
	        Series: string;
	        Points: string;
	    };
	    ChartLegendInsidePosition: {
	        TopLeftVertical: string;
	        TopLeftHorizontal: string;
	        TopCenterVertical: string;
	        TopCenterHorizontal: string;
	        TopRightVertical: string;
	        TopRightHorizontal: string;
	        BottomLeftVertical: string;
	        BottomLeftHorizontal: string;
	        BottomCenterVertical: string;
	        BottomCenterHorizontal: string;
	        BottomRightVertical: string;
	        BottomRightHorizontal: string;
	    };
	    ChartLegendOutsidePosition: {
	        TopLeftVertical: string;
	        TopLeftHorizontal: string;
	        TopCenterHorizontal: string;
	        TopRightVertical: string;
	        TopRightHorizontal: string;
	        BottomLeftVertical: string;
	        BottomLeftHorizontal: string;
	        BottomCenterHorizontal: string;
	        BottomRightVertical: string;
	        BottomRightHorizontal: string;
	    };
	    convertSeriesType: (viewSeriesType: any) => "area" | "line" | "bar" | "bubble" | "candlestick" | "fullstackedarea" | "fullstackedbar" | "fullstackedline" | "fullstackedspline" | "fullstackedsplinearea" | "rangearea" | "rangebar" | "scatter" | "spline" | "splinearea" | "stackedarea" | "stackedbar" | "stackedline" | "stackedspline" | "stackedsplinearea" | "steparea" | "stepline" | "stock" | "doughnut" | "pie";
	    convertPresentationUnit: (argumentViewModel: any) => "day" | "hour" | "minute" | "month" | "second" | "quarter" | "week";
	    convertLegendInsidePosition: (position: any) => {
	        verticalAlignment: string;
	        horizontalAlignment: string;
	        orientation: string;
	    };
	    convertLegendOutsidePosition: (position: any) => {
	        verticalAlignment: string;
	        horizontalAlignment: string;
	        orientation: string;
	    };
	    convertPointLabelRotationAngle: (orientation: any) => 0 | 90 | 270;
	    convertPointLabelPosition: (position: any) => "inside" | "outside";
	    allowArgumentAxisMargins: (panes: any) => any;
	    isFinancialType: (type: any) => boolean;
	    isTransparentColorType: (type: any) => boolean;
	    isSeriesColorSupported: (type: import("devextreme/viz/common").ChartSeriesType) => boolean;
	    isStackedAreaType: (type: import("devextreme/viz/common").ChartSeriesType) => boolean;
	};

}
declare module DevExpress.Dashboard.Internal.Data {
    import itemDataDimension = DevExpress.Dashboard.Internal.Data.itemDataDimension;
    import ItemDataAxisPoint = DevExpress.Dashboard.Data.ItemDataAxisPoint;
    import itemDataAxis = DevExpress.Dashboard.Internal.Data.itemDataAxis;
    import itemDataAxisPoint = DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
    import DataControllerOptions = DevExpress.Dashboard.Internal.Data.DataControllerOptions;
    import DateTimeFormatInfo = DevExpress.Dashboard.Internal.Data.DateTimeFormatInfo;
    import NumericFormatInfo = DevExpress.Dashboard.Internal.Data.NumericFormatInfo;
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
	export class chartDataControllerBase extends dataControllerBase {
	    static _getLegendSeriesName(seriesName: string): void;
	    static _getLegendSeriesDisplayName(seriesName: string): void;
	    elementCustomColor: any;
	    constructor(options: DataControllerOptions);
	    getArgument(argumentAxisPoint: any): any;
	    getArgumentAxisPoints(argumentId?: any): Array<itemDataAxisPoint>;
	    getSeriesAxisPoints(seriesId?: any): Array<ItemDataAxisPoint>;
	    getSingleArgumentDimensionFormat(): NumericFormatInfo | DateTimeFormatInfo;
	    getColor(argumentAxisPoint: any, seriesAxisPoint: any, measuesIds: any, colorMeasureId: any): any;
	    isDiscreteArgument(): boolean;
	    isQualitativeArgument(): boolean;
	    isSingleArgument(): boolean;
	    hasSeriesPoints(): boolean;
	    _getElementCustomColor(argumentAxisPoint: any, seriesAxisPoint: any, measuesIds: any, color: any): any;
	    _getColorFromData(argumentAxisPoint: any, seriesAxisPoint: any, colorMeasureId: any): any;
	    _getCrossSlice(argumentAxisPoint: any, seriesAxisPoint: any): any;
	    _getArgumentAxis(): itemDataAxis;
	    _getSeriesAxis(): any;
	    _getArgumentAxisDimensions(): Array<itemDataDimension>;
	    _getSingleArgumentDimension(): itemDataDimension;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
    import PointLabelContentType = DevExpress.Dashboard.Model.PointLabelContentType;
    import ItemDataAxisPoint = DevExpress.Dashboard.Data.ItemDataAxisPoint;
    import itemDataAxisPoint = DevExpress.Dashboard.Internal.Data.itemDataAxisPoint;
    import PrimitiveType = DevExpress.Dashboard.Data.PrimitiveType;
    import DataControllerOptions = DevExpress.Dashboard.Internal.Data.DataControllerOptions;
    import DateTimeFormatInfo = DevExpress.Dashboard.Internal.Data.DateTimeFormatInfo;
    import NumericFormatInfo = DevExpress.Dashboard.Internal.Data.NumericFormatInfo;
    import chartDataControllerBase = DevExpress.Dashboard.Internal.Data.chartDataControllerBase;
	export abstract class chartDataControllerProto extends chartDataControllerBase {
	    _legendSeriesPrefix: string;
	    _argumentAxisPoints: Array<itemDataAxisPoint>;
	    _argumentFormat: any;
	    _axisXFormat: any;
	    constructor(options: DataControllerOptions);
	    getLegendSeriesName(seriesName: string): string;
	    getLegendSeriesDisplayName(seriesName: string): string;
	    getDataSourceAndSeries(encodeHtml: any): {
	        dataSource: Array<ChartDataSourceItem>;
	        series: Array<any>;
	        argumentAxis: {
	            categories: Array<Number | String | Date>;
	        };
	    };
	    protected getDataSourceAndCategories(seriesInfoList: Array<SeriesInfo>): {
	        dataSource: Array<ChartDataSourceItem>;
	        categories?: Array<Number | String | Date>;
	    };
	    protected getDataDefinedDataSourceAndCategories(seriesInfoList: Array<SeriesInfo>): {
	        dataSource: Array<ChartDataSourceItem>;
	        categories?: Array<Number | String | Date>;
	    };
	    protected abstract getArgumentBindingValue(argumentPoint: any, pointIndex: number): any;
	    generatePaneName(paneName: any, paneIndex: any): any;
	    _getSeriesInfo(encodeHtml: any): Array<SeriesInfo>;
	    customizeTooltipText(series: any, point: any, seriesFormats: any, encodeHtml: any): string;
	    _getTooltipHtml(series: any, point: any, seriesFormats: any, encodeHtml: any, color: any): string;
	    _getTooltipTextInternal(series: any, point: any, seriesFormats: any, encodeHtml: any): string;
	    getTooltipArgumentText(obj: any): any;
	    getZoomArguments(): {
	        start: number;
	        end: number;
	    } | undefined;
	    getArgumentUniquePath(value: any): Array<PrimitiveType>;
	    _getArgumentAutoFormat(): NumericFormatInfo;
	    _createArgumentFormat(): NumericFormatInfo | DateTimeFormatInfo;
	    _createAxisXFormat(): NumericFormatInfo | DateTimeFormatInfo;
	    getArgumentFormat(): NumericFormatInfo | DateTimeFormatInfo;
	    getAxisXFormat(): NumericFormatInfo | DateTimeFormatInfo;
	    getArgumentText(argument: any): any;
	    getAxisXLabelText(axisValue: any): any;
	    _getArgumentText(argumentValue: any, formatGetter: () => NumericFormatInfo | DateTimeFormatInfo): any;
	    _validatePoint(point: any, seriesType: any): boolean;
	    _getCustomizeTooltipTextColor(point: any): any;
	    _getLegendInfo(): any[];
	    _valuesContainsValueSet(values: any, valueSet: any): boolean;
	    _getLastSeriesType(colorMeasureId: any): "area" | "line" | "bar" | "bubble" | "candlestick" | "fullstackedarea" | "fullstackedbar" | "fullstackedline" | "fullstackedspline" | "fullstackedsplinearea" | "rangearea" | "rangebar" | "scatter" | "spline" | "splinearea" | "stackedarea" | "stackedbar" | "stackedline" | "stackedspline" | "stackedsplinearea" | "steparea" | "stepline" | "stock" | "doughnut" | "pie";
	    _getDisplayTextBySeriesTemplates(): string;
	    _iterateSeriesTemplates(proc: any): void;
	    _isSelectionTagsRequired(): boolean;
	    _createSeriesItem(seriesInfo: any, includeTags: any, encodeHtml: any): any;
	    _customizePointLabelText(valueContainer: any, pointLabel: any, seriesInfo: any): string;
	    _getPercentSupported(seriesInfo: any): boolean;
	    _formatOpenHighLowCloseValues(values: any, formats: any, hasOpenValueField: any, encodeHtml: any, delimiter: any): string;
	    _formatValuesList(valuesList: any, formats: any, encodeHtml: any): string;
	    _formatValue(value: any, format: any, encodeHtml: any): any;
	    _isNumericDataType(type: any): boolean;
	    _convertContentType(typeModel: any): PointLabelContentType;
	    _showPointMarker(seriesTemplate: any): boolean;
	    checkSeriesTemplatePointLabels(seriesTemplateViewModel: any): boolean;
	    protected showPointLabels(pointLabelInfo: any): boolean;
	    private _getPointLabelInfo;
	}
	export interface SeriesInfo {
	    name: string;
	    dataId: string;
	    paneName: string;
	    pointVisible: boolean;
	    seriesType: any;
	    originalSeriesType: any;
	    plotOnSecondaryAxis: any;
	    ignoreEmptyPoints: boolean;
	    axisPoint: ItemDataAxisPoint;
	    dataMembers: Array<string>;
	    colorMeasureId: string;
	    valueFormats: any;
	    pointLabel: any;
	    seriesItem?: any;
	    title?: any;
	    valueFields: Array<{
	        name: string;
	        getValue: {
	            (axisPoint: ItemDataAxisPoint): any;
	        };
	    }>;
	}
	export interface ChartDataSourceItem {
	    x: any;
	    tag?: any;
	    nullColumn?: any;
	    [measureName: string]: any;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
    import DataControllerOptions = DevExpress.Dashboard.Internal.Data.DataControllerOptions;
    import chartDataControllerProto = DevExpress.Dashboard.Internal.Data.chartDataControllerProto;
	export class rangeFilterDataController extends chartDataControllerProto {
	    constructor(options: DataControllerOptions);
	    getArgument(argumentAxisPoint: any): any;
	    _iterateSeriesTemplates(proc: any): void;
	    _isSelectionTagsRequired(): boolean;
	    _getLastSeriesType(colorMeasureId: any): "area" | "line" | "bar" | "bubble" | "candlestick" | "fullstackedarea" | "fullstackedbar" | "fullstackedline" | "fullstackedspline" | "fullstackedsplinearea" | "rangearea" | "rangebar" | "scatter" | "spline" | "splinearea" | "stackedarea" | "stackedbar" | "stackedline" | "stackedspline" | "stackedsplinearea" | "steparea" | "stepline" | "stock" | "doughnut" | "pie";
	    protected showPointLabels(pointLabelInfo: any): boolean;
	    protected getArgumentBindingValue(argumentPoint: any, pointIndex: number): any;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DashboardChartExportSizeMode = DevExpress.Dashboard.DashboardChartExportSizeMode;
    import DashboardExcelExportOptions = DevExpress.Dashboard.DashboardExcelExportOptions;
    import DashboardExcelFormat = DevExpress.Dashboard.DashboardExcelFormat;
    import DashboardExportImageFormat = DevExpress.Dashboard.DashboardExportImageFormat;
    import DashboardExportPageLayout = DevExpress.Dashboard.DashboardExportPageLayout;
    import DashboardExportPaperKind = DevExpress.Dashboard.DashboardExportPaperKind;
    import DashboardImageExportOptions = DevExpress.Dashboard.DashboardImageExportOptions;
    import DashboardMapSizeMode = DevExpress.Dashboard.DashboardMapSizeMode;
    import DashboardPdfExportOptions = DevExpress.Dashboard.DashboardPdfExportOptions;
    import DashboardRangeFilterExportSizeMode = DevExpress.Dashboard.DashboardRangeFilterExportSizeMode;
    import DashboardTreemapExportSizeMode = DevExpress.Dashboard.DashboardTreemapExportSizeMode;
	export type DashboardExportScaleMode = 'None' | 'UseScaleFactor' | 'AutoFitToPageWidth' | 'AutoFitWithinOnePage';
	export type DashboardFilterState = 'Below' | 'SeparatePage' | 'None';
	export interface ASPxClientDashboardExportOptions {
	    PaperKind?: DashboardExportPaperKind | string;
	    PageLayout?: DashboardExportPageLayout;
	    ScaleMode?: DashboardExportScaleMode;
	    ScaleFactor?: number;
	    AutoFitPageCount?: number;
	    Title?: string;
	    ShowTitle?: boolean;
	    FilterState?: DashboardFilterState;
	    ImageOptions?: ImageFormatOptions;
	    ExcelOptions?: ExcelFormatOptions;
	    GridOptions?: GridExportOptions;
	    PivotOptions?: PivotExportOptions;
	    PieOptions?: PieExportOptions;
	    GaugeOptions?: GaugeExportOptions;
	    CardOptions?: CardExportOptions;
	    RangeFilterOptions?: RangeFilterExportOptions;
	    ChartOptions?: ChartExportOptions;
	    MapOptions?: MapExportOptions;
	    TreemapOptions?: TreemapExportOptions;
	}
	export interface MapExportOptions {
	    AutomaticPageLayout?: boolean;
	    SizeMode?: DashboardMapSizeMode;
	}
	export interface GridExportOptions {
	    FitToPageWidth?: boolean;
	    PrintHeadersOnEveryPage?: boolean;
	}
	export interface PivotExportOptions {
	    PrintHeadersOnEveryPage?: boolean;
	}
	export interface PieExportOptions {
	    AutoArrangeContent?: boolean;
	}
	export interface GaugeExportOptions {
	    AutoArrangeContent?: boolean;
	}
	export interface CardExportOptions {
	    AutoArrangeContent?: boolean;
	}
	export interface RangeFilterExportOptions {
	    AutomaticPageLayout?: boolean;
	    SizeMode?: DashboardRangeFilterExportSizeMode;
	}
	export interface ChartExportOptions {
	    AutomaticPageLayout?: boolean;
	    SizeMode?: DashboardChartExportSizeMode;
	}
	export interface ExcelFormatOptions {
	    Format?: DashboardExcelFormat;
	    CsvValueSeparator?: string;
	    FilterState?: 'Below' | 'SeparateSheet' | 'None';
	}
	export interface ImageFormatOptions {
	    Format?: DashboardExportImageFormat;
	    Resolution?: number;
	}
	export interface TreemapExportOptions {
	    SizeMode?: DashboardTreemapExportSizeMode;
	    AutomaticPageLayout?: boolean;
	}
	export let dashboardExportPaperKind: {
	    letter: string;
	    legal: string;
	    executive: string;
	    a5: string;
	    a4: string;
	    a3: string;
	};
	export let dashboardExportPageLayout: {
	    auto: string;
	    portrait: string;
	    landscape: string;
	};
	export let dashboardExportScaleMode: {
	    none: string;
	    useScaleFactor: string;
	    autoFitToPageWidth: string;
	    autoFitWithinOnePage: string;
	};
	export let dashboardExportDocumentScaleMode: {
	    none: string;
	    useScaleFactor: string;
	    autoFitToPagesWidth: string;
	};
	export let exportFormats: {
	    pdf: string;
	    image: string;
	    excel: string;
	};
	export let dashboardExportFilterState: {
	    none: string;
	    after: string;
	    afterAndSplitPage: string;
	};
	export let excelExportFilterState: {
	    none: string;
	    below: string;
	    separateSheet: string;
	};
	export let dashboardExportImageFormat: {
	    png: string;
	    gif: string;
	    jpg: string;
	};
	export let dashboardExportExcelFormat: {
	    csv: string;
	    xls: string;
	    xlsx: string;
	};
	export let dashboardExportSizeMode: {
	    none: string;
	    stretch: string;
	    zoom: string;
	};
	export let dashboardStateExportPosition: {
	    below: string;
	    separatePage: string;
	};
	export let dashboardStateExcelExportPosition: {
	    below: string;
	    separateSheet: string;
	};
	export class ExportOptions {
	    static DefaultTitle: string;
	    pdfExportOptions: DashboardPdfExportOptions;
	    imageExportOptions: DashboardImageExportOptions;
	    excelExportOptions: DashboardExcelExportOptions;
	    constructor();
	    convertToExportOptions(clientOptions: any): ExportOptions;
	    convertToASPxClientDashboardExportOptions(): ASPxClientDashboardExportOptions;
	    setExcelOptions(options: any): void;
	    setImageOptions(options: any): void;
	    setPdfOptions(options: any): void;
	    setOptions(options: ExportOptions): void;
	    _getPdfDashboardStatePosition(clientOptions: any, currentValue: any): any;
	    _getExcelDashboardStatePosition(clientOptions: any, currentValue: any): any;
	    _getImageFormat(clientOptions: any, currentValue: any): any;
	    _getExcelFormat(clientOptions: any, currentValue: any): any;
	    _getDefinedValue(oldOptions: any, oldProperty: any, newValue: any, currentValue: any): any;
	    _getExportFilters(clientOptions: any, currentValue: any): any;
	    _getDashboardAutomaticPageLayout(clientOptions: any, currentValue: any): any;
	    _convertDocumentScaleModeToScaleMode(documentScaleMode: any, dashboardAutomaticPageLayout: any): string;
	    _convertScaleModeToDocumentScaleMode(scaleMode: any): string;
	    _getPdfFilterState(): "None" | "Below" | "SeparatePage";
	    _getExcelFilterState(): "None" | "Below" | "SeparateSheet";
	    _correctImageFormat(imageFormat: any): any;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
	export let cssClasses: {
	    caption: string;
	    actionToolbar: string;
	    contentToolbar: string;
	    captionBorder: string;
	    title: string;
	    captionPanelSeparator: string;
	    popoverIconMenuWrapper: string;
	    popoverListWrapper: string;
	    floatingContainer: string;
	    iconClearMasterFilter: string;
	    iconClearSelection: string;
	    iconDrillUp: string;
	    iconMultiselection: string;
	    iconItemExport: string;
	    iconExportToPDF: string;
	    iconExportToImage: string;
	    iconExportToExcel: string;
	    iconContentSelection: string;
	    iconLimitVisibleData: string;
	    iconParameters: string;
	    iconFilter: string;
	    iconTimePeriods: string;
	    iconInitialExtent: string;
	    iconBack: string;
	    ellipsisIcon: string;
	    tooltipLimitVisibleData: string;
	    checked: string;
	    textButton: string;
	    filterText: string;
	    dashboardContainer: string;
	    toolbarItem: string;
	    toolbarBefore: string;
	    toolbarAfter: string;
	    toolbarCenter: string;
	    ellipsisText: string;
	    flexParent: string;
	    truncated: string;
	    fixed: string;
	    buttonBack: string;
	    toolbarPreview: string;
	};
	export function _convertToExportFormat(exportIcon: any): string;
	export let Settings: {
	    allowExportToImage: boolean;
	};

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dxPopup =  DevExpress.ui.dxPopup ;
	export let dialogClasses: {
	    form: string;
	    simpleDialog: string;
	    element: string;
	    elementOffset: string;
	    name: string;
	    disabledName: string;
	    box: string;
	    buttons: string;
	    elementTextBox: string;
	    elementNumberBox: string;
	    elementLargeMarginTop: string;
	};
	export let dialogSizes: {
	    width: number;
	    height: number;
	    minWidth: number;
	    minHeight: number;
	    elementsHeight: number;
	};
	export interface DialogFormOptions {
	    allowScrolling: boolean;
	    fullScreenMode?: boolean;
	    dialogContainer: HTMLElement;
	    title?: string;
	    width: number | string;
	    height: number | string;
	    deferredRendering: boolean;
	    buttons: Array<{
	        className?: string;
	        name?: string;
	        hide?: boolean;
	        func?: (...args: any[]) => void;
	        isDefault?: boolean;
	    }>;
	    setActualState: (width: number) => void;
	    onShowing?: (args: any) => void;
	    onHidden?: (args: any) => void;
	    onShown?: (args: any) => void;
	    renderContent: (args: any) => HTMLElement;
	    disposeContent: () => void;
	}
	export class dialogForm {
	    options: DialogFormOptions;
	    popupInstance: dxPopup;
	    scrollableContent: HTMLElement;
	    controlCreationCallbacks: JQuery.Callbacks<Function>;
	    constructor(options: DialogFormOptions);
	    showDialog(): void;
	    hideDialog(): void;
	    dispose(): void;
	    _initialize(): void;
	    _renderPopupContent(component: dxPopup): void;
	    _setLabelsWidth(): number;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {

    import dxDateBox =  DevExpress.ui.dxDateBox ;
    import DayOfWeekNumber = DevExpress.Dashboard.Internal.Data.DayOfWeekNumber;
    import rangeFilterSelection = DevExpress.Dashboard.Internal.Viewer.rangeFilterSelection;
	export interface CustomTimePeriodDialogOptions {
	    range: rangeFilterSelection;
	    isIntYearGroupInterval: boolean;
	    groupInterval: any;
	    displayFormat: any;
	    firstDayOfWeek: DayOfWeekNumber;
	}
	export class customTimePeriodDialog {
	    options: {
	        container: HTMLElement;
	        setRange: (range: any) => void;
	    };
	    setRange: any;
	    range: any;
	    format: 'date' | 'datetime' | 'time';
	    displayFormatFunc: any;
	    maxZoomLevel: any;
	    leftCalendar: dxDateBox;
	    rightCalendar: dxDateBox;
	    disabledDates: ((data: {
	        component?: dxDateBox;
	        date?: Date;
	        view?: string;
	    }) => boolean);
	    dialogForm: any;
	    constructor(options: {
	        container: HTMLElement;
	        setRange: (range: any) => void;
	    });
	    _initialize(): void;
	    show(options: CustomTimePeriodDialogOptions): void;
	    dispose(): void;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dxRangeSelector =  DevExpress.viz.dxRangeSelector ;
    import dxRangeSelectorOptions = DevExpress.ui;
    import ChartDataSourceItem = DevExpress.Dashboard.Internal.Data.ChartDataSourceItem;
    import ViewerToolbarItem = DevExpress.Dashboard.ViewerToolbarItem;
    import customTimePeriodDialog = DevExpress.Dashboard.Internal.Viewer.customTimePeriodDialog;
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    import IEntireRange = DevExpress.Dashboard.Internal.Viewer.IEntireRange;
    import IRange = DevExpress.Dashboard.Internal.Viewer.IRange;
	export class rangeSelectorItem extends baseItem {
	    itemElementCustomColor: any;
	    timePeriodMenuSelectedIndex: number | undefined;
	    rangeSelectorViewer: dxRangeSelector;
	    _customTimePeriodDialog: customTimePeriodDialog;
	    protected readonly _isBottomFloatingToolbarPosition: boolean;
	    constructor(container: HTMLElement, options: any);
	    private _getCustomTimePeriodDialog;
	    protected _initializeData(newOptions: any): void;
	    protected _clearSelectionUnsafe(): void;
	    protected _clearSelectionBase(): void;
	    protected _setSelectionUnsafe(values: Array<Array<any>>): void;
	    _getCurrentRange(): rangeFilterSelection;
	    getEntireRange(): rangeFilterSelection;
	    dispose(): void;
	    _setRange(range: Array<Date | number>): void;
	    _setPredefinedRange(dateTimePeriodName: string): void;
	    _getAvailablePredefinedRanges(): any;
	    predefinedRangeChanged: (rangeName: any) => void;
	    protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
	    _isBorderRequired(): boolean;
	    protected _getContainerPositionUnsafe(): {
	        left: number;
	        top: number;
	        width: number;
	        height: number;
	        offsetX: number;
	        offsetY: number;
	    };
	    private _getFirstDayOfWeek;
	    _getRangeSelectorViewerOptions(): dxRangeSelectorOptions;
	    protected _getEntireRange(): IRange;
	    protected _getEntireRangeByDataSource(dataSource: Array<ChartDataSourceItem>): IRange;
	    private _checkAxisXValue;
	    protected _getSelectedValues(): any;
	    _isValidValues(values: Array<any>): boolean;
	    _getSliderMarkerFormat(): any;
	    private static _getScaleType;
	    private static _getStringScaleTypeByGroupInterval;
	    private static _getDateTimeScaleType;
	    _getSelectedRangeChangedHandler(): (e: any) => void;
	    protected _resizeUnsafe(): void;
	    _getWidget(): dxRangeSelector;
	    _elementCustomColor(eventArgs: any): void;
	    _hasTimePeriods(): boolean;
	    _isDateTimePeriodSupported(): any;
	    _getSpecificActionToolbarItems(): Array<ViewerToolbarItem>;
	    _raisePredefinedPeriodSelected(index: number): void;
	    _showCustomTimePeriodDialog(): void;
	    _isIntYearGroupInterval(): boolean;
	}
	export class rangeFilterSelection implements IEntireRange {
	    minimum: number | Date;
	    maximum: number | Date;
	    constructor(range: IRange);
	    getMaximum(): number | Date;
	    setMaximum(value: any): void;
	    getMinimum(): number | Date;
	    setMinimum(value: any): void;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    import ViewerItemOptions = DevExpress.Dashboard.Internal.Viewer.ViewerItemOptions;
	export class imageItem extends baseItem {
	    imgSrc: any;
	    img: JQuery;
	    _initialHeight: any;
	    _initialWidth: any;
	    constructor(container: HTMLElement, options: ViewerItemOptions);
	    protected _initializeData(newOptions: ViewerItemOptions): void;
	    protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
	    _loadImage(): void;
	    _clearImgTag(): void;
	    _loadedImgProcessing(): void;
	    _setHorizontalAlignment($img: any, horizontalAlignment: any): void;
	    _setVerticalAlignment($img: any, verticalAlignment: any): void;
	    _setImgSizeWithProportions($img: any, containerProportion: any): "horizontalCentering" | "verticalCentering";
	    _getImageSource(imageViewModel: any): any;
	    protected _resizeUnsafe(): void;
	    _getWidget(): import("devextreme/core/element").dxElement;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import imageItem = DevExpress.Dashboard.Internal.Viewer.imageItem;
	export class boundImageItem extends imageItem {
	    constructor(container: HTMLElement, options: any);
	    protected _initializeData(newOptions: any): void;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dxVectorMap =  DevExpress.viz.dxVectorMap ;
    import dxVectorMapOptions = DevExpress.ui;
    import IViewport = DevExpress.Dashboard.Internal.Model.IViewport;
    import IViewportViewModel = DevExpress.Dashboard.Internal.Model.IViewportViewModel;
    import ViewerToolbarItem = DevExpress.Dashboard.ViewerToolbarItem;
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
	export interface IClientSize {
	    width: number;
	    height: number;
	}
	export interface IMapClientState {
	    viewport: IViewport;
	    clientSize: IClientSize;
	}
	export abstract class mapItem extends baseItem {
	    mapViewer: dxVectorMap;
	    clientState: IMapClientState;
	    initialExtentChanged: (changed: any) => void;
	    isInitialExtentChanged: boolean;
	    previousViewportViewModel: IViewportViewModel;
	    constructor($container: any, options: any);
	    dispose(): void;
	    protected _renderContentInternal(element: HTMLElement, changeExisting: boolean, options: dxVectorMapOptions): void;
	    protected resetClientViewport(): void;
	    private _shouldResetClientViewport;
	    private _viewportEquals;
	    private _updatePreviousViewport;
	    protected _clearSelectionUnsafe(): void;
	    protected getInfoUnsafe(): any;
	    protected _getSpecificStatePanelItems(): Array<ViewerToolbarItem>;
	    protected _getMapViewerOptions(): dxVectorMapOptions;
	    protected _getLabelSettings(viewModel: any): {
	        label: {
	            enabled: any;
	            dataField: string;
	        };
	    };
	    private _calculateZoomFactor;
	    private _translateLon;
	    private _translateLat;
	    protected _getMapDataSource(mapItems: any, titleName: any): any[];
	    protected _configureGeometryLayers(mapDataSource: any, areaSettings: any): any;
	    protected _getLegend(legendModel: any): any;
	    private _updateLegendPosition;
	    protected _isSelected(current: any): boolean;
	    protected _getToolTip(name: any, value: any): any;
	    protected _getColors(colorModels: any): any;
	    protected _updateRangeStops(rangeStops: any, min: any, max: any, percent: any): any[];
	    private _updatePercentRangeStops;
	    private _getViewport;
	    protected _getClientContext(): {
	        viewport: {
	            LeftLongitude: number;
	            TopLatitude: number;
	            RightLongitude: number;
	            BottomLatitude: number;
	            CenterPointLongitude: number;
	            CenterPointLatitude: number;
	        };
	        clientSize: {
	            width: number;
	            height: number;
	        };
	    };
	    protected _updateClientStateUnsafe(clientState: any): void;
	    protected _updateViewport(viewport: any): void;
	    protected _updateContentSizeUnsafe(): void;
	    viewportChangedCallback: (viewport: any) => void;
	    protected _onViewPortChanged(): void;
	    onInitialExtent(newViewport?: any): void;
	    protected _onInitialExtentUnsafe(newViewport?: any): void;
	    private _onInitialExtentBase;
	    protected _getWidget(): dxVectorMap;
	    private _subscribeItemEvents;
	    private _unsubscribeItemEvents;
	    private _toggleInitialExtentChanged;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DataPoint = DevExpress.Dashboard.Internal.Viewer.DataPoint;
    import mapItem = DevExpress.Dashboard.Internal.Viewer.mapItem;
	export class geoPointMapItemBase extends mapItem {
	    raiseTimerClusterizationDataRequest: any;
	    timer: any;
	    constructor(container: HTMLElement, options: any);
	    initialDataRequestUnsafe(): void;
	    protected selectTupleUnsafe(tuple: any, state: any): void;
	    protected _setSelectionUnsafe(values: any): void;
	    protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
	    protected renderPartialContentUnsafe(): void;
	    protected resetClientViewport(): void;
	    protected updateContentStateUnsafe(): void;
	    forceUpdateClientState(): void;
	    private _getGeoPointMapViewerOptions;
	    _getMarkerLayers(): any;
	    _configureLayers(viewModel: any): any;
	    _configureMarkerLayers(viewModel: any): any;
	    _updateMarkerLayers(viewModel: any): void;
	    _getMarker(viewModel: any, markerDataSource: any): any;
	    _getArea(viewModel: any): {
	        hoverEnabled: boolean;
	        selectionMode: string;
	        label: {
	            enabled: any;
	            dataField: string;
	        };
	    };
	    _getLegends(viewModel: any): any[];
	    _getColorLegend(viewModel: any): any;
	    _getWeightLegend(viewModel: any): any;
	    _getMinMaxValues(markerDataSource: any): {
	        min: any;
	        max: any;
	    };
	    _pointsCountTooltip(count: any): string;
	    _getElementInteractionValue(element: any, viewModel: any): any[];
	    _getDimensionsTooltipHtml(tooltipDimensions: any): string;
	    _getMeasuresTooltipHtml(tooltipMeasures: any): string;
	    _getDataPoint(element: any): DataPoint;
	    _getDataPointMeasureIds(): any[];
	    protected _updateContentSizeUnsafe(): void;
	    _raiseClusterizationDataRequest(): void;
	    _onViewPortChanged(): void;
	    _onInitialExtentUnsafe(viewport?: any): void;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import MapLayer = DevExpress.ui;
    import geoPointMapItemBase = DevExpress.Dashboard.Internal.Viewer.geoPointMapItemBase;
	export class bubbleMapItem extends geoPointMapItemBase {
	    constructor(container: HTMLElement, options: any);
	    _getMarkerLayers(): MapLayer[];
	    _configureMarkerLayers(viewModel: any): any[];
	    _getMarkerDataSource(): any[];
	    _getMarker(viewModel: any, markerDataSource: any): any;
	    _getColorLegend(viewModel: any): any;
	    _getWeightLegend(viewModel: any): any;
	    _getBubbleTooltip(viewModel: any, weight: any, color: any, pointsCount: any): string;
	    _getBubbleRangeStops(colorizer: any, markerDataSource: any): any[];
	    _getBubbleWeightRangeStops(markerDataSource: any): any[];
	    _getBubbleColors(colorModels: any, defaultColorsCount: any): any;
	    _getDefaultBubbleColorizerColors(count: any): any[];
	    _getDataPointMeasureIds(): any[];
	}

}
declare module DevExpress.Dashboard.Internal.Data {
    import chartDataControllerProto = DevExpress.Dashboard.Internal.Data.chartDataControllerProto;
	export class chartDataController extends chartDataControllerProto {
	    protected getArgumentBindingValue(argumentPoint: any, pointIndex: number): any;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
	export class selectionHelper {
	    static setSelectedArguments(widget: any, values: any, state: any): void;
	    static setSelectedSeries(widget: any, values: any, state: any): void;
	    static setSelectedPoint(widget: any, seriesValue: any, argumentValue: any, state: any): void;
	    static setSelectedWidgetViewer(widget: any, values: any, state: any): void;
	    static selectWholePie(widgetViewer: any, state: any): void;
	    static _selectSeries(widget: any, seriesValue: any, state: any): void;
	    static _selectArgument(widget: any, argumentValue: any, state: any): void;
	    static _selectSeriesPoints(series: any, argumentValue: any, state: any): void;
	    static _selectValue(widget: any, value: any, state: any): void;
	    static _selectWidget(widget: any, state: any): void;
	    static _checkWidgetCorrespondsToValue(widget: any, value: any): boolean;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dxChart =  DevExpress.viz.dxChart ;
    import dxChartOptions = DevExpress.ui;
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    import DataPoint = DevExpress.Dashboard.Internal.Viewer.DataPoint;
	export class chartItem extends baseItem {
	    itemElementCustomColor: JQuery.Callbacks<Function>;
	    chartViewer: dxChart;
	    static _maxTooltipValues: number;
	    constructor(container: HTMLElement, options: any);
	    dispose(): void;
	    protected _initializeData(newOptions: any): void;
	    protected _clearSelectionUnsafe(): void;
	    protected selectTupleUnsafe(tuple: any, state: any): void;
	    protected _setSelectionUnsafe(values: any): void;
	    protected updateContentStateUnsafe(): void;
	    protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
	    protected getInfoUnsafe(): {
	        name: string;
	        headerHeight: number;
	        position: JQuery.Coordinates;
	        width: number;
	        height: number;
	        virtualSize: any;
	        scroll: any;
	    };
	    _elementCustomColor(eventArgs: any): void;
	    _getZoomAndPanOption(viewModel: any): {
	        argumentAxis: string;
	    };
	    _getViewOptions(): any;
	    _getCommonOptions(): dxChartOptions;
	    protected _applySelectionUnsafe(): void;
	    _getDataPoint(element: any): DataPoint;
	    _getMeasuresIds(elementSeriesTag: any): any;
	    _isMultiDataSupported(): boolean;
	    _getElementInteractionValue(element: any, viewModel: any): any;
	    _isAxisInPercentFormat(pane: any, isSecondaryAxis: any): boolean;
	    _isAxisInScientificFormat(pane: any, isSecondaryAxis: any): boolean;
	    _isFullStackedSeriesType(seriesType: any): boolean;
	    _convertHoverMode(selectionMode: any): "none" | "allArgumentPoints" | "allSeriesPoints";
	    _convertPointHoverMode(selectionMode: any): "none" | "allArgumentPoints" | "allSeriesPoints" | "onlyPoint";
	    protected _resizeUnsafe(): void;
	    _getWidget(): dxChart;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dxVectorMapOptions = DevExpress.ui;
    import ItemDataDeltaValue = DevExpress.Dashboard.Data.ItemDataDeltaValue;
    import ItemDataMeasureValue = DevExpress.Dashboard.Data.ItemDataMeasureValue;
    import DeltaValueType = DevExpress.Dashboard.Model.DeltaValueType;
    import DataPoint = DevExpress.Dashboard.Internal.Viewer.DataPoint;
    import mapItem = DevExpress.Dashboard.Internal.Viewer.mapItem;
	export interface MapDeltaColorizerViewModel {
	    AttributeName: string;
	    ActualValueName: string;
	    TargetValueName: string;
	    DeltaValueName: string;
	    ActualValueId: string;
	    TargetValueId: string;
	    DeltaValueId: string;
	    DeltaValueType: DeltaValueType;
	}
	export class choroplethMapItem extends mapItem {
	    constructor(container: HTMLElement, options: any);
	    selectTuple(tuple: any, state: any): void;
	    protected _setSelectionUnsafe(values: any): void;
	    protected updateContentStateUnsafe(): void;
	    protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
	    _getChoroplethMapViewerOptions(): dxVectorMapOptions;
	    _getColorLegend(legendViewModel: any, measureDescriptor: any): any;
	    _fillMeasureToolTip(mapDataSourceItem: any, attribute: any, tooltipMeasures: any): void;
	    _fillValueMapDataSourceAttrs(mapDataSource: any, choroplethColorizer: any, tooltipMeasures: any, mapItems: any): void;
	    _fillDeltaMapDataSourceAttrs(mapDataSource: any, choroplethColorizer: MapDeltaColorizerViewModel, tooltipMeasures: any, mapItems: any): void;
	    _correctAttributesTitle(attributes: any, displayText: any): void;
	    _getDeltaValue(deltaValue: ItemDataDeltaValue, deltaValueType: DeltaValueType): ItemDataMeasureValue;
	    _findAttributeValueByName(attributes: any, attributeName: any): any;
	    _getRangeStops(choroplethColorizer: any): any[];
	    _convertIndicatorType(type: any): string;
	    _getDeltaColorValue(indicatorType: any, isGood: any): -1 | 0.5 | 2.5 | 1.5;
	    _getArea(viewModel: any, colors: any, rangeStops: any): {
	        colorGroupingField: string;
	        colorGroups: any;
	        palette: any;
	        customize: (items: any) => void;
	        selectionMode: string;
	        label: {
	            enabled: any;
	            dataField: string;
	        };
	    };
	    _getDataPoint(element: any): DataPoint;
	    _getElementInteractionValue(element: any, viewModel?: any): any[];
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
	export class customFakeItem extends baseItem {
	    constructor(container: HTMLElement, options: any);
	    protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
	    _ensureToolbarIsRendered(): any;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import IWidgetsViewer = DevExpress.Dashboard.Internal.Viewer.IWidgetsViewer;
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    import IWidgetItemDataAccessor = DevExpress.Dashboard.Internal.Viewer.IWidgetItemDataAccessor;
    import widgetItemCore = DevExpress.Dashboard.Internal.Viewer.widgetItemCore;
	export class widgetViewerItem<TWidgetOptions extends widgetItemCore = widgetItemCore> extends baseItem {
	    widgetsViewer: IWidgetsViewer;
	    constructor(container: HTMLElement, options: any);
	    protected _clearSelectionUnsafe(): void;
	    protected getInfoUnsafe(): any;
	    protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
	    protected createWidgetViewer(element: HTMLElement, options: any): IWidgetsViewer;
	    protected _getContainerPositionUnsafe(): {
	        left: number;
	        top: number;
	        width: number;
	        height: number;
	        offsetX: number;
	        offsetY: number;
	    };
	    _getSpecificWidgetViewerOptions(): {
	        itemOptions: {
	            encodeHtml: any;
	            itemWidgetOptionsPrepared: (options: Object) => void;
	        };
	    };
	    _getWidgetType(): void;
	    _isHoverEnabled(): boolean;
	    _configureHover(selectionValues: any): {
	        hoverEnabled: boolean;
	        cursor: string;
	    };
	    _getWidgetViewerOptions(): any;
	    _supportAnimation(): boolean;
	    _getDataSource(): any;
	    _getElementInteractionValue(element: any, viewModel?: any): any;
	    _getOnClickHandler(): (e: any) => void;
	    _getOnHoverHandler(): (e: any) => void;
	    _convertContentArrangementMode(contentArrangementMode: any): "auto" | "column" | "row";
	    protected _resizeUnsafe(): void;
	    protected updateContentStateUnsafe(): void;
	    _setSourceItemProperties(sourceItem: TWidgetOptions, elementModel: any, props: IWidgetItemDataAccessor): void;
	    _isMultiDataSupported(): boolean;
	    _ensureOptions(options: any): void;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import widgetViewerItem = DevExpress.Dashboard.Internal.Viewer.widgetViewerItem;
    import widgetItemCore = DevExpress.Dashboard.Internal.Viewer.widgetItemCore;
	export class kpiItem<TWidgetOptions extends widgetItemCore = widgetItemCore> extends widgetViewerItem<TWidgetOptions> {
	    constructor(container: HTMLElement, options: any);
	    protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
	    _showTitle(): boolean;
	    _getElementsName(): any;
	    protected selectTupleUnsafe(tuple: any, state: any): void;
	    protected _setSelectionUnsafe(values: any): void;
	    _getDataPoint(element: any): {
	        getValues: (name: any) => any;
	        getDeltaIds: () => any[];
	        getMeasureIds: () => any[];
	        getSelectionValues: () => any;
	    };
	    _isMultiDataSupported(): boolean;
	    _setSourceItemProperties(sourceItem: TWidgetOptions, elementModel: any, props: any): void;
	    protected _applySelectionUnsafe(): void;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dxCircularGaugeOptions = DevExpress.ui;
    import dxLinearGaugeOptions = DevExpress.ui;
    import kpiItem = DevExpress.Dashboard.Internal.Viewer.kpiItem;
    import widgetItemCore = DevExpress.Dashboard.Internal.Viewer.widgetItemCore;
	export class gaugesItem extends kpiItem<dxLinearGaugeOptions & dxCircularGaugeOptions & widgetItemCore> {
	    constructor(container: HTMLElement, options: any);
	    _getSpecificWidgetViewerOptions(): any;
	    _supportAnimation(): boolean;
	    _getWidgetType(): "circulargauge" | "lineargauge";
	    _getElementsName(): string;
	    _showTitle(): any;
	    _getWidget(): any[];
	    _setSourceItemProperties(sourceItem: widgetItemCore, gaugeModel: any, props: any): void;
	    _setVisualProperties(sourceItem: dxLinearGaugeOptions | dxCircularGaugeOptions, gaugeModel: any, range: any): void;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import MapLayer = DevExpress.ui;
    import geoPointMapItemBase = DevExpress.Dashboard.Internal.Viewer.geoPointMapItemBase;
	export class geoPointMapItem extends geoPointMapItemBase {
	    constructor(container: HTMLElement, options: any);
	    _getMarkerLayers(): MapLayer[];
	    _configureMarkerLayers(viewModel: any): any[];
	    _getMarkerDataSource(): {
	        dotDataSource: any[];
	        bubbleDataSource: any[];
	    };
	    _getDorMarker(viewModel: any, markerDataSource: any): any;
	    _getBubbleMarker(viewModel: any, markerDataSource: any): any;
	    _getColorLegend(viewModel: any): void;
	    _getWeightLegend(viewModel: any): void;
	    _getClusterBubbleColor(value: any): "rgb(27, 73, 165)" | "rgb(63, 136, 48)" | "rgb(228, 124, 2)" | "rgb(214, 5, 5)";
	    _getClusterBubbleSizeIndex(value: any): number;
	    _getDataPointMeasureIds(): any[];
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
	export class groupItem extends baseItem {
	    constructor(container: HTMLElement, options: any);
	    protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
	    _itemHasOwnContent(): boolean;
	    updateState(state: any): void;
	    getOffset(): {
	        width: number;
	        height: number;
	    };
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import widgetViewerItem = DevExpress.Dashboard.Internal.Viewer.widgetViewerItem;
	export class pieItem extends widgetViewerItem {
	    itemElementCustomColor: JQuery.Callbacks<Function>;
	    pieMouseEventController: pieMouseEventController;
	    sizeGroupId: any;
	    constructor(container: HTMLElement, options: any);
	    protected _initializeData(newOptions: any): void;
	    protected _clearSelectionUnsafe(): void;
	    protected updateContentStateUnsafe(): void;
	    protected selectTupleUnsafe(tuple: any, state: any): void;
	    protected _setSelectionUnsafe(values: any): void;
	    _elementCustomColor(eventArgs: any): void;
	    _createPieMouseEventController(): void;
	    _isHoverEnabled(): boolean;
	    _isItemSelectionEnabled(): boolean;
	    _isLabelsVisible(): boolean;
	    _supportAnimation(): boolean;
	    _getSpecificWidgetViewerOptions(): any;
	    _getWidgetType(): string;
	    _getDataSource(): {};
	    _getPointSelectionEnabled(): boolean;
	    _getFormatLabelHandler(valueType: any): (label: any) => any;
	    _getTooltipPattern(valueType: any): "" | "{0}: {1}" | "{0} ({1})" | "{0}: {1} ({2})";
	    _getElementInteractionValue(element: any, viewModel?: any): any;
	    _getOnClickHandler(): (e: any) => void;
	    _getSelectPointsHandler(): (e: any) => void;
	    _getOnHoverHandler(): (e: any) => void;
	    _getHoverPointsHandler(): (e: any) => void;
	    _pieMouseEventHandler(element: any): void;
	    _sliceMouseEventHandler(element: any): void;
	    _getDataPoint(element: any): {
	        getValues: (name: any) => any;
	        getDeltaIds: () => any[];
	        getMeasureIds: () => any;
	    };
	    _getMeasuresIds(sliceTag: any): any;
	    _isMultiDataSupported(): boolean;
	    _getWidget(): any[];
	    protected _applySelectionUnsafe(): void;
	}
	export class pieMouseEventController {
	    pieData: any;
	    sliceData: any;
	    shouldRaise: boolean;
	    ready: JQuery.Callbacks<Function>;
	    timer: number;
	    constructor();
	    setPieData(data: any): void;
	    setSliceData(data: any): void;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import MapLayer = DevExpress.ui;
    import geoPointMapItemBase = DevExpress.Dashboard.Internal.Viewer.geoPointMapItemBase;
	export class pieMapItem extends geoPointMapItemBase {
	    _pieUniqueArguments: any;
	    _pieArgumentDisplayTexts: any;
	    _pieArgumentColors: any;
	    itemElementCustomColor: JQuery.Callbacks<Function>;
	    constructor(container: HTMLElement, options: any);
	    _getMarkerLayers(): MapLayer[];
	    _configureMarkerLayers(viewModel: any): any[];
	    _getPieMapMarker(viewModel: any, markerDataSource: any, pies: any): any;
	    _getMarkerDataSource(pies: any, isWeighted: any): any[];
	    _getColorLegend(viewModel: any): any;
	    _getWeightLegend(viewModel: any): any;
	    _getPieSegments(): any[];
	    _fillArgumentParams(pieSegment: any): void;
	    _getPiesData(pieSegments: any, viewModel: any): {};
	    _getPieSegmentCount(pie: any): number;
	    _getEmptyValues(length: any): any[];
	    _getPieRangeStops(pies: any): any[];
	    _getRangeStopIndex(value: any, rangeStops: any): number;
	    _getDataPointMeasureIds(): any[];
	    _elementCustomColor(eventArgs: any): void;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {

import dxElement = DevExpress.core.dxElement;
    import dxPivotGrid =  DevExpress.ui.dxPivotGrid ;
    import dxPivotGridOptions = DevExpress.ui;
    import styleSettingsProvider = DevExpress.Dashboard.Internal.Viewer.styleSettingsProvider;
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    import DataPoint = DevExpress.Dashboard.Internal.Viewer.DataPoint;
	export class pivotGridItem extends baseItem {
	    _collapseStateCache: any;
	    _conditionalFormattingInfoCache: any[];
	    _styleSettingsProvider: styleSettingsProvider;
	    pivotGridViewer: dxPivotGrid;
	    expandStateChanged: JQuery.Callbacks<Function>;
	    protected readonly _captionToolbarSeparatorRequired: boolean;
	    constructor(container: HTMLElement, options: any);
	    dispose(): void;
	    protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
	    protected renderPartialContentUnsafe(): void;
	    protected getInfoUnsafe(): any;
	    getExpandingState(isRowsExpanding?: boolean, isColumnsExpanding?: boolean): {
	        rows: any;
	        columns: any;
	    };
	    private _onExpandStateChanged;
	    private _getExpandedPaths;
	    private _getCollapsedPaths;
	    protected _initializeData(newOptions: any): void;
	    _getPivotGridOptions(): dxPivotGridOptions;
	    _getShowColumnGrandTotals(fields: any): any;
	    _showRowGrandTotals(fields: any): any;
	    _createHeaderHierarchy(list: any): any[];
	    _createCells(list: any): any[];
	    _getExpandValueChangingHandler(): (args: any) => void;
	    onCollapseStateChanged(isColumn: any, values: any, collapse: any): void;
	    protected _resizeUnsafe(): void;
	    _getDataPoint(element: any): DataPoint;
	    _getWidget(): dxPivotGrid;
	    _onCellPrepared(element: {
	        component?: dxPivotGrid;
	        element?: dxElement;
	        area?: string;
	        cellElement?: dxElement;
	        cell?: DevExpress.ui.dxPivotGridPivotGridCell;
	        rowIndex?: number;
	        columnIndex?: number;
	    }): void;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import groupItem = DevExpress.Dashboard.Internal.Viewer.groupItem;
	export class tabPageItem extends groupItem {
	    constructor(container: HTMLElement, options: any);
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
	export class textItem extends baseItem {
	    div: JQuery;
	    $textContent: JQuery;
	    constructor(container: HTMLElement, options: any);
	    protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
	    _getWidget(): import("devextreme/core/element").dxElement;
	    _setContent(): void;
	    _updateDocvariableValues(htmlText: any): any;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dxTreeMap =  DevExpress.viz.dxTreeMap ;
    import dxTreeMapOptions = DevExpress.ui;
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    import DataPoint = DevExpress.Dashboard.Internal.Viewer.DataPoint;
	export class treemapItem extends baseItem {
	    itemElementCustomColor: JQuery.Callbacks<Function>;
	    treemapViewer: dxTreeMap;
	    constructor(container: HTMLElement, options: any);
	    dispose(): void;
	    protected _initializeData(newOptions: any): void;
	    protected _clearSelectionUnsafe(): void;
	    protected selectTupleUnsafe(tuples: any, state: any): void;
	    protected _setSelectionUnsafe(values: any): void;
	    protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
	    protected updateContentStateUnsafe(): void;
	    _selectNodes(valueSet: any, state: any): void;
	    _clickAction(tuples: any): void;
	    _elementCustomColor(eventArgs: any): void;
	    _getTreeMapViewerOptions(): dxTreeMapOptions;
	    _getLayoutAlgorithm(): "squarified" | "strip" | "sliceAndDice" | "rotatedSliceAndDice";
	    _getLayoutDirection(): "leftBottomRightTop" | "leftTopRightBottom" | "rightBottomLeftTop" | "rightTopLeftBottom";
	    _getDataPoint(element: any): DataPoint;
	    _getElementInteractionValue(element: any): any;
	    _getDataPointMeasureIds(): any[];
	    protected _updateContentSizeUnsafe(): void;
	    _getWidget(): dxTreeMap;
	    _isMultiDataSupported(): boolean;
	    protected _applySelectionUnsafe(): void;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    import ViewerItemOptions = DevExpress.Dashboard.Internal.Viewer.ViewerItemOptions;
	export class ViewerItemFactory {
	    createItem(container: HTMLElement, options: ViewerItemOptions): baseItem;
	}
	export let defaultViewerItemFactory: ViewerItemFactory;

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DashboardItemCaptionToolbarOptions = DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
    import ViewerToolbarItem = DevExpress.Dashboard.ViewerToolbarItem;
	export interface ViewerToolbarLocatedItem extends ViewerToolbarItem {
	    location: 'before' | 'center' | 'after';
	    isSeparator?: boolean;
	    disabled?: boolean;
	}
	export function arrangeFloatingToolbarItems(itemOptions: DashboardItemCaptionToolbarOptions): Array<ViewerToolbarLocatedItem>;
	export function arrangeHoveredToolbarItems(itemOptions: DashboardItemCaptionToolbarOptions, containerHovered: boolean, disabled: boolean): Array<ViewerToolbarLocatedItem>;
	export function arrangeTitleToolbarItems(itemOptions: DashboardItemCaptionToolbarOptions, showStaticItemsOnCenter: boolean): Array<ViewerToolbarLocatedItem>;
	export function arrangeStaticToolbarItems(itemOptions: DashboardItemCaptionToolbarOptions, disabled: boolean): Array<ViewerToolbarLocatedItem>;

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dxListOptions = DevExpress.ui;

    import dxTileViewOptions = DevExpress.ui;
    import ViewerToolbarItemMenu = DevExpress.Dashboard.ViewerToolbarItemMenu;
	export class PopupMenuCreator {
	    private static _icon_menu_element_size;
	    static toggleMenu(element: HTMLElement, menu: ViewerToolbarItemMenu, container: HTMLElement, controlContainer: HTMLElement, onMenuItemClick?: () => void): void;
	    private static _createPopoverOptions;
	    static _createTileViewOptions(menu: ViewerToolbarItemMenu, onItemClick: (data: any) => void): dxTileViewOptions;
	    static _createListOptions(menu: ViewerToolbarItemMenu, onItemClick: (data: any) => void): dxListOptions;
	    private static _getPopupContainer;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
import dxElement = DevExpress.core.dxElement;
    import dxTooltipOptions = DevExpress.ui;
    import ViewerToolbarItem = DevExpress.Dashboard.ViewerToolbarItem;
    import ViewerToolbarItemTooltip = DevExpress.Dashboard.ViewerToolbarItemTooltip;
    import ViewerToolbarLocatedItem = DevExpress.Dashboard.Internal.Viewer.ViewerToolbarLocatedItem;
    import dxToolbarItem = DevExpress.Dashboard.Internal.Viewer.dxToolbarItem;
    import dxToolbarItemOptions = DevExpress.Dashboard.Internal.Viewer.dxToolbarItemOptions;
	export class DashboardCaptionToolbarAdapter {
	    private _encodeHtml;
	    constructor(_encodeHtml: boolean);
	    createToolbarItem(item: ViewerToolbarLocatedItem, controlContainer?: HTMLElement, popupContainer?: HTMLElement, onMenuItemClick?: () => void): dxToolbarItem;
	    _applyText(item: any, text: string): void;
	    _createToolbarItemOptions(item: ViewerToolbarLocatedItem, controlContainer: HTMLElement, popupContainer: HTMLElement, onMenuItemClick: () => void): dxToolbarItemOptions;
	    _createTooltipOptions(tooltip: ViewerToolbarItemTooltip | string, target: dxElement, container: HTMLElement): dxTooltipOptions;
	    _fillCssClasses(item: ViewerToolbarItem): Array<string>;
	    _validate(item: ViewerToolbarItem): void;
	    _createSeparatorItem(item: ViewerToolbarLocatedItem): dxToolbarItem;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
	export function calcMaxWidth(itemsWidth: Array<number>, sectionWidth: number, sectionMaxWidth: number): Array<number>;

}
declare module DevExpress.Dashboard.Internal.Viewer {
import dxElement = DevExpress.core.dxElement;
    import dxToolbar =  DevExpress.ui.dxToolbar ;
    import dxToolbarOptions = DevExpress.ui;
    import DashboardItemCaptionToolbarOptions = DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
    import DashboardCaptionToolbarAdapter = DevExpress.Dashboard.Internal.Viewer.DashboardCaptionToolbarAdapter;
    import ViewerToolbarLocatedItem = DevExpress.Dashboard.Internal.Viewer.ViewerToolbarLocatedItem;
	export interface CaptionToolbar {
	    calcHeight: (options: DashboardItemCaptionToolbarOptions) => number;
	    calcMinWidth: (options: DashboardItemCaptionToolbarOptions) => number;
	    update: (options: DashboardItemCaptionToolbarOptions) => boolean;
	    onResize: () => void;
	    dispose: () => void;
	    element: HTMLElement;
	    disabled: boolean;
	}
	export interface dxToolbarItem {
	    location: string;
	    options?: dxToolbarItemOptions;
	    widget?: string;
	    template?: () => JQuery | Element | string;
	    html?: string;
	    text?: string;
	}
	export interface dxToolbarItemOptions {
	    elementAttr?: dxToolbarItemElementAttr;
	    disabled?: boolean;
	    hint?: string;
	    html?: string;
	    text?: string;
	    template?: (buttonData: any, contentElement: dxElement) => JQuery | Element | string;
	    onClick?: (data: {
	        element: dxElement;
	    }) => void;
	    onContentReady?: (data: any) => void;
	}
	export interface dxToolbarItemElementAttr {
	    class?: string;
	    id?: string;
	}
	export abstract class DashboardCaptionToolbarBase implements CaptionToolbar {
	    protected _container: HTMLElement;
	    protected _controlContainer: HTMLElement;
	    protected _popupContainer: HTMLElement;
	    protected encodeHtml: boolean;
	    protected _adapter: DashboardCaptionToolbarAdapter;
	    protected _toolbar: dxToolbar;
	    protected _toolbarDiv: HTMLElement;
	    protected _toolbarContainer: HTMLElement;
	    protected _options: DashboardItemCaptionToolbarOptions;
	    protected _className: string;
	    protected _disabled: boolean;
	    protected readonly _initialized: boolean;
	    protected readonly _staticItemsClass: string;
	    readonly element: HTMLElement;
	    disabled: boolean;
	    constructor(_container: HTMLElement, _controlContainer: HTMLElement, _popupContainer: HTMLElement, encodeHtml?: boolean);
	    update(options: DashboardItemCaptionToolbarOptions): boolean;
	    calcHeight(options: DashboardItemCaptionToolbarOptions): number;
	    calcMinWidth(options: DashboardItemCaptionToolbarOptions): any;
	    onResize(): void;
	    dispose(): void;
	    protected _updateToolbar(): void;
	    protected _createInstance(): CaptionToolbar;
	    protected _getToolbarOptions(): dxToolbarOptions;
	    protected _getVisibleItems(): Array<ViewerToolbarLocatedItem>;
	    protected _getToolbarItems(items: Array<ViewerToolbarLocatedItem>): Array<dxToolbarItem>;
	    protected _appendToContainer(toolbarDiv: HTMLElement): HTMLElement;
	    protected _resizeStaticToolbarItems(toolbarDiv?: HTMLElement): void;
	    protected _processToolbarBeforeGettingSize(toolbar: CaptionToolbar): void;
	}
	export interface ItemCaptionToolbarViewOptions {
	    hasCaption: boolean;
	    encodeHtml: boolean;
	    captionToolbarSeparatorRequired: boolean;
	    isBottomFloatingToolbarPosition: boolean;
	    allowPreview: boolean;
	    hiddenToolbar: boolean;
	    itemHasOwnContent: boolean;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let gridDefinitionMode: IDashboardSerializationInfo;
	export let gridWindowDefinitionSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import GridWindowDefinitionMode = DevExpress.Dashboard.Model.GridWindowDefinitionMode;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
	export class GridWindowDefinition extends MeasureCalculationWindowDefinition {
	    definitionMode: ko.Observable<GridWindowDefinitionMode>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    equals(def: any): boolean;
	}

}
declare module DevExpress.Dashboard.Internal.Model {

	export class UndoEngineContainer {
	    static undoEngine: DevExpress.Analytics.Utils.UndoEngine;
	}
	export function wrapFuncWithUndoRedo<T extends (...a: any[]) => any>(func: T): T;
	export function wrapWithUndoRedo(target: any, key: string, value: any): {
	    value: any;
	};

}
declare module DevExpress.Dashboard.Metadata {
    import DashboardLocalizationId = DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    import DeltaValueType = DevExpress.Dashboard.Model.DeltaValueType;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let deltaValueTypeMap: {
	    [key in DeltaValueType]: DashboardLocalizationId;
	};
	export let valueType: IDashboardSerializationInfo;
	export let resultIndicationMode: IDashboardSerializationInfo;
	export let resultIndicationThresholdType: IDashboardSerializationInfo;
	export let resultIndicationThreshold: IDashboardSerializationInfo;
	export let cardDeltaOptionsSerializationsInfo: IDashboardSerializationInfoArray;
	export let deltaOptionsSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import DeltaIndicationMode = DevExpress.Dashboard.Model.DeltaIndicationMode;
    import DeltaIndicationThresholdType = DevExpress.Dashboard.Model.DeltaIndicationThresholdType;
    import DeltaValueType = DevExpress.Dashboard.Model.DeltaValueType;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
	export class CardDeltaOptions extends SerializableModel {
	    resultIndicationMode: ko.Observable<DeltaIndicationMode>;
	    resultIndicationThresholdType: ko.Observable<DeltaIndicationThresholdType>;
	    resultIndicationThreshold: ko.Observable<number>;
	    constructor(modelJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}
	export class DeltaOptions extends CardDeltaOptions {
	    valueType: ko.Observable<DeltaValueType>;
	    constructor(modelJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let viewType: IDashboardSerializationInfo;
	export let highlightMinMaxPoints: IDashboardSerializationInfo;
	export let highlightStartEndPoints: IDashboardSerializationInfo;
	export let sparklineOptionsSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import SparklineViewType = DevExpress.Dashboard.Model.SparklineViewType;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
	export class SparklineOptions extends SerializableModel {
	    viewType: ko.Observable<SparklineViewType>;
	    highlightMinMaxPoints: ko.Observable<boolean>;
	    highlightStartEndPoints: ko.Observable<boolean>;
	    constructor(JSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}

}
declare module DevExpress.Dashboard.Model {


    import GridColumnTotalType = DevExpress.Dashboard.Model.GridColumnTotalType;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import TypedSerializableModel = DevExpress.Dashboard.Model.TypedSerializableModel;
	export class GridColumnTotal extends TypedSerializableModel {
	    totalType: ko.Observable<GridColumnTotalType>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    protected _getDefaultItemType(): string;
	}
	export let _totalTypeTemplate: IDashboardSerializationInfo;
	export let _gridColumnTotalSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Metadata {
	export let totalTypeValues: {
	    commonCountTypes: string[];
	    commonMinMaxTypes: string[];
	    numericTypes: string[];
	    autoTypes: string[];
	};

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let columnType: IDashboardSerializationInfo;
	export let displayMode: IDashboardSerializationInfo;
	export let columnWeight: IDashboardSerializationInfo;
	export let fixedWidth: IDashboardSerializationInfo;
	export let widthType: IDashboardSerializationInfo;
	export let totalsTemplate: IDashboardSerializationInfo;
	export let gridColumnBaseSerializationsInfo: IDashboardSerializationInfoArray;
	export let dimension: IDashboardSerializationInfo;
	export let dimensionDisplayMode: IDashboardSerializationInfo;
	export let gridDimensionColumnSerializationsInfo: IDashboardSerializationInfoArray;
	export let alwaysShowZeroLevel: IDashboardSerializationInfo;
	export let measure: IDashboardSerializationInfo;
	export let gridMeasureColumnSerializationsInfo: IDashboardSerializationInfoArray;
	export let gridColumnDeltaOptions: IDashboardSerializationInfo;
	export let gridColumnActualValue: IDashboardSerializationInfo;
	export let gridColumnTargetValue: IDashboardSerializationInfo;
	export let gridDeltaColumnSerializationsInfo: IDashboardSerializationInfoArray;
	export let showStartEndValues: IDashboardSerializationInfo;
	export let sparkline: IDashboardSerializationInfo;
	export let sparklineOptions: IDashboardSerializationInfo;
	export let gridSparklineColumnSerializationsInfo: IDashboardSerializationInfoArray;
	export let uri: IDashboardSerializationInfo;
	export let displayValue: IDashboardSerializationInfo;
	export function checkGridUriPattern(value: any): string;
	export function validateGridUriPattern(value: any): boolean;
	export function gridValidateUriPattern(uriPattern: any): boolean;
	export let uriPatternValidationRules: {
	    type: string;
	    validationCallback: (options: any) => boolean;
	    message: string;
	}[];
	export let gridColumnUriPattern: IDashboardSerializationInfo;
	export let gridHyperlinkColumnSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import AbsoluteVariationNumericFormat = DevExpress.Dashboard.Model.AbsoluteVariationNumericFormat;
    import PercentOfTargetNumericFormat = DevExpress.Dashboard.Model.PercentOfTargetNumericFormat;
    import PercentVariationNumericFormat = DevExpress.Dashboard.Model.PercentVariationNumericFormat;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import Measure = DevExpress.Dashboard.Model.Measure;
    import DataFieldType = DevExpress.Dashboard.Model.DataFieldType;
    import GridColumnFixedWidthType = DevExpress.Dashboard.Model.GridColumnFixedWidthType;
    import GridColumnValueBarDisplayMode = DevExpress.Dashboard.Model.GridColumnValueBarDisplayMode;
    import GridDimensionColumnDisplayMode = DevExpress.Dashboard.Model.GridDimensionColumnDisplayMode;
    import GridMeasureColumnDisplayMode = DevExpress.Dashboard.Model.GridMeasureColumnDisplayMode;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import IBindingProperty = DevExpress.Dashboard.Model.IBindingProperty;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import DataItemContainer = DevExpress.Dashboard.Model.DataItemContainer;
    import DeltaOptions = DevExpress.Dashboard.Model.DeltaOptions;
    import SparklineOptions = DevExpress.Dashboard.Model.SparklineOptions;
    import IDataItemProvider = DevExpress.Dashboard.Internal.Model.IDataItemProvider;
    import GridColumnTotal = DevExpress.Dashboard.Model.GridColumnTotal;
	export enum GridColumnType {
	    Dimension = 0,
	    Measure = 1,
	    Delta = 2,
	    Sparkline = 3,
	    Hyperlink = 4
	}
	export abstract class GridColumn extends DataItemContainer {
	    weight: ko.Observable<number>;
	    fixedWidth: ko.Observable<number>;
	    widthType: ko.Observable<GridColumnFixedWidthType>;
	    totals: ko.ObservableArray<GridColumnTotal>;
	    _displayNameSeparator: string;
	    readonly actualDataItem: DataItem;
	    readonly _actualDataItemLink: DataItemLink;
	    constructor(dataItemProvider: DataDashboardItem, dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    grabFrom(column: GridColumn): void;
	    protected _getInfoCore(): IDashboardSerializationInfoArray;
	    _getColumnType(): GridColumnType;
	    abstract _getBindingModel(): Array<IBindingProperty>;
	    protected abstract _getActualDataItemLink(): DataItemLink;
	    _getDataId(): string;
	    _isAttribute(dataItem: DataItem): boolean;
	    _getViewModel(): {
	        Weight: number;
	        FixedWidth: number;
	        WidthType: GridColumnFixedWidthType;
	    };
	    _getAvailableTotalTypes(dataItemProvider: IDataItemProvider): string[];
	    protected _getTotalTypes(dataType: DataFieldType): Array<string>;
	}
	export class GridDimensionColumn extends GridColumn {
	    private __dimension;
	    dimension: ko.Observable<Dimension>;
	    displayMode: ko.Observable<GridDimensionColumnDisplayMode>;
	    constructor(dataItemProvider: DataDashboardItem, dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getInfoCore(): IDashboardSerializationInfoArray;
	    _getColumnType(): GridColumnType;
	    protected _getActualDataItemLink(): DataItemLink;
	    _getAvailableTotalTypes(dataItemProvider: IDataItemProvider): string[];
	    protected _getDefaultItemType(): string;
	    _getBindingModel(): Array<IBindingProperty>;
	}
	export class GridMeasureColumn extends GridColumn {
	    private __measure;
	    measure: ko.Observable<Measure>;
	    displayMode: ko.Observable<GridMeasureColumnDisplayMode>;
	    alwaysShowZeroLevel: ko.Observable<boolean>;
	    constructor(dataItemProvider: DataDashboardItem, dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getInfoCore(): IDashboardSerializationInfoArray;
	    _getColumnType(): GridColumnType;
	    protected _getActualDataItemLink(): DataItemLink;
	    _getAvailableTotalTypes(dataItemProvider: IDataItemProvider): string[];
	    protected _getDefaultItemType(): string;
	    _getBindingModel(): Array<IBindingProperty>;
	}
	export class GridDeltaColumn extends GridColumn {
	    private __actualValue;
	    private __targetValue;
	    actualValue: ko.Observable<Measure>;
	    targetValue: ko.Observable<Measure>;
	    deltaOptions: DeltaOptions;
	    displayMode: ko.Observable<GridColumnValueBarDisplayMode>;
	    alwaysShowZeroLevel: ko.Observable<boolean>;
	    absoluteVariationNumericFormat: AbsoluteVariationNumericFormat;
	    percentVariationNumericFormat: PercentVariationNumericFormat;
	    percentOfTargetNumericFormat: PercentOfTargetNumericFormat;
	    constructor(dataItemProvider: DataDashboardItem, dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getInfoCore(): IDashboardSerializationInfoArray;
	    _getColumnType(): GridColumnType;
	    protected _getActualDataItemLink(): DataItemLink;
	    protected _getDefaultItemType(): string;
	    _getBindingModel(): Array<IBindingProperty>;
	}
	export class GridSparklineColumn extends GridColumn {
	    private __measure;
	    measure: ko.Observable<Measure>;
	    showStartEndValues: ko.Observable<boolean>;
	    sparklineOptions: SparklineOptions;
	    protected _getInfoCore(): IDashboardSerializationInfoArray;
	    _getColumnType(): GridColumnType;
	    protected _getActualDataItemLink(): DataItemLink;
	    constructor(dataItemProvider: DataDashboardItem, dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getDefaultItemType(): string;
	    _getBindingModel(): Array<IBindingProperty>;
	}
	export class GridHyperlinkColumn extends GridColumn {
	    private __uriAttribute;
	    private __displayValue;
	    displayValue: ko.Observable<Dimension>;
	    uriPattern: ko.Observable<string>;
	    constructor(dataItemProvider: DataDashboardItem, dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getInfoCore(): IDashboardSerializationInfoArray;
	    _getColumnType(): GridColumnType;
	    protected _getActualDataItemLink(): DataItemLink;
	    protected _getDefaultItemType(): string;
	    _isAttribute(dataItem: DataItem): boolean;
	    _getBindingModel(): Array<IBindingProperty>;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let allowCellMerge: IDashboardSerializationInfo;
	export let columnWidthMode: IDashboardSerializationInfo;
	export let enableBandedRows: IDashboardSerializationInfo;
	export let showVerticalLines: IDashboardSerializationInfo;
	export let showHorizontalLines: IDashboardSerializationInfo;
	export let showColumnHeaders: IDashboardSerializationInfo;
	export let wordWrap: IDashboardSerializationInfo;
	export let gridOptionsSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import GridColumnWidthMode = DevExpress.Dashboard.Model.GridColumnWidthMode;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
	export class GridOptions extends SerializableModel {
	    allowCellMerge: ko.Observable<boolean>;
	    columnWidthMode: ko.Observable<GridColumnWidthMode>;
	    enableBandedRows: ko.Observable<boolean>;
	    showVerticalLines: ko.Observable<boolean>;
	    showHorizontalLines: ko.Observable<boolean>;
	    showColumnHeaders: ko.Observable<boolean>;
	    wordWrap: ko.Observable<boolean>;
	    constructor(JSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    _getViewModel(): Object;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let gridOptions: IDashboardSerializationInfo;
	export let gridColumns: IDashboardSerializationInfo;
	export let sparklineArgument: IDashboardSerializationInfo;
	export let dashboardGridItemSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import IWidthOptions = DevExpress.Dashboard.Internal.Viewer.IWidthOptions;
    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import DashboardItemInteractivityOptions = DevExpress.Dashboard.Model.DashboardItemInteractivityOptions;
    import GridColumn = DevExpress.Dashboard.Model.GridColumn;
    import GridDeltaColumn = DevExpress.Dashboard.Model.GridDeltaColumn;
    import GridDimensionColumn = DevExpress.Dashboard.Model.GridDimensionColumn;
    import GridHyperlinkColumn = DevExpress.Dashboard.Model.GridHyperlinkColumn;
    import GridMeasureColumn = DevExpress.Dashboard.Model.GridMeasureColumn;
    import GridSparklineColumn = DevExpress.Dashboard.Model.GridSparklineColumn;
    import GridOptions = DevExpress.Dashboard.Model.GridOptions;
	export class GridItem extends DataDashboardItem {
	    static _gridColumnTypesMap: {
	        'GridDimensionColumn': {
	            constructor: typeof GridDimensionColumn;
	            displayName: string;
	            icon: string;
	        };
	        'GridMeasureColumn': {
	            constructor: typeof GridMeasureColumn;
	            displayName: string;
	            icon: string;
	        };
	        'GridDeltaColumn': {
	            constructor: typeof GridDeltaColumn;
	            displayName: string;
	            icon: string;
	        };
	        'GridSparklineColumn': {
	            constructor: typeof GridSparklineColumn;
	            displayName: string;
	            icon: string;
	        };
	        'GridHyperlinkColumn': {
	            constructor: typeof GridHyperlinkColumn;
	            displayName: string;
	            icon: string;
	        };
	    };
	    private __sparklineArgument;
	    sparklineArgument: ko.Observable<Dimension>;
	    interactivityOptions: DashboardItemInteractivityOptions;
	    gridOptions: GridOptions;
	    columns: ko.ObservableArray<GridColumn>;
	    constructor(dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    _clearBindings(): void;
	    _createGridColumn(columnJSON: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer): GridColumn;
	    protected _getInfoCore(): IDashboardSerializationInfo[];
	    protected _getDefaultItemType(): string;
	    protected _getMasterFilterMode(): string;
	    protected _getDrillDownEnabled(): boolean;
	    protected _getIgnoreMasterFilter(): boolean;
	    protected _getInteractivityDimensionLinks(): DataItemLink[];
	    protected _cleanDataItemDependencies(): void;
	    protected _updateContentViewModel(content: any): void;
	    _isAttribute(dataItem: DataItem): boolean;
	    _setColumnWidthOptions(clientState: {
	        widthOptions: IWidthOptions;
	    }): void;
	    _getDefaultCalculationWindowDefinition(): MeasureCalculationWindowDefinition;
	    _setClientState(clientState: any): void;
	    _getInteractivityAxisDimensionCount(): number;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let shapeData: IDashboardSerializationInfo;
	export let attributeData: IDashboardSerializationInfo;
	export let customShapefileDataSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
	export class CustomShapefileData extends SerializableModel {
	    shapeData: ko.Observable<string>;
	    attributeData: ko.Observable<string>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let customShapefileUrl: IDashboardSerializationInfo;
	export let customShapefileData: IDashboardSerializationInfo;
	export let customShapefileSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    import CustomShapefileData = DevExpress.Dashboard.Model.CustomShapefileData;
	export class CustomShapefile extends SerializableModel {
	    url: ko.Observable<string>;
	    data: CustomShapefileData;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let topLatitude: IDashboardSerializationInfo;
	export let bottomLatitude: IDashboardSerializationInfo;
	export let leftLongitude: IDashboardSerializationInfo;
	export let rightLongitude: IDashboardSerializationInfo;
	export let centerPointLatitude: IDashboardSerializationInfo;
	export let centerPointLongitude: IDashboardSerializationInfo;
	export let createViewerPaddings: IDashboardSerializationInfo;
	export let mapViewportSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import IViewport = DevExpress.Dashboard.Internal.Model.IViewport;
    import IViewportViewModel = DevExpress.Dashboard.Internal.Model.IViewportViewModel;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
	export class MapViewport extends SerializableModel {
	    topLatitude: ko.Observable<number>;
	    bottomLatitude: ko.Observable<number>;
	    leftLongitude: ko.Observable<number>;
	    rightLongitude: ko.Observable<number>;
	    centerPointLatitude: ko.Observable<number>;
	    centerPointLongitude: ko.Observable<number>;
	    createViewerPaddings: ko.Observable<boolean>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    _set(viewport: IViewport, paddings?: boolean): void;
	    _createViewModel(): IViewportViewModel;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let legendVisible: IDashboardSerializationInfo;
	export let legendPosition: IDashboardSerializationInfo;
	export let mapLegendBaseSerializationsInfo: IDashboardSerializationInfoArray;
	export let legendType: IDashboardSerializationInfo;
	export let weightedLegendSerializationsInfo: IDashboardSerializationInfoArray;
	export let legendOrientation: IDashboardSerializationInfo;
	export let mapLegendSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import MapLegendOrientation = DevExpress.Dashboard.Model.MapLegendOrientation;
    import MapLegendPosition = DevExpress.Dashboard.Model.MapLegendPosition;
    import WeightedLegendType = DevExpress.Dashboard.Model.WeightedLegendType;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
	export class MapLegendBase extends SerializableModel {
	    visible: ko.Observable<boolean>;
	    position: ko.Observable<MapLegendPosition>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}
	export class WeightedLegend extends MapLegendBase {
	    type: ko.Observable<WeightedLegendType>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}
	export class MapLegend extends MapLegendBase {
	    orientation: ko.Observable<MapLegendOrientation>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let area: IDashboardSerializationInfo;
	export let colorLegend: IDashboardSerializationInfo;
	export let weightedLegend: IDashboardSerializationInfo;
	export let customShapefile: IDashboardSerializationInfo;
	export let viewport: IDashboardSerializationInfo;
	export let tooltipMeasures: IDashboardSerializationInfo;
	export let lockNavigation: IDashboardSerializationInfo;
	export let shapeTitleAttributeName: IDashboardSerializationInfo;
	export let mapDashboardItemSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import Measure = DevExpress.Dashboard.Model.Measure;
    import ShapefileArea = DevExpress.Dashboard.Model.ShapefileArea;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import PropertyCategory = DevExpress.Dashboard.Metadata.PropertyCategory;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import DashboardItemMasterFilterInteractivityOptions = DevExpress.Dashboard.Model.DashboardItemMasterFilterInteractivityOptions;
    import CustomShapefile = DevExpress.Dashboard.Model.CustomShapefile;
    import MapViewport = DevExpress.Dashboard.Model.MapViewport;
	export abstract class MapItem extends DataDashboardItem {
	    area: ko.Observable<ShapefileArea>;
	    customShapefile: CustomShapefile;
	    interactivityOptions: DashboardItemMasterFilterInteractivityOptions;
	    viewport: MapViewport;
	    private __tooltipMeasures;
	    tooltipMeasures: ko.ObservableArray<Measure>;
	    lockNavigation: ko.Observable<boolean>;
	    shapeTitleAttributeName: ko.Observable<string>;
	    private _isGeometryChanged;
	    _shapeFilesAttributeNameList: ko.ObservableArray<string>;
	    _initialExtentChanged: ko.Observable<boolean>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    _isGeometryChangedCallback: () => void;
	    _clearBindings(): void;
	    protected _getInfoCore(): IDashboardSerializationInfo[];
	    _isCalculationSupported(): boolean;
	    protected _getMasterFilterMode(): string;
	    protected _getDrillDownEnabled(): boolean;
	    protected _getIgnoreMasterFilter(): boolean;
	    _setClientState(clientState: any): void;
	    _getContentCategories(): PropertyCategory[];
	    protected _updateContentViewModel(content: any): void;
	    _isSortingEnabled(): boolean;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let pivotDefinitionMode: IDashboardSerializationInfo;
	export let pivotWindowDefinitionSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import PivotWindowDefinitionMode = DevExpress.Dashboard.Model.PivotWindowDefinitionMode;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
	export class PivotWindowDefinition extends MeasureCalculationWindowDefinition {
	    definitionMode: ko.Observable<PivotWindowDefinitionMode>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    equals(def: any): boolean;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let pivotColumns: IDashboardSerializationInfo;
	export let pivotRows: IDashboardSerializationInfo;
	export let pivotValues: IDashboardSerializationInfo;
	export let autoExpandColumnGroups: IDashboardSerializationInfo;
	export let autoExpandRowGroups: IDashboardSerializationInfo;
	export let showColumnGrandTotals: IDashboardSerializationInfo;
	export let showRowGrandTotals: IDashboardSerializationInfo;
	export let showColumnTotals: IDashboardSerializationInfo;
	export let showRowTotals: IDashboardSerializationInfo;
	export let valuesPosition: IDashboardSerializationInfo;
	export let rowTotalsPosition: IDashboardSerializationInfo;
	export let columnTotalsPosition: IDashboardSerializationInfo;
	export let layoutType: IDashboardSerializationInfo;
	export let pivotDashboardItemSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import Measure = DevExpress.Dashboard.Model.Measure;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
    import PivotColumnTotalsPosition = DevExpress.Dashboard.Model.PivotColumnTotalsPosition;
    import PivotLayoutType = DevExpress.Dashboard.Model.PivotLayoutType;
    import PivotRowTotalsPosition = DevExpress.Dashboard.Model.PivotRowTotalsPosition;
    import PivotValuesPosition = DevExpress.Dashboard.Model.PivotValuesPosition;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import FilterableDashboardItemInteractivityOptions = DevExpress.Dashboard.Model.FilterableDashboardItemInteractivityOptions;
	export class PivotItem extends DataDashboardItem {
	    private __columns;
	    columns: ko.ObservableArray<Dimension>;
	    private __rows;
	    rows: ko.ObservableArray<Dimension>;
	    private __values;
	    values: ko.ObservableArray<Measure>;
	    autoExpandColumnGroups: ko.Observable<boolean>;
	    autoExpandRowGroups: ko.Observable<boolean>;
	    showColumnGrandTotals: ko.Observable<boolean>;
	    showRowGrandTotals: ko.Observable<boolean>;
	    showColumnTotals: ko.Observable<boolean>;
	    showRowTotals: ko.Observable<boolean>;
	    interactivityOptions: FilterableDashboardItemInteractivityOptions;
	    valuesPosition: ko.Observable<PivotValuesPosition>;
	    rowTotalsLocation: ko.Observable<PivotRowTotalsPosition>;
	    columnTotalsLocation: ko.Observable<PivotColumnTotalsPosition>;
	    layoutType: ko.Observable<PivotLayoutType>;
	    constructor(dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    _clearBindings(): void;
	    protected _getInfoCore(): IDashboardSerializationInfo[];
	    private _canChangeDataItemVisibilityOptions;
	    private _isTotalsVisibilityOptionEnabled;
	    private _setCustomOptionsPropertyOnMeasures;
	    private _setCustomOptionsPropertyOnDimensions;
	    protected _getDefaultItemType(): string;
	    protected _extendContentState(content: any): void;
	    protected _getIgnoreMasterFilter(): boolean;
	    _getDefaultCalculationWindowDefinition(): MeasureCalculationWindowDefinition;
	}

}
declare module DevExpress.Dashboard.Internal {
    import GridItem = DevExpress.Dashboard.Model.GridItem;
    import dataGridItem = DevExpress.Dashboard.Internal.Viewer.dataGridItem;
    import DataItemViewerAdapter = DevExpress.Dashboard.Internal.DataItemViewerAdapter;
	export class GridItemViewerAdapter extends DataItemViewerAdapter<dataGridItem, GridItem> {
	    protected attachToModel(viewerItem: dataGridItem, dataDashboardItem: GridItem): void;
	    protected detachFromModel(viewerItem: dataGridItem, dataDashboardItem: GridItem): void;
	}

}
declare module DevExpress.Dashboard.Internal {
    import MapItem = DevExpress.Dashboard.Model.MapItem;
    import ViewerItemOptions = DevExpress.Dashboard.Internal.Viewer.ViewerItemOptions;
    import mapItem = DevExpress.Dashboard.Internal.Viewer.mapItem;
    import DataItemViewerAdapter = DevExpress.Dashboard.Internal.DataItemViewerAdapter;
	export class MapItemViewerAdapter extends DataItemViewerAdapter<mapItem, MapItem> {
	    protected updateItemContent(content: ViewerItemOptions): void;
	    protected createDashboardViewerItem(element: HTMLElement, content: any, dashboardItem: MapItem): mapItem;
	    protected attachToModel(viewerItem: mapItem, dataDashboardItem: MapItem): void;
	    protected detachFromModel(viewerItem: mapItem, dataDashboardItem: MapItem): void;
	    resume(): void;
	}

}
declare module DevExpress.Dashboard.Internal {
    import PivotItem = DevExpress.Dashboard.Model.PivotItem;
    import pivotGridItem = DevExpress.Dashboard.Internal.Viewer.pivotGridItem;
    import DataItemViewerAdapter = DevExpress.Dashboard.Internal.DataItemViewerAdapter;
	export class PivotItemViewerAdapter extends DataItemViewerAdapter<pivotGridItem, PivotItem> {
	    private expandValueHandler;
	    private expandStateChangedHandler;
	    protected attachToModel(viewerItem: pivotGridItem, dataDashboardItem: PivotItem): void;
	    protected detachFromModel(viewerItem: pivotGridItem, dataDashboardItem: PivotItem): void;
	}

}
declare module DevExpress.Dashboard.Internal {
    import DateFilterItem = DevExpress.Dashboard.Model.DateFilterItem;
    import RangeFilterItem = DevExpress.Dashboard.Model.RangeFilterItem;
    import dateFilterElement = DevExpress.Dashboard.Internal.Viewer.dateFilterElement;
    import rangeSelectorItem = DevExpress.Dashboard.Internal.Viewer.rangeSelectorItem;
    import DataItemViewerAdapter = DevExpress.Dashboard.Internal.DataItemViewerAdapter;
	export type PredefinedPeriodsItem = RangeFilterItem | DateFilterItem;
	export type PredefinedPeriodsViewer = rangeSelectorItem | dateFilterElement;
	export class PredefinedPeriodsItemViewerAdapter extends DataItemViewerAdapter<PredefinedPeriodsViewer, PredefinedPeriodsItem> {
	    protected attachToModel(viewerItem: PredefinedPeriodsViewer, rangeFilterItem: PredefinedPeriodsItem): void;
	}

}
declare module DevExpress.Dashboard.Internal {
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    import IDashboardContext = DevExpress.Dashboard.Internal.IDashboardContext;
    import IDashboardItemContext = DevExpress.Dashboard.Internal.IDashboardItemContext;
    import ItemViewerAdapterBase = DevExpress.Dashboard.Internal.ItemViewerAdapterBase;
	export class ViewerItemAdaptersManager extends DisposableObject {
	    private viewerItemAdaptersMap;
	    private modelSubscriberDict;
	    private createAdapterCore;
	    private releaseAdapter;
	    create(dashboardItem: DashboardItem, element: HTMLElement, context: IDashboardContext, localContext?: IDashboardItemContext, beforeRender?: (item: baseItem) => void): ItemViewerAdapterBase<baseItem, DashboardItem>;
	    dispose(): void;
	}

}
declare module DevExpress.Dashboard.Internal {

    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    import ViewerItemVisualMode = DevExpress.Dashboard.Internal.Viewer.ViewerItemVisualMode;
    import DashboardItemCaptionToolbarOptions = DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
    import CaptionToolbar = DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
    import ItemCaptionToolbarViewOptions = DevExpress.Dashboard.Internal.Viewer.ItemCaptionToolbarViewOptions;
    import ViewerItemFactory = DevExpress.Dashboard.Internal.Viewer.ViewerItemFactory;
    import ViewerItemAdaptersManager = DevExpress.Dashboard.Internal.ViewerItemAdaptersManager;
	export type ItemCreatingType = 'primary' | 'secondary';
	export interface IDashboardContext {
	    beforeApplyViewerItemOptions?: JQueryCallback;
	    viewerItemCreated?: JQueryCallback;
	    viewerItemDispose?: JQueryCallback;
	    addContextToolbarItems?: JQueryCallback;
	    viewerItemCreator?: any;
	    refresh?: (itemName?: string) => void;
	    isDesignMode?: ko.Observable<boolean>;
	    useNeutralFilterMode?: () => boolean;
	    viewerItemsManager?: ViewerItemAdaptersManager;
	}
	export class DashboardItemContext implements IDashboardItemContext {
	    constructor(options?: IDashboardItemContextOptions);
	    addContextToolbarItems: JQuery.Callbacks<Function>;
	    viewerItemCreated: JQuery.Callbacks<Function>;
	    viewerItemDispose: JQuery.Callbacks<Function>;
	    beforeApplyViewerItemOptions: JQuery.Callbacks<Function>;
	    captionToolbarCreated: JQuery.Callbacks<Function>;
	    createCaptionToolbar: (viewerItem: baseItem, container: HTMLElement, controlContainer: HTMLElement, popupContainer: HTMLElement, viewOptions: ItemCaptionToolbarViewOptions) => CaptionToolbar;
	    itemFactory?: ViewerItemFactory;
	    ignoreDesignMode?: boolean;
	    disabled?: ko.Subscribable<boolean>;
	    visualMode?: ko.Subscribable<ViewerItemVisualMode>;
	    boundaryContainer?: HTMLElement;
	    itemCreatingType?: ItemCreatingType;
	}
	export interface IDashboardItemContext {
	    addContextToolbarItems?: JQueryCallback;
	    viewerItemCreated?: JQueryCallback;
	    viewerItemDispose?: JQueryCallback;
	    beforeApplyViewerItemOptions?: JQueryCallback;
	    createCaptionToolbar?: (viewerItem: baseItem, container: HTMLElement, controlContainer: HTMLElement, popupContainer: HTMLElement, viewOptions: ItemCaptionToolbarViewOptions) => CaptionToolbar;
	    itemFactory?: ViewerItemFactory;
	    ignoreDesignMode?: boolean;
	    disabled?: ko.Subscribable<boolean>;
	    visualMode?: ko.Subscribable<ViewerItemVisualMode>;
	    boundaryContainer?: HTMLElement;
	    itemCreatingType?: ItemCreatingType;
	}
	export interface IDashboardItemContextOptions {
	    addContextToolbarItems?: (options: DashboardItemCaptionToolbarOptions, item: DashboardItem) => void;
	    createCaptionToolbar?: (viewerItem: baseItem, container: HTMLElement, controlContainer: HTMLElement, popupContainer: HTMLElement, viewOptions: ItemCaptionToolbarViewOptions) => CaptionToolbar;
	    viewerItemCreated?: (item: DashboardItem, viewerItem: baseItem) => void;
	    viewerItemDispose?: (item: DashboardItem, viewerItem: baseItem) => void;
	    beforeApplyViewerItemOptions?: (item: DashboardItem, options: any, isCreation: boolean) => void;
	    itemFactory?: ViewerItemFactory;
	    ignoreDesignMode?: boolean;
	    disabled?: ko.Subscribable<boolean>;
	    visualMode?: ko.Subscribable<ViewerItemVisualMode>;
	    boundaryContainer?: HTMLElement;
	    itemCreatingType?: ItemCreatingType;
	}

}
declare module DevExpress.Dashboard.Internal {

    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    import ViewerItemOptions = DevExpress.Dashboard.Internal.Viewer.ViewerItemOptions;
    import IDashboardContext = DevExpress.Dashboard.Internal.IDashboardContext;
    import IDashboardItemContext = DevExpress.Dashboard.Internal.IDashboardItemContext;
	export class ItemViewerAdapterBase<TViewerItem extends baseItem, TItemModel extends DashboardItem> extends DisposableObject {
	    protected dashboardItem: TItemModel;
	    protected element: HTMLElement;
	    protected context: IDashboardContext;
	    protected localContext?: IDashboardItemContext;
	    private beforeRender;
	    private onDisposed;
	    protected item: TViewerItem;
	    protected modelSubscriptions: Array<ko.Subscription>;
	    readonly name: string;
	    protected readonly _isDesignMode: boolean;
	    constructor(dashboardItem: TItemModel, element: HTMLElement, context: IDashboardContext, localContext?: IDashboardItemContext, beforeRender?: (item: baseItem) => void, onDisposed?: () => void);
	    itemUpdated: (viewerItem: baseItem) => void;
	    ensureViewerItem(onlyCreation: any, content: any): void;
	    initialize(): void;
	    private updateServerContentHandler;
	    dispose(): void;
	    resume(): void;
	    suspend(): void;
	    protected ensureViewerItemCore(onlyCreation: boolean, content: ViewerItemOptions, additionalData?: any): void;
	    protected updateItemContent(content: ViewerItemOptions): void;
	    protected createDashboardViewerItem(element: HTMLElement, content: ViewerItemOptions, dashboardItem: TItemModel): TViewerItem;
	    protected attachToModel(viewerItem: TViewerItem, dashboardItem: TItemModel): void;
	    protected detachFromModel(viewerItem: TViewerItem, dashboardItem: TItemModel): void;
	}

}
declare module DevExpress.Dashboard.Internal {
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    import ViewerItemOptions = DevExpress.Dashboard.Internal.Viewer.ViewerItemOptions;
    import ItemViewerAdapterBase = DevExpress.Dashboard.Internal.ItemViewerAdapterBase;
	export class DataItemViewerAdapter<TViewerItem extends baseItem, TItemModel extends DataDashboardItem> extends ItemViewerAdapterBase<TViewerItem, TItemModel> {
	    protected attachToModel(viewerItem: baseItem, dataDashboardItem: DataDashboardItem): void;
	    protected detachFromModel(viewerItem: baseItem, dataDashboardItem: DataDashboardItem): void;
	    protected ensureViewerItemCore(onlyCreation: boolean, content: any): void;
	    protected updateItemContent(content: ViewerItemOptions): void;
	    protected createDashboardViewerItem(element: HTMLElement, content: any, dashboardItem: TItemModel): TViewerItem;
	    private getDrillUpState;
	    private updateActionsModel;
	    _createDefaultCustomInteractivityOptions: () => {
	        selectionMode: string;
	        hoverEnabled: boolean;
	        targetAxes: any[];
	        defaultSelectedValues: any[];
	    };
	    _ensureCustomInteractivityOptions: (interactivityOptions: any, interactivityEnable: any, itemData: any) => {
	        selectionMode: any;
	        hoverEnabled: any;
	        targetAxes: any;
	        defaultSelectedValues: any;
	    };
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
	export type DashboardItemJson = {
	    '@ItemType': string;
	};
	export let dashboardItem: IDashboardSerializationInfo;
	export let orientation: IDashboardSerializationInfo;
	export let layoutWeight: IDashboardSerializationInfo;
	export let layoutItemsSerializable: IDashboardSerializationInfo;
	export let layoutItemSerializationsInfo: IDashboardSerializationInfo[];

}
declare module DevExpress.Dashboard.Internal {
	export class DragDataProvider {
	    static dragData: any;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
	export let titleHeight: number;
	export let titleVerticalPadding: number;
	export let contentToolbarHeight: number;

}
declare module DevExpress.Dashboard.Internal.Viewer {
	export let titleTooltipClasses: {
	    root: string;
	    list: string;
	    listText: string;
	    subList: string;
	    subListItem: string;
	};
	export class FilterIconTooltip {
	    private static FILTER_LIST_SPACE;
	    private static DEFAULT_LINE_HEIGHT;
	    static getTooltipContent(contentElement: JQuery, masterFilterValues: Array<any>): JQuery<HTMLElement>;
	    private static _calcMaxFilterListValues;
	    private static _calcMaxFilterValues;
	    private static _calcMaxHeight;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DashboardTitleToolbarOptions = DevExpress.Dashboard.DashboardTitleToolbarOptions;
    import TitleViewModel = DevExpress.Dashboard.Internal.Viewer.TitleViewModel;
	export class DashboardTitleToolbarAdapter {
	    static getTitleOptions(titleViewModel: TitleViewModel, masterFilterValues: Array<any>, showExportDialog: (format: any) => void, showParametersDialog: () => void, allowExport: boolean): DashboardTitleToolbarOptions;
	    private static _getMasterFilterText;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DashboardItemCaptionToolbarOptions = DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
    import ViewerToolbarLocatedItem = DevExpress.Dashboard.Internal.Viewer.ViewerToolbarLocatedItem;
    import CaptionToolbar = DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
    import DashboardCaptionToolbarBase = DevExpress.Dashboard.Internal.Viewer.DashboardCaptionToolbarBase;
	export class DashboardTitleToolbar extends DashboardCaptionToolbarBase {
	    private allowHideEmptyToolbar;
	    private _optionalClass?;
	    private _showStaticItemsOnCenter;
	    protected readonly _staticItemsClass: string;
	    constructor(_container: HTMLElement, _controlContainer: HTMLElement, _popupContainer: HTMLElement, encodeHtml: boolean, allowHideEmptyToolbar?: boolean, _optionalClass?: any);
	    calcHeight(options: DashboardItemCaptionToolbarOptions): number;
	    update(options: DashboardItemCaptionToolbarOptions, showStaticItemsOnCenter?: boolean): boolean;
	    protected _getVisibleItems(): Array<ViewerToolbarLocatedItem>;
	    protected _createInstance(): CaptionToolbar;
	    private _visible;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DashboardTitleToolbar = DevExpress.Dashboard.Internal.Viewer.DashboardTitleToolbar;
    import TitleViewModel = DevExpress.Dashboard.Internal.Viewer.TitleViewModel;
	export interface DashboardTitleOptions {
	    allowExport: boolean;
	    showExportDialog: (format: any) => void;
	    showParametersDialog: () => void;
	}
	export interface IDashboardTitle {
	    onUpdated?: JQueryCallback;
	    update: () => void;
	}
	export class DashboardTitleView {
	    onUpdated: JQuery.Callbacks<Function>;
	    protected _captionToolbar: DashboardTitleToolbar;
	    private _options;
	    protected _titleViewModel: TitleViewModel;
	    protected readonly _visible: boolean;
	    initialize(container: HTMLElement, controlContainer: HTMLElement, encodeHtml: boolean, options: DashboardTitleOptions, titleViewModel: TitleViewModel): void;
	    calcHeight(masterFilterValues: Array<any>): number;
	    update(masterFilterValues: Array<any>): void;
	    resize(): void;
	    private _convertToToolbarOptions;
	    private _raiseUpdated;
	}

}
declare module DevExpress.Dashboard {
    import dxDataGrid =  DevExpress.ui.dxDataGrid ;
	export interface ParameterDialogContent {
	    grid: dxDataGrid;
	    submitParameterValues: () => void;
	    resetParameterValues: () => void;
	    valueChanged: JQueryCallback;
	    dispose: () => void;
	}

}
declare module DevExpress.Dashboard {
    import PrimitiveType = DevExpress.Dashboard.Data.PrimitiveType;
	export interface DashboardParameterLookUpValue {
	    getDisplayText(): string;
	    getValue(): any;
	}
	export interface DashboardParameter {
	    getName(): string;
	    getValue(): PrimitiveType | Array<PrimitiveType>;
	    setValue(value: PrimitiveType | Array<PrimitiveType>): any;
	    getDefaultValue(): PrimitiveType | Array<PrimitiveType>;
	    getDescription(): string;
	    getType(): string;
	    getLookUpValues(): Array<DashboardParameterLookUpValue>;
	}
	export interface DashboardParameterCollection {
	    getParameterList(): Array<DashboardParameter>;
	    getParameterByName(name: string): DashboardParameter;
	    getParameterByIndex(index: number): DashboardParameter;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
    import DashboardParameter = DevExpress.Dashboard.DashboardParameter;
    import DashboardParameterCollection = DevExpress.Dashboard.DashboardParameterCollection;
	export class Parameter implements DashboardParameter {
	    _name: string;
	    _value: any;
	    _defaultValue: any;
	    _description: any;
	    _type: any;
	    _visible: boolean;
	    _allowNull: boolean;
	    _allowmultiselect: boolean;
	    parameterChanged: JQuery.Callbacks<Function>;
	    _values: any;
	    constructor(parameterViewModel: any);
	    getName(): string;
	    getAllowNull(): boolean;
	    getAllowMultiselect(): boolean;
	    getValue(): any;
	    setValue(value: any): void;
	    getDefaultValue(): any;
	    getDescription(): any;
	    getType(): any;
	    getLookUpValues(): any;
	    setLookUpValues(values: any, containsDisplayMember: any): void;
	    isVisible(): boolean;
	}
	export class ParametersCollection implements DashboardParameterCollection {
	    collectionChanged: JQuery.Callbacks<Function>;
	    _parameters: any[];
	    constructor(parametersViewModel: any);
	    updateParameterValues(parametersViewModel: any): void;
	    setParameters(newParameters: any): void;
	    getParameterValues(): any[];
	    getParameterDefaultValue(name: any): any;
	    getParameterValue(name: any): any;
	    setParameterValue(name: any, value: any): void;
	    getParameters(): any[];
	    getVisibleParameters(): any[];
	    getParameterList(): any[];
	    getParameterByName(name: any): any;
	    getParameterByIndex(index: any): any;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DOMComponent =  DevExpress.DOMComponent ;

    import dxCheckBox =  DevExpress.ui.dxCheckBox ;
    import dxDataGrid =  DevExpress.ui.dxDataGrid ;
    import dxDataGridColumn = DevExpress.ui;
    import ParametersCollection = DevExpress.Dashboard.Internal.Data.ParametersCollection;
    import ParameterDialogContent = DevExpress.Dashboard.ParameterDialogContent;
    import dialogForm = DevExpress.Dashboard.Internal.Viewer.dialogForm;
	export let parameterTypes: {
	    string: string;
	    int: string;
	    float: string;
	    bool: string;
	    dateTime: string;
	    selector: string;
	    multiselector: string;
	    guid: string;
	};
	export class parametersDialog {
	    options: any;
	    getParametersCollection: () => ParametersCollection;
	    submitParameters: any;
	    dialogForm: dialogForm;
	    valueChanged: JQuery.Callbacks<Function>;
	    _dataGrid: dxDataGrid;
	    setActualState: () => void;
	    submitParameterValues: () => void;
	    resetParameterValues: () => void;
	    constructor(options: any);
	    _initialize(): void;
	    _disposeGrid(): void;
	    appendNullGridColumn(gridColumns: Array<dxDataGridColumn>): void;
	    allowNullColumn(): any;
	    createNullColumn(): dxDataGridColumn;
	    createGridColumns(): Array<dxDataGridColumn>;
	    private _generateContent;
	    generateContent(element: HTMLElement, disposeCallback?: () => void): ParameterDialogContent;
	    show(): void;
	    hide(): void;
	    dispose(): void;
	    _getParameterEntity(parameter: any, controlCreationCallbacks: any): ParameterEntity;
	}
	export interface ParameterEntityOptions {
	    name: string;
	    type: any;
	    description?: any;
	    defaultValue: any;
	    value: any;
	    lookUpValues: Array<any>;
	    allowNull: boolean;
	    allowMultiselect: boolean;
	    createControl: (element: HTMLElement) => DOMComponent;
	    valueName: any;
	    controlCreationCallbacks: JQueryCallback;
	}
	export class ParameterEntity {
	    name: string;
	    type: any;
	    description: any;
	    defaultValue: any;
	    value: any;
	    lookUpValues: any[];
	    allowNull: boolean;
	    allowMultiselect: boolean;
	    createControl: (element: HTMLElement) => DOMComponent;
	    valueName: any;
	    controlCreationCallbacks: any;
	    divValueEditor: HTMLElement;
	    divAllowNull: HTMLElement;
	    allowNullControl: dxCheckBox;
	    control: DOMComponent;
	    valueChanged: JQuery.Callbacks<Function>;
	    dispose(): void;
	    constructor(options: ParameterEntityOptions);
	    getValue(): void;
	    setValue(value: any): void;
	    setLookUpValues(values: any): void;
	    wrapParameter(): {
	        Name: string;
	        Value: void;
	    };
	    _addControl(): void;
	}

}
declare module DevExpress.Dashboard.Internal {

    import ParametersCollection = DevExpress.Dashboard.Internal.Data.ParametersCollection;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import DynamicListLookUpSettings = DevExpress.Dashboard.Model.DynamicListLookUpSettings;
    import Parameter = DevExpress.Dashboard.Model.Parameter;
    import IParameterValueViewModel = DevExpress.Dashboard.Internal.IParameterValueViewModel;
	export class ParameterDialogViewModel extends DisposableObject {
	    private _parameters;
	    private _getDashboardParameterType;
	    private _getParameterValues;
	    private _getParameterDefaultValue;
	    constructor(_parameters: ko.ObservableArray<Parameter>, getParameterValues: (parameterType: string, settings: DynamicListLookUpSettings) => ko.ObservableArray<IParameterValueViewModel>);
	    setParameters: (newParameters: any) => void;
	    parameterCollection: ko.Computed<ParametersCollection>;
	}

}
declare module DevExpress.Dashboard {
import dxElement = DevExpress.core.dxElement;
    import dxPopup =  DevExpress.ui.dxPopup ;

    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import ParameterDialogContent = DevExpress.Dashboard.ParameterDialogContent;
    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import EventSubscriber = DevExpress.Dashboard.Internal.EventSubscriber;
    import DashboardParameterCollection = DevExpress.Dashboard.DashboardParameterCollection;
	export interface DashboardParameterDialogArgs {
	    component?: dxPopup;
	    element?: dxElement;
	    model?: any;
	}
	export interface DynamicLookUpValuesLoadedArgs {
	    parameterName: string;
	}
	export interface DashboardParameterDialogExtensionOptions {
	    onDynamicLookUpValuesLoaded?: (args: DynamicLookUpValuesLoadedArgs) => void;
	    onShowing?: (e: DashboardParameterDialogArgs) => any;
	    onShown?: (e: DashboardParameterDialogArgs) => any;
	    onHidden?: (e: DashboardParameterDialogArgs) => any;
	}
	export interface DashboardParameterDialogExtensionEvents {
	    dynamicLookUpValuesLoaded: DynamicLookUpValuesLoadedArgs;
	    showing: DashboardParameterDialogArgs;
	    shown: DashboardParameterDialogArgs;
	    hidden: DashboardParameterDialogArgs;
	}
	export class DashboardParameterDialogExtension extends DisposableObject implements IExtension {
	    private _parameterDialog;
	    private _customDialogContent;
	    private _viewModel;
	    private _optionsManager;
	    name: string;
	    _dashboardControl: DashboardControl;
	    onShowing: ((e: DashboardParameterDialogArgs) => any);
	    onShown: ((e: DashboardParameterDialogArgs) => any);
	    onHidden: ((e: DashboardParameterDialogArgs) => any);
	    showDialogButton: ko.Observable<boolean>;
	    on: EventSubscriber<DashboardParameterDialogExtensionEvents>;
	    off: EventSubscriber<DashboardParameterDialogExtensionEvents>;
	    constructor(dashboardControl: DashboardControl, options?: DashboardParameterDialogExtensionOptions);
	    start(): void;
	    stop(): void;
	    show(): void;
	    hide(): void;
	    subscribeToContentChanges(callback: (newValue: DashboardParameterCollection) => void): ko.Subscription;
	    getParameters(): DashboardParameterCollection;
	    renderContent(element: JQuery | Element): ParameterDialogContent;
	    private _createParameterDialog;
	    private _clearContent;
	    private _clear;
	    private _subscribeDynamicLookUpValuesLoaded;
	    protected _updateViewModel: (dashboard: any) => void;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
	export class listSource {
	    dataSource: any;
	    dataMembers: any;
	    rowCount: any;
	    columnCount: any;
	    constructor(dataSource: any, dataMembers: any);
	    _wrapIfRequired(dataSource: any, dataMembers: any): any;
	    getRowValue(rowIndex: any, dataMember: any): any;
	    getFormattedRowValue(rowIndex: any, dataMember: any, formatInfo: any): string;
	    getFormattedArgumentRowValue(rowIndex: any, dataMember: any, formatInfo: any): any;
	    getColumnIndex(dataMember: any): any;
	    getRowCount(): any;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
    import ItemUnderlyingData = DevExpress.Dashboard.Data.ItemUnderlyingData;
	export class DrillThroughDataWrapper implements ItemUnderlyingData {
	    _data: any;
	    _drillThroughData: any;
	    _errorMessage: any;
	    constructor(drillThroughData: any);
	    initialize(): void;
	    getRowCount(): any;
	    getRowValue(rowIndex: any, columnName: any): any;
	    getDataMembers(): any;
	    getDisplayNames(): any;
	    isDataReceived(): boolean;
	    getRequestDataError(): any;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let chartDefinitionMode: IDashboardSerializationInfo;
	export let chartWindowDefinitionSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import ChartWindowDefinitionMode = DevExpress.Dashboard.Model.ChartWindowDefinitionMode;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
	export class ChartWindowDefinition extends MeasureCalculationWindowDefinition {
	    definitionMode: ko.Observable<ChartWindowDefinitionMode>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    equals(def: any): boolean;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
	export let chartArgumentsMeta: IDashboardSerializationInfo;
	export let chartItemBaseSerializationsInfo: IDashboardSerializationInfo[];

}
declare module DevExpress.Dashboard.Model {


    import ItemDataAxisName = DevExpress.Dashboard.Data.ItemDataAxisName;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import TargetDimensions = DevExpress.Dashboard.Model.TargetDimensions;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import ChartInteractivityOptions = DevExpress.Dashboard.Model.ChartInteractivityOptions;
    import SeriesItem = DevExpress.Dashboard.Model.SeriesItem;
	export abstract class ChartItemBase extends SeriesItem {
	    protected __arguments: ko.ObservableArray<DataItemLink>;
	    arguments: ko.ObservableArray<Dimension>;
	    interactivityOptions: ChartInteractivityOptions;
	    constructor(dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getInfoCore(): IDashboardSerializationInfo[];
	    _clearBindings(): void;
	    protected _getInteractivityDimensionLinks(): DataItemLink[];
	    protected _getTargetDimensions(): TargetDimensions;
	    _getItemDataAxis(): ItemDataAxisName;
	    _getCurrentFilterValues(): any[];
	    _itemInteractivityByColumnAxis(): boolean;
	    _getInteractivityAxisDimensionCount(): number;
	    protected _getCanColorByMeasures(): boolean;
	    protected _getCanColorByDimensions(): boolean;
	    _getColorizableDataItemsInfo(): Array<{
	        items: Array<DataItemLink>;
	        prefixId: string;
	    }>;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let reverse: IDashboardSerializationInfo;
	export let axisVisible: IDashboardSerializationInfo;
	export let titleVisibleBaseInfo: IDashboardSerializationInfo;
	export let title: IDashboardSerializationInfo;
	export let chartAxisSerializationsInfo: IDashboardSerializationInfoArray;
	export let enableZooming: IDashboardSerializationInfo;
	export let limitVisiblePoints: IDashboardSerializationInfo;
	export let visiblePointsCount: IDashboardSerializationInfo;
	export let chartAxisXSerializationsInfo: IDashboardSerializationInfoArray;
	export let alwaysShowZeroLevelTemplate: IDashboardSerializationInfo;
	export let chartAlwaysShowZeroLevel: IDashboardSerializationInfo;
	export let alwaysShowZeroLevelScatter: IDashboardSerializationInfo;
	export let showGridLinesBaseInfo: IDashboardSerializationInfo;
	export let logarithmic: IDashboardSerializationInfo;
	export let logarithmicBase: IDashboardSerializationInfo;
	export let chartAxisYBaseSerializationsInfo: IDashboardSerializationInfo[];
	export let chartAxisYSerializationsInfo: IDashboardSerializationInfoArray;
	export let chartSecondaryAxisYSerializationsInfo: IDashboardSerializationInfoArray;
	export let scatterChartAxisYSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import DataItemDateTimeFormat = DevExpress.Dashboard.Model.DataItemDateTimeFormat;
    import DataItemNumericFormat = DevExpress.Dashboard.Model.DataItemNumericFormat;
    import LogarithmicBase = DevExpress.Dashboard.Model.LogarithmicBase;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
	export class ChartAxis extends SerializableModel {
	    reverse: ko.Observable<boolean>;
	    visible: ko.Observable<boolean>;
	    titleVisible: ko.Observable<boolean>;
	    title: ko.Observable<string>;
	    numericFormat: DataItemNumericFormat;
	    constructor(JSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}
	export class ChartAxisX extends ChartAxis {
	    enableZooming: ko.Observable<boolean>;
	    limitVisiblePoints: ko.Observable<boolean>;
	    visiblePointsCount: ko.Observable<number>;
	    dateTimeFormat: DataItemDateTimeFormat;
	    constructor(JSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}
	export class ChartAxisY extends ChartAxis {
	    alwaysShowZeroLevel: ko.Observable<boolean>;
	    showGridLines: ko.Observable<boolean>;
	    logarithmic: ko.Observable<boolean>;
	    logarithmicBase: ko.Observable<LogarithmicBase>;
	    constructor(JSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}
	export class ScatterChartAxisY extends ChartAxisY {
	    constructor(JSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}
	export class ChartSecondaryAxisY extends ChartAxisY {
	    constructor(JSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let outsidePosition: IDashboardSerializationInfo;
	export let insidePosition: IDashboardSerializationInfo;
	export let isInsideDiagram: IDashboardSerializationInfo;
	export let chartLegendVisible: IDashboardSerializationInfo;
	export let chartLegendSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import ChartLegendInsidePosition = DevExpress.Dashboard.Model.ChartLegendInsidePosition;
    import ChartLegendOutsidePosition = DevExpress.Dashboard.Model.ChartLegendOutsidePosition;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
	export class ChartLegend extends SerializableModel {
	    outsidePosition: ko.Observable<ChartLegendOutsidePosition>;
	    insidePosition: ko.Observable<ChartLegendInsidePosition>;
	    isInsideDiagram: ko.Observable<boolean>;
	    visible: ko.Observable<boolean>;
	    constructor(JSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let chartSeries: IDashboardSerializationInfo;
	export let primaryAxisY: IDashboardSerializationInfo;
	export let secondaryAxisY: IDashboardSerializationInfo;
	export let chartPaneName: IDashboardSerializationInfo;
	export let chartPaneSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import ChartAxisY = DevExpress.Dashboard.Model.ChartAxisY;
    import ChartSecondaryAxisY = DevExpress.Dashboard.Model.ChartSecondaryAxisY;
    import ChartSeries = DevExpress.Dashboard.Model.ChartSeries;
	export class ChartPane extends SerializableModel {
	    name: ko.Observable<string>;
	    series: ko.ObservableArray<ChartSeries>;
	    primaryAxisY: ChartAxisY;
	    secondaryAxisY: ChartSecondaryAxisY;
	    createSeriesByViewType: (seriesViewType: string) => ChartSeries;
	    constructor(dataItemProvider: DataDashboardItem, dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
	export let chartRotated: IDashboardSerializationInfo;
	export let panes: IDashboardSerializationInfo;
	export let chartLegend: IDashboardSerializationInfo;
	export let chartAxisX: IDashboardSerializationInfo;
	export let chartItemSerializationInfo: IDashboardSerializationInfo[];

}
declare module DevExpress.Dashboard.Model {


    import TargetDimensions = DevExpress.Dashboard.Model.TargetDimensions;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import ChartItemBase = DevExpress.Dashboard.Model.ChartItemBase;
    import ChartAxisX = DevExpress.Dashboard.Model.ChartAxisX;
    import ChartLegend = DevExpress.Dashboard.Model.ChartLegend;
    import ChartPane = DevExpress.Dashboard.Model.ChartPane;
	export class ChartItem extends ChartItemBase {
	    rotated: ko.Observable<boolean>;
	    axisX: ChartAxisX;
	    legend: ChartLegend;
	    panes: ko.ObservableArray<ChartPane>;
	    constructor(dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    _clearBindings(): void;
	    protected _getInfoCore(): IDashboardSerializationInfo[];
	    protected _getDefaultItemType(): string;
	    protected _updateContentViewModel(content: any): void;
	    protected _getTargetDimensions(): TargetDimensions;
	    protected _getMasterFilterMode(): string;
	    protected _getDrillDownEnabled(): boolean;
	    protected _getIgnoreMasterFilter(): boolean;
	    protected _getCanColorByDimensions(): boolean;
	    protected _getAreMeasuresColoredByDefault(): boolean;
	    protected _getIsDimensionColoredByDefault(dimension: Dimension): boolean;
	    private _addNewPane;
	    private _coloredSeries;
	    _getDefaultCalculationWindowDefinition(): MeasureCalculationWindowDefinition;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let kpiItemdeltaOptions: IDashboardSerializationInfo;
	export let kpiItemActualValue: IDashboardSerializationInfo;
	export let kpiItemTargetValue: IDashboardSerializationInfo;
	export let kpiElementSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import AbsoluteVariationNumericFormat = DevExpress.Dashboard.Model.AbsoluteVariationNumericFormat;
    import PercentOfTargetNumericFormat = DevExpress.Dashboard.Model.PercentOfTargetNumericFormat;
    import PercentVariationNumericFormat = DevExpress.Dashboard.Model.PercentVariationNumericFormat;
    import Measure = DevExpress.Dashboard.Model.Measure;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import IBindingProperty = DevExpress.Dashboard.Model.IBindingProperty;
    import DataItemContainer = DevExpress.Dashboard.Model.DataItemContainer;
    import DeltaOptions = DevExpress.Dashboard.Model.DeltaOptions;
	export abstract class KpiElement extends DataItemContainer {
	    protected __actualValue: DataItemLink;
	    protected __targetValue: DataItemLink;
	    actualValue: ko.Observable<Measure>;
	    targetValue: ko.Observable<Measure>;
	    deltaOptions: DeltaOptions;
	    absoluteVariationNumericFormat: AbsoluteVariationNumericFormat;
	    percentVariationNumericFormat: PercentVariationNumericFormat;
	    percentOfTargetNumericFormat: PercentOfTargetNumericFormat;
	    _getDataId(): string;
	    _displayNameSeparator: string;
	    constructor(dataItemProvider: DataDashboardItem, modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getInfoCore(): IDashboardSerializationInfoArray;
	    _getBindingModel(): Array<IBindingProperty>;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let minimum: IDashboardSerializationInfo;
	export let maximum: IDashboardSerializationInfo;
	export let scaleLabelNumericFormat: IDashboardSerializationInfo;
	export let gaugeSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import DataItemNumericFormat = DevExpress.Dashboard.Model.DataItemNumericFormat;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import KpiElement = DevExpress.Dashboard.Model.KpiElement;
	export class Gauge extends KpiElement {
	    minimum: ko.Observable<number>;
	    maximum: ko.Observable<number>;
	    scaleLabelNumericFormat: DataItemNumericFormat;
	    constructor(dataItemProvider: DataDashboardItem, modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getInfoCore(): IDashboardSerializationInfoArray;
	    protected _getDefaultItemType(): string;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let gaugeWindowDefinitionSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {

    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
	export class GaugeWindowDefinition extends MeasureCalculationWindowDefinition {
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    equals(def: any): boolean;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let kpiDashboardItemSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import ContentArrangementMode = DevExpress.Dashboard.Model.ContentArrangementMode;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import DashboardItemInteractivityOptions = DevExpress.Dashboard.Model.DashboardItemInteractivityOptions;
    import SeriesItem = DevExpress.Dashboard.Model.SeriesItem;
	export abstract class KpiItem extends SeriesItem {
	    interactivityOptions: DashboardItemInteractivityOptions;
	    contentArrangementMode: ko.Observable<ContentArrangementMode>;
	    contentLineCount: ko.Observable<number>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getInfoCore(): IDashboardSerializationInfo[];
	    protected _getMasterFilterMode(): string;
	    protected _getDrillDownEnabled(): boolean;
	    protected _getIgnoreMasterFilter(): boolean;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let gauges: IDashboardSerializationInfo;
	export let gaugeViewType: IDashboardSerializationInfo;
	export let showGaugeCaptions: IDashboardSerializationInfo;
	export let gaugeDashboardItemSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
    import GaugeViewType = DevExpress.Dashboard.Model.GaugeViewType;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import KpiItem = DevExpress.Dashboard.Model.KpiItem;
    import Gauge = DevExpress.Dashboard.Model.Gauge;
	export class GaugeItem extends KpiItem {
	    gauges: ko.ObservableArray<Gauge>;
	    viewType: ko.Observable<GaugeViewType>;
	    showGaugeCaptions: ko.Observable<boolean>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    _clearBindings(): void;
	    protected _getInfoCore(): IDashboardSerializationInfo[];
	    protected _getDefaultItemType(): string;
	    protected _getLayersCount(): number;
	    protected _getLayerName(): string;
	    _getDefaultCalculationWindowDefinition(): MeasureCalculationWindowDefinition;
	}

}
declare module DevExpress.Dashboard {


    import Widget = DevExpress.ui.Widget;
    import ItemData = DevExpress.Dashboard.Data.ItemData;
    import ChartItem = DevExpress.Dashboard.Model.ChartItem;
    import ChartSeries = DevExpress.Dashboard.Model.ChartSeries;
    import Gauge = DevExpress.Dashboard.Model.Gauge;
    import GaugeItem = DevExpress.Dashboard.Model.GaugeItem;
    import GridColumn = DevExpress.Dashboard.Model.GridColumn;
    import GridItem = DevExpress.Dashboard.Model.GridItem;
    import DashboardItemBaseEventArgs = DevExpress.Dashboard.DashboardItemBaseEventArgs;
	export interface ItemWidgetBaseEventArgs extends DashboardItemBaseEventArgs {
	    itemData: ItemData;
	    chartContext?: ChartContext;
	    gridContext?: GridContext;
	    gaugeContext?: GaugeContext;
	}
	export interface ItemWidgetOptionEventArgs extends ItemWidgetBaseEventArgs {
	    options: Object;
	}
	export interface ItemWidgetEventArgs extends ItemWidgetBaseEventArgs {
	    getWidget: () => Widget | Element;
	}
	export class ChartContext {
	    private _dashboardItem;
	    constructor(_dashboardItem: ChartItem);
	    getDashboardItemSeries(seriesOptions: DevExpress.viz.ChartSeries): ChartSeries;
	}
	export class GridContext {
	    private _dashboardItem;
	    constructor(_dashboardItem: GridItem);
	    getDashboardItemColumn(columnOptions: DevExpress.ui.GridBaseColumn): GridColumn;
	}
	export class GaugeContext {
	    private _dashboardItem;
	    constructor(_dashboardItem: GaugeItem);
	    getDashboardItemGauge(gaugeOptions: DevExpress.viz.dxLinearGaugeOptions | DevExpress.viz.dxCircularGaugeOptions): Gauge;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {

    import Widget = DevExpress.ui.Widget;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import DataPoint = DevExpress.Dashboard.Internal.Viewer.DataPoint;
    import ItemClickEventArgs = DevExpress.Dashboard.ItemClickEventArgs;
    import ItemElementCustomColorEventArgs = DevExpress.Dashboard.ItemElementCustomColorEventArgs;
    import ItemSelectionChangedEventArgs = DevExpress.Dashboard.ItemSelectionChangedEventArgs;
    import ItemVisualInteractivityEventArgs = DevExpress.Dashboard.ItemVisualInteractivityEventArgs;
    import ItemWidgetEventArgs = DevExpress.Dashboard.ItemWidgetEventArgs;
    import ItemWidgetOptionEventArgs = DevExpress.Dashboard.ItemWidgetOptionEventArgs;
	export const createItemClickEventArgs: (dashboardItem: DataDashboardItem, dataPoint: DataPoint, requestUnderlyingDataFunc: any) => ItemClickEventArgs;
	export const createItemSelectionChangedEventArgs: (dashboardItem: DataDashboardItem, tuples: any) => ItemSelectionChangedEventArgs;
	export const createItemElementCustomColorEventArgs: (dashboardItem: DataDashboardItem, eventArgs: any) => ItemElementCustomColorEventArgs;
	export const createItemInteractivityEventArgs: (dashboardItem: DataDashboardItem, interactivityOptions: any) => ItemVisualInteractivityEventArgs;
	export const createWidgetEventArgs: (dashboardItem: DashboardItem, widget: Element | Widget) => ItemWidgetEventArgs;
	export const createWidgetOptionsEventArgs: (dashboardItem: DashboardItem, options: Object) => ItemWidgetOptionEventArgs;

}
declare module DevExpress.Dashboard.Internal.Data {
    import ItemDataAxisPoint = DevExpress.Dashboard.Data.ItemDataAxisPoint;
    import PrimitiveType = DevExpress.Dashboard.Data.PrimitiveType;
    import RequestUnderlyingDataParameters = DevExpress.Dashboard.Data.RequestUnderlyingDataParameters;
    import itemData = DevExpress.Dashboard.Internal.Data.itemData;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import IDataServiceClient = DevExpress.Dashboard.Internal.IDataServiceClient;
	export interface RawUnderlyingData {
	    Data: Array<Array<PrimitiveType>>;
	    DataMembers: Array<string>;
	    DataMembersDisplayNames: Array<string>;
	    ErrorMessage?: string;
	}
	export interface IUnderlyingDataProvider {
	    requestUnderlyingData(dataDashboardItem: DataDashboardItem, args: RequestUnderlyingDataParameters): JQueryPromise<RawUnderlyingData>;
	}
	export class UnderlyingDataProvider {
	    private _serviceClient;
	    constructor(_serviceClient: IDataServiceClient);
	    _getValidDataQueryParamsValues(values: Array<any>, dataDashboardItem: DataDashboardItem): any;
	    _getUnderlyingDataArgsAxisPoints(data: itemData, args: RequestUnderlyingDataParameters): ItemDataAxisPoint[];
	    requestUnderlyingData(dataDashboardItem: DataDashboardItem, args: RequestUnderlyingDataParameters): JQueryPromise<RawUnderlyingData>;
	}

}
declare module DevExpress.Dashboard {
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
	export function findItemForApi<T extends DashboardItem>(dashboard: Dashboard, itemName: string, expectedItemClass?: any): T;

}
declare module DevExpress.Dashboard {
    import Widget = DevExpress.ui.Widget;

    import PrimitiveType = DevExpress.Dashboard.Data.PrimitiveType;
    import ItemData = DevExpress.Dashboard.Data.ItemData;
    import ItemDataAxisPointTuple = DevExpress.Dashboard.Data.ItemDataAxisPointTuple;
    import ItemUnderlyingData = DevExpress.Dashboard.Data.ItemUnderlyingData;
    import RangeFilterSelection = DevExpress.Dashboard.Data.RangeFilterSelection;
    import RequestUnderlyingDataParameters = DevExpress.Dashboard.Data.RequestUnderlyingDataParameters;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import MasterFilterValues = DevExpress.Dashboard.Model.MasterFilterValues;
    import IDashboardTitle = DevExpress.Dashboard.Internal.Viewer.IDashboardTitle;
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    import DashboardTitleToolbarUpdatedEventArgs = DevExpress.Dashboard.DashboardTitleToolbarUpdatedEventArgs;
    import ItemActionAvailabilityChangedEventArgs = DevExpress.Dashboard.ItemActionAvailabilityChangedEventArgs;
    import ItemCaptionToolbarUpdatedEventArgs = DevExpress.Dashboard.ItemCaptionToolbarUpdatedEventArgs;
    import ItemClickEventArgs = DevExpress.Dashboard.ItemClickEventArgs;
    import ItemDrillDownStateChangedEventArgs = DevExpress.Dashboard.ItemDrillDownStateChangedEventArgs;
    import ItemElementCustomColorEventArgs = DevExpress.Dashboard.ItemElementCustomColorEventArgs;
    import ItemMasterFilterStateChangedEventArgs = DevExpress.Dashboard.ItemMasterFilterStateChangedEventArgs;
    import ItemSelectionChangedEventArgs = DevExpress.Dashboard.ItemSelectionChangedEventArgs;
    import ItemVisualInteractivityEventArgs = DevExpress.Dashboard.ItemVisualInteractivityEventArgs;
    import SelectedTabPageChangedEventArgs = DevExpress.Dashboard.SelectedTabPageChangedEventArgs;
    import ItemWidgetEventArgs = DevExpress.Dashboard.ItemWidgetEventArgs;
    import ItemWidgetOptionEventArgs = DevExpress.Dashboard.ItemWidgetOptionEventArgs;
    import DashboardItemCaptionToolbarOptions = DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
    import DashboardTitleToolbarOptions = DevExpress.Dashboard.DashboardTitleToolbarOptions;
    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import EventSubscriber = DevExpress.Dashboard.Internal.EventSubscriber;
	export interface ViewerApiExtensionOptions {
	    onItemClick?: (args: ItemClickEventArgs) => void;
	    onItemSelectionChanged?: (args: ItemSelectionChangedEventArgs) => void;
	    onItemWidgetCreated?: (args: ItemWidgetEventArgs) => void;
	    onItemWidgetUpdating?: (args: ItemWidgetEventArgs) => void;
	    onItemWidgetUpdated?: (args: ItemWidgetEventArgs) => void;
	    onItemWidgetOptionsPrepared?: (args: ItemWidgetOptionEventArgs) => void;
	    onItemElementCustomColor?: (args: ItemElementCustomColorEventArgs) => void;
	    onItemVisualInteractivity?: (args: ItemVisualInteractivityEventArgs) => void;
	    onItemMasterFilterStateChanged?: (args: ItemMasterFilterStateChangedEventArgs) => void;
	    onItemDrillDownStateChanged?: (args: ItemDrillDownStateChangedEventArgs) => void;
	    onItemActionAvailabilityChanged?: (args: ItemActionAvailabilityChangedEventArgs) => void;
	    onItemCaptionToolbarUpdated?: (args: ItemCaptionToolbarUpdatedEventArgs) => void;
	    onDashboardTitleToolbarUpdated?: (args: DashboardTitleToolbarUpdatedEventArgs) => void;
	    onSelectedTabPageChanged?: (args: SelectedTabPageChangedEventArgs) => void;
	}
	export type ViewerApiExtensionEvents = {
	    itemClick: ItemClickEventArgs;
	    itemSelectionChanged: ItemSelectionChangedEventArgs;
	    itemWidgetCreated: ItemWidgetEventArgs;
	    itemWidgetUpdating: ItemWidgetEventArgs;
	    itemWidgetUpdated: ItemWidgetEventArgs;
	    itemWidgetOptionsPrepared: ItemWidgetOptionEventArgs;
	    itemElementCustomColor: ItemElementCustomColorEventArgs;
	    itemVisualInteractivity: ItemVisualInteractivityEventArgs;
	    itemMasterFilterStateChanged: ItemMasterFilterStateChangedEventArgs;
	    itemDrillDownStateChanged: ItemDrillDownStateChangedEventArgs;
	    itemActionAvailabilityChanged: ItemActionAvailabilityChangedEventArgs;
	    itemCaptionToolbarUpdated: ItemCaptionToolbarUpdatedEventArgs;
	    dashboardTitleToolbarUpdated: DashboardTitleToolbarUpdatedEventArgs;
	    selectedTabPageChanged: SelectedTabPageChangedEventArgs;
	};
	export class ViewerApiExtension extends DisposableObject implements IExtension {
	    private dashboardControl;
	    name: string;
	    _viewerItems: {
	        [itemName: string]: Array<baseItem>;
	    };
	    private _optionManager;
	    private _defaultOptions;
	    private _dashboardDisposables;
	    _title: ko.Observable<IDashboardTitle>;
	    on: EventSubscriber<ViewerApiExtensionEvents>;
	    off: EventSubscriber<ViewerApiExtensionEvents>;
	    constructor(dashboardControl: DashboardControl, options?: ViewerApiExtensionOptions);
	    private _checkIsRangeFilterItem;
	    private _viewerItemCreated;
	    private _viewerItemDispose;
	    private _beforeApplyViewerItemOptions;
	    _raiseItemActionAvailabilityChanged: (item: DashboardItem) => void;
	    _raiseItemClick: (itemName: any, dataPoint: any) => void;
	    _raiseItemSelectionChanged: (itemName: any, tuples: any) => void;
	    _raiseItemWidgetCreated: (name: string, viewControl: Element | Widget) => void;
	    _raiseItemWidgetUpdating: (name: string, viewControl: Element | Widget) => void;
	    _raiseItemWidgetUpdated: (name: string, viewControl: Element | Widget) => void;
	    _raiseItemWidgetOptionsPrepared: (name: string, options: Object) => void;
	    _raiseItemCaptionToolbarUpdated: (name: string, options: DashboardItemCaptionToolbarOptions) => void;
	    _raiseTitleToolbarUpdated: (options: DashboardTitleToolbarOptions) => void;
	    _raiseSelectedTabPageChanged(tabContainerName: string, prevPageName: string, pageName: string): any;
	    _raiseItemElementCustomColor: (itemName: any, eventArgs: any) => void;
	    _raiseItemVisualInteractivity: (itemName: any, interactivityOptions: any) => void;
	    _raiseClearMasterFilter: (itemName: string) => void;
	    start(): void;
	    stop(): void;
	    private _getItemCore;
	    private _getItem;
	    private _getDataItem;
	    requestUnderlyingData: (itemName: string, args: RequestUnderlyingDataParameters, onCompleted: (result: ItemUnderlyingData) => void) => void;
	    getCurrentRange(itemName: string): RangeFilterSelection;
	    getEntireRange(itemName: string): RangeFilterSelection;
	    setRange(itemName: string, range: RangeFilterSelection): void;
	    setPredefinedRange(itemName: string, dateTimePeriodName: string): void;
	    getAvailablePredefinedRanges(itemName: string): Array<string>;
	    getCurrentPredefinedRange(itemName: string): string;
	    getCurrentSelection(itemName: string): Array<ItemDataAxisPointTuple>;
	    canSetMasterFilter(itemName: string): boolean;
	    canClearMasterFilter(itemName: string): boolean;
	    canPerformDrillDown(itemName: string): boolean;
	    canPerformDrillUp(itemName: string): boolean;
	    getItemData(itemName: string): ItemData;
	    getCurrentFilterValues(itemName: string): Array<ItemDataAxisPointTuple>;
	    getAvailableFilterValues(itemName: string): Array<ItemDataAxisPointTuple>;
	    getCurrentDrillDownValues(itemName: string): ItemDataAxisPointTuple;
	    getAvailableDrillDownValues(itemName: string): Array<ItemDataAxisPointTuple>;
	    setMasterFilter(itemName: string, values: MasterFilterValues): void;
	    clearMasterFilter(itemName: string): void;
	    performDrillDown(itemName: string, value: PrimitiveType | ItemDataAxisPointTuple): void;
	    performDrillUp(itemName: string): void;
	    getAvailableActions(itemName: string): Array<string>;
	    updateItemCaptionToolbar(itemName?: string): void;
	    updateDashboardTitleToolbar(): void;
	    setSelectedTabPage(tabPageName: string): void;
	    setSelectedTabPageIndex(tabContainerName: string, index: number): void;
	    getSelectedTabPageIndex(tabContainerName: string): number;
	    getSelectedTabPage(tabContainerName: string): string;
	    private _findParentTabContainer;
	    private _getViewerItem;
	}

}
declare module DevExpress.Dashboard.Internal {

    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardExportExtension = DevExpress.Dashboard.DashboardExportExtension;
    import DashboardParameterDialogExtension = DevExpress.Dashboard.DashboardParameterDialogExtension;
    import ViewerApiExtension = DevExpress.Dashboard.ViewerApiExtension;
    import TitleComponentOptions = DevExpress.Dashboard.Internal.TitleComponentOptions;
	export class DashboardTitleContext extends DisposableObject implements IDashboardTitleContext {
	    constructor(encodeHtml: boolean, findExtension: (name: string) => IExtension, allowExport?: boolean);
	    encodeHtml: boolean;
	    parametersExtension: ko.Computed<DashboardParameterDialogExtension>;
	    exportExtension: ko.Computed<DashboardExportExtension>;
	    viewerApiExtension: ko.Computed<ViewerApiExtension>;
	}
	export interface IDashboardTitleContext {
	    encodeHtml: boolean;
	    parametersExtension: ko.Computed<DashboardParameterDialogExtension>;
	    exportExtension: ko.Computed<DashboardExportExtension>;
	    viewerApiExtension: ko.Computed<ViewerApiExtension>;
	}
	export class DashboardTitleComponent extends DisposableObject {
	    private params;
	    private container;
	    private controlContainer;
	    constructor(params: {
	        options: ko.Computed<TitleComponentOptions>;
	        width: ko.Observable<number>;
	        height: ko.Observable<number>;
	        encodeHtml: boolean;
	        className: string;
	    }, container: HTMLElement, controlContainer: HTMLElement);
	    initialize(): void;
	}

}
declare module DevExpress.Dashboard.Internal {

    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import IDashboardTitle = DevExpress.Dashboard.Internal.Viewer.IDashboardTitle;
    import DashboardItemCaptionToolbarOptions = DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
    import DashboardTitleToolbarOptions = DevExpress.Dashboard.DashboardTitleToolbarOptions;
    import IDashboardTitleContext = DevExpress.Dashboard.Internal.IDashboardTitleContext;
	export let maxFilterValuesCount: number;
	export interface TitleComponentOptions {
	    toolbarOptions: DashboardItemCaptionToolbarOptions;
	    centerAligned?: boolean;
	    allowHideEmptyToolbar: boolean;
	}
	export function masterFilterValues(dashboard: Dashboard): any[];
	export class DashboardTitleModel extends DisposableObject implements IDashboardTitle {
	    private context;
	    private dashboard;
	    private customizeToolbarOptions?;
	    onUpdated: JQuery.Callbacks<Function>;
	    toolbarOptions: ko.Observable<TitleComponentOptions>;
	    showTitle: ko.Computed<boolean>;
	    private viewModel;
	    private masterFilterValues;
	    private parametersExtension;
	    private exportExtension;
	    private viewerApiExtension;
	    private allowShowExportDialog;
	    constructor(context: IDashboardTitleContext, dashboard: Dashboard, customizeToolbarOptions?: (options: DashboardTitleToolbarOptions) => void);
	    update(): void;
	    dispose(): void;
	    private _raiseUpdated;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
	export interface TabHeadersViewModel {
	    widths: Array<number>;
	    leftVisibleIndex: number;
	    rightVisibleIndex: number;
	}
	export function calcTabHeadersWidth(tabsWidth: Array<number>, containerWidth: number, leftIndex: number, showCaption: boolean): TabHeadersViewModel;

}
declare module DevExpress.Dashboard.Internal {
    import IDisposable = DevExpress.Dashboard.Model.IDisposable;
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    import ISizeController = DevExpress.Dashboard.Internal.ISizeController;
	export function createItemSizeUpdater(item: baseItem, sizeController: ISizeController): IDisposable;
	export function createElementSizeUpdater(element: HTMLElement, sizeController: ISizeController): {
	    dispose: () => JQueryCallback;
	};
	export function setElementSize(element: HTMLElement, sizeController: ISizeController): void;

}
declare module DevExpress.Dashboard.Internal {

    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DashboardTabPage = DevExpress.Dashboard.Model.DashboardTabPage;
    import SingleTabItemSizeController = DevExpress.Dashboard.Internal.SingleTabItemSizeController;
    import LayoutItem = DevExpress.Dashboard.Internal.LayoutItem;
    import DashboardItemContext = DevExpress.Dashboard.Internal.DashboardItemContext;
	export interface PageBinding {
	    dashboardItem: DashboardItem;
	    pageDashboardItem: DashboardTabPage;
	    id: string;
	    sizeController: SingleTabItemSizeController;
	    context: any;
	    localContext: DashboardItemContext;
	    ignoreBorder: ko.Observable<boolean>;
	}
	export class DashboardTabsViewModel extends DisposableObject {
	    layoutItem: LayoutItem;
	    headerHeight: ko.Observable<number>;
	    private element;
	    showMenu: ko.Observable<boolean>;
	    tabPageBindings: ko.ObservableArray<PageBinding>;
	    selectedItemKeys: ko.ObservableArray<string>;
	    showAddButton: ko.Computed<any>;
	    private _defaultButtonWidth;
	    private _tabsInfoCache;
	    private _toolbarCache;
	    private headersViewModel;
	    private readonly viewModel;
	    private readonly showCaption;
	    private readonly _containerSizeController;
	    constructor(layoutItem: LayoutItem, headerHeight: ko.Observable<number>, element: HTMLElement);
	    toggleMenu(bindings: any, args: any): void;
	    createTabPage(): void;
	    onSelectionChanged(e: any): void;
	    private _syncTabPageBindings;
	    private _initialize;
	    private _createMenuToolbarItem;
	    private _getSelectedKeys;
	    private _createPageBinding;
	    private _prepareLocalContext;
	    private _onContainerRepaint;
	    private _onToolbarUpdated;
	    private _updateTabHeaders;
	}

}
declare module DevExpress.Dashboard.Internal {

    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import ISizeController = DevExpress.Dashboard.Internal.ISizeController;
    import LayoutItem = DevExpress.Dashboard.Internal.LayoutItem;
    import IDashboardContext = DevExpress.Dashboard.Internal.IDashboardContext;
    import IDashboardItemContext = DevExpress.Dashboard.Internal.IDashboardItemContext;
	export interface IDashboardItemBindings {
	    dashboardItem: DashboardItem;
	    dashboardContext: IDashboardContext;
	    localContext: IDashboardItemContext;
	    sizeController: ISizeController;
	}
	export class GroupViewModel extends DisposableObject {
	    defaultPadding: number;
	    constructor(params: {
	        layoutItem: ko.Subscribable<LayoutItem> | LayoutItem;
	    });
	    padding: ko.Observable<number>;
	    headerHeight: ko.Observable<number>;
	    layoutItem: ko.Computed<LayoutItem>;
	}
	export class TabContainerViewModel extends GroupViewModel {
	    activeItems: ko.ObservableArray<LayoutItem>;
	    private _activeItemsUpdateDebounced;
	    constructor(params: {
	        layoutItem: ko.Observable<LayoutItem> | LayoutItem;
	    });
	    private _updateActiveItems;
	}

}
declare module DevExpress.Dashboard.Internal {

    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import IFullscreenItemProvider = DevExpress.Dashboard.Internal.IFullscreenItemProvider;
    import IDashboardContext = DevExpress.Dashboard.Internal.IDashboardContext;
    import IDashboardItemContext = DevExpress.Dashboard.Internal.IDashboardItemContext;
	export class FullscreenItemModel implements IFullscreenItemProvider {
	    private dashboardContext;
	    private localContext?;
	    private repaintRequest;
	    _dashboardItem: ko.Observable<DashboardItem>;
	    _visible: ko.Observable<boolean>;
	    dashboardItem: ko.Computed<DashboardItem>;
	    visible: ko.Computed<boolean>;
	    constructor(dashboardContext: IDashboardContext, localContext?: IDashboardItemContext, repaintRequest?: JQuery.Callbacks<Function>);
	    viewModel: ko.Computed<{
	        dashboardItem: DashboardItem;
	        dashboardContext: IDashboardContext;
	        localContext: IDashboardItemContext;
	        repaintRequest: JQuery.Callbacks<Function>;
	    }>;
	    readonly maximizedItemName: string;
	    maximizeItem(dashboardItem: DashboardItem): void;
	    restoreDownItem(): void;
	}

}
declare module DevExpress.Dashboard {




















}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let comboBoxType: IDashboardSerializationInfo;
	export let comboBoxDashboardItemSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import ComboBoxDashboardItemType = DevExpress.Dashboard.Model.ComboBoxDashboardItemType;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import FilterElementItemBase = DevExpress.Dashboard.Model.FilterElementItemBase;
	export class ComboBoxItem extends FilterElementItemBase {
	    comboBoxType: ko.Observable<ComboBoxDashboardItemType>;
	    showAllValue: ko.Observable<boolean>;
	    constructor(dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getInfoCore(): IDashboardSerializationInfo[];
	    protected _getDefaultItemType(): string;
	    protected _allowAllValue(): boolean;
	    protected _isMultiselectable(): boolean;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let tabPages: IDashboardSerializationInfo;
	export let tabContainerItemSerializationInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import ItemState = DevExpress.Dashboard.Model.ItemState;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DashboardTabPage = DevExpress.Dashboard.Model.DashboardTabPage;
	export class TabContainerItem extends DashboardItem {
	    tabPages: ko.ObservableArray<DashboardTabPage>;
	    _activeTabPage: ko.Observable<DashboardTabPage>;
	    _activePageChanged: (prevPageName: string, pageName: string) => void;
	    constructor(dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    _setState(itemState: ItemState): void;
	    protected _getInfoCore(): IDashboardSerializationInfo[];
	    protected _getDefaultItemType(): string;
	    _addNewPage(): DashboardTabPage;
	}

}
declare module DevExpress.Dashboard.Internal {

    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import IExtension = DevExpress.Dashboard.IExtension;
    import KnockoutTemplate = DevExpress.Dashboard.KnockoutTemplate;
    import IDashboardLayout = DevExpress.Dashboard.Internal.IDashboardLayout;
    import VisibleItemsProvider = DevExpress.Dashboard.Internal.VisibleItemsProvider;
    import LayoutItem = DevExpress.Dashboard.Internal.LayoutItem;
    import DashboardTitleContext = DevExpress.Dashboard.Internal.DashboardTitleContext;
    import FullscreenItemModel = DevExpress.Dashboard.Internal.FullscreenItemModel;
    import IDashboardContext = DevExpress.Dashboard.Internal.IDashboardContext;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
	export class DashboardSurface extends DisposableObject implements IDashboardLayout {
	    dashboardModel: Dashboard;
	    dataSourceBrowser: DataSourceBrowser;
	    context: IDashboardContext;
	    private _findExtension;
	    private _allowMaximizeItems;
	    resizeByTimer: ko.Observable<boolean>;
	    repaintRequest: JQueryCallback;
	    encodeHtml: boolean;
	    constructor(dashboardModel: Dashboard, dataSourceBrowser: DataSourceBrowser, context: IDashboardContext, _findExtension: (name: string) => IExtension, _allowMaximizeItems: boolean, resizeByTimer: ko.Observable<boolean>, repaintRequest: JQueryCallback, encodeHtml?: boolean);
	    titleContext: DashboardTitleContext;
	    readonly fullscreenItemProvider: FullscreenItemModel;
	    select(item: LayoutItem): void;
	    rootItem: LayoutItem;
	    allowExportDashboard: boolean;
	    fullscreenItemModel: FullscreenItemModel;
	    itemInteractionInProgress: ko.Observable<boolean>;
	    _selectedLayoutItem: ko.Observable<LayoutItem>;
	    selectedDashboardItem: ko.Computed<DashboardItem>;
	    emptyItemTemplates: ko.ObservableArray<KnockoutTemplate>;
	    emptyItemTemplatesService: (layoutItem: LayoutItem) => {
	        data: ko.ObservableArray<KnockoutTemplate>;
	        templateName: string;
	    };
	    contextMenu: (layoutItem: LayoutItem) => {
	        data: any;
	        templateName: string;
	    };
	    layoutItemPlaceholderService: (layoutItem: LayoutItem) => {
	        data: any;
	        templateName: string;
	    };
	    addDashboardItem: (data: {
	        type: string;
	    }) => void;
	    width: ko.Observable<number>;
	    height: ko.Observable<number>;
	    headerHeight: ko.Observable<number>;
	    visibleItemsProvider: VisibleItemsProvider;
	    dispose(): void;
	}

}
declare module DevExpress.Dashboard {

    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DashboardState = DevExpress.Dashboard.Model.DashboardState;
    import DisposableType = DevExpress.Dashboard.Model.DisposableType;
    import DashboardContainer = DevExpress.Dashboard.DashboardContainer;
    import IExtension = DevExpress.Dashboard.IExtension;
    import IRemoteService = DevExpress.Dashboard.IRemoteService;
    import KnockoutTemplate = DevExpress.Dashboard.KnockoutTemplate;
    import DashboardControlEvents = DevExpress.Dashboard.DashboardControlEvents;
    import DashboardControlOptions = DevExpress.Dashboard.DashboardControlOptions;
    import RefreshItemsArgs = DevExpress.Dashboard.RefreshItemsArgs;
    import DashboardUpdateHub = DevExpress.Dashboard.Internal.DashboardUpdateHub;
    import IDashboardLayout = DevExpress.Dashboard.Internal.IDashboardLayout;
    import IEndpointCollection = DevExpress.Dashboard.Internal.IEndpointCollection;
    import ILayoutBinder = DevExpress.Dashboard.Internal.ILayoutBinder;
    import EventSubscriber = DevExpress.Dashboard.Internal.EventSubscriber;
    import NotificationController = DevExpress.Dashboard.NotificationController;
    import IDashboardContext = DevExpress.Dashboard.Internal.IDashboardContext;
    import DashboardSurface = DevExpress.Dashboard.Internal.DashboardSurface;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import IDataServiceClient = DevExpress.Dashboard.Internal.IDataServiceClient;
	export class DashboardControl {
	    element: Element;
	    private static recursiveAsyncEval;
	    private _extensions;
	    private _updateHubPrivate;
	    readonly _updateHub: DashboardUpdateHub;
	    readonly encodeHtml: boolean;
	    _dashboardContext: IDashboardContext;
	    private _allowSwitchToDesigner;
	    private _repaintRequest;
	    private _optionsManager;
	    _externalTemplates: ko.Computed<KnockoutTemplate[]>;
	    _endpointCollection: IEndpointCollection;
	    _dashboardSurface: ko.Observable<DashboardSurface>;
	    _serviceClient: ko.Observable<IDataServiceClient>;
	    _displayAllData: ko.Observable<boolean>;
	    _widgetContainer: HTMLElement;
	    _dataSourceBrowser: DataSourceBrowser;
	    _isLoading: ko.Observable<boolean>;
	    _perDashboardDisposables: Array<DisposableType>;
	    _layoutTemplate: ko.Observable<{
	        name: string;
	        data: ko.Subscribable<IDashboardLayout>;
	    }>;
	    _layoutBindersCollection: ko.ObservableArray<ILayoutBinder>;
	    _emptyControlTemplates: ko.ObservableArray<KnockoutTemplate>;
	    _surfaceLeft: ko.Observable<number>;
	    surfaceLeft: ko.Observable<number>;
	    resizeByTimer: ko.Observable<boolean>;
	    remoteService: IRemoteService;
	    notificationController: NotificationController;
	    showConfirmationOnBrowserClosing: boolean;
	    isDesignMode: ko.Observable<boolean>;
	    dashboardContainer: ko.Observable<DashboardContainer>;
	    dashboard: ko.Computed<Dashboard>;
	    customTemplates: ko.ObservableArray<KnockoutTemplate>;
	    getWidgetContainer: () => HTMLElement;
	    readonly allowSwitchToDesigner: boolean;
	    readonly maximizedDashboardItemName: string;
	    readonly extensions: IExtension[];
	    on: EventSubscriber<DashboardControlEvents>;
	    off: EventSubscriber<DashboardControlEvents>;
	    constructor(element: Element, options?: DashboardControlOptions);
	    readonly _colorSchemeCss: "dx-color-scheme-light" | "dx-color-scheme-dark";
	    repaint(): void;
	    render(): void;
	    maximizeDashboardItem(itemName: string): void;
	    restoreDashboardItem(): void;
	    initializeDashboard(id: string, dashboardJson: Object, initialState?: DashboardState): void;
	    requestDashboardList(): JQueryPromise<any>;
	    loadDashboard(dashboardId: string): JQueryPromise<any>;
	    unloadDashboard(): void;
	    switchToViewer(): void;
	    switchToDesigner(): void;
	    reloadData(): void;
	    refresh(args?: RefreshItemsArgs): void;
	    getDashboardState(): string;
	    setDashboardState(dashboardState: DashboardState | string): void;
	    getDashboardId(): string;
	    registerIcon(icon: string): void;
	    registerExtension(...extensions: IExtension[]): void;
	    findExtension(extensionName: string): IExtension;
	    unregisterExtension(...extensionNames: string[]): void;
	    subscribeExtensionsChanged(handlers: {
	        added?: (item: IExtension) => void;
	        deleted?: (item: IExtension) => void;
	    }): ko.Subscription;
	    dispose(): void;
	    _renderDashboardItem(element: Element, dashboardItemName: string, isStandalone?: boolean): void;
	    private _getFullscreenItemProvider;
	    private _registerKeyProcessing;
	    private _registerDefaultExtensions;
	    private _unrollEndpointCollection;
	    private _loadDefaultDashboard;
	    private _initializeServiceClient;
	    private _validateWorkingMode;
	    private _canAddExtension;
	    private _addExtension;
	    private _startExtension;
	    private _unloadDashboardServices;
	    private _applyBindings;
	}

}
declare module DevExpress.Dashboard {
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import AjaxRemoteServiceOptions = DevExpress.Dashboard.AjaxRemoteServiceOptions;
    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
	export type ExtensionCreator = (dashboardControl: DashboardControl, extensionOptions?: {
	    [index: string]: {};
	}) => IExtension;
	export type ExtensionDictionary = {
	    [index: string]: ExtensionCreator;
	};
	export type ExtensionOptions = {
	    [index: string]: Object | false | ExtensionCreator;
	};
	export var defaultExtensions: ExtensionDictionary;
	export var designerExtensions: ExtensionDictionary;
	export type WorkingMode = 'Designer' | 'Viewer' | 'ViewerOnly';
	export type LimitVisibleDataMode = 'Designer' | 'DesignerAndViewer' | 'None';
	export interface DashboardControlOptions {
	    workingMode?: WorkingMode;
	    initialDashboardId?: string;
	    initialDashboardState?: string;
	    loadDefaultDashboard?: boolean;
	    encodeHtml?: boolean;
	    useNeutralFilterMode?: boolean;
	    limitVisibleDataMode?: LimitVisibleDataMode;
	    showConfirmationOnBrowserClosing?: boolean;
	    resizeByTimer?: boolean;
	    allowMaximizeItems?: boolean;
	    endpoint?: string;
	    ajaxRemoteService?: AjaxRemoteServiceOptions;
	    onInitializing?: (args: {
	        component: DashboardControl;
	    }) => void;
	    onDashboardInitializing?: (args: DashboardInitializingArgs) => void;
	    onDashboardInitialized?: (args: DashboardInitializedArgs) => void;
	    onDashboardStateChanged?: (args: DashboardStateChangedArgs) => void;
	    onItemBeginUpdate?: (args: DashboardItemUpdateArgs) => void;
	    onItemEndUpdate?: (args: DashboardItemUpdateArgs) => void;
	    onDashboardBeginUpdate?: (args: DashboardUpdateArgs) => void;
	    onDashboardEndUpdate?: (args: DashboardUpdateArgs) => void;
	    dataRequestOptions?: DataRequestOptions;
	    useCardLegacyLayout?: boolean;
	    extensions?: ExtensionOptions | false;
	}
	export interface DashboardControlEvents {
	    initializing: ({
	        component: DashboardControl;
	    });
	    dashboardInitializing: DashboardInitializingArgs;
	    dashboardInitialized: DashboardInitializedArgs;
	    dashboardStateChanged: DashboardStateChangedArgs;
	    itemBeginUpdate: DashboardItemUpdateArgs;
	    itemEndUpdate: DashboardItemUpdateArgs;
	    dashboardBeginUpdate: DashboardUpdateArgs;
	    dashboardEndUpdate: DashboardUpdateArgs;
	}
	export interface DataRequestOptions {
	    itemDataRequestMode?: ItemDataRequestMode;
	}
	export type ItemDataRequestMode = 'SeparateRequests' | 'BatchRequests';
	export type RefreshItemsArgs = string | Array<string>;
	export type DashboardUpdateArgs = {
	    component: DashboardControl;
	    dashboardId: string;
	};
	export type DashboardItemUpdateArgs = {
	    component: DashboardControl;
	    dashboardId: string;
	    itemName: string;
	};
	export type DashboardInitializedArgs = {
	    component: DashboardControl;
	    dashboardId: string;
	    dashboard: Dashboard;
	};
	export type DashboardStateChangedArgs = {
	    component: DashboardControl;
	    dashboardId: string;
	    dashboard: Dashboard;
	    stateString: string;
	};
	export type DashboardInitializingArgs = {
	    component: DashboardControl;
	    dashboardId: string;
	    dashboard: Dashboard;
	    ready: JQueryPromise<any>;
	};

}
declare module DevExpress.Dashboard.Internal.Viewer {
	export type LocalizationObjectType = {
	    displayValue: string;
	    value: string;
	};
	export var paperKind: {
	    letter?: LocalizationObjectType;
	    legal?: LocalizationObjectType;
	    executive?: LocalizationObjectType;
	    a5?: LocalizationObjectType;
	    a4?: LocalizationObjectType;
	    a3?: LocalizationObjectType;
	};
	export var pageLayout: {
	    auto?: LocalizationObjectType;
	    portrait?: LocalizationObjectType;
	    landscape?: LocalizationObjectType;
	};
	export var scaleMode: {
	    none?: LocalizationObjectType;
	    useScaleFactor?: LocalizationObjectType;
	    autoFitToPageWidth?: LocalizationObjectType;
	};
	export var dashboardStatePosition: {
	    below?: LocalizationObjectType;
	    separatePage?: LocalizationObjectType;
	};
	export var excelDashboardStatePosition: {
	    below?: LocalizationObjectType;
	    separateSheet?: LocalizationObjectType;
	};
	export var imageFormat: {
	    png?: LocalizationObjectType;
	    gif?: LocalizationObjectType;
	    jpg?: LocalizationObjectType;
	};
	export var excelFormat: {
	    csv?: LocalizationObjectType;
	    xls?: LocalizationObjectType;
	    xlsx?: LocalizationObjectType;
	};
	export var sizeMode: {
	    none?: LocalizationObjectType;
	    stretch?: LocalizationObjectType;
	    zoom?: LocalizationObjectType;
	};

}
declare module DevExpress.Dashboard.Internal.Viewer {
	export let optionName: {
	    pdfTitle: string;
	    imageTitle: string;
	    fileName: string;
	    autoFitPageCount: string;
	    cardAutoArrangeContent: string;
	    chartAutomaticPageLayout: string;
	    chartSizeMode: string;
	    pdfDashboardStatePosition: string;
	    gaugeAutoArrangeContent: string;
	    gridFitToPageWidth: string;
	    gridPrintHeadersOnEveryPage: string;
	    mapAutomaticPageLayout: string;
	    mapSizeMode: string;
	    pageLayout: string;
	    paperKind: string;
	    pieAutoArrangeContent: string;
	    pivotPrintHeadersOnEveryPage: string;
	    rangeFilterAutomaticPageLayout: string;
	    rangeFilterSizeMode: string;
	    pdfScaleFactor: string;
	    scaleMode: string;
	    dashboardAutomaticPageLayout: string;
	    pdfShowTitle: string;
	    treemapAutomaticPageLayout: string;
	    treemapSizeMode: string;
	    imageFormat: string;
	    resolution: string;
	    imageScaleFactor: string;
	    imageShowTitle: string;
	    csvValueSeparator: string;
	    excelDashboardStatePosition: string;
	    excelFormat: string;
	    pdfExportFilters: string;
	    imageExportFilters: string;
	    excelExportFilters: string;
	    pdfExportParameters: string;
	    imageExportParameters: string;
	    excelExportParameters: string;
	    pdfIncludeHiddenParameters: string;
	    imageIncludeHiddenParameters: string;
	    excelIncludeHiddenParameters: string;
	    fontInfo: string;
	};
	export class exportOptionsCache {
	    documentOptions: any;
	    itemsOptions: any;
	    pdfOptions: any;
	    imageOptions: any;
	    excelOptions: any;
	    constructor();
	    _initialize(): void;
	    _addOption(cache: any, key: any, defaultValue: any, actualValue: any): void;
	    add(name: any, defaultDocumentInfo: any, actualDocumentInfo: any): void;
	    _setActualValue(cache: any, key: any, setActual: any, defaultValue: any): void;
	    getActualDocumentInfo(name: any, defaultDocumentInfo: any): any;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DOMComponent =  DevExpress.DOMComponent ;
    import dxCheckBoxOptions = DevExpress.ui;
    import dxNumberBoxOptions = DevExpress.ui;
    import dxRadioGroupOptions = DevExpress.ui;
    import dxSelectBoxOptions = DevExpress.ui;
    import dxTextBoxOptions = DevExpress.ui;
	export type ControlCreator = {
	    name: string;
	    create: (element: HTMLElement, options: Object) => DOMComponent;
	};
	export interface LabeledEditorOptions {
	    controlCreator: ControlCreator;
	    labelText: string;
	    controlOptions?: dxTextBoxOptions | dxCheckBoxOptions | dxNumberBoxOptions | dxRadioGroupOptions | dxSelectBoxOptions;
	    customText?: boolean;
	    largeMargin?: boolean;
	    values?: Array<any>;
	}
	export class labeledEditor {
	    options: LabeledEditorOptions;
	    valueName: any;
	    enabled: any;
	    largeMargin: boolean;
	    customText: boolean;
	    labelDiv: HTMLElement;
	    editorDiv: HTMLElement;
	    editor: DOMComponent;
	    constructor(options: LabeledEditorOptions);
	    _initialize(): void;
	    setEnabled(enabled: any): void;
	    setVisibility(visible: any): void;
	    set(value: any): void;
	    get(): any;
	    dispose(): void;
	    _getControlOptions(options: LabeledEditorOptions): any;
	    _generateElementNameClassName(controlCreator: string, largeMargin: any): string;
	    _getElementClassName(controlName: string, largeMargin: any): string;
	}
	export abstract class optionsGroup {
	    enabled: boolean;
	    _additionalOptions: {
	        popupContainer: HTMLElement;
	    };
	    constructor();
	    abstract set(documentInfo: any): any;
	    abstract apply(documentInfo: any): any;
	    abstract getEditors(captionEditors?: any): labeledEditor[];
	    abstract _initialize(): any;
	    setEnabled(enabled: any): void;
	    createEditors(additionalOptions: any): void;
	    dispose(): void;
	}
	export class dashboardStateOptionsGroup extends optionsGroup {
	    exportFilters: labeledEditor;
	    exportParameters: labeledEditor;
	    dashboardStatePosition: labeledEditor;
	    constructor();
	    _initialize(): void;
	    set(documentInfo: any): void;
	    apply(documentInfo: any): void;
	    getEditors(): labeledEditor[];
	}
	export class captionOptionsGroup extends optionsGroup {
	    private _showCaptionValue;
	    showCaption: labeledEditor;
	    caption: labeledEditor;
	    constructor(_showCaptionValue: any);
	    _initialize(): void;
	    set(documentInfo: any): void;
	    apply(documentInfo: any): void;
	    getEditors(): labeledEditor[];
	}
	export class scaleModeOptionsGroup extends optionsGroup {
	    private _scaleModeValue;
	    scaleMode: labeledEditor;
	    scaleFactor: labeledEditor;
	    autoFitPageCount: labeledEditor;
	    visibilityUpdated: JQuery.Callbacks<Function>;
	    constructor(_scaleModeValue: any);
	    _initialize(): void;
	    set(documentInfo: any): void;
	    apply(documentInfo: any): void;
	    getEditors(): labeledEditor[];
	    _setScaleModeOptionsVisibility(scaleModeValue: any): void;
	}
	export class documentOptionsGroup extends optionsGroup {
	    private _includeCaptionValue;
	    pageLayout: labeledEditor;
	    paperKind: labeledEditor;
	    captionOptionsGroup: captionOptionsGroup;
	    constructor(_includeCaptionValue: any);
	    _initialize(): void;
	    createEditors(additionalOptions: any): void;
	    set(documentInfo: any): void;
	    apply(documentInfo: any): void;
	    getEditors(): labeledEditor[];
	}
	export class textItemOptionsGroup extends optionsGroup {
	    private _showCaptionValue;
	    fileName: labeledEditor;
	    documentOptionsGroup: documentOptionsGroup;
	    dashboardStateOptionsGroup: dashboardStateOptionsGroup;
	    constructor(_showCaptionValue: any);
	    _initialize(): void;
	    createEditors(additionalOptions: any): void;
	    set(documentInfo: any): void;
	    apply(documentInfo: any): void;
	    getEditors(): labeledEditor[];
	}
	export class boundImageItemOptionsGroup extends optionsGroup {
	    private _showCaptionValue;
	    private _scaleModeValue;
	    fileName: labeledEditor;
	    documentOptionsGroup: documentOptionsGroup;
	    scaleModeOptionsGroup: scaleModeOptionsGroup;
	    dashboardStateOptionsGroup: dashboardStateOptionsGroup;
	    constructor(_showCaptionValue: any, _scaleModeValue: any);
	    _initialize(): void;
	    createEditors(additionalOptions: any): void;
	    set(documentInfo: any): void;
	    apply(documentInfo: any): void;
	    getEditors(): labeledEditor[];
	}
	export class imageItemOptionsGroup extends optionsGroup {
	    private _showCaptionValue;
	    private _scaleModeValue;
	    pageLayout: labeledEditor;
	    paperKind: labeledEditor;
	    showCaption: labeledEditor;
	    caption: labeledEditor;
	    fileName: labeledEditor;
	    scaleModeOptionsGroup: scaleModeOptionsGroup;
	    constructor(_showCaptionValue: any, _scaleModeValue: any);
	    _initialize(): void;
	    createEditors(additionalOptions: any): void;
	    set(documentInfo: any): void;
	    apply(documentInfo: any): void;
	    getEditors(): labeledEditor[];
	}
	export class groupItemOptionsGroup extends optionsGroup {
	    private _showCaptionValue;
	    private _dashboardAutomaticPageLayoutValue;
	    private _scaleModeValue;
	    dashboardOptionsGroup: dashboardOptionsGroup;
	    captionOptionsGroup: captionOptionsGroup;
	    dashboardStateOptionsGroup: dashboardStateOptionsGroup;
	    constructor(_showCaptionValue: any, _dashboardAutomaticPageLayoutValue: any, _scaleModeValue: any);
	    _initialize(): void;
	    createEditors(additionalOptions: any): void;
	    set(documentInfo: any): void;
	    apply(documentInfo: any): void;
	    getEditors(): labeledEditor[];
	}
	export class customItemOptionsGroup extends optionsGroup {
	    private _showCaptionValue;
	    private _dashboardAutomaticPageLayoutValue;
	    private _scaleModeValue;
	    dashboardOptionsGroup: dashboardOptionsGroup;
	    captionOptionsGroup: captionOptionsGroup;
	    constructor(_showCaptionValue: any, _dashboardAutomaticPageLayoutValue: any, _scaleModeValue: any);
	    _initialize(): void;
	    createEditors(additionalOptions: any): void;
	    set(documentInfo: any): void;
	    apply(documentInfo: any): void;
	    getEditors(): labeledEditor[];
	}
	export class entireDashboardOptionsGroup extends optionsGroup {
	    private _showTitleValue;
	    private _dashboardAutomaticPageLayoutValue;
	    private _scaleModeValue;
	    showTitle: labeledEditor;
	    title: labeledEditor;
	    dashboardOptionsGroup: dashboardOptionsGroup;
	    dashboardStateOptionsGroup: dashboardStateOptionsGroup;
	    constructor(_showTitleValue: any, _dashboardAutomaticPageLayoutValue: any, _scaleModeValue: any);
	    _initialize(): void;
	    createEditors(additionalOptions: any): void;
	    set(documentInfo: any): void;
	    apply(documentInfo: any): void;
	    getEditors(): labeledEditor[];
	}
	export class dashboardOptionsGroup extends optionsGroup {
	    private _dashboardAutomaticPageLayoutValue;
	    private _scaleModeValue;
	    pageLayout: labeledEditor;
	    paperKind: labeledEditor;
	    fileName: labeledEditor;
	    scaleModeOptionsGroup: scaleModeOptionsGroup;
	    constructor(_dashboardAutomaticPageLayoutValue: any, _scaleModeValue: any);
	    _initialize(): void;
	    createEditors(additionalOptions: any): void;
	    set(documentInfo: any): void;
	    apply(documentInfo: any): void;
	    getEditors(captionEditors: any): labeledEditor[];
	    _setScaleModeOptionsVisibility(pageLayoutValue: any): void;
	}
	export class gridOptionsGroup extends optionsGroup {
	    private _includeCaptionValue;
	    private _fitToPageWidthValue;
	    private _scaleModeValue;
	    printHeadersOnEveryPage: labeledEditor;
	    fitToPageWidth: labeledEditor;
	    fileName: labeledEditor;
	    documentOptionsGroup: documentOptionsGroup;
	    scaleModeOptionsGroup: scaleModeOptionsGroup;
	    dashboardStateOptionsGroup: dashboardStateOptionsGroup;
	    constructor(_includeCaptionValue: any, _fitToPageWidthValue: any, _scaleModeValue: any);
	    _initialize(): void;
	    createEditors(additionalOptions: any): void;
	    set(documentInfo: any): void;
	    apply(documentInfo: any): void;
	    getEditors(): any[];
	    _setScaleModeOptionsVisibility(fitToPageWidth: any): void;
	}
	export class pivotOptionsGroup extends optionsGroup {
	    private _includeCaptionValue;
	    private _scaleModeValue;
	    printHeadersOnEveryPage: labeledEditor;
	    fileName: labeledEditor;
	    documentOptionsGroup: documentOptionsGroup;
	    scaleModeOptionsGroup: scaleModeOptionsGroup;
	    dashboardStateOptionsGroup: dashboardStateOptionsGroup;
	    constructor(_includeCaptionValue: any, _scaleModeValue: any);
	    _initialize(): void;
	    createEditors(additionalOptions: any): void;
	    set(documentInfo: any): void;
	    apply(documentInfo: any): void;
	    getEditors(): any[];
	}
	export class chartOptionsGroup extends optionsGroup {
	    private _includeCaptionValue;
	    pageLayout: labeledEditor;
	    paperKind: labeledEditor;
	    sizeMode: labeledEditor;
	    fileName: labeledEditor;
	    captionOptionsGroup: captionOptionsGroup;
	    dashboardStateOptionsGroup: dashboardStateOptionsGroup;
	    constructor(_includeCaptionValue: any);
	    _initialize(): void;
	    createEditors(additionalOptions: any): void;
	    set(documentInfo: any): void;
	    apply(documentInfo: any): void;
	    getEditors(): labeledEditor[];
	}
	export class mapOptionsGroup extends optionsGroup {
	    private _includeCaptionValue;
	    pageLayout: labeledEditor;
	    paperKind: labeledEditor;
	    sizeMode: labeledEditor;
	    fileName: labeledEditor;
	    captionOptionsGroup: captionOptionsGroup;
	    dashboardStateOptionsGroup: dashboardStateOptionsGroup;
	    constructor(_includeCaptionValue: any);
	    _initialize(): void;
	    createEditors(additionalOptions: any): void;
	    set(documentInfo: any): void;
	    apply(documentInfo: any): void;
	    getEditors(): labeledEditor[];
	}
	export class treemapOptionsGroup extends optionsGroup {
	    private _includeCaptionValue;
	    pageLayout: labeledEditor;
	    paperKind: labeledEditor;
	    sizeMode: labeledEditor;
	    fileName: labeledEditor;
	    captionOptionsGroup: captionOptionsGroup;
	    dashboardStateOptionsGroup: dashboardStateOptionsGroup;
	    constructor(_includeCaptionValue: any);
	    _initialize(): void;
	    createEditors(additionalOptions: any): void;
	    set(documentInfo: any): void;
	    apply(documentInfo: any): void;
	    getEditors(): labeledEditor[];
	}
	export class rangeFilterOptionsGroup extends optionsGroup {
	    private _includeCaptionValue;
	    pageLayout: labeledEditor;
	    paperKind: labeledEditor;
	    sizeMode: labeledEditor;
	    fileName: labeledEditor;
	    captionOptionsGroup: captionOptionsGroup;
	    dashboardStateOptionsGroup: dashboardStateOptionsGroup;
	    constructor(_includeCaptionValue: any);
	    _initialize(): void;
	    createEditors(additionalOptions: any): void;
	    set(documentInfo: any): void;
	    apply(documentInfo: any): void;
	    getEditors(): labeledEditor[];
	}
	export class pieOptionsGroup extends optionsGroup {
	    private _includeCaptionValue;
	    private _autoArrangeContentValue;
	    private _scaleModeValue;
	    autoArrangeContent: labeledEditor;
	    fileName: labeledEditor;
	    documentOptionsGroup: documentOptionsGroup;
	    scaleModeOptionsGroup: scaleModeOptionsGroup;
	    dashboardStateOptionsGroup: dashboardStateOptionsGroup;
	    constructor(_includeCaptionValue: any, _autoArrangeContentValue: any, _scaleModeValue: any);
	    _initialize(): void;
	    createEditors(additionalOptions: any): void;
	    set(documentInfo: any): void;
	    apply(documentInfo: any): void;
	    getEditors(): any[];
	    _setScaleModeOptionsVisibility(autoArrangeContent: any): void;
	}
	export class gaugeOptionsGroup extends optionsGroup {
	    private _includeCaptionValue;
	    private _autoArrangeContentValue;
	    private _scaleModeValue;
	    autoArrangeContent: labeledEditor;
	    fileName: labeledEditor;
	    documentOptionsGroup: documentOptionsGroup;
	    scaleModeOptionsGroup: scaleModeOptionsGroup;
	    dashboardStateOptionsGroup: dashboardStateOptionsGroup;
	    constructor(_includeCaptionValue: any, _autoArrangeContentValue: any, _scaleModeValue: any);
	    _initialize(): void;
	    createEditors(additionalOptions: any): void;
	    set(documentInfo: any): void;
	    apply(documentInfo: any): void;
	    getEditors(): any[];
	    _setScaleModeOptionsVisibility(autoArrangeContent: any): void;
	}
	export class cardOptionsGroup extends optionsGroup {
	    private _includeCaptionValue;
	    private _autoArrangeContentValue;
	    private _scaleModeValue;
	    autoArrangeContent: labeledEditor;
	    fileName: labeledEditor;
	    documentOptionsGroup: documentOptionsGroup;
	    scaleModeOptionsGroup: scaleModeOptionsGroup;
	    dashboardStateOptionsGroup: dashboardStateOptionsGroup;
	    constructor(_includeCaptionValue: any, _autoArrangeContentValue: any, _scaleModeValue: any);
	    _initialize(): void;
	    createEditors(additionalOptions: any): void;
	    set(documentInfo: any): void;
	    apply(documentInfo: any): void;
	    getEditors(): any[];
	    _setScaleModeOptionsVisibility(autoArrangeContent: any): void;
	}
	export class imageOptionsGroup extends optionsGroup {
	    private _showTitleValue;
	    imageFormat: labeledEditor;
	    showTitle: labeledEditor;
	    title: labeledEditor;
	    exportFilters: labeledEditor;
	    exportParameters: labeledEditor;
	    resolution: labeledEditor;
	    fileName: labeledEditor;
	    constructor(_showTitleValue: any);
	    _initialize(): void;
	    set(documentInfo: any): void;
	    apply(documentInfo: any): void;
	    getEditors(): labeledEditor[];
	}
	export class dashboardExcelOptionsGroup extends optionsGroup {
	    private _formatValue;
	    excelFormat: labeledEditor;
	    exportFilters: labeledEditor;
	    exportParameters: labeledEditor;
	    dashboardStatePosition: labeledEditor;
	    fileName: labeledEditor;
	    constructor(_formatValue: any);
	    _checkExportFormat(format: any): boolean;
	    _initialize(): void;
	    set(documentInfo: any): void;
	    apply(documentInfo: any): void;
	    getEditors(): labeledEditor[];
	}
	export class excelOptionsGroup extends optionsGroup {
	    private _formatValue;
	    excelFormat: labeledEditor;
	    separator: labeledEditor;
	    exportFilters: labeledEditor;
	    exportParameters: labeledEditor;
	    dashboardStatePosition: labeledEditor;
	    fileName: labeledEditor;
	    constructor(_formatValue: any);
	    _checkExportFormat(format: any): boolean;
	    _initialize(): void;
	    set(documentInfo: any): void;
	    apply(documentInfo: any): void;
	    getEditors(): labeledEditor[];
	}
	export class simplyImageOptionsGroup extends optionsGroup {
	    private _showTitleValue;
	    imageFormat: labeledEditor;
	    showTitle: labeledEditor;
	    title: labeledEditor;
	    resolution: labeledEditor;
	    fileName: labeledEditor;
	    constructor(_showTitleValue: any);
	    _initialize(): void;
	    set(documentInfo: any): void;
	    apply(documentInfo: any): void;
	    getEditors(): labeledEditor[];
	}
	export class dashboardImageOptionsGroup extends optionsGroup {
	    private _showTitleValue;
	    imageFormat: labeledEditor;
	    showTitle: labeledEditor;
	    title: labeledEditor;
	    exportFilters: labeledEditor;
	    exportParameters: labeledEditor;
	    resolution: labeledEditor;
	    fileName: labeledEditor;
	    constructor(_showTitleValue: any);
	    _initialize(): void;
	    set(documentInfo: any): void;
	    apply(documentInfo: any): void;
	    getEditors(): labeledEditor[];
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dialogForm = DevExpress.Dashboard.Internal.Viewer.dialogForm;
    import exportOptionsCache = DevExpress.Dashboard.Internal.Viewer.exportOptionsCache;
    import boundImageItemOptionsGroup = DevExpress.Dashboard.Internal.Viewer.boundImageItemOptionsGroup;
    import cardOptionsGroup = DevExpress.Dashboard.Internal.Viewer.cardOptionsGroup;
    import chartOptionsGroup = DevExpress.Dashboard.Internal.Viewer.chartOptionsGroup;
    import customItemOptionsGroup = DevExpress.Dashboard.Internal.Viewer.customItemOptionsGroup;
    import dashboardExcelOptionsGroup = DevExpress.Dashboard.Internal.Viewer.dashboardExcelOptionsGroup;
    import dashboardImageOptionsGroup = DevExpress.Dashboard.Internal.Viewer.dashboardImageOptionsGroup;
    import entireDashboardOptionsGroup = DevExpress.Dashboard.Internal.Viewer.entireDashboardOptionsGroup;
    import excelOptionsGroup = DevExpress.Dashboard.Internal.Viewer.excelOptionsGroup;
    import gaugeOptionsGroup = DevExpress.Dashboard.Internal.Viewer.gaugeOptionsGroup;
    import gridOptionsGroup = DevExpress.Dashboard.Internal.Viewer.gridOptionsGroup;
    import groupItemOptionsGroup = DevExpress.Dashboard.Internal.Viewer.groupItemOptionsGroup;
    import imageItemOptionsGroup = DevExpress.Dashboard.Internal.Viewer.imageItemOptionsGroup;
    import imageOptionsGroup = DevExpress.Dashboard.Internal.Viewer.imageOptionsGroup;
    import mapOptionsGroup = DevExpress.Dashboard.Internal.Viewer.mapOptionsGroup;
    import optionsGroup = DevExpress.Dashboard.Internal.Viewer.optionsGroup;
    import pieOptionsGroup = DevExpress.Dashboard.Internal.Viewer.pieOptionsGroup;
    import pivotOptionsGroup = DevExpress.Dashboard.Internal.Viewer.pivotOptionsGroup;
    import rangeFilterOptionsGroup = DevExpress.Dashboard.Internal.Viewer.rangeFilterOptionsGroup;
    import simplyImageOptionsGroup = DevExpress.Dashboard.Internal.Viewer.simplyImageOptionsGroup;
    import textItemOptionsGroup = DevExpress.Dashboard.Internal.Viewer.textItemOptionsGroup;
    import treemapOptionsGroup = DevExpress.Dashboard.Internal.Viewer.treemapOptionsGroup;
	export class exportDialog {
	    options: any;
	    exportOptionsCache: exportOptionsCache;
	    dialogForm: dialogForm;
	    group: optionsGroup;
	    exportFunction: any;
	    name: string;
	    type: any;
	    format: any;
	    defaultTitle: string;
	    constructor(options: any);
	    _initialize(): void;
	    showDialog(name: any, type: any, format: any, options: any): void;
	    hideDialog(): void;
	    dispose(): void;
	    private _getLocalizedTitle;
	    setExportFunction(exportFunction: any): void;
	    _createImageGroup(type: any, documentInfo: any): imageOptionsGroup | simplyImageOptionsGroup | dashboardImageOptionsGroup;
	    _createExcelGroup(type: any, documentInfo: any): dashboardExcelOptionsGroup | excelOptionsGroup;
	    _createPdfGroup(type: any, documentInfo: any): textItemOptionsGroup | boundImageItemOptionsGroup | imageItemOptionsGroup | groupItemOptionsGroup | customItemOptionsGroup | entireDashboardOptionsGroup | gridOptionsGroup | pivotOptionsGroup | chartOptionsGroup | mapOptionsGroup | treemapOptionsGroup | rangeFilterOptionsGroup | pieOptionsGroup | gaugeOptionsGroup | cardOptionsGroup;
	    _createGroup(): void;
	    static _initializeExportLocalizedStrings(): void;
	}

}
declare module DevExpress.Dashboard.Internal {

    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DashboardExcelExportOptions = DevExpress.Dashboard.DashboardExcelExportOptions;
    import DashboardImageExportOptions = DevExpress.Dashboard.DashboardImageExportOptions;
    import DashboardPdfExportOptions = DevExpress.Dashboard.DashboardPdfExportOptions;
    import exportDialog = DevExpress.Dashboard.Internal.Viewer.exportDialog;
    import ExportOptions = DevExpress.Dashboard.Internal.Viewer.ExportOptions;
    import ExportInfo = DevExpress.Dashboard.Internal.ExportInfo;
    import IDataServiceClient = DevExpress.Dashboard.Internal.IDataServiceClient;
    import DashboardExportDialogArgs = DevExpress.Dashboard.DashboardExportDialogArgs;
    import DashboardExportFormat = DevExpress.Dashboard.DashboardExportFormat;
	export type ExportMode = 'SingleItem' | 'EntireDashboard';
	export interface IExportInfoProvider {
	    getItemExportInfo(itemName: string, mode: ExportMode, isCaption: boolean): any;
	}
	export class ExportDialogBinderOptions {
	    dashboard: ko.Computed<Dashboard>;
	    serviceClient: ko.Observable<IDataServiceClient>;
	    getContainer: () => Element;
	    exportInfoProvider: IExportInfoProvider;
	    pdfExportOptions: DashboardPdfExportOptions;
	    imageExportOptions: DashboardImageExportOptions;
	    excelExportOptions: DashboardExcelExportOptions;
	    onExportDialogShown: (args: DashboardExportDialogArgs) => void;
	    onExportDialogShowing: (args: DashboardExportDialogArgs) => void;
	    onExportDialogHidden: (args: DashboardExportDialogArgs) => void;
	}
	export class ExportDialogBinder {
	    private _options;
	    availableExportFormats: string[];
	    exportOptions: ExportOptions;
	    private _exportDialog;
	    constructor(_options: ExportDialogBinderOptions);
	    reset(): void;
	    _getClientSize(container: HTMLElement, mode: ExportMode): {
	        width: number;
	        height: number;
	    };
	    _getActualComponentName(item: DashboardItem): string;
	    _getExportHolderItem(item: DashboardItem): DashboardItem;
	    _getInfo(items: Array<DashboardItem>, titleHeight: number, mode: ExportMode, format: DashboardExportFormat): {
	        clientSize: {
	            width: number;
	            height: number;
	        };
	        titleHeight: number;
	        itemsState: any[];
	    };
	    _getFilterFormattableValues(dashboard: Dashboard, exportGroupName: string, item: DashboardItem, exportInfo: ExportInfo): void | any[];
	    exportDashboardTo(format: DashboardExportFormat, clientOptions: any, customFileName?: any): void;
	    exportDashboardItemTo(itemComponentName: string, format: DashboardExportFormat, clientOptions: any, customFileName?: string): void;
	    showDashboardDialog: (format: DashboardExportFormat) => void;
	    showItemDialog: (itemComponentName: string, format: DashboardExportFormat) => void;
	    hide: () => void;
	    readonly exportDialog: exportDialog;
	    _getExportItemType(item: DashboardItem): string;
	    private _getGroupExternalDisplayFilterValues;
	    private _exportTo;
	    private _validateExportFormat;
	    private _validateDashboardExport;
	}
	export class ExportInfoManager extends DisposableObject implements IExportInfoProvider {
	    private _primaryExportInfoProviders;
	    private _secondaryExportInfoProviders;
	    private _captionExportInfoProviders;
	    getItemExportInfo(itemName: string, mode: ExportMode, isCaption: boolean): any;
	    registerPrimaryExportItem(itemName: string, getExportInfoFunc: () => any): void;
	    unregisterPrimaryExportItem(itemName: string): void;
	    registerSecondaryExportItem(itemName: string, getExportInfoFunc: () => any): void;
	    unregisterSecondaryExportItem(itemName: string): void;
	    registerCaptionExportItem(itemName: string, getExportInfoFunc: () => any): void;
	    unregisterCaptionExportItem(itemName: string): void;
	    dispose(): void;
	}

}
declare module DevExpress.Dashboard {
import dxElement = DevExpress.core.dxElement;
    import dxPopup =  DevExpress.ui.dxPopup ;
    import DashboardExcelExportOptions = DevExpress.Dashboard.DashboardExcelExportOptions;
    import DashboardImageExportOptions = DevExpress.Dashboard.DashboardImageExportOptions;
    import DashboardPdfExportOptions = DevExpress.Dashboard.DashboardPdfExportOptions;
    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import EventSubscriber = DevExpress.Dashboard.Internal.EventSubscriber;
    import IDashboardItemContext = DevExpress.Dashboard.Internal.IDashboardItemContext;
    import ExportDialogBinder = DevExpress.Dashboard.Internal.ExportDialogBinder;
	export interface DashboardExportDialogArgs {
	    component: dxPopup;
	    element: dxElement;
	}
	export interface DashboardExportExtensionOptions {
	    allowExportDashboard?: boolean;
	    allowExportDashboardItems?: boolean;
	    pdfExportOptions?: DashboardPdfExportOptions;
	    imageExportOptions?: DashboardImageExportOptions;
	    excelExportOptions?: DashboardExcelExportOptions;
	    onExportDialogShowing?: (args: DashboardExportDialogArgs) => void;
	    onExportDialogShown?: (args: DashboardExportDialogArgs) => void;
	    onExportDialogHidden?: (args: DashboardExportDialogArgs) => void;
	}
	export interface DashboardExportExtensionEvents {
	    exportDialogShowing: DashboardExportDialogArgs;
	    exportDialogShown: DashboardExportDialogArgs;
	    exportDialogHidden: DashboardExportDialogArgs;
	}
	export type DashboardExportFormat = 'PDF' | 'Image' | 'Excel';
	export class DashboardExportExtension implements IExtension {
	    private dashboardControl;
	    private _dialogBinderSubscription;
	    private _exportInfoContoller;
	    allowExportDashboard: boolean;
	    allowExportDashboardItems: boolean;
	    name: string;
	    private _optionsManager;
	    private _defaultOptions;
	    _dialogBinder: ExportDialogBinder;
	    private _initializeExportButton;
	    _initializePrimaryExportItem(localContext: IDashboardItemContext): void;
	    _initializeSecondaryExportItem(localContext: IDashboardItemContext): void;
	    on: EventSubscriber<DashboardExportExtensionEvents>;
	    off: EventSubscriber<DashboardExportExtensionEvents>;
	    constructor(dashboardControl: DashboardControl, options?: DashboardExportExtensionOptions);
	    start(): void;
	    stop(): void;
	    showExportDashboardDialog(format: DashboardExportFormat): void;
	    showExportDashboardItemDialog(itemComponentName: string, format: DashboardExportFormat): void;
	    hideExportDialog(): void;
	    getPdfExportOptions(): DashboardPdfExportOptions;
	    getImageExportOptions(): DashboardImageExportOptions;
	    getExcelExportOptions(): DashboardExcelExportOptions;
	    setPdfExportOptions(options: DashboardPdfExportOptions): void;
	    setImageExportOptions(options: DashboardImageExportOptions): void;
	    setExcelExportOptions(options: DashboardExcelExportOptions): void;
	    exportToPdf(options?: DashboardPdfExportOptions, fileName?: string): void;
	    exportToImage(options?: DashboardImageExportOptions, fileName?: string): void;
	    exportToExcel(options?: DashboardExcelExportOptions, fileName?: string): void;
	    exportDashboardItemToPdf(itemName: string, options?: DashboardPdfExportOptions, fileName?: string): void;
	    exportDashboardItemToImage(itemName: string, options?: DashboardImageExportOptions, fileName?: string): void;
	    exportDashboardItemToExcel(itemName: string, options?: DashboardExcelExportOptions, fileName?: string): void;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
	export let size: (w?: any, h?: any) => {
	    width: any;
	    height: any;
	    plus: (arg: any) => any;
	    minus: (arg: any) => any;
	    compareByDirections: (size: any) => string[];
	    constrain: (constraints: any) => any;
	    clone: () => any;
	};
	export let constraints: (pMin: any, pMax: any) => {
	    min: any;
	    max: any;
	    consolidate: (sourceConstraints: any, consolidateDirection: any) => any;
	    isFixed: (direction: any) => boolean;
	    _consolidatePart: (sourceConstraints: any, consolidateDirection: any, part: any) => {
	        width: any;
	        height: any;
	        plus: (arg: any) => any;
	        minus: (arg: any) => any;
	        compareByDirections: (size: any) => string[];
	        constrain: (constraints: any) => any;
	        clone: () => any;
	    };
	};
	export let nonClientElement: (width: any, height: any) => {
	    getBounds: () => {
	        width: any;
	        height: any;
	        plus: (arg: any) => any;
	        minus: (arg: any) => any;
	        compareByDirections: (size: any) => string[];
	        constrain: (constraints: any) => any;
	        clone: () => any;
	    };
	};
	export let getCrossDirection: (direction: any) => "width" | "height";
	export let defConstraints: (valueMin?: number, valueMax?: number) => any;
	export let defSizeInPercents: (direction: any, value: any) => any;
	export let checkRange: (value: any, min: any, max: any) => boolean;
	export let ensureRange: (value: any, min: any, max: any) => number;
	export let deepCloneObject: (injectObject: any, sourceObject: any, noDeepCopyPropsValues: any) => any;

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import dxOverlay =  DevExpress.ui.dxOverlay ;
    import DashboardItemCaptionToolbarOptions = DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
    import ViewerToolbarLocatedItem = DevExpress.Dashboard.Internal.Viewer.ViewerToolbarLocatedItem;
    import CaptionToolbar = DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
    import DashboardCaptionToolbarBase = DevExpress.Dashboard.Internal.Viewer.DashboardCaptionToolbarBase;
    import dxToolbarItem = DevExpress.Dashboard.Internal.Viewer.dxToolbarItem;
	export class FloatingCaptionToolbarBase extends DashboardCaptionToolbarBase {
	    protected _isBottomPosition: boolean;
	    protected _floatingPanel: dxOverlay;
	    private PREVIEW_TOOLBAR_WIDTH;
	    private _maxWidth;
	    constructor(_container: HTMLElement, _controlContainer: HTMLElement, _popupContainer: HTMLElement, encodeHtml: boolean, _isBottomPosition: boolean);
	    isBottomFloatingTypePosition: boolean;
	    update(options: DashboardItemCaptionToolbarOptions): boolean;
	    calcHeight(): number;
	    onResize(): void;
	    showFloatingPanel(): void;
	    hideFloatingPanel(): void;
	    dispose(): void;
	    protected _appendToContainer(toolbarDiv: HTMLElement): HTMLElement;
	    protected _updateToolbar(): void;
	    protected _repaintFloatingPanel(): void;
	    protected _getVisibleItems(): Array<ViewerToolbarLocatedItem>;
	    protected _createInstance(): CaptionToolbar;
	    protected _getToolbarItems(items: Array<ViewerToolbarLocatedItem>): Array<dxToolbarItem>;
	    protected _getToolbarWidth(floadingPanelDiv: HTMLElement): number;
	    protected _createFloatingPanel(toolbarDiv: HTMLElement, floadingPanelDiv: HTMLElement, preview: boolean): dxOverlay;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DashboardItemCaptionToolbarOptions = DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
    import CaptionToolbar = DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
    import FloatingCaptionToolbarBase = DevExpress.Dashboard.Internal.Viewer.FloatingCaptionToolbarBase;
	export class ClickableFloatingCaptionToolbar extends FloatingCaptionToolbarBase {
	    private static _toolbars;
	    protected _itemHasOwnContent: boolean;
	    protected static registerToolbar(toolbar: ClickableFloatingCaptionToolbar): void;
	    protected static unregisterToolbar(toolbar: ClickableFloatingCaptionToolbar): void;
	    protected static activateToolbar(toolbar: ClickableFloatingCaptionToolbar): void;
	    protected _shieldDiv: HTMLElement;
	    constructor(_container: HTMLElement, _controlContainer: HTMLElement, _popupContainer: HTMLElement, encodeHtml: boolean, isBottomPosition: boolean, itemHasOwnContent: boolean);
	    update(options: DashboardItemCaptionToolbarOptions): boolean;
	    showFloatingPanel(): void;
	    hideFloatingPanel(): void;
	    dispose(): void;
	    protected _createInstance(): CaptionToolbar;
	    protected _appendToContainer(toolbarDiv: HTMLElement): HTMLElement;
	    protected _subscribeOnShieldEvents(): void;
	    protected _disableShield(): void;
	    protected _enableShield(): void;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DashboardItemCaptionToolbarOptions = DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
    import CaptionToolbar = DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
	export class HiddenCaptionToolbar implements CaptionToolbar {
	    element: HTMLElement;
	    disabled: boolean;
	    calcHeight(options: DashboardItemCaptionToolbarOptions): number;
	    calcMinWidth(options: DashboardItemCaptionToolbarOptions): number;
	    update(options: DashboardItemCaptionToolbarOptions): boolean;
	    onResize(): void;
	    dispose(): void;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DashboardItemCaptionToolbarOptions = DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
    import CaptionToolbar = DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
    import FloatingCaptionToolbarBase = DevExpress.Dashboard.Internal.Viewer.FloatingCaptionToolbarBase;
	export class HoveredFloatingCaptionToolbar extends FloatingCaptionToolbarBase {
	    constructor(_container: HTMLElement, _controlContainer: HTMLElement, _popupContainer: HTMLElement, encodeHtml: boolean, isBottomPosition: boolean);
	    calcMinWidth(options: DashboardItemCaptionToolbarOptions): number;
	    dispose(): void;
	    protected _appendToContainer(toolbarDiv: HTMLElement): HTMLElement;
	    protected _createInstance(): CaptionToolbar;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DashboardItemCaptionToolbarOptions = DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
    import ViewerToolbarLocatedItem = DevExpress.Dashboard.Internal.Viewer.ViewerToolbarLocatedItem;
    import CaptionToolbar = DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
    import DashboardCaptionToolbarBase = DevExpress.Dashboard.Internal.Viewer.DashboardCaptionToolbarBase;
	export class HoveredDashboardCaptionToolbar extends DashboardCaptionToolbarBase {
	    private _hasBorder;
	    private _containerHovered;
	    constructor(_container: HTMLElement, _controlContainer: HTMLElement, _popupContainer: HTMLElement, encodeHtml: boolean, _hasBorder: boolean);
	    dispose(): void;
	    protected _appendToContainer(toolbarDiv: HTMLElement): HTMLElement;
	    update(options: DashboardItemCaptionToolbarOptions): boolean;
	    protected _getVisibleItems(): Array<ViewerToolbarLocatedItem>;
	    protected _createInstance(): CaptionToolbar;
	    protected _processToolbarBeforeGettingSize(toolbar: CaptionToolbar): void;
	    private setHoverState;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import CaptionToolbar = DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
    import ClickableFloatingCaptionToolbar = DevExpress.Dashboard.Internal.Viewer.ClickableFloatingCaptionToolbar;
	export class MinimizedClickableCaptionToolbar extends ClickableFloatingCaptionToolbar {
	    private _previewFloatingPanel;
	    private _previewToolbarDiv;
	    constructor(_container: HTMLElement, _controlContainer: HTMLElement, _popupContainer: HTMLElement, encodeHtml: boolean, isBottomPosition: boolean, itemHasOwnContent: boolean);
	    showPreviewFloatingPanel(): void;
	    hideFloatingPanel(): void;
	    dispose(): void;
	    protected _createInstance(): CaptionToolbar;
	    protected _appendToContainer(toolbarDiv: HTMLElement): HTMLElement;
	    protected _subscribeOnShieldEvents(): void;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DashboardItemCaptionToolbarOptions = DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
    import CaptionToolbar = DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
    import FloatingCaptionToolbarBase = DevExpress.Dashboard.Internal.Viewer.FloatingCaptionToolbarBase;
	export enum MinimizedToolbarState {
	    Hidden = 0,
	    Minimim = 1,
	    Maximim = 2
	}
	export class MinimizedHoveredCaptionToolbar extends FloatingCaptionToolbarBase {
	    private _previewFloatingPanel;
	    private _previewToolbarDiv;
	    private _toolbarState;
	    private _containerHovered;
	    private _onContainerHovered;
	    private _onContainerLeave;
	    private _onPreviewHovered;
	    private _onToolbarLeave;
	    private readonly hasItems;
	    constructor(_container: HTMLElement, _controlContainer: HTMLElement, _popupContainer: HTMLElement, encodeHtml: boolean, isBottomPosition: boolean);
	    calcMinWidth(options: DashboardItemCaptionToolbarOptions): number;
	    dispose(): void;
	    onResize(): void;
	    protected _appendToContainer(toolbarDiv: HTMLElement): HTMLElement;
	    protected _repaintFloatingPanel(): void;
	    private _showPreviewFloatingPanel;
	    private _hidePreviewFloatingPanel;
	    protected _createInstance(): CaptionToolbar;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DashboardItemCaptionToolbarOptions = DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
    import ViewerToolbarLocatedItem = DevExpress.Dashboard.Internal.Viewer.ViewerToolbarLocatedItem;
    import CaptionToolbar = DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
    import DashboardCaptionToolbarBase = DevExpress.Dashboard.Internal.Viewer.DashboardCaptionToolbarBase;
	export class StaticCaptionToolbar extends DashboardCaptionToolbarBase {
	    protected _className: string;
	    private _hasBorder;
	    private allowHideEmptyToolbar;
	    constructor(_container: HTMLElement, _controlContainer: HTMLElement, _popupContainer: HTMLElement, encodeHtml: boolean, _className: string, _hasBorder: boolean, allowHideEmptyToolbar: any);
	    calcHeight(options: DashboardItemCaptionToolbarOptions): number;
	    calcMinWidth(options: DashboardItemCaptionToolbarOptions): any;
	    update(options: DashboardItemCaptionToolbarOptions): boolean;
	    protected _getVisibleItems(): Array<ViewerToolbarLocatedItem>;
	    protected _createInstance(): CaptionToolbar;
	    private _visible;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {

    import dxToast =  DevExpress.ui.dxToast ;
	export interface IItemLoadingElement {
	    show(container: HTMLElement): any;
	    hide(): any;
	    resize(): any;
	}
	export class ItemLoadingElement implements IItemLoadingElement {
	    _overlay: dxToast;
	    show(container: HTMLElement): void;
	    hide(): void;
	    resize(): void;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DashboardExportFormat = DevExpress.Dashboard.DashboardExportFormat;
    import ItemDataAxisName = DevExpress.Dashboard.Data.ItemDataAxisName;
    import ContentType = DevExpress.Dashboard.Internal.Data.ContentType;
    import DashboardItemCaptionToolbarOptions = DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
    import ViewerToolbarItem = DevExpress.Dashboard.ViewerToolbarItem;
    import CaptionToolbar = DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
    import ItemCaptionToolbarViewOptions = DevExpress.Dashboard.Internal.Viewer.ItemCaptionToolbarViewOptions;
    import IItemLoadingElement = DevExpress.Dashboard.Internal.Viewer.IItemLoadingElement;
	export var createDefaultToolbar: (viewerItem: baseItem, container: HTMLElement, controlContainer: HTMLElement, popupContainer: HTMLElement, viewOptions: ItemCaptionToolbarViewOptions) => CaptionToolbar;
	export function getControlContainer(element: HTMLElement): HTMLElement;
	export type ViewerItemVisualMode = 'full' | 'caption' | 'content';
	export abstract class baseItem {
	    private _lockCount;
	    _isFixedHeight: boolean;
	    customHoverEnabled: boolean;
	    container: HTMLElement;
	    controlContainer: HTMLElement;
	    _boundaryContainer: HTMLElement;
	    _clearMasterFilterHandler: any;
	    _clearSelectionHandler: any;
	    _toggleSelectionModeHandler: any;
	    _drillUpHandler: any;
	    _allowMultiselection: boolean;
	    allowMultiselectionChanged: (allowed: any) => void;
	    allowLimitDataCallback: () => void;
	    dateToString: (date: Date) => string;
	    selected: JQuery.Callbacks<Function>;
	    clearMasterFilter: JQuery.Callbacks<Function>;
	    drillUp: JQuery.Callbacks<Function>;
	    contentElementSelection: JQuery.Callbacks<Function>;
	    expandValue: JQuery.Callbacks<Function>;
	    clientStateUpdate: JQuery.Callbacks<Function>;
	    dataRequest: JQuery.Callbacks<Function>;
	    itemClick: JQuery.Callbacks<Function>;
	    itemHover: JQuery.Callbacks<Function>;
	    itemSelectionChanged: JQuery.Callbacks<Function>;
	    itemWidgetCreated: JQuery.Callbacks<Function>;
	    itemWidgetUpdating: JQuery.Callbacks<Function>;
	    itemWidgetUpdated: JQuery.Callbacks<Function>;
	    itemWidgetOptionsPrepared: JQuery.Callbacks<Function>;
	    itemCaptionToolbarUpdated: JQuery.Callbacks<Function>;
	    constraintsUpdated: JQuery.Callbacks<Function>;
	    interactivityController: any;
	    customSelectionMode: any;
	    customTargetAxes: ItemDataAxisName[];
	    customDefaultSelectedValues: any[];
	    options: ViewerItemOptions;
	    dataController: any;
	    customSelectedTuples: Array<any>;
	    contentRoot: HTMLElement;
	    shieldingElement: HTMLElement;
	    itemLoadingElement: IItemLoadingElement;
	    captionToolbar: CaptionToolbar;
	    visualMode: ViewerItemVisualMode;
	    _hasWidget: boolean;
	    readonly hasWidget: boolean;
	    protected readonly _captionToolbarSeparatorRequired: boolean;
	    protected readonly _isBottomFloatingToolbarPosition: boolean;
	    protected readonly _allowPreview: boolean;
	    protected readonly _shouldApplySelectionOnInitialRender: boolean;
	    constructor($container: HTMLElement, options: ViewerItemOptions);
	    protected _initializeData(newOptions: ViewerItemOptions): void;
	    initialDataRequest(): void;
	    initialDataRequestUnsafe(): void;
	    allowMultiselection: boolean;
	    forceUpdateInteractivity(): void;
	    clearSelection(): void;
	    protected _clearSelectionUnsafe(): void;
	    protected _clearSelectionBase(): void;
	    performClearSelection(): void;
	    selectTuple(tuple: any, state: any): void;
	    protected selectTupleUnsafe(tuple: any, state: any): void;
	    setSelection(values: any): void;
	    protected _setSelectionUnsafe(values: any): void;
	    private setSelectionBase;
	    protected _applySelection(): void;
	    protected _applySelectionUnsafe(): void;
	    protected _isEncodeHtml(): any;
	    protected _isSupportDataAwareExport(): any;
	    protected _isLocked(): boolean;
	    protected _lock(): void;
	    protected _unlock(): void;
	    protected _getCustomSelectionMode(): any;
	    protected _setCustomSelectionMode(value: any): void;
	    protected _getCustomHoverEnabled(): boolean;
	    protected _setCustomHoverEnabled(value: any): void;
	    private _getCustomTargetAxes;
	    private _setCustomTargetAxes;
	    protected _getTargetAxes(): ItemDataAxisName[];
	    getSelectedTuples(): any[];
	    updateItem(options: any): void;
	    forceUpdateItem(): void;
	    private _changeTuple;
	    private _onSelectionChanged;
	    protected _mustSelectingFired(values: any): boolean;
	    private _patchTroughDrillDownValues;
	    private _deductDrillDownValues;
	    private _getSelectionCallbackType;
	    protected _selectTuples(tuplesToSelect: any, unaffectedTuples: any, isSelect: any): void;
	    protected _selectTuplesCore(tuples: any, updateTupleDelegate: any, state: any): void;
	    protected _renderContent(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
	    protected renderContentUnsafe($element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
	    renderPartialContent(): void;
	    protected renderPartialContentUnsafe(): void;
	    updateContentState(): void;
	    protected updateContentStateUnsafe(): void;
	    getInfo(): {
	        name: string;
	        headerHeight: number;
	        position: JQuery.Coordinates;
	        width: number;
	        height: number;
	        virtualSize: any;
	        scroll: any;
	    };
	    protected getInfoUnsafe(): {
	        name: string;
	        headerHeight: number;
	        position: JQuery.Coordinates;
	        width: number;
	        height: number;
	        virtualSize: any;
	        scroll: any;
	    };
	    private getInfoBase;
	    getName(): string;
	    getCaption(): any;
	    hasCaption(options?: ViewerItemOptions): any;
	    hasParentContainer(): boolean;
	    protected _isPaneEmpty(): boolean;
	    _isTransparentBackground(): boolean;
	    render(container?: HTMLElement): void;
	    dispose(): void;
	    updateContent(newOptions: ViewerItemOptions): void;
	    updateClientState(clientState: any): void;
	    _removeShildElement(): void;
	    updateState(state: {
	        loading: boolean;
	        operations: {
	            actions?: boolean;
	            exportTo?: boolean;
	        };
	    }): void;
	    width(width?: any): number;
	    height(height?: any): number;
	    setSize(width: any, height: any): void;
	    getConstraints(includeBorders: any): {
	        min: any;
	        max: any;
	        consolidate: (sourceConstraints: any, consolidateDirection: any) => any;
	        isFixed: (direction: any) => boolean;
	        _consolidatePart: (sourceConstraints: any, consolidateDirection: any, part: any) => {
	            width: any;
	            height: any;
	            plus: (arg: any) => any;
	            minus: (arg: any) => any;
	            compareByDirections: (size: any) => string[];
	            constrain: (constraints: any) => any;
	            clone: () => any;
	        };
	    };
	    getOffset(): {
	        width: number;
	        height: number;
	    };
	    updateInteractivityOptions(): void;
	    addContextCaptionToolbarOptions?: (options: DashboardItemCaptionToolbarOptions) => void;
	    getCaptionToolbarOptions(): DashboardItemCaptionToolbarOptions;
	    updateConstraints(): void;
	    deferredToolbarRenderingPromise: (itemName: string, width: number, height: number) => JQueryPromise<any>;
	    updateCaptionToolbar(): void;
	    private _createCaptionToolbar;
	    private _updateCaptionToolbarAndSize;
	    createCaptionToolbar: (viewerItem: baseItem, container: HTMLElement, controlContainer: HTMLElement, parentContainerElement: HTMLElement, viewOptions: ItemCaptionToolbarViewOptions) => CaptionToolbar;
	    forceCreateCaptionToolbar(): void;
	    protected _itemHasOwnContent(): boolean;
	    protected _updateClientStateUnsafe(clientState: any): void;
	    protected _changeContent(updateExisting: boolean): void;
	    protected _calcHeaderAndFooterHeight(): number;
	    private _getReducedDataTooltip;
	    private _getStaticToolbarItems;
	    private _getReduceDataToolbarItem;
	    private _getStateToolbarItems;
	    private _getActionToolbarItems;
	    private _getExportMenuModel;
	    private _getParametersTitle;
	    showExportDialog(exportFormat: any): void;
	    protected _getSpecificActionToolbarItems(): Array<ViewerToolbarItem>;
	    protected _getSpecificStatePanelItems(): Array<ViewerToolbarItem>;
	    protected _getMinContentHeight(): number;
	    private _generateInnerBorderClasses;
	    protected _generateInnerBorderClassesUnsafe(element?: HTMLElement): string[];
	    private _generateOuterBorderClasses;
	    _isBorderRequired(): boolean;
	    _resize(): void;
	    protected _resizeUnsafe(): void;
	    private _resizeBase;
	    updateContentSize(): void;
	    protected _updateContentSizeUnsafe(): void;
	    private _updateContentSizeBase;
	    private _allocatePreloader;
	    protected _getButtonOffset(useToolbarOffset: any): {
	        left: number;
	        top: number;
	    };
	    protected _getAnimationOptions(): {
	        enabled: boolean;
	        duration: number;
	    };
	    private _getContainerPosition;
	    protected _getContainerPositionUnsafe(): {
	        left: number;
	        top: number;
	        width: number;
	        height: number;
	        offsetX: number;
	        offsetY: number;
	    };
	    private _getContainerPositionBase;
	    protected _getBoundaryContainer(): HTMLElement;
	    protected _getSelectedValues(): any;
	    private _onClearSelection;
	    protected _getElementInteractionValue(element: any, viewModel: any): void;
	    protected _setSelectedValues(values: any): void;
	    protected _raiseItemClick(element: any): void;
	    protected _clickAction(tuple: any): void;
	    protected _isMultiDataSupported(): boolean;
	    protected _getDataPoint(element: any): DataPoint;
	    protected _getWidget(): any;
	    private _raiseItemWidgetCreated;
	    private _raiseItemWidgetUpdating;
	    private _raiseItemWidgetUpdated;
	    protected _raiseItemWidgetOptionsPrepared(options: Object): void;
	    protected _raiseItemHover(element: any, state?: any): void;
	    private _onClearMasterFilter;
	    private _onToggleSelectionMode;
	    private _onDrillUp;
	    private _onContentElementSelection;
	    protected _onExpandValue(expandValueParams: any): void;
	    protected _onClientStateUpdate(clientState: any): void;
	    protected _onDataRequest(): void;
	    private _hasDrillUpButton;
	    private _hasClearMasterFilterButton;
	    private _hasClearSelectionButton;
	    protected _hasToggleSelectionModeButton(): boolean;
	    private _isDrillUpEnabled;
	    private _canPerformAction;
	    protected _canPerformDrillDown(): boolean;
	    protected _canPerformDrillUp(): boolean;
	    protected _canSetMasterFilter(): boolean;
	    protected _canSetMultipleMasterFilter(): boolean;
	    protected isInteractivityActionEnabled(): boolean;
	    protected _selectionMode(): "none" | "multiple";
	    protected _getHtml(text: any): any;
	    protected _getAxisNames(): ItemDataAxisName[];
	    private _getDrillDownAxisName;
	    private _getDrillDownValues;
	}
	export let cssClassNamesBaseItem: {
	    item: string;
	    groupItem: string;
	    groupItemChild: string;
	    simpleBorder: string;
	    overlayContent: string;
	    cardWihtoutBackground: string;
	};
	export interface ViewerItemOptions {
	    Name: string;
	    Type?: string;
	    ParentContainer?: any;
	    ContentType?: ContentType;
	    SelectedValues?: any;
	    ViewModel?: any;
	    ActionModel?: any;
	    CaptionViewModel?: any;
	    ConditionalFormattingModel?: any;
	    Parameters?: any;
	    DrillDownValues?: any;
	    DrillDownUniqueValues?: any;
	    AxisNames?: any;
	    DimensionIds?: any;
	    multiData?: any;
	    encodeHtml?: any;
	    allowExport?: boolean;
	    showExportDialog?: (format: DashboardExportFormat) => void;
	    isDataReduced?: boolean;
	    useNeutralFilterMode?: boolean;
	    FullViewport?: any;
	    LimitDataState?: any;
	    controlContainer?: HTMLElement;
	    parentContainer?: any;
	    boundaryContainer?: HTMLElement;
	    ItemData?: any;
	    DataSource?: any;
	    DataSourceMembers?: any;
	    animate?: any;
	    useNativeScrolling?: any;
	    overflow?: any;
	    PivotExpandViewState?: any;
	}
	export interface DataPoint {
	    getSelectionValues?(axisName?: ItemDataAxisName): Array<any>;
	    getValues(axisName?: ItemDataAxisName): Array<any>;
	    getMeasureIds?(): Array<string>;
	    getDeltaIds?(): Array<string>;
	}

}
declare module DevExpress.Dashboard {
import dxElement = DevExpress.core.dxElement;
    import CustomPropertyValueType = DevExpress.Dashboard.Model.CustomPropertyValueType;
    import ICustomItemBindingValue = DevExpress.Dashboard.Model.ICustomItemBindingValue;
    import CustomItem = DevExpress.Dashboard.Model.CustomItem;
    import ICustomDataRow = DevExpress.Dashboard.Model.ICustomDataRow;
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
	export class CustomItemViewer extends baseItem {
	    private model;
	    constructor(model: CustomItem, container: dxElement, options: any);
	    contentWidth(): number;
	    contentHeight(): number;
	    setSize(width: number, height: number): void;
	    protected _renderContent(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
	    renderContent(element: dxElement, changeExisting: boolean, afterRenderCallback?: any): void;
	    dispose(): void;
	    clearSelection(): void;
	    setSelection(values: Array<Array<any>>): void;
	    allowExportSingleItem(): boolean;
	    getExportInfo(): CustomItemExportInfo;
	    getMasterFilterMode(): string;
	    getBindingValue(propertyName: string, index?: number): Array<ICustomItemBindingValue>;
	    getPropertyValue(propertyName: string): CustomPropertyValueType;
	    subscribe(propertyName: string, callback: (newValue: any) => void): any;
	    iterateData: (action: (item: ICustomDataRow) => void) => void;
	    isSelected(row: ICustomDataRow): boolean;
	    canMasterFilter: (row?: ICustomDataRow) => boolean;
	    canDrillDown: (row?: ICustomDataRow) => boolean;
	    setMasterFilter: (row: ICustomDataRow) => boolean;
	    drillDown: (row: ICustomDataRow) => boolean;
	    getInfo(): any;
	    initializeData(newOptions: any): void;
	    protected _initializeData(newOptions: any): void;
	    private _prepareRow;
	    private _getUniqueValues;
	    protected _isSupportDataAwareExport(): boolean;
	}
	export interface CustomItemExportInfo {
	    image: string;
	}
	export class customViewerItem extends CustomItemViewer {
	}

}
declare module DevExpress.Dashboard.Internal {
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import IDashboardContext = DevExpress.Dashboard.Internal.IDashboardContext;
    import IDashboardItemContext = DevExpress.Dashboard.Internal.IDashboardItemContext;
	export interface IStandaloneItemBindings {
	    dashboardItem: DashboardItem;
	    dashboardContext: IDashboardContext;
	    localContext: IDashboardItemContext;
	    repaintRequest: JQueryCallback;
	}

}
declare module DevExpress.Dashboard {
import dxElement = DevExpress.core.dxElement;
    import dxDataGrid =  DevExpress.ui.dxDataGrid ;
    import dxPopup =  DevExpress.ui.dxPopup ;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import DashboardItemCaptionToolbarOptions = DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import EventSubscriber = DevExpress.Dashboard.Internal.EventSubscriber;
	export type InspectedType = 'Aggregated' | 'Raw';
	export interface DataInspectorDialogArgs {
	    component: dxPopup;
	    element: dxElement;
	}
	export interface DataInspectorGridArgs {
	    component: dxDataGrid;
	    element: dxElement;
	}
	export interface DataInspectorExtensionOptions {
	    allowInspectAggregatedData?: boolean;
	    allowInspectRawData?: boolean;
	    onDialogShowing?: (args: DataInspectorDialogArgs) => void;
	    onDialogShown?: (args: DataInspectorDialogArgs) => void;
	    onDialogHidden?: (args: DataInspectorDialogArgs) => void;
	    onGridInitialized?: (args: DataInspectorGridArgs) => void;
	    onGridContentReady?: (args: DataInspectorGridArgs) => void;
	}
	export interface DataInspectorExtensionEvents {
	    dialogShowing: DataInspectorDialogArgs;
	    dialogShown: DataInspectorDialogArgs;
	    dialogHidden: DataInspectorDialogArgs;
	    gridInitialized: DataInspectorGridArgs;
	    gridContentReady: DataInspectorGridArgs;
	}
	export class DataInspectorExtension extends DisposableObject implements IExtension {
	    private _dashboardControl;
	    private readonly _viewModel;
	    private readonly _customTemplate;
	    private _optionsManager;
	    private _defaultOptions;
	    name: string;
	    on: EventSubscriber<DataInspectorExtensionEvents>;
	    off: EventSubscriber<DataInspectorExtensionEvents>;
	    constructor(dashboardControl: DashboardControl, options?: DataInspectorExtensionOptions);
	    _addContextToolbarItem: (toolbarOptions: DashboardItemCaptionToolbarOptions, dashboardItem: DashboardItem) => void;
	    start(): void;
	    stop(): void;
	    showDataInspector(dashboardItemName: string, inspectedType?: InspectedType): void;
	    currentInspectedType(): InspectedType;
	    hideDataInspector(): void;
	}

}
declare module DevExpress.Dashboard.Internal {
    import ItemDataAxisName = DevExpress.Dashboard.Data.ItemDataAxisName;
    import ItemDataMeasure = DevExpress.Dashboard.Data.ItemDataMeasure;
    import itemData = DevExpress.Dashboard.Internal.Data.itemData;
	export function getSortedAxes(itemData: itemData, skipSparklineAxis?: boolean): ItemDataAxisName[];
	export function getMeasureColumns(itemData: itemData): ItemDataMeasure[];
	export function getSortedColumns(itemData: itemData): string[];

}
declare module DevExpress.Dashboard.Internal {
    import ItemDataDimension = DevExpress.Dashboard.Data.ItemDataDimension;
    import ItemDataMeasure = DevExpress.Dashboard.Data.ItemDataMeasure;
    import itemData = DevExpress.Dashboard.Internal.Data.itemData;
    import GridDataSourceInfo = DevExpress.Dashboard.Internal.GridDataSourceInfo;
	export interface AggregatedDataSourceArgs {
	    addSparklineTotal: boolean;
	    sparklineMeasures: string[];
	}
	export function generateAggregatedSource(itemData: itemData, args: AggregatedDataSourceArgs): GridDataSourceInfo;
	export function dataInspectorItemDataDimensionComparer(x: ItemDataDimension, y: ItemDataDimension, data: itemData): boolean;
	export function dataInspectorItemDataMeasureComparer(x: ItemDataMeasure, y: ItemDataMeasure, data: itemData, addSparklineTotal: boolean, sparklineMeasures: string[]): boolean;

}
declare module DevExpress.Dashboard.Internal {
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import IUnderlyingDataProvider = DevExpress.Dashboard.Internal.Data.IUnderlyingDataProvider;
    import GridDataSourceInfo = DevExpress.Dashboard.Internal.GridDataSourceInfo;
	export function generateUnderlyingDataSource(underlyingDataProvider: IUnderlyingDataProvider, dashbordItem: DataDashboardItem): GridDataSourceInfo;

}
declare module DevExpress.Dashboard.Internal {
    import CustomStore =  DevExpress.data.CustomStore ;
    import DataGridColumn = DevExpress.ui;

    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import IUnderlyingDataProvider = DevExpress.Dashboard.Internal.Data.IUnderlyingDataProvider;
    import DataInspectorDialogArgs = DevExpress.Dashboard.DataInspectorDialogArgs;
    import DataInspectorExtensionOptions = DevExpress.Dashboard.DataInspectorExtensionOptions;
    import DataInspectorGridArgs = DevExpress.Dashboard.DataInspectorGridArgs;
    import InspectedType = DevExpress.Dashboard.InspectedType;
    import AggregatedDataSourceArgs = DevExpress.Dashboard.Internal.AggregatedDataSourceArgs;
	export interface GridDataSourceInfo {
	    columns: DataGridColumn[];
	    data: CustomStore | Array<Object>;
	    customizeColumns: (columns: Array<DataGridColumn>) => void;
	}
	export class DataInspectorViewModelOptions {
	    allowInspectAggregatedData: boolean;
	    allowInspectRawData: boolean;
	    onGridContentReady?: (e: DataInspectorGridArgs) => void;
	    onGridInitialized?: (e: DataInspectorGridArgs) => void;
	    onDialogShowing?: (args: DataInspectorDialogArgs) => void;
	    onDialogShown?: (args: DataInspectorDialogArgs) => void;
	    onDialogHidden?: (args: DataInspectorDialogArgs) => void;
	}
	export class DataInspectorViewModel {
	    options: DataInspectorViewModelOptions;
	    _dashboardItem: ko.Observable<DataDashboardItem>;
	    _rawDataSource: GridDataSourceInfo;
	    _aggregatedDataSource: GridDataSourceInfo;
	    readonly avaliableInspectedDataType: Array<{
	        value: InspectedType;
	        text: string;
	    }>;
	    allowSwitchInspectedDataType: ko.Observable<boolean>;
	    inspectedDataType: ko.Observable<InspectedType>;
	    title: ko.Computed<string>;
	    visible: ko.Observable<boolean>;
	    underlyingDataProvider: IUnderlyingDataProvider;
	    gridDataSource: ko.Observable<GridDataSourceInfo>;
	    gridOptions: ko.Computed<Object>;
	    constructor(options: DataInspectorViewModelOptions);
	    setUnderlyingDataProvider(underlyingDataProvider?: IUnderlyingDataProvider): void;
	    _bindGrid(): void;
	    _clearDataSource(): void;
	    _getInitialMode(options: DataInspectorExtensionOptions, initialMode: InspectedType, prevMode: InspectedType): InspectedType;
	    _getRawDataSource(dashbordItem: DataDashboardItem): GridDataSourceInfo;
	    _getAggregatedDataSource(dashbordItem: DataDashboardItem): GridDataSourceInfo;
	    _getAggregatedDataSourceArgs(dashboardItem: DataDashboardItem): AggregatedDataSourceArgs;
	    readonly isMobile: boolean;
	    show(dashboardItem: DataDashboardItem, initialMode?: InspectedType): void;
	}

}
declare module DevExpress.Dashboard.Internal.Model {

    import ILayoutItemViewModel = DevExpress.Dashboard.Internal.ILayoutItemViewModel;
    import DashboardLayoutGroup = DevExpress.Dashboard.Model.DashboardLayoutGroup;
    import DashboardLayoutNode = DevExpress.Dashboard.Model.DashboardLayoutNode;
    import LayoutItemInsertPosition = DevExpress.Dashboard.Model.LayoutItemInsertPosition;
	export class DashboardLayoutItemPlaceholder extends DashboardLayoutNode {
	    protected readonly _template: string;
	    constructor(parent?: DashboardLayoutGroup, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    moveTo(itemModel: DashboardLayoutNode, location: string): void;
	    _delete(): void;
	    _createViewModel(): ILayoutItemViewModel;
	    protected _insertItemCore(layoutNodeToInsert: DashboardLayoutNode, position: LayoutItemInsertPosition): void;
	    protected _getDefaultItemType(): string;
	}

}
declare module DevExpress.Dashboard.Internal.Model {

	export var _layoutItemTypeMap: {};
	export function deserializeDashboardLayoutNode(itemModel: Object, serializer?: DevExpress.Analytics.Utils.ModelSerializer): any;

}
declare module DevExpress.Dashboard.Model {


    import ILayoutItemViewModel = DevExpress.Dashboard.Internal.ILayoutItemViewModel;
    import LayoutItemInsertionBehavior = DevExpress.Dashboard.Internal.LayoutItemInsertionBehavior;
    import DashboardLayoutGroupOrientation = DevExpress.Dashboard.Model.DashboardLayoutGroupOrientation;
    import IDashboardItemsProvider = DevExpress.Dashboard.Internal.Model.IDashboardItemsProvider;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DashboardLayoutNode = DevExpress.Dashboard.Model.DashboardLayoutNode;
    import LayoutItemInsertPosition = DevExpress.Dashboard.Model.LayoutItemInsertPosition;
	export class DashboardLayoutGroup extends DashboardLayoutNode {
	    protected readonly _template: string;
	    protected readonly _createPlaceholderFunc: () => ILayoutItemViewModel;
	    protected readonly _visibleItems: ko.ObservableArray<DashboardLayoutNode>;
	    protected readonly _childItems: ko.ObservableArray<DashboardLayoutNode>;
	    protected readonly _orientation: ko.Observable<DashboardLayoutGroupOrientation>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    orientation: ko.Observable<DashboardLayoutGroupOrientation>;
	    childNodes: ko.ObservableArray<DashboardLayoutNode>;
	    findLayoutItem(dashboardItem: DashboardItem): DashboardLayoutNode;
	    getNodesRecursive(): Array<DashboardLayoutNode>;
	    getItemsRecursive(): Array<DashboardLayoutNode>;
	    private _attachToGroupWithInversedOrientation;
	    _attachChild(target: DashboardLayoutNode, itemToAttach: DashboardLayoutNode, position: LayoutItemInsertPosition): void;
	    _detachChild(removedChildLayoutNode: DashboardLayoutNode): void;
	    private _ensureGroupIsNeeded;
	    private _wrapChildWithGroup;
	    private _getOrientationByInsertPosition;
	    _insertItemCore(layoutNodeToInsert: DashboardLayoutNode, position: LayoutItemInsertPosition, insertionBehavior?: LayoutItemInsertionBehavior): void;
	    _addItem(layoutNodeToInsert: DashboardLayoutNode): void;
	    protected _getDefaultItemType(): string;
	    _deleteDashbordItem(): void;
	}
	export class DashboardLayoutRootGroup extends DashboardLayoutGroup {
	    constructor(dashboard: IDashboardItemsProvider, modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getDefaultItemType(): string;
	    _addItem(layoutNodeToInsert: DashboardLayoutNode): void;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import DashboardItemCaptionToolbarOptions = DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
    import CaptionToolbar = DevExpress.Dashboard.Internal.Viewer.CaptionToolbar;
    import StaticCaptionToolbar = DevExpress.Dashboard.Internal.Viewer.StaticCaptionToolbar;
	export class MobileLayoutCaptionToolbar implements CaptionToolbar {
	    private _container;
	    private _controlContainer;
	    private _popupContainer;
	    private _encodeHtml;
	    private _className;
	    private _hasBorder;
	    _actionToolbar: StaticCaptionToolbar;
	    _contentToolbar: StaticCaptionToolbar;
	    _toolbars: Array<StaticCaptionToolbar>;
	    protected _disabled: boolean;
	    constructor(_container: HTMLElement, _controlContainer: HTMLElement, _popupContainer: HTMLElement, _encodeHtml: boolean, _className: string, _hasBorder?: boolean);
	    readonly element: any;
	    readonly disabled: boolean;
	    calcHeight(options: DashboardItemCaptionToolbarOptions): number;
	    calcMinWidth(options: DashboardItemCaptionToolbarOptions): number;
	    update(options: DashboardItemCaptionToolbarOptions): boolean;
	    onResize(): void;
	    dispose(): void;
	    protected _createInstance(): CaptionToolbar;
	    private _prepareContentToolbarOptions;
	    private _prepareActionToolbarOptions;
	    private _hasItems;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let cardDefinitionMode: IDashboardSerializationInfo;
	export let cardWindowDefinitionSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import CardWindowDefinitionMode = DevExpress.Dashboard.Model.CardWindowDefinitionMode;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
	export class CardWindowDefinition extends MeasureCalculationWindowDefinition {
	    definitionMode: ko.Observable<CardWindowDefinitionMode>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    equals(def: any): boolean;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let hAlignment: IDashboardSerializationInfo;
	export let cardRowElementSerializationsInfo: IDashboardSerializationInfoArray;
	export let cardRowElementColor: IDashboardSerializationInfo;
	export let cardRowFontFamily: IDashboardSerializationInfo;
	export let cardRowFontSize: IDashboardSerializationInfo;
	export let predefinedForeColor: IDashboardSerializationInfo;
	export let cardRowTextElementBaseSerializationInfo: IDashboardSerializationInfoArray;
	export let cardRowDataElementValueType: IDashboardSerializationInfo;
	export let cardRowDataElementDimensionIndex: IDashboardSerializationInfo;
	export let cardRowDataElementSerializationInfo: IDashboardSerializationInfoArray;
	export let text: IDashboardSerializationInfo;
	export let cardRowTextElementSerializationInfo: IDashboardSerializationInfoArray;
	export let size: IDashboardSerializationInfo;
	export let cardRowIndicatorElementSerializationInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import TypedSerializableModel = DevExpress.Dashboard.Model.TypedSerializableModel;
	export abstract class CardRowElement extends TypedSerializableModel {
	    hAlignment: ko.Observable<string>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}
	export abstract class CardRowTextElementBase extends CardRowElement {
	    color: ko.Observable<number>;
	    predefinedForeColor: ko.Observable<string>;
	    fontFamily: ko.Observable<string>;
	    fontSize: ko.Observable<number>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}
	export class CardRowDataElement extends CardRowTextElementBase {
	    valueType: ko.Observable<string>;
	    dimensionIndex: ko.Observable<number>;
	    title: ko.Computed<string>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    protected _getDefaultItemType(): string;
	}
	export class CardRowTextElement extends CardRowTextElementBase {
	    text: ko.Observable<string>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    protected _getDefaultItemType(): string;
	}
	export class CardRowIndicatorElement extends CardRowElement {
	    size: ko.Observable<number>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    protected _getDefaultItemType(): string;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let vAlignment: IDashboardSerializationInfo;
	export let indent: IDashboardSerializationInfo;
	export let cardRowBaseSerializationInfo: IDashboardSerializationInfoArray;
	export let elements: IDashboardSerializationInfo;
	export let cardRowSerializationInfo: IDashboardSerializationInfoArray;
	export let height: IDashboardSerializationInfo;
	export let cardSparklineRowOptions: IDashboardSerializationInfo;
	export let cardSparklineRowSerializationInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import TypedSerializableModel = DevExpress.Dashboard.Model.TypedSerializableModel;
    import SparklineOptions = DevExpress.Dashboard.Model.SparklineOptions;
    import CardRowDataElement = DevExpress.Dashboard.Model.CardRowDataElement;
    import CardRowElement = DevExpress.Dashboard.Model.CardRowElement;
    import CardRowIndicatorElement = DevExpress.Dashboard.Model.CardRowIndicatorElement;
    import CardRowTextElement = DevExpress.Dashboard.Model.CardRowTextElement;
	export abstract class CardRowBase extends TypedSerializableModel {
	    vAlignment: ko.Observable<string>;
	    indent: ko.Observable<number>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}
	export class CardRow extends CardRowBase {
	    static elementItemTypes: {
	        'CardRowDataElement': {
	            constructor: typeof CardRowDataElement;
	        };
	        'CardRowIndicatorElement': {
	            constructor: typeof CardRowIndicatorElement;
	        };
	        'CardRowTextElement': {
	            constructor: typeof CardRowTextElement;
	        };
	    };
	    elements: ko.ObservableArray<CardRowElement>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    createRowElement(elementJSON: any, serializer: DevExpress.Analytics.Utils.ModelSerializer): CardRowDataElement;
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    protected _getDefaultItemType(): string;
	}
	export class CardSparklineRow extends CardRowBase {
	    height: ko.Observable<number>;
	    sparklineOptions: SparklineOptions;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    protected _getDefaultItemType(): string;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let templateId: IDashboardSerializationInfo;
	export let minWidth: IDashboardSerializationInfo;
	export let maxWidth: IDashboardSerializationInfo;
	export let cardRows: IDashboardSerializationInfo;
	export let cardLayoutSerializationInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    import CardRow = DevExpress.Dashboard.Model.CardRow;
    import CardRowBase = DevExpress.Dashboard.Model.CardRowBase;
    import CardSparklineRow = DevExpress.Dashboard.Model.CardSparklineRow;
	export class CardLayout extends SerializableModel {
	    static rowTypes: {
	        'CardRow': {
	            constructor: typeof CardRow;
	        };
	        'CardSparklineRow': {
	            constructor: typeof CardSparklineRow;
	        };
	    };
	    templateID: ko.Observable<number>;
	    minWidth: ko.Observable<number>;
	    maxWidth: ko.Observable<number>;
	    rows: ko.ObservableArray<CardRowBase>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    createRow(elementJSON: any, serializer: DevExpress.Analytics.Utils.ModelSerializer): CardRowBase;
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    grabFrom(newLayout: CardLayout): void;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import DashboardLocalizationId = DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    import CardFormatRuleLayoutElement = DevExpress.Dashboard.Model.CardFormatRuleLayoutElement;
    import CardRowDataElementType = DevExpress.Dashboard.Model.CardRowDataElementType;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let cardRowElementTypeValuesMapBase: {
	    [key in CardRowDataElementType & CardFormatRuleLayoutElement]: DashboardLocalizationId;
	};
	export let сardRowDataElementTypeValuesMap: {
	    [key in CardRowDataElementType]: DashboardLocalizationId;
	};
	export let сardFormatRuleLayoutElementValuesMap: {
	    [key in CardFormatRuleLayoutElement]: DashboardLocalizationId;
	};
	export let сardRowDataElementTypeValuesMapEx: {
	    [key in CardRowDataElementType | 'DeltaIndicator' | 'Sparkline']: DashboardLocalizationId;
	};
	export let cardLayoutVisible: IDashboardSerializationInfo;
	export let dimensionIndex: IDashboardSerializationInfo;
	export let cardLayoutValueType: IDashboardSerializationInfo;
	export let cardLayoutTemplateElementBaseSerializationInfo: IDashboardSerializationInfoArray;
	export let cardLayoutTemplateDataElementSerializationInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import CardRowDataElementType = DevExpress.Dashboard.Model.CardRowDataElementType;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
	export abstract class CardLayoutTemplateElementBase extends SerializableModel {
	    visible: ko.Observable<boolean>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    abstract _getTitle(dimensionNames?: string[]): ko.Computed<string>;
	    _createEditorModel(dimensionNames?: string[]): {
	        title: ko.Computed<string>;
	        checked: ko.Observable<boolean>;
	    };
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    _initDefault(visible?: boolean, valueType?: CardRowDataElementType, dimenstionIndex?: number): void;
	}
	export class CardLayoutTemplateDeltaElement extends CardLayoutTemplateElementBase {
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    _getTitle(): ko.Computed<string>;
	}
	export class CardLayoutTemplateSparklineElement extends CardLayoutTemplateElementBase {
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    _getTitle(): ko.Computed<string>;
	}
	export class CardLayoutTemplateDataElement extends CardLayoutTemplateElementBase {
	    valueType: ko.Observable<CardRowDataElementType>;
	    dimensionIndex: ko.Observable<number>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    _getTitle(dimensionNames: string[]): ko.Computed<any>;
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    _initDefault(visible: boolean, valueType: CardRowDataElementType, dimenstionIndex?: number): void;
	    _getEditorProperty(valueType: CardRowDataElementType, dimensionIndex?: number, dimensionNames?: string[]): {
	        value: CardRowDataElementType;
	        displayText: any;
	        dimensionIndex: number;
	        key: string;
	    };
	    _createEditorModel(dimensionNames: string[]): {
	        lookupDataSource: {
	            value: CardRowDataElementType;
	            displayText: any;
	            dimensionIndex: number;
	            key: string;
	        }[];
	        selectedItem: ko.PureComputed<any>;
	        title: ko.Computed<string>;
	        checked: ko.Observable<boolean>;
	    };
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let type: IDashboardSerializationInfo;
	export let templateSerializationInfo: IDashboardSerializationInfoArray;
	export let cardLayout: IDashboardSerializationInfo;
	export let customTemplateSerializationInfo: IDashboardSerializationInfoArray;
	export let mainValue: IDashboardSerializationInfo;
	export let subValue: IDashboardSerializationInfo;
	export let deltaIndicator: IDashboardSerializationInfo;
	export let cardLayoutSparkline: IDashboardSerializationInfo;
	export let bottomValue: IDashboardSerializationInfo;
	export let bottomSubValue1: IDashboardSerializationInfo;
	export let bottomSubValue2: IDashboardSerializationInfo;
	export let deltaCompactTemplateSerializationInfo: IDashboardSerializationInfoArray;
	export let topValue: IDashboardSerializationInfo;
	export let bottomValue1: IDashboardSerializationInfo;
	export let bottomValue2: IDashboardSerializationInfo;
	export let autofitTemplateSerializationInfo: IDashboardSerializationInfoArray;
	export let nameValueTemplateSerializationInfo: IDashboardSerializationInfoArray;
	export let ultraCompactTemplateSerializationInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    import CardLayout = DevExpress.Dashboard.Model.CardLayout;
    import CardLayoutTemplateDataElement = DevExpress.Dashboard.Model.CardLayoutTemplateDataElement;
    import CardLayoutTemplateDeltaElement = DevExpress.Dashboard.Model.CardLayoutTemplateDeltaElement;
    import CardLayoutTemplateSparklineElement = DevExpress.Dashboard.Model.CardLayoutTemplateSparklineElement;
	export type CardLayoutTemplateType = 'Stretched' | 'Centered' | 'Lightweight' | 'Compact' | 'Custom' | 'None';
	export abstract class CardLayoutTemplate extends SerializableModel {
	    title: string;
	    minWidth: ko.Observable<number>;
	    maxWidth: ko.Observable<number>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    abstract _collectProperties(dimensionNames: string[]): Array<any>;
	    abstract getType(): string;
	    abstract _createInstance(): CardLayoutTemplate;
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    _resetToDefaults(): void;
	    clone(): CardLayoutTemplate;
	    private _clone;
	}
	export class CardEmptyLayoutTemplate extends CardLayoutTemplate {
	    isEmpty: ko.Observable<boolean>;
	    readonly title: string;
	    _collectProperties(dimensionNames: string[]): any[];
	    getType(): CardLayoutTemplateType;
	    getInfo(): any[];
	    _createInstance(): CardLayoutTemplate;
	}
	export class CardCustomLayoutTemplate extends CardLayoutTemplate {
	    layout: CardLayout;
	    type: ko.Observable<string>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    _collectProperties(dimensionNames: string[]): Array<any>;
	    _resetToDefaults(): void;
	    getType(): string;
	    _createInstance(): CardLayoutTemplate;
	}
	export class CardCenteredLayoutTemplate extends CardLayoutTemplate {
	    mainValue: CardLayoutTemplateDataElement;
	    subValue: CardLayoutTemplateDataElement;
	    bottomValue: CardLayoutTemplateDataElement;
	    bottomSubValue1: CardLayoutTemplateDataElement;
	    bottomSubValue2: CardLayoutTemplateDataElement;
	    deltaIndicator: CardLayoutTemplateDeltaElement;
	    sparkline: CardLayoutTemplateSparklineElement;
	    type: ko.Observable<string>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    _collectProperties(dimensionNames: string[]): Array<any>;
	    _resetToDefaults(): void;
	    getType(): string;
	    _createInstance(): CardLayoutTemplate;
	}
	export class CardStretchedLayoutTemplate extends CardLayoutTemplate {
	    topValue: CardLayoutTemplateDataElement;
	    mainValue: CardLayoutTemplateDataElement;
	    subValue: CardLayoutTemplateDataElement;
	    bottomValue1: CardLayoutTemplateDataElement;
	    bottomValue2: CardLayoutTemplateDataElement;
	    deltaIndicator: CardLayoutTemplateDeltaElement;
	    sparkline: CardLayoutTemplateSparklineElement;
	    type: ko.Observable<string>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    _collectProperties(dimensionNames: string[]): Array<any>;
	    _resetToDefaults(): void;
	    getType(): string;
	    _createInstance(): CardLayoutTemplate;
	}
	export class CardLightweightLayoutTemplate extends CardLayoutTemplate {
	    mainValue: CardLayoutTemplateDataElement;
	    subValue: CardLayoutTemplateDataElement;
	    bottomValue: CardLayoutTemplateDataElement;
	    deltaIndicator: CardLayoutTemplateDeltaElement;
	    sparkline: CardLayoutTemplateSparklineElement;
	    type: ko.Observable<string>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    _collectProperties(dimensionNames: string[]): Array<any>;
	    _resetToDefaults(): void;
	    getType(): string;
	    _createInstance(): CardLayoutTemplate;
	}
	export class CardCompactLayoutTemplate extends CardLayoutTemplate {
	    mainValue: CardLayoutTemplateDataElement;
	    subValue: CardLayoutTemplateDataElement;
	    bottomValue: CardLayoutTemplateDataElement;
	    bottomSubValue1: CardLayoutTemplateDataElement;
	    bottomSubValue2: CardLayoutTemplateDataElement;
	    deltaIndicator: CardLayoutTemplateDeltaElement;
	    sparkline: CardLayoutTemplateSparklineElement;
	    type: ko.Observable<string>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    _collectProperties(dimensionNames: string[]): Array<any>;
	    _resetToDefaults(): void;
	    getType(): string;
	    _createInstance(): CardLayoutTemplate;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let cardDeltaOptions: IDashboardSerializationInfo;
	export let cardSparklineOptions: IDashboardSerializationInfo;
	export let showSparkline: IDashboardSerializationInfo;
	export let layoutTemplate: IDashboardSerializationInfo;
	export let cardSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import KpiElement = DevExpress.Dashboard.Model.KpiElement;
    import CardDeltaOptions = DevExpress.Dashboard.Model.CardDeltaOptions;
    import SparklineOptions = DevExpress.Dashboard.Model.SparklineOptions;
    import CardLayoutTemplate = DevExpress.Dashboard.Model.CardLayoutTemplate;
	export class Card extends KpiElement {
	    private static templateTypes;
	    private static _createTemplate;
	    type: ko.Observable<string>;
	    cardDeltaOptions: CardDeltaOptions;
	    sparklineOptions: SparklineOptions;
	    showSparkline: ko.Observable<boolean>;
	    layoutTemplate: ko.Observable<CardLayoutTemplate>;
	    constructor(dataItemProvider: DataDashboardItem, modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getInfoCore(): IDashboardSerializationInfoArray;
	    _isTypeEmpty(): boolean;
	    _setTemplateSwitchingOptions(newTemplate: any): void;
	    private _switchToCardDeltaOptions;
	    private _switchToKpiDeltaOptions;
	    protected _getDefaultItemType(): string;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let cards: IDashboardSerializationInfo;
	export let cardSparklineArgument: IDashboardSerializationInfo;
	export let cardDashboardItemSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import KpiItem = DevExpress.Dashboard.Model.KpiItem;
    import Card = DevExpress.Dashboard.Model.Card;
	export class CardItem extends KpiItem {
	    private __sparklineArgument;
	    sparklineArgument: ko.Observable<Dimension>;
	    cards: ko.ObservableArray<Card>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getInfoCore(): IDashboardSerializationInfo[];
	    _clearBindings(): void;
	    protected _getDefaultItemType(): string;
	    protected _getLayersCount(): number;
	    protected _getLayerName(): string;
	    _getDefaultCalculationWindowDefinition(): MeasureCalculationWindowDefinition;
	    _itemInteractivityByColumnAxis(): boolean;
	    _getInteractivityAxisDimensionCount(): number;
	    _conditionFormattingExpressionEditorFilter(dataItem: DataItem): boolean;
	}

}
declare module DevExpress.Dashboard.Internal {

    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    import FullscreenItemModel = DevExpress.Dashboard.Internal.FullscreenItemModel;
    import DashboardItemContext = DevExpress.Dashboard.Internal.DashboardItemContext;
    import IDashboardContext = DevExpress.Dashboard.Internal.IDashboardContext;
	export class MobileLayoutItemViewModel {
	    dashboardContext: IDashboardContext;
	    repaintRequest: JQueryCallback;
	    dashboardItem: DashboardItem;
	    private _fullscreenItemModel;
	    _cachedItemWidth: number;
	    _swipeToActionCoef: number;
	    itemOffsetInPixels: ko.Observable<number>;
	    actionReadyCoef: ko.Computed<number>;
	    isReadyForAction: ko.Computed<boolean>;
	    maximizeIconOpacity: ko.Computed<number>;
	    readonly canMaximizeItem: boolean;
	    _reset(): void;
	    constructor(dashboardContext: IDashboardContext, repaintRequest: JQueryCallback, dashboardItem: DashboardItem, _fullscreenItemModel: FullscreenItemModel);
	    _performShowFullscreenItem(): void;
	    click: (data: any, args: any) => void;
	    selectItem: (data: any, args: any) => void;
	    unselectItem: (data: any, args: any) => void;
	    swipestart: (data: any, args: any) => void;
	    swipeupdate: (data: any, args: any) => void;
	    swipeend: (data: any, args: any) => void;
	    localContext: DashboardItemContext;
	    _getStandaloneItemElement(element: HTMLElement): HTMLElement;
	}
	export function setCardAutoArrangementMode(item: DashboardItem, options: any): void;
	export function customizeMobileViewerItems(viewerItem: baseItem): void;

}
declare module DevExpress.Dashboard.Internal {

    import IMasterFilterItemsProvider = DevExpress.Dashboard.Internal.Model.IMasterFilterItemsProvider;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import ViewerToolbarItem = DevExpress.Dashboard.ViewerToolbarItem;
    import IDashboardContext = DevExpress.Dashboard.Internal.IDashboardContext;
    import IStandaloneItemBindings = DevExpress.Dashboard.Internal.IStandaloneItemBindings;
	export class MasterFiltersEditorModel {
	    addFilterButton(toolbarItems: Array<ViewerToolbarItem>, filterableItem: IMasterFilterItemsProvider): any;
	    _target: ko.Observable<IMasterFilterItemsProvider>;
	    _visible: ko.Observable<boolean>;
	    visible: ko.Computed<boolean>;
	    masterItems: ko.Computed<any>;
	    show(target: IMasterFilterItemsProvider): void;
	    hide(): void;
	}
	export interface IDisplayFilterValue {
	    name: string;
	    valuesString: string;
	}
	export class ItemMasterFilterInfo {
	    private dashboardItem;
	    click: () => void;
	    static maxFilterValuesCount: 10;
	    constructor(dashboardItem: DataDashboardItem, click: () => void);
	    name: ko.Computed<string>;
	    filterValues: ko.Computed<Array<IDisplayFilterValue>>;
	} class ItemMasterFilterPopupViewModel {
	    constructor(heightOffset: number, visible: ko.Subscribable<boolean>, repaintRequest: JQueryCallback);
	    visible: ko.Subscribable<boolean>;
	    width: () => number;
	    height: () => number;
	    onInitializing: (e: any) => void;
	    onDisposing: (e: any) => void;
	}
	export class ItemMasterFiltersViewModel {
	    private model;
	    constructor(model: MasterFiltersEditorModel, dashboardContext: IDashboardContext, repaintRequest: JQueryCallback);
	    masterItems: ko.Computed<Array<ItemMasterFilterInfo>>;
	    masterFilterItem: ko.Observable<IStandaloneItemBindings>;
	    showMasterFilterItem: (dashboardItem: DataDashboardItem, dashboardContext: IDashboardContext, repaintRequest: JQueryCallback) => void;
	    closeMasterFilterItemPopup: () => void;
	    closeMasterFiltersPopup: () => void;
	    maximizeFiltersPopup: ko.Observable<boolean>;
	    masterFiltersPopup: ItemMasterFilterPopupViewModel;
	    masterFilterMaximizedItemPopup: ItemMasterFilterPopupViewModel;
	}
	export {};

}
declare module DevExpress.Dashboard.Internal {
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
    import ViewerItemFactory = DevExpress.Dashboard.Internal.Viewer.ViewerItemFactory;
    import FullscreenItemModel = DevExpress.Dashboard.Internal.FullscreenItemModel;
    import MasterFiltersEditorModel = DevExpress.Dashboard.Internal.MasterFiltersEditorModel;
	export class MobileItemViewerFactory extends ViewerItemFactory {
	    createItem(container: HTMLElement, options: any): baseItem;
	}
	export class PopupResizeController {
	    private _repaintRequest;
	    private _resizeHandler;
	    constructor(_repaintRequest: JQueryCallback);
	    onInitialized: (e: any) => void;
	    onDisposing: (e: any) => void;
	}
	export var createFullscreenItemViewModel: (fullscreenItemModel: FullscreenItemModel, masterFilters: MasterFiltersEditorModel, repaintRequest: JQueryCallback) => Object;

}
declare module DevExpress.Dashboard.Internal {
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import IExtension = DevExpress.Dashboard.IExtension;
    import IDashboardLayout = DevExpress.Dashboard.Internal.IDashboardLayout;
    import VisibleItemsProvider = DevExpress.Dashboard.Internal.VisibleItemsProvider;
    import DashboardTitleContext = DevExpress.Dashboard.Internal.DashboardTitleContext;
    import FullscreenItemModel = DevExpress.Dashboard.Internal.FullscreenItemModel;
    import IDashboardContext = DevExpress.Dashboard.Internal.IDashboardContext;
    import MasterFiltersEditorModel = DevExpress.Dashboard.Internal.MasterFiltersEditorModel;
	export class DashboardMobileLayout implements IDashboardLayout {
	    dashboard: Dashboard;
	    dashboardContext: IDashboardContext;
	    private _encodeHtml;
	    fullscreenItemModel: FullscreenItemModel;
	    masterFiltersEditorModel: MasterFiltersEditorModel;
	    dashboardTitleContext: DashboardTitleContext;
	    readonly fullscreenItemProvider: FullscreenItemModel;
	    visibleItemsProvider: VisibleItemsProvider;
	    constructor(dashboard: Dashboard, dashboardContext: IDashboardContext, findExtension: (name: string) => IExtension, _encodeHtml?: boolean);
	    private _getDashboardItemsInLayoutOrder;
	    private _getGroupName;
	    private _getGroupComponentName;
	    private _getParentTabContainer;
	    items: Array<DashboardMobileLayoutItem>;
	}
	export class DashboardMobileLayoutItem {
	    dashboardItems: Array<DashboardItem>;
	    groupName: string;
	    constructor(dashboardItems: Array<DashboardItem>, groupName: string);
	}
	export interface FlatMobileLayoutItem {
	    groupName: string;
	    groupComponentName: string;
	    itemComponentName: string;
	}
	export interface GroupedMobileLayoutItem {
	    groupName: string;
	    groupComponentName: string;
	    itemComponentNames: Array<string>;
	}
	export function groupLayoutItems(flatItems: Array<FlatMobileLayoutItem>): Array<GroupedMobileLayoutItem>;
	export let ungroupedItemKey: string;
	export let groupWithoutCaptionItemKey: string;
	export let dashboardTitleKey: string;

}
declare module DevExpress.Dashboard {























}
declare module DevExpress.Dashboard {

    import DisposableType = DevExpress.Dashboard.Model.DisposableType;
    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
	export class MobileLayoutExtension implements IExtension {
	    private dashboardControl;
	    name: string;
	    _disposables: DisposableType[];
	    mobileLayoutEnabled: ko.Computed<boolean>;
	    private _options;
	    readonly _mobileLayoutTemplateName: string;
	    constructor(dashboardControl: DashboardControl, options?: MobileLayoutExtensionOptions);
	    _expectedMobileLayoutMode(): boolean;
	    _canMobileLayoutBeEnabled: ko.Computed<boolean>;
	    start(): void;
	    _dashboardList: any[];
	    stop(): void;
	}
	export type MobileLayoutMode = 'Always' | 'Auto' | 'Never';
	export interface MobileLayoutExtensionOptions {
	    mobileLayoutEnabled?: MobileLayoutMode;
	}

}
declare module DevExpress.Dashboard {

    import DashboardInfo = DevExpress.Dashboard.DashboardInfo;
    import IExtension = DevExpress.Dashboard.IExtension;
    import SequenceAction = DevExpress.Dashboard.SequenceAction;
    import WorkingModeSwitchingOptions = DevExpress.Dashboard.WorkingModeSwitchingOptions;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
	export class DashboardPanelExtension implements IExtension {
	    private dashboardControl;
	    private options;
	    name: string;
	    private _customTemplate;
	    private _iconBack;
	    private _flexParent;
	    private _dashboardsButton;
	    private _dashboardTruncated;
	    private _ellipsisText;
	    private _itemTemplate;
	    private _isMobile;
	    private _disposables;
	    panelWidth: number;
	    visible: ko.Observable<boolean>;
	    allowSwitchToDesigner: ko.Observable<boolean>;
	    designerToViewerAction: SequenceAction;
	    viewerToDesignerAction: SequenceAction;
	    selectedItemKeys: ko.ObservableArray<string>;
	    availableDashboards: ko.ObservableArray<DashboardInfo>;
	    private _actualPanelWidth;
	    private readonly _templateName;
	    constructor(dashboardControl: DashboardControl, options?: DashboardPanelExtensionOptions);
	    start(): void;
	    stop(): void;
	    updateDashboardsList(): void;
	    private _validateSelection;
	    private _hidePanel;
	    showPanelAsync: (options: WorkingModeSwitchingOptions) => JQueryPromise<{}>;
	    hidePanelAsync: (options: WorkingModeSwitchingOptions) => JQueryPromise<{}>;
	    switchToViewer: () => void;
	    switchToDesigner: () => void;
	    private _getCustomTemplate;
	}
	export interface DashboardPanelExtensionOptions {
	    dashboardThumbnail?: string;
	}

}
declare module DevExpress.Dashboard {
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
	export interface UrlStateExtensionOptions {
	    includeDashboardIdToUrl?: boolean;
	    includeDashboardStateToUrl?: boolean;
	}
	export class UrlStateExtension extends DisposableObject implements IExtension {
	    private _dashboardControl;
	    private _dashboardContaierSubscriptions;
	    private _options;
	    private _defaultOptions;
	    name: string;
	    constructor(dashboardControl: DashboardControl, options?: UrlStateExtensionOptions);
	    start(): void;
	    stop(): void;
	    private _processDashboardChanged;
	    private _updateDashboardState;
	    private _updateUrl;
	    private _replaceValue;
	    protected _getUrl(): string;
	    protected _setUrl(url: string): void;
	}

}
declare module DevExpress.Dashboard {

















}
declare module DevExpress.Dashboard {































































}
declare module DevExpress.Dashboard.Internal.Designer {
	export {};

}
declare module DevExpress.Dashboard.Internal.Designer {
    import StyleSettingsBase = DevExpress.Dashboard.Model.StyleSettingsBase;
	export var Palette: {
	    standard: string[];
	    bar: string[];
	    gradient: string[];
	    getLabelText: (type: string, empty: string) => string;
	};
	export class StyleSettingsContainer {
	    isRange: boolean;
	    isGradient: boolean;
	    isEmptyAllowed: boolean;
	    constructor(isRange: boolean, isGradient: boolean, isEmptyAllowed: boolean);
	    isEmpty(type: string): boolean;
	    isLabel(type: string): boolean;
	    isTransparent(type: string): boolean;
	    isIconSettings(style: StyleSettingsBase): boolean;
	    getAppearanceOrBarStyleType(style: StyleSettingsBase): string;
	    getAppearanceOrBarStyleCSS(style: StyleSettingsBase): string;
	    getAppearanceStyleCSS(appearanceType: string): string;
	    getIconClass(iconType: string): string;
	    getLabelText(type: string): string;
	    getAppearanceTypeLocalization(appearanceTypeId: string): string;
	    getIconTypeLocalization(iconTypeId: string): string;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {

    import StyleSettingsBase = DevExpress.Dashboard.Model.StyleSettingsBase;
    import StyleSettingsContainer = DevExpress.Dashboard.Internal.Designer.StyleSettingsContainer;
	export type StyleMode = 'Appearance' | 'Icon' | 'Bar';
	export interface StyleSettingsEditorOptions {
	    isRange?: boolean;
	    isGradient?: boolean;
	    isEmptyAllowed?: boolean;
	    selectedChanged?: (oldStyle: string, newStyle: string) => any;
	    closeEditCell?: () => void;
	}
	export class StyleSettingsEditor extends StyleSettingsContainer {
	    value: ko.Observable<StyleSettingsBase>;
	    selectedChanged: (oldStyle: string, newStyle: string) => any;
	    list: Array<string>;
	    iconList: Array<string>;
	    closeEditCell: () => void;
	    selected: ko.Computed<string>;
	    mode: ko.Observable<StyleMode>;
	    constructor(target: ko.Observable<StyleSettingsBase>, params: StyleSettingsEditorOptions);
	    getIconClass(iconType: string): string;
	    setStyleType(type: string): void;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {

	export interface ExpressionEditorViewModel<TEditor = DevExpress.Analytics.Widgets.ExpressionEditor | DevExpress.Analytics.Widgets.FilterEditor> {
	    editor: TEditor;
	    criteriaString: ko.Observable<string> | ko.Computed<string>;
	}
	export interface ExpressionEditorParamsBase<TOptions = DevExpress.Analytics.Widgets.IFilterEditorOptions | DevExpress.Analytics.Widgets.IExpressionOptions> {
	    options: ko.Observable<TOptions> | ko.Computed<TOptions>;
	    fieldListProvider: ko.Observable<DevExpress.Analytics.Utils.IItemsProvider>;
	}
	export interface ExpressionEditorParams extends ExpressionEditorParamsBase<DevExpress.Analytics.Widgets.IExpressionOptions> {
	}
	export interface FilterEditorParams extends ExpressionEditorParamsBase<DevExpress.Analytics.Widgets.IFilterEditorOptions> {
	    displayNameProvider: DevExpress.Analytics.Utils.IDisplayNameProvider;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
	export var getAceTheme: () => "ace/theme/dreamweaver" | "ace/theme/ambiance";

}
declare module DevExpress.Dashboard.Internal.Designer {

	export class ExpressionEditorFunctions {
	    static customFunctions: Array<DevExpress.Analytics.Widgets.Internal.IExpressionEditorFunction>;
	}
	export function getExpressionEditorFunctions(): Array<DevExpress.Analytics.Widgets.Internal.IExpressionEditorFunction>;

}
declare module DevExpress.Dashboard.Internal.Designer {

	export class FlatItemProviderWrapper implements DevExpress.Analytics.Utils.IItemsProvider {
	    private itemsProvider;
	    constructor(itemsProvider: DevExpress.Analytics.Utils.IItemsProvider);
	    getItems(path: DevExpress.Analytics.Utils.IPathRequest): JQueryPromise<DevExpress.Analytics.Utils.IDataMemberInfo[]>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {


	export class DashboardExpressionEditor extends DevExpress.Analytics.Widgets.ExpressionEditor {
	    constructor(options: DevExpress.Analytics.Widgets.IExpressionOptions, fieldListProvider: ko.Observable<DevExpress.Analytics.Utils.IItemsProvider>, disabled?: ko.Observable<boolean>);
	    focus(): void;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {


    import ExpressionEditorParams = DevExpress.Dashboard.Internal.Designer.ExpressionEditorParams;
    import ExpressionEditorViewModel = DevExpress.Dashboard.Internal.Designer.ExpressionEditorViewModel;
	export class CalculationExpressionEditor implements ExpressionEditorViewModel<DevExpress.Analytics.Widgets.ExpressionEditor> {
	    editor: DevExpress.Analytics.Widgets.ExpressionEditor;
	    criteriaString: ko.Computed<string>;
	    constructor(params: ExpressionEditorParams);
	    show(): void;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {

	export interface ISlidableListsNavigable {
	    backClick: (item: string, pathParts: string[]) => void;
	    hasSearchResults?: ko.Observable<boolean>;
	    isListMode?: ko.Observable<boolean>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {

    import Color = DevExpress.Dashboard.Model.Color;
    import FormatConditionRangeGradientPredefinedType = DevExpress.Dashboard.Model.FormatConditionRangeGradientPredefinedType;
    import FormatConditionRangeSetPredefinedType = DevExpress.Dashboard.Model.FormatConditionRangeSetPredefinedType;
    import ISlidableListsNavigable = DevExpress.Dashboard.Internal.Designer.ISlidableListsNavigable;
	export type RangeStyleType = 'None' | 'Color' | 'Icon' | 'Gradient' | 'ColorBar' | 'GradientBar';
	export type ConditionTypePropertyName = 'conditionValue' | 'conditionTopBottom' | 'conditionAverage' | 'conditionDateOccuring' | 'conditionExpression' | 'conditionRangeSet' | 'conditionRangeGradient' | 'conditionBar' | 'conditionColorRangeBar' | 'conditionGradientRangeBar';
	export interface FormatConditionTypeEditorOptions {
	    dataType: ko.Observable<string>;
	    conditionType: ko.Observable<string>;
	    specificType: ko.Observable<string | FormatConditionRangeGradientPredefinedType | FormatConditionRangeSetPredefinedType>;
	    conditionTypeFilter?: (conditionTypePropertyName: ConditionTypePropertyName) => boolean;
	}
	export class FormatConditionTypeEditorSurface implements ISlidableListsNavigable {
	    displayMode: ko.Observable<"conditionTypes" | "specificTypes">;
	    availableConditionTypes: ko.Computed<Array<{
	        value: string;
	        displayText: string;
	        hasSpecificTypes: boolean;
	    }>>;
	    availableSpecificTypes: ko.Computed<Array<any>>;
	    selectedSpecificTypes: ko.Computed<Array<any>>;
	    ancestors: ko.Observable<any[]>;
	    dataType: ko.Observable<string>;
	    conditionType: ko.Observable<string>;
	    specificType: ko.Observable<string | FormatConditionRangeGradientPredefinedType | FormatConditionRangeSetPredefinedType>;
	    backClick: () => void;
	    updateItemAppearance: (e: any) => void;
	    constructor(options: FormatConditionTypeEditorOptions);
	    getStyleList(rangeStyleType: FormatConditionRangeSetPredefinedType): Array<string>;
	    getGradientColorsList(type: FormatConditionRangeGradientPredefinedType): Array<Color>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import dxDataGridOptions = DevExpress.ui;

    import FormatConditionRangeBase = DevExpress.Dashboard.Model.FormatConditionRangeBase;
    import RangeInfo = DevExpress.Dashboard.Model.RangeInfo;
    import StyleSettingsBase = DevExpress.Dashboard.Model.StyleSettingsBase;
    import StyleSettingsContainer = DevExpress.Dashboard.Internal.Designer.StyleSettingsContainer;
	export interface IRange {
	    style: ko.Observable<StyleSettingsBase>;
	    sign: ko.Observable<string>;
	    leftValue: ko.Observable<any>;
	    rightValue: ko.Observable<any>;
	    rangeInfo: RangeInfo;
	}
	export type DataGridColumnTypes = 'string' | 'date' | 'boolean' | 'number' | 'object';
	export class RuleRangesEditor extends StyleSettingsContainer {
	    condition: FormatConditionRangeBase;
	    dataType: ko.Observable<string>;
	    isPercent: ko.Computed<boolean>;
	    selection: ko.Observable<IRange>;
	    value: ko.ObservableArray<IRange>;
	    constructor(condition: FormatConditionRangeBase);
	    isLabel(type: string): boolean;
	    isRangeEmptyAllowed(range: IRange): boolean;
	    closeEditCell: () => void;
	    private _closeEditCell;
	    getLabelText(type: string): string;
	    readonly dataGridOptions: dxDataGridOptions;
	    add(): void;
	    remove(): void;
	    getSelectedStyleChangedHandler(range: IRange): (oldType: string, newType: string) => void;
	    private _updateValue;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
	export var CURRENCIES: {
	    name: string;
	    displayName: string;
	    cultures: {
	        name: string;
	        displayName: string;
	    }[];
	}[];

}
declare module DevExpress.Dashboard.Internal.Designer {

	export class CurrencyInfo {
	    name: string;
	    displayText: string;
	    previewText: string;
	    constructor(name: string, displayText: string, previewText?: string);
	    cultures: Array<CultureInfo>;
	}
	export class CultureInfo {
	    name: string;
	    displayText: string;
	}
	export class CurrencySelector {
	    disabled: ko.Observable<boolean>;
	    constructor(currencyCultureName: ko.Observable<string>, disabled: ko.Observable<boolean>);
	    private _defaultCurrency;
	    _getDefaultCurrencyInfo: () => CurrencyInfo;
	    getPreviewText: (value: number, currency: string) => any;
	    currencies: ko.ObservableArray<CurrencyInfo>;
	    selectedCurrency: ko.Observable<CurrencyInfo>;
	    selectedCulture: ko.Observable<CultureInfo>;
	    previewPositive: ko.PureComputed<any>;
	    previewNegative: ko.PureComputed<any>;
	    previewWarning: ko.PureComputed<any>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {


    import ExpressionEditorViewModel = DevExpress.Dashboard.Internal.Designer.ExpressionEditorViewModel;
    import FilterEditorParams = DevExpress.Dashboard.Internal.Designer.FilterEditorParams;
	export class FilterExpressionEditorViewModel implements ExpressionEditorViewModel<DevExpress.Analytics.Widgets.FilterEditor> {
	    editor: DevExpress.Analytics.Widgets.FilterEditor;
	    criteriaString: ko.Observable<string>;
	    constructor(params: FilterEditorParams);
	    show(): void;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {

	export type ContainerTypeMap = {
	    [key: string]: {
	        icon: string;
	        displayName?: string;
	        group?: string;
	    };
	};
	export interface ContainerTypeSelectorOptions {
	    containersMap: ContainerTypeMap;
	    containerGroupLocalization?: {
	        [groupName: string]: string;
	    };
	    highlightedTypes?: string[];
	}
	export class ContainerTypeSelector {
	    private _containersMap;
	    containerType: ko.Observable<string>;
	    private _containerGroupLocalization?;
	    private _highlightedTypes?;
	    constructor(_containersMap: ContainerTypeMap, containerType: ko.Observable<string>, _containerGroupLocalization?: {
	        [groupName: string]: string;
	    }, _highlightedTypes?: string[]);
	    readonly shortAvailableContainerTypes: any[];
	    readonly hasFullList: boolean;
	    readonly availableContainerTypes: any[];
	    readonly availableContainerTypeGroups: {
	        name: string;
	        displayName: string;
	    }[];
	    headerClick: (data: any, event: any) => boolean;
	    itemClick: (data: any, event: any) => boolean;
	}

}
declare module DevExpress.Dashboard.Designer {

    import dxForm =  DevExpress.ui.dxForm ;
	export class FormItemTemplates {
	    static buttonGroup: ((data: {
	        component?: dxForm;
	        dataField?: string;
	        editorOptions?: any;
	        editorType?: string;
	        name?: string;
	    }, itemElement: DevExpress.core.dxElement) => Element);
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import dxList =  DevExpress.ui.dxList ;
    import dxListOptions = DevExpress.ui;

    import DashboardLocalizationId = DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
	export interface CollectionEditorOptionsBase<T> {
	    noDataText?: DashboardLocalizationId;
	    customToolbarItems?: Array<{
	        name: DashboardLocalizationId | string;
	        icon: string;
	        action: () => void;
	    }>;
	}
	export class CollectionEditorViewModelBase<T> {
	    protected listInstance: dxList;
	    private noDataText;
	    isToolbarVisible: boolean;
	    allowAddItem: boolean;
	    allowEditItem: boolean;
	    allowReorderItem: boolean;
	    allowRemoveItem: boolean;
	    addEnabled: ko.Observable;
	    editEnabled: ko.Observable;
	    upEnabled: ko.Observable;
	    downEnabled: ko.Observable;
	    removeEnabled: ko.Observable;
	    customToolbarItems: Array<{
	        name: DashboardLocalizationId | string;
	        icon: string;
	        action: () => void;
	    }>;
	    _innerSelection: T;
	    edit: () => void;
	    constructor(params: CollectionEditorOptionsBase<T>);
	    getListOptions(): dxListOptions;
	    readonly selectedValue: T;
	    dispose(): void;
	    protected _itemTemplate(itemData: any, itemIndex: any, itemElement: any): void;
	    protected _getDisplayText(itemData: T): string;
	    protected _itemClickHandler(): void;
	    protected _listSelectionChanged(): void;
	    protected _updateActionsState(): void;
	    protected _onSelectionChanged(): void;
	    protected _setListSelection(selectedItem: any): void;
	}
	export class CollectionEditorRefreshCallback {
	    private readonly callbacks;
	    refresh: () => void;
	    subscribe: (fn: () => void) => number;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
import dxElement = DevExpress.core.dxElement;
    import dxListOptions = DevExpress.ui;

    import DashboardLocalizationId = DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    import CollectionEditorOptionsBase = DevExpress.Dashboard.Internal.Designer.CollectionEditorOptionsBase;
    import CollectionEditorRefreshCallback = DevExpress.Dashboard.Internal.Designer.CollectionEditorRefreshCallback;
    import CollectionEditorViewModelBase = DevExpress.Dashboard.Internal.Designer.CollectionEditorViewModelBase;
	export interface CollectionEditorOptions<T> extends CollectionEditorOptionsBase<T> {
	    propertyName?: string;
	    isToolbarVisible?: boolean;
	    allowAddItem?: boolean;
	    allowReorderItem?: boolean;
	    allowRemoveItem?: boolean;
	    createNewItemHandler?: () => T;
	    editItemHandler: (item: T, args: CollectionEditorEditItemArguments, container?: ko.Observable<T>) => void;
	    removeItemHandler?: (item: T) => void;
	    enableRemoveItem?: () => boolean;
	    reorderItemsHandler?: (item: T, direction: 'up' | 'down') => void;
	    visibleItemsFilter?: (item: T) => boolean;
	    customTemplate?: (itemData: T, itemIndex: number, itemElement: dxElement) => HTMLElement;
	    forceRefreshCallback?: CollectionEditorRefreshCallback;
	}
	export class CollectionEditorViewModel<T> extends CollectionEditorViewModelBase<T> {
	    private dataField;
	    private dataSource;
	    private enableEditItem;
	    private enableRemoveItem;
	    private createNewItemHandler;
	    private editItemHandler;
	    private removeItemHandler;
	    private reorderItemsHandler;
	    private visibleItemsFilter;
	    private customTemplate;
	    private subscriptions;
	    customToolbarItems: Array<{
	        name: DashboardLocalizationId | string;
	        icon: string;
	        action: () => void;
	    }>;
	    constructor(params: CollectionEditorOptions<T>, dataSource: ko.ObservableArray<T>);
	    getListOptions(): dxListOptions;
	    add: () => void;
	    edit: () => void;
	    remove: () => void;
	    up: () => void;
	    down: () => void;
	    protected _itemTemplate(itemData: any, itemIndex: any, itemElement: any): void;
	    protected _getDisplayText(itemData: any): any;
	    private _moveSelectedGridRow;
	    protected _updateActionsState(): void;
	    private _safeReloadDataSource;
	    dispose(): void;
	}
	export class CollectionEditorEditItemArguments {
	    requestRecalculation: JQuery.Callbacks<Function>;
	    createImmediately: boolean;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import dxListOptions = DevExpress.ui;

    import CollectionEditorOptionsBase = DevExpress.Dashboard.Internal.Designer.CollectionEditorOptionsBase;
    import CollectionEditorViewModelBase = DevExpress.Dashboard.Internal.Designer.CollectionEditorViewModelBase;
	export interface EditableListEditorOptions<T> extends CollectionEditorOptionsBase<T> {
	    propertyName?: string;
	    dataSource: Array<T>;
	    enableEditItem?: (item: T) => boolean;
	    editItemHandler: (item: T) => void;
	    getDisplayText?: (item: T) => string;
	    onSelectionChanged?: (item: T) => void;
	}
	export class EditableListEditorViewModel<T> extends CollectionEditorViewModelBase<T> {
	    private dataField;
	    private dataSource;
	    private enableEditItem;
	    private editItemHandler;
	    private getDisplayText;
	    private onSelectionChanged;
	    private selectedItem;
	    constructor(params: EditableListEditorOptions<T>, selectedItem: ko.Observable<T>);
	    getListOptions(): dxListOptions;
	    edit: () => void;
	    protected _getDisplayText(itemData: any): any;
	    protected _listSelectionChanged(): void;
	    protected _updateActionsState(): void;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import dxDataGridColumn = DevExpress.ui;
    import dxDataGridOption = DevExpress.ui;

    import DashboardLocalizationId = DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    import CollectionEditorRefreshCallback = DevExpress.Dashboard.Internal.Designer.CollectionEditorRefreshCallback;
	export interface InlineEditCollectionEditorOptions<T> {
	    dataFields: Array<string>;
	    noDataText?: DashboardLocalizationId;
	    gridColumns?: Array<dxDataGridColumn>;
	    isToolbarVisible?: boolean;
	    allowAddItem?: boolean;
	    allowRemoveItem?: boolean;
	    allowReorderItem?: boolean;
	    createNewItemHandler?: () => T;
	    customizeInlineEditor?: (e: any) => void;
	    customizeCell?: (e: any) => void;
	    enableAddItem?: (selectedItem: T) => boolean;
	    enableRemoveItem?: (selectedItem: T) => boolean;
	    enableEditItem?: (selectedItem: T, args: any) => boolean;
	    forceRefreshCallback?: CollectionEditorRefreshCallback;
	}
	export class InlineEditCollectionEditorViewModel<T> {
	    private dataFields;
	    private dataSource;
	    private noDataText;
	    private enableAddItem;
	    private enableRemoveItem;
	    private enableEditItem;
	    private createNewItemHandler;
	    private customizeInlineEditor;
	    private customizeCell;
	    private gridColumns;
	    private dataSourceSubscription;
	    private gridInstance;
	    private dataSourceMapper;
	    isToolbarVisible: boolean;
	    allowAddItem: boolean;
	    allowRemoveItem: boolean;
	    allowReorderItem: boolean;
	    addEnabled: ko.Observable<boolean>;
	    removeEnabled: ko.Observable<boolean>;
	    upEnabled: ko.Observable<boolean>;
	    downEnabled: ko.Observable<boolean>;
	    constructor(params: InlineEditCollectionEditorOptions<T>, dataSource: ko.ObservableArray<T>);
	    getGridOptions(): dxDataGridOption;
	    readonly selectedValue: T;
	    add: () => void;
	    remove: () => T[];
	    down: () => void;
	    up: () => void;
	    dispose(): void;
	    private _addNewItemRow;
	    private _moveSelectedGridRow;
	    private _updateActionsState;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {

	export class dxDashboardFilePicker extends DevExpress.Analytics.Widgets.Internal.dxFileImagePicker {
	    constructor(element: any, options?: any);
	    _clearButtonVisibility(): boolean;
	    _clearValueHandler(e: any): void;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import dxButtonOptions = DevExpress.ui;
    import dxForm =  DevExpress.ui.dxForm ;
    import dxNumberBoxOptions = DevExpress.ui;

    import DashboardLocalizationId = DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    import FormatConditionRangeBase = DevExpress.Dashboard.Model.FormatConditionRangeBase;
    import FormAdapterItem = DevExpress.Dashboard.Metadata.FormAdapterItem;
    import FormatConditionTypeEditorOptions = DevExpress.Dashboard.Internal.Designer.FormatConditionTypeEditorOptions;
    import StyleSettingsEditorOptions = DevExpress.Dashboard.Internal.Designer.StyleSettingsEditorOptions;
    import ExpressionEditorParams = DevExpress.Dashboard.Internal.Designer.ExpressionEditorParams;
    import FilterEditorParams = DevExpress.Dashboard.Internal.Designer.FilterEditorParams;
    import ContainerTypeSelectorOptions = DevExpress.Dashboard.Internal.Designer.ContainerTypeSelectorOptions;
    import CollectionEditorOptions = DevExpress.Dashboard.Internal.Designer.CollectionEditorOptions;
    import EditableListEditorOptions = DevExpress.Dashboard.Internal.Designer.EditableListEditorOptions;
    import InlineEditCollectionEditorOptions = DevExpress.Dashboard.Internal.Designer.InlineEditCollectionEditorOptions;
	export type dxFormTemplateArgs = {
	    component?: dxForm;
	    dataField?: string;
	    editorOptions?: any;
	    editorType?: string;
	    name?: string;
	};
	export function getFieldValue(args: dxFormTemplateArgs): any;
	export type FormAdapterEditor<T = void> = (options: T) => FormAdapterItem;
	export const dateBoxEditor: FormAdapterEditor;
	export const numberBoxEditor: FormAdapterEditor<dxNumberBoxOptions | void>;
	export const checkBoxEditor: FormAdapterEditor<{
	    text?: string;
	}>;
	export const textBoxEditor: FormAdapterEditor;
	export const guidEditor: FormAdapterEditor;
	export const selectBoxEditor: FormAdapterEditor<Array<{
	    value: any;
	    displayValueId: DashboardLocalizationId;
	}>>;
	export const dynamicSelectBoxEditor: FormAdapterEditor<ko.Subscribable<Array<{
	    value: any;
	    displayValueId: DashboardLocalizationId;
	}>>>;
	export const buttonGroupEditor: FormAdapterEditor<Array<{
	    value: any;
	    displayValueId: DashboardLocalizationId;
	}>>;
	export const listEditor: FormAdapterEditor<Array<{
	    value: any;
	    displayValueId: DashboardLocalizationId;
	}>>;
	export const editableListEditor: FormAdapterEditor<EditableListEditorOptions<any>>;
	export const collectionEditor: FormAdapterEditor<CollectionEditorOptions<any>>;
	export const inlineEditCollectionEditor: FormAdapterEditor<InlineEditCollectionEditorOptions<any>>;
	export const textPreviewEditor: FormAdapterEditor<{
	    target: ko.Subscribable<string>;
	}>;
	export const actionButtons: FormAdapterEditor<dxButtonOptions[]>;
	export const flagsEnumListEditor: FormAdapterEditor<{
	    values: Array<{
	        value: any;
	        displayValueId: DashboardLocalizationId;
	    }>;
	    enumDeclaration: any;
	}>;
	export const flagsEnumTagBoxEditor: FormAdapterEditor<{
	    values: Array<{
	        value: any;
	        displayValueId: DashboardLocalizationId;
	    }>;
	    enumDeclaration: any;
	}>;
	export const currencyEditor: FormAdapterEditor;
	export const iconTypeEditor: FormAdapterEditor<ContainerTypeSelectorOptions>; type nullableNumberBoxEditorOptions = {
	    defaultValue?: number;
	    editorOptions?: dxNumberBoxOptions;
	};
	export const nullableNumberBoxEditor: FormAdapterEditor<nullableNumberBoxEditorOptions>;
	export const flowModeSettingsEditor: FormAdapterEditor;
	export const calculationExpressionEditor: FormAdapterEditor<ExpressionEditorParams>;
	export const filterEditor: FormAdapterEditor<FilterEditorParams>; type filePickerEditorOptions = {
	    type: 'img' | 'file';
	    accept: string;
	    showClearButton?: boolean;
	    placeholderId?: 'Image' | DashboardLocalizationId;
	    readMode?: 'text';
	};
	export const filePickerEditor: FormAdapterEditor<filePickerEditorOptions>;
	export const nestedPropertyGridEditor: FormAdapterEditor<string>;
	export const ruleRangesEditor: FormAdapterEditor<FormatConditionRangeBase>;
	export const styleSettingsEditor: FormAdapterEditor<StyleSettingsEditorOptions | void>;
	export const conditionTypeEditor: FormAdapterEditor<FormatConditionTypeEditorOptions>;
	export {};

}
declare module DevExpress.Dashboard.Internal.Designer {
    import dxForm =  DevExpress.ui.dxForm ;

    import DashboardLocalizationId = DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
	export let twoWayUpdateInterval: number;
	export function updateFormItemsCore(form: dxForm, target: ObjectPropertiesWrapper, bindingContext: ko.BindingContext<any>, forced?: Array<string>): void;
	export function transformValuesDictionary(values: {
	    [key: string]: DashboardLocalizationId;
	}): Array<{
	    value: any;
	    displayValueId: DashboardLocalizationId;
	}>;

}
declare module DevExpress.Dashboard.Internal.Designer {

    import IDisposable = DevExpress.Dashboard.Model.IDisposable;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
	export interface IPropertiesHolder {
	    model: any;
	    propertiesTabs: ko.ObservableArray<AccordionTab>;
	}
	export class PropertiesController implements IDisposable {
	    private _disposables;
	    constructor();
	    mainModel: ko.Observable<{
	        containingCollection?: ko.ObservableArray<any>;
	        data: IPropertiesHolder;
	    }>;
	    secondaryModel: ko.Observable<{
	        containingCollection?: ko.ObservableArray<any>;
	        displayText: ko.MaybeSubscribable<string>;
	        data: IPropertiesHolder;
	    }>;
	    private currentTab;
	    accordionDataSource: ko.Observable<Array<AccordionTab>>;
	    secondaryAccordionDataSource: ko.Observable<Array<AccordionTab>>;
	    computator: ko.Computed<void>;
	    selectedIndex: ko.Computed<number>;
	    secondarySelectedIndex: ko.Observable<number>;
	    processDataItemClick: (data: any) => void;
	    dispose(): void;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import DataItemContainer = DevExpress.Dashboard.Model.DataItemContainer;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import PropertiesController = DevExpress.Dashboard.Internal.Designer.PropertiesController;
	export interface IComposeTabsArgs {
	}
	export interface IDashboardItemComposeTabsArgs extends IComposeTabsArgs {
	    dashboard?: Dashboard;
	    dataSourceBrowser?: DataSourceBrowser;
	    propertiesController?: PropertiesController;
	}
	export interface IDataItemContainerComposeTabsArgs extends IComposeTabsArgs {
	    dashboardItem: DataDashboardItem;
	    dataSourceBrowser?: DataSourceBrowser;
	    containerType?: ko.Observable<string>;
	}
	export interface IDetailsPropertiesComposer<TModel> extends IDetailsPropertiesComposerBase<TModel, IComposeTabsArgs> {
	}
	export interface IDetailsPropertiesComposerBase<TModel, TArgs extends IComposeTabsArgs> {
	    composeTabs(model: TModel, args?: TArgs): Array<AccordionTab>;
	}
	export abstract class PropertiesComposerBase<TModel, TArgs extends IComposeTabsArgs> implements IDetailsPropertiesComposerBase<TModel, TArgs> {
	    private _customizeTabs;
	    constructor(_customizeTabs: ((tabs: AccordionTab[], model: TModel, args: TArgs) => void));
	    protected abstract _composeTabsCore(model: TModel, args?: TArgs): any;
	    composeTabs(model: TModel, args?: TArgs): Array<AccordionTab>;
	}
	export type CustomizeDataItemContainerTabs = (tabs: AccordionTab[], model: DataItemContainer, args: IDataItemContainerComposeTabsArgs) => void;
	export abstract class DataItemContainerPropertiesComposer<T extends DataItemContainer> extends PropertiesComposerBase<T, IDataItemContainerComposeTabsArgs> {
	    constructor(_customizeTabs: CustomizeDataItemContainerTabs);
	}
	export type CustomizeDashboardItemTabs = (tabs: AccordionTab[], model: DashboardItem, args: IDashboardItemComposeTabsArgs) => void;
	export abstract class DashboardItemPropertiesComposer<T extends DashboardItem> extends PropertiesComposerBase<T, IDashboardItemComposeTabsArgs> {
	    constructor(_customizeTabs: CustomizeDashboardItemTabs);
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let latitude: IDashboardSerializationInfo;
	export let longitude: IDashboardSerializationInfo;
	export let tooltipDimensions: IDashboardSerializationInfo;
	export let enableClustering: IDashboardSerializationInfo;
	export let geoPointMapDashboardItemBaseSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import PrimitiveType = DevExpress.Dashboard.Data.PrimitiveType;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import DimensionFilterValues = DevExpress.Dashboard.Internal.Model.DimensionFilterValues;
    import KnockoutEntry = DevExpress.Dashboard.Internal.Model.KnockoutEntry;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import MapItem = DevExpress.Dashboard.Model.MapItem;
	export abstract class GeoPointMapItemBase extends MapItem {
	    readonly _actualSelectionValues: KnockoutEntry<Array<Array<any>>>;
	    private __latitude;
	    private __longitude;
	    latitude: ko.Observable<Dimension>;
	    longitude: ko.Observable<Dimension>;
	    private __tooltipDimensions;
	    tooltipDimensions: ko.ObservableArray<Dimension>;
	    enableClustering: ko.Observable<boolean>;
	    private _selectedClusters;
	    _clustersContent: ko.Observable<{
	        Cluster: {
	            Latitude: number;
	            Longitude: number;
	        };
	        Points: PrimitiveType[][];
	    }[]>;
	    _processDataRequest: () => void;
	    _actualSelectedValues: ko.Computed<PrimitiveType[][]>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    _clearBindings(): void;
	    protected _getInfoCore(): IDashboardSerializationInfo[];
	    protected _getInteractivityDimensionLinks(): DataItemLink[];
	    _getExportingSelection(): any[];
	    _getDisplayFilterValues(limitCount?: number): Array<DimensionFilterValues>;
	    protected _getSliceDimensions(): Array<DataItemLink>;
	    protected _updateContentViewModel(content: any): void;
	    _setSelectionData(selection: Array<Array<number>>): void;
	    _isTopNEnabled(dataItem: Dimension): boolean;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let bubbleMapWeight: IDashboardSerializationInfo;
	export let bubbleMapColor: IDashboardSerializationInfo;
	export let bubbleMapDashboardItemSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import Measure = DevExpress.Dashboard.Model.Measure;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import GeoPointMapItemBase = DevExpress.Dashboard.Model.GeoPointMapItemBase;
    import MapLegend = DevExpress.Dashboard.Model.MapLegend;
    import WeightedLegend = DevExpress.Dashboard.Model.WeightedLegend;
	export class BubbleMapItem extends GeoPointMapItemBase {
	    private __weight;
	    private __color;
	    weight: ko.Observable<Measure>;
	    color: ko.Observable<Measure>;
	    legend: MapLegend;
	    weightedLegend: WeightedLegend;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getInfoCore(): IDashboardSerializationInfo[];
	    _clearBindings(): void;
	    protected _getDefaultItemType(): string;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let valueName: IDashboardSerializationInfo;
	export let chorolpethMapValue: IDashboardSerializationInfo;
	export let valueMapSerializationsInfo: IDashboardSerializationInfoArray;
	export let deltaMapActualValue: IDashboardSerializationInfo;
	export let deltaMapTargetValue: IDashboardSerializationInfo;
	export let deltaMapDeltaOptions: IDashboardSerializationInfo;
	export let actualValueName: IDashboardSerializationInfo;
	export let deltaName: IDashboardSerializationInfo;
	export let deltaMapSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import AbsoluteVariationNumericFormat = DevExpress.Dashboard.Model.AbsoluteVariationNumericFormat;
    import PercentOfTargetNumericFormat = DevExpress.Dashboard.Model.PercentOfTargetNumericFormat;
    import PercentVariationNumericFormat = DevExpress.Dashboard.Model.PercentVariationNumericFormat;
    import Measure = DevExpress.Dashboard.Model.Measure;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import IBindingProperty = DevExpress.Dashboard.Model.IBindingProperty;
    import DataItemContainer = DevExpress.Dashboard.Model.DataItemContainer;
    import DeltaOptions = DevExpress.Dashboard.Model.DeltaOptions;
    import IDataItemProvider = DevExpress.Dashboard.Internal.Model.IDataItemProvider;
	export abstract class ChoroplethMap extends DataItemContainer {
	    _displayNameSeparator: string;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    abstract _getBindingModel(): Array<IBindingProperty>;
	}
	export class ValueMap extends ChoroplethMap {
	    private __value;
	    value: ko.Observable<Measure>;
	    valueName: ko.Observable<string>;
	    constructor(dataItemProvider: DataDashboardItem, modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getInfoCore(): IDashboardSerializationInfoArray;
	    _getDataId(): string;
	    _getBindingModel(): Array<IBindingProperty>;
	    protected _getDefaultItemType(): string;
	}
	export class DeltaMap extends ChoroplethMap {
	    private __actualValue;
	    private __targetValue;
	    actualValue: ko.Observable<Measure>;
	    targetValue: ko.Observable<Measure>;
	    deltaOptions: DeltaOptions;
	    absoluteVariationNumericFormat: AbsoluteVariationNumericFormat;
	    percentVariationNumericFormat: PercentVariationNumericFormat;
	    percentOfTargetNumericFormat: PercentOfTargetNumericFormat;
	    actualValueName: ko.Observable<string>;
	    deltaName: ko.Observable<string>;
	    constructor(dataItemProvider: IDataItemProvider, modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getInfoCore(): IDashboardSerializationInfoArray;
	    _getDataId(): string;
	    _getBindingModel(): Array<IBindingProperty>;
	    protected _getDefaultItemType(): string;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let maps: IDashboardSerializationInfo;
	export let includeSummaryValueToShapeTitle: IDashboardSerializationInfo;
	export let attributeDimension: IDashboardSerializationInfo;
	export let attributeName: IDashboardSerializationInfo;
	export let tooltipAttributeName: IDashboardSerializationInfo;
	export let choroplethMapDashboardItemSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import ChoroplethMap = DevExpress.Dashboard.Model.ChoroplethMap;
    import DeltaMap = DevExpress.Dashboard.Model.DeltaMap;
    import ValueMap = DevExpress.Dashboard.Model.ValueMap;
    import MapItem = DevExpress.Dashboard.Model.MapItem;
	export class ChoroplethMapItem extends MapItem {
	    static choroplethMapTypesMap: {
	        'ValueMap': {
	            constructor: typeof ValueMap;
	            displayName: string;
	            icon: string;
	        };
	        'DeltaMap': {
	            constructor: typeof DeltaMap;
	            displayName: string;
	            icon: string;
	        };
	    };
	    private __attributeDimension;
	    attributeDimension: ko.Observable<Dimension>;
	    maps: ko.ObservableArray<ChoroplethMap>;
	    attributeName: ko.Observable<string>;
	    tooltipAttributeName: ko.Observable<string>;
	    includeSummaryValueToShapeTitle: ko.Observable<boolean>;
	    protected _getInteractivityDimensionLinks(): DataItemLink[];
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    _clearBindings(): void;
	    _createMap(mapJSON: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer): ChoroplethMap;
	    protected _getInfoCore(): IDashboardSerializationInfo[];
	    protected _getDefaultItemType(): string;
	    protected _getLayersCount(): number;
	    protected _getLayerName(): string;
	    protected _updateContentViewModel(content: any): void;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let pieMapArgument: IDashboardSerializationInfo;
	export let pieMapValues: IDashboardSerializationInfo;
	export let isWeighted: IDashboardSerializationInfo;
	export let pieMapDashboardItemSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import Measure = DevExpress.Dashboard.Model.Measure;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import GeoPointMapItemBase = DevExpress.Dashboard.Model.GeoPointMapItemBase;
    import MapLegend = DevExpress.Dashboard.Model.MapLegend;
    import WeightedLegend = DevExpress.Dashboard.Model.WeightedLegend;
	export class PieMapItem extends GeoPointMapItemBase {
	    private __argument;
	    argument: ko.Observable<Dimension>;
	    private __values;
	    values: ko.ObservableArray<Measure>;
	    isWeighted: ko.Observable<boolean>;
	    legend: MapLegend;
	    weightedLegend: WeightedLegend;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    _clearBindings(): void;
	    protected _getInfoCore(): IDashboardSerializationInfo[];
	    protected _getDefaultItemType(): string;
	    protected _getLayersCount(): number;
	    protected _getLayerName(): string;
	    protected _getSliceDimensions(): Array<DataItemLink>;
	    protected _getIsDimensionColoredByDefault(dimension: Dimension): boolean;
	    protected _getAreMeasuresColoredByDefault(): boolean;
	    protected _getCanColorByMeasures(): boolean;
	    protected _getCanColorByDimensions(): boolean;
	    _getColorizableDataItemsInfo(): Array<{
	        items: Array<DataItemLink>;
	        prefixId: string;
	    }>;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let pieDefinitionMode: IDashboardSerializationInfo;
	export let pieWindowDefinitionSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import PieWindowDefinitionMode = DevExpress.Dashboard.Model.PieWindowDefinitionMode;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
	export class PieWindowDefinition extends MeasureCalculationWindowDefinition {
	    definitionMode: ko.Observable<PieWindowDefinitionMode>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    equals(def: any): boolean;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let pieValues: IDashboardSerializationInfo;
	export let labelContentType: IDashboardSerializationInfo;
	export let tooltipContentType: IDashboardSerializationInfo;
	export let pieType: IDashboardSerializationInfo;
	export let showPieCaptions: IDashboardSerializationInfo;
	export let labelPosition: IDashboardSerializationInfo;
	export let pieDashboardItemSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import Measure = DevExpress.Dashboard.Model.Measure;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
    import PieValueType = DevExpress.Dashboard.Model.PieValueType;
    import PointLabelPosition = DevExpress.Dashboard.Model.PointLabelPosition;
    import TargetDimensions = DevExpress.Dashboard.Model.TargetDimensions;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import ChartItemBase = DevExpress.Dashboard.Model.ChartItemBase;
	export class PieItem extends ChartItemBase {
	    private __values;
	    values: ko.ObservableArray<Measure>;
	    labelContentType: ko.Observable<PieValueType>;
	    tooltipContentType: ko.Observable<PieValueType>;
	    labelPosition: ko.Observable<PointLabelPosition>;
	    pieType: ko.Observable<string>;
	    showPieCaptions: ko.Observable<boolean>;
	    constructor(dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getInfoCore(): IDashboardSerializationInfo[];
	    _clearBindings(): void;
	    protected _getDefaultItemType(): string;
	    protected _getTargetDimensions(): TargetDimensions;
	    protected _getMasterFilterMode(): string;
	    protected _getDrillDownEnabled(): boolean;
	    protected _getIgnoreMasterFilter(): boolean;
	    protected _getAreMeasuresColoredByDefault(): boolean;
	    protected _getIsDimensionColoredByDefault(dimension: Dimension): boolean;
	    protected _getLayersCount(): number;
	    protected _getLayerName(): string;
	    _getDefaultCalculationWindowDefinition(): MeasureCalculationWindowDefinition;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let content: IDashboardSerializationInfo;
	export let scatterPointLabelOptionsSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let scatterWindowDefinitionSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {

    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
	export class ScatterWindowDefinition extends MeasureCalculationWindowDefinition {
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    equals(def: any): boolean;
	}

}
declare module DevExpress.Dashboard.Model {


    import ScatterPointLabelContentType = DevExpress.Dashboard.Model.ScatterPointLabelContentType;
    import PointLabelOptionsBase = DevExpress.Dashboard.Model.PointLabelOptionsBase;
	export class ScatterPointLabelOptions extends PointLabelOptionsBase {
	    content: ko.Observable<ScatterPointLabelContentType>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let scatterArgumentsMeta: IDashboardSerializationInfo;
	export let rotated: IDashboardSerializationInfo;
	export let legend: IDashboardSerializationInfo;
	export let axisX: IDashboardSerializationInfo;
	export let axisY: IDashboardSerializationInfo;
	export let pointLabelOptions: IDashboardSerializationInfo;
	export let axisXMeasure: IDashboardSerializationInfo;
	export let axisYMeasure: IDashboardSerializationInfo;
	export let scatterChartWeight: IDashboardSerializationInfo;
	export let scatterChartDashboardItemSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import Measure = DevExpress.Dashboard.Model.Measure;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import ChartAxisY = DevExpress.Dashboard.Model.ChartAxisY;
    import ChartLegend = DevExpress.Dashboard.Model.ChartLegend;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import DashboardItemInteractivityOptions = DevExpress.Dashboard.Model.DashboardItemInteractivityOptions;
    import ScatterPointLabelOptions = DevExpress.Dashboard.Model.ScatterPointLabelOptions;
	export class ScatterChartItem extends DataDashboardItem {
	    private __arguments;
	    arguments: ko.ObservableArray<Dimension>;
	    private __axisXMeasure;
	    private __axisYMeasure;
	    private __weight;
	    weight: ko.Observable<Measure>;
	    axisXMeasure: ko.Observable<Measure>;
	    axisYMeasure: ko.Observable<Measure>;
	    interactivityOptions: DashboardItemInteractivityOptions;
	    rotated: ko.Observable<boolean>;
	    legend: ChartLegend;
	    axisX: ChartAxisY;
	    axisY: ChartAxisY;
	    pointLabelOptions: ScatterPointLabelOptions;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    _clearBindings(): void;
	    protected _getInfoCore(): IDashboardSerializationInfo[];
	    _isCalculationSupported(): boolean;
	    protected _getDefaultItemType(): string;
	    protected _getMasterFilterMode(): string;
	    protected _getDrillDownEnabled(): boolean;
	    protected _getIgnoreMasterFilter(): boolean;
	    protected _getInteractivityDimensionLinks(): DataItemLink[];
	    protected _getCanColorByMeasures(): boolean;
	    protected _getCanColorByDimensions(): boolean;
	    _getColorizableDataItemsInfo(): Array<{
	        items: Array<DataItemLink>;
	        prefixId: string;
	    }>;
	    _getDefaultCalculationWindowDefinition(): MeasureCalculationWindowDefinition;
	    _isSortingEnabled(): boolean;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import CustomShapefile = DevExpress.Dashboard.Model.CustomShapefile;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import IDetailsPropertiesComposer = DevExpress.Dashboard.Internal.Designer.IDetailsPropertiesComposer;
	export class MapCustomShapefilePropertiesComposer implements IDetailsPropertiesComposer<CustomShapefile> {
	    composeTabs(model: CustomShapefile): AccordionTab[];
	    private fillLayoutsTab;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {

    import IDisposable = DevExpress.Dashboard.Model.IDisposable;
    import CustomShapefile = DevExpress.Dashboard.Model.CustomShapefile;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import IPropertiesHolder = DevExpress.Dashboard.Internal.Designer.IPropertiesHolder;
    import PropertiesController = DevExpress.Dashboard.Internal.Designer.PropertiesController;
    import CollectionEditorEditItemArguments = DevExpress.Dashboard.Internal.Designer.CollectionEditorEditItemArguments;
	export class MapCustomShapeFileSurface implements IDisposable, IPropertiesHolder {
	    model: CustomShapefile;
	    propertiesController: PropertiesController;
	    private _disposables;
	    constructor(model: CustomShapefile, propertiesController: PropertiesController);
	    propertiesTabs: ko.ObservableArray<AccordionTab>;
	    startEditing(args: CollectionEditorEditItemArguments): void;
	    dispose(): void;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {

    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import DashboardLocalizationId = DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    import DateTimeGroupInterval = DevExpress.Dashboard.Model.DateTimeGroupInterval;
    import DeltaMap = DevExpress.Dashboard.Model.DeltaMap;
    import GridDeltaColumn = DevExpress.Dashboard.Model.GridDeltaColumn;
    import KpiElement = DevExpress.Dashboard.Model.KpiElement;
    import DataItemNumericFormat = DevExpress.Dashboard.Model.DataItemNumericFormat;
    import ChartAxis = DevExpress.Dashboard.Model.ChartAxis;
    import ChartItem = DevExpress.Dashboard.Model.ChartItem;
    import ChartSeries = DevExpress.Dashboard.Model.ChartSeries;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DateFilterItem = DevExpress.Dashboard.Model.DateFilterItem;
    import KpiItem = DevExpress.Dashboard.Model.KpiItem;
    import BubbleMapItem = DevExpress.Dashboard.Model.BubbleMapItem;
    import ChoroplethMapItem = DevExpress.Dashboard.Model.ChoroplethMapItem;
    import MapItem = DevExpress.Dashboard.Model.MapItem;
    import PieMapItem = DevExpress.Dashboard.Model.PieMapItem;
    import PieItem = DevExpress.Dashboard.Model.PieItem;
    import RangeFilterItem = DevExpress.Dashboard.Model.RangeFilterItem;
    import ScatterChartItem = DevExpress.Dashboard.Model.ScatterChartItem;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    import ObjectPropertiesRules = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesRules;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    import PropertyDesciptors = DevExpress.Dashboard.Internal.Designer.PropertyDesciptors;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import PropertiesController = DevExpress.Dashboard.Internal.Designer.PropertiesController;
	export class SharedComposers {
	    static getCommonTab(model: DashboardItem, properties?: PropertyDesciptors, disabledRules?: ObjectPropertiesRules): AccordionTab;
	    static getAllTab(model: SerializableModel): AccordionTab;
	    static getContentArrangementTab(model: PieItem | KpiItem): AccordionTab;
	    static getCommonWrapper(model: DashboardItem, specificProperties?: PropertyDesciptors, specificDisabledRules?: ObjectPropertiesRules, specificVisibilityRules?: ObjectPropertiesRules): ObjectPropertiesWrapper<DashboardItem>;
	    static getCommonMapWrapper(model: MapItem, propertiesController: PropertiesController, specificProperties?: PropertyDesciptors): ObjectPropertiesWrapper<DashboardItem>;
	    static getAxisWrapper(model: ChartAxis, axisComputedTitle: ko.Subscribable<string>, alwaysShowZeroLevelInfo: IDashboardSerializationInfo, isDateField?: boolean, isNumericField?: boolean, groupInterval?: DateTimeGroupInterval): ObjectPropertiesWrapper<ChartAxis>;
	    static getLegendWrapper(model: ChartItem | ScatterChartItem): ObjectPropertiesWrapper<ChartItem | ScatterChartItem>;
	    static getContentArrangementWrapper(model: PieItem | KpiItem): ObjectPropertiesWrapper<KpiItem | PieItem>;
	    static getLabelsWrapper(model: ChartSeries | ScatterChartItem): ObjectPropertiesWrapper<ChartSeries | ScatterChartItem>;
	    static getAttributeNamesSerializationInfo(model: MapItem, propertyInfo: IDashboardSerializationInfo, includeNoneValue?: boolean, noneValueCaption?: DashboardLocalizationId): IDashboardSerializationInfo;
	    static getShapeTitleSerializationInfo(model: MapItem): IDashboardSerializationInfo;
	    static getColorLegendWrapper(model: ChoroplethMapItem | PieMapItem | BubbleMapItem): ObjectPropertiesWrapper<BubbleMapItem | ChoroplethMapItem | PieMapItem>;
	    static getWeightedLegendWrapper(model: PieMapItem | BubbleMapItem): ObjectPropertiesWrapper<BubbleMapItem | PieMapItem>;
	    static getNumericFormatWrapper(model: DataItemNumericFormat): ObjectPropertiesWrapper<DataItemNumericFormat>;
	    static getDeltaOptionsWrapper(model: any): ObjectPropertiesWrapper<any>;
	    static getDeltaFormatsOptionsWrapper(model: KpiElement | GridDeltaColumn | DeltaMap, editFormat?: (model: any) => void, ...additionalFormats: {
	        title: string;
	        numericFormat: DataItemNumericFormat;
	    }[]): ObjectPropertiesWrapper<{
	        deltaFormats: ko.ObservableArray<any>;
	    }>;
	    static getDeltaFormats(kpiElement: KpiElement | GridDeltaColumn | DeltaMap): any[];
	    static getCustomRangesWrapper(model: RangeFilterItem | DateFilterItem, editRuleHandler: any, dataSourceBrowser: DataSourceBrowser, dimension: any): ObjectPropertiesWrapper;
	    static getSparklineOptionsProperties(): IDashboardSerializationInfoArray;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import IDashboardItemComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs;
	export class SharedPropertiesComposer extends DashboardItemPropertiesComposer<DashboardItem> {
	    constructor(customizeHandler: CustomizeDashboardItemTabs);
	    _composeTabsCore(model: DashboardItem, args: IDashboardItemComposeTabsArgs): AccordionTab[];
	}

}
declare module DevExpress.Dashboard.Internal.Designer {

	export class ConfirmDialogViewModel {
	    confirm(title: string, message: string, okButtonText: string, cancelButtonText: any): JQuery.Promise<any, any, any>;
	    confirmTitle: ko.Observable<string>;
	    confirmText: ko.Observable<string>;
	    confirmVisible: ko.Observable<boolean>;
	    confirmButtons: ko.Observable<any[]>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import IDataFieldsProvider = DevExpress.Dashboard.Internal.IDataFieldsProvider;
    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import IBindingModelProvider = DevExpress.Dashboard.Internal.Model.IBindingModelProvider;
	export function getDataItemContainerDisplayName(dataSourceBrowser: IDataFieldsProvider, dashboardItem: DataDashboardItem, dataItemContainer: IBindingModelProvider): string;
	export function getDataItemDisplayName(dataFieldProvider: IDataFieldsProvider, dataDashboardItem: DataDashboardItem, dataItem: DataItem): string;

}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSource =  DevExpress.data.DataSource ;
    import dxTreeViewOptions = DevExpress.ui;

    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import IFilterItem = DevExpress.Dashboard.Internal.IFilterItem;
    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import IDataField = DevExpress.Dashboard.Internal.Model.IDataField;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
	export interface ITreeItem {
	    id: string;
	    displayName: string;
	    selected: boolean;
	    data: IFilterItem;
	}
	export class FieldWrapper {
	    private getDisplayName;
	    add: (d: Dimension) => number;
	    dataMember: () => string;
	    displayName: () => string;
	    groupIndex: () => number;
	    hasItems: (path: any) => boolean;
	    isGroup: () => boolean;
	    reorder: (dataFields: IDataField[]) => void;
	    constructor(dimension: Dimension, getDisplayName: (dataItem: DataItem) => string);
	    private _dimensions;
	}
	export class SimpleFilterEditor extends DisposableObject {
	    dashboardItem: DataDashboardItem;
	    dataSourceBrowser: DataSourceBrowser;
	    selectedField: ko.Observable<FieldWrapper>;
	    fields: ko.ObservableArray<FieldWrapper>;
	    filterItems: Array<ITreeItem>;
	    popupVisible: ko.Observable<boolean>;
	    loadingVisible: ko.Observable<boolean>;
	    treeDataSource: DataSource;
	    treeRootValue: any;
	    constructor(dashboardItem: DataDashboardItem, dataSourceBrowser: DataSourceBrowser);
	    readonly treeOptions: dxTreeViewOptions;
	    applyHandler: () => void;
	    private _getBranchIndexes;
	    private _getFilterItemsState;
	    private _generateFields;
	    private _loadDataFields;
	    dispose(): void;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {


    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
	export var createItemFilterOptions: (expression: ko.Observable<string>, item: any, _dataSourceBrowser: DataSourceBrowser, title?: {
	    text: string;
	    localizationId?: string;
	}) => ko.Computed<DevExpress.Analytics.Widgets.FilterStringOptions>;

}
declare module DevExpress.Dashboard.Internal.Designer {

    import IDataFieldsProvider = DevExpress.Dashboard.Internal.IDataFieldsProvider;
    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
	export class ItemFilterDisplayNameProvider implements DevExpress.Analytics.Utils.IDisplayNameProvider {
	    private dashboardItem;
	    private dataSourceBrowser;
	    constructor(dashboardItem: DataDashboardItem, dataSourceBrowser: IDataFieldsProvider);
	    _mapDataItemProperties(getSourceProperty: (i: DataItem) => any, getTargetProperty: (i: DataItem) => any, value: any): JQueryPromise<string>;
	    getDisplayNameByPath(path: string, dataMember: string): JQueryPromise<string>;
	    getRealName(path: string, displayDataMember: string): JQueryPromise<string>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {


    import IDataFieldsProvider = DevExpress.Dashboard.Internal.IDataFieldsProvider;
    import IDataItemValuesProvider = DevExpress.Dashboard.Internal.IDataItemValuesProvider;
    import DataFieldType = DevExpress.Dashboard.Model.DataFieldType;
    import IDimensionDefinition = DevExpress.Dashboard.Model.IDimensionDefinition;
    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import IDataField = DevExpress.Dashboard.Internal.Model.IDataField;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import Parameter = DevExpress.Dashboard.Model.Parameter;
	export var getRealDimensionType: (dimension: IDimensionDefinition, dataField: IDataField) => DataFieldType;
	export var isCategoricalDateTime: (dimension: IDimensionDefinition, dataField: IDataField) => boolean;
	export class ItemFilterItemsProvider implements DevExpress.Analytics.Utils.IItemsProvider {
	    private dataItemValuesProvider;
	    private dataFieldProvider;
	    private parameters;
	    private dataDashboardItem;
	    private filterPredicate;
	    private static formatValue;
	    constructor(dataItemValuesProvider: IDataItemValuesProvider, dataFieldProvider: IDataFieldsProvider, parameters: ko.ObservableArray<Parameter>, dataDashboardItem: DataDashboardItem, filterPredicate?: (di: DataItem) => boolean);
	    getItems(pathRequest: DevExpress.Analytics.Utils.IPathRequest): JQueryPromise<DevExpress.Analytics.Utils.IDataMemberInfo[]>;
	    getValues(pathRequest: DevExpress.Analytics.Utils.IPathRequest): JQueryPromise<any[]>;
	    private _getDashboardItemDataFields;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let target: IDashboardSerializationInfo;
	export let differenceType: IDashboardSerializationInfo;
	export let differenceCalculationSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import DifferenceTarget = DevExpress.Dashboard.Model.DifferenceTarget;
    import DifferenceType = DevExpress.Dashboard.Model.DifferenceType;
    import MeasureCalculation = DevExpress.Dashboard.Model.MeasureCalculation;
	export class DifferenceCalculation extends MeasureCalculation {
	    private static getLookupShiftExpression;
	    target: ko.Observable<DifferenceTarget>;
	    differenceType: ko.Observable<DifferenceType>;
	    readonly name: string;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    readonly lookupShiftExpression: string;
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    _createInstance(): DifferenceCalculation;
	    _getExpression(argument: string): string;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let summaryType: IDashboardSerializationInfo;
	export let previousValuesCount: IDashboardSerializationInfo;
	export let nextValuesCount: IDashboardSerializationInfo;
	export let movingCalculationSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import SummaryType = DevExpress.Dashboard.Model.SummaryType;
    import MeasureCalculation = DevExpress.Dashboard.Model.MeasureCalculation;
	export class MovingCalculation extends MeasureCalculation {
	    summaryType: ko.Observable<SummaryType>;
	    previousValuesCount: ko.Observable<number>;
	    nextValuesCount: ko.Observable<number>;
	    readonly name: string;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    _createInstance(): MovingCalculation;
	    _getExpression(argument: string): string;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let percentOfTotalCalculationSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {

    import MeasureCalculation = DevExpress.Dashboard.Model.MeasureCalculation;
	export class PercentOfTotalCalculation extends MeasureCalculation {
	    readonly name: string;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    _createInstance(): PercentOfTotalCalculation;
	    _getExpression(argument: string): string;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let calculationRankType: IDashboardSerializationInfo;
	export let calculationRankOrder: IDashboardSerializationInfo;
	export let rankCalculationSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import RankOrder = DevExpress.Dashboard.Model.RankOrder;
    import RankType = DevExpress.Dashboard.Model.RankType;
    import MeasureCalculation = DevExpress.Dashboard.Model.MeasureCalculation;
	export class RankCalculation extends MeasureCalculation {
	    private static _getRankFunction;
	    rankType: ko.Observable<RankType>;
	    rankOrder: ko.Observable<RankOrder>;
	    readonly name: string;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    _createInstance(): RankCalculation;
	    _getExpression(argument: string): string;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let runningTotalCalculationSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import SummaryType = DevExpress.Dashboard.Model.SummaryType;
    import MeasureCalculation = DevExpress.Dashboard.Model.MeasureCalculation;
	export class RunningTotalCalculation extends MeasureCalculation {
	    summaryType: ko.Observable<SummaryType>;
	    readonly name: string;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    _createInstance(): RunningTotalCalculation;
	    _getExpression(argument: string): string;
	}

}
declare module DevExpress.Dashboard.Internal.Model {
    import DataFieldType = DevExpress.Dashboard.Model.DataFieldType;
    import DateTimeGroupInterval = DevExpress.Dashboard.Model.DateTimeGroupInterval;
    import TextGroupInterval = DevExpress.Dashboard.Model.TextGroupInterval;
	export function getDimensionExpression(dataMember: string, gateTimeGroupInterval: DateTimeGroupInterval, textGroupInterval: TextGroupInterval, fieldType: DataFieldType): string;
	export function getSummaryExpression(dataMember: string, summaryType: string): string;

}
declare module DevExpress.Dashboard.Internal {
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import IDataFieldsProvider = DevExpress.Dashboard.Internal.IDataFieldsProvider;
	export function getDimensionsExpressions(dashboardItem: DataDashboardItem, dataFieldProvider: IDataFieldsProvider): JQueryPromise<{
	    [dimensionName: string]: string;
	}>;

}
declare module DevExpress.Dashboard.Internal.Model {

	export function getFilterCriteria(filterString: string): DevExpress.Analytics.Criteria.CriteriaOperator;
	export function insertDimensionsExpressionsIntoFilterExpression(filterString: string, dimensionsExpressions: {
	    [dimensionName: string]: string;
	}): string;
	export class DimensionExpressionInserter implements DevExpress.Analytics.Criteria.Utils.ICriteriaOperatorVisitor {
	    static patch(criteria: DevExpress.Analytics.Criteria.CriteriaOperator, dimensionsCriteria: {
	        [dimensionName: string]: DevExpress.Analytics.Criteria.CriteriaOperator;
	    }): DevExpress.Analytics.Criteria.CriteriaOperator;
	    private _dimensionsCriteria;
	    constructor(dimensionsCriteria: {
	        [dimensionName: string]: DevExpress.Analytics.Criteria.CriteriaOperator;
	    });
	    visitOperandProperty(element: DevExpress.Analytics.Criteria.OperandProperty): DevExpress.Analytics.Criteria.CriteriaOperator;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {

    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
    import SpecificWindowDefinition = DevExpress.Dashboard.Model.SpecificWindowDefinition;
    import WindowDefinition = DevExpress.Dashboard.Model.WindowDefinition;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import FormAdapterEditor = DevExpress.Dashboard.Internal.Designer.FormAdapterEditor;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
	export enum WindowDefinitionMode {
	    Predefined = 0,
	    Specific = 1
	}
	export interface WindowDefinitionEditorParams {
	    dataDashboardItem: DataDashboardItem;
	    dataSourceBrowser: DataSourceBrowser;
	}
	export class WindowDefinitionEditor {
	    private _params;
	    value: ko.Observable<MeasureCalculationWindowDefinition>;
	    mode: ko.Observable<any>;
	    formAdapterWrapper: ko.Computed<ObjectPropertiesWrapper>;
	    constructor(windowDefinition: WindowDefinition, _params: WindowDefinitionEditorParams);
	    readonly dataSource: {
	        value: WindowDefinitionMode;
	        displayValue: string;
	    }[];
	    setValue(newMode: WindowDefinitionMode): void;
	    static createPatchSpecificWindowDimensionsInfo: (definition: SpecificWindowDefinition, dataDashboardItem: DataDashboardItem, dataSourceBrowser: DataSourceBrowser) => (propertyInfo: IDashboardSerializationInfo) => IDashboardSerializationInfo;
	}
	export const windowDefinitionEditor: FormAdapterEditor<WindowDefinitionEditorParams>;

}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import IDataFieldsProvider = DevExpress.Dashboard.Internal.IDataFieldsProvider;
    import Measure = DevExpress.Dashboard.Model.Measure;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import IComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IComposeTabsArgs;
    import IDetailsPropertiesComposerBase = DevExpress.Dashboard.Internal.Designer.IDetailsPropertiesComposerBase;
	export class CalculationPropertiesComposer implements IDetailsPropertiesComposerBase<Measure, ICalculationComposeTabsArgs> {
	    composeTabs(model: Measure, args: ICalculationComposeTabsArgs): AccordionTab[];
	    fillCommonWrapper(tab: AccordionTab, model: Measure, dashboardItem: DataDashboardItem, dataSourceBrowser: DataSourceBrowser): void;
	}
	export interface ICalculationComposeTabsArgs extends IComposeTabsArgs {
	    dashboardItem: DataDashboardItem;
	    dataSourceBrowser: DataSourceBrowser;
	}
	export function getCalculationArgumentExpression(measure: Measure, dashboardItem: DataDashboardItem, dataFieldProvider: IDataFieldsProvider): JQueryPromise<string>;

}
declare module DevExpress.Dashboard.Internal.Designer {

    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Measure = DevExpress.Dashboard.Model.Measure;
    import IDisposable = DevExpress.Dashboard.Model.IDisposable;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import IPropertiesHolder = DevExpress.Dashboard.Internal.Designer.IPropertiesHolder;
    import PropertiesController = DevExpress.Dashboard.Internal.Designer.PropertiesController;
    import CollectionEditorEditItemArguments = DevExpress.Dashboard.Internal.Designer.CollectionEditorEditItemArguments;
	export class CalculationSurface implements IDisposable, IPropertiesHolder {
	    model: any;
	    measure: Measure;
	    dashboardItem: DataDashboardItem;
	    dataSourceBrowser: DataSourceBrowser;
	    propertiesController: PropertiesController;
	    private _disposables;
	    constructor(model: any, measure: Measure, dashboardItem: DataDashboardItem, dataSourceBrowser: DataSourceBrowser, propertiesController: PropertiesController);
	    propertiesTabs: ko.ObservableArray<AccordionTab>;
	    updatePropertiesTabs(): void;
	    startEditing(args: CollectionEditorEditItemArguments): void;
	    dispose(): void;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {

    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import IFieldConstraint = DevExpress.Dashboard.Internal.IFieldConstraint;
    import DashboardLocalizationId = DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    import MeasureCalculation = DevExpress.Dashboard.Model.MeasureCalculation;
    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import Measure = DevExpress.Dashboard.Model.Measure;
    import IDataField = DevExpress.Dashboard.Internal.Model.IDataField;
    import DashboardItemFormatRule = DevExpress.Dashboard.Model.DashboardItemFormatRule;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import BindingAccordionTab = DevExpress.Dashboard.Internal.Designer.BindingAccordionTab;
    import PropertiesController = DevExpress.Dashboard.Internal.Designer.PropertiesController;
    import IComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IComposeTabsArgs;
    import IDetailsPropertiesComposerBase = DevExpress.Dashboard.Internal.Designer.IDetailsPropertiesComposerBase;
	export interface ICalculationDefinition {
	    title: DashboardLocalizationId;
	    data: {
	        type?: typeof MeasureCalculation;
	        default?: any;
	        isEqual?: (c: MeasureCalculation) => boolean;
	    };
	}
	export class DataItemsPropertiesComposer implements IDetailsPropertiesComposerBase<DataItemLink, IDataItemsLinkComposeTabsArgs> {
	    private static _addConstraint;
	    private static _mergeRules;
	    composeTabs(model: DataItemLink, args: IDataItemsLinkComposeTabsArgs): AccordionTab[];
	    fillBindingTab(bindingTab: BindingAccordionTab, model: DataItemLink, choosenField: ko.Observable<IDataField>, dataSourceBrowser: DataSourceBrowser, dataDashboardItem: DataDashboardItem, constraint: IFieldConstraint): void;
	    fillOptionsTab(tab: AccordionTab, dataItem: DataItem, model: DataItemLink, dataDashboardItem: DataDashboardItem): void;
	    fillDataShapingPropertiesTab(tab: AccordionTab, dataDashboardItem: DataDashboardItem, model: DataItemLink, dataField: IDataField, measures: Array<DataItem>, dataSourceBrowser: DataSourceBrowser): void;
	    private _createExactDateProperties;
	    fillDataItemExactDatetimeFormatTab(tab: AccordionTab, model: DataItem): void;
	    private _createExactDatePropertiesWrapper;
	    fillDimensionDatetimeFormatTab(tab: AccordionTab, model: Dimension): void;
	    fillTopNTab(tab: AccordionTab, dataDashboardItem: DataDashboardItem, dataItem: Dimension, dataField: IDataField, measures: Array<Measure>, supportsTopNOther: boolean, dataSourceBrowser: DataSourceBrowser): void;
	    fillCalculationsTab(tab: AccordionTab, measure: Measure, dataDashboardItem: DataDashboardItem, dataSourceBrowser: DataSourceBrowser, propertiesController: PropertiesController): void;
	    private _fillFilterTab;
	    static getCellFormatRuleCreator(dataItem: DataItem, dataItemApplyTo: DataItem, formatRuleItemType: string): () => DashboardItemFormatRule;
	    static getCellFormatRuleFilter(dataItem: DataItem): (rule: DashboardItemFormatRule) => boolean;
	    static getFormatRulesWrapper(model: DataDashboardItem, createNewItemHandler: () => DashboardItemFormatRule, visibleItemsFilter: (rule: DashboardItemFormatRule) => boolean, editHandler: any): ObjectPropertiesWrapper<DataDashboardItem>;
	}
	export interface IDataItemsLinkComposeTabsArgs extends IComposeTabsArgs {
	    dataDashboardItem: DataDashboardItem;
	    choosenField: ko.Observable<IDataField>;
	    dataSourceBrowser: DataSourceBrowser;
	    unwrappedDataItem: boolean;
	    constraint?: IFieldConstraint;
	    propertiesController?: PropertiesController;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {

    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import IFieldConstraint = DevExpress.Dashboard.Internal.IFieldConstraint;
    import IDisposable = DevExpress.Dashboard.Model.IDisposable;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import IDataField = DevExpress.Dashboard.Internal.Model.IDataField;
    import IBindingProperty = DevExpress.Dashboard.Model.IBindingProperty;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import IPropertiesHolder = DevExpress.Dashboard.Internal.Designer.IPropertiesHolder;
    import PropertiesController = DevExpress.Dashboard.Internal.Designer.PropertiesController;
	export class DataItemSurface implements IDisposable, IPropertiesHolder {
	    model: DataItemLink;
	    binding: IBindingProperty;
	    propertiesController: PropertiesController;
	    private unwrappedDataItem;
	    fieldConstraint?: IFieldConstraint;
	    extendTabsHandler?: (tabs: AccordionTab[], model: any) => void;
	    private _disposables;
	    private _changeNewField;
	    private _changeExistingField;
	    readonly commonDataItemTypeConstraint: IFieldConstraint;
	    readonly fullConstraint: (field: any) => boolean;
	    constructor(model: DataItemLink, binding: IBindingProperty, container: DataDashboardItem, dataSourceBrowser: DataSourceBrowser, propertiesController: PropertiesController, unwrappedDataItem: boolean, fieldConstraint?: IFieldConstraint, extendTabsHandler?: (tabs: AccordionTab[], model: any) => void);
	    propertiesTabs: ko.ObservableArray<AccordionTab>;
	    choosenField: ko.Observable<IDataField>;
	    newItemCreated: JQuery.Callbacks<Function>;
	    itemSelected: JQuery.Callbacks<Function>;
	    dispose(): void;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {

    import DashboardLocalizationId = DevExpress.Dashboard.Internal.Data.DashboardLocalizationId;
    import IDisposable = DevExpress.Dashboard.Model.IDisposable;
    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import IBindingProperty = DevExpress.Dashboard.Model.IBindingProperty;
    import DataItemContainer = DevExpress.Dashboard.Model.DataItemContainer;
    import ICollectionBindingProperty = DevExpress.Dashboard.Internal.Model.ICollectionBindingProperty;
    import DataItemContainerPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DataItemContainerPropertiesComposer;
    import IComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IComposeTabsArgs;
    import IDataItemContainerComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDataItemContainerComposeTabsArgs;
    import IDetailsPropertiesComposerBase = DevExpress.Dashboard.Internal.Designer.IDetailsPropertiesComposerBase;
	export interface IDataSectionSurface extends IDisposable {
	    template: string;
	}
	export interface IDataSectionInfo<TModel> extends ISectionInfoBase<TModel, IComposeTabsArgs> {
	}
	export interface IDataItemContainerSectionInfo<TModel extends DataItemContainer> extends ISectionInfoBase<TModel, IDataItemContainerComposeTabsArgs> {
	    detailsPropertiesComposer?: DataItemContainerPropertiesComposer<DataItemContainer>;
	}
	export interface ISectionInfoBase<TModel, TArgs extends IComposeTabsArgs> {
	    title: DashboardLocalizationId;
	    bindingProperty?: ICollectionBindingProperty;
	    detailsPropertiesComposer?: IDetailsPropertiesComposerBase<TModel, TArgs>;
	    actions?: {
	        title: string;
	        icon: string;
	        action: () => void;
	    }[];
	}
	export interface IDataItemHolder {
	    selectItem(holder: any, binding: IBindingProperty): any;
	    dataItemDisplayNameProvider(item: DataItem): string;
	    removeDataItem(dataItemLink: DataItemLink): any;
	}
	export interface IItemsCollection {
	    items: ko.ObservableArray<any>;
	    supportGroups: boolean;
	    relocateItem: (item: DataItemContainer | DataItemLink, placeholderIndex: number) => void;
	    isOlap: () => boolean;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {

    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import IDisposable = DevExpress.Dashboard.Model.IDisposable;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import DataItemContainer = DevExpress.Dashboard.Model.DataItemContainer;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import DataItemSurface = DevExpress.Dashboard.Internal.Designer.DataItemSurface;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
    import IDataSectionInfo = DevExpress.Dashboard.Internal.Designer.IDataSectionInfo;
    import IDataSectionSurface = DevExpress.Dashboard.Internal.Designer.IDataSectionSurface;
    import IItemsCollection = DevExpress.Dashboard.Internal.Designer.IItemsCollection;
	export interface IGroupedItemsHolder {
	    groupIndex: undefined | number;
	    position: number;
	    items: Array<DataItemLink | DataItemContainer>;
	}
	export class DataItemCollectionSurface implements IDisposable, IDataSectionSurface, IItemsCollection {
	    itemSurface: DataDashboardItemSurface<DataDashboardItem>;
	    sectionInfo: IDataSectionInfo<DataItem>;
	    extendTabsHandler?: (tabs: AccordionTab[], model: any) => void;
	    warning?: ko.Subscribable<boolean>;
	    private _disposables;
	    dataItems: ko.ObservableArray<DataItemLink>;
	    supportGroups: boolean;
	    constructor(itemSurface: DataDashboardItemSurface<DataDashboardItem>, sectionInfo: IDataSectionInfo<DataItem>, extendTabsHandler?: (tabs: AccordionTab[], model: any) => void, warning?: ko.Subscribable<boolean>);
	    groups: ko.Computed<Array<IGroupedItemsHolder>>;
	    readonly items: ko.ObservableArray<DataItemLink>;
	    private _addDataItem;
	    addClick: () => void;
	    private _removeDataItem;
	    removeDataItem: (data: DataItemLink) => void;
	    dataItemDisplayNameProvider: (dataItem: DataItem) => string;
	    selectDataItem: (data: DataItemLink) => void;
	    dataItemSurface: ko.Observable<DataItemSurface>;
	    newItemSample: ko.Observable<DataItemLink>;
	    relocateItem(item: DataItemContainer | DataItemLink, placeholderIndex: number): void;
	    isOlap(): boolean;
	    errorFactory(link: DataItemLink): ko.Observable<boolean>;
	    template: string;
	    dispose(): void;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {


    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import DataItemContainer = DevExpress.Dashboard.Model.DataItemContainer;
    import CustomizeDataItemContainerSectionsEventArgs = DevExpress.Dashboard.Designer.CustomizeDataItemContainerSectionsEventArgs;
    import CustomizeSectionsEventArgs = DevExpress.Dashboard.Designer.CustomizeSectionsEventArgs;
    import ConfirmDialogViewModel = DevExpress.Dashboard.Internal.Designer.ConfirmDialogViewModel;
    import SimpleFilterEditor = DevExpress.Dashboard.Internal.Designer.SimpleFilterEditor;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import PropertiesController = DevExpress.Dashboard.Internal.Designer.PropertiesController;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import IDataItemContainerComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDataItemContainerComposeTabsArgs;
    import IDataSectionSurface = DevExpress.Dashboard.Internal.Designer.IDataSectionSurface;
	export class BaseItemSurface<T extends DashboardItem> extends DisposableObject {
	    customizeDashboardItemTabs: (args: CustomizeSectionsEventArgs) => void;
	    propertiesController: PropertiesController;
	    protected _dashboardItemCustomization: CustomizeDashboardItemTabs;
	    getPropertiesComposer(): DashboardItemPropertiesComposer<T>;
	}
	export class DataDashboardItemSurface<T extends DataDashboardItem> extends BaseItemSurface<T> {
	    dashboardItem: T;
	    dashboardModel: Dashboard;
	    _dataSourceBrowser: DataSourceBrowser;
	    protected readonly showDefaultSections: boolean;
	    protected fillSections(): void;
	    protected extendHiddenDimensionsTabs(tabs: AccordionTab[], model: any): void;
	    protected extendHiddenMeasuresTabs(tabs: AccordionTab[], model: any): void;
	    constructor(dashboardItem: T, dashboardModel: Dashboard, _dataSourceBrowser: DataSourceBrowser);
	    customizeDataItemContainerTabs: (args: CustomizeDataItemContainerSectionsEventArgs) => void;
	    protected _dataItemContainerCustomization: (tabs: AccordionTab[], target: DataItemContainer, args: IDataItemContainerComposeTabsArgs) => void;
	    _createFilterEditor(): DevExpress.Analytics.Widgets.FilterEditor | SimpleFilterEditor;
	    showFilterEditor: () => void;
	    readonly isOlap: boolean;
	    changeDataSource(): void;
	    private _changeDataSource;
	    saveDataSourceChanges(): void;
	    clearDataBindings(): void;
	    readonly dataSourceBrowser: any;
	    dataSourceName: ko.Observable<string>;
	    dataMemberName: ko.Observable<string>;
	    dataSourceDisplayText: ko.Computed<string>;
	    needSetDataSource: ko.Computed<boolean>;
	    changeDataSourcePanelVisible: ko.Observable<boolean>;
	    template: string;
	    confirmDialogViewModel: ConfirmDialogViewModel;
	    dataSections: ko.ObservableArray<IDataSectionSurface>;
	    filterEditorModel: ko.Observable<DevExpress.Analytics.Widgets.FilterEditor | SimpleFilterEditor>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import Measure = DevExpress.Dashboard.Model.Measure;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
    import IDataSectionInfo = DevExpress.Dashboard.Internal.Designer.IDataSectionInfo;
	export var SectionDescriptors: {
	    HiddenDimensions: IDataSectionInfo<Dimension>;
	    HiddenMeasures: IDataSectionInfo<Measure>;
	    SeriesDimension: IDataSectionInfo<Dimension>;
	    Arguments: IDataSectionInfo<Dimension>;
	    Values: IDataSectionInfo<Measure>;
	    FilterDimensions: IDataSectionInfo<Dimension>;
	    SparklineArgument: IDataSectionInfo<Dimension>;
	    SingleArgument: IDataSectionInfo<Dimension>;
	    Value: IDataSectionInfo<Measure>;
	    Latitude: IDataSectionInfo<Dimension>;
	    Longitude: IDataSectionInfo<Dimension>;
	    TooltipDimensions: IDataSectionInfo<Dimension>;
	    TooltipMeasures: IDataSectionInfo<Measure>;
	    Columns: IDataSectionInfo<Dimension>;
	    Rows: IDataSectionInfo<Dimension>;
	    Weight: IDataSectionInfo<Measure>;
	    Color: IDataSectionInfo<Measure>;
	    AttributeDimension: IDataSectionInfo<Dimension>;
	    Argument: IDataSectionInfo<Dimension>;
	    AxisXMeasure: IDataSectionInfo<Measure>;
	    AxisYMeasure: IDataSectionInfo<Measure>;
	};
	export interface ISurfaceConstructor {
	    new (dashboardItem: DashboardItem, dashboardModel: Dashboard, dataSourceBrowser: DataSourceBrowser): any;
	}
	export class SurfaceItemsFactory {
	    private _itemsMap;
	    register(dashboardItemType: string, surfaceTypeConstructor: ISurfaceConstructor): void;
	    createSurfaceItem<T extends DataDashboardItem>(dashboardItem: T, dashboardModel: Dashboard, dataSourceBrowser: DataSourceBrowser): DataDashboardItemSurface<T>;
	}
	export var surfaceItemsFactory: SurfaceItemsFactory;

}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import GroupItem = DevExpress.Dashboard.Model.GroupItem;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import BaseItemSurface = DevExpress.Dashboard.Internal.Designer.BaseItemSurface;
	export class GroupItemSurface extends BaseItemSurface<GroupItem> {
	    constructor(dashboardItem: GroupItem, dashboardModel: Dashboard, dataSourceBrowser: DataSourceBrowser);
	    getPropertiesComposer(): DashboardItemPropertiesComposer<GroupItem>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {


    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import IDataSourceConsumer = DevExpress.Dashboard.Model.IDataSourceConsumer;
	export class FieldListPicker {
	    disabled: ko.Observable<boolean>;
	    constructor(dataSourceBrowser: DataSourceBrowser, _value: ko.Observable<string>, model: IDataSourceConsumer, disabled: ko.Observable<boolean>);
	    itemsProvider: any;
	    treeListController: DashboardTreeListFieldController;
	    pathToMembers: ko.Computed<string>;
	    value: ko.Computed<string>;
	    displayValue: ko.Computed<string>;
	} class DashboardTreeListFieldController extends DevExpress.Analytics.Widgets.Internal.TreeListController {
	    private _value;
	    constructor(_value: ko.Observable<string>);
	    hasItems(item: DevExpress.Analytics.Utils.IDataMemberInfo): boolean;
	    canSelect(value: DevExpress.Analytics.Widgets.Internal.TreeListItemViewModel): boolean;
	    select(value: DevExpress.Analytics.Widgets.Internal.TreeListItemViewModel): void;
	}
	export {};

}
declare module DevExpress.Dashboard.Internal.Designer {
	export {};

}
declare module DevExpress.Dashboard.Internal.Designer {

    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import CalculatedField = DevExpress.Dashboard.Model.CalculatedField;
	export class CalcFieldEditor {
	    private dataSourceBrowser;
	    viewModel: ko.Observable<CalcFieldEditorViewModel>;
	    constructor(dataSourceBrowser: DataSourceBrowser);
	    canAddCalculatedField(dataSourceName: string): boolean;
	    showAddDialog(dataSourceName: string, dataMemberName: string): JQuery.Promise<CalculatedField, any, any>;
	    showEditDialog(calculatedField: CalculatedField, dataSourceName: string, dataMemberName: string): JQueryPromise<CalculatedField>;
	    removeCalcField(calculatedField: CalculatedField, dataSourceName: string): JQueryPromise<CalculatedField>;
	    private show;
	}
	export class CalcFieldEditorViewModel {
	    toolbarItems: any[];
	    expressionEditable: any;
	    getInfo: Function;
	    nameValidationRules: Array<any>;
	    calculatedField: CalculatedField;
	    dataMember: ko.Observable<string>;
	    fieldType: ko.Observable<string>;
	    availableTypes: Array<string>;
	    name: ko.Observable<string>;
	    expression: ko.Observable<string>;
	    isCalcFieldNameValid: ko.Observable<boolean>;
	    popupVisible: ko.Observable<boolean>;
	    constructor(calculatedField: CalculatedField, dataSourceBrowser: DataSourceBrowser, dataSourceName: string, onSave: (calcField: CalculatedField) => void, onBeforeSave?: () => void);
	}

}
declare module DevExpress.Dashboard.Internal.Model {

    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    import IDimensionDefinition = DevExpress.Dashboard.Model.IDimensionDefinition;
	export class DimensionDefinition extends SerializableModel implements IDimensionDefinition {
	    constructor(model?: any, serializer?: DevExpress.Analytics.Utils.IModelSerializer, info?: DevExpress.Analytics.Utils.ISerializationInfoArray);
	    dataMember: ko.Observable<string>;
	    dateTimeGroupInterval: ko.Observable<string>;
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}

}
declare module DevExpress.Dashboard.Model {


    import Calculation = DevExpress.Dashboard.Model.Calculation;
    import WindowDefinition = DevExpress.Dashboard.Model.WindowDefinition;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    import IDimensionDefinition = DevExpress.Dashboard.Model.IDimensionDefinition;
	export class MeasureDefinition extends SerializableModel {
	    private static _constructFilteredName;
	    displayText: ko.Computed<string>;
	    dataMember: ko.Observable<string>;
	    summaryType: ko.Observable<string>;
	    calculation: Calculation;
	    windowDefinition: WindowDefinition;
	    expression: ko.Observable<string>;
	    filterString: ko.Observable<string>;
	    definitions: ko.ObservableArray<IDimensionDefinition>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    readonly _id: string;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let customItemWindowDefinitionSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let customItemType: IDashboardSerializationInfo;
	export let sliceTables: IDashboardSerializationInfo;
	export let interactivityTargets: IDashboardSerializationInfo;
	export let coloringDimensions: IDashboardSerializationInfo;
	export let coloringMeasures: IDashboardSerializationInfo;
	export let customDashboardItemSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let dimensions: IDashboardSerializationInfo;
	export let measures: IDashboardSerializationInfo;
	export let sliceTableName: IDashboardSerializationInfo;
	export let sliceTableSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let listBoxType: IDashboardSerializationInfo;
	export let listBoxDashboardItemSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let autoExpand: IDashboardSerializationInfo;
	export let treeViewDashboardItemSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let value: IDashboardSerializationInfo;
	export let geoPointMapDashboardItemSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let urlPath: IDashboardSerializationInfo;
	export let image64: IDashboardSerializationInfo;
	export let imageType: IDashboardSerializationInfo;
	export let sizeMode: IDashboardSerializationInfo;
	export let horizontalAlignment: IDashboardSerializationInfo;
	export let verticalAlignment: IDashboardSerializationInfo;
	export let imageDashboardItemSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let imageItem: IDashboardSerializationInfo;
	export let dataBindingMode: IDashboardSerializationInfo;
	export let uriPattern: IDashboardSerializationInfo;
	export let boundImageDashboardItemSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let textBoxText: IDashboardSerializationInfo;
	export let textBoxValues: IDashboardSerializationInfo;
	export let textBoxDashboardItemSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let treeMapvalues: IDashboardSerializationInfo;
	export let treeMapArgumentsMeta: IDashboardSerializationInfo;
	export let layoutAlgorithm: IDashboardSerializationInfo;
	export let layoutDirection: IDashboardSerializationInfo;
	export let tilesLabelContentType: IDashboardSerializationInfo;
	export let tilesTooltipContentType: IDashboardSerializationInfo;
	export let groupsLabelContentType: IDashboardSerializationInfo;
	export let groupsTooltipContentType: IDashboardSerializationInfo;
	export let treemapDashboardItemSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Metadata {
	export let editorTemplates: {
	    radioGroup: any;
	    image: any;
	    text: any;
	    bool: any;
	    boolYesNo: any;
	    boolVisibleHidden: any;
	    boolDiscreteContinuous: any;
	    checkBox: any;
	    list: any;
	    numeric: any;
	    date: any;
	    combobox: any;
	    buttonGroup: any;
	    guid: any;
	};

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let titleText: IDashboardSerializationInfo;
	export let titleVisible: IDashboardSerializationInfo;
	export let includeMasterFilter: IDashboardSerializationInfo;
	export let titleAlignment: IDashboardSerializationInfo;
	export let titleImage64: IDashboardSerializationInfo;
	export let titleImageUrl: IDashboardSerializationInfo;
	export let titleImageType: IDashboardSerializationInfo;
	export let dashboardTitleSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {


    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    import DashboardTitleAlignment = DevExpress.Dashboard.Model.DashboardTitleAlignment;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
	export class DashboardTitle extends SerializableModel {
	    imageType: ko.Observable<string>;
	    text: ko.Observable<string>;
	    visible: ko.Observable<boolean>;
	    includeMasterFilter: ko.Observable<boolean>;
	    alignment: ko.Observable<DashboardTitleAlignment>;
	    image64: ko.Observable<string>;
	    url: ko.Observable<string>;
	    _titleSettings: ObjectPropertiesWrapper;
	    constructor(model: any, serializer?: DevExpress.Analytics.Utils.IModelSerializer, info?: IDashboardSerializationInfoArray);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	}

}
declare module DevExpress.Dashboard.Metadata {
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
	export let currencyCultureName: IDashboardSerializationInfo;
	export let dashboardTitle: IDashboardSerializationInfo;
	export let items: IDashboardSerializationInfo;
	export let parameters: IDashboardSerializationInfo;
	export let colorScheme: IDashboardSerializationInfo;
	export let groups: IDashboardSerializationInfo;
	export let dataSources: IDashboardSerializationInfo;
	export let layout: IDashboardSerializationInfo;
	export let dashboardSerializationsInfo: IDashboardSerializationInfoArray;

}
declare module DevExpress.Dashboard.Model {






































































































































}
declare module DevExpress.Dashboard.Internal.Designer {
    import Color = DevExpress.Dashboard.Model.Color;
    import ColorSchemeEntry = DevExpress.Dashboard.Model.ColorSchemeEntry;
    import DimensionKey = DevExpress.Dashboard.Model.DimensionKey;
    import MeasureDefinition = DevExpress.Dashboard.Model.MeasureDefinition;
    import DimensionDefinition = DevExpress.Dashboard.Internal.Model.DimensionDefinition;
    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import Measure = DevExpress.Dashboard.Model.Measure;
	export class ColorSchemeEntryCreator {
	    constructor();
	    static createMeasureKey(dataMember: string, summaryType: string): MeasureDefinition;
	    static createMeasureDefinitionFromMeasure(measure: Measure, otherDataItems: DataItem[]): MeasureDefinition;
	    static createDimensionDefinitionFromDimension(dimension: Dimension): DimensionDefinition;
	    static createMeasureDefinitionCopy(measureKey: MeasureDefinition): MeasureDefinition;
	    static createDimensionKey(dataMember: string, groupInterval: string, valueType: string, value: any): DimensionKey;
	    addColor(color: Color): ColorSchemeEntryCreator;
	    addItemComponentName(name: string): ColorSchemeEntryCreator;
	    addPaletteIndex(paletteIndex: number): ColorSchemeEntryCreator;
	    addDataSourceName(dataSourceName: string): ColorSchemeEntryCreator;
	    addDataMemberName(dataMember: string): ColorSchemeEntryCreator;
	    addMeasureKey(dataMember: string, summaryType: string): ColorSchemeEntryCreator;
	    addDimensionKey(dataMember: string, groupInterval: string, valueType: string, value: any): ColorSchemeEntryCreator;
	    getEntry(): ColorSchemeEntry;
	    private _entry;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {

    import DashboardUpdateHub = DevExpress.Dashboard.Internal.DashboardUpdateHub;
    import ColorSchemeDefinition = DevExpress.Dashboard.Model.ColorSchemeDefinition;
    import AutoColorSchemeEntry = DevExpress.Dashboard.Model.AutoColorSchemeEntry;
    import ColorSchemeEntry = DevExpress.Dashboard.Model.ColorSchemeEntry;
    import MeasureDefinition = DevExpress.Dashboard.Model.MeasureDefinition;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import KnockoutEntry = DevExpress.Dashboard.Internal.Model.KnockoutEntry;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
	export class ItemColorScheme extends DisposableObject {
	    constructor(item: Dashboard | DataDashboardItem, _requestColorSchemeDelegate: (itemName?: string) => JQueryPromise<{}>, _updateHub: DashboardUpdateHub);
	    customEntries: ko.ObservableArray<ColorSchemeEntry>;
	    generatedEntries: ko.ObservableArray<ColorSchemeEntry>;
	    componentName: string;
	    name: string;
	    allEntries: ko.Computed<ColorSchemeEntry[]>;
	}
	export class ColorSchemeModel {
	    private dashboard;
	    private _requestColorSchemeDelegate;
	    private _updateHub;
	    constructor(dashboard: Dashboard, _requestColorSchemeDelegate: (itemName?: string) => JQueryPromise<{}>, _updateHub: DashboardUpdateHub);
	    createItemColorScheme(item: DataDashboardItem): void;
	    getScheme(componentName?: string): ko.ObservableArray<ColorSchemeEntry>;
	    isSignatureAutogenerated: (definition: ColorSchemeDefinition) => boolean;
	    removeEntry: (entry: ColorSchemeEntry) => void;
	    removeTable: (definition: ColorSchemeDefinition) => void;
	    retainColorIndex(entry: AutoColorSchemeEntry): void;
	    initNewEntry: () => void;
	    generateDefaultNames(newEntry: ColorSchemeEntry): any[];
	    updateEntry: (entry: ColorSchemeEntry, editedEntry: ColorSchemeEntry) => void;
	    getAvailableMeasureKeys: () => MeasureDefinition[];
	    isEntryAutogenerated(entry: ColorSchemeEntry): boolean;
	    availableSignatures: KnockoutEntry<ColorSchemeDefinition[]>;
	    editableSignatures: KnockoutEntry<ColorSchemeDefinition[]>;
	    selectedSignatures: ko.Observable<ColorSchemeDefinition[]>;
	    selectedSignatureEntries: KnockoutEntry<ColorSchemeEntry[]>;
	    itemColorSchemes: {
	        [key: string]: ItemColorScheme;
	    };
	    allEntries: ko.Computed<ColorSchemeEntry[]>;
	    newEntry: ko.Observable<ColorSchemeEntry>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {

    import Color = DevExpress.Dashboard.Model.Color;
    import ColorSchemeEntry = DevExpress.Dashboard.Model.ColorSchemeEntry;
    import ColorSchemeModel = DevExpress.Dashboard.Internal.Designer.ColorSchemeModel;
	export class ColorPickerModel {
	    private colorSchemeModel;
	    private colorPalette;
	    constructor(colorSchemeModel: ColorSchemeModel, colorPalette: ko.ObservableArray<Color>);
	    target: ko.Observable<HTMLElement>;
	    visible: ko.Observable<boolean>;
	    colorCss: ko.Observable<string>;
	    confirm: () => void;
	    init(entry: ColorSchemeEntry, target?: HTMLElement): void;
	    buttonItems: ko.ObservableArray<{
	        toolbar: string;
	        location: string;
	        widget: string;
	        options: {
	            text: any;
	            onClick: () => void;
	        };
	    }>;
	    private entry;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {

    import Color = DevExpress.Dashboard.Model.Color;
    import ColorSchemeEntry = DevExpress.Dashboard.Model.ColorSchemeEntry;
    import KnockoutEntry = DevExpress.Dashboard.Internal.Model.KnockoutEntry;
    import FormAdapterEditor = DevExpress.Dashboard.Internal.Designer.FormAdapterEditor;
    import ColorPickerModel = DevExpress.Dashboard.Internal.Designer.ColorPickerModel;
	interface UniqueColorValue {
	    id: string;
	    displayValue: string;
	}
	export class ColorEntryTreeItem {
	    value: string;
	    uniqueKey: string;
	    entry: ColorSchemeEntry;
	    constructor(value: string, uniqueKey: string, entry: ColorSchemeEntry, editColor: (entry: ColorSchemeEntry, event: JQueryEventObject) => void, entryComputedColor: Color);
	    editColor: any;
	    color: string;
	    items: ColorEntryTreeItem[];
	    expanded: boolean;
	    custom: boolean;
	}
	export interface ColorTreeViewModelOptions {
	    dataSource: KnockoutEntry<ColorSchemeEntry[]>;
	    editColor: (entry: ColorSchemeEntry, event: JQueryEventObject) => void;
	    colorPalette: ko.ObservableArray<Color>;
	    allowModify?: boolean;
	    selectedEntry?: KnockoutEntry<ColorSchemeEntry>;
	    addNewEntry?: () => void;
	    removeEntry?: any;
	    colorPickerModel?: ko.Computed<ColorPickerModel>;
	}
	export class ColorTreeViewModel {
	    static construct(values: Array<UniqueColorValue>, children: ColorEntryTreeItem[], entry: ColorSchemeEntry, editColor: (entry: ColorSchemeEntry, event: JQueryEventObject) => void, entryComputedColor: Color): void;
	    constructor(params: ColorTreeViewModelOptions);
	    addNewEntry: () => void;
	    removeItem: (item: ColorEntryTreeItem) => void;
	    allowAddNewEntry: ko.Computed<boolean>;
	    dataSource: ko.Computed<ColorEntryTreeItem[]>;
	    isTreeMode: ko.Computed<boolean>;
	    colorPickerModel: ko.Computed<ColorPickerModel>;
	    allowModify: boolean;
	    selectedTreeItems: ko.Observable<ColorEntryTreeItem[]>;
	    private selectedEntry;
	    private removeEntry;
	    onItemSelectionChanged: (e: any) => void;
	}
	export const colorSchemeTreeViewEditor: FormAdapterEditor<ColorTreeViewModelOptions>;
	export {};

}
declare module DevExpress.Dashboard.Internal.Designer {

    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Color = DevExpress.Dashboard.Model.Color;
    import ColorSchemeEntry = DevExpress.Dashboard.Model.ColorSchemeEntry;
    import DimensionKey = DevExpress.Dashboard.Model.DimensionKey;
    import MeasureDefinition = DevExpress.Dashboard.Model.MeasureDefinition;
	export class EntryEditorViewModel {
	    private colorPalette;
	    constructor(colorPalette: ko.ObservableArray<Color>);
	    editEntry: (dataSourceBrowser: DataSourceBrowser, entry: ColorSchemeEntry, colorByMeasures: boolean, availableMeasures: MeasureDefinition[], updateEntry: (entry: ColorSchemeEntry) => void, isAutoGenerated?: boolean) => void;
	    close: () => void;
	    private subscribeObservables;
	    private validate;
	    private invalidate;
	    visible: ko.Observable<boolean>;
	    entryToEdit: ko.Observable<ColorSchemeEntry>;
	    updateEntry: (entry: ColorSchemeEntry) => void;
	    isAutogenerated: ko.Observable<boolean>;
	    hasMeasures: ko.Observable<boolean>;
	    availableMeasures: ko.ObservableArray<MeasureDefinition>;
	    measuresValidationRules: any[];
	    dimensionEditors: ko.ObservableArray<any>;
	    dimensionKeys: ko.ObservableArray<DimensionKey>;
	    measureKeys: ko.ObservableArray<MeasureDefinition>;
	    selectedMeasuresIds: ko.Computed<Array<any>>;
	    color: ko.Observable<string>;
	    private _subscriptions;
	    private _validationGroupName;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {

    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import DashboardItemFormatRule = DevExpress.Dashboard.Model.DashboardItemFormatRule;
    import DateTimeGroupInterval = DevExpress.Dashboard.Model.DateTimeGroupInterval;
    import CardItemDeltaFormatRule = DevExpress.Dashboard.Model.CardItemDeltaFormatRule;
    import CardItemFormatRule = DevExpress.Dashboard.Model.CardItemFormatRule;
    import CellsItemFormatRule = DevExpress.Dashboard.Model.CellsItemFormatRule;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import ObjectPropertiesInfo = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesInfo;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    import IComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IComposeTabsArgs;
    import IDetailsPropertiesComposerBase = DevExpress.Dashboard.Internal.Designer.IDetailsPropertiesComposerBase;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import ConditionTypePropertyName = DevExpress.Dashboard.Internal.Designer.ConditionTypePropertyName;
	export interface KeyText {
	    uniqueName: string | ko.Observable<string>;
	    displayName: string | ko.Observable<string>;
	}
	export interface FormatRulePropertiesComposerOptions<TRule extends DashboardItemFormatRule, TDashboardItem extends DataDashboardItem> {
	    conditionTypeFilter?: (conditionTypePropertyName: ConditionTypePropertyName) => boolean;
	    createDataTypeObservable: (model: TRule, dashboardItem: TDashboardItem, dataSourceBrowser: DataSourceBrowser) => ConditionEditorDataType;
	    getCommonFormatRuleProperties: (model: TRule, dashboardItem: TDashboardItem, dataSourceBrowser: DataSourceBrowser, ruleAdded?: JQueryCallback) => ObjectPropertiesInfo<TRule>;
	    getConditionFormatRuleProperties: (model: TRule, dashboardItem: TDashboardItem, dataSourceBrowser: DataSourceBrowser) => ObjectPropertiesInfo<TRule>;
	    getMiscFormatRuleProperties: (model: TRule, dashboardItem: TDashboardItem, dataSourceBrowser: DataSourceBrowser) => ObjectPropertiesInfo<TRule>;
	}
	export class FormatRulePropertiesComposer<TRule extends DashboardItemFormatRule, TDashboardItem extends DataDashboardItem> implements IDetailsPropertiesComposerBase<DashboardItemFormatRule, FormatRuleComposeTabsArgs<TDashboardItem>> {
	    private _options;
	    constructor(_options: FormatRulePropertiesComposerOptions<TRule, TDashboardItem>);
	    composeTabs(model: TRule, args: FormatRuleComposeTabsArgs<TDashboardItem>): AccordionTab[];
	    private _fillCommonFormatRuleCommonWrapper;
	    private _fillConditionWrapper;
	    protected _fillMiscWrapper(tab: AccordionTab, model: TRule, dashboardItem: TDashboardItem, dataSourceBrowser: DataSourceBrowser): void;
	}
	export function createDeltaDataTypeObservable(model: CardItemDeltaFormatRule, dashboardItem: DataDashboardItem, dataSourceBrowser: DataSourceBrowser): ConditionEditorDataType;
	export interface ConditionEditorDataType {
	    dataType: ko.Observable<string>;
	    dateTimeGroupInterval: ko.Observable<DateTimeGroupInterval>;
	}
	export function createDataTypeObservable(formatRule: CellsItemFormatRule | CardItemFormatRule, dashboardItem: DataDashboardItem, dataSourceBrowser: DataSourceBrowser): ConditionEditorDataType;
	export function addConditionEditor(wrapper: ObjectPropertiesWrapper<DashboardItemFormatRule>, dataTypeInfo: ConditionEditorDataType, formatRuleModel: DashboardItemFormatRule, dashboardItem: DataDashboardItem, requestRecalculation: JQueryCallback, specificTypeChanged: () => void, conditionTypeFilter?: (conditionTypePropertyName: ConditionTypePropertyName) => boolean): void;
	export function getCommonCellsFormatRuleProperties<TDashboardItem extends DataDashboardItem>(formatRule: CellsItemFormatRule, dashboardItem: TDashboardItem, getDataItems: () => KeyText[], getApplyToDataItems: () => KeyText[]): ObjectPropertiesInfo<CellsItemFormatRule>;
	export interface FormatRuleComposeTabsArgs<TDashboardItem extends DataDashboardItem> extends IComposeTabsArgs {
	    dashboardItem: TDashboardItem;
	    dataSourceBrowser: DataSourceBrowser;
	    requestRecalculation: JQueryCallback;
	    specificTypeChanged: () => void;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {

    import CardItemDeltaFormatRule = DevExpress.Dashboard.Model.CardItemDeltaFormatRule;
    import CardItemFormatRule = DevExpress.Dashboard.Model.CardItemFormatRule;
    import DashboardItemFormatRule = DevExpress.Dashboard.Model.DashboardItemFormatRule;
    import CardItem = DevExpress.Dashboard.Model.CardItem;
    import ConditionTypePropertyName = DevExpress.Dashboard.Internal.Designer.ConditionTypePropertyName;
    import FormatRulePropertiesComposer = DevExpress.Dashboard.Internal.Designer.FormatRulePropertiesComposer;
	export function isDataItemFormatRuleAvaliable(dashboardItem: CardItem): boolean;
	export function createCardItemFormatRulePropertiesComposer(selectedRuleContainer: ko.Observable<DashboardItemFormatRule>): FormatRulePropertiesComposer<CardItemFormatRule, CardItem>;
	export function isDeltaFormatRuleAvaliable(dashboardItem: CardItem): boolean;
	export function createCardItemDeltaFormatRulePropertiesComposer(selectedRuleContainer: ko.Observable<DashboardItemFormatRule>): FormatRulePropertiesComposer<CardItemDeltaFormatRule, CardItem>;
	export let cardItemConditionTypeFilter: (conditionTypePropertyName: ConditionTypePropertyName) => boolean;

}
declare module DevExpress.Dashboard.Internal.Designer {
    import GridItemFormatRule = DevExpress.Dashboard.Model.GridItemFormatRule;
    import GridItem = DevExpress.Dashboard.Model.GridItem;
    import FormatRulePropertiesComposer = DevExpress.Dashboard.Internal.Designer.FormatRulePropertiesComposer;
	export function createGridItemFormatRulePropertiesComposer(): FormatRulePropertiesComposer<GridItemFormatRule, GridItem>;

}
declare module DevExpress.Dashboard.Internal.Designer {
    import PivotItemFormatRule = DevExpress.Dashboard.Model.PivotItemFormatRule;
    import PivotItem = DevExpress.Dashboard.Model.PivotItem;
    import FormatRulePropertiesComposer = DevExpress.Dashboard.Internal.Designer.FormatRulePropertiesComposer;
	export function createPivotItemFormatRulePropertiesComposer(): FormatRulePropertiesComposer<PivotItemFormatRule, PivotItem>;

}
declare module DevExpress.Dashboard.Internal.Designer {

    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import IDisposable = DevExpress.Dashboard.Model.IDisposable;
    import DashboardItemFormatRule = DevExpress.Dashboard.Model.DashboardItemFormatRule;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import PropertiesController = DevExpress.Dashboard.Internal.Designer.PropertiesController;
    import CollectionEditorEditItemArguments = DevExpress.Dashboard.Internal.Designer.CollectionEditorEditItemArguments;
	export class FormatRuleSurface implements IDisposable {
	    model: ko.Observable<DashboardItemFormatRule>;
	    dashboardItem: DataDashboardItem;
	    dataSourceBrowser: DataSourceBrowser;
	    propertiesController: PropertiesController;
	    private _disposables;
	    constructor(model: ko.Observable<DashboardItemFormatRule>, dashboardItem: DataDashboardItem, dataSourceBrowser: DataSourceBrowser, propertiesController: PropertiesController);
	    updatePropertiesTabs(requestRecalculation: JQueryCallback): void;
	    startEditing(args: CollectionEditorEditItemArguments): void;
	    dispose(): void;
	}

}
declare module DevExpress.Dashboard.Designer {

	export function ToDataSourceTypeNumber(dashboardType: DashboardDataSourceType): number;
	export function ToDashboardDataSourceType(typeNumber: number): DashboardDataSourceType;
	export type DashboardDataSourceType = 'Sql' | 'Olap' | 'Json';
	export interface IOlapDataSourceWizardState {
	    connectionName?: string;
	}
	export interface IDashboardDataSourceWizardState extends DevExpress.Analytics.Wizard.IDataSourceWizardState {
	    dashboardDataSourceType?: DashboardDataSourceType;
	    olapDataSourceWizard?: IOlapDataSourceWizardState;
	}
	export interface IDashboardConnectionStringDefinition extends DevExpress.Analytics.Wizard.IConnectionStringDefinition {
	    connectionType?: DashboardDataSourceType;
	}
	export interface IDashboardDataSourceWizardConnectionStrings extends DevExpress.Analytics.Wizard.IDataSourceWizardConnectionStrings {
	    olap?: IDashboardConnectionStringDefinition[];
	}

}
declare module DevExpress.Dashboard.Internal.Designer {


    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import IDashboardDataSourceWizardSettings = DevExpress.Dashboard.Designer.IDashboardDataSourceWizardSettings;
    import IDashboardDataSourceWizardConnectionStrings = DevExpress.Dashboard.Designer.IDashboardDataSourceWizardConnectionStrings;
	export class DashboardRequestWrapper extends DevExpress.QueryBuilder.Utils.RequestWrapper {
	    private dashboardControl;
	    constructor(dashboardControl: DashboardControl);
	    _sendRequest(settings: DevExpress.Analytics.Internal.IAjaxSettings): JQuery.Promise<any, any, any>;
	    sendRequest(action: string, arg: string): JQuery.Promise<any, any, any>;
	}
	export class DashboardDataSourceWizardOptions extends DevExpress.Analytics.Wizard._DataSourceWizardOptions {
	    constructor();
	    connectionStrings: IDashboardDataSourceWizardConnectionStrings;
	    wizardSettings: IDashboardDataSourceWizardSettings;
	}
	export class DashboardMultiQueryDataSourceWizardOptions extends DevExpress.Analytics.Wizard._MultiQueryDataSourceWizardOptions {
	    constructor();
	    connectionStrings: IDashboardDataSourceWizardConnectionStrings;
	    wizardSettings: IDashboardDataSourceWizardSettings;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {

    import Parameter = DevExpress.Dashboard.Model.Parameter;
	export class ParametersItemProvider {
	    private dashboardParameters;
	    constructor(dashboardParameters?: Array<Parameter>);
	    getItems(pathRequest: DevExpress.Analytics.Utils.PathRequest): JQuery.Promise<any, any, any>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {

    import DashboardRequestWrapper = DevExpress.Dashboard.Internal.Designer.DashboardRequestWrapper;
	export let JsonDataSourceWizardSettings: {
	    allowObjectPropertiesAsRoot: boolean;
	};
	export function _registerChooseJsonSchemaPage(factory: DevExpress.Analytics.Wizard.PageFactory, requestWrapper: DashboardRequestWrapper): void;

}
declare module DevExpress.Dashboard.Internal.Designer {

    import DashboardRequestWrapper = DevExpress.Dashboard.Internal.Designer.DashboardRequestWrapper;
	export class EditJsonDataSourceWizardIterator extends DevExpress.Analytics.Wizard.PageIterator {
	    constructor(factory: DevExpress.Analytics.Wizard.PageFactory, stateManager: DevExpress.Analytics.Wizard.StateManager);
	    getNextPageId(pageId: string): string;
	}
	export class EditJsonDataSourceWizard extends DevExpress.Analytics.Wizard.PopupWizard {
	    title: any;
	    _container: (element: any) => JQuery<HTMLElement>;
	    _extendCssClass: string;
	}
	export function createEditJsonDataSourceWizard(requestWrapper: DashboardRequestWrapper): EditJsonDataSourceWizard;

}
declare module DevExpress.Dashboard.Designer {
	export const DataSourceWizardPageId: {
	    ChooseDataSourceTypePage: string;
	};
	export const OlapDataSourceWizardPageId: {
	    ChooseConnectionPage: string;
	};

}
declare module DevExpress.Dashboard.Designer {

    import IDashboardDataSourceWizardConnectionStrings = DevExpress.Dashboard.Designer.IDashboardDataSourceWizardConnectionStrings;
    import DashboardDataSourceWizardOptions = DevExpress.Dashboard.Internal.Designer.DashboardDataSourceWizardOptions;
	export class DashboardChooseDataSourceTypePage extends DevExpress.Analytics.Wizard.ChooseDataSourceTypePage {
	    connectionStrings: IDashboardDataSourceWizardConnectionStrings;
	    constructor(_wizardOptions: DevExpress.Analytics.Wizard._DataSourceWizardOptions);
	    protected _createTypeItems(): DevExpress.Analytics.Wizard.ITypeItem[];
	}
	export function _registerChooseDataSourceTypePage(factory: DevExpress.Analytics.Wizard.PageFactory, wizardOptions: DashboardDataSourceWizardOptions): void;

}
declare module DevExpress.Dashboard.Designer {


    import IDashboardConnectionStringDefinition = DevExpress.Dashboard.Designer.IDashboardConnectionStringDefinition;
    import IOlapDataSourceWizardState = DevExpress.Dashboard.Designer.IOlapDataSourceWizardState;
	export class DashboardChooseOlapConnectionStringPage extends DevExpress.Analytics.Wizard.WizardPageBase<IOlapDataSourceWizardState, IOlapDataSourceWizardState> {
	    _selectedConnectionString: ko.ObservableArray<IDashboardConnectionStringDefinition>;
	    _connectionStrings: IDashboardConnectionStringDefinition[];
	    constructor(connectionStrings: IDashboardConnectionStringDefinition[]);
	    canNext(): boolean;
	    canFinish(): boolean;
	    commit(): JQuery.Promise<IOlapDataSourceWizardState, any, any>;
	    initialize(state: IOlapDataSourceWizardState): JQueryPromise<any>;
	}
	export function _registerOlapConnectionStringsPage(factory: DevExpress.Analytics.Wizard.PageFactory, connectionStrings: IDashboardConnectionStringDefinition[]): void;

}
declare module DevExpress.Dashboard.Internal.Designer {


    import Parameter = DevExpress.Dashboard.Model.Parameter;
    import DashboardRequestWrapper = DevExpress.Dashboard.Internal.Designer.DashboardRequestWrapper;
    import ParametersItemProvider = DevExpress.Dashboard.Internal.Designer.ParametersItemProvider;
	export function createQueryPageCallback(requestWrapper: DashboardRequestWrapper, parameters: ko.Computed<Array<Parameter>>, customQueriesPreset?: any): {
	    customQueriesPreset: any;
	    customizeQBInitData: (initData: any) => any;
	    selectStatement: (connection: any, query: any) => JQueryPromise<DevExpress.QueryBuilder.Utils.ISelectStatementResponse>;
	    getItemsProviderCallback: () => ParametersItemProvider;
	};

}
declare module DevExpress.Dashboard.Internal.Designer {

	export class DataSourceWizardPageIteratorBase extends DevExpress.Analytics.Wizard.PageIterator {
	    getInitialPage(): string;
	    getNextPageId(pageId: string): string;
	    getConfigureQueryPage(): string;
	    getConfigureSqlParametersPage(): string;
	    getConfigureObjectParametersPage(): string;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {


    import Parameter = DevExpress.Dashboard.Model.Parameter;
    import IDashboardDataSourceWizardSettings = DevExpress.Dashboard.Designer.IDashboardDataSourceWizardSettings;
    import DashboardDataSourceType = DevExpress.Dashboard.Designer.DashboardDataSourceType;
    import IDashboardDataSourceWizardConnectionStrings = DevExpress.Dashboard.Designer.IDashboardDataSourceWizardConnectionStrings;
    import IDashboardDataSourceWizardState = DevExpress.Dashboard.Designer.IDashboardDataSourceWizardState;
    import DashboardRequestWrapper = DevExpress.Dashboard.Internal.Designer.DashboardRequestWrapper;
    import DataSourceWizardPageIteratorBase = DevExpress.Dashboard.Internal.Designer.DataSourceWizardPageIteratorBase;
	export class DashboardQueryWizardIterator extends DataSourceWizardPageIteratorBase {
	    private _createNew;
	    constructor(_createNew: boolean, factory: DevExpress.Analytics.Wizard.PageFactory, stateManager: DevExpress.Analytics.Wizard.StateManager);
	    getInitialPage(): string;
	}
	export class DashboardQueryWizard extends DevExpress.Analytics.Wizard.PopupWizard {
	    title: any;
	    _container: (element: any) => JQuery<any>;
	    _extendCssClass: string;
	}
	export class DashboardDataSourceWizardState implements IDashboardDataSourceWizardState {
	    sqlDataSourceWizard: {};
	    jsonDataSourceWizard: {};
	    olapDataSourceWizard: {};
	    objectDataSourceWizard: {};
	    dataSourceType: number;
	    dashboardDataSourceType: DashboardDataSourceType;
	}
	export function createDashboardQueryWizard(requestWrapper: DashboardRequestWrapper, parameters: ko.Computed<Parameter[]>, disableCustomSql: boolean, allowCreateNewJsonConnection: boolean, wizardSettings: IDashboardDataSourceWizardSettings, dashboardConnectionStrings: IDashboardDataSourceWizardConnectionStrings): DashboardQueryWizard;

}
declare module DevExpress.Dashboard.Internal.Designer {


    import Parameter = DevExpress.Dashboard.Model.Parameter;
    import IDashboardDataSourceWizardSettings = DevExpress.Dashboard.Designer.IDashboardDataSourceWizardSettings;
    import IDashboardDataSourceWizardConnectionStrings = DevExpress.Dashboard.Designer.IDashboardDataSourceWizardConnectionStrings;
    import DashboardRequestWrapper = DevExpress.Dashboard.Internal.Designer.DashboardRequestWrapper;
    import DataSourceWizardPageIteratorBase = DevExpress.Dashboard.Internal.Designer.DataSourceWizardPageIteratorBase;
    import DashboardQueryWizard = DevExpress.Dashboard.Internal.Designer.DashboardQueryWizard;
	export class DashboardMultiQueryWizardIterator extends DataSourceWizardPageIteratorBase {
	    getInitialPage(): string;
	    getConfigureQueryPage(): string;
	    getConfigureSqlParametersPage(): string;
	}
	export class DashboardMultiQueryDataSourceWizard extends DashboardQueryWizard {
	    static customQueriesPreset: (dataSource: DevExpress.Analytics.Data.SqlDataSource) => JQueryPromise<DevExpress.Analytics.Data.TableQuery[]>;
	    _extendCssClass: string;
	    constructor(pageFactory: any);
	}
	export function createDashboardMultiQueryWizard(requestWrapper: DashboardRequestWrapper, parameters: ko.Computed<Parameter[]>, disableCustomSql: boolean, allowCreateNewJsonConnection: boolean, wizardSettings: IDashboardDataSourceWizardSettings, dashboardConnectionStrings: IDashboardDataSourceWizardConnectionStrings): DashboardMultiQueryDataSourceWizard;

}
declare module DevExpress.Dashboard.Designer {


    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import EventSubscriber = DevExpress.Dashboard.Internal.EventSubscriber;
    import OptionsManager = DevExpress.Dashboard.Internal.OptionsManager;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DataSource = DevExpress.Dashboard.Model.DataSource;
    import JsonDataSource = DevExpress.Dashboard.Model.JsonDataSource;
    import SqlDataSource = DevExpress.Dashboard.Model.SqlDataSource;
    import Parameter = DevExpress.Dashboard.Model.Parameter;
    import IDashboardDataSourceWizardConnectionStrings = DevExpress.Dashboard.Designer.IDashboardDataSourceWizardConnectionStrings;
    import DashboardRequestWrapper = DevExpress.Dashboard.Internal.Designer.DashboardRequestWrapper;
    import DashboardQueryWizard = DevExpress.Dashboard.Internal.Designer.DashboardQueryWizard;
	export interface DataSourceWizardExtensionOptions {
	    enableCustomSql?: boolean;
	    allowCreateNewJsonConnection?: boolean;
	    wizardSettings?: IDashboardDataSourceWizardSettings;
	    onCustomizeDataSourceWizard?: (args: IDashboardWizardEventArgs) => void;
	}
	export interface DataSourceWizardExtensionEvents {
	    customizeDataSourceWizard: IDashboardWizardEventArgs;
	}
	export interface IDashboardDataSourceWizardSettings extends DevExpress.Analytics.Wizard.IDataSourceWizardSettings {
	    enableOlapDataSource?: boolean;
	}
	export type DataSourceWizardType = 'EditQueryWizard' | 'EditJsonDataSourceWizard' | 'DataSourceWizard' | 'MultiQueryDataSourceWizard';
	export interface IDashboardWizardEventArgs extends DevExpress.Analytics.Wizard.IWizardEventArgs<DevExpress.Analytics.Wizard.BaseWizard> {
	    type: DataSourceWizardType;
	}
	export class DataSourceWizardExtension implements IExtension {
	    private dashboardControl;
	    private static _convertDataSource;
	    static _renameDataMember(dashboard: Dashboard, dataSource: DataSource, oldDataMember: string, newDataMember: string): void;
	    private _subscriptions;
	    protected _requestWrapper: DashboardRequestWrapper;
	    private _getConnectionStringsCallback;
	    private _loadingPanelVisible;
	    private _wizardElement;
	    private _defaultOptions;
	    protected _dashboardParameters: ko.Computed<Array<Parameter>>;
	    protected _optionsManager: OptionsManager<DataSourceWizardExtensionOptions, DataSourceWizardExtensionEvents>;
	    private _customTemplate;
	    isCustomSqlEnabled: boolean;
	    name: string;
	    on: EventSubscriber<DataSourceWizardExtensionEvents>;
	    off: EventSubscriber<DataSourceWizardExtensionEvents>;
	    constructor(dashboardControl: DashboardControl, options?: DataSourceWizardExtensionOptions);
	    start(): void;
	    stop(): void;
	    private _createEditQueryWizard;
	    protected createDataSourceWizard(connectionStrings: IDashboardDataSourceWizardConnectionStrings): DashboardQueryWizard;
	    private _createEditJsonDataSourceWizard;
	    protected _customizeDataSourceWizard(customizationType: DataSourceWizardType, wizard: DashboardQueryWizard): void;
	    protected createWizardIterator(factory: DevExpress.Analytics.Wizard.PageFactory, stateManager: DevExpress.Analytics.Wizard.StateManager): DevExpress.Analytics.Wizard.PageIterator;
	    showDataSourceCreatingDialog(): JQueryPromise<DataSource>;
	    private _initializeDataSourceWizard;
	    showSqlQueryEditingDialog(dashboardSqlDataSource: SqlDataSource, queryName?: string): void;
	    _showEditJsonDataSourceDialog(jsonDataSource: JsonDataSource): void;
	    private _renderAndStartWizard;
	}
	export class MultiQueryDataSourceWizardExtension extends DataSourceWizardExtension {
	    constructor(dashboardControl: DashboardControl, options?: DataSourceWizardExtensionOptions);
	    protected createWizardIterator(factory: DevExpress.Analytics.Wizard.PageFactory, stateManager: DevExpress.Analytics.Wizard.StateManager): DevExpress.Analytics.Wizard.PageIterator;
	    protected createDataSourceWizard(connectionStrings: IDashboardDataSourceWizardConnectionStrings): DashboardQueryWizard;
	}

}
declare module DevExpress.Dashboard.Designer {

    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import DataSource = DevExpress.Dashboard.Model.DataSource;
	export class AvailableDataSourcesExtension implements IExtension {
	    private dashboardControl;
	    name: string;
	    templateName: string;
	    viewModel: any;
	    private _errorState;
	    private _uiState;
	    constructor(dashboardControl: DashboardControl);
	    start(): void;
	    stop(): void;
	    selectedDataSources: ko.ObservableArray<DataSource>;
	    dataSources: ko.ObservableArray<DataSource>;
	    loadAvailableDataSources(): void;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {


    import DataSource = DevExpress.Dashboard.Model.DataSource;
    import KnockoutEntry = DevExpress.Dashboard.Internal.Model.KnockoutEntry;
    import AvailableDataSourcesExtension = DevExpress.Dashboard.Designer.AvailableDataSourcesExtension;
    import IPopupContentViewModel = DevExpress.Dashboard.Internal.Designer.IPopupContentViewModel;
	export class AddDataSourcePopup implements IPopupContentViewModel {
	    addButtonDisable: ko.Computed<boolean>;
	    title: any;
	    toolbarItems: Array<DevExpress.ui.dxPopupToolbarItem>;
	    template: any;
	    bindingData: any;
	    constructor(accessibleDataSourcesExtension: ko.Computed<AvailableDataSourcesExtension>, addDataSourcesCallback: (d: Array<DataSource>) => void, popupVisible: KnockoutEntry<boolean>);
	}

}
declare module DevExpress.Dashboard.Internal.Designer {



    import DashboardUpdateHub = DevExpress.Dashboard.Internal.DashboardUpdateHub;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import CalculatedField = DevExpress.Dashboard.Model.CalculatedField;
    import DataSource = DevExpress.Dashboard.Model.DataSource;
    import SqlDataSource = DevExpress.Dashboard.Model.SqlDataSource;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import CalcFieldEditor = DevExpress.Dashboard.Internal.Designer.CalcFieldEditor;
    import DataSourceWizardExtension = DevExpress.Dashboard.Designer.DataSourceWizardExtension;
    import AvailableDataSourcesExtension = DevExpress.Dashboard.Designer.AvailableDataSourcesExtension;
    import FieldListItemProvider = DevExpress.Dashboard.Internal.Designer.FieldListItemProvider;
	export interface IDataSourceAction {
	    click: Function;
	    text: string;
	    disabled: ko.Computed<boolean>;
	}
	export interface IEditDataSourceAction {
	    click: Function;
	    text: string;
	    visible: ko.Computed<boolean>;
	}
	export interface IDataSourceBrowserViewModel {
	    selectedDataSource: ko.Observable<DataSource>;
	    canEditDataSource: boolean;
	    canEditCustomSqlQueries: boolean;
	    editQuery(field: string): any;
	    removeQuery(field: string): any;
	    editCalcField(field: CalculatedField): any;
	    removeCalcField(field: CalculatedField): any;
	}
	export interface IDashboardActionInfo {
	    title?: string;
	    icon: string;
	    click: () => void;
	    style?: string;
	}
	export class DataSourceBrowserViewModel extends DisposableObject implements IDataSourceBrowserViewModel {
	    dataSourceBrowser: DataSourceBrowser;
	    dataSourceWizardExtension: ko.Computed<DataSourceWizardExtension>;
	    accessibleDataSourcesExtension: ko.Computed<AvailableDataSourcesExtension>;
	    calcFieldEditor: CalcFieldEditor;
	    constructor(dataSourceBrowser: DataSourceBrowser, dataSourceWizardExtension: ko.Computed<DataSourceWizardExtension>, accessibleDataSourcesExtension: ko.Computed<AvailableDataSourcesExtension>, updateHub: DashboardUpdateHub);
	    _expandQuery(dataSource: SqlDataSource, queryName: string): void;
	    editDataSourceActions: ko.ObservableArray<IEditDataSourceAction>;
	    readonly canEditDataSource: boolean;
	    readonly canEditCustomSqlQueries: boolean;
	    addDataSources: (dataSources: DataSource[]) => void;
	    refreshFieldList(): void;
	    showAddDataSourceForm(): void;
	    addQuery: () => void;
	    editQuery(queryName: string): void;
	    removeQuery(queryName: string): void;
	    editDataSource(): void;
	    dataSourceActions: ko.ObservableArray<IDataSourceAction>;
	    private _removeDataSource;
	    removeDataSource: (dataSource: DataSource) => void;
	    usedDataSourcesExist: () => boolean;
	    availableDataSourcesExist: () => boolean;
	    readonly canAddCalculatedField: boolean;
	    popupContent: ko.Observable<IPopupContentViewModel>;
	    popupVisible: ko.Computed<boolean>;
	    addCalculatedField: () => void;
	    private _onDataSourcePropertyChanged;
	    editCalcField: (field: CalculatedField) => void;
	    removeCalcField: (field: CalculatedField) => void;
	    itemsProvider: FieldListItemProvider;
	    private treeListController;
	    selectedPath: ko.Observable<string>;
	    selectedDataSource: ko.Observable<DataSource>;
	    allowAddQuery: ko.Computed<boolean>;
	    allowEditDataSource: ko.Computed<boolean>;
	    selectedDataSourceComponentName: ko.Computed<string>;
	    filterEditorModel: ko.Computed<DevExpress.Analytics.Widgets.FilterEditor>;
	    editFilter: () => void;
	}
	export interface IPopupContentViewModel {
	    toolbarItems: Array<DevExpress.ui.dxPopupToolbarItem>;
	    title: string;
	    template: string;
	    bindingData?: any;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {


    import IDataField = DevExpress.Dashboard.Internal.Model.IDataField;
    import IDataSourceBrowserViewModel = DevExpress.Dashboard.Internal.Designer.IDataSourceBrowserViewModel;
	export class DataFieldViewModel implements DevExpress.Analytics.Utils.IDataMemberInfo {
	    name: string;
	    displayName: string;
	    hasItems: boolean;
	    specifics: string;
	    field: IDataField;
	    isList: boolean;
	    isCorruptedCalcField: boolean;
	    constructor(name: string, displayName: string, hasItems: boolean, specifics: string, field: IDataField, isList: boolean, isCorruptedCalcField: boolean);
	    style: string;
	    innerActions: ko.ObservableArray<IDataFieldViewModelAction>;
	}
	export interface IDataFieldViewModelAction {
	    click: () => void;
	    icon: string;
	    style?: string;
	}
	export class FieldListItemProvider implements DevExpress.Analytics.Utils.IItemsProvider {
	    private _dataSourceBrowserViewModel;
	    private _getDataFieldArrayCallback;
	    private isFieldValid?;
	    loading: ko.Observable<boolean>;
	    private _changeTrigger;
	    constructor(_dataSourceBrowserViewModel: IDataSourceBrowserViewModel, _getDataFieldArrayCallback: (dataSourceName: string, dataMember: string, fieldPath: string) => JQueryPromise<Array<IDataField>>, isFieldValid?: (field: IDataField) => boolean);
	    triggerItemsChanged(): void;
	    getItems(pathRequest: DevExpress.Analytics.Utils.IPathRequest): JQueryPromise<Array<DevExpress.Analytics.Utils.IDataMemberInfo>>;
	    customizeDataFieldViewModel: (dataField: DataFieldViewModel) => void;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {

    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import DataItemType = DevExpress.Dashboard.Model.DataItemType;
    import IBindingProperty = DevExpress.Dashboard.Model.IBindingProperty;
    import DataField = DevExpress.Dashboard.Internal.Model.DataField;
    import DataItemContainer = DevExpress.Dashboard.Model.DataItemContainer;
    import ICollectionBindingProperty = DevExpress.Dashboard.Internal.Model.ICollectionBindingProperty;
    import IDataItemProvider = DevExpress.Dashboard.Internal.Model.IDataItemProvider;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
	export class DataItemContainerSeed extends DataItemContainer {
	    dataItemType?: DataItemType;
	    _getDataId(): string;
	    constructor(dataItemProvider: IDataItemProvider, dataItemType?: DataItemType);
	    name: ko.Observable<string>;
	    _getContainerType(): string;
	    dataLink: DataItemLink;
	    _getBindingModel(): Array<IBindingProperty>;
	    grow(dataItemProvider: IDataItemProvider, bindingProperty: ICollectionBindingProperty, dataField: DataField): Array<DataItemContainer>;
	    protected _getInfoCore(): IDashboardSerializationInfo[];
	    protected _getDefaultItemType(): string;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {

    import IDisposable = DevExpress.Dashboard.Model.IDisposable;
    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import IBindingProperty = DevExpress.Dashboard.Model.IBindingProperty;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import DataItemContainer = DevExpress.Dashboard.Model.DataItemContainer;
    import IBindingModelProvider = DevExpress.Dashboard.Internal.Model.IBindingModelProvider;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import IPropertiesHolder = DevExpress.Dashboard.Internal.Designer.IPropertiesHolder;
    import DataItemContainerPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DataItemContainerPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
    import IDataItemHolder = DevExpress.Dashboard.Internal.Designer.IDataItemHolder;
    import DataItemSurface = DevExpress.Dashboard.Internal.Designer.DataItemSurface;
	export class DataItemContainerSurface implements IDisposable, IPropertiesHolder, IDataItemHolder {
	    detailsPropertiesComposer: DataItemContainerPropertiesComposer<DataItemContainer>;
	    itemSurface: DataDashboardItemSurface<DataDashboardItem>;
	    private _removeDataItemContainer;
	    private _disposables;
	    constructor(model: DataItemContainer, detailsPropertiesComposer: DataItemContainerPropertiesComposer<DataItemContainer>, itemSurface: DataDashboardItemSurface<DataDashboardItem>, _removeDataItemContainer: (container: DataItemContainer) => void);
	    propertiesTabs: ko.ObservableArray<AccordionTab>;
	    selectItem: (model: IBindingModelProvider, binding: IBindingProperty) => void;
	    model: ko.Observable<DataItemContainer>;
	    containerType: ko.Observable<string>;
	    singleItemSurface: ko.Observable<DataItemSurface>;
	    dataFieldChoosed: JQuery.Callbacks<Function>;
	    private _removeDataItem;
	    removeDataItem: (dataItemLink: DataItemLink) => void;
	    dataItemDisplayNameProvider: (dataItem: DataItem) => string;
	    dataItemErrorFactory(dataItem: DataItem): ko.Observable<boolean>;
	    dispose(): void;
	}

}
declare module DevExpress.Dashboard.Model {


    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import ImageDataBindingMode = DevExpress.Dashboard.Model.ImageDataBindingMode;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import DashboardItemBaseInteractivityOptions = DevExpress.Dashboard.Model.DashboardItemBaseInteractivityOptions;
	export class BoundImageItem extends DataDashboardItem {
	    private __imageItem;
	    imageItem: ko.Observable<Dimension>;
	    interactivityOptions: DashboardItemBaseInteractivityOptions;
	    sizeMode: ko.Observable<string>;
	    horizontalAlignment: ko.Observable<string>;
	    verticalAlignment: ko.Observable<string>;
	    dataBindingMode: ko.Observable<ImageDataBindingMode>;
	    uriPattern: ko.Observable<string>;
	    constructor(dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getInfoCore(): IDashboardSerializationInfo[];
	    _isCalculationSupported(): boolean;
	    _isSortingEnabled(): boolean;
	    _isTopNEnabled(dataItem: Dimension): boolean;
	    protected _getDefaultItemType(): string;
	    protected _getIgnoreMasterFilter(): boolean;
	    protected _updateContentViewModel(content: any): void;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import BoundImageItem = DevExpress.Dashboard.Model.BoundImageItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
	export class BoundImageItemPropertiesComposer extends DashboardItemPropertiesComposer<BoundImageItem> {
	    constructor(customizeHandler: CustomizeDashboardItemTabs);
	    _composeTabsCore(model: BoundImageItem): AccordionTab[];
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import BubbleMapItem = DevExpress.Dashboard.Model.BubbleMapItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import IDashboardItemComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs;
	export class BubleMapItemPropertiesComposer extends DashboardItemPropertiesComposer<BubbleMapItem> {
	    constructor(customizeHandler: CustomizeDashboardItemTabs);
	    _composeTabsCore(model: BubbleMapItem, args: IDashboardItemComposeTabsArgs): AccordionTab[];
	}

}
declare module DevExpress.Dashboard.Internal.Designer {

    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import CardItemFormatRuleBase = DevExpress.Dashboard.Model.CardItemFormatRuleBase;
    import Card = DevExpress.Dashboard.Model.Card;
    import CardItem = DevExpress.Dashboard.Model.CardItem;
    import CardLayoutTemplate = DevExpress.Dashboard.Model.CardLayoutTemplate;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CollectionEditorEditItemArguments = DevExpress.Dashboard.Internal.Designer.CollectionEditorEditItemArguments;
    import CustomizeDataItemContainerTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDataItemContainerTabs;
    import DataItemContainerPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DataItemContainerPropertiesComposer;
    import IDataItemContainerComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDataItemContainerComposeTabsArgs;
	export class CardElementPropertiesComposer extends DataItemContainerPropertiesComposer<Card> {
	    private editTemplateHandler;
	    private editFormat;
	    private applyTemplateToAllCards;
	    editRuleHandler: (selection: CardItemFormatRuleBase, args: CollectionEditorEditItemArguments, container: ko.Observable<CardItemFormatRuleBase>) => void;
	    constructor(customizeHandler: CustomizeDataItemContainerTabs, editTemplateHandler?: (model: any) => void, editFormat?: (model: any) => void, applyTemplateToAllCards?: (template: CardLayoutTemplate) => void, editRuleHandler?: (selection: CardItemFormatRuleBase, args: CollectionEditorEditItemArguments, container: ko.Observable<CardItemFormatRuleBase>) => void);
	    protected _composeTabsCore(model: Card, args: IDataItemContainerComposeTabsArgs): AccordionTab[];
	    getCommonWrapper(model: Card, dashboardItem: DataDashboardItem, dataSourceBrowser: DataSourceBrowser): ObjectPropertiesWrapper<Card>;
	    getSparklineWrapper(model: Card): ObjectPropertiesWrapper<Card>;
	    fillTemplatesTab(tab: AccordionTab, card: Card): void;
	    switchTemplate(card: Card, newTemplate: CardLayoutTemplate): void;
	    getAvailableTemplates(card: Card): any[];
	    getFormatRulesWrapper(model: Card, dashboardItem: CardItem): ObjectPropertiesWrapper<CardItem>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import CardItem = DevExpress.Dashboard.Model.CardItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import IDashboardItemComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs;
	export class CardItemPropertiesComposer extends DashboardItemPropertiesComposer<CardItem> {
	    editRuleHandler: any;
	    constructor(customizeHandler: CustomizeDashboardItemTabs, editRuleHandler: any);
	    _composeTabsCore(model: CardItem, args: IDashboardItemComposeTabsArgs): AccordionTab[];
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import CardLayoutTemplate = DevExpress.Dashboard.Model.CardLayoutTemplate;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import IComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IComposeTabsArgs;
    import IDetailsPropertiesComposerBase = DevExpress.Dashboard.Internal.Designer.IDetailsPropertiesComposerBase;
	export class CardTemplatePropertiesComposer implements IDetailsPropertiesComposerBase<CardLayoutTemplate, ICardLayoutTemplateComposeTabsArgs> {
	    composeTabs(model: CardLayoutTemplate, args: ICardLayoutTemplateComposeTabsArgs): AccordionTab[];
	    private fillLayoutsTab;
	    resetTemplate(template: CardLayoutTemplate): void;
	}
	export interface ICardLayoutTemplateComposeTabsArgs extends IComposeTabsArgs {
	    dimensionNames: string[];
	    applyTemplateToAllCards: (template: CardLayoutTemplate) => void;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import IDataField = DevExpress.Dashboard.Internal.Model.IDataField;
    import ChartItem = DevExpress.Dashboard.Model.ChartItem;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import IDashboardItemComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs;
	export class ChartItemPropertiesComposer extends DashboardItemPropertiesComposer<ChartItem> {
	    constructor(customizeHandler: CustomizeDashboardItemTabs);
	    _getAxisXTabModel(model: ChartItem, dataSourceBrowser: DataSourceBrowser, argumentDataField: IDataField): ObjectPropertiesWrapper;
	    _composeTabsCore(model: ChartItem, args: IDashboardItemComposeTabsArgs): Array<AccordionTab>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import ChartSeries = DevExpress.Dashboard.Model.ChartSeries;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDataItemContainerTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDataItemContainerTabs;
    import DataItemContainerPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DataItemContainerPropertiesComposer;
    import IDataItemContainerComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDataItemContainerComposeTabsArgs;
	export class ChartSeriesPropertiesComposer extends DataItemContainerPropertiesComposer<ChartSeries> {
	    private _containerTypesMap;
	    private _allowConfigurePointLabels;
	    private _allowSecondaryAxis;
	    constructor(customizeHandler: CustomizeDataItemContainerTabs, _containerTypesMap?: any, _allowConfigurePointLabels?: boolean, _allowSecondaryAxis?: boolean);
	    protected _composeTabsCore(model: ChartSeries, args: IDataItemContainerComposeTabsArgs): AccordionTab[];
	    private _fillSeriesTypeWrapper;
	    private _showPointMarkersVisible;
	    protected _showIgnoreEmptyPointsVisible(model: ChartSeries): boolean;
	    private _fillSeriesGeneralTab;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {

    import ChoroplethMap = DevExpress.Dashboard.Model.ChoroplethMap;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import ContainerTypeSelector = DevExpress.Dashboard.Internal.Designer.ContainerTypeSelector;
    import CustomizeDataItemContainerTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDataItemContainerTabs;
    import DataItemContainerPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DataItemContainerPropertiesComposer;
    import IDataItemContainerComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDataItemContainerComposeTabsArgs;
	export class ChoroplethMapElementPropertiesComposer extends DataItemContainerPropertiesComposer<ChoroplethMap> {
	    private editDeltaFormatHandler;
	    constructor(customizeHandler: CustomizeDataItemContainerTabs, editDeltaFormatHandler?: (model: any) => void);
	    protected _composeTabsCore(model: ChoroplethMap, args: IDataItemContainerComposeTabsArgs): AccordionTab[];
	    getMapTypeWrapper(model: any, containerType: ko.Observable<string>): ContainerTypeSelector;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import ChoroplethMapItem = DevExpress.Dashboard.Model.ChoroplethMapItem;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import IDashboardItemComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs;
	export class ChoroplethMapItemPropertiesComposer extends DashboardItemPropertiesComposer<ChoroplethMapItem> {
	    constructor(customizeHandler: CustomizeDashboardItemTabs);
	    _composeTabsCore(model: ChoroplethMapItem, args: IDashboardItemComposeTabsArgs): AccordionTab[];
	    getShapeLabelsWrapper(model: ChoroplethMapItem): ObjectPropertiesWrapper<ChoroplethMapItem>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import DateFilterItem = DevExpress.Dashboard.Model.DateFilterItem;
    import DateTimePeriod = DevExpress.Dashboard.Model.DateTimePeriod;
    import RangeFilterItem = DevExpress.Dashboard.Model.RangeFilterItem;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import IComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IComposeTabsArgs;
    import IDetailsPropertiesComposerBase = DevExpress.Dashboard.Internal.Designer.IDetailsPropertiesComposerBase;
	export class CustomRangePropertiesComposer implements IDetailsPropertiesComposerBase<DateTimePeriod, IDateTimePeriodComposeTabsArgs> {
	    composeTabs(model: DateTimePeriod, args: IDateTimePeriodComposeTabsArgs): AccordionTab[];
	    getCommonWrapper(model: DateTimePeriod, argument: Dimension, rangeFilterItem: RangeFilterItem | DateFilterItem): ObjectPropertiesWrapper;
	}
	export interface IDateTimePeriodComposeTabsArgs extends IComposeTabsArgs {
	    argument: Dimension;
	    rangeFilterItem: RangeFilterItem | DateFilterItem;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import DateFilterItem = DevExpress.Dashboard.Model.DateFilterItem;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import IDashboardItemComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs;
	export class DateFilterItemPropertiesComposer extends DashboardItemPropertiesComposer<DateFilterItem> {
	    editRuleHandler: any;
	    constructor(customizeHandler: CustomizeDashboardItemTabs, editRuleHandler: any);
	    _composeTabsCore(model: DateFilterItem, args: IDashboardItemComposeTabsArgs): AccordionTab[];
	    getLayoutWrapper(model: DateFilterItem): ObjectPropertiesWrapper<DateFilterItem>;
	}

}
declare module DevExpress.Dashboard.Model {


    import ListBoxDashboardItemType = DevExpress.Dashboard.Model.ListBoxDashboardItemType;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import FilterElementItemBase = DevExpress.Dashboard.Model.FilterElementItemBase;
	export class ListBoxItem extends FilterElementItemBase {
	    listBoxType: ko.Observable<ListBoxDashboardItemType>;
	    showAllValue: ko.Observable<boolean>;
	    constructor(dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getInfoCore(): IDashboardSerializationInfo[];
	    protected _getDefaultItemType(): string;
	    protected _allowAllValue(): boolean;
	    protected _isMultiselectable(): boolean;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import FilterElementItemBase = DevExpress.Dashboard.Model.FilterElementItemBase;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
	export class FilterItemPropertiesComposer extends DashboardItemPropertiesComposer<FilterElementItemBase> {
	    constructor(customizeHandler: CustomizeDashboardItemTabs);
	    _composeTabsCore(model: FilterElementItemBase): AccordionTab[];
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import Gauge = DevExpress.Dashboard.Model.Gauge;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDataItemContainerTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDataItemContainerTabs;
    import DataItemContainerPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DataItemContainerPropertiesComposer;
    import IDataItemContainerComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDataItemContainerComposeTabsArgs;
	export class GaugeElementPropertiesComposer extends DataItemContainerPropertiesComposer<Gauge> {
	    private editFormatHandler;
	    constructor(customizeHandler: CustomizeDataItemContainerTabs, editFormatHandler?: (model: any) => void);
	    protected _composeTabsCore(model: Gauge, args: IDataItemContainerComposeTabsArgs): AccordionTab[];
	    getCommonWrapper(model: Gauge, dashboardItem: DataDashboardItem, dataSourceBrowser: DataSourceBrowser): ObjectPropertiesWrapper<Gauge>;
	    getScaleWrapper(model: Gauge): ObjectPropertiesWrapper<Gauge>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import GaugeItem = DevExpress.Dashboard.Model.GaugeItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import ContainerTypeSelector = DevExpress.Dashboard.Internal.Designer.ContainerTypeSelector;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
	export class GaugeItemPropertiesComposer extends DashboardItemPropertiesComposer<GaugeItem> {
	    constructor(customizeHandler: CustomizeDashboardItemTabs);
	    _composeTabsCore(model: GaugeItem): AccordionTab[];
	    getTypeWrapper(model: GaugeItem): ContainerTypeSelector;
	}

}
declare module DevExpress.Dashboard.Model {


    import Measure = DevExpress.Dashboard.Model.Measure;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import GeoPointMapItemBase = DevExpress.Dashboard.Model.GeoPointMapItemBase;
	export class GeoPointMapItem extends GeoPointMapItemBase {
	    private __value;
	    value: ko.Observable<Measure>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getInfoCore(): IDashboardSerializationInfo[];
	    protected _getDefaultItemType(): string;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import GeoPointMapItem = DevExpress.Dashboard.Model.GeoPointMapItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import IDashboardItemComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs;
	export class GeoPointMapItemPropertiesComposer extends DashboardItemPropertiesComposer<GeoPointMapItem> {
	    constructor(customizeHandler: CustomizeDashboardItemTabs);
	    _composeTabsCore(model: GeoPointMapItem, args: IDashboardItemComposeTabsArgs): AccordionTab[];
	}

}
declare module DevExpress.Dashboard.Internal.Designer {

    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import GridColumn = DevExpress.Dashboard.Model.GridColumn;
    import GridDeltaColumn = DevExpress.Dashboard.Model.GridDeltaColumn;
    import GridSparklineColumn = DevExpress.Dashboard.Model.GridSparklineColumn;
    import GridItem = DevExpress.Dashboard.Model.GridItem;
    import IDataItemProvider = DevExpress.Dashboard.Internal.Model.IDataItemProvider;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import ContainerTypeSelector = DevExpress.Dashboard.Internal.Designer.ContainerTypeSelector;
    import CustomizeDataItemContainerTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDataItemContainerTabs;
    import DataItemContainerPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DataItemContainerPropertiesComposer;
    import IDataItemContainerComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDataItemContainerComposeTabsArgs;
	export class GridColumnPropertiesComposer extends DataItemContainerPropertiesComposer<GridColumn> {
	    editRuleHandler: any;
	    private editDeltaFormatHandler;
	    private _totals;
	    constructor(customizeHandler: CustomizeDataItemContainerTabs, editRuleHandler: any, editDeltaFormatHandler?: (model: any) => void);
	    protected _composeTabsCore(model: GridColumn, args: IDataItemContainerComposeTabsArgs): AccordionTab[];
	    getColumnTypeWrapper(model: GridColumn, containerType: ko.Observable<string>): ContainerTypeSelector;
	    getColumnWrapper(model: GridColumn, dashboardItem: DataDashboardItem, dataSourceBrowser: DataSourceBrowser): ObjectPropertiesWrapper<GridColumn>;
	    getWidthWrapper(model: GridColumn): ObjectPropertiesWrapper<GridColumn>;
	    getTotalsWrapper(model: GridColumn, p: IDataItemProvider): ObjectPropertiesWrapper<GridColumn>;
	    getDeltaWrapper(model: GridDeltaColumn): ObjectPropertiesWrapper<GridDeltaColumn>;
	    getSparklineWrapper(model: GridSparklineColumn): ObjectPropertiesWrapper<GridSparklineColumn>;
	    getFormatRulesWrapper(model: GridColumn, dashboardItem: GridItem): ObjectPropertiesWrapper<GridItem>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import GridItem = DevExpress.Dashboard.Model.GridItem;
    import GridOptions = DevExpress.Dashboard.Model.GridOptions;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import IDashboardItemComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs;
	export class GridItemPropertiesComposer extends DashboardItemPropertiesComposer<GridItem> {
	    editRuleHandler: any;
	    constructor(customizeHandler: CustomizeDashboardItemTabs, editRuleHandler: any);
	    _composeTabsCore(model: GridItem, args: IDashboardItemComposeTabsArgs): AccordionTab[];
	    getLayoutWrapper(model: GridOptions): ObjectPropertiesWrapper<GridOptions>;
	    getFormatRulesWrapper(model: GridItem, dataSourceBrowser: DataSourceBrowser): ObjectPropertiesWrapper<GridItem>;
	}

}
declare module DevExpress.Dashboard.Model {


    import ImageHorizontalAlignment = DevExpress.Dashboard.Model.ImageHorizontalAlignment;
    import ImageSizeMode = DevExpress.Dashboard.Model.ImageSizeMode;
    import ImageVerticalAlignment = DevExpress.Dashboard.Model.ImageVerticalAlignment;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
	export class ImageItem extends DashboardItem {
	    urlPath: ko.Observable<string>;
	    image64: ko.Observable<string>;
	    sizeMode: ko.Observable<ImageSizeMode>;
	    horizontalAlignment: ko.Observable<ImageHorizontalAlignment>;
	    verticalAlignment: ko.Observable<ImageVerticalAlignment>;
	    imageType: ko.Observable<string>;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getInfoCore(): IDashboardSerializationInfo[];
	    protected _getDefaultItemType(): string;
	    protected _updateContentViewModel(content: any): void;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import ImageItem = DevExpress.Dashboard.Model.ImageItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import IDataItemContainerComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDataItemContainerComposeTabsArgs;
	export class ImageItemPropertiesComposer extends DashboardItemPropertiesComposer<ImageItem> {
	    protected _composeTabsCore(model: ImageItem, args?: IDataItemContainerComposeTabsArgs): void;
	    constructor(customizeHandler: CustomizeDashboardItemTabs);
	    composeTabs(model: ImageItem): AccordionTab[];
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import PieItem = DevExpress.Dashboard.Model.PieItem;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import ContainerTypeSelector = DevExpress.Dashboard.Internal.Designer.ContainerTypeSelector;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
	export class PieItemPropertiesComposer extends DashboardItemPropertiesComposer<PieItem> {
	    constructor(customizeHandler: CustomizeDashboardItemTabs);
	    _composeTabsCore(model: PieItem): AccordionTab[];
	    getTypeWrapper(model: PieItem): ContainerTypeSelector;
	    getLabelsWrapper(model: PieItem): ObjectPropertiesWrapper<PieItem>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import PieMapItem = DevExpress.Dashboard.Model.PieMapItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import IDashboardItemComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs;
	export class PieMapItemPropertiesComposer extends DashboardItemPropertiesComposer<PieMapItem> {
	    constructor(customizeHandler: CustomizeDashboardItemTabs);
	    _composeTabsCore(model: PieMapItem, args: IDashboardItemComposeTabsArgs): AccordionTab[];
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import PivotItem = DevExpress.Dashboard.Model.PivotItem;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import IDashboardItemComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs;
	export class PivotItemPropertiesComposer extends DashboardItemPropertiesComposer<PivotItem> {
	    editRuleHandler: any;
	    constructor(customizeHandler: CustomizeDashboardItemTabs, editRuleHandler: any);
	    _composeTabsCore(model: PivotItem, args: IDashboardItemComposeTabsArgs): AccordionTab[];
	    static getFormatRulesWrapper(model: PivotItem, dataSourceBrowser: DataSourceBrowser, editHandler: any): ObjectPropertiesWrapper<PivotItem>;
	    getLayoutDataWrapper(model: PivotItem): ObjectPropertiesWrapper<PivotItem>;
	    getInitialStateDataWrapper(model: PivotItem): ObjectPropertiesWrapper<PivotItem>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import RangeFilterItem = DevExpress.Dashboard.Model.RangeFilterItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import IDashboardItemComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs;
	export class RangeFilterItemPropertiesComposer extends DashboardItemPropertiesComposer<RangeFilterItem> {
	    editRuleHandler: any;
	    constructor(customizeHandler: CustomizeDashboardItemTabs, editRuleHandler: any);
	    _composeTabsCore(model: RangeFilterItem, args: IDashboardItemComposeTabsArgs): AccordionTab[];
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import ScatterChartItem = DevExpress.Dashboard.Model.ScatterChartItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import IDashboardItemComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs;
	export class ScatterChartItemPropertiesComposer extends DashboardItemPropertiesComposer<ScatterChartItem> {
	    constructor(customizeHandler: CustomizeDashboardItemTabs);
	    _composeTabsCore(model: ScatterChartItem, args: IDashboardItemComposeTabsArgs): Array<AccordionTab>;
	}

}
declare module DevExpress.Dashboard.Model {

    import DashboardLayoutGroup = DevExpress.Dashboard.Model.DashboardLayoutGroup;
	export class DashboardLayoutTabPage extends DashboardLayoutGroup {
	    protected readonly _template: string;
	    constructor(modelJson?: Object, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getDefaultItemType(): string;
	    _deleteDashbordItem(): void;
	}

}
declare module DevExpress.Dashboard.Model {


    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DashboardTabPage = DevExpress.Dashboard.Model.DashboardTabPage;
    import DashboardLayoutGroup = DevExpress.Dashboard.Model.DashboardLayoutGroup;
    import DashboardLayoutNode = DevExpress.Dashboard.Model.DashboardLayoutNode;
    import DashboardLayoutTabPage = DevExpress.Dashboard.Model.DashboardLayoutTabPage;
	export class DashboardLayoutTabContainer extends DashboardLayoutGroup {
	    private readonly _tabContainer;
	    protected _getDefaultItemType(): string;
	    protected readonly _template: string;
	    protected readonly _visibleItems: ko.ObservableArray<DashboardLayoutNode>;
	    protected readonly _ignoreChildMaxHeight: boolean;
	    protected readonly _dragOverInnerElementController: {
	        selector: string;
	        onDragOver: (index: number) => void;
	    };
	    private _visibleItemsCore;
	    protected _activeTabIndex: ko.Computed<number>;
	    constructor(modelJson?: Object, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _setItemCore(newItem: DashboardItem): void;
	    _createTabPage(): DashboardLayoutTabPage;
	    _removeLayoutTabPage(tabPageModel: DashboardTabPage): void;
	    _activeTabPage: ko.Computed<DashboardTabPage>;
	    _deleteDashbordItem(): void;
	    private _addLayoutTabPage;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import DashboardTabPage = DevExpress.Dashboard.Model.DashboardTabPage;
    import TabContainerItem = DevExpress.Dashboard.Model.TabContainerItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CollectionEditorEditItemArguments = DevExpress.Dashboard.Internal.Designer.CollectionEditorEditItemArguments;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import IDashboardItemComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs;
	export class TabContainerItemPropertiesComposer extends DashboardItemPropertiesComposer<TabContainerItem> {
	    private editTabPageHandler;
	    constructor(editTabPageHandler: (tabPage: DashboardTabPage, args: CollectionEditorEditItemArguments) => void);
	    _composeTabsCore(): void;
	    composeTabs(tabContainer: TabContainerItem, args: IDashboardItemComposeTabsArgs): AccordionTab[];
	}

}
declare module DevExpress.Dashboard.Model {


    import Measure = DevExpress.Dashboard.Model.Measure;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import DashboardItemBaseInteractivityOptions = DevExpress.Dashboard.Model.DashboardItemBaseInteractivityOptions;
	export class TextBoxItem extends DataDashboardItem {
	    private __values;
	    values: ko.ObservableArray<Measure>;
	    text: ko.Observable<string>;
	    interactivityOptions: DashboardItemBaseInteractivityOptions;
	    constructor(dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    _clearBindings(): void;
	    protected _getInfoCore(): IDashboardSerializationInfo[];
	    _isCalculationSupported(): boolean;
	    protected _getDefaultItemType(): string;
	    protected _getIgnoreMasterFilter(): boolean;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import TextBoxItem = DevExpress.Dashboard.Model.TextBoxItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
	export class TextBoxItemPropertiesComposer extends DashboardItemPropertiesComposer<TextBoxItem> {
	    constructor(customizeHandler: CustomizeDashboardItemTabs);
	    _composeTabsCore(model: TextBoxItem): AccordionTab[];
	}

}
declare module DevExpress.Dashboard.Model {


    import ColorSchemeEntry = DevExpress.Dashboard.Model.ColorSchemeEntry;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import Measure = DevExpress.Dashboard.Model.Measure;
    import DashboardTreemapLayoutAlgorithm = DevExpress.Dashboard.Model.DashboardTreemapLayoutAlgorithm;
    import DashboardTreemapLayoutDirection = DevExpress.Dashboard.Model.DashboardTreemapLayoutDirection;
    import TreemapValueType = DevExpress.Dashboard.Model.TreemapValueType;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import DashboardItemColoringOptions = DevExpress.Dashboard.Model.DashboardItemColoringOptions;
    import DashboardItemInteractivityOptions = DevExpress.Dashboard.Model.DashboardItemInteractivityOptions;
	export class TreemapItem extends DataDashboardItem {
	    private __values;
	    values: ko.ObservableArray<Measure>;
	    private __arguments;
	    arguments: ko.ObservableArray<Dimension>;
	    layoutAlgorithm: ko.Observable<DashboardTreemapLayoutAlgorithm>;
	    layoutDirection: ko.Observable<DashboardTreemapLayoutDirection>;
	    tilesLabelContentType: ko.Observable<TreemapValueType>;
	    tilesTooltipContentType: ko.Observable<TreemapValueType>;
	    groupsLabelContentType: ko.Observable<TreemapValueType>;
	    groupsTooltipContentType: ko.Observable<TreemapValueType>;
	    interactivityOptions: DashboardItemInteractivityOptions;
	    colorScheme: ko.ObservableArray<ColorSchemeEntry>;
	    coloringOptions: DashboardItemColoringOptions;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getInfoCore(): IDashboardSerializationInfo[];
	    _clearBindings(): void;
	    _isCalculationSupported(): boolean;
	    protected _getDefaultItemType(): string;
	    protected _getCanColorByMeasures(): boolean;
	    protected _getCanColorByDimensions(): boolean;
	    protected _getAreMeasuresColoredByDefault(): boolean;
	    protected _getIsDimensionColoredByDefault(dimension: Dimension): boolean;
	    protected _getMasterFilterMode(): string;
	    protected _getDrillDownEnabled(): boolean;
	    protected _getIgnoreMasterFilter(): boolean;
	    protected _getInteractivityDimensionLinks(): DataItemLink[];
	    protected _getLayersCount(): number;
	    protected _getLayerName(): string;
	    _getColorizableDataItemsInfo(): Array<{
	        items: Array<DataItemLink>;
	        prefixId: string;
	    }>;
	    _isSortingEnabled(): boolean;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import TreemapItem = DevExpress.Dashboard.Model.TreemapItem;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
	export class TreemapItemPropertiesComposer extends DashboardItemPropertiesComposer<TreemapItem> {
	    constructor(customizeHandler: CustomizeDashboardItemTabs);
	    _composeTabsCore(model: TreemapItem): AccordionTab[];
	    getLayoutWrapper(model: TreemapItem): ObjectPropertiesWrapper<TreemapItem>;
	    getLabelsWrapper(model: TreemapItem): ObjectPropertiesWrapper<TreemapItem>;
	    static getTileOptionsTab(model: TreemapItem, dataItem: DataItem): AccordionTab;
	    protected static getTileOptionsWrapper(model: TreemapItem, dataItem: DataItem): ObjectPropertiesWrapper<DataItem>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {

    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import DataItemContainer = DevExpress.Dashboard.Model.DataItemContainer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
    import IDataItemContainerSectionInfo = DevExpress.Dashboard.Internal.Designer.IDataItemContainerSectionInfo;
    import IDataSectionSurface = DevExpress.Dashboard.Internal.Designer.IDataSectionSurface;
    import IItemsCollection = DevExpress.Dashboard.Internal.Designer.IItemsCollection;
    import IGroupedItemsHolder = DevExpress.Dashboard.Internal.Designer.IGroupedItemsHolder;
	export class DataItemContainerCollectionSurface implements IDataSectionSurface, IItemsCollection {
	    itemSurface: DataDashboardItemSurface<DataDashboardItem>;
	    holder: any;
	    sectionInfo: IDataItemContainerSectionInfo<DataItemContainer>;
	    warning?: ko.Subscribable<boolean>;
	    private _disposables;
	    supportGroups: boolean;
	    constructor(itemSurface: DataDashboardItemSurface<DataDashboardItem>, holder: any, sectionInfo: IDataItemContainerSectionInfo<DataItemContainer>, warning?: ko.Subscribable<boolean>);
	    groups: ko.Computed<Array<IGroupedItemsHolder>>;
	    readonly items: ko.ObservableArray<DataItemContainer>;
	    private _chooseDataField;
	    addDataItemContainerClick: () => void;
	    selectContainerSample: (dataItemContainer: DataItemContainer) => void;
	    private _removeDataItem;
	    removeDataItem: (container: DataItemContainer) => void;
	    dataItemDisplayNameProvider: (dataItem: DataItem) => string;
	    getDisplayName: (object: any) => string;
	    private _processChangeContainer;
	    private getCompatibleTransfers;
	    private _processChangeContainerType;
	    selectDataItemContainer: (container: DataItemContainer) => void;
	    newContainerSample: ko.Observable<any>;
	    template: string;
	    relocateItem(item: DataItemContainer | DataItemLink, placeholderIndex: number): void;
	    isOlap(): boolean;
	    errorFactory(container: DataItemContainer): ko.Observable<boolean>;
	    dispose(): void;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import DashboardSurface = DevExpress.Dashboard.Internal.DashboardSurface;
    import PropertiesController = DevExpress.Dashboard.Internal.Designer.PropertiesController;
    import SurfaceItemsFactory = DevExpress.Dashboard.Internal.Designer.SurfaceItemsFactory;
	export class DataItemLinkComponent {
	    surface: DashboardSurface;
	    $element: JQuery;
	    propertiesController: PropertiesController;
	    surfaceItemsFactory: SurfaceItemsFactory;
	    constructor(surface: DashboardSurface, $element: JQuery, propertiesController: PropertiesController, surfaceItemsFactory: SurfaceItemsFactory);
	}

}
declare module DevExpress.Dashboard.Internal.Designer {

    import IFieldConstraint = DevExpress.Dashboard.Internal.IFieldConstraint;
    import DataItem = DevExpress.Dashboard.Model.DataItem;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import DataItemContainer = DevExpress.Dashboard.Model.DataItemContainer;
    import DataItemSurface = DevExpress.Dashboard.Internal.Designer.DataItemSurface;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
    import IDataSectionInfo = DevExpress.Dashboard.Internal.Designer.IDataSectionInfo;
    import IDataSectionSurface = DevExpress.Dashboard.Internal.Designer.IDataSectionSurface;
    import IItemsCollection = DevExpress.Dashboard.Internal.Designer.IItemsCollection;
	export interface SingleDataItemSurfaceOptions {
	    itemSurface: DataDashboardItemSurface<DataDashboardItem>;
	    sectionInfo: IDataSectionInfo<DataItem>;
	    warning?: ko.Subscribable<boolean>;
	    fieldConstraint?: IFieldConstraint;
	}
	export class SingleDataItemSurface implements IDataSectionSurface, IItemsCollection {
	    private _disposables;
	    dataItemLink: DataItemLink;
	    itemSurface: DataDashboardItemSurface<DataDashboardItem>;
	    sectionInfo: IDataSectionInfo<DataItem>;
	    warning: ko.Subscribable<boolean>;
	    fieldConstraint: IFieldConstraint;
	    supportGroups: boolean;
	    constructor(options: SingleDataItemSurfaceOptions);
	    private _removeDataItem;
	    removeDataItem: () => void;
	    dataItemDisplayNameProvider: (dataItem: DataItem) => string;
	    selectDataItem: () => void;
	    dataItemSurface: ko.Observable<DataItemSurface>;
	    items: ko.ObservableArray<any>;
	    relocateItem(item: DataItemContainer | DataItemLink, placeholderIndex: number): void;
	    isOlap(): boolean;
	    errorFactory(link: DataItemLink): ko.Observable<boolean>;
	    template: string;
	    dispose(): void;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import BoundImageItem = DevExpress.Dashboard.Model.BoundImageItem;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
	export class BoundImageItemSurface extends DataDashboardItemSurface<BoundImageItem> {
	    fillSections(): void;
	    constructor(dashboardItem: BoundImageItem, dashboardModel: Dashboard, dataSourceBrowser: DataSourceBrowser);
	    getPropertiesComposer(): DashboardItemPropertiesComposer<BoundImageItem>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import BubbleMapItem = DevExpress.Dashboard.Model.BubbleMapItem;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
	export class BubbleMapItemSurface extends DataDashboardItemSurface<BubbleMapItem> {
	    constructor(dashboardItem: BubbleMapItem, dashboardModel: Dashboard, dataSourceBrowser: DataSourceBrowser);
	    fillSections(): void;
	    getPropertiesComposer(): DashboardItemPropertiesComposer<BubbleMapItem>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {

    import DataItemNumericFormat = DevExpress.Dashboard.Model.DataItemNumericFormat;
    import IDisposable = DevExpress.Dashboard.Model.IDisposable;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import IPropertiesHolder = DevExpress.Dashboard.Internal.Designer.IPropertiesHolder;
    import PropertiesController = DevExpress.Dashboard.Internal.Designer.PropertiesController;
    import CollectionEditorEditItemArguments = DevExpress.Dashboard.Internal.Designer.CollectionEditorEditItemArguments;
	export class DeltaNumericFormatSurface implements IDisposable, IPropertiesHolder {
	    model: {
	        title: string;
	        numericFormat: DataItemNumericFormat;
	    };
	    propertiesController: PropertiesController;
	    private _disposables;
	    constructor(model: {
	        title: string;
	        numericFormat: DataItemNumericFormat;
	    }, propertiesController: PropertiesController);
	    propertiesTabs: ko.ObservableArray<AccordionTab>;
	    updatePropertiesTabs(): void;
	    startEditing(args: CollectionEditorEditItemArguments): void;
	    dispose(): void;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {

    import IDisposable = DevExpress.Dashboard.Model.IDisposable;
    import CardLayoutTemplate = DevExpress.Dashboard.Model.CardLayoutTemplate;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import IPropertiesHolder = DevExpress.Dashboard.Internal.Designer.IPropertiesHolder;
    import PropertiesController = DevExpress.Dashboard.Internal.Designer.PropertiesController;
    import CollectionEditorEditItemArguments = DevExpress.Dashboard.Internal.Designer.CollectionEditorEditItemArguments;
	export class EditCardTemplateSurface implements IDisposable, IPropertiesHolder {
	    model: CardLayoutTemplate;
	    propertiesController: PropertiesController;
	    private dimensionNames;
	    private applyTemplateToAllCards;
	    private _disposables;
	    constructor(model: CardLayoutTemplate, propertiesController: PropertiesController, dimensionNames: string[], applyTemplateToAllCards?: (template: CardLayoutTemplate) => void);
	    propertiesTabs: ko.ObservableArray<AccordionTab>;
	    updatePropertiesTabs(): void;
	    startEditing(args: CollectionEditorEditItemArguments): void;
	    dispose(): void;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import CardItem = DevExpress.Dashboard.Model.CardItem;
    import CardLayoutTemplate = DevExpress.Dashboard.Model.CardLayoutTemplate;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
	export class CardItemSurface extends DataDashboardItemSurface<CardItem> {
	    private _editRuleHandler;
	    private addConditionalFormattingOptions;
	    protected extendHiddenMeasuresTabs(tabs: AccordionTab[], model: any): void;
	    fillSections(): void;
	    constructor(dashboardItem: CardItem, dashboardModel: Dashboard, dataSourceBrowser: DataSourceBrowser);
	    getPropertiesComposer(): DashboardItemPropertiesComposer<CardItem>;
	    applyLayoutTemplateToAllCards(template: CardLayoutTemplate): void;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import ChartItem = DevExpress.Dashboard.Model.ChartItem;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
	export class ChartItemSurface extends DataDashboardItemSurface<ChartItem> {
	    fillSections(): void;
	    constructor(dashboardItem: ChartItem, dashboardModel: Dashboard, dataSourceBrowser: DataSourceBrowser);
	    getPropertiesComposer(): DashboardItemPropertiesComposer<ChartItem>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import ChoroplethMapItem = DevExpress.Dashboard.Model.ChoroplethMapItem;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
	export class ChoroplethMapItemSurface extends DataDashboardItemSurface<ChoroplethMapItem> {
	    constructor(dashboardItem: ChoroplethMapItem, dashboardModel: Dashboard, dataSourceBrowser: DataSourceBrowser);
	    fillSections(): void;
	    getPropertiesComposer(): DashboardItemPropertiesComposer<ChoroplethMapItem>;
	}

}
declare module DevExpress.Dashboard.Model {

	export interface ICustomItemProperty extends DevExpress.Analytics.Utils.ISerializationInfo {
	    sectionName?: string;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import ICustomItemProperty = DevExpress.Dashboard.Model.ICustomItemProperty;
    import FormAdapterItem = DevExpress.Dashboard.Metadata.FormAdapterItem;
	export class CustomItemPropertiesComposerHelper {
	    private static _getEditorValues;
	    private static _mapEditor;
	    static convertToDashboardSerializationInfo(property: ICustomItemProperty): {
	        propertyName: string;
	        formAdapterItem: FormAdapterItem;
	        editorOptions: any;
	    };
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import CustomItem = DevExpress.Dashboard.Model.CustomItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
	export class CustomItemPropertiesComposer extends DashboardItemPropertiesComposer<CustomItem> {
	    constructor(customizeHandler: CustomizeDashboardItemTabs);
	    private _mapLegacyPropertiesToTabs;
	    _composeTabsCore(model: CustomItem): Array<AccordionTab>;
	}
	export class CustomItemSurface extends DataDashboardItemSurface<CustomItem> {
	    protected readonly showDefaultSections: boolean;
	    fillSections(): void;
	    constructor(dashboardItem: CustomItem, dashboardModel: Dashboard, dataSourceBrowser: DataSourceBrowser);
	    getPropertiesComposer(): DashboardItemPropertiesComposer<CustomItem>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DateFilterItem = DevExpress.Dashboard.Model.DateFilterItem;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
	export class DateFilterItemSurface extends DataDashboardItemSurface<DateFilterItem> {
	    constructor(dashboardItem: DateFilterItem, dashboardModel: Dashboard, dataSourceBrowser: DataSourceBrowser);
	    fillSections(): void;
	    getPropertiesComposer(): DashboardItemPropertiesComposer<DateFilterItem>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import FilterElementItemBase = DevExpress.Dashboard.Model.FilterElementItemBase;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
	export class FilterItemSurface extends DataDashboardItemSurface<FilterElementItemBase> {
	    fillSections(): void;
	    constructor(dashboardItem: FilterElementItemBase, dashboardModel: Dashboard, dataSourceBrowser: DataSourceBrowser);
	    getPropertiesComposer(): DashboardItemPropertiesComposer<FilterElementItemBase>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import GaugeItem = DevExpress.Dashboard.Model.GaugeItem;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
	export class GaugeItemSurface extends DataDashboardItemSurface<GaugeItem> {
	    fillSections(): void;
	    constructor(dashboardItem: GaugeItem, dashboardModel: Dashboard, dataSourceBrowser: DataSourceBrowser);
	    getPropertiesComposer(): DashboardItemPropertiesComposer<GaugeItem>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import GeoPointMapItem = DevExpress.Dashboard.Model.GeoPointMapItem;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
	export class GeoPointItemSurface extends DataDashboardItemSurface<GeoPointMapItem> {
	    constructor(dashboardItem: GeoPointMapItem, dashboardModel: Dashboard, dataSourceBrowser: DataSourceBrowser);
	    fillSections(): void;
	    getPropertiesComposer(): DashboardItemPropertiesComposer<GeoPointMapItem>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import GridItem = DevExpress.Dashboard.Model.GridItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
	export class GridItemSurface extends DataDashboardItemSurface<GridItem> {
	    private addConditionalFormattingOptions;
	    protected extendHiddenMeasuresTabs(tabs: AccordionTab[], model: any): void;
	    fillSections(): void;
	    constructor(dashboardItem: GridItem, dashboardModel: Dashboard, dataSourceBrowser: DataSourceBrowser);
	    private editRuleHandler;
	    getPropertiesComposer(): DashboardItemPropertiesComposer<GridItem>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import ImageItem = DevExpress.Dashboard.Model.ImageItem;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import BaseItemSurface = DevExpress.Dashboard.Internal.Designer.BaseItemSurface;
	export class ImageItemSurface extends BaseItemSurface<ImageItem> {
	    constructor(dashboardItem: ImageItem, dashboardModel: Dashboard, dataSourceBrowser: DataSourceBrowser);
	    getPropertiesComposer(): DashboardItemPropertiesComposer<ImageItem>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import PieItem = DevExpress.Dashboard.Model.PieItem;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
	export class PieItemSurface extends DataDashboardItemSurface<PieItem> {
	    fillSections(): void;
	    constructor(dashboardItem: PieItem, dashboardModel: Dashboard, dataSourceBrowser: DataSourceBrowser);
	    getPropertiesComposer(): DashboardItemPropertiesComposer<PieItem>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import PieMapItem = DevExpress.Dashboard.Model.PieMapItem;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
	export class PieMapItemSurface extends DataDashboardItemSurface<PieMapItem> {
	    constructor(dashboardItem: PieMapItem, dashboardModel: Dashboard, dataSourceBrowser: DataSourceBrowser);
	    fillSections(): void;
	    getPropertiesComposer(): DashboardItemPropertiesComposer<PieMapItem>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import PivotItem = DevExpress.Dashboard.Model.PivotItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
	export class PivotItemSurface extends DataDashboardItemSurface<PivotItem> {
	    private addConditionalFormattingOptions;
	    protected extendHiddenMeasuresTabs(tabs: AccordionTab[], model: any): void;
	    fillSections(): void;
	    constructor(dashboardItem: PivotItem, dashboardModel: Dashboard, dataSourceBrowser: DataSourceBrowser);
	    getPropertiesComposer(): DashboardItemPropertiesComposer<PivotItem>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import ChartSeries = DevExpress.Dashboard.Model.ChartSeries;
    import CustomizeDataItemContainerTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDataItemContainerTabs;
    import ChartSeriesPropertiesComposer = DevExpress.Dashboard.Internal.Designer.ChartSeriesPropertiesComposer;
	export class RangeSeriesPropertiesComposer extends ChartSeriesPropertiesComposer {
	    constructor(customizeHandler: CustomizeDataItemContainerTabs);
	    protected _showIgnoreEmptyPointsVisible(model: ChartSeries): boolean;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import RangeFilterItem = DevExpress.Dashboard.Model.RangeFilterItem;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
	export class RangeFilterItemSurface extends DataDashboardItemSurface<RangeFilterItem> {
	    fillSections(): void;
	    constructor(dashboardItem: RangeFilterItem, dashboardModel: Dashboard, dataSourceBrowser: DataSourceBrowser);
	    getPropertiesComposer(): DashboardItemPropertiesComposer<RangeFilterItem>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import ScatterChartItem = DevExpress.Dashboard.Model.ScatterChartItem;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
	export class ScatterChartItemSurface extends DataDashboardItemSurface<ScatterChartItem> {
	    constructor(dashboardItem: ScatterChartItem, dashboardModel: Dashboard, dataSourceBrowser: DataSourceBrowser);
	    fillSections(): void;
	    getPropertiesComposer(): DashboardItemPropertiesComposer<ScatterChartItem>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import DashboardTabPage = DevExpress.Dashboard.Model.DashboardTabPage;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import CustomizeDashboardItemTabs = DevExpress.Dashboard.Internal.Designer.CustomizeDashboardItemTabs;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import IDashboardItemComposeTabsArgs = DevExpress.Dashboard.Internal.Designer.IDashboardItemComposeTabsArgs;
	export class DashboardTabPagePropertiesComposer extends DashboardItemPropertiesComposer<DashboardTabPage> {
	    constructor(customizeHandler: CustomizeDashboardItemTabs);
	    _composeTabsCore(tabPage: DashboardTabPage, args: IDashboardItemComposeTabsArgs): AccordionTab[];
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import TabContainerItem = DevExpress.Dashboard.Model.TabContainerItem;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import BaseItemSurface = DevExpress.Dashboard.Internal.Designer.BaseItemSurface;
	export class TabContainerItemSurface extends BaseItemSurface<TabContainerItem> {
	    private dashboardItem;
	    private _dashboardModel;
	    constructor(dashboardItem: TabContainerItem, _dashboardModel: Dashboard, dataSourceBrowser: DataSourceBrowser);
	    getPropertiesComposer(): DashboardItemPropertiesComposer<TabContainerItem>;
	    dispose(): void;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import TextBoxItem = DevExpress.Dashboard.Model.TextBoxItem;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
	export class TextBoxItemSurface extends DataDashboardItemSurface<TextBoxItem> {
	    extendTabsHandler: (tabs: AccordionTab[], model: any, dashboardItem: TextBoxItem) => void;
	    fillSections(): void;
	    constructor(dashboardItem: TextBoxItem, dashboardModel: Dashboard, dataSourceBrowser: DataSourceBrowser);
	    getPropertiesComposer(): DashboardItemPropertiesComposer<TextBoxItem>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import TreemapItem = DevExpress.Dashboard.Model.TreemapItem;
    import DashboardItemPropertiesComposer = DevExpress.Dashboard.Internal.Designer.DashboardItemPropertiesComposer;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
	export class TreemapItemSurface extends DataDashboardItemSurface<TreemapItem> {
	    fillSections(): void;
	    constructor(dashboardItem: TreemapItem, dashboardModel: Dashboard, dataSourceBrowser: DataSourceBrowser);
	    getPropertiesComposer(): DashboardItemPropertiesComposer<TreemapItem>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {

    import LayoutItem = DevExpress.Dashboard.Internal.LayoutItem;
    import DashboardSurface = DevExpress.Dashboard.Internal.DashboardSurface;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import PropertiesController = DevExpress.Dashboard.Internal.Designer.PropertiesController;
    import DataDashboardItemSurface = DevExpress.Dashboard.Internal.Designer.DataDashboardItemSurface;
    import SurfaceItemsFactory = DevExpress.Dashboard.Internal.Designer.SurfaceItemsFactory;
	export var DashboardItemMenuSizes: {
	    BindingPanelPanelWidth: number;
	    OptionsPanelWidth: number;
	};
	export interface IContextPopupMenu {
	    menuItemId: string;
	    icon: string;
	    title?: string;
	    hint?: string;
	    templateName: string;
	    popoverClass?: string;
	    panelWidth: ko.Observable<number> | number;
	    detailVisible: ko.Observable<boolean>;
	    customData: any;
	    showMenu?: () => void;
	    index?: number;
	}
	export interface IDashboardItemMenu {
	    contextMenuItems: ko.ObservableArray<IContextPopupMenu>;
	}
	export class ItemMenuViewModel extends DisposableObject implements IDashboardItemMenu {
	    surface: DashboardSurface;
	    layoutItem: LayoutItem;
	    private _positionCalculator;
	    propertiesController: PropertiesController;
	    surfaceItemsFactory: SurfaceItemsFactory;
	    constructor(surface: DashboardSurface, layoutItem: LayoutItem, _positionCalculator: ItemMenuPositionCalculator, propertiesController: PropertiesController, surfaceItemsFactory: SurfaceItemsFactory);
	    menuItemClick: (menuItem: IContextPopupMenu) => void;
	    selectedItemSurface: DataDashboardItemSurface<DataDashboardItem>;
	    contextMenuItems: ko.ObservableArray<IContextPopupMenu>;
	    contextMenuItemsSorted: ko.PureComputed<IContextPopupMenu[]>;
	    menuItemDetailVisible: ko.PureComputed<boolean>;
	    propertiesPanelStyle: ko.Computed<{
	        width: string;
	        marginLeft: string;
	    }>;
	    verticalPosition: ko.Observable<"center" | "top" | "bottom">;
	    isLeft: ko.Observable<boolean>;
	    positionMy: ko.Computed<"left" | "right">;
	    positionAt: ko.Computed<"left" | "right">;
	    _recalculateVerticalPosition: () => void;
	    _recalculateIsLeft: () => void;
	    deleteCurrentItem(): void;
	    hideBindingProperties: () => void;
	    hideBindingPanel: () => void;
	    isSecondaryPanelVisible: ko.Observable<boolean>;
	    __secondaryPanelVisibleTimeout: number;
	    initForFirstShown: (options: any) => void;
	    repaintHandlers: any[];
	    popupInitialized: (args: any) => void;
	    _addRepaintHandler(handler: any): void;
	    dispose(): void;
	}
	export class ItemMenuPositionCalculator {
	    element: HTMLElement;
	    layoutRoot: HTMLElement;
	    private _isValidElement;
	    constructor(element: HTMLElement);
	    calculateIsLeft(): boolean;
	    calculateVPosition(): ItemMenuPosition;
	}
	export type ItemMenuPosition = 'center' | 'top' | 'bottom';

}
declare module DevExpress.Dashboard.Internal.Designer {

    import IItemsCollection = DevExpress.Dashboard.Internal.Designer.IItemsCollection;
	export class DragProcessor {
	    rootElement: HTMLElement;
	    CSS_DRAG_IN_PROGRESS: string;
	    CSS_HIGHLIGHT_PLACEHOLDER: string;
	    COLLECTION_SELECTOR: string;
	    TARGET_SELECTOR: string;
	    EVENT_NAMESPACE: string;
	    currentDrag: {
	        clonedElement: HTMLElement;
	        itemPosition: number;
	        originalEvent: DragEvent;
	        itemElement: HTMLElement;
	        sourceCollection: IItemsCollection;
	    };
	    constructor(rootElement: HTMLElement);
	    state: 'pending' | 'dragging';
	    startDrag(ev: JQueryEventObject): boolean;
	    setDataItemsPositions: (sourceCollectionRoot: HTMLElement) => void;
	    processHtmlDragEvent: () => void;
	    finishDrag: () => void;
	    checkItemIsDraggableToPosition(itemIndex: number, placeholderIndex: number): boolean;
	    interchange(items: ko.ObservableArray<any>, newOwner: {
	        relocateItem: (item: any, placeholderIndex: number) => void;
	    }, sourceIndex: number, placeholderIndex: number, groupSize: number): void;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
    import PropertiesController = DevExpress.Dashboard.Internal.Designer.PropertiesController;
    import IDetailsPropertiesComposer = DevExpress.Dashboard.Internal.Designer.IDetailsPropertiesComposer;
	export class InteractivityPropertiesComposer implements IDetailsPropertiesComposer<any> {
	    propertiesController: PropertiesController;
	    constructor(propertiesController: PropertiesController);
	    composeTabs(model: any): Array<AccordionTab>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Parameter = DevExpress.Dashboard.Model.Parameter;
    import FormAdapterEditor = DevExpress.Dashboard.Internal.Designer.FormAdapterEditor;
	export const singleLookupValueEditor: FormAdapterEditor<{
	    parameter: Parameter;
	    dataSourceBrowser: DataSourceBrowser;
	}>;
	export const multipleLookupValueEditor: FormAdapterEditor<{
	    parameter: Parameter;
	    dataSourceBrowser: DataSourceBrowser;
	}>;

}
declare module DevExpress.Dashboard.Internal.Designer {

    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import DynamicListLookUpSettings = DevExpress.Dashboard.Model.DynamicListLookUpSettings;
    import Parameter = DevExpress.Dashboard.Model.Parameter;
    import StaticListLookUpSettings = DevExpress.Dashboard.Model.StaticListLookUpSettings;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
	export class ParameterEditorViewModel extends DisposableObject {
	    parameter: Parameter;
	    private _dataSourceBrowserGetter?;
	    readonly dataSourceBrowser: DataSourceBrowser;
	    commonParameterSettings: ObjectPropertiesWrapper;
	    lookUpParameterType: ObjectPropertiesWrapper;
	    staticListLookUpSettings: ko.Computed<ObjectPropertiesWrapper>;
	    dynamicListLookUpSettings: ko.Computed<ObjectPropertiesWrapper>;
	    constructor(parameter: Parameter, _dataSourceBrowserGetter?: () => DataSourceBrowser, isNameValid?: (string: any) => boolean);
	    _getStaticListLookUpSettingsWrapper(staticListLookUpSettings: StaticListLookUpSettings, parameterType: string): ObjectPropertiesWrapper<StaticListLookUpSettings>;
	    _getDynamicListLookUpSettingsWrapper(dynamicListLookUpSettings: DynamicListLookUpSettings): ObjectPropertiesWrapper<DynamicListLookUpSettings>;
	    _getCommonParameterSettingsWrapper(parameter: Parameter, isNameValid: (string: any) => boolean): ObjectPropertiesWrapper<Parameter>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {

    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import Parameter = DevExpress.Dashboard.Model.Parameter;
    import ParameterEditorViewModel = DevExpress.Dashboard.Internal.Designer.ParameterEditorViewModel;
	export class ParameterListEditorViewModel extends DisposableObject {
	    dashboard: ko.Computed<Dashboard>;
	    private _dataSourceBrowserGetter?;
	    constructor(dashboard: ko.Computed<Dashboard>, _dataSourceBrowserGetter?: () => DataSourceBrowser);
	    initialize(): void;
	    selectedParameters: ko.Observable<Parameter[]>;
	    selectedParameter: ko.Computed<Parameter>;
	    parameterEditorViewModel: ko.Observable<ParameterEditorViewModel>;
	    allowReordering: ko.Observable<boolean>;
	    toggleReordering: () => void;
	    addParameter: () => void;
	    removeParameter: () => void;
	    reorderParameters: (e: any) => void;
	}

}
declare module DevExpress.Dashboard.Designer {

	export class DashboardMenuItem {
	    id: string;
	    title: string;
	    index: number;
	    hotKey: number;
	    click: () => void;
	    template: string;
	    selected: ko.Subscribable<boolean>;
	    disabled: ko.Subscribable<boolean>;
	    hasSeparator: boolean;
	    data: any;
	    constructor(id: string, title: string, index: number, hotKey: number, click?: () => void);
	}
	export class DashboardToolboxItem {
	    name: string;
	    click: (itemTypeName: string) => void;
	    icon: string;
	    title: string;
	    type: string;
	    disabled: ko.Subscribable<boolean>;
	    constructor(name: string, click: (itemTypeName: string) => void, icon: string, title?: string, type?: string);
	}
	export class DashboardToolbarItem {
	    name: string;
	    click: (itemTypeName: string) => void;
	    icon: string;
	    title: string;
	    template: string;
	    disabled: ko.Subscribable<boolean>;
	    constructor(name: string, click: (itemTypeName: string) => void, icon?: string, title?: string);
	}
	export class DashboardToolboxGroup {
	    name: string;
	    title: string;
	    index: number;
	    items: ko.ObservableArray<DashboardToolboxItem>;
	    constructor(name: string, title: string, index: number, ...items: Array<DashboardToolboxItem>);
	}
	export class DashboardToolbarGroup {
	    name: string;
	    title: string;
	    index: number;
	    items: ko.ObservableArray<DashboardToolbarItem>;
	    constructor(name: string, title: string, index: number, ...items: Array<DashboardToolbarItem>);
	}

}
declare module DevExpress.Dashboard.Internal.Designer {

    import KeyEventType = DevExpress.Dashboard.KeyEventType;
    import DashboardMenuItem = DevExpress.Dashboard.Designer.DashboardMenuItem;
    import DashboardToolbarGroup = DevExpress.Dashboard.Designer.DashboardToolbarGroup;
    import DashboardToolboxGroup = DevExpress.Dashboard.Designer.DashboardToolboxGroup;
	export class ToolboxViewModel {
	    private _defaultMenuItemData;
	    private _menuItems;
	    private _toolboxGroups;
	    private _toolbarGroups;
	    leftPanelWidth: number;
	    constructor(menuVisible: boolean, _defaultMenuItemData: any, _menuItems: ko.ObservableArray<DashboardMenuItem>, _toolboxGroups: ko.ObservableArray<DashboardToolboxGroup>, _toolbarGroups: ko.ObservableArray<DashboardToolbarGroup>);
	    toggleMenu: () => void;
	    processKeyEvent(keyEventType: KeyEventType, eventArgs: JQueryKeyEventObject): boolean;
	    showDesignerPanel(): void;
	    hideDesignerPanel(): void;
	    toolbarHeight: ko.Observable<number>;
	    designerPanelLeft: ko.Observable<number>;
	    menuItemsSorted: ko.Computed<Array<DashboardMenuItem>>;
	    toolboxGroupsSorted: ko.Computed<Array<DashboardToolboxGroup>>;
	    toolbarGroupsSorted: ko.Computed<Array<DashboardToolbarGroup>>;
	    settingsForm: ko.Observable<any>;
	    settingsFormVisible: ko.Computed<boolean>;
	    closeMenu: () => void;
	    showMenu: () => void;
	    menuItemClick: (menuItem: DashboardMenuItem) => void;
	    menuVisible: ko.Observable<boolean>;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import dxList =  DevExpress.ui.dxList ;


    import dxTreeView =  DevExpress.ui.dxTreeView ;
    import dxTreeViewOptions = DevExpress.ui;

    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import CalculatedField = DevExpress.Dashboard.Model.CalculatedField;
    import IDataField = DevExpress.Dashboard.Internal.Model.IDataField;
    import CalcFieldEditor = DevExpress.Dashboard.Internal.Designer.CalcFieldEditor;
    import ISlidableListsNavigable = DevExpress.Dashboard.Internal.Designer.ISlidableListsNavigable;
	export class FieldChooserItem {
	    data: IDataField;
	    static getName(data: IDataField): string;
	    constructor(data: IDataField);
	    readonly displayName: string;
	    readonly name: string;
	    readonly isHierarchy: boolean;
	    readonly isLeaf: boolean;
	    readonly isGroup: boolean;
	    readonly type: string;
	    readonly normalizedType: string;
	    readonly isCalcField: boolean;
	    readonly isCorruptedCalcField: boolean;
	    readonly isOlap: boolean;
	    readonly isOlapDimension: boolean;
	    readonly isOlapDimensionHierarchy: boolean;
	    readonly isOlapMeasure: boolean;
	    readonly isAggregate: boolean;
	    readonly isList: boolean;
	    readonly disabled: boolean;
	    readonly typeTooltip: string;
	}
	export class TreeViewFieldChooserItem extends FieldChooserItem {
	    data: IDataField;
	    id: string;
	    parentId: string;
	    constructor(data: IDataField, id: string, parentId: string);
	    selected: boolean;
	}
	export interface SearchResultItem {
	    path: string;
	    item: FieldChooserItem;
	}
	export class FieldChooserList {
	    private owner;
	    path: string;
	    pathParts: string[];
	    private _selectedField;
	    constructor(owner: SliderController, path: string, pathParts: string[], _selectedField: ko.Observable<IDataField>);
	    ancestors: string[];
	    itemClick: (args: {
	        itemData: FieldChooserItem;
	        component: dxList;
	    }) => void;
	    reload(): void;
	    items: ko.Observable<FieldChooserItem[]>;
	    index: ko.Observable<number>;
	    ready: ko.Observable<boolean>;
	    selectedItemName: ko.Observable<string>;
	    loading: ko.Observable<boolean>;
	}
	export class SliderController implements ISlidableListsNavigable {
	    static TRANSITION_TIME: number;
	    constructor(params: {
	        startPath: ko.Observable<string>;
	        dataSourceBrowser: DataSourceBrowser;
	        filter: (dataField: IDataField) => boolean;
	        selectedField: ko.Observable<IDataField>;
	    });
	    rootPath: ko.Observable<string>;
	    selectedField: ko.Observable<IDataField>;
	    dataSourceBrowser: DataSourceBrowser;
	    filter: (dataField: IDataField) => boolean;
	    lists: ko.ObservableArray<FieldChooserList>;
	    isSliding: boolean;
	    slide(list: FieldChooserList, item: FieldChooserItem): void;
	    backClick: (pathItem: string, ancestors: string[]) => void;
	}
	export class FieldChooserController extends SliderController {
	    calcFieldEditor: CalcFieldEditor;
	    readonly dataSourceName: string;
	    readonly canAddCalculatedField: boolean;
	    addCalcField: () => void;
	    editCalcField: () => void;
	    removeCalcField: () => void;
	    onCalcFieldSaveHandler: (calcField: CalculatedField) => void;
	    getCurrentCalcField: () => CalculatedField;
	    isCalcFieldSelected: ko.PureComputed<boolean>;
	    private _navigateToSelection;
	    constructor(params: {
	        startPath: ko.Observable<string>;
	        dataSourceBrowser: DataSourceBrowser;
	        filter: (dataField: IDataField) => boolean;
	        selectedField: ko.Observable<IDataField>;
	    });
	    isSearchMode: ko.Observable<boolean>;
	    searchString: ko.Observable<string>;
	    searchResults: ko.ObservableArray<SearchResultItem>;
	    hasSearchResults: ko.Observable<boolean>;
	    searchButtonClick: (_: any, ev: JQueryEventObject) => void;
	    selectViaSearchResults: (data: {
	        itemData: SearchResultItem;
	    }) => void;
	    selectedSearchResult: ko.Computed<SearchResultItem>;
	    isListMode: ko.Observable<boolean>;
	    setListMode: () => void;
	    setTreeMode: () => void;
	    hasGroups: ko.Computed<boolean>;
	    treeViewInstanceResolver: JQuery.Deferred<dxTreeView, any, any>;
	    readonly dataSourceTreeOptions: dxTreeViewOptions;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {

    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import SliderController = DevExpress.Dashboard.Internal.Designer.SliderController;
	export class DataSourceChooserController extends SliderController {
	    constructor(params: {
	        dataSourceBrowser: DataSourceBrowser;
	        dataSource: ko.Observable<string>;
	        dataMember: ko.Observable<string>;
	        active: ko.Observable<boolean>;
	    });
	}

}
declare module DevExpress.Dashboard.Designer {







































































































































}
declare module DevExpress.Dashboard.Designer {

    import IExtension = DevExpress.Dashboard.IExtension;
    import KeyEventType = DevExpress.Dashboard.KeyEventType;
    import KnockoutTemplate = DevExpress.Dashboard.KnockoutTemplate;
    import SequenceAction = DevExpress.Dashboard.SequenceAction;
    import WorkingModeSwitchingOptions = DevExpress.Dashboard.WorkingModeSwitchingOptions;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import LayoutItem = DevExpress.Dashboard.Internal.LayoutItem;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import DashboardMenuItem = DevExpress.Dashboard.Designer.DashboardMenuItem;
    import DashboardToolbarGroup = DevExpress.Dashboard.Designer.DashboardToolbarGroup;
    import DashboardToolbarItem = DevExpress.Dashboard.Designer.DashboardToolbarItem;
    import DashboardToolboxGroup = DevExpress.Dashboard.Designer.DashboardToolboxGroup;
    import DashboardToolboxItem = DevExpress.Dashboard.Designer.DashboardToolboxItem;
    import ToolboxViewModel = DevExpress.Dashboard.Internal.Designer.ToolboxViewModel;
	export class ToolboxExtension extends DisposableObject implements IExtension {
	    private dashboardControl;
	    name: string;
	    template: KnockoutTemplate;
	    designerToViewerAction: SequenceAction;
	    viewerToDesignerAction: SequenceAction;
	    _viewModel: ToolboxViewModel;
	    private _switchToViewerToolbar;
	    readonly menuVisible: ko.Observable<boolean>;
	    menuItems: ko.ObservableArray<DashboardMenuItem>;
	    addMenuItem: (menuItem: DashboardMenuItem) => void;
	    removeMenuItem: (menuItemId: string) => void;
	    selectMenuItem: (menuItem: DashboardMenuItem) => void;
	    toolboxGroups: ko.ObservableArray<DashboardToolboxGroup>;
	    addToolboxItem: (groupName: string, toolboxItem: DashboardToolboxItem) => void;
	    removeToolboxItem: (groupName: string, toolboxItemName: string) => void;
	    toolbarGroups: ko.ObservableArray<DashboardToolbarGroup>;
	    addToolbarItem: (groupName: string, toolbarItem: DashboardToolbarItem) => void;
	    removeToolbarItem: (groupName: string, toolbarItemName: string) => void;
	    openMenu(): void;
	    closeMenu(): void;
	    showPanelAsync: (options: WorkingModeSwitchingOptions) => JQueryPromise<{}>;
	    hidePanelAsync: (options: WorkingModeSwitchingOptions) => JQueryPromise<{}>;
	    processKeyEvent(keyEventType: KeyEventType, eventArgs: JQueryKeyEventObject): boolean;
	    constructor(dashboardControl: DashboardControl);
	    start(): void;
	    stop(): void;
	    _layoutItemPlaceholderService: (layoutItem: LayoutItem) => {
	        data: {
	            dashboardItems: ko.Computed<any[]>;
	            addDashboardItem: (data: {
	                type: string;
	            }) => void;
	        };
	        templateName: string;
	    };
	    private _registerCustomItemToolbox;
	    private _createDefaultGroups;
	    private _registerToolboxItem;
	    private _unregisterToolboxItem;
	    private _findToolboxGroup;
	    private _findMenuItem;
	}

}
declare module DevExpress.Dashboard.Designer {

    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DataSourceBrowserViewModel = DevExpress.Dashboard.Internal.Designer.DataSourceBrowserViewModel;
	export class DataSourceBrowserExtension implements IExtension {
	    private dashboardControl;
	    name: string;
	    private _menuItem;
	    private _subscription;
	    private _perDashboardSubscription;
	    constructor(dashboardControl: DashboardControl);
	    _disposePerDashboardSubcriptions(): void;
	    _updateExtensionModel(dashboard: Dashboard): void;
	    start(): void;
	    stop(): void;
	    _dataSourceBrowserViewModel: ko.Observable<DataSourceBrowserViewModel>;
	}

}
declare module DevExpress.Dashboard.Designer {

    import KeyEventType = DevExpress.Dashboard.KeyEventType;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
    import IDashboardItemMenu = DevExpress.Dashboard.Internal.Designer.IDashboardItemMenu;
	export class DashboardItemMenuExtension extends DisposableObject {
	    private dashboardControl;
	    name: string;
	    constructor(dashboardControl: DashboardControl);
	    _itemContextMenu: ko.Observable<IDashboardItemMenu>;
	    start(): void;
	    stop(): void;
	    processKeyEvent(keyEventType: KeyEventType, eventArgs: JQueryKeyEventObject): boolean;
	    menuItemClick(menuItemId: string): void;
	    private _undateExtension;
	}

}
declare module DevExpress.Dashboard.Designer {
    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import EventSubscriber = DevExpress.Dashboard.Internal.EventSubscriber;
    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import IDisposable = DevExpress.Dashboard.Model.IDisposable;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import CustomizeSectionsEventArgs = DevExpress.Dashboard.Designer.CustomizeSectionsEventArgs;
    import ItemMenuViewModel = DevExpress.Dashboard.Internal.Designer.ItemMenuViewModel;
	export interface OptionsPanelExtensionOptions {
	    onCustomizeSections?: (args: CustomizeSectionsEventArgs) => void;
	}
	export interface OptionsPanelExtensionEvents {
	    customizeSections: CustomizeSectionsEventArgs;
	}
	export class OptionsPanelExtension implements IExtension {
	    private dashboardControl;
	    name: string;
	    private _subscriptions;
	    private _perMenuSubscriptions;
	    private _customizeTabsHandlers;
	    private _optionManager;
	    on: EventSubscriber<OptionsPanelExtensionEvents>;
	    off: EventSubscriber<OptionsPanelExtensionEvents>;
	    constructor(dashboardControl: DashboardControl, options?: OptionsPanelExtensionOptions);
	    _contextMenuSubscriber(itemContextMenu: ItemMenuViewModel): void;
	    start(): void;
	    stop(): void;
	    _updateContextMenu(menu: ItemMenuViewModel, item: DashboardItem, dashboard: Dashboard, dataSourceBrowser: DataSourceBrowser): void;
	    _subscribeTabsChanged(handler: (tabs: any, dashboardItem: DashboardItem) => void): IDisposable;
	}

}
declare module DevExpress.Dashboard.Designer {

    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import Color = DevExpress.Dashboard.Model.Color;
    import ColorSchemeEntry = DevExpress.Dashboard.Model.ColorSchemeEntry;
    import ChartItemBase = DevExpress.Dashboard.Model.ChartItemBase;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    import ColorPickerModel = DevExpress.Dashboard.Internal.Designer.ColorPickerModel;
    import ColorSchemeModel = DevExpress.Dashboard.Internal.Designer.ColorSchemeModel;
    import EntryEditorViewModel = DevExpress.Dashboard.Internal.Designer.EntryEditorViewModel;
	export class DashboardColorSchemeEditorExtension implements IExtension {
	    private dashboardControl;
	    name: string;
	    private _menuItem;
	    private _subscriptions;
	    private selected;
	    private _propertiesPanelExtension;
	    private dataSourceBrowserExtension;
	    static _isColoringSupported(item: DashboardItem): boolean;
	    constructor(dashboardControl: DashboardControl);
	    _updateExtensionModel(): void;
	    start(): void;
	    stop(): void;
	    _getColorSchemeWrapper(model: ChartItemBase): ObjectPropertiesWrapper;
	    _getColoringWrapper(model: DataDashboardItem): ObjectPropertiesWrapper;
	    _colorSchemeModel: ko.Observable<ColorSchemeModel>;
	    _colorPalette: ko.ObservableArray<Color>;
	    _entryEditorModel: EntryEditorViewModel;
	    _colorPickerModel: ko.Computed<ColorPickerModel>;
	    _selectedEntry: ko.Observable<ColorSchemeEntry>;
	    _createNewEntry: () => void;
	}

}
declare module DevExpress.Dashboard.Designer {
    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
	export class DashboardCurrencyEditorExtension implements IExtension {
	    private dashboardControl;
	    name: string;
	    private _menuItem;
	    constructor(dashboardControl: DashboardControl);
	    start(): void;
	    stop(): void;
	}

}
declare module DevExpress.Dashboard.Designer {
    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import EventSubscriber = DevExpress.Dashboard.Internal.EventSubscriber;
    import CustomizeDataItemContainerSectionsEventArgs = DevExpress.Dashboard.Designer.CustomizeDataItemContainerSectionsEventArgs;
	export interface BindingPanelExtensionOptions {
	    onCustomizeDataItemContainerSections?: (args: CustomizeDataItemContainerSectionsEventArgs) => void;
	}
	export interface BindingPanelExtensionEvents {
	    customizeDataItemContainerSections: CustomizeDataItemContainerSectionsEventArgs;
	}
	export class BindingPanelExtension implements IExtension {
	    private dashboardControl;
	    name: string;
	    private _subscriptions;
	    private _optionManager;
	    on: EventSubscriber<BindingPanelExtensionEvents>;
	    off: EventSubscriber<BindingPanelExtensionEvents>;
	    constructor(dashboardControl: DashboardControl, options?: BindingPanelExtensionOptions);
	    private _contextMenuSubscriber;
	    private _updateEmptyItemTemplate;
	    private _updateDashboardItemMenu;
	    start(): void;
	    stop(): void;
	}

}
declare module DevExpress.Dashboard.Designer {
    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import IDataServiceClient = DevExpress.Dashboard.Internal.IDataServiceClient;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import ItemMenuViewModel = DevExpress.Dashboard.Internal.Designer.ItemMenuViewModel;
	export class ConversionPanelExtension implements IExtension {
	    private dashboardControl;
	    name: string;
	    private _subscriptions;
	    constructor(dashboardControl: DashboardControl);
	    _contextMenuSubscriber(itemContextMenu: ItemMenuViewModel): void;
	    start(): void;
	    stop(): void;
	    _updateContextMenu(itemContextMenu: ItemMenuViewModel, item: DashboardItem, dashboard: Dashboard, serviceClient: IDataServiceClient): void;
	    private properties;
	}

}
declare module DevExpress.Dashboard.Designer {

    import KeyEventType = DevExpress.Dashboard.KeyEventType;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
	export class UndoRedoExtension extends DisposableObject {
	    private dashboardControl;
	    name: string;
	    private _undoEngine;
	    constructor(dashboardControl: DashboardControl);
	    reset(): void;
	    processKeyEvent(keyEventType: KeyEventType, eventArgs: JQueryKeyEventObject): boolean;
	    start(): void;
	    undo(): void;
	    redo(): void;
	    undoEnabled(): boolean;
	    redoEnabled(): boolean;
	    stop(): void;
	    isChanged: ko.Computed<boolean>;
	}

}
declare module DevExpress.Dashboard.Designer {

    import IExtension = DevExpress.Dashboard.IExtension;
    import SequenceAction = DevExpress.Dashboard.SequenceAction;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import ConfirmDialogViewModel = DevExpress.Dashboard.Internal.Designer.ConfirmDialogViewModel;
	export class SaveDashboardExtension implements IExtension {
	    private dashboardControl;
	    private _menuItem;
	    name: string;
	    _confirmDialogViewModel: ConfirmDialogViewModel;
	    private _customTemplate;
	    private _isDashboardDirty;
	    canSaveDashboard: ko.Computed<boolean>;
	    designerToViewerAction: SequenceAction;
	    constructor(dashboardControl: DashboardControl);
	    start(): void;
	    stop(): void;
	    private readonly _toolboxExtension;
	    private readonly _undoEngineExtension;
	    performSaveDashboard(dashboardId: string, dashboardJson: string): JQueryPromise<any>;
	    ensureDashboardSaved(action: () => void): void;
	    saveDashboard(): JQueryPromise<any>;
	}

}
declare module DevExpress.Dashboard.Designer {
    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
	export class CreateDashboardExtension implements IExtension {
	    private dashboardControl;
	    name: string;
	    private _newDashboardMenuItem;
	    private _viewModel;
	    constructor(dashboardControl: DashboardControl);
	    start(): void;
	    stop(): void;
	    showCreateNewDashboard: () => void;
	    performCreateDashboard(dashboardName: string, dashboardJson: string): JQueryPromise<void>;
	    private _createNewDashboard;
	}

}
declare module DevExpress.Dashboard.Designer {
    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import IDashboardItemMenu = DevExpress.Dashboard.Internal.Designer.IDashboardItemMenu;
	export class InteractivityPanelExtension implements IExtension {
	    private dashboardControl;
	    name: string;
	    private _subscriptions;
	    constructor(dashboardControl: DashboardControl);
	    _contextMenuSubscriber(itemContextMenu: IDashboardItemMenu): void;
	    _updateContextMenu(menu: IDashboardItemMenu, item: DashboardItem): void;
	    start(): void;
	    stop(): void;
	}

}
declare module DevExpress.Dashboard.Designer {
    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
	export class OpenDashboardExtension implements IExtension {
	    private dashboardControl;
	    name: string;
	    private _menuItem;
	    constructor(dashboardControl: DashboardControl);
	    start(): void;
	    stop(): void;
	    loadDashboard(dashboardId: string): JQueryPromise<any>;
	}

}
declare module DevExpress.Dashboard.Designer {
    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;
	export class DashboardTitleEditorExtension extends DisposableObject implements IExtension {
	    private dashboardControl;
	    name: string;
	    private _menuItem;
	    private _titlePreviewViewModel;
	    private _titleSettingsViewModel;
	    constructor(dashboardControl: DashboardControl);
	    start(): void;
	    stop(): void;
	    private _updateTitleToolbar;
	    private _createTitleSettings;
	}

}
declare module DevExpress.Dashboard.Designer {

    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import ParameterListEditorViewModel = DevExpress.Dashboard.Internal.Designer.ParameterListEditorViewModel;
	export class DashboardParameterEditorExtension implements IExtension {
	    private dashboardControl;
	    name: string;
	    private _menuItem;
	    _viewModel: ParameterListEditorViewModel;
	    constructor(dashboardControl: DashboardControl);
	    start(): void;
	    stop(): void;
	    dashboard: ko.Computed<Dashboard>;
	}

}
declare module DevExpress.Dashboard.Designer {



























}
declare module DevExpress.Dashboard.Designer {





}
declare module DevExpress.Dashboard.Model {
    import SectionOptions = DevExpress.Dashboard.Designer.SectionOptions;
    import CustomPropertyMetadata = DevExpress.Dashboard.Model.CustomPropertyMetadata;
    import ICustomItemBinding = DevExpress.Dashboard.Model.ICustomItemBinding;
    import ICustomItemProperty = DevExpress.Dashboard.Model.ICustomItemProperty;
	export interface ICustomItemMetaData {
	    bindings?: Array<ICustomItemBinding>;
	    properties?: Array<ICustomItemProperty>;
	    optionsPanelSections?: Array<SectionOptions>;
	    customProperties?: Array<CustomPropertyMetadata>;
	    interactivity?: {
	        filter?: boolean;
	        drillDown?: boolean;
	    };
	    index?: number;
	    groupName?: string;
	    icon: string;
	    title: string;
	}

}
declare module DevExpress.Dashboard {
import dxElement = DevExpress.core.dxElement;
    import CustomItemViewer = DevExpress.Dashboard.CustomItemViewer;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import CustomItem = DevExpress.Dashboard.Model.CustomItem;
    import ICustomItemMetaData = DevExpress.Dashboard.Model.ICustomItemMetaData;
	export interface DashboardContainer {
	    id: string;
	    dashboard: Dashboard;
	}
	export type ErrorInfo = JQueryXHR | string;
	export interface IExtension {
	    name: string;
	    start?(): void;
	    stop?(): void;
	    processKeyEvent?(keyEventType: KeyEventType, eventArgs: JQueryKeyEventObject): boolean;
	    designerToViewerAction?: SequenceAction;
	    viewerToDesignerAction?: SequenceAction;
	}
	export interface ICustomItemExtension extends IExtension {
	    metaData: ICustomItemMetaData;
	    createViewerItem: (item: CustomItem, element: dxElement, content: any) => CustomItemViewer;
	}
	export type KeyEventType = 'keyup' | 'keydown';
	export interface KnockoutTemplate {
	    name: string;
	    data?: any;
	}
	export interface WorkingModeSwitchingOptions {
	    surfaceLeft: number;
	}
	export interface SequenceAction {
	    orderNo: number;
	    action: (options: WorkingModeSwitchingOptions) => JQueryPromise<any>;
	}
	export interface IRemoteService {
	    getFromServer: (url: any, data?: any, queryOptions?: any) => JQueryXHR;
	    postToServer: (url: any, data?: any) => JQueryXHR;
	    performPostback: (url: any, args: any) => void;
	}
	export interface AjaxRemoteServiceOptions {
	    beforeSend?: (jqXHR: JQueryXHR, settings: JQueryAjaxSettings) => any;
	    complete?: (jqXHR: JQueryXHR, textStatus: string) => any;
	    headers?: {
	        [key: string]: any;
	    };
	}
	export interface DashboardInfo {
	    id: string;
	    name: string;
	}

}
declare module DevExpress.Dashboard.Internal {
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import DimensionFilterValues = DevExpress.Dashboard.Internal.Model.DimensionFilterValues;
    import DataSource = DevExpress.Dashboard.Model.DataSource;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import IQueryParameter = DevExpress.Dashboard.Model.IQueryParameter;
    import DashboardContainer = DevExpress.Dashboard.DashboardContainer;
    import IRemoteService = DevExpress.Dashboard.IRemoteService;
    import ExportMode = DevExpress.Dashboard.Internal.ExportMode;
    import IDataServiceUrls = DevExpress.Dashboard.Internal.IDataServiceUrls;
    import IErrorHandler = DevExpress.Dashboard.Internal.IErrorHandler;
    import IFilterItem = DevExpress.Dashboard.Internal.IFilterItem;
	export interface ExportInfo {
	    Mode: ExportMode;
	    GroupName: string;
	    FileName: string;
	    ClientState: any;
	    Format: any;
	    DocumentOptions: any;
	    ItemType: string;
	}
	export interface ItemExportModel {
	    name: string;
	    query: any;
	    drillDownFormattableValues: Array<DimensionFilterValues>;
	    filterFormattableValues: Array<DimensionFilterValues>;
	    selectedValues: Array<DimensionFilterValues>;
	}
	interface ICommonQueryArgs {
	    dashboardId: string;
	    parameters: IQueryParameter[];
	    dashboard?: Object;
	}
	export interface IDataServiceClient {
	    convertItem(item: DashboardItem, destinationItemTypeName: string): JQueryPromise<{}>;
	    getParameterValues(dataSourceId: string, dataSource: DataSource, dataMember: string, valueMember: string, displayMember: string, sortOrder: string, sortByMember: string, parameterType: string): JQueryPromise<{}>;
	    getDimensionUniqueValues(dataSource: DataSource, dataMember: string, dimension: Dimension): JQueryPromise<{}>;
	    getDimensionFilterItems(dashboardItem: DashboardItem, dimensionDataMember: string, previousState: Array<IFilterItem>, branch: Array<any>): JQueryPromise<Array<IFilterItem>>;
	    getDimensionFilterString(dashboardItem: DashboardItem, dimensionDataMember: string, previousState: Array<IFilterItem>): JQueryPromise<string>;
	    getFieldList(dataSource: DataSource, dataMember: string, fieldPath: string): JQueryPromise<{}>;
	    getItemData(item: DashboardItem, isModeAllowsToReduceData: boolean): JQueryPromise<{}>;
	    getColoringScheme: (itemName: string) => JQueryPromise<{}>;
	    getMapShapeFile: (itemName: string) => JQueryPromise<{}>;
	    getDashboardPalette: () => JQueryPromise<Object>;
	    getUnderlyingData: (itemName: string, columnValues: Array<string>, rowValues: Array<string>, columnNames: Array<string>, dataQueryParams: any) => JQueryPromise<{}>;
	    markDataSourcesForReload: () => JQueryPromise<{}>;
	    performExport(exportArgs: ExportInfo, exportModels: ItemExportModel[]): any;
	    getBatchItemData(args: Array<DashboardItem>, isModeAllowsToReduceData: boolean): JQueryPromise<any>;
	}
	export class ViewerDataServiceClient implements IDataServiceClient {
	    protected _dashboardContainer: DashboardContainer;
	    protected _errorHandler: IErrorHandler;
	    protected _dataServiceUrls: IDataServiceUrls;
	    protected _remoteService: IRemoteService;
	    static maxQueryStringLength: number;
	    constructor(_dashboardContainer: DashboardContainer, _errorHandler: IErrorHandler, _dataServiceUrls: IDataServiceUrls, _remoteService: IRemoteService);
	    getParameterValues(dataSourceId: string, dataSource: DataSource, dataMember: string, valueMember: string, displayMember: string, sortOrder: string, sortByMember: string, parameterType: string): JQueryPromise<{}>;
	    performExport(exportInfo: ExportInfo, exportModels: ItemExportModel[]): void;
	    getDimensionUniqueValues(dataSource: DataSource, dataMember: string, dimension: Dimension): JQueryPromise<{}>;
	    getDimensionFilterItems(dashboardItem: DashboardItem, dimensionDataMember: string, previousState: Array<IFilterItem>, branch: Array<any>): JQueryPromise<Array<IFilterItem>>;
	    getDimensionFilterString(dashboardItem: DashboardItem, dimensionDataMember: string, previousState: Array<IFilterItem>): JQueryPromise<string>;
	    getFieldList(dataSource: DataSource, dataMember: string, fieldPath: string): JQueryPromise<{}>;
	    getColoringScheme: (itemName?: string) => JQueryPromise<{}>;
	    getDashboardPalette: () => JQueryPromise<{}>;
	    convertItem(item: DashboardItem, destinationItemTypeName: string): JQueryPromise<{}>;
	    _getItemDataQuery(item: DashboardItem, isModeAllowsToReduceData: boolean): any;
	    getItemData: (item: DashboardItem, isModeAllowsToReduceData: boolean) => JQueryPromise<any>;
	    getBatchItemData: (items: DashboardItem[], isModeAllowsToReduceData: boolean) => JQueryPromise<any>;
	    getMapShapeFile: (itemName: string) => JQueryXHR;
	    getUnderlyingData: (itemName: string, columnValues: string[], rowValues: string[], columnNames: string[], dataQueryParams: any) => JQueryPromise<{}>;
	    markDataSourcesForReload: () => JQueryPromise<{}>;
	    private _queryParamsToQueryString;
	    protected _createCommonArgs(): ICommonQueryArgs;
	    protected _performRequest(url: string, requestArgs: Object): JQueryXHR;
	    protected _performRequestCore(url: string, params: Object): JQueryXHR;
	}
	export class DesignerDataServiceClient extends ViewerDataServiceClient implements IDataServiceClient {
	    constructor(_dashboardContainer: DashboardContainer, _errorHandler: IErrorHandler, _dataServiceUrls: IDataServiceUrls, _remoteService: IRemoteService);
	    convertItem(item: DashboardItem, destinationItemTypeName: string): JQueryPromise<{}>;
	    getDimensionUniqueValues(dataSource: DataSource, dataMember: string, dimension: Dimension): JQueryPromise<{}>;
	    getDimensionFilterItems(item: DataDashboardItem, dimensionDataMember: string, previousState: Array<IFilterItem>, branch: Array<any>): JQueryPromise<Array<IFilterItem>>;
	    getDimensionFilterString(item: DataDashboardItem, dimensionDataMember: string, previousState: Array<IFilterItem>): JQueryPromise<string>;
	    getFieldList(dataSource: DataSource, dataMember: string, fieldPath: string): JQueryPromise<{}>;
	    getColoringScheme: (itemName?: string) => JQueryPromise<{}>;
	    getDashboardPalette: () => JQueryPromise<{}>;
	    protected _createCommonArgs(): ICommonQueryArgs;
	    protected _performRequestCore(url: any, data: any): JQueryXHR;
	}
	export {};

}
declare module DevExpress.Dashboard.Internal {

    import IDataSourceProvider = DevExpress.Dashboard.Internal.Designer.IDataSourceProvider;
    import Dimension = DevExpress.Dashboard.Model.Dimension;
    import CalculatedField = DevExpress.Dashboard.Model.CalculatedField;
    import DataSource = DevExpress.Dashboard.Model.DataSource;
    import IDataSourceConsumer = DevExpress.Dashboard.Model.IDataSourceConsumer;
    import DataField = DevExpress.Dashboard.Internal.Model.DataField;
    import IDataField = DevExpress.Dashboard.Internal.Model.IDataField;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DynamicListLookUpSettings = DevExpress.Dashboard.Model.DynamicListLookUpSettings;
    import Parameter = DevExpress.Dashboard.Model.Parameter;
    import IDataServiceClient = DevExpress.Dashboard.Internal.IDataServiceClient;
	export interface IFilterItem {
	    Level: number;
	    Text: string;
	    Value: any;
	    IsBlank: boolean;
	    IsChecked: boolean;
	    IsVisible: boolean;
	}
	export interface IParameterValueViewModel {
	    Value: any;
	    DisplayText?: any;
	}
	export interface IFieldConstraint {
	    (field: IDataField): boolean;
	}
	export interface IDataFieldsProvider {
	    findDataField(dataSourceName: string, dataMemberName: string, fullFieldName: string, hasGroupSeparator?: boolean): JQueryPromise<IDataField>;
	    getDataFieldsArray: (dataSourceName: string, dataMember: string, fieldPath: string, filterDelegate: (field: IDataField) => boolean) => JQueryPromise<Array<IDataField>>;
	}
	export interface IDataItemValuesProvider {
	    getDimensionUniqueValues(dataSourceName: string, dataMember: string, dimension: Dimension): JQueryPromise<Array<any>>;
	}
	export function patchCalcFieldPath(dataSource: DataSource, calculatedField: CalculatedField, fieldName: string): string;
	export function trimLeadingPathElement(path: string, element: string): string;
	export function splitFullFieldName(fullFieldName: string): {
	    path: string;
	    name: string;
	};
	export function isStartedWith(path: any, value: any): boolean;
	export function findDataMember(dataSource: DataSource, path: string): {
	    dataMember: string;
	    fieldPath: string;
	};
	export function getFirstDataMember(dataSource: DataSource): string;
	export class DataSourceBrowser implements IDataFieldsProvider, IDataItemValuesProvider, IDataSourceProvider {
	    _dataSources: ko.ObservableArray<DataSource>;
	    private isDesignMode;
	    parameters?: ko.ObservableArray<Parameter>;
	    _serviceClient?: ko.Observable<IDataServiceClient>;
	    isLoading: ko.Observable<boolean>;
	    private _disposables;
	    private _dynamicParametersValueCache;
	    private _dimensionValuesCache;
	    private _fieldsCache;
	    private _dataSourcesSubscription;
	    _cacheNestedFields(path: string, field: DataField): void;
	    private _findInFieldsCache;
	    constructor(_dataSources: ko.ObservableArray<DataSource>, isDesignMode: ko.Observable<boolean>, parameters?: ko.ObservableArray<Parameter>, _serviceClient?: ko.Observable<IDataServiceClient>, isLoading?: ko.Observable<boolean>);
	    getDimensionFilterItems(dashboardItem: DashboardItem, dimensionDataMember: string, previousState: Array<IFilterItem>, branch: Array<any>): JQueryPromise<Array<IFilterItem>>;
	    getDimensionFilterString(dashboardItem: DashboardItem, dimensionDataMember: string, previousState: Array<IFilterItem>): JQueryPromise<string>;
	    getDataFieldsArray(dataSourceName: string, dataMember: string, fieldPath: string, filterDelegate?: (field: IDataField) => boolean): JQueryPromise<Array<IDataField>>;
	    isFolder(path: string): boolean;
	    findPathToFieldInTree(dataSourceName: string, dataMemberName: string, fieldName: string, constraint: IFieldConstraint): JQueryPromise<string>;
	    findDataField(dataSourceName: string, dataMemberName: string, fullFieldName: string, separateGroupFields?: boolean): JQueryPromise<IDataField>;
	    fuzzyFindFields(startPath: string, searchFor: string): JQueryPromise<Array<{
	        path: string;
	        field: IDataField;
	    }>>;
	    findDataSource(dsName: string): DataSource;
	    dataMembersSupported(dsc: IDataSourceConsumer): boolean;
	    getDataFields(dsc: IDataSourceConsumer): ko.ObservableArray<string>;
	    clearFieldsCache(path: string): void;
	    clearDynamicParametersValueCache(): void;
	    removeDataSource: (dataSource: DataSource) => void;
	    initDataSource(dataSource: DataSource): void;
	    dynamicLookUpValuesLoaded: (dynamicListLookUpSettings: DynamicListLookUpSettings) => void;
	    getParameterValues(parameterType: string, dynamicListLookUpSettings: DynamicListLookUpSettings): ko.ObservableArray<IParameterValueViewModel>;
	    getDimensionUniqueValues(dataSourceName: string, dataMember: string, dimension: Dimension): JQueryPromise<Array<any>>;
	    splitFullPath(fullPath?: string): {
	        dataSource: string;
	        dataMember: string;
	        fieldPath: string;
	    };
	    private _subscribeDataSources;
	    private _unsubscribeDataSources;
	    dispose(): void;
	}
	export function isNonCollectionDataField(dataField: IDataField): boolean;
	export function getDataFields(fieldsNames: Array<string>, dataSource: string, dataMember: string, dataFieldProvider: IDataFieldsProvider): JQueryPromise<Array<IDataField>>;

}
declare module DevExpress.Dashboard.Internal.Designer {

    import DataSourceBrowser = DevExpress.Dashboard.Internal.DataSourceBrowser;
    import IFieldConstraint = DevExpress.Dashboard.Internal.IFieldConstraint;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import IDataField = DevExpress.Dashboard.Internal.Model.IDataField;
    import ObjectPropertiesWrapper = DevExpress.Dashboard.Internal.Designer.ObjectPropertiesWrapper;
    import ContainerTypeSelector = DevExpress.Dashboard.Internal.Designer.ContainerTypeSelector;
	export var KnownTabs: {
	    Binding: string;
	    DataShaping: string;
	    NumericFormat: string;
	    DateTimeFormat: string;
	    TopN: string;
	    Interactivity: string;
	    Common: string;
	    Totals: string;
	    AxisX: string;
	    AxisY: string;
	    Legend: string;
	    ColoringOptions: string;
	    ColorLegend: string;
	    WeightedLegend: string;
	    Layout: string;
	    ConditionalFormatting: string;
	    FormatRuleCommon: string;
	    FormatRuleCondition: string;
	    FormatRuleMisc: string;
	    CustomRanges: string;
	    Type: string;
	    PointLabels: string;
	    DeltaOptions: string;
	    ScaleOptions: string;
	    SparklineOptions: string;
	    CardTemplates: string;
	    DeltaFormats: string;
	    CardTemplateSettings: string;
	    ContentArrangement: string;
	    ShapeLabels: string;
	    Labels: string;
	    DataLayout: string;
	    DataItemsGroup: string;
	    ColorScheme: string;
	    Calculations: string;
	    Expression: string;
	    TileOptions: string;
	    UnwrappedDataItem: string;
	    CustomMapOptions: string;
	    MeasureFilter: string;
	    TabContainer: string;
	};
	export class AccordionTab {
	    name: string;
	    category: string | ko.Observable<string>;
	    private _tabModel;
	    constructor(name: string, category: string | ko.Observable<string>, tabModel?: any);
	    grabData(tab: AccordionTab): void;
	    visible: ko.Computed<boolean>;
	    tabModel: ko.Observable<any>;
	    orderNo: number;
	    readonly summary: ko.Computed<string>;
	    readonly buttons: Array<any>;
	    tabTemplate?: string;
	    headerTemplate?: string;
	    headerModel?: any;
	    unsubscribeTabModel(tabModel: any): void;
	    disposeTabModel(tabModel: any): void;
	    dispose(): void;
	}
	export class ContentInHeaderAccordionTab extends AccordionTab {
	    orderNo: number;
	    style: string;
	    headerTemplate: string;
	    hasNoBorder: boolean;
	    onTitleClick: (tabModel: any, data: any, event: any) => boolean;
	}
	export class TypeAccordionTab extends AccordionTab {
	    tabModel: ko.Observable<ContainerTypeSelector>;
	    orderNo: number;
	    style: string;
	    headerTemplate: string;
	    tabTemplate: string;
	    hasNoBorder: boolean;
	    onTitleClick: (tabModel: ContainerTypeSelector, data: any, event: any) => void;
	}
	export class StyleAccordionTab extends AccordionTab {
	    tabModel: ko.Observable<ContainerTypeSelector>;
	    orderNo: number;
	    style: string;
	    headerTemplate: string;
	    hasNoBorder: boolean;
	    onTitleClick: (tabModel: ContainerTypeSelector, data: any, event: any) => void;
	}
	export class ItemGroupAccordionTab extends AccordionTab {
	    style: string;
	    orderNo: number;
	    headerTemplate: string;
	    readonly headerHeight: number;
	    hasNoBorder: boolean;
	}
	export class BindingAccordionTab extends AccordionTab {
	    name: string;
	    category: string;
	    constructor(name: string, category: string);
	    tabModel: ko.Observable<{
	        choosenField: ko.Observable<ko.Observable<IDataField>>;
	        dataItemLink: DataItemLink;
	        constraint: IFieldConstraint;
	        dataSourceBrowser: DataSourceBrowser;
	        dataMemberPath: ko.Observable<ko.Subscribable<string>>;
	        additionalProperties: ko.Observable<ko.Subscribable<ObjectPropertiesWrapper>>;
	        summary: ko.Computed<string>;
	        summaryHint: ko.Computed<string>;
	    }>;
	    tabTemplate: string;
	    readonly summaryHint: ko.Computed<string>;
	    unsubscribeTabModel(tabModel: any): void;
	    grabData(tab: BindingAccordionTab): void;
	    orderNo: number;
	}

}
declare module DevExpress.Dashboard.Designer {

    import dxForm =  DevExpress.ui.dxForm ;
    import ICustomPropertiesProvider = DevExpress.Dashboard.Internal.Model.ICustomPropertiesProvider;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DataItemContainer = DevExpress.Dashboard.Model.DataItemContainer;
    import AccordionTab = DevExpress.Dashboard.Internal.Designer.AccordionTab;
	export interface SectionOptions {
	    title: string;
	    onContentReady?: (e: {
	        component?: dxForm;
	        element?: DevExpress.core.dxElement;
	    }) => void;
	    onInitialized?: (e: {
	        component?: dxForm;
	        element?: DevExpress.core.dxElement;
	    }) => void;
	    onFieldDataChanged?: (e: {
	        component?: dxForm;
	        element?: DevExpress.core.dxElement;
	        model?: any;
	        dataField?: string;
	        value?: any;
	    }) => any;
	    items: Array<DevExpress.ui.dxFormSimpleItem>;
	}
	export interface CustomizeSectionsEventArgs {
	    dashboardItem: DashboardItem;
	    addSection(options: SectionOptions): void;
	}
	export interface CustomizeDataItemContainerSectionsEventArgs extends CustomizeSectionsEventArgs {
	    dashboardItem: DashboardItem;
	    dataItemContainer: DataItemContainer;
	}
	export function _customizeTabs(tabs: AccordionTab[], customSectionOption: SectionOptions, object: ICustomPropertiesProvider): void;

}
declare module DevExpress.Dashboard.Model {

    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
	export class CustomItemWindowDefinition extends MeasureCalculationWindowDefinition {
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    equals(def: any): boolean;
	}

}
declare module DevExpress.Dashboard.Model {


    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    import IDataItemProvider = DevExpress.Dashboard.Internal.Model.IDataItemProvider;
	export class SliceTable extends SerializableModel {
	    private _dataItemProvider;
	    constructor(_dataItemProvider: IDataItemProvider, modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    push(bindings: Array<DataItemLink>, dataItemType: string): void;
	    dimensions: ko.ObservableArray<DataItemLink>;
	    measures: ko.ObservableArray<DataItemLink>;
	    name: ko.Observable<string>;
	}

}
declare module DevExpress.Dashboard.Model {


    import SectionOptions = DevExpress.Dashboard.Designer.SectionOptions;
    import ColorSchemeEntry = DevExpress.Dashboard.Model.ColorSchemeEntry;
    import CustomPropertyMetadata = DevExpress.Dashboard.Model.CustomPropertyMetadata;
    import DataItemLink = DevExpress.Dashboard.Model.DataItemLink;
    import MeasureCalculationWindowDefinition = DevExpress.Dashboard.Model.MeasureCalculationWindowDefinition;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import DashboardItemColoringOptions = DevExpress.Dashboard.Model.DashboardItemColoringOptions;
    import ICustomItemBinding = DevExpress.Dashboard.Model.ICustomItemBinding;
    import ICustomItemBindingValue = DevExpress.Dashboard.Model.ICustomItemBindingValue;
    import ICustomDataRow = DevExpress.Dashboard.Model.ICustomDataRow;
    import ICustomItemMetaData = DevExpress.Dashboard.Model.ICustomItemMetaData;
    import ICustomItemProperty = DevExpress.Dashboard.Model.ICustomItemProperty;
    import SliceTable = DevExpress.Dashboard.Model.SliceTable;
	export class CustomItem extends DataDashboardItem {
	    private _meta;
	    static ItemType: string;
	    static getPropertyInfo(p: ICustomItemProperty): IDashboardSerializationInfo;
	    static _getBindingLinkName(propertyName: string): string;
	    private static _getSerializationsInfo;
	    private static _hasInteractivityTargets;
	    private static _hasColoringDimensions;
	    private static _hasColoringMeasures;
	    private static _isFilterAllowed;
	    private static _isDrillDownAllowed;
	    private static _getInfo;
	    colorScheme: ko.ObservableArray<ColorSchemeEntry>;
	    coloringOptions: DashboardItemColoringOptions;
	    customItemType: ko.Observable<string>;
	    sliceTables: ko.ObservableArray<SliceTable>;
	    interactivityOptions: any;
	    interactivityTargets: ko.ObservableArray<DataItemLink>;
	    coloringDimensions: ko.ObservableArray<DataItemLink>;
	    coloringMeasures: ko.ObservableArray<DataItemLink>;
	    customMetadata: {};
	    constructor(_meta: ICustomItemMetaData, modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    _clearBindings(): void;
	    getBindingValue(propertyName: string, index?: number): Array<ICustomItemBindingValue>;
	    iterateData(action: (item: ICustomDataRow) => any, sliceTableName?: string): void;
	    protected _getDefaultItemType(): string;
	    private _getSliceTable;
	    _getAllSelectionValues(activeDimensions: Array<string>): any[];
	    private getSlice;
	    private _getStorage;
	    private _getValidIds;
	    private _getColor;
	    private _getColorMeasureId;
	    private _getMeasureValue;
	    private _getMeasureDisplayText;
	    private _getDimensionUniqueValue;
	    private _getDimensionValue;
	    private _getDimensionDisplayText;
	    private _format;
	    private _getServerText;
	    private _getSpecialValue;
	    private _getValueBySliceKey;
	    _isExcludingAllFilter: ko.Computed<boolean>;
	    readonly customBindings: Array<ICustomItemBinding>;
	    readonly legacyCustomProperties: Array<ICustomItemProperty>;
	    readonly customInteractivity: any;
	    readonly _optionsPanelSections: Array<SectionOptions>;
	    protected _getMasterFilterMode(): string;
	    protected _getDrillDownEnabled(): boolean;
	    protected _getIgnoreMasterFilter(): boolean;
	    protected _getInteractivityDimensionLinks(): DataItemLink[];
	    isDrillDownAllowed(): boolean;
	    isFilterAllowed(): boolean;
	    _isInteractivityAllowed(): boolean;
	    protected _getCanColorByMeasures(): boolean;
	    protected _getCanColorByDimensions(): boolean;
	    _getColorizableDataItemsInfo(): Array<{
	        items: Array<DataItemLink>;
	        prefixId: string;
	    }>;
	    _getDefaultCalculationWindowDefinition(): MeasureCalculationWindowDefinition;
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    protected _getInfoCore(): IDashboardSerializationInfo[];
	    static _getCustomPropertiesSerializationInfo(customItemType: string, dynamicCustomPropertiesMetadata: Array<CustomPropertyMetadata>): IDashboardSerializationInfo;
	}

}
declare module DevExpress.Dashboard.Internal.Model {
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
	export function getIconName(typeName: any, icon?: any): any;
	export function getItemIconName(item: DashboardItem): any;
	export function getItemTitle(item: DashboardItem): any;
	export function getItemJson(itemType: string): {
	    '@ItemType': string;
	    '@CustomItemType': string;
	};

}
declare module DevExpress.Dashboard.Internal.Model {

    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
	export function createDashboardItem(dashboardItemJSON: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer): DashboardItem;

}
declare module DevExpress.Dashboard.Internal.Model {
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DashboardLayoutGroup = DevExpress.Dashboard.Model.DashboardLayoutGroup;
	export class DashboardLayoutCreator {
	    private _clientWidth;
	    private _clientHeight;
	    private _dashboard;
	    _layoutRoot: DashboardLayoutGroup;
	    constructor(_clientWidth: number, _clientHeight: number, _dashboard: Dashboard);
	    rebuildLayout(): void;
	    private _removeIncorrectLayoutNodes;
	    private _getParentItem;
	    _createLayoutNodes(dashboardItems: Array<DashboardItem>): void;
	    _createLayoutNode(dashboardItem: DashboardItem, layoutGroup: DashboardLayoutGroup): void;
	}

}
declare module DevExpress.Dashboard.Model {























}
declare module DevExpress.Dashboard.Model {


    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import FilterElementItemBase = DevExpress.Dashboard.Model.FilterElementItemBase;
	export class TreeViewItem extends FilterElementItemBase {
	    autoExpand: ko.Observable<boolean>;
	    constructor(dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getInfoCore(): IDashboardSerializationInfo[];
	    protected _getDefaultItemType(): string;
	    protected _allowAllValue(): boolean;
	    protected _isMultiselectable(): boolean;
	}

}
declare module DevExpress.Dashboard.Model {

    import DashboardLayoutNode = DevExpress.Dashboard.Model.DashboardLayoutNode;
	export class DashboardLayoutItem extends DashboardLayoutNode {
	    protected readonly _template: string;
	    constructor(modelJson?: Object, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    protected _getDefaultItemType(): string;
	    _deleteDashbordItem(): void;
	}

}
declare module DevExpress.Dashboard.Model {



































































































































































}
declare module DevExpress.Dashboard.Model {



}
declare module DevExpress.Dashboard.Internal {

    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DashboardLayoutNode = DevExpress.Dashboard.Model.DashboardLayoutNode;
    import DashboardTabPage = DevExpress.Dashboard.Model.DashboardTabPage;
    import IDisposable = DevExpress.Dashboard.Model.IDisposable;
    import KnockoutEntry = DevExpress.Dashboard.Internal.Model.KnockoutEntry;
    import DashboardItemJson = DevExpress.Dashboard.Metadata.DashboardItemJson;
    import IResizableModel = DevExpress.Dashboard.Internal.IResizableModel;
	export interface ISizeController {
	    getWidth: () => number;
	    getHeight: () => number;
	    requestRepaint: JQueryCallback;
	    renderImmediately?: boolean;
	    setConstraints?: (constraints: {
	        min: ISize;
	        max: ISize;
	    }) => void;
	    visible?: ko.Subscribable<boolean>;
	}
	export interface ILayoutItemViewModel {
	    create: (modelItemJson: any, location: string, insertionBehavior?: LayoutItemInsertionBehavior) => any;
	    moveTo: (itemModel?: ILayoutItemViewModel, location?: string, insertionBehavior?: LayoutItemInsertionBehavior) => any;
	    delete: () => void;
	    canAttach?: (something: ILayoutItemViewModel | DashboardItemJson) => boolean;
	    createTabPage: () => void;
	    model: DashboardLayoutNode;
	    item: ko.Subscribable<DashboardItem>;
	    dashboardItem: ko.Subscribable<string>;
	    orientation: ko.Observable<string>;
	    weight: ko.Observable<number>;
	    visibleItems: ko.ObservableArray<ILayoutItemViewModelProvider>;
	    childItems: ko.ObservableArray<ILayoutItemViewModelProvider>;
	    activeTabPage: KnockoutEntry<DashboardTabPage>;
	    activeTabIndex: KnockoutEntry<number>;
	    template: string;
	    hasItem: ko.Subscribable<boolean>;
	    ignoreChildMaxHeight: boolean;
	    dragOverInnerElementController?: DragOverController;
	    getPlaceholder(): ILayoutItemViewModel;
	}
	export interface ILayoutItemViewModelProvider {
	    _createViewModel(): ILayoutItemViewModel;
	}
	export interface DragOverController {
	    selector: string;
	    onDragOver(elementIndex: number): void;
	}
	export interface ISize {
	    width: number;
	    height: number;
	}
	export interface Constrains {
	    min: {
	        width: ko.Observable<number>;
	        height: ko.Observable<number>;
	    };
	    max: {
	        width: ko.Observable<number>;
	        height: ko.Observable<number>;
	    };
	}
	export interface LayoutDroppableItem {
	    node: LayoutItem;
	    dropBehavior: LayoutItemInsertionBehavior;
	}
	export type LayoutItemInsertionBehavior = 'InsertIntoGroup' | 'InsertBesideGroup';
	export function _syncLayoutHelper<T, U extends IDisposable>(sourceArray: ko.ObservableArray<T>, destArray: ko.ObservableArray<U>, addHandler: (value: T) => U): ko.Subscription;
	export function setHoverLocation(hoverLayoutItem: LayoutItem, location?: string, dropBehavior?: LayoutItemInsertionBehavior): void;
	export let SplitterSize: number;
	export let DashboardItemHeaderHeight: number;
	export const MinWeight = 0.00001;
	export class LayoutItem implements IResizableModel, IDisposable {
	    viewModel: ILayoutItemViewModel;
	    private _isUpdating;
	    static findLargestItem(layoutItem: LayoutItem): {
	        maxSquare: number;
	        item: LayoutItem;
	    };
	    private _constraints;
	    _parent: ko.Observable<LayoutItem>;
	    private _width;
	    private _height;
	    private _subscriptions;
	    private _changeWeight;
	    private _changeWeightCore;
	    private _correntWeight;
	    private _safeSetWidth;
	    private _safeSetHeight;
	    private _updateChildrenSize;
	    private _updateChildrenResizeHandles;
	    constructor(viewModel: ILayoutItemViewModel, parent?: LayoutItem);
	    dispose(): void;
	    isValidWidth(val: number): boolean;
	    isValidHeight(val: number): boolean;
	    setConstraints: (constraints: {
	        min: ISize;
	        max: ISize;
	    }) => void;
	    getSelectionParentsList(location: string): LayoutDroppableItem[];
	    private _getRequiredOrientationByLocation;
	    private _inverseOrientation;
	    findLayoutItem(criteria: (item: LayoutItem) => boolean): LayoutItem;
	    findLayoutItemByItemModel(itemModel: ILayoutItemViewModel): LayoutItem;
	    items: ko.ObservableArray<LayoutItem>;
	    minWidth: ko.Computed<number>;
	    minHeight: ko.Computed<number>;
	    maxWidth: ko.Computed<number>;
	    maxHeight: ko.Computed<number>;
	    width: ko.Computed<number>;
	    height: ko.Computed<number>;
	    contentWidth: ko.Computed<number>;
	    contentHeight: ko.Computed<number>;
	    containerWidth: ko.Computed<number>;
	    containerHeight: ko.Computed<number>;
	    resizeHandles: ko.Observable<string>;
	    isSelected: ko.Observable<boolean>;
	    areChildrenSelected: ko.Computed<boolean>;
	    dragOverLocation: ko.Observable<string>;
	    itemStyle: ko.Computed<string>;
	    onEvent(item: LayoutItem, event: string): any;
	    coverClickHandler: (e: any) => void;
	    coverMouseOverHandler: (e: any) => void;
	    resizeStarted: () => void;
	    resizeCompleted: () => void;
	    getContext: () => any;
	    getLocalContext: () => any;
	    verticalPaddings: ko.Observable<number>;
	    horizontalPaddings: ko.Observable<number>;
	    isDesignMode: ko.Observable<boolean>;
	    isLayoutReady: ko.Observable<boolean>;
	    updateSize(width: number, height: number): void;
	    visible: ko.Computed<boolean>;
	    create(modelItemJson?: any, location?: string, insertBehavior?: LayoutItemInsertionBehavior): LayoutItem;
	    moveTo(layoutNode: LayoutItem, location: string, insertBehavior?: LayoutItemInsertionBehavior): LayoutItem;
	    delete(): void;
	    getRoot(): LayoutItem;
	    canAttach(something: ILayoutItemViewModel | DashboardItemJson): boolean;
	    placeholderItem: LayoutItem;
	    getPlaceholder(): LayoutItem;
	    repaintCallbacks: JQuery.Callbacks<Function>;
	    sizeController: ISizeController;
	}

}
declare module DevExpress.Dashboard.Model {


    import ILayoutItemViewModel = DevExpress.Dashboard.Internal.ILayoutItemViewModel;
    import ILayoutItemViewModelProvider = DevExpress.Dashboard.Internal.ILayoutItemViewModelProvider;
    import LayoutItemInsertionBehavior = DevExpress.Dashboard.Internal.LayoutItemInsertionBehavior;
    import IDashboardItemsProvider = DevExpress.Dashboard.Internal.Model.IDashboardItemsProvider;
    import KnockoutEntry = DevExpress.Dashboard.Internal.Model.KnockoutEntry;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import TypedSerializableModel = DevExpress.Dashboard.Model.TypedSerializableModel;
    import DashboardItemJson = DevExpress.Dashboard.Metadata.DashboardItemJson;
	export type LayoutItemInsertPosition = 'left' | 'right' | 'top' | 'bottom';
	export abstract class DashboardLayoutNode extends TypedSerializableModel implements ILayoutItemViewModelProvider {
	    static _canAttach(parent: DashboardLayoutNode, dashboardLayoutNode: DashboardLayoutNode | DashboardItemJson): boolean;
	    dashboardItem: ko.Observable<string>;
	    itemType: ko.Observable<string>;
	    weight: ko.Observable<number>;
	    parentNode: ko.Observable<any>;
	    _dashboard: ko.Observable<IDashboardItemsProvider>;
	    _item: ko.Observable<DashboardItem>;
	    item: DashboardItem;
	    constructor(dashboardLayoutItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    findLayoutItem(dashboardItem: DashboardItem): DashboardLayoutNode;
	    insert(itemToInsert: DashboardLayoutNode | DashboardItem, position: LayoutItemInsertPosition): void;
	    moveTo(targetItem: DashboardLayoutNode, position: LayoutItemInsertPosition): void;
	    _moveTo(targetItem: DashboardLayoutNode, position: LayoutItemInsertPosition, insertionBehavior?: LayoutItemInsertionBehavior): void;
	    remove(): void;
	    _relativeWidth: ko.Computed<any>;
	    _relativeHeight: ko.Computed<any>;
	    _relativeArea: ko.Computed<number>;
	    _create(modelItemJson?: any, position?: LayoutItemInsertPosition, insertionBehavior?: LayoutItemInsertionBehavior): DashboardLayoutNode;
	    _validateParentNode(newParentNode: any): void;
	    _canAttach(itemToAttach: DashboardLayoutNode | DashboardItemJson): boolean;
	    _viewModel: ILayoutItemViewModel;
	    _createViewModel(): ILayoutItemViewModel;
	    protected readonly _template: string;
	    protected readonly _ignoreChildMaxHeight: boolean;
	    protected readonly _visibleItems: ko.ObservableArray<DashboardLayoutNode>;
	    protected readonly _childItems: ko.ObservableArray<DashboardLayoutNode>;
	    protected readonly _orientation: ko.Observable<string>;
	    protected readonly _createPlaceholderFunc: () => ILayoutItemViewModel;
	    protected readonly _dragOverInnerElementController: any;
	    protected _activeTabPage: KnockoutEntry;
	    protected _activeTabIndex: KnockoutEntry;
	    protected _delete(): void;
	    protected _insertItemCore(layoutNodeToInsert: DashboardLayoutNode, position: LayoutItemInsertPosition, insertionBehavior?: LayoutItemInsertionBehavior): void;
	    protected _setItemCore(newItem: DashboardItem): void;
	    protected _createTabPage(): void;
	    _ensureItemParentContainer(): void;
	    _deleteDashbordItem(): void;
	}

}
declare module DevExpress.Dashboard.Internal.Model {

    import DataSource = DevExpress.Dashboard.Model.DataSource;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import GroupItem = DevExpress.Dashboard.Model.GroupItem;
    import DashboardTabPage = DevExpress.Dashboard.Model.DashboardTabPage;
    import DashboardLayoutNode = DevExpress.Dashboard.Model.DashboardLayoutNode;
	export interface IDashboardItemsProvider {
	    findItem(itemId: string): DashboardItem;
	    items: ko.ObservableArray<DashboardItem>;
	    groups: ko.ObservableArray<GroupItem>;
	    dataSources: ko.ObservableArray<DataSource>;
	    layout: ko.Observable<DashboardLayoutNode>;
	    _createDashboardLayoutItem(modelItemJson?: any): DashboardLayoutNode;
	    _createDashboardLayoutNode(dashboardItem: DashboardItem): DashboardLayoutNode;
	    _getDisplayDashboardItem(tabPage: DashboardTabPage): DashboardItem;
	    _allItems: ko.PureComputed<Array<DashboardItem>>;
	}
	export interface IExternalFilter {
	    dimensions: Array<any>;
	    range: Array<any>;
	    values: Array<any>;
	    isExcludingAllFilter: boolean;
	}
	export interface IMasterFilterItemsProvider {
	    _masterFilterItems: ko.Subscribable<Array<DataDashboardItem>>;
	}
	export interface IColorSignaturesProvider {
	    _colorableItems: ko.Subscribable<DashboardItem[]>;
	}
	export interface Notification {
	    title: string;
	    detail?: string;
	}
	export interface IViewport {
	    RightLongitude: number;
	    LeftLongitude: number;
	    BottomLatitude: number;
	    TopLatitude: number;
	    CenterPointLongitude: number;
	    CenterPointLatitude: number;
	}
	export interface IViewportViewModel extends IViewport {
	    CreateViewerPaddings: boolean;
	}

}
declare module DevExpress.Dashboard.Model {


    import CustomProperties = DevExpress.Dashboard.Model.CustomProperties;
    import ICustomPropertiesProvider = DevExpress.Dashboard.Internal.Model.ICustomPropertiesProvider;
    import ItemState = DevExpress.Dashboard.Model.ItemState;
    import DimensionFilterValues = DevExpress.Dashboard.Internal.Model.DimensionFilterValues;
    import IDashboardComponent = DevExpress.Dashboard.Internal.Model.IDashboardComponent;
    import Notification = DevExpress.Dashboard.Internal.Model.Notification;
    import IDashboardSerializationInfo = DevExpress.Dashboard.Metadata.IDashboardSerializationInfo;
    import IDashboardSerializationInfoArray = DevExpress.Dashboard.Metadata.IDashboardSerializationInfoArray;
    import PropertyCategory = DevExpress.Dashboard.Metadata.PropertyCategory;
    import TypedSerializableModel = DevExpress.Dashboard.Model.TypedSerializableModel;
    import PaneContentHolder = DevExpress.Dashboard.Internal.Model.PaneContentHolder;
	export type UiStateType = 'live' | 'empty' | 'error' | 'loading';
	export abstract class DashboardItem extends TypedSerializableModel implements IDashboardComponent, ICustomPropertiesProvider {
	    static _getCommonItemType(itemType: string): string;
	    getUniqueNamePrefix(): string;
	    name: ko.Observable<string>;
	    componentName: ko.Observable<string>;
	    showCaption: ko.Observable<boolean>;
	    parentContainer: ko.Observable<string>;
	    customProperties: CustomProperties;
	    _useNeutralFilterMode: ko.Observable<boolean>;
	    _state: ko.Computed<ItemState>;
	    _actions: ko.Computed<Array<string>>;
	    _uiState: ko.Subscribable<UiStateType>;
	    _errorState: ko.Observable<Notification>;
	    _viewerItemCreated: ko.Observable<boolean>;
	    _paneContentHolder: PaneContentHolder;
	    _allowMultiselection: ko.Observable<boolean>;
	    private _serverContent;
	    protected _dataQueryParams: ko.Computed<any>;
	    readonly _caption: string;
	    constructor(dashboardItemJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer, info?: IDashboardSerializationInfoArray);
	    _isInteractivityAllowed(): boolean;
	    protected _getLayersCount(): number;
	    protected _getLayerName(): string;
	    protected _updateContentViewModel(content: any): void;
	    protected _updateContentData(content: any): void;
	    protected _updateDataQueryParams(params: any): void;
	    protected _validateSelectionByData(selection: Array<Array<any>>): void;
	    protected _extendContentState(content: any): void;
	    _getDisplayFilterValues(limitCount?: number): Array<DimensionFilterValues>;
	    _getDisplayFilterValuesExternal(): void;
	    _getServerContent(): any;
	    _getFullServerContent(): any;
	    _subcribeServerContent(handler: (content: any) => void): ko.Subscription;
	    _getContentCategories(): PropertyCategory[];
	    _getDataQueryParams(): any;
	    _subcribeDataQueryParams(handler: (content: any) => void): ko.Subscription;
	    _getExportingSelection(): void;
	    _setState(parameter: ItemState): void;
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    protected abstract _getInfoCore(): IDashboardSerializationInfo[];
	}

}
declare module DevExpress.Dashboard.Model {


    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
	export abstract class SerializableModel implements DevExpress.Analytics.Utils.ISerializableModel {
	    constructor(model?: any, serializer?: DevExpress.Analytics.Utils.IModelSerializer, info?: DevExpress.Analytics.Utils.ISerializationInfoArray);
	}
	export abstract class TypedSerializableModel extends SerializableModel {
	    itemType: ko.Observable<string>;
	    _model: any;
	    constructor(model?: any, serializer?: DevExpress.Analytics.Utils.IModelSerializer, info?: DevExpress.Analytics.Utils.ISerializationInfoArray);
	    protected abstract _getDefaultItemType(): string;
	    protected _getUniqueNamePrefix(): string;
	}
	export let itemTypesMap: {
	    [key: string]: {
	        type: typeof DashboardItem;
	        customItemType?: typeof DataDashboardItem;
	        groupName: string;
	        title: string;
	        index: number;
	    };
	};

}
declare module DevExpress.Dashboard.Model {


    import Color = DevExpress.Dashboard.Model.Color;
    import IDashboardComponent = DevExpress.Dashboard.Internal.Model.IDashboardComponent;
    import TypedSerializableModel = DevExpress.Dashboard.Model.TypedSerializableModel;
    import ColorSchemeDefinition = DevExpress.Dashboard.Model.ColorSchemeDefinition;
    import DimensionKey = DevExpress.Dashboard.Model.DimensionKey;
    import MeasureDefinition = DevExpress.Dashboard.Model.MeasureDefinition;
	export class ColorSchemeEntry extends TypedSerializableModel implements IDashboardComponent {
	    itemComponentName: string;
	    private name;
	    dataSource: ko.Observable<string>;
	    dataMember: ko.Observable<string>;
	    color: ko.Observable<Color>;
	    paletteIndex: ko.Observable<number>;
	    displayText: ko.Subscribable<string>;
	    colorText: ko.Computed<string>;
	    measureKeys: ko.ObservableArray<MeasureDefinition>;
	    dimensionKeys: ko.ObservableArray<DimensionKey>;
	    componentName: ko.Subscribable<string>;
	    private _definition;
	    readonly custom: boolean;
	    readonly definition: ColorSchemeDefinition;
	    constructor(modelJson?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer, itemComponentName?: string, name?: string);
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    clone(): ColorSchemeEntry;
	    equals(entry: ColorSchemeEntry): boolean;
	    getUniqueNamePrefix(): string;
	    protected _getDefaultItemType(): string;
	}
	export class AutoColorSchemeEntry extends ColorSchemeEntry {
	    constructor(modelJson: any, serializer: DevExpress.Analytics.Utils.ModelSerializer, componentName: string, name: string);
	    readonly custom: boolean;
	}

}
declare module DevExpress.Dashboard.Model {


    import ColorSchemeEntry = DevExpress.Dashboard.Model.ColorSchemeEntry;
    import CustomProperties = DevExpress.Dashboard.Model.CustomProperties;
    import ICustomPropertiesProvider = DevExpress.Dashboard.Internal.Model.ICustomPropertiesProvider;
    import DashboardState = DevExpress.Dashboard.Model.DashboardState;
    import DataSource = DevExpress.Dashboard.Model.DataSource;
    import IColorSignaturesProvider = DevExpress.Dashboard.Internal.Model.IColorSignaturesProvider;
    import IMasterFilterItemsProvider = DevExpress.Dashboard.Internal.Model.IMasterFilterItemsProvider;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DataDashboardItem = DevExpress.Dashboard.Model.DataDashboardItem;
    import GroupItem = DevExpress.Dashboard.Model.GroupItem;
    import DashboardTabPage = DevExpress.Dashboard.Model.DashboardTabPage;
    import DashboardLayoutGroup = DevExpress.Dashboard.Model.DashboardLayoutGroup;
    import DashboardLayoutNode = DevExpress.Dashboard.Model.DashboardLayoutNode;
    import IQueryParameter = DevExpress.Dashboard.Model.IQueryParameter;
    import Parameter = DevExpress.Dashboard.Model.Parameter;
    import SerializableModel = DevExpress.Dashboard.Model.SerializableModel;
    import DashboardTitle = DevExpress.Dashboard.Model.DashboardTitle;
	export class Dashboard extends SerializableModel implements IMasterFilterItemsProvider, IColorSignaturesProvider, ICustomPropertiesProvider {
	    dashboardJSON: any;
	    static _dataSourceTypesMap: {
	        [key: string]: new (json: Object, serializer: DevExpress.Analytics.Utils.ModelSerializer) => DataSource;
	    };
	    static _createDataSource(dataSourceJSON: Object, serializer: DevExpress.Analytics.Utils.ModelSerializer): DataSource;
	    dataSources: ko.ObservableArray<DataSource>;
	    parameters: ko.ObservableArray<Parameter>;
	    colorScheme: ko.ObservableArray<ColorSchemeEntry>;
	    currencyCultureName: ko.Observable<string>;
	    items: ko.ObservableArray<DashboardItem>;
	    groups: ko.ObservableArray<GroupItem>;
	    layout: ko.Observable<DashboardLayoutGroup>;
	    title: DashboardTitle;
	    customProperties: CustomProperties;
	    _tabPages: ko.ObservableArray<DashboardItem>;
	    _allItems: ko.PureComputed<Array<DashboardItem>>;
	    _dataDashboardItems: ko.Computed<DataDashboardItem[]>;
	    _colorableItems: ko.Subscribable<DashboardItem[]>;
	    _queryParameters: ko.Subscribable<IQueryParameter[]>;
	    _masterFilterItems: ko.Computed<DataDashboardItem[]>;
	    _state: ko.Computed<DashboardState>;
	    private _disposables;
	    private _componentNameGenerator;
	    stateString: string;
	    constructor(dashboardJSON?: any, serializer?: DevExpress.Analytics.Utils.ModelSerializer);
	    dispose(): void;
	    getInfo(): DevExpress.Analytics.Utils.ISerializationInfoArray;
	    getJSON(): any;
	    findItem(itemId: string): DashboardItem;
	    rebuildLayout(clientWidth?: number, clientHeight?: number): void;
	    _getDisplayDashboardItem(tabPage: DashboardTabPage): DashboardItem;
	    _changeItem(oldItem: DashboardItem, newItem: DashboardItem): void;
	    _duplicateItem(item: DashboardItem): void;
	    _createDashboardLayoutItem(modelItemJson?: any): DashboardLayoutNode;
	    _createDashboardLayoutNode(dashboardItem: DashboardItem): DashboardLayoutNode;
	    _findDataItem(itemId: string): DataDashboardItem;
	    _interactivityGroupPathToRoot(dashboardItem: DashboardItem): Array<GroupItem | DashboardTabPage>;
	    private _processDeleteDataSource;
	}

}
declare module DevExpress.Dashboard {
    import ItemData = DevExpress.Dashboard.Data.ItemData;
    import ItemDataAxisName = DevExpress.Dashboard.Data.ItemDataAxisName;
    import ItemDataAxisPoint = DevExpress.Dashboard.Data.ItemDataAxisPoint;
    import ItemDataAxisPointTuple = DevExpress.Dashboard.Data.ItemDataAxisPointTuple;
    import ItemDataDelta = DevExpress.Dashboard.Data.ItemDataDelta;
    import ItemDataDimension = DevExpress.Dashboard.Data.ItemDataDimension;
    import ItemDataMeasure = DevExpress.Dashboard.Data.ItemDataMeasure;
    import ItemUnderlyingData = DevExpress.Dashboard.Data.ItemUnderlyingData;
    import PrimitiveType = DevExpress.Dashboard.Data.PrimitiveType;
    import Dashboard = DevExpress.Dashboard.Model.Dashboard;
    import DashboardItem = DevExpress.Dashboard.Model.DashboardItem;
    import DashboardItemCaptionToolbarOptions = DevExpress.Dashboard.DashboardItemCaptionToolbarOptions;
    import DashboardTitleToolbarOptions = DevExpress.Dashboard.DashboardTitleToolbarOptions;
	export interface DashboardItemBaseEventArgs {
	    itemName: string;
	    dashboardItem: DashboardItem;
	}
	export interface ItemElementCustomColorEventArgs extends DashboardItemBaseEventArgs {
	    getTargetElement: () => ItemDataAxisPointTuple;
	    getMeasures: () => Array<ItemDataMeasure>;
	    getColor: () => string;
	    setColor: (color: string) => void;
	}
	export type DashboardSelectionMode = 'None' | 'Single' | 'Multiple';
	export interface ItemVisualInteractivityEventArgs extends DashboardItemBaseEventArgs {
	    getSelectionMode: () => DashboardSelectionMode;
	    setSelectionMode: (value: DashboardSelectionMode) => void;
	    isHighlightingEnabled: () => boolean;
	    enableHighlighting: (value: boolean) => void;
	    getTargetAxes: () => ItemDataAxisName[];
	    setTargetAxes: (value?: ItemDataAxisName[]) => void;
	    getDefaultSelection(): Array<ItemDataAxisPointTuple>;
	    setDefaultSelection(selection: Array<ItemDataAxisPointTuple>): void;
	}
	export interface ItemClickEventArgs extends DashboardItemBaseEventArgs {
	    getData: () => ItemData;
	    getAxisPoint: (axis?: ItemDataAxisName) => ItemDataAxisPoint;
	    getMeasures: () => Array<ItemDataMeasure>;
	    getDeltas: () => Array<ItemDataDelta>;
	    getDimensions: () => Array<ItemDataDimension>;
	    requestUnderlyingData: (onCompleted: (data: ItemUnderlyingData) => void, dataMembers: string[]) => void;
	}
	export interface ItemMasterFilterStateChangedEventArgs extends DashboardItemBaseEventArgs {
	    values: Array<Array<PrimitiveType>>;
	}
	export interface ItemDrillDownStateChangedEventArgs extends DashboardItemBaseEventArgs {
	    values: Array<PrimitiveType>;
	    action: 'Down' | 'Up';
	}
	export interface ItemActionAvailabilityChangedEventArgs extends DashboardItemBaseEventArgs {
	}
	export interface ItemSelectionChangedEventArgs extends DashboardItemBaseEventArgs {
	    getCurrentSelection: () => Array<ItemDataAxisPointTuple>;
	}
	export interface SelectedTabPageChangedEventArgs {
	    tabContainerName: string;
	    selectedPage: string;
	    previousPage: string;
	}
	export interface ItemCaptionToolbarUpdatedEventArgs extends DashboardItemBaseEventArgs {
	    options: DashboardItemCaptionToolbarOptions;
	}
	export interface DashboardTitleToolbarUpdatedEventArgs {
	    dashboard: Dashboard;
	    options: DashboardTitleToolbarOptions;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import baseItem = DevExpress.Dashboard.Internal.Viewer.baseItem;
	export class stubItem extends baseItem {
	    constructor(container: HTMLElement, options: any);
	    protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
	export class GaugeDeltaIndicator {
	    _renderer: any;
	    _root: any;
	    _getOptions: Function;
	    constructor(parameters: any);
	    dispose(): this;
	    draw(): any[];
	    layoutOptions(): {
	        horizontalAlignment: any;
	        verticalAlignment: any;
	    };
	    measure(): any[];
	    move(rect: any): void;
	    freeSpace(): void;
	}

}
declare module DevExpress.Dashboard {






































































































}
declare module DevExpress.Dashboard {










}
declare module DevExpress.Dashboard.Internal.Viewer {
import dxElement = DevExpress.core.dxElement;
    import CardWidget = DevExpress.Dashboard.CardWidget;
	export class CardWidgetImplementation implements CardWidget {
	    private _cardBackColor;
	    private _onCustomizeText;
	    private _changed;
	    _notifyChanged: () => void;
	    _element: dxElement;
	    constructor(notifyHandler?: any);
	    onCustomizeText: (args: {
	        getValue: () => any;
	        getDefaultText: () => string;
	    }) => string;
	    cardBackColor: string;
	    element: () => dxElement;
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import cardItemStyleSettingsProvider = DevExpress.Dashboard.Internal.Viewer.cardItemStyleSettingsProvider;
    import cardLayout = DevExpress.Dashboard.Internal.Viewer.cardLayout;
    import IWidgetsViewer = DevExpress.Dashboard.Internal.Viewer.IWidgetsViewer;
    import CardWidgetImplementation = DevExpress.Dashboard.Internal.Viewer.CardWidgetImplementation;
    import kpiItem = DevExpress.Dashboard.Internal.Viewer.kpiItem;
    import widgetItemCore = DevExpress.Dashboard.Internal.Viewer.widgetItemCore;
	export interface ICardModel {
	    Layout?: ICardLayoutModel;
	}
	export interface ICardLayoutModel {
	    MinWidth?: number;
	    MaxWidth?: number;
	    Rows?: Array<ICardLayoutRowModel>;
	}
	export interface ICardLayoutRowModel {
	    VAlignment?: string;
	    Indent?: number;
	    Elements?: Array<ICardLayoutElementModel>;
	}
	export type RowElementType = 'Title' | 'Subtitle' | 'Text' | 'ActualValue' | 'AbsoluteVariation' | 'PercentVariation' | 'PercentOfTarget' | 'TargetValue' | 'Dimension' | 'Measure' | 'CardName';
	export interface ICardLayoutElementModel {
	    Type?: string;
	    Color?: number;
	    PredefinedColor?: string;
	    HAlignment?: string;
	    FontSize?: number;
	    FontFamily?: string;
	    FontStyle?: string;
	    DataId?: string;
	    Text?: string;
	    Size?: number;
	    Id?: string;
	    IndicatorWidthRatio?: number;
	    SparklineOptions?: SparklineOptionsModel;
	}
	export interface SparklineOptionsModel {
	    ViewType: string;
	    HighlightMinMaxPoints: boolean;
	    HighlightStartEndPoints: boolean;
	}
	export class cardsItem extends kpiItem {
	    _hasSparkline: boolean;
	    useNewViewer: boolean;
	    layoutCollection: {
	        [id: string]: cardLayout;
	    };
	    apiHandlers: CardWidgetImplementation;
	    _styleSettingsProvider: cardItemStyleSettingsProvider;
	    constructor(container: HTMLElement, options: any);
	    protected _initializeData(newOptions: any): void;
	    protected renderContentUnsafe(element: HTMLElement, changeExisting: boolean, afterRenderCallback?: any): boolean;
	    protected createWidgetViewer(element: HTMLElement, options: any): IWidgetsViewer;
	    private initializeLayoutCollection;
	    protected _isPaneEmpty(): boolean;
	    _isBorderRequired(): boolean;
	    _isTransparentBackground(): boolean;
	    _getSpecificWidgetViewerOptions(): any;
	    _getIgnorePadding(): boolean;
	    _getWidgetType(): string;
	    _getElementsName(): string;
	    private setOldCardProperties;
	    private setNewCardProperties;
	    _setSourceItemProperties(sourceItem: widgetItemCore, cardModel: any, props: any): void;
	    _getWidget(): CardWidgetImplementation;
	    _generateInnerBorderClassesUnsafe(element?: HTMLElement): string[];
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import CardItemFormatRuleModel = DevExpress.Dashboard.Internal.Data.CardItemFormatRuleModel;
    import FormatRuleModelBase = DevExpress.Dashboard.Internal.Data.FormatRuleModelBase;
    import ICardLayoutElementModel = DevExpress.Dashboard.Internal.Viewer.ICardLayoutElementModel;
    import ICardLayoutModel = DevExpress.Dashboard.Internal.Viewer.ICardLayoutModel;
    import SparklineOptionsModel = DevExpress.Dashboard.Internal.Viewer.SparklineOptionsModel;
    import IWidgetItemDataAccessor = DevExpress.Dashboard.Internal.Viewer.IWidgetItemDataAccessor;
    import CardWidgetImplementation = DevExpress.Dashboard.Internal.Viewer.CardWidgetImplementation;
	export class cardLayout {
	    private apiHandlers?;
	    rows: Array<cardRow>;
	    minWidth: number;
	    maxWidth: number;
	    getCardBackgroundColor(): string;
	    getStyleSettings: (data: IWidgetItemDataAccessor) => any;
	    constructor(apiHandlers?: CardWidgetImplementation);
	    _createCFFilter: (elementType?: string) => (rule: FormatRuleModelBase, applyToCardId: string) => boolean;
	    _isValidCardId(cardRule: CardItemFormatRuleModel, applyToCardId: string): boolean;
	    fill(layoutModel: ICardLayoutModel): void;
	    private isDeltaType;
	    private convertElementColor;
	    getElementValue(data: IWidgetItemDataAccessor, elementModel: ICardLayoutElementModel): {
	        getValue: () => any;
	        getDefaultText: () => string;
	    };
	    private convertVAlignment;
	    private convertHAlignment;
	}
	export class cardRow {
	    vAlignment: verticalAlignment;
	    indent: number;
	    elements: Array<cardRowElementBase>;
	}
	export abstract class cardRowElementBase {
	    hAlignment: horizontalAlignment;
	    getStyleSettings: (data: IWidgetItemDataAccessor) => any;
	}
	export class cardRowElement extends cardRowElementBase {
	    fontFamily: string;
	    color: string;
	    predefinedColor: string;
	    fontSize: number;
	    getValueArgs: (data: IWidgetItemDataAccessor) => {
	        getValue: () => any;
	        getDefaultText: () => string;
	    };
	    getText: (data: IWidgetItemDataAccessor) => string;
	    getIndicatorType: (data: IWidgetItemDataAccessor) => string;
	    getIsGood: (data: IWidgetItemDataAccessor) => boolean;
	}
	export class cardIndicatorElement extends cardRowElementBase {
	    height: number;
	    width: number;
	    getIndicatorType: (data: IWidgetItemDataAccessor) => string;
	    getIsGood: (data: IWidgetItemDataAccessor) => boolean;
	}
	export class cardSparklineElement extends cardRowElementBase {
	    height: number;
	    getSparklineOptions: (data: IWidgetItemDataAccessor) => any;
	}
	export class sparklineOptions {
	    viewType: string;
	    highlightMinMaxPoints: boolean;
	    highlightStartEndPoints: boolean;
	    constructor(sparklineOptionsModel: SparklineOptionsModel);
	}
	export enum horizontalAlignment {
	    left = 0,
	    right = 1,
	    center = 2
	}
	export enum verticalAlignment {
	    top = 0,
	    center = 1,
	    bottom = 2
	}

}
declare module DevExpress.Dashboard.Internal.Viewer {
    import FormatRuleModelBase = DevExpress.Dashboard.Internal.Data.FormatRuleModelBase;
    import cardLayout = DevExpress.Dashboard.Internal.Viewer.cardLayout;
	export class widgetItemCore {
	    onIncidentOccurred: (e: any) => void;
	    tag: any;
	    '__DX_DASHBOARD_DATA_ID': string;
	    isSelected: boolean;
	    hoverEnabled: boolean;
	    cursor: string;
	    value: any;
	    indicator: any;
	    subvalues: any;
	    title: any;
	    any: any;
	    subTitle: string;
	    geometry: any;
	    valueIndicator: any;
	    subvalueIndicator: any;
	    scale: any;
	    animation: any;
	    mainValue: any;
	    variableValue1: any;
	    variableValue2: any;
	    sparklineOptions: any;
	    layout: cardLayout;
	    dataAccessor: IWidgetItemDataAccessor;
	}
	export interface IWidgetItemDataAccessor {
	    getActualValue?(): any;
	    getActualValueText?(): string;
	    getTargetValue?(): any;
	    getTargetValueText?(): string;
	    getAbsoluteVariationValue?(): any;
	    getAbsoluteVariationText?(): string;
	    getPercentVariationValue?(): any;
	    getPercentVariationText?(): string;
	    getPercentOfTargetValue?(): any;
	    getPercentOfTargetText?(): string;
	    getDimensionValue(dataId: string): any;
	    getDimensionValueText(dataId: string): string;
	    getIndicatorType?(): any;
	    getIsGood?(): boolean;
	    getMainValueText?(): string;
	    getSubValue1Text?(): string;
	    getSubValue2Text?(): string;
	    getMeasureValue?(): any;
	    getMeasureDisplayText?(): string;
	    getSparklineOptions?(): any;
	    getSelectionValues?(): Array<any>;
	    getTitle?(): string;
	    getSubtitle?(): string;
	    getCaptions?(): Array<string>;
	    getGaugeRange?(): any;
	    getCardName?(): any;
	    getStyleSettingsInfo?(ruleFilter: (rule: FormatRuleModelBase, applyToKpiElementId: string) => boolean): any;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
    import widgetItemCore = DevExpress.Dashboard.Internal.Viewer.widgetItemCore;
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
	export class kpiDataController extends dataControllerBase {
	    setSourceItemProperties: (sourceItem: widgetItemCore, element: any, properties: any) => void;
	    _axisPoints: any;
	    _sparklineAxisPoints: any;
	    constructor(options: any);
	    getDataSource(): any[];
	    _createSourceItem(axisPoint: any, kpiElement: any): widgetItemCore;
	    _getDeltaValue(axisPoint: any, kpiElement: any): any;
	    _getMeasureValue(axisPoint: any, kpiElement: any): any;
	    _getSparklineValues(axisPoint: any, kpiElement: any): any[];
	    private _getStyleSettingsInfo;
	    private _correctAxisPoint;
	    protected _getStyleIndexes(rule: any, cellInfo: any, points: any): any[];
	    _initialize(): void;
	    _iterateKpiItems(delegate: any): void;
	    _getGaugeRange(element: any): void;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
    import kpiDataController = DevExpress.Dashboard.Internal.Data.kpiDataController;
	export class cardDataController extends kpiDataController {
	    constructor(options: any);
	    _iterateKpiItems(delegate: any): void;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
    import ItemDataDeltaValue = DevExpress.Dashboard.Data.ItemDataDeltaValue;
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
	export class choroplethMapDataController extends dataControllerBase {
	    axisHash: any;
	    isEmpty: any;
	    constructor(options: any);
	    _prepare(): void;
	    hasRecords(): boolean;
	    getDeltaValue(attribute: any, deltaId: any): ItemDataDeltaValue;
	    getValue(attribute: any, measureName: any): any;
	    getDisplayText(attribute: any, measureName: any): any;
	    getUniqueValue(attribute: any): any;
	    getMinMax(measureName: any): {
	        min: any;
	        max: any;
	    };
	    getMeasureDescriptorById(valueId: any): any;
	    _getMeasureValue(attribute: any, measureName: any): any;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
	export class gaugeRangeCalculator {
	    _values: any;
	    _gaugeViewType: any;
	    _customMin: any;
	    _customMax: any;
	    _minDefined: any;
	    _maxDefined: any;
	    _minTickCount: any;
	    _maxTickCount: any;
	    _min: any;
	    _max: any;
	    _equalSign: any;
	    constructor(options: any);
	    getGaugeRange(): {
	        minorTickCount: any;
	        majorTickCount: any;
	        min: any;
	        max: any;
	    };
	    _getLeft(left: any, step: any): number;
	    _getRight(right: any, step: any): number;
	    _isFit(left: any, right: any, step: any, tickCount: any): boolean;
	    _extendRange(): void;
	    _setRangeStart(): void;
	    _defineMinMax(): void;
	    _signsEqual(number1: any, number2: any): boolean;
	    _defineMinMaxTicks(): void;
	    _chooseMultiplier(delta: any): any;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
    import kpiDataController = DevExpress.Dashboard.Internal.Data.kpiDataController;
	export class gaugeDataController extends kpiDataController {
	    _gaugeRanges: any;
	    _gaugeViewType: any;
	    constructor(options: any);
	    _iterateKpiItems(delegate: any): void;
	    _getGaugeRange(element: any): any;
	    _getGaugeValues(element: any): any[];
	    _initialize(): void;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
    import geoPointMapDataControllerBase = DevExpress.Dashboard.Internal.Data.geoPointMapDataControllerBase;
	export class geoPointMapDataController extends geoPointMapDataControllerBase {
	    constructor(options: any);
	    getPoint(index: any): any;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
	export class imageDataController extends dataControllerBase {
	    _imageAxisPoints: any;
	    constructor(options: any);
	    _getImageAxisPoints(): any;
	    getImageData(): any;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
    import chartDataControllerBase = DevExpress.Dashboard.Internal.Data.chartDataControllerBase;
	export class pieDataController extends chartDataControllerBase {
	    _measures: any;
	    _argumentAxisPoints: any;
	    settingsType: any;
	    constructor(options: any);
	    getPointDisplayTexts(pointTag: any, value: any, percent: any): {
	        argumentText: any;
	        valueText: any;
	        percentText: string;
	    };
	    isDiscreteArgument(): boolean;
	    createDataSource(seriesAxisPoint: any, valueDataMember: any): any[];
	    getValueDataMembers(): any;
	    getValueDisplayNames(seriesAxisPoint: any, valueDataMemberIndex: any): any;
	    _getCorrectZeroValue(value: any): number;
	    _getColorDataMemberByMeasureId(valueDataMember: any): any;
	    _getColorDataMemberByIndex(index: any): any;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
    import geoPointMapDataControllerBase = DevExpress.Dashboard.Internal.Data.geoPointMapDataControllerBase;
	export class pieMapDataController extends geoPointMapDataControllerBase {
	    elementCustomColor: any;
	    constructor(options: any);
	    getPoint(index: any, valueIndex: any): any;
	    _getAxisPointDimensionDescriptorId(): any;
	    formatValue(value: any): any;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
	export class pivotDataController extends dataControllerBase {
	    _columnPointsHash: any;
	    _rowPointsHash: any;
	    _measureIds: any;
	    _collapseStateCache: any;
	    _conditionalFormattingInfoCache: any;
	    constructor(options: any);
	    _createAreaFields(list: any, area: any): any[];
	    _getFields(): any[];
	    getDataSource(viewState: any, isColumn: any, path: any): {
	        fields: any[];
	        columns: any[];
	        rows: any[];
	        values: any[];
	    };
	    getStyleSettingsInfo(cellItem: any, collapseStateCache: any, conditionalFormattingInfoCache: any): any;
	    getAxisPointsHash(): {
	        columnPointsHash: any;
	        rowPointsHash: any;
	    };
	    _prepareHierarchy(root: any, headers: any, areaIndexHash: any, areaHash: any, isPartial: any, expandCollapsePaths: Array<Array<any>>, isCollapsePaths: boolean): void;
	    _getMeasureIds(): any[];
	    _prepareCells(columnHash: any, rowHash: any, partial: any): any[];
	    _getColumnAxis(): any;
	    _getRowAxis(): any;
	    _getCellInfo(cellItem: any): {
	        columnAxisPoint: any;
	        rowAxisPoint: any;
	    };
	    protected _getStyleIndexes(rule: any, cellInfo: any, points: any): any[];
	    _findStyleSettingsOnAxis(rowAxisPoint: any, columnAxisPoint: any, measureId: any, isRowAxis: any): any;
	    _getFormatRules(cellItem: any, cellInfo: any): any[];
	    _isRowValuePosition(): boolean;
	    _getAxisPointByPath(pointsHash: any, path: any, type: any): any;
	    _getFormatRulesByDataId(dataId: any): any[];
	    _getPointId(point: any): any;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
    import chartDataControllerProto = DevExpress.Dashboard.Internal.Data.chartDataControllerProto;
	export class scatterChartDataController extends chartDataControllerProto {
	    constructor(options: any);
	    getArgument(argumentAxisPoint: any): any;
	    protected getArgumentBindingValue(argumentPoint: any, pointIndex: any): any;
	    getArgumentDisplayPath(axisPoint: any): any;
	    getArgumentFormat(): any;
	    getArgumentText(argument: any): any;
	    _getTooltipHtml(series: any, point: any, seriesFormats: any, encodeHtml: any, color: any): string;
	    _getMeasureIds(): any[];
	    getTooltipArgumentText(obj: any): any;
	    _getTooltipArgumentText(axisPoint: any): any;
	    _customizePointLabelText(valueContainer: any, pointLabel: any, seriesInfo: any): any;
	    isQualitativeArgument(): boolean;
	    isDiscreteArgument(): boolean;
	    protected showPointLabels(pointLabelInfo: any): boolean;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
	export class textItemDataController extends dataControllerBase {
	    displayTexts: any;
	    constructor(options: any);
	    _initialize(): void;
	    getDisplayText(id: any): any;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
	export class treemapDataController extends dataControllerBase {
	    elementCustomColor: any;
	    last_dimension_id: any;
	    nodeHash: any;
	    constructor(options: any);
	    _prepare(): void;
	    getDataSource(): any[];
	    getLabel(node: any, encodeHtml?: boolean): any;
	    getTooltip(node: any, encodeHtml?: boolean): any;
	    getChildrenNodesUniqueValues(value: any): any[];
	    _fillChildrenNodesUniqueValues(res: any, node: any): void;
	    _getChildren(currentPoint: any, measureIndex: any, groupArgumentDataMembers: any, prevArgumentDataMember: any): any[];
	    _createNode(point: any, measureIndex: any, prevArgumentDataMember: any): {
	        name: any;
	        value: any;
	        valueText: any;
	        uniqueValue: any;
	        format: (value: any) => any;
	    };
	    _getNodeText(node: any, tileType: any, groupType: any, encodeHtml: any): any;
	    _getTextByContentType(contentType: any, argumentText: any, valueText: any, encodeHtml: any): any;
	    _getArgumentString(point: any, prevArgumentDataMember: any): any;
	    _getColor(point: any, measureIndex: any): any;
	    _getElementCustomColor(point: any, color: any, valueId: any): any;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
	export class DataControllerFactory {
	    createDataController(type: string, options: DataControllerOptions): dataControllerBase;
	}
	export interface DataControllerOptions {
	    multiData: any;
	    viewModel: any;
	    cfModel: any;
	    useNeutralFilterMode: boolean;
	    drillDownState: any;
	    axisPointHash: any;
	    elementCustomColor?: any;
	}
	export let defaultDataControllerFactory: DataControllerFactory;

}
declare module DevExpress.Dashboard.Internal.Data {
    import RenderHelper = DevExpress.Dashboard.Internal.Viewer.RenderHelper;
    import DataControllerOptions = DevExpress.Dashboard.Internal.Data.DataControllerOptions;
	export let DATA_POSTFIX: string;
	export let DEFAULT_SUBTITLE_SEPARATOR: string;
	export class dataControllerBase {
	    deltaIndicatorTypes: any;
	    multiData: any;
	    viewModel: any;
	    cfModel: any;
	    drillDownState: any;
	    useNeutralFilterMode: boolean;
	    constructor(options: DataControllerOptions);
	    isMultiselectable(): boolean;
	    update(selectedValues: any, encodeHtml: any): void;
	    getTitle(axisPoint: any, separator?: any, saveOrder?: any): any;
	    getAxisPointsHash(): void;
	    _getMeasureValueByAxisPoints(axisPoints: any, cfMeasureId: any): any;
	    _getSlice(axisPoints: any): any;
	    _getZeroPosition(zeroPositionMeasureId: any, columnAxisName: any, rowAxisName: any): any;
	    protected _getStyleIndexes(rule: any, cellInfo: any, points: any): any;
	    _getStyleSettingsInfoCore(cellInfo: any, rules: any, columnAxisName: any, rowAxisName: any): any;
	    _generateSparklineOptions(data: any, options: any, format: any): {
	        dataSource: any;
	        type: any;
	        onIncidentOccurred: typeof RenderHelper.widgetIncidentOccurred;
	        showMinMax: any;
	        showFirstLast: any;
	        tooltip: {
	            _justify: boolean;
	            container: string;
	            customizeTooltip: () => {
	                html: string;
	            };
	            zIndex: number;
	        };
	    };
	    _convertIndicatorType(type: any): any;
	    protected _findAxisPoint(dataId: any, axisPoint: any): any;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
    import dataControllerBase = DevExpress.Dashboard.Internal.Data.dataControllerBase;
	export class geoPointMapDataControllerBase extends dataControllerBase {
	    axisPoints: any;
	    constructor(options: any);
	    getPoint(index: any, valueIndex?: any): {
	        lat: any;
	        lon: any;
	        latSel: any;
	        lonSel: any;
	        pointsCount: any;
	        tooltipDimensions: any[];
	        tooltipMeasures: any[];
	    };
	    getCount(): any;
	    _prepare(): void;
	    _getAxisPointDimensionDescriptorId(): any;
	    _getMeasure(index: any, measureName: any): any;
	    _getMeasureValue(index: any, measureName: any): any;
	    _getMeasureDisplayText(index: any, measureName: any): any;
	    _getLatitude(index: any): any;
	    _getLatitudeValue(index: any): any;
	    _getLatitudeUniqueValue(index: any): any;
	    _getLongitude(index: any): any;
	    _getLongitudeValue(index: any): any;
	    _getLongitudeUniqueValue(index: any): any;
	    _getPointsCount(index: any): any;
	    _getTooltipDimensions(index: any): any[];
	    _getTooltipMeasures(index: any): any[];
	    _getAxisPoint(index: any): any;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
    import geoPointMapDataControllerBase = DevExpress.Dashboard.Internal.Data.geoPointMapDataControllerBase;
	export class bubbleMapDataController extends geoPointMapDataControllerBase {
	    constructor(options: any);
	    getPoint(index: any): any;
	    formatColor(value: any): any;
	    formatWeight(value: any): any;
	}

}
declare module DevExpress.Dashboard.Internal.Data {
	export let tagValuesProvider: {
	    getTag: (listSource: any, tagDataMembers: any, rowIndex: any) => any;
	    getTagByValues: (values: any) => any;
	};

}
declare module DevExpress.Dashboard.Internal.Data {
	export class tuple {
	    axisPoints: any;
	    constructor(axisPoints: any);
	    getAxisPoint(axisName: any): any;
	}

}
declare module DevExpress.Dashboard.Data {






















































}
declare module DevExpress.Dashboard.Data {





}
declare module DevExpress.Dashboard.Data {





}
declare module DevExpress.Dashboard {




}
declare module DevExpress.Dashboard.Internal.Designer {
	export interface DocVariableInfo {
	    id: string;
	    displayName: string;
	}
	export interface RichEditorBindingOptions {
	    initialDocument: string;
	    onSaving: (document: string) => void;
	    docVariables: DocVariableInfo[];
	    dashboardItemWidth?: number;
	    forceSave?: () => void;
	    documentModified?: () => boolean;
	}

}
declare module DevExpress.Dashboard.Internal.Designer {
    import dxPopup =  DevExpress.ui.dxPopup ;

    import ConfirmDialogViewModel = DevExpress.Dashboard.Internal.Designer.ConfirmDialogViewModel;
    import DocVariableInfo = DevExpress.Dashboard.Internal.Designer.DocVariableInfo;
	export class ValueAccessor {
	    getValue: () => any;
	    setValue: (value: any) => void;
	}
	export class RichEditExtensionViewModel {
	    private _isCloseConfirmed;
	    popup: dxPopup;
	    richEditorOptions: ko.Observable<any>;
	    show(options: ValueAccessor, docVariables: DocVariableInfo[], dashboardItemWidth: number): void;
	    close: () => void;
	    saveAndClose: () => void;
	    onHidden: () => void;
	    onHiding: (args: any) => void;
	    onInitialized: (args: any) => void;
	    confirmDialogViewModel: ConfirmDialogViewModel;
	}

}
declare module DevExpress.Dashboard.Designer {
    import IExtension = DevExpress.Dashboard.IExtension;
    import DashboardControl = DevExpress.Dashboard.DashboardControl;
    import DisposableObject = DevExpress.Dashboard.Model.DisposableObject;

	export class TextBoxItemEditorExtension extends DisposableObject implements IExtension {
	    private readonly _dashboardControl;
	    private readonly _viewModel;
	    private readonly _customTemplate;
	    name: string;
	    constructor(dashboardControl: DashboardControl);
	    start(): void;
	    private _extendTextBoxSerializationInfo;
	    private _getDashboardItemWidth;
	    stop(): void;
	}

}
declare module DevExpress.Dashboard.Designer {


}
declare module DevExpress.Dashboard.Internal {

	

}
